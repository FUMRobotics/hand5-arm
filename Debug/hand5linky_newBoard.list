
hand5linky_newBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006784  08006784  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006784  08006784  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e8  20000060  080067ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002348  080067ec  00022348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018df2  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004385  00000000  00000000  00038ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001125  00000000  00000000  0003e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ae7  00000000  00000000  0003f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3ae  00000000  00000000  000444dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000831e8  00000000  00000000  0005e88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ed0  00000000  00000000  000e1a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e7944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006628 	.word	0x08006628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006628 	.word	0x08006628

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f001 fa3d 	bl	800160c <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fb54 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f001 fb05 	bl	80017bc <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fb44 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a28      	ldr	r2, [pc, #160]	; (8000288 <HAL_ADC_MspInit+0xbc>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d149      	bne.n	8000280 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b27      	ldr	r3, [pc, #156]	; (800028c <HAL_ADC_MspInit+0xc0>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a26      	ldr	r2, [pc, #152]	; (800028c <HAL_ADC_MspInit+0xc0>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b24      	ldr	r3, [pc, #144]	; (800028c <HAL_ADC_MspInit+0xc0>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b21      	ldr	r3, [pc, #132]	; (800028c <HAL_ADC_MspInit+0xc0>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a20      	ldr	r2, [pc, #128]	; (800028c <HAL_ADC_MspInit+0xc0>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <HAL_ADC_MspInit+0xc0>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Motor1_Current_Pin|Motor2_Current_Pin|Motor3_Current_Pin|Motor4_Current_Pin
 800021c:	233f      	movs	r3, #63	; 0x3f
 800021e:	613b      	str	r3, [r7, #16]
                          |Motor5_Current_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4819      	ldr	r0, [pc, #100]	; (8000290 <HAL_ADC_MspInit+0xc4>)
 800022c:	f001 ff34 	bl	8002098 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <HAL_ADC_MspInit+0xcc>)
 8000234:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000238:	2200      	movs	r2, #0
 800023a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 800024a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000256:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 800025a:	2220      	movs	r2, #32
 800025c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000266:	f001 fdb7 	bl	8001dd8 <HAL_DMA_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000270:	f000 fae8 	bl	8000844 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 8000278:	621a      	str	r2, [r3, #32]
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <HAL_ADC_MspInit+0xc8>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000280:	bf00      	nop
 8000282:	3720      	adds	r7, #32
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40012400 	.word	0x40012400
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	200000ac 	.word	0x200000ac
 8000298:	40020008 	.word	0x40020008

0800029c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_CAN_Init+0x60>)
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <MX_CAN_Init+0x64>)
 80002a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_CAN_Init+0x60>)
 80002a8:	2210      	movs	r2, #16
 80002aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <MX_CAN_Init+0x60>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <MX_CAN_Init+0x60>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_CAN_Init+0x60>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_CAN_Init+0x60>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <MX_CAN_Init+0x60>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_CAN_Init+0x60>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <MX_CAN_Init+0x60>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_CAN_Init+0x60>)
 80002d8:	2200      	movs	r2, #0
 80002da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <MX_CAN_Init+0x60>)
 80002de:	2200      	movs	r2, #0
 80002e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_CAN_Init+0x60>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <MX_CAN_Init+0x60>)
 80002ea:	f001 fb99 	bl	8001a20 <HAL_CAN_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80002f4:	f000 faa6 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000f0 	.word	0x200000f0
 8000300:	40006400 	.word	0x40006400

08000304 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <HAL_CAN_MspInit+0xb0>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d143      	bne.n	80003ac <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 8000326:	69db      	ldr	r3, [r3, #28]
 8000328:	4a23      	ldr	r2, [pc, #140]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 800032a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032e:	61d3      	str	r3, [r2, #28]
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000338:	613b      	str	r3, [r7, #16]
 800033a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <HAL_CAN_MspInit+0xb4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4619      	mov	r1, r3
 8000368:	4814      	ldr	r0, [pc, #80]	; (80003bc <HAL_CAN_MspInit+0xb8>)
 800036a:	f001 fe95 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800036e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000374:	2302      	movs	r3, #2
 8000376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2303      	movs	r3, #3
 800037a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	480e      	ldr	r0, [pc, #56]	; (80003bc <HAL_CAN_MspInit+0xb8>)
 8000384:	f001 fe88 	bl	8002098 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <HAL_CAN_MspInit+0xbc>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	627b      	str	r3, [r7, #36]	; 0x24
 800038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000390:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000394:	627b      	str	r3, [r7, #36]	; 0x24
 8000396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000398:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
 800039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24
 80003a6:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <HAL_CAN_MspInit+0xbc>)
 80003a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40006400 	.word	0x40006400
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40010000 	.word	0x40010000

080003c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_DMA_Init+0x38>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <MX_DMA_Init+0x38>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_DMA_Init+0x38>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2105      	movs	r1, #5
 80003e6:	200b      	movs	r0, #11
 80003e8:	f001 fccb 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003ec:	200b      	movs	r0, #11
 80003ee:	f001 fce4 	bl	8001dba <HAL_NVIC_EnableIRQ>

}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_Tas */
  ThumbFinger_TasHandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_Tas_attributes);
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <MX_FREERTOS_Init+0x58>)
 8000406:	2100      	movs	r1, #0
 8000408:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_FREERTOS_Init+0x5c>)
 800040a:	f003 fb8b 	bl	8003b24 <osThreadNew>
 800040e:	4603      	mov	r3, r0
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <MX_FREERTOS_Init+0x60>)
 8000412:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_Tas */
  IndexFinger_TasHandle = osThreadNew(IndexFinger, NULL, &IndexFinger_Tas_attributes);
 8000414:	4a13      	ldr	r2, [pc, #76]	; (8000464 <MX_FREERTOS_Init+0x64>)
 8000416:	2100      	movs	r1, #0
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <MX_FREERTOS_Init+0x68>)
 800041a:	f003 fb83 	bl	8003b24 <osThreadNew>
 800041e:	4603      	mov	r3, r0
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_FREERTOS_Init+0x6c>)
 8000422:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_Ta */
  MiddleFinger_TaHandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_Ta_attributes);
 8000424:	4a12      	ldr	r2, [pc, #72]	; (8000470 <MX_FREERTOS_Init+0x70>)
 8000426:	2100      	movs	r1, #0
 8000428:	4812      	ldr	r0, [pc, #72]	; (8000474 <MX_FREERTOS_Init+0x74>)
 800042a:	f003 fb7b 	bl	8003b24 <osThreadNew>
 800042e:	4603      	mov	r3, r0
 8000430:	4a11      	ldr	r2, [pc, #68]	; (8000478 <MX_FREERTOS_Init+0x78>)
 8000432:	6013      	str	r3, [r2, #0]

  /* creation of Ringfinger_Task */
  Ringfinger_TaskHandle = osThreadNew(Ringfinger, NULL, &Ringfinger_Task_attributes);
 8000434:	4a11      	ldr	r2, [pc, #68]	; (800047c <MX_FREERTOS_Init+0x7c>)
 8000436:	2100      	movs	r1, #0
 8000438:	4811      	ldr	r0, [pc, #68]	; (8000480 <MX_FREERTOS_Init+0x80>)
 800043a:	f003 fb73 	bl	8003b24 <osThreadNew>
 800043e:	4603      	mov	r3, r0
 8000440:	4a10      	ldr	r2, [pc, #64]	; (8000484 <MX_FREERTOS_Init+0x84>)
 8000442:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_tas */
  PinkyFinger_tasHandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_tas_attributes);
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <MX_FREERTOS_Init+0x88>)
 8000446:	2100      	movs	r1, #0
 8000448:	4810      	ldr	r0, [pc, #64]	; (800048c <MX_FREERTOS_Init+0x8c>)
 800044a:	f003 fb6b 	bl	8003b24 <osThreadNew>
 800044e:	4603      	mov	r3, r0
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <MX_FREERTOS_Init+0x90>)
 8000452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	080066b8 	.word	0x080066b8
 800045c:	08000495 	.word	0x08000495
 8000460:	20000118 	.word	0x20000118
 8000464:	080066dc 	.word	0x080066dc
 8000468:	080004d5 	.word	0x080004d5
 800046c:	2000011c 	.word	0x2000011c
 8000470:	08006700 	.word	0x08006700
 8000474:	0800051d 	.word	0x0800051d
 8000478:	20000120 	.word	0x20000120
 800047c:	08006724 	.word	0x08006724
 8000480:	08000565 	.word	0x08000565
 8000484:	20000124 	.word	0x20000124
 8000488:	08006748 	.word	0x08006748
 800048c:	080005ad 	.word	0x080005ad
 8000490:	20000128 	.word	0x20000128

08000494 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Thumb, Fingers_Status.Thumb);
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <ThumbFinger+0x3c>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4610      	mov	r0, r2
 80004a2:	791a      	ldrb	r2, [r3, #4]
 80004a4:	7959      	ldrb	r1, [r3, #5]
 80004a6:	0209      	lsls	r1, r1, #8
 80004a8:	430a      	orrs	r2, r1
 80004aa:	799b      	ldrb	r3, [r3, #6]
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	431a      	orrs	r2, r3
 80004b0:	2300      	movs	r3, #0
 80004b2:	f362 0317 	bfi	r3, r2, #0, #24
 80004b6:	4601      	mov	r1, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 ff14 	bl	80012e8 <SetMotor>
		Read_Encoder(&Fingers_Status.Thumb, Thumb);
 80004c0:	2100      	movs	r1, #0
 80004c2:	4803      	ldr	r0, [pc, #12]	; (80004d0 <ThumbFinger+0x3c>)
 80004c4:	f000 fd54 	bl	8000f70 <Read_Encoder>
		osDelay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f003 fbd5 	bl	8003c78 <osDelay>
		SetMotor(Thumb, Fingers_Status.Thumb);
 80004ce:	e7e5      	b.n	800049c <ThumbFinger+0x8>
 80004d0:	2000026c 	.word	0x2000026c

080004d4 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Index, Fingers_Status.Index);
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <IndexFinger+0x40>)
 80004de:	f8d3 2007 	ldr.w	r2, [r3, #7]
 80004e2:	4610      	mov	r0, r2
 80004e4:	7ada      	ldrb	r2, [r3, #11]
 80004e6:	7b19      	ldrb	r1, [r3, #12]
 80004e8:	0209      	lsls	r1, r1, #8
 80004ea:	430a      	orrs	r2, r1
 80004ec:	7b5b      	ldrb	r3, [r3, #13]
 80004ee:	041b      	lsls	r3, r3, #16
 80004f0:	431a      	orrs	r2, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	f362 0317 	bfi	r3, r2, #0, #24
 80004f8:	4601      	mov	r1, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fef3 	bl	80012e8 <SetMotor>
		Read_Encoder(&Fingers_Status.Index, Index);
 8000502:	2101      	movs	r1, #1
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <IndexFinger+0x44>)
 8000506:	f000 fd33 	bl	8000f70 <Read_Encoder>
		osDelay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f003 fbb4 	bl	8003c78 <osDelay>
		SetMotor(Index, Fingers_Status.Index);
 8000510:	e7e4      	b.n	80004dc <IndexFinger+0x8>
 8000512:	bf00      	nop
 8000514:	2000026c 	.word	0x2000026c
 8000518:	20000273 	.word	0x20000273

0800051c <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Middle, Fingers_Status.Middle);
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MiddleFinger+0x40>)
 8000526:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800052a:	4610      	mov	r0, r2
 800052c:	7c9a      	ldrb	r2, [r3, #18]
 800052e:	7cd9      	ldrb	r1, [r3, #19]
 8000530:	0209      	lsls	r1, r1, #8
 8000532:	430a      	orrs	r2, r1
 8000534:	7d1b      	ldrb	r3, [r3, #20]
 8000536:	041b      	lsls	r3, r3, #16
 8000538:	431a      	orrs	r2, r3
 800053a:	2300      	movs	r3, #0
 800053c:	f362 0317 	bfi	r3, r2, #0, #24
 8000540:	4601      	mov	r1, r0
 8000542:	461a      	mov	r2, r3
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fecf 	bl	80012e8 <SetMotor>
		Read_Encoder(&Fingers_Status.Middle, Middle);
 800054a:	2102      	movs	r1, #2
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MiddleFinger+0x44>)
 800054e:	f000 fd0f 	bl	8000f70 <Read_Encoder>
		osDelay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 fb90 	bl	8003c78 <osDelay>
		SetMotor(Middle, Fingers_Status.Middle);
 8000558:	e7e4      	b.n	8000524 <MiddleFinger+0x8>
 800055a:	bf00      	nop
 800055c:	2000026c 	.word	0x2000026c
 8000560:	2000027a 	.word	0x2000027a

08000564 <Ringfinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ringfinger */
void Ringfinger(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ringfinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Ring, Fingers_Status.Ring);
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <Ringfinger+0x40>)
 800056e:	f8d3 2015 	ldr.w	r2, [r3, #21]
 8000572:	4610      	mov	r0, r2
 8000574:	7e5a      	ldrb	r2, [r3, #25]
 8000576:	7e99      	ldrb	r1, [r3, #26]
 8000578:	0209      	lsls	r1, r1, #8
 800057a:	430a      	orrs	r2, r1
 800057c:	7edb      	ldrb	r3, [r3, #27]
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	431a      	orrs	r2, r3
 8000582:	2300      	movs	r3, #0
 8000584:	f362 0317 	bfi	r3, r2, #0, #24
 8000588:	4601      	mov	r1, r0
 800058a:	461a      	mov	r2, r3
 800058c:	2003      	movs	r0, #3
 800058e:	f000 feab 	bl	80012e8 <SetMotor>
		Read_Encoder(&Fingers_Status.Ring, Ring);
 8000592:	2103      	movs	r1, #3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <Ringfinger+0x44>)
 8000596:	f000 fceb 	bl	8000f70 <Read_Encoder>
		osDelay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f003 fb6c 	bl	8003c78 <osDelay>
		SetMotor(Ring, Fingers_Status.Ring);
 80005a0:	e7e4      	b.n	800056c <Ringfinger+0x8>
 80005a2:	bf00      	nop
 80005a4:	2000026c 	.word	0x2000026c
 80005a8:	20000281 	.word	0x20000281

080005ac <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Pinky, Fingers_Status.Pinky);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <PinkyFinger+0x44>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	4610      	mov	r0, r2
 80005ba:	f893 2020 	ldrb.w	r2, [r3, #32]
 80005be:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80005c2:	0209      	lsls	r1, r1, #8
 80005c4:	430a      	orrs	r2, r1
 80005c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80005ca:	041b      	lsls	r3, r3, #16
 80005cc:	431a      	orrs	r2, r3
 80005ce:	2300      	movs	r3, #0
 80005d0:	f362 0317 	bfi	r3, r2, #0, #24
 80005d4:	4601      	mov	r1, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	2004      	movs	r0, #4
 80005da:	f000 fe85 	bl	80012e8 <SetMotor>
		Read_Encoder(&Fingers_Status.Ring, Ring);
 80005de:	2103      	movs	r1, #3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <PinkyFinger+0x48>)
 80005e2:	f000 fcc5 	bl	8000f70 <Read_Encoder>
		osDelay(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f003 fb46 	bl	8003c78 <osDelay>
		SetMotor(Pinky, Fingers_Status.Pinky);
 80005ec:	e7e2      	b.n	80005b4 <PinkyFinger+0x8>
 80005ee:	bf00      	nop
 80005f0:	2000026c 	.word	0x2000026c
 80005f4:	20000281 	.word	0x20000281

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <MX_GPIO_Init+0x12c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a44      	ldr	r2, [pc, #272]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <MX_GPIO_Init+0x12c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a3e      	ldr	r2, [pc, #248]	; (8000724 <MX_GPIO_Init+0x12c>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b39      	ldr	r3, [pc, #228]	; (8000724 <MX_GPIO_Init+0x12c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a38      	ldr	r2, [pc, #224]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <MX_GPIO_Init+0x12c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b33      	ldr	r3, [pc, #204]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a32      	ldr	r2, [pc, #200]	; (8000724 <MX_GPIO_Init+0x12c>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_GPIO_Init+0x12c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 8000672:	482d      	ldr	r0, [pc, #180]	; (8000728 <MX_GPIO_Init+0x130>)
 8000674:	f001 feab 	bl	80023ce <HAL_GPIO_WritePin>
                          |Motor1_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 8000678:	2200      	movs	r2, #0
 800067a:	f24f 0108 	movw	r1, #61448	; 0xf008
 800067e:	482b      	ldr	r0, [pc, #172]	; (800072c <MX_GPIO_Init+0x134>)
 8000680:	f001 fea5 	bl	80023ce <HAL_GPIO_WritePin>
                          |Motor5_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2104      	movs	r1, #4
 8000688:	4829      	ldr	r0, [pc, #164]	; (8000730 <MX_GPIO_Init+0x138>)
 800068a:	f001 fea0 	bl	80023ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 800068e:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8000692:	613b      	str	r3, [r7, #16]
                          |Motor1_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4820      	ldr	r0, [pc, #128]	; (8000728 <MX_GPIO_Init+0x130>)
 80006a8:	f001 fcf6 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder1_Pin|Motor3_Encoder2_Pin|Motor1_Encoder1_Pin|Motor1_Encoder2_Pin
 80006ac:	f641 4333 	movw	r3, #7219	; 0x1c33
 80006b0:	613b      	str	r3, [r7, #16]
                          |Motor5_Encoder2_Pin|Motor4_Encoder1_Pin|Motor4_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	; (8000728 <MX_GPIO_Init+0x130>)
 80006c2:	f001 fce9 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor2_Encoder1_Pin|Motor2_Encoder2_Pin|Motor5_Encoder1_Pin;
 80006c6:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4816      	ldr	r0, [pc, #88]	; (8000734 <MX_GPIO_Init+0x13c>)
 80006dc:	f001 fcdc 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 80006e0:	f24f 0308 	movw	r3, #61448	; 0xf008
 80006e4:	613b      	str	r3, [r7, #16]
                          |Motor5_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0x134>)
 80006fa:	f001 fccd 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_INB_Pin;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_INB_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x138>)
 8000716:	f001 fcbf 	bl	8002098 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	40011000 	.word	0x40011000
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40011400 	.word	0x40011400
 8000734:	40010800 	.word	0x40010800

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 ff34 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f817 	bl	8000772 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff ff58 	bl	80005f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f7ff fe3c 	bl	80003c4 <MX_DMA_Init>
  MX_ADC1_Init();
 800074c:	f7ff fd00 	bl	8000150 <MX_ADC1_Init>
  MX_CAN_Init();
 8000750:	f7ff fda4 	bl	800029c <MX_CAN_Init>
  MX_TIM1_Init();
 8000754:	f000 f990 	bl	8000a78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000758:	f000 fa34 	bl	8000bc4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800075c:	f000 fb20 	bl	8000da0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fb48 	bl	8000df4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000764:	f003 f978 	bl	8003a58 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000768:	f7ff fe4a 	bl	8000400 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800076c:	f003 f9a6 	bl	8003abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x38>

08000772 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b094      	sub	sp, #80	; 0x50
 8000776:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077c:	2228      	movs	r2, #40	; 0x28
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f005 fe6b 	bl	800645c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007b2:	2300      	movs	r3, #0
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fe1d 	bl	8002400 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007cc:	f000 f83a 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 f889 	bl	8002904 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007f8:	f000 f824 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000804:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fa43 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000814:	f000 f816 	bl	8000844 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 fecf 	bl	80015d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40000800 	.word	0x40000800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_MspInit+0x68>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_MspInit+0x68>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x68>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x68>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x68>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x68>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f001 fa78 	bl	8001d82 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x6c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x6c>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <HAL_InitTick+0xe8>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <HAL_InitTick+0xe8>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <HAL_InitTick+0xe8>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ee:	f107 0210 	add.w	r2, r7, #16
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f97d 	bl	8002bf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000908:	f002 f94e 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 800090c:	6378      	str	r0, [r7, #52]	; 0x34
 800090e:	e004      	b.n	800091a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000910:	f002 f94a 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8000914:	4603      	mov	r3, r0
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091c:	4a23      	ldr	r2, [pc, #140]	; (80009ac <HAL_InitTick+0xec>)
 800091e:	fba2 2303 	umull	r2, r3, r2, r3
 8000922:	0c9b      	lsrs	r3, r3, #18
 8000924:	3b01      	subs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <HAL_InitTick+0xf0>)
 800092a:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <HAL_InitTick+0xf4>)
 800092c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_InitTick+0xf0>)
 8000930:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000934:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <HAL_InitTick+0xf0>)
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_InitTick+0xf0>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_InitTick+0xf0>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_InitTick+0xf0>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <HAL_InitTick+0xf0>)
 8000950:	f002 fa56 	bl	8002e00 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11b      	bne.n	800099a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000962:	4813      	ldr	r0, [pc, #76]	; (80009b0 <HAL_InitTick+0xf0>)
 8000964:	f002 fa80 	bl	8002e68 <HAL_TIM_Base_Start_IT>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800096e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000972:	2b00      	cmp	r3, #0
 8000974:	d111      	bne.n	800099a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000976:	201e      	movs	r0, #30
 8000978:	f001 fa1f 	bl	8001dba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d808      	bhi.n	8000994 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000982:	2200      	movs	r2, #0
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	201e      	movs	r0, #30
 8000988:	f001 f9fb 	bl	8001d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_InitTick+0xf8>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e002      	b.n	800099a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800099a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3738      	adds	r7, #56	; 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	2000012c 	.word	0x2000012c
 80009b4:	40000800 	.word	0x40000800
 80009b8:	20000004 	.word	0x20000004

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <DMA1_Channel1_IRQHandler+0x10>)
 80009ee:	f001 fa4d 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000ac 	.word	0x200000ac

080009fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM4_IRQHandler+0x10>)
 8000a02:	f002 fa7f 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000012c 	.word	0x2000012c

08000a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <SystemInit+0x5c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <SystemInit+0x5c>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <SystemInit+0x5c>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4911      	ldr	r1, [pc, #68]	; (8000a6c <SystemInit+0x5c>)
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SystemInit+0x60>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <SystemInit+0x5c>)
 8000a32:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SystemInit+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SystemInit+0x5c>)
 8000a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SystemInit+0x5c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <SystemInit+0x5c>)
 8000a4e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a52:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SystemInit+0x5c>)
 8000a56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a5a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SystemInit+0x64>)
 8000a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a62:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	f8ff0000 	.word	0xf8ff0000
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b092      	sub	sp, #72	; 0x48
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fcda 	bl	800645c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000aaa:	4a45      	ldr	r2, [pc, #276]	; (8000bc0 <MX_TIM1_Init+0x148>)
 8000aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ab0:	2213      	movs	r2, #19
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000abc:	2263      	movs	r2, #99	; 0x63
 8000abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad2:	483a      	ldr	r0, [pc, #232]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ad4:	f002 f9eb 	bl	8002eae <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f7ff feb1 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aee:	4619      	mov	r1, r3
 8000af0:	4832      	ldr	r0, [pc, #200]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000af2:	f002 fde3 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000afc:	f7ff fea2 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	2200      	movs	r2, #0
 8000b22:	4619      	mov	r1, r3
 8000b24:	4825      	ldr	r0, [pc, #148]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000b26:	f002 faf5 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b30:	f7ff fe88 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000b3e:	f002 fae9 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b48:	f7ff fe7c 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	2208      	movs	r2, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000b56:	f002 fadd 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000b60:	f7ff fe70 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	220c      	movs	r2, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000b6e:	f002 fad1 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000b78:	f7ff fe64 	bl	8000844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000ba0:	f002 fdd0 	bl	8003744 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000baa:	f7ff fe4b 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000bb0:	f000 f890 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3748      	adds	r7, #72	; 0x48
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000016c 	.word	0x2000016c
 8000bc0:	40012c00 	.word	0x40012c00

08000bc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000bf0:	2213      	movs	r2, #19
 8000bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000bfc:	2263      	movs	r2, #99	; 0x63
 8000bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c0e:	f002 f94e 	bl	8002eae <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c18:	f7ff fe14 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c2c:	f002 fd46 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000c36:	f7ff fe05 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	; 0x60
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c52:	f002 fa5f 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c5c:	f7ff fdf2 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM2_Init+0xac>)
 8000c62:	f000 f837 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001ac 	.word	0x200001ac

08000c74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_TIM_PWM_MspInit+0x58>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10c      	bne.n	8000ca0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c9e:	e010      	b.n	8000cc2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <HAL_TIM_MspPostInit+0xbc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d119      	bne.n	8000d28 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin|Motor2_PWM_Pin|Motor3_PWM_Pin|Motor4_PWM_Pin;
 8000d0c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481d      	ldr	r0, [pc, #116]	; (8000d98 <HAL_TIM_MspPostInit+0xc4>)
 8000d22:	f001 f9b9 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d26:	e02f      	b.n	8000d88 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d12a      	bne.n	8000d88 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_TIM_MspPostInit+0xc0>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor5_PWM_Pin;
 8000d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <HAL_TIM_MspPostInit+0xc4>)
 8000d60:	f001 f99a 	bl	8002098 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_TIM_MspPostInit+0xc8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_TIM_MspPostInit+0xc8>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	6053      	str	r3, [r2, #4]
}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010000 	.word	0x40010000

08000da0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f002 fd17 	bl	800380a <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f7ff fd2f 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001ec 	.word	0x200001ec
 8000df0:	40013800 	.word	0x40013800

08000df4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_USART3_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART3_UART_Init+0x4c>)
 8000e2c:	f002 fced 	bl	800380a <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f7ff fd05 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000022c 	.word	0x2000022c
 8000e44:	40004800 	.word	0x40004800

08000e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a3e      	ldr	r2, [pc, #248]	; (8000f5c <HAL_UART_MspInit+0x114>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13e      	bne.n	8000ee6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a3c      	ldr	r2, [pc, #240]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a36      	ldr	r2, [pc, #216]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482e      	ldr	r0, [pc, #184]	; (8000f64 <HAL_UART_MspInit+0x11c>)
 8000eac:	f001 f8f4 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4828      	ldr	r0, [pc, #160]	; (8000f64 <HAL_UART_MspInit+0x11c>)
 8000ec4:	f001 f8e8 	bl	8002098 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_UART_MspInit+0x120>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_UART_MspInit+0x120>)
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ee4:	e036      	b.n	8000f54 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x124>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d131      	bne.n	8000f54 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efa:	61d3      	str	r3, [r2, #28]
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_UART_MspInit+0x118>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_UART_MspInit+0x11c>)
 8000f36:	f001 f8af 	bl	8002098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x11c>)
 8000f50:	f001 f8a2 	bl	8002098 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40004800 	.word	0x40004800

08000f70 <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Finger_Struct* FingerStruct,Fingers_Name_Enum FingerName)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	_Bool Signal_A;
	_Bool Signal_B;
	switch (FingerName) {
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	f200 81a0 	bhi.w	80012c4 <Read_Encoder+0x354>
 8000f84:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <Read_Encoder+0x1c>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08000fa1 	.word	0x08000fa1
 8000f90:	08001043 	.word	0x08001043
 8000f94:	080010e5 	.word	0x080010e5
 8000f98:	08001183 	.word	0x08001183
 8000f9c:	08001229 	.word	0x08001229
	case Thumb:
		Signal_A=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	4893      	ldr	r0, [pc, #588]	; (80011f4 <Read_Encoder+0x284>)
 8000fa6:	f001 f9fb 	bl	80023a0 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	488f      	ldr	r0, [pc, #572]	; (80011f8 <Read_Encoder+0x288>)
 8000fbc:	f001 f9f0 	bl	80023a0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <Read_Encoder+0x70>
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <Read_Encoder+0x70>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	70da      	strb	r2, [r3, #3]
 8000fde:	e01c      	b.n	800101a <Read_Encoder+0xaa>
		else if (Signal_A && !Signal_B)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <Read_Encoder+0x8a>
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <Read_Encoder+0x8a>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	70da      	strb	r2, [r3, #3]
 8000ff8:	e00f      	b.n	800101a <Read_Encoder+0xaa>
		else if (!Signal_A && Signal_B)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <Read_Encoder+0xa4>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <Read_Encoder+0xa4>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	70da      	strb	r2, [r3, #3]
 8001012:	e002      	b.n	800101a <Read_Encoder+0xaa>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2204      	movs	r2, #4
 8001018:	70da      	strb	r2, [r3, #3]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	78da      	ldrb	r2, [r3, #3]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	f000 8150 	beq.w	80012c8 <Read_Encoder+0x358>
		{
			FingerStruct->Encoder=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791a      	ldrb	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	78db      	ldrb	r3, [r3, #3]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	705a      	strb	r2, [r3, #1]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	78da      	ldrb	r2, [r3, #3]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	711a      	strb	r2, [r3, #4]
		}
		break;
 8001040:	e142      	b.n	80012c8 <Read_Encoder+0x358>
	case Index:
		Signal_A=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	486c      	ldr	r0, [pc, #432]	; (80011f8 <Read_Encoder+0x288>)
 8001048:	f001 f9aa 	bl	80023a0 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	4866      	ldr	r0, [pc, #408]	; (80011f8 <Read_Encoder+0x288>)
 800105e:	f001 f99f 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <Read_Encoder+0x112>
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <Read_Encoder+0x112>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	70da      	strb	r2, [r3, #3]
 8001080:	e01c      	b.n	80010bc <Read_Encoder+0x14c>
		else if (Signal_A && !Signal_B)
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <Read_Encoder+0x12c>
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <Read_Encoder+0x12c>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	70da      	strb	r2, [r3, #3]
 800109a:	e00f      	b.n	80010bc <Read_Encoder+0x14c>
		else if (!Signal_A && Signal_B)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <Read_Encoder+0x146>
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <Read_Encoder+0x146>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	70da      	strb	r2, [r3, #3]
 80010b4:	e002      	b.n	80010bc <Read_Encoder+0x14c>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2204      	movs	r2, #4
 80010ba:	70da      	strb	r2, [r3, #3]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	78da      	ldrb	r2, [r3, #3]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f000 8101 	beq.w	80012cc <Read_Encoder+0x35c>
		{
			FingerStruct->Encoder=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	791a      	ldrb	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	78db      	ldrb	r3, [r3, #3]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	705a      	strb	r2, [r3, #1]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	78da      	ldrb	r2, [r3, #3]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	711a      	strb	r2, [r3, #4]
		}
		break;
 80010e2:	e0f3      	b.n	80012cc <Read_Encoder+0x35c>
	case Middle:
		Signal_A=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 80010e4:	2101      	movs	r1, #1
 80010e6:	4844      	ldr	r0, [pc, #272]	; (80011f8 <Read_Encoder+0x288>)
 80010e8:	f001 f95a 	bl	80023a0 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2301      	movne	r3, #1
 80010f4:	2300      	moveq	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 80010f8:	2102      	movs	r1, #2
 80010fa:	483f      	ldr	r0, [pc, #252]	; (80011f8 <Read_Encoder+0x288>)
 80010fc:	f001 f950 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <Read_Encoder+0x1b0>
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <Read_Encoder+0x1b0>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	70da      	strb	r2, [r3, #3]
 800111e:	e01c      	b.n	800115a <Read_Encoder+0x1ea>
		else if (Signal_A && !Signal_B)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d009      	beq.n	800113a <Read_Encoder+0x1ca>
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	f083 0301 	eor.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <Read_Encoder+0x1ca>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	70da      	strb	r2, [r3, #3]
 8001138:	e00f      	b.n	800115a <Read_Encoder+0x1ea>
		else if (!Signal_A && Signal_B)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <Read_Encoder+0x1e4>
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <Read_Encoder+0x1e4>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	70da      	strb	r2, [r3, #3]
 8001152:	e002      	b.n	800115a <Read_Encoder+0x1ea>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2204      	movs	r2, #4
 8001158:	70da      	strb	r2, [r3, #3]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	78da      	ldrb	r2, [r3, #3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	791b      	ldrb	r3, [r3, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	f000 80b4 	beq.w	80012d0 <Read_Encoder+0x360>
		{
			FingerStruct->Encoder=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791a      	ldrb	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	705a      	strb	r2, [r3, #1]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	78da      	ldrb	r2, [r3, #3]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	711a      	strb	r2, [r3, #4]
		}
		break;
 8001180:	e0a6      	b.n	80012d0 <Read_Encoder+0x360>
	case Ring:
		Signal_A=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <Read_Encoder+0x284>)
 8001186:	f001 f90b 	bl	80023a0 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4816      	ldr	r0, [pc, #88]	; (80011f4 <Read_Encoder+0x284>)
 800119a:	f001 f901 	bl	80023a0 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <Read_Encoder+0x24e>
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <Read_Encoder+0x24e>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	70da      	strb	r2, [r3, #3]
 80011bc:	e021      	b.n	8001202 <Read_Encoder+0x292>
		else if (Signal_A && !Signal_B)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <Read_Encoder+0x268>
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <Read_Encoder+0x268>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	70da      	strb	r2, [r3, #3]
 80011d6:	e014      	b.n	8001202 <Read_Encoder+0x292>
		else if (!Signal_A && Signal_B)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <Read_Encoder+0x28c>
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <Read_Encoder+0x28c>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2203      	movs	r2, #3
 80011ee:	70da      	strb	r2, [r3, #3]
 80011f0:	e007      	b.n	8001202 <Read_Encoder+0x292>
 80011f2:	bf00      	nop
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40011000 	.word	0x40011000
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	70da      	strb	r2, [r3, #3]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	78da      	ldrb	r2, [r3, #3]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d062      	beq.n	80012d4 <Read_Encoder+0x364>
		{
			FingerStruct->Encoder=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	705a      	strb	r2, [r3, #1]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78da      	ldrb	r2, [r3, #3]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	711a      	strb	r2, [r3, #4]
		}
		break;
 8001226:	e055      	b.n	80012d4 <Read_Encoder+0x364>
	case Pinky:
		Signal_A=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 8001228:	2110      	movs	r1, #16
 800122a:	482e      	ldr	r0, [pc, #184]	; (80012e4 <Read_Encoder+0x374>)
 800122c:	f001 f8b8 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 800123c:	2120      	movs	r1, #32
 800123e:	4829      	ldr	r0, [pc, #164]	; (80012e4 <Read_Encoder+0x374>)
 8001240:	f001 f8ae 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <Read_Encoder+0x2f4>
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <Read_Encoder+0x2f4>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	70da      	strb	r2, [r3, #3]
 8001262:	e01c      	b.n	800129e <Read_Encoder+0x32e>
		else if (Signal_A && !Signal_B)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <Read_Encoder+0x30e>
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <Read_Encoder+0x30e>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	70da      	strb	r2, [r3, #3]
 800127c:	e00f      	b.n	800129e <Read_Encoder+0x32e>
		else if (!Signal_A && Signal_B)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	f083 0301 	eor.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <Read_Encoder+0x328>
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <Read_Encoder+0x328>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2203      	movs	r2, #3
 8001294:	70da      	strb	r2, [r3, #3]
 8001296:	e002      	b.n	800129e <Read_Encoder+0x32e>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	70da      	strb	r2, [r3, #3]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	78da      	ldrb	r2, [r3, #3]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d016      	beq.n	80012d8 <Read_Encoder+0x368>
		{
			FingerStruct->Encoder=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	791a      	ldrb	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	705a      	strb	r2, [r3, #1]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	78da      	ldrb	r2, [r3, #3]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	711a      	strb	r2, [r3, #4]
		}
		break;
 80012c2:	e009      	b.n	80012d8 <Read_Encoder+0x368>
	default:
		break;
 80012c4:	bf00      	nop
 80012c6:	e008      	b.n	80012da <Read_Encoder+0x36a>
		break;
 80012c8:	bf00      	nop
 80012ca:	e006      	b.n	80012da <Read_Encoder+0x36a>
		break;
 80012cc:	bf00      	nop
 80012ce:	e004      	b.n	80012da <Read_Encoder+0x36a>
		break;
 80012d0:	bf00      	nop
 80012d2:	e002      	b.n	80012da <Read_Encoder+0x36a>
		break;
 80012d4:	bf00      	nop
 80012d6:	e000      	b.n	80012da <Read_Encoder+0x36a>
		break;
 80012d8:	bf00      	nop
	}
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011000 	.word	0x40011000

080012e8 <SetMotor>:
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct  FingerStruct) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	e883 0006 	stmia.w	r3, {r1, r2}
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
	switch (name) {
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	f200 811f 	bhi.w	800153e <SetMotor+0x256>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <SetMotor+0x20>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	0800131d 	.word	0x0800131d
 800130c:	08001383 	.word	0x08001383
 8001310:	080013f5 	.word	0x080013f5
 8001314:	08001467 	.word	0x08001467
 8001318:	080014cd 	.word	0x080014cd
	case Thumb :
		if ( FingerStruct.Direction== Close) {
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d10e      	bne.n	8001340 <SetMotor+0x58>
			htim2.Instance->CCR1 = FingerStruct.speed;
 8001322:	7aba      	ldrb	r2, [r7, #10]
 8001324:	4b88      	ldr	r3, [pc, #544]	; (8001548 <SetMotor+0x260>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	4887      	ldr	r0, [pc, #540]	; (800154c <SetMotor+0x264>)
 8001330:	f001 f84d 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	2104      	movs	r1, #4
 8001338:	4885      	ldr	r0, [pc, #532]	; (8001550 <SetMotor+0x268>)
 800133a:	f001 f848 	bl	80023ce <HAL_GPIO_WritePin>
		} else {
			htim2.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
		}
		break;
 800133e:	e0ff      	b.n	8001540 <SetMotor+0x258>
		} else if (FingerStruct.Direction == Open) {
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10e      	bne.n	8001364 <SetMotor+0x7c>
			htim2.Instance->CCR1 = FingerStruct.speed;
 8001346:	7aba      	ldrb	r2, [r7, #10]
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <SetMotor+0x260>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 800134e:	2201      	movs	r2, #1
 8001350:	2108      	movs	r1, #8
 8001352:	487e      	ldr	r0, [pc, #504]	; (800154c <SetMotor+0x264>)
 8001354:	f001 f83b 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2104      	movs	r1, #4
 800135c:	487c      	ldr	r0, [pc, #496]	; (8001550 <SetMotor+0x268>)
 800135e:	f001 f836 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 8001362:	e0ed      	b.n	8001540 <SetMotor+0x258>
			htim2.Instance->CCR1 = 0;
 8001364:	4b78      	ldr	r3, [pc, #480]	; (8001548 <SetMotor+0x260>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	2108      	movs	r1, #8
 8001370:	4876      	ldr	r0, [pc, #472]	; (800154c <SetMotor+0x264>)
 8001372:	f001 f82c 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2104      	movs	r1, #4
 800137a:	4875      	ldr	r0, [pc, #468]	; (8001550 <SetMotor+0x268>)
 800137c:	f001 f827 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 8001380:	e0de      	b.n	8001540 <SetMotor+0x258>
	case Index :
		if ( FingerStruct.Direction== Close) {
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d110      	bne.n	80013aa <SetMotor+0xc2>
			htim1.Instance->CCR4 = FingerStruct.speed;
 8001388:	7aba      	ldrb	r2, [r7, #10]
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <SetMotor+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	486d      	ldr	r0, [pc, #436]	; (800154c <SetMotor+0x264>)
 8001398:	f001 f819 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a2:	486a      	ldr	r0, [pc, #424]	; (800154c <SetMotor+0x264>)
 80013a4:	f001 f813 	bl	80023ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR4 = 0;
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
		}
		break;
 80013a8:	e0ca      	b.n	8001540 <SetMotor+0x258>
		} else if (FingerStruct.Direction == Open) {
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d110      	bne.n	80013d2 <SetMotor+0xea>
			htim1.Instance->CCR4 = FingerStruct.speed;
 80013b0:	7aba      	ldrb	r2, [r7, #10]
 80013b2:	4b68      	ldr	r3, [pc, #416]	; (8001554 <SetMotor+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	4863      	ldr	r0, [pc, #396]	; (800154c <SetMotor+0x264>)
 80013c0:	f001 f805 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	4860      	ldr	r0, [pc, #384]	; (800154c <SetMotor+0x264>)
 80013cc:	f000 ffff 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 80013d0:	e0b6      	b.n	8001540 <SetMotor+0x258>
			htim1.Instance->CCR4 = 0;
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <SetMotor+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e0:	485a      	ldr	r0, [pc, #360]	; (800154c <SetMotor+0x264>)
 80013e2:	f000 fff4 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ec:	4857      	ldr	r0, [pc, #348]	; (800154c <SetMotor+0x264>)
 80013ee:	f000 ffee 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 80013f2:	e0a5      	b.n	8001540 <SetMotor+0x258>
	case Middle :
		if ( FingerStruct.Direction== Close) {
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d110      	bne.n	800141c <SetMotor+0x134>
			htim1.Instance->CCR3 = FingerStruct.speed;
 80013fa:	7aba      	ldrb	r2, [r7, #10]
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <SetMotor+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001408:	4850      	ldr	r0, [pc, #320]	; (800154c <SetMotor+0x264>)
 800140a:	f000 ffe0 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001414:	484d      	ldr	r0, [pc, #308]	; (800154c <SetMotor+0x264>)
 8001416:	f000 ffda 	bl	80023ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR3 = 0;
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
		}
		break;
 800141a:	e091      	b.n	8001540 <SetMotor+0x258>
		} else if (FingerStruct.Direction == Open) {
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d110      	bne.n	8001444 <SetMotor+0x15c>
			htim1.Instance->CCR3 = FingerStruct.speed;
 8001422:	7aba      	ldrb	r2, [r7, #10]
 8001424:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <SetMotor+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001430:	4846      	ldr	r0, [pc, #280]	; (800154c <SetMotor+0x264>)
 8001432:	f000 ffcc 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143c:	4843      	ldr	r0, [pc, #268]	; (800154c <SetMotor+0x264>)
 800143e:	f000 ffc6 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 8001442:	e07d      	b.n	8001540 <SetMotor+0x258>
			htim1.Instance->CCR3 = 0;
 8001444:	4b43      	ldr	r3, [pc, #268]	; (8001554 <SetMotor+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	483e      	ldr	r0, [pc, #248]	; (800154c <SetMotor+0x264>)
 8001454:	f000 ffbb 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	483b      	ldr	r0, [pc, #236]	; (800154c <SetMotor+0x264>)
 8001460:	f000 ffb5 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 8001464:	e06c      	b.n	8001540 <SetMotor+0x258>
	case Ring :
		if ( FingerStruct.Direction== Close) {
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d10e      	bne.n	800148a <SetMotor+0x1a2>
			htim1.Instance->CCR2 = FingerStruct.speed;
 800146c:	7aba      	ldrb	r2, [r7, #10]
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <SetMotor+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	4837      	ldr	r0, [pc, #220]	; (8001558 <SetMotor+0x270>)
 800147a:	f000 ffa8 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	4835      	ldr	r0, [pc, #212]	; (8001558 <SetMotor+0x270>)
 8001484:	f000 ffa3 	bl	80023ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR2 = 0;
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
		}
		break;
 8001488:	e05a      	b.n	8001540 <SetMotor+0x258>
		} else if (FingerStruct.Direction == Open) {
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d10e      	bne.n	80014ae <SetMotor+0x1c6>
			htim1.Instance->CCR2 = FingerStruct.speed;
 8001490:	7aba      	ldrb	r2, [r7, #10]
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <SetMotor+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	482e      	ldr	r0, [pc, #184]	; (8001558 <SetMotor+0x270>)
 800149e:	f000 ff96 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	482c      	ldr	r0, [pc, #176]	; (8001558 <SetMotor+0x270>)
 80014a8:	f000 ff91 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 80014ac:	e048      	b.n	8001540 <SetMotor+0x258>
			htim1.Instance->CCR2 = 0;
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <SetMotor+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2140      	movs	r1, #64	; 0x40
 80014ba:	4827      	ldr	r0, [pc, #156]	; (8001558 <SetMotor+0x270>)
 80014bc:	f000 ff87 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4824      	ldr	r0, [pc, #144]	; (8001558 <SetMotor+0x270>)
 80014c6:	f000 ff82 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 80014ca:	e039      	b.n	8001540 <SetMotor+0x258>
	case Pinky :
		if ( FingerStruct.Direction== Close) {
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d110      	bne.n	80014f4 <SetMotor+0x20c>
			htim1.Instance->CCR1 = FingerStruct.speed;
 80014d2:	7aba      	ldrb	r2, [r7, #10]
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <SetMotor+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e0:	481d      	ldr	r0, [pc, #116]	; (8001558 <SetMotor+0x270>)
 80014e2:	f000 ff74 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ec:	481a      	ldr	r0, [pc, #104]	; (8001558 <SetMotor+0x270>)
 80014ee:	f000 ff6e 	bl	80023ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
		}
		break;
 80014f2:	e025      	b.n	8001540 <SetMotor+0x258>
		} else if (FingerStruct.Direction == Open) {
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d110      	bne.n	800151c <SetMotor+0x234>
			htim1.Instance->CCR1 = FingerStruct.speed;
 80014fa:	7aba      	ldrb	r2, [r7, #10]
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <SetMotor+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <SetMotor+0x270>)
 800150a:	f000 ff60 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <SetMotor+0x270>)
 8001516:	f000 ff5a 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 800151a:	e011      	b.n	8001540 <SetMotor+0x258>
			htim1.Instance->CCR1 = 0;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <SetMotor+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <SetMotor+0x270>)
 800152c:	f000 ff4f 	bl	80023ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <SetMotor+0x270>)
 8001538:	f000 ff49 	bl	80023ce <HAL_GPIO_WritePin>
		break;
 800153c:	e000      	b.n	8001540 <SetMotor+0x258>

	default:

		break;
 800153e:	bf00      	nop
	}
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001ac 	.word	0x200001ac
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011400 	.word	0x40011400
 8001554:	2000016c 	.word	0x2000016c
 8001558:	40011000 	.word	0x40011000

0800155c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800155c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800155e:	e003      	b.n	8001568 <LoopCopyDataInit>

08001560 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001562:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001564:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001566:	3104      	adds	r1, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800156c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800156e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001570:	d3f6      	bcc.n	8001560 <CopyDataInit>
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001574:	e002      	b.n	800157c <LoopFillZerobss>

08001576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001578:	f842 3b04 	str.w	r3, [r2], #4

0800157c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001580:	d3f9      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001582:	f7ff fa45 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001586:	f004 ffc7 	bl	8006518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7ff f8d5 	bl	8000738 <main>
  bx lr
 800158e:	4770      	bx	lr
  ldr r3, =_sidata
 8001590:	0800678c 	.word	0x0800678c
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001598:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 800159c:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 80015a0:	20002348 	.word	0x20002348

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 fbd7 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f7ff f97e 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff f944 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000290 	.word	0x20000290

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000290 	.word	0x20000290

0800160c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0be      	b.n	80017ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe fdbe 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f9ab 	bl	80019ac <ADC_ConversionStop_Disable>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 8099 	bne.w	800179a <HAL_ADC_Init+0x18e>
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8095 	bne.w	800179a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001678:	f023 0302 	bic.w	r3, r3, #2
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001694:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4313      	orrs	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a4:	d003      	beq.n	80016ae <HAL_ADC_Init+0xa2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d102      	bne.n	80016b4 <HAL_ADC_Init+0xa8>
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_Init+0xaa>
 80016b4:	2300      	movs	r3, #0
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7d1b      	ldrb	r3, [r3, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d119      	bne.n	80016f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7b1b      	ldrb	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	035a      	lsls	r2, r3, #13
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e00b      	b.n	80016f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_ADC_Init+0x1a8>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	430b      	orrs	r3, r1
 800171e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001728:	d003      	beq.n	8001732 <HAL_ADC_Init+0x126>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d104      	bne.n	800173c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	3b01      	subs	r3, #1
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	430a      	orrs	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_ADC_Init+0x1ac>)
 8001758:	4013      	ands	r3, r2
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001776:	e018      	b.n	80017aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f023 0312 	bic.w	r3, r3, #18
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001798:	e007      	b.n	80017aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	ffe1f7fd 	.word	0xffe1f7fd
 80017b8:	ff1f0efe 	.word	0xff1f0efe

080017bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x20>
 80017d8:	2302      	movs	r3, #2
 80017da:	e0dc      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1da>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d81c      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b05      	subs	r3, #5
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
 8001824:	e03c      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d81c      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b23      	subs	r3, #35	; 0x23
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4019      	ands	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b23      	subs	r3, #35	; 0x23
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
 8001866:	e01b      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	; 0x41
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4019      	ands	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b41      	subs	r3, #65	; 0x41
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d91c      	bls.n	80018e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68d9      	ldr	r1, [r3, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3b1e      	subs	r3, #30
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e019      	b.n	8001916 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d003      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d132      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d125      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d126      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800194c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d11a      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x1b2>
 800197a:	e007      	b.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012400 	.word	0x40012400
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83

080019ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d127      	bne.n	8001a16 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d6:	f7ff fe0f 	bl	80015f8 <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019dc:	e014      	b.n	8001a08 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019de:	f7ff fe0b 	bl	80015f8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d90d      	bls.n	8001a08 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e007      	b.n	8001a18 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d0e3      	beq.n	80019de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ed      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fc60 	bl	8000304 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0202 	bic.w	r2, r2, #2
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fdd0 	bl	80015f8 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a5a:	e012      	b.n	8001a82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5c:	f7ff fdcc 	bl	80015f8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d90b      	bls.n	8001a82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0c5      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e5      	bne.n	8001a5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa0:	f7ff fdaa 	bl	80015f8 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aa6:	e012      	b.n	8001ace <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa8:	f7ff fda6 	bl	80015f8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b0a      	cmp	r3, #10
 8001ab4:	d90b      	bls.n	8001ace <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2205      	movs	r2, #5
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09f      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0e5      	beq.n	8001aa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d108      	bne.n	8001af6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e5b      	ldrb	r3, [r3, #25]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e007      	b.n	8001b30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7e9b      	ldrb	r3, [r3, #26]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0220 	bic.w	r2, r2, #32
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7edb      	ldrb	r3, [r3, #27]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0210 	bic.w	r2, r2, #16
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7f1b      	ldrb	r3, [r3, #28]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0208 	orr.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7f5b      	ldrb	r3, [r3, #29]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0204 	orr.w	r2, r2, #4
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	ea42 0103 	orr.w	r1, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <__NVIC_EnableIRQ+0x34>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff4f 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff64 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ffb2 	bl	8001d08 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff81 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff57 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e043      	b.n	8001e76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_DMA_Init+0xa8>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <HAL_DMA_Init+0xac>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_DMA_Init+0xb0>)
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	bffdfff8 	.word	0xbffdfff8
 8001e84:	cccccccd 	.word	0xcccccccd
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d04f      	beq.n	8001f54 <HAL_DMA_IRQHandler+0xc8>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0204 	bic.w	r2, r2, #4
 8001eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a66      	ldr	r2, [pc, #408]	; (800207c <HAL_DMA_IRQHandler+0x1f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d029      	beq.n	8001f3a <HAL_DMA_IRQHandler+0xae>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a65      	ldr	r2, [pc, #404]	; (8002080 <HAL_DMA_IRQHandler+0x1f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xaa>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a63      	ldr	r2, [pc, #396]	; (8002084 <HAL_DMA_IRQHandler+0x1f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0xa4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a62      	ldr	r2, [pc, #392]	; (8002088 <HAL_DMA_IRQHandler+0x1fc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d012      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x9e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a60      	ldr	r2, [pc, #384]	; (800208c <HAL_DMA_IRQHandler+0x200>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x98>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <HAL_DMA_IRQHandler+0x204>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d102      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x92>
 8001f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f1c:	e00e      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f22:	e00b      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f28:	e008      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2e:	e005      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f34:	e002      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f36:	2340      	movs	r3, #64	; 0x40
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0xb0>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	4a55      	ldr	r2, [pc, #340]	; (8002094 <HAL_DMA_IRQHandler+0x208>)
 8001f3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8094 	beq.w	8002072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f52:	e08e      	b.n	8002072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2202      	movs	r2, #2
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d056      	beq.n	8002012 <HAL_DMA_IRQHandler+0x186>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d051      	beq.n	8002012 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020a 	bic.w	r2, r2, #10
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_DMA_IRQHandler+0x1f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d029      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x166>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a37      	ldr	r2, [pc, #220]	; (8002080 <HAL_DMA_IRQHandler+0x1f4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_IRQHandler+0x162>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a35      	ldr	r2, [pc, #212]	; (8002084 <HAL_DMA_IRQHandler+0x1f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x15c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_DMA_IRQHandler+0x1fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d012      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x156>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_DMA_IRQHandler+0x200>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x150>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_DMA_IRQHandler+0x204>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d102      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x14a>
 8001fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fd4:	e00e      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	e00b      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	e008      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe6:	e005      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	e002      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x168>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_DMA_IRQHandler+0x208>)
 8001ff6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d034      	beq.n	8002072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002010:	e02f      	b.n	8002072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2208      	movs	r2, #8
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d028      	beq.n	8002074 <HAL_DMA_IRQHandler+0x1e8>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 020e 	bic.w	r2, r2, #14
 800203a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
    }
  }
  return;
 8002072:	bf00      	nop
 8002074:	bf00      	nop
}
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020008 	.word	0x40020008
 8002080:	4002001c 	.word	0x4002001c
 8002084:	40020030 	.word	0x40020030
 8002088:	40020044 	.word	0x40020044
 800208c:	40020058 	.word	0x40020058
 8002090:	4002006c 	.word	0x4002006c
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e169      	b.n	8002380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ac:	2201      	movs	r2, #1
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8158 	bne.w	800237a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a9a      	ldr	r2, [pc, #616]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d05e      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020d4:	4a98      	ldr	r2, [pc, #608]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d875      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020da:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d058      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020e0:	4a96      	ldr	r2, [pc, #600]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d86f      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020e6:	4a96      	ldr	r2, [pc, #600]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d052      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020ec:	4a94      	ldr	r2, [pc, #592]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d869      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020f2:	4a94      	ldr	r2, [pc, #592]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04c      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020f8:	4a92      	ldr	r2, [pc, #584]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d863      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020fe:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d046      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 8002104:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d85d      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 800210a:	2b12      	cmp	r3, #18
 800210c:	d82a      	bhi.n	8002164 <HAL_GPIO_Init+0xcc>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d859      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_GPIO_Init+0x80>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002193 	.word	0x08002193
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800217f 	.word	0x0800217f
 8002124:	080021c1 	.word	0x080021c1
 8002128:	080021c7 	.word	0x080021c7
 800212c:	080021c7 	.word	0x080021c7
 8002130:	080021c7 	.word	0x080021c7
 8002134:	080021c7 	.word	0x080021c7
 8002138:	080021c7 	.word	0x080021c7
 800213c:	080021c7 	.word	0x080021c7
 8002140:	080021c7 	.word	0x080021c7
 8002144:	080021c7 	.word	0x080021c7
 8002148:	080021c7 	.word	0x080021c7
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021c7 	.word	0x080021c7
 8002154:	080021c7 	.word	0x080021c7
 8002158:	080021c7 	.word	0x080021c7
 800215c:	08002175 	.word	0x08002175
 8002160:	08002189 	.word	0x08002189
 8002164:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_GPIO_Init+0x2b4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216a:	e02c      	b.n	80021c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e029      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	3304      	adds	r3, #4
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e024      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	3308      	adds	r3, #8
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e01f      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	330c      	adds	r3, #12
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e01a      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219a:	2304      	movs	r3, #4
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e013      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	611a      	str	r2, [r3, #16]
          break;
 80021b2:	e009      	b.n	80021c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	615a      	str	r2, [r3, #20]
          break;
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          break;
 80021c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d801      	bhi.n	80021d2 <HAL_GPIO_Init+0x13a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_Init+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d802      	bhi.n	80021e4 <HAL_GPIO_Init+0x14c>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x152>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3b08      	subs	r3, #8
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	210f      	movs	r1, #15
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80b1 	beq.w	800237a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_GPIO_Init+0x2c0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x1ec>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_GPIO_Init+0x2c4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x1e8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_GPIO_Init+0x2c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x2cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x1e0>
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002278:	2304      	movs	r3, #4
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002284:	2300      	movs	r3, #0
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002296:	492f      	ldr	r1, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4922      	ldr	r1, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4918      	ldr	r1, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4914      	ldr	r1, [pc, #80]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d021      	beq.n	800236c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
 8002334:	e021      	b.n	800237a <HAL_GPIO_Init+0x2e2>
 8002336:	bf00      	nop
 8002338:	10320000 	.word	0x10320000
 800233c:	10310000 	.word	0x10310000
 8002340:	10220000 	.word	0x10220000
 8002344:	10210000 	.word	0x10210000
 8002348:	10120000 	.word	0x10120000
 800234c:	10110000 	.word	0x10110000
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000
 8002358:	40010800 	.word	0x40010800
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_GPIO_Init+0x304>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4909      	ldr	r1, [pc, #36]	; (800239c <HAL_GPIO_Init+0x304>)
 8002376:	4013      	ands	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f ae8e 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	372c      	adds	r7, #44	; 0x2c
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e001      	b.n	80023c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
 80023da:	4613      	mov	r3, r2
 80023dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023de:	787b      	ldrb	r3, [r7, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	041a      	lsls	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e272      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242c:	4b8f      	ldr	r3, [pc, #572]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d10b      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06c      	beq.n	800252c <HAL_RCC_OscConfig+0x12c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d168      	bne.n	800252c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e24c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x76>
 8002468:	4b80      	ldr	r3, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7f      	ldr	r2, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e02e      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7a      	ldr	r2, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0xbc>
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff f88c 	bl	80015f8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff f888 	bl	80015f8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e200      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xe4>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f878 	bl	80015f8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff f874 	bl	80015f8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1ec      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x10c>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c0      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff f82d 	bl	80015f8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff f829 	bl	80015f8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f80c 	bl	80015f8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7ff f808 	bl	80015f8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e180      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7fe ffec 	bl	80015f8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe ffe8 	bl	80015f8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e160      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 fb08 	bl	8002c58 <RCC_Delay>
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe ffd2 	bl	80015f8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe ffce 	bl	80015f8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d908      	bls.n	8002678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e146      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000
 8002674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a6 	beq.w	80027de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe ff8f 	bl	80015f8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fe ff8b 	bl	80015f8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e103      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x334>
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x356>
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff3f 	bl	80015f8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe ff3b 	bl	80015f8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x37e>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe ff29 	bl	80015f8 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe ff25 	bl	80015f8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09b      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d061      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d146      	bne.n	800288a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fef9 	bl	80015f8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fef5 	bl	80015f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e06d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4921      	ldr	r1, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a19      	ldr	r1, [r3, #32]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	430b      	orrs	r3, r1
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fec9 	bl	80015f8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fec5 	bl	80015f8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
 8002888:	e035      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe feb2 	bl	80015f8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe feae 	bl	80015f8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e026      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
 80028b6:	e01e      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e019      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x500>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d0      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4965      	ldr	r1, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d040      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e073      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06b      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4936      	ldr	r1, [pc, #216]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fe00 	bl	80015f8 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fdfc 	bl	80015f8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e053      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d210      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd ff04 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	0800676c 	.word	0x0800676c
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b490      	push	{r4, r7}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ae0:	1d3c      	adds	r4, r7, #4
 8002ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae8:	f240 2301 	movw	r3, #513	; 0x201
 8002aec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x46>
 8002b16:	e02b      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1a:	623b      	str	r3, [r7, #32]
      break;
 8002b1c:	e02b      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3328      	adds	r3, #40	; 0x28
 8002b28:	443b      	add	r3, r7
 8002b2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0c5b      	lsrs	r3, r3, #17
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	3328      	adds	r3, #40	; 0x28
 8002b46:	443b      	add	r3, r7
 8002b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b52:	fb03 f202 	mul.w	r2, r3, r2
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e004      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	623b      	str	r3, [r7, #32]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc90      	pop	{r4, r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	08006690 	.word	0x08006690
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	003d0900 	.word	0x003d0900

08002b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bac:	f7ff fff2 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	0800677c 	.word	0x0800677c

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0adb      	lsrs	r3, r3, #11
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	0800677c 	.word	0x0800677c

08002bf8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	220f      	movs	r2, #15
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCC_GetClockConfig+0x58>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCC_GetClockConfig+0x58>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_GetClockConfig+0x58>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_RCC_GetClockConfig+0x58>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0207 	and.w	r2, r3, #7
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40022000 	.word	0x40022000

08002c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <RCC_Delay+0x34>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <RCC_Delay+0x38>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c74:	bf00      	nop
  }
  while (Delay --);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <RCC_Delay+0x1c>
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	10624dd3 	.word	0x10624dd3

08002c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d07d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc0:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cca:	61d3      	str	r3, [r2, #28]
 8002ccc:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d118      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce8:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fc80 	bl	80015f8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	e008      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe fc7c 	bl	80015f8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e06d      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02e      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d027      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d48:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d014      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fc4b 	bl	80015f8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fc47 	bl	80015f8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e036      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4917      	ldr	r1, [pc, #92]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002daa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	490b      	ldr	r1, [pc, #44]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	42420440 	.word	0x42420440

08002e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e01d      	b.n	8002e4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f815 	bl	8002e56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f000 fa52 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d007      	beq.n	8002ea2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e01d      	b.n	8002efc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd fecd 	bl	8000c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f000 f9fb 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9b3 	bl	80032b2 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9a6 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f9b5 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0204 	mvn.w	r2, #4
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f989 	bl	80032b2 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f97c 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f98b 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f95f 	bl	80032b2 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f952 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f961 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f935 	bl	80032b2 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f928 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f937 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0201 	mvn.w	r2, #1
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fbcc 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fba2 	bl	80037f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8fb 	bl	80032d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0220 	mvn.w	r2, #32
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb6d 	bl	80037e6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800312a:	2302      	movs	r3, #2
 800312c:	e0b4      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x184>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f200 809f 	bhi.w	8003284 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003181 	.word	0x08003181
 8003150:	08003285 	.word	0x08003285
 8003154:	08003285 	.word	0x08003285
 8003158:	08003285 	.word	0x08003285
 800315c:	080031c1 	.word	0x080031c1
 8003160:	08003285 	.word	0x08003285
 8003164:	08003285 	.word	0x08003285
 8003168:	08003285 	.word	0x08003285
 800316c:	08003203 	.word	0x08003203
 8003170:	08003285 	.word	0x08003285
 8003174:	08003285 	.word	0x08003285
 8003178:	08003285 	.word	0x08003285
 800317c:	08003243 	.word	0x08003243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f910 	bl	80033ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e062      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f956 	bl	8003478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
      break;
 8003200:	e041      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f99f 	bl	800354c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      break;
 8003240:	e021      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f9e9 	bl	8003620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
      break;
 8003282:	e000      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003284:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0xbc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <TIM_Base_SetConfig+0xc0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d108      	bne.n	800332a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <TIM_Base_SetConfig+0xbc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <TIM_Base_SetConfig+0xc0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <TIM_Base_SetConfig+0xb8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800

080033ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <TIM_OC1_SetConfig+0xc8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10c      	bne.n	8003422 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0308 	bic.w	r3, r3, #8
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <TIM_OC1_SetConfig+0xc8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d111      	bne.n	800344e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00

08003478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0210 	bic.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0320 	bic.w	r3, r3, #32
 80034c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <TIM_OC2_SetConfig+0xd0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10d      	bne.n	80034f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <TIM_OC2_SetConfig+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d113      	bne.n	8003524 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40012c00 	.word	0x40012c00

0800354c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <TIM_OC3_SetConfig+0xd0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10d      	bne.n	80035c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <TIM_OC3_SetConfig+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d113      	bne.n	80035f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	621a      	str	r2, [r3, #32]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00

08003620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <TIM_OC4_SetConfig+0x98>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00

080036bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e032      	b.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e03d      	b.n	80037dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e03f      	b.n	800389c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fd fb09 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2224      	movs	r2, #36	; 0x24
 800383a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f828 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003862:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003872:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038de:	f023 030c 	bic.w	r3, r3, #12
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <UART_SetConfig+0x1ac>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d14e      	bne.n	80039aa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7ff f960 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 8003910:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	4a4a      	ldr	r2, [pc, #296]	; (8003a54 <UART_SetConfig+0x1b0>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	0119      	lsls	r1, r3, #4
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <UART_SetConfig+0x1b0>)
 800394a:	fba3 0302 	umull	r0, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2064      	movs	r0, #100	; 0x64
 8003952:	fb00 f303 	mul.w	r3, r0, r3
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	3332      	adds	r3, #50	; 0x32
 800395c:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <UART_SetConfig+0x1b0>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003968:	4419      	add	r1, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <UART_SetConfig+0x1b0>)
 8003982:	fba3 0302 	umull	r0, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2064      	movs	r0, #100	; 0x64
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	3332      	adds	r3, #50	; 0x32
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <UART_SetConfig+0x1b0>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	440a      	add	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039a8:	e04d      	b.n	8003a46 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039aa:	f7ff f8fd 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80039ae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <UART_SetConfig+0x1b0>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	0119      	lsls	r1, r3, #4
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e6:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <UART_SetConfig+0x1b0>)
 80039e8:	fba3 0302 	umull	r0, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2064      	movs	r0, #100	; 0x64
 80039f0:	fb00 f303 	mul.w	r3, r0, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <UART_SetConfig+0x1b0>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	4419      	add	r1, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <UART_SetConfig+0x1b0>)
 8003a20:	fba3 0302 	umull	r0, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2064      	movs	r0, #100	; 0x64
 8003a28:	fb00 f303 	mul.w	r3, r0, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <UART_SetConfig+0x1b0>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 020f 	and.w	r2, r3, #15
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	440a      	add	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40013800 	.word	0x40013800
 8003a54:	51eb851f 	.word	0x51eb851f

08003a58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a5e:	f3ef 8305 	mrs	r3, IPSR
 8003a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <osKernelInitialize+0x32>
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <osKernelInitialize+0x60>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d109      	bne.n	8003a92 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a82:	603b      	str	r3, [r7, #0]
  return(result);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a8a:	f06f 0305 	mvn.w	r3, #5
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e00c      	b.n	8003aac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <osKernelInitialize+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <osKernelInitialize+0x60>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e002      	b.n	8003aac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000294 	.word	0x20000294

08003abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac2:	f3ef 8305 	mrs	r3, IPSR
 8003ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ace:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <osKernelStart+0x32>
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <osKernelStart+0x64>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d109      	bne.n	8003af6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003aee:	f06f 0305 	mvn.w	r3, #5
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e00e      	b.n	8003b14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <osKernelStart+0x64>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <osKernelStart+0x64>)
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b04:	f001 f890 	bl	8004c28 <vTaskStartScheduler>
      stat = osOK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e002      	b.n	8003b14 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000294 	.word	0x20000294

08003b24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b092      	sub	sp, #72	; 0x48
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b34:	f3ef 8305 	mrs	r3, IPSR
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 8094 	bne.w	8003c6a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	623b      	str	r3, [r7, #32]
  return(result);
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 808d 	bne.w	8003c6a <osThreadNew+0x146>
 8003b50:	4b48      	ldr	r3, [pc, #288]	; (8003c74 <osThreadNew+0x150>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d106      	bne.n	8003b66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b58:	f3ef 8311 	mrs	r3, BASEPRI
 8003b5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 8082 	bne.w	8003c6a <osThreadNew+0x146>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d07e      	beq.n	8003c6a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003b70:	2318      	movs	r3, #24
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003b74:	2300      	movs	r3, #0
 8003b76:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003b78:	f107 031b 	add.w	r3, r7, #27
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d045      	beq.n	8003c16 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <osThreadNew+0x74>
        name = attr->name;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <osThreadNew+0x9a>
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b38      	cmp	r3, #56	; 0x38
 8003bb0:	d805      	bhi.n	8003bbe <osThreadNew+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <osThreadNew+0x9e>
        return (NULL);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e054      	b.n	8003c6c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <osThreadNew+0xd4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2ba7      	cmp	r3, #167	; 0xa7
 8003be0:	d90a      	bls.n	8003bf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <osThreadNew+0xd4>
        mem = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf6:	e010      	b.n	8003c1a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <osThreadNew+0xf6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <osThreadNew+0xf6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <osThreadNew+0xf6>
          mem = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c14:	e001      	b.n	8003c1a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d110      	bne.n	8003c42 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c28:	9202      	str	r2, [sp, #8]
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fe12 	bl	8004860 <xTaskCreateStatic>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e013      	b.n	8003c6a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d110      	bne.n	8003c6a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fe5c 	bl	8004918 <xTaskCreate>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <osThreadNew+0x146>
          hTask = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c6a:	697b      	ldr	r3, [r7, #20]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3738      	adds	r7, #56	; 0x38
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000294 	.word	0x20000294

08003c78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c80:	f3ef 8305 	mrs	r3, IPSR
 8003c84:	613b      	str	r3, [r7, #16]
  return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <osDelay+0x34>
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <osDelay+0x58>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d109      	bne.n	8003cb4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <osDelay+0x3c>
    stat = osErrorISR;
 8003cac:	f06f 0305 	mvn.w	r3, #5
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e007      	b.n	8003cc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ff7e 	bl	8004bc0 <vTaskDelay>
    }
  }

  return (stat);
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000294 	.word	0x20000294

08003cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <vApplicationGetIdleTaskMemory+0x28>)
 8003ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	20000298 	.word	0x20000298
 8003d00:	20000340 	.word	0x20000340

08003d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <vApplicationGetTimerTaskMemory+0x30>)
 8003d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000540 	.word	0x20000540
 8003d34:	200005e8 	.word	0x200005e8

08003d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0208 	add.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f103 0208 	add.w	r2, r3, #8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f103 0208 	add.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d103      	bne.n	8003df4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e00c      	b.n	8003e0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3308      	adds	r3, #8
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e002      	b.n	8003e02 <vListInsert+0x2e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d2f6      	bcs.n	8003dfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6852      	ldr	r2, [r2, #4]
 8003e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d103      	bne.n	8003e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	1e5a      	subs	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
	...

08003e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ec2:	f001 fff3 	bl	8005eac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	68f9      	ldr	r1, [r7, #12]
 8003ef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	441a      	add	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	22ff      	movs	r2, #255	; 0xff
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d114      	bne.n	8003f42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3310      	adds	r3, #16
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f91b 	bl	8005160 <xTaskRemoveFromEventList>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <xQueueGenericReset+0xcc>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	e009      	b.n	8003f56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3310      	adds	r3, #16
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fef6 	bl	8003d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3324      	adds	r3, #36	; 0x24
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fef1 	bl	8003d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f56:	f001 ffd9 	bl	8005f0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f5a:	2301      	movs	r3, #1
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08e      	sub	sp, #56	; 0x38
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <xQueueGenericCreateStatic+0x52>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <xQueueGenericCreateStatic+0x56>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericCreateStatic+0x58>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	623b      	str	r3, [r7, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <xQueueGenericCreateStatic+0x7e>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <xQueueGenericCreateStatic+0x82>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericCreateStatic+0x84>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	61fb      	str	r3, [r7, #28]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004006:	2350      	movs	r3, #80	; 0x50
 8004008:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b50      	cmp	r3, #80	; 0x50
 800400e:	d00a      	beq.n	8004026 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	61bb      	str	r3, [r7, #24]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004038:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f805 	bl	8004056 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	; 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e002      	b.n	8004078 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004084:	2101      	movs	r1, #1
 8004086:	69b8      	ldr	r0, [r7, #24]
 8004088:	f7ff ff06 	bl	8003e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08e      	sub	sp, #56	; 0x38
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xQueueGenericSend+0x32>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <xQueueGenericSend+0x40>
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <xQueueGenericSend+0x44>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <xQueueGenericSend+0x46>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <xQueueGenericSend+0x60>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d103      	bne.n	800410a <xQueueGenericSend+0x6e>
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <xQueueGenericSend+0x72>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <xQueueGenericSend+0x74>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericSend+0x8e>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	623b      	str	r3, [r7, #32]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800412a:	f001 f9df 	bl	80054ec <xTaskGetSchedulerState>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <xQueueGenericSend+0x9e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0xa2>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0xa4>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueGenericSend+0xbe>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	61fb      	str	r3, [r7, #28]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800415a:	f001 fea7 	bl	8005eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <xQueueGenericSend+0xd4>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d129      	bne.n	80041c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004176:	f000 fa07 	bl	8004588 <prvCopyDataToQueue>
 800417a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	3324      	adds	r3, #36	; 0x24
 8004188:	4618      	mov	r0, r3
 800418a:	f000 ffe9 	bl	8005160 <xTaskRemoveFromEventList>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004194:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <xQueueGenericSend+0x1f8>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	e00a      	b.n	80041bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <xQueueGenericSend+0x1f8>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041bc:	f001 fea6 	bl	8005f0c <vPortExitCritical>
				return pdPASS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e063      	b.n	800428c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ca:	f001 fe9f 	bl	8005f0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e05c      	b.n	800428c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f823 	bl	8005228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041e6:	f001 fe91 	bl	8005f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ea:	f000 fd8d 	bl	8004d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ee:	f001 fe5d 	bl	8005eac <vPortEnterCritical>
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f8:	b25b      	sxtb	r3, r3
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d103      	bne.n	8004208 <xQueueGenericSend+0x16c>
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d103      	bne.n	800421e <xQueueGenericSend+0x182>
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421e:	f001 fe75 	bl	8005f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004222:	1d3a      	adds	r2, r7, #4
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f812 	bl	8005254 <xTaskCheckForTimeOut>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d124      	bne.n	8004280 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004238:	f000 fa9e 	bl	8004778 <prvIsQueueFull>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	3310      	adds	r3, #16
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 ff38 	bl	80050c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004252:	f000 fa29 	bl	80046a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004256:	f000 fd65 	bl	8004d24 <xTaskResumeAll>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f af7c 	bne.w	800415a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <xQueueGenericSend+0x1f8>)
 8004264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	e772      	b.n	800415a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004276:	f000 fa17 	bl	80046a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800427a:	f000 fd53 	bl	8004d24 <xTaskResumeAll>
 800427e:	e76c      	b.n	800415a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004282:	f000 fa11 	bl	80046a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004286:	f000 fd4d 	bl	8004d24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800428a:	2300      	movs	r3, #0
		}
	}
}
 800428c:	4618      	mov	r0, r3
 800428e:	3738      	adds	r7, #56	; 0x38
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <xQueueGenericSendFromISR+0x3c>
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <xQueueGenericSendFromISR+0x40>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <xQueueGenericSendFromISR+0x42>
 80042d8:	2300      	movs	r3, #0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	623b      	str	r3, [r7, #32]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSendFromISR+0x6a>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <xQueueGenericSendFromISR+0x6e>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <xQueueGenericSendFromISR+0x70>
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	61fb      	str	r3, [r7, #28]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004322:	f001 fe85 	bl	8006030 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004326:	f3ef 8211 	mrs	r2, BASEPRI
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61ba      	str	r2, [r7, #24]
 800433c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800433e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	429a      	cmp	r2, r3
 800434c:	d302      	bcc.n	8004354 <xQueueGenericSendFromISR+0xbc>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d12c      	bne.n	80043ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004364:	f000 f910 	bl	8004588 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004368:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d112      	bne.n	8004398 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	3324      	adds	r3, #36	; 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f000 feee 	bl	8005160 <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e007      	b.n	80043a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	b25a      	sxtb	r2, r3
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043a8:	2301      	movs	r3, #1
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80043ac:	e001      	b.n	80043b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3738      	adds	r7, #56	; 0x38
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	; 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xQueueReceive+0x30>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	623b      	str	r3, [r7, #32]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <xQueueReceive+0x3e>
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <xQueueReceive+0x42>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <xQueueReceive+0x44>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueReceive+0x5e>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	61fb      	str	r3, [r7, #28]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004426:	f001 f861 	bl	80054ec <xTaskGetSchedulerState>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <xQueueReceive+0x6e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <xQueueReceive+0x72>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueReceive+0x74>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xQueueReceive+0x8e>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004456:	f001 fd29 	bl	8005eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01f      	beq.n	80044a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800446a:	f000 f8f7 	bl	800465c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00f      	beq.n	800449e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	3310      	adds	r3, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fe6c 	bl	8005160 <xTaskRemoveFromEventList>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <xQueueReceive+0x1bc>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800449e:	f001 fd35 	bl	8005f0c <vPortExitCritical>
				return pdPASS;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e069      	b.n	800457a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ac:	f001 fd2e 	bl	8005f0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e062      	b.n	800457a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 feb2 	bl	8005228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044c8:	f001 fd20 	bl	8005f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044cc:	f000 fc1c 	bl	8004d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d0:	f001 fcec 	bl	8005eac <vPortEnterCritical>
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d103      	bne.n	80044ea <xQueueReceive+0x122>
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d103      	bne.n	8004500 <xQueueReceive+0x138>
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004500:	f001 fd04 	bl	8005f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004504:	1d3a      	adds	r2, r7, #4
 8004506:	f107 0310 	add.w	r3, r7, #16
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fea1 	bl	8005254 <xTaskCheckForTimeOut>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d123      	bne.n	8004560 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451a:	f000 f917 	bl	800474c <prvIsQueueEmpty>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	3324      	adds	r3, #36	; 0x24
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fdc7 	bl	80050c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004534:	f000 f8b8 	bl	80046a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004538:	f000 fbf4 	bl	8004d24 <xTaskResumeAll>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d189      	bne.n	8004456 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <xQueueReceive+0x1bc>)
 8004544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	e780      	b.n	8004456 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f000 f8a7 	bl	80046a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800455a:	f000 fbe3 	bl	8004d24 <xTaskResumeAll>
 800455e:	e77a      	b.n	8004456 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004562:	f000 f8a1 	bl	80046a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004566:	f000 fbdd 	bl	8004d24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800456a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456c:	f000 f8ee 	bl	800474c <prvIsQueueEmpty>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f43f af6f 	beq.w	8004456 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800457a:	4618      	mov	r0, r3
 800457c:	3730      	adds	r7, #48	; 0x30
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10d      	bne.n	80045c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14d      	bne.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ffb8 	bl	8005528 <xTaskPriorityDisinherit>
 80045b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	e043      	b.n	800464a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d119      	bne.n	80045fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6898      	ldr	r0, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	461a      	mov	r2, r3
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	f001 ffc6 	bl	8006564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d32b      	bcc.n	800464a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	e026      	b.n	800464a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68d8      	ldr	r0, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	461a      	mov	r2, r3
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	f001 ffac 	bl	8006564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	425b      	negs	r3, r3
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d207      	bcs.n	8004638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	425b      	negs	r3, r3
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d105      	bne.n	800464a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3b01      	subs	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d303      	bcc.n	8004690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68d9      	ldr	r1, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	461a      	mov	r2, r3
 800469a:	6838      	ldr	r0, [r7, #0]
 800469c:	f001 ff62 	bl	8006564 <memcpy>
	}
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046b0:	f001 fbfc 	bl	8005eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046bc:	e011      	b.n	80046e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d012      	beq.n	80046ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fd48 	bl	8005160 <xTaskRemoveFromEventList>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046d6:	f000 fe1f 	bl	8005318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	3b01      	subs	r3, #1
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dce9      	bgt.n	80046be <prvUnlockQueue+0x16>
 80046ea:	e000      	b.n	80046ee <prvUnlockQueue+0x46>
					break;
 80046ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046f6:	f001 fc09 	bl	8005f0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046fa:	f001 fbd7 	bl	8005eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004706:	e011      	b.n	800472c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3310      	adds	r3, #16
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd23 	bl	8005160 <xTaskRemoveFromEventList>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004720:	f000 fdfa 	bl	8005318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	3b01      	subs	r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800472c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dce9      	bgt.n	8004708 <prvUnlockQueue+0x60>
 8004734:	e000      	b.n	8004738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	22ff      	movs	r2, #255	; 0xff
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004740:	f001 fbe4 	bl	8005f0c <vPortExitCritical>
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004754:	f001 fbaa 	bl	8005eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476a:	f001 fbcf 	bl	8005f0c <vPortExitCritical>

	return xReturn;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004780:	f001 fb94 	bl	8005eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	429a      	cmp	r2, r3
 800478e:	d102      	bne.n	8004796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e001      	b.n	800479a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800479a:	f001 fbb7 	bl	8005f0c <vPortExitCritical>

	return xReturn;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e014      	b.n	80047e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047b8:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <vQueueAddToRegistry+0x4c>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <vQueueAddToRegistry+0x4c>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <vQueueAddToRegistry+0x4c>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047da:	e006      	b.n	80047ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b07      	cmp	r3, #7
 80047e6:	d9e7      	bls.n	80047b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	200009e8 	.word	0x200009e8

080047f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004808:	f001 fb50 	bl	8005eac <vPortEnterCritical>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004812:	b25b      	sxtb	r3, r3
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d103      	bne.n	8004822 <vQueueWaitForMessageRestricted+0x2a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004828:	b25b      	sxtb	r3, r3
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d103      	bne.n	8004838 <vQueueWaitForMessageRestricted+0x40>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004838:	f001 fb68 	bl	8005f0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3324      	adds	r3, #36	; 0x24
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fc5b 	bl	8005108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004852:	6978      	ldr	r0, [r7, #20]
 8004854:	f7ff ff28 	bl	80046a8 <prvUnlockQueue>
	}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	; 0x38
 8004864:	af04      	add	r7, sp, #16
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fb      	str	r3, [r7, #28]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048a6:	23a8      	movs	r3, #168	; 0xa8
 80048a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2ba8      	cmp	r3, #168	; 0xa8
 80048ae:	d00a      	beq.n	80048c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61bb      	str	r3, [r7, #24]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01e      	beq.n	800490a <xTaskCreateStatic+0xaa>
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048e4:	2300      	movs	r3, #0
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f851 	bl	80049a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004904:	f000 f8ec 	bl	8004ae0 <prvAddNewTaskToReadyList>
 8004908:	e001      	b.n	800490e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800490e:	697b      	ldr	r3, [r7, #20]
	}
 8004910:	4618      	mov	r0, r3
 8004912:	3728      	adds	r7, #40	; 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af04      	add	r7, sp, #16
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fbbd 	bl	80060ac <pvPortMalloc>
 8004932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800493a:	20a8      	movs	r0, #168	; 0xa8
 800493c:	f001 fbb6 	bl	80060ac <pvPortMalloc>
 8004940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
 800494e:	e005      	b.n	800495c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	f001 fc6f 	bl	8006234 <vPortFree>
 8004956:	e001      	b.n	800495c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d017      	beq.n	8004992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	2300      	movs	r3, #0
 800496e:	9303      	str	r3, [sp, #12]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	9302      	str	r3, [sp, #8]
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f80f 	bl	80049a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004986:	69f8      	ldr	r0, [r7, #28]
 8004988:	f000 f8aa 	bl	8004ae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800498c:	2301      	movs	r3, #1
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e002      	b.n	8004998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004998:	69bb      	ldr	r3, [r7, #24]
	}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	461a      	mov	r2, r3
 80049bc:	21a5      	movs	r1, #165	; 0xa5
 80049be:	f001 fd4d 	bl	800645c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049cc:	3b01      	subs	r3, #1
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	617b      	str	r3, [r7, #20]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	e012      	b.n	8004a28 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	7819      	ldrb	r1, [r3, #0]
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3334      	adds	r3, #52	; 0x34
 8004a12:	460a      	mov	r2, r1
 8004a14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d006      	beq.n	8004a30 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b0f      	cmp	r3, #15
 8004a2c:	d9e9      	bls.n	8004a02 <prvInitialiseNewTask+0x5e>
 8004a2e:	e000      	b.n	8004a32 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004a30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b37      	cmp	r3, #55	; 0x37
 8004a3e:	d901      	bls.n	8004a44 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a40:	2337      	movs	r3, #55	; 0x37
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2200      	movs	r2, #0
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f98b 	bl	8003d76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	3318      	adds	r3, #24
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff f986 	bl	8003d76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	3354      	adds	r3, #84	; 0x54
 8004a94:	224c      	movs	r2, #76	; 0x4c
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fcdf 	bl	800645c <memset>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <prvInitialiseNewTask+0x130>)
 8004aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <prvInitialiseNewTask+0x134>)
 8004aa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <prvInitialiseNewTask+0x138>)
 8004aae:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	69b8      	ldr	r0, [r7, #24]
 8004ab6:	f001 f90b 	bl	8005cd0 <pxPortInitialiseStack>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004acc:	bf00      	nop
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20002208 	.word	0x20002208
 8004ad8:	20002270 	.word	0x20002270
 8004adc:	200022d8 	.word	0x200022d8

08004ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ae8:	f001 f9e0 	bl	8005eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aec:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004af4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004af6:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d110      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b0c:	f000 fc28 	bl	8005360 <prvInitialiseTaskLists>
 8004b10:	e00d      	b.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b12:	4b26      	ldr	r3, [pc, #152]	; (8004bac <prvAddNewTaskToReadyList+0xcc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b1a:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d802      	bhi.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <prvAddNewTaskToReadyList+0xd4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d903      	bls.n	8004b54 <prvAddNewTaskToReadyList+0x74>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <prvAddNewTaskToReadyList+0xd4>)
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <prvAddNewTaskToReadyList+0xd8>)
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7ff f90f 	bl	8003d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b70:	f001 f9cc 	bl	8005f0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <prvAddNewTaskToReadyList+0xcc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d207      	bcs.n	8004b9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <prvAddNewTaskToReadyList+0xdc>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000efc 	.word	0x20000efc
 8004ba8:	20000a28 	.word	0x20000a28
 8004bac:	20000f08 	.word	0x20000f08
 8004bb0:	20000f18 	.word	0x20000f18
 8004bb4:	20000f04 	.word	0x20000f04
 8004bb8:	20000a2c 	.word	0x20000a2c
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d017      	beq.n	8004c02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <vTaskDelay+0x60>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <vTaskDelay+0x30>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60bb      	str	r3, [r7, #8]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bf0:	f000 f88a 	bl	8004d08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fd04 	bl	8005604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bfc:	f000 f892 	bl	8004d24 <xTaskResumeAll>
 8004c00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <vTaskDelay+0x64>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000f24 	.word	0x20000f24
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c36:	463a      	mov	r2, r7
 8004c38:	1d39      	adds	r1, r7, #4
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff f848 	bl	8003cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	9202      	str	r2, [sp, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	460a      	mov	r2, r1
 8004c56:	4924      	ldr	r1, [pc, #144]	; (8004ce8 <vTaskStartScheduler+0xc0>)
 8004c58:	4824      	ldr	r0, [pc, #144]	; (8004cec <vTaskStartScheduler+0xc4>)
 8004c5a:	f7ff fe01 	bl	8004860 <xTaskCreateStatic>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <vTaskStartScheduler+0xc8>)
 8004c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <vTaskStartScheduler+0xc8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e001      	b.n	8004c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d102      	bne.n	8004c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c7c:	f000 fd16 	bl	80056ac <xTimerCreateTimerTask>
 8004c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11b      	bne.n	8004cc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	613b      	str	r3, [r7, #16]
}
 8004c9a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <vTaskStartScheduler+0xcc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3354      	adds	r3, #84	; 0x54
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <vTaskStartScheduler+0xd0>)
 8004ca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <vTaskStartScheduler+0xd4>)
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <vTaskStartScheduler+0xd8>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004cb4:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <vTaskStartScheduler+0xdc>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cba:	f001 f885 	bl	8005dc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cbe:	e00e      	b.n	8004cde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d10a      	bne.n	8004cde <vTaskStartScheduler+0xb6>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <vTaskStartScheduler+0xb4>
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	080066a0 	.word	0x080066a0
 8004cec:	08005331 	.word	0x08005331
 8004cf0:	20000f20 	.word	0x20000f20
 8004cf4:	20000a28 	.word	0x20000a28
 8004cf8:	2000005c 	.word	0x2000005c
 8004cfc:	20000f1c 	.word	0x20000f1c
 8004d00:	20000f08 	.word	0x20000f08
 8004d04:	20000f00 	.word	0x20000f00

08004d08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vTaskSuspendAll+0x18>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <vTaskSuspendAll+0x18>)
 8004d14:	6013      	str	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000f24 	.word	0x20000f24

08004d24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <xTaskResumeAll+0x118>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	603b      	str	r3, [r7, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d50:	f001 f8ac 	bl	8005eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d54:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <xTaskResumeAll+0x118>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4a38      	ldr	r2, [pc, #224]	; (8004e3c <xTaskResumeAll+0x118>)
 8004d5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <xTaskResumeAll+0x118>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d162      	bne.n	8004e2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <xTaskResumeAll+0x11c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d05e      	beq.n	8004e2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d6e:	e02f      	b.n	8004dd0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <xTaskResumeAll+0x120>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3318      	adds	r3, #24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f861 	bl	8003e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff f85c 	bl	8003e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <xTaskResumeAll+0x124>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d903      	bls.n	8004da0 <xTaskResumeAll+0x7c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	4a2a      	ldr	r2, [pc, #168]	; (8004e48 <xTaskResumeAll+0x124>)
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <xTaskResumeAll+0x128>)
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fe ffe9 	bl	8003d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <xTaskResumeAll+0x12c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <xTaskResumeAll+0x130>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <xTaskResumeAll+0x120>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1cb      	bne.n	8004d70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dde:	f000 fb61 	bl	80054a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004de2:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <xTaskResumeAll+0x134>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dee:	f000 f845 	bl	8004e7c <xTaskIncrementTick>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <xTaskResumeAll+0x130>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f1      	bne.n	8004dee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <xTaskResumeAll+0x134>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <xTaskResumeAll+0x130>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <xTaskResumeAll+0x138>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e2c:	f001 f86e 	bl	8005f0c <vPortExitCritical>

	return xAlreadyYielded;
 8004e30:	68bb      	ldr	r3, [r7, #8]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000f24 	.word	0x20000f24
 8004e40:	20000efc 	.word	0x20000efc
 8004e44:	20000ebc 	.word	0x20000ebc
 8004e48:	20000f04 	.word	0x20000f04
 8004e4c:	20000a2c 	.word	0x20000a2c
 8004e50:	20000a28 	.word	0x20000a28
 8004e54:	20000f10 	.word	0x20000f10
 8004e58:	20000f0c 	.word	0x20000f0c
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <xTaskGetTickCount+0x18>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e6c:	687b      	ldr	r3, [r7, #4]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	20000f00 	.word	0x20000f00

08004e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <xTaskIncrementTick+0x150>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 808e 	bne.w	8004fac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e90:	4b4f      	ldr	r3, [pc, #316]	; (8004fd0 <xTaskIncrementTick+0x154>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e98:	4a4d      	ldr	r2, [pc, #308]	; (8004fd0 <xTaskIncrementTick+0x154>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d120      	bne.n	8004ee6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <xTaskIncrementTick+0x158>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	603b      	str	r3, [r7, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xTaskIncrementTick+0x46>
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <xTaskIncrementTick+0x158>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <xTaskIncrementTick+0x15c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a41      	ldr	r2, [pc, #260]	; (8004fd4 <xTaskIncrementTick+0x158>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4a41      	ldr	r2, [pc, #260]	; (8004fd8 <xTaskIncrementTick+0x15c>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <xTaskIncrementTick+0x160>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	4a3f      	ldr	r2, [pc, #252]	; (8004fdc <xTaskIncrementTick+0x160>)
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	f000 fadf 	bl	80054a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <xTaskIncrementTick+0x164>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d34e      	bcc.n	8004f8e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef0:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <xTaskIncrementTick+0x158>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <xTaskIncrementTick+0x82>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xTaskIncrementTick+0x84>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <xTaskIncrementTick+0x164>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	601a      	str	r2, [r3, #0]
					break;
 8004f0c:	e03f      	b.n	8004f8e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <xTaskIncrementTick+0x158>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d203      	bcs.n	8004f2e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <xTaskIncrementTick+0x164>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
						break;
 8004f2c:	e02f      	b.n	8004f8e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe ff86 	bl	8003e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3318      	adds	r3, #24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe ff7d 	bl	8003e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4e:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <xTaskIncrementTick+0x168>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d903      	bls.n	8004f5e <xTaskIncrementTick+0xe2>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <xTaskIncrementTick+0x168>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <xTaskIncrementTick+0x16c>)
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe ff0a 	bl	8003d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <xTaskIncrementTick+0x170>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b3      	bcc.n	8004ef0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8c:	e7b0      	b.n	8004ef0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f8e:	4b17      	ldr	r3, [pc, #92]	; (8004fec <xTaskIncrementTick+0x170>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	4914      	ldr	r1, [pc, #80]	; (8004fe8 <xTaskIncrementTick+0x16c>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d907      	bls.n	8004fb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e004      	b.n	8004fb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <xTaskIncrementTick+0x174>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <xTaskIncrementTick+0x174>)
 8004fb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <xTaskIncrementTick+0x178>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000f24 	.word	0x20000f24
 8004fd0:	20000f00 	.word	0x20000f00
 8004fd4:	20000eb4 	.word	0x20000eb4
 8004fd8:	20000eb8 	.word	0x20000eb8
 8004fdc:	20000f14 	.word	0x20000f14
 8004fe0:	20000f1c 	.word	0x20000f1c
 8004fe4:	20000f04 	.word	0x20000f04
 8004fe8:	20000a2c 	.word	0x20000a2c
 8004fec:	20000a28 	.word	0x20000a28
 8004ff0:	20000f0c 	.word	0x20000f0c
 8004ff4:	20000f10 	.word	0x20000f10

08004ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <vTaskSwitchContext+0xb0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <vTaskSwitchContext+0xb4>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800500c:	e046      	b.n	800509c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <vTaskSwitchContext+0xb4>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005014:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <vTaskSwitchContext+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e010      	b.n	800503e <vTaskSwitchContext+0x46>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <vTaskSwitchContext+0x40>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <vTaskSwitchContext+0x3e>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	491d      	ldr	r1, [pc, #116]	; (80050b4 <vTaskSwitchContext+0xbc>)
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0e4      	beq.n	800501c <vTaskSwitchContext+0x24>
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <vTaskSwitchContext+0xbc>)
 800505e:	4413      	add	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3308      	adds	r3, #8
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <vTaskSwitchContext+0x8a>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <vTaskSwitchContext+0xc0>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <vTaskSwitchContext+0xb8>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <vTaskSwitchContext+0xc0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3354      	adds	r3, #84	; 0x54
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <vTaskSwitchContext+0xc4>)
 800509a:	6013      	str	r3, [r2, #0]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000f24 	.word	0x20000f24
 80050ac:	20000f10 	.word	0x20000f10
 80050b0:	20000f04 	.word	0x20000f04
 80050b4:	20000a2c 	.word	0x20000a2c
 80050b8:	20000a28 	.word	0x20000a28
 80050bc:	2000005c 	.word	0x2000005c

080050c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <vTaskPlaceOnEventList+0x44>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3318      	adds	r3, #24
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fe fe70 	bl	8003dd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f4:	2101      	movs	r1, #1
 80050f6:	6838      	ldr	r0, [r7, #0]
 80050f8:	f000 fa84 	bl	8005604 <prvAddCurrentTaskToDelayedList>
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000a28 	.word	0x20000a28

08005108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	617b      	str	r3, [r7, #20]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <vTaskPlaceOnEventListRestricted+0x54>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3318      	adds	r3, #24
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7fe fe28 	bl	8003d8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	68b8      	ldr	r0, [r7, #8]
 800514e:	f000 fa59 	bl	8005604 <prvAddCurrentTaskToDelayedList>
	}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000a28 	.word	0x20000a28

08005160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60fb      	str	r3, [r7, #12]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	3318      	adds	r3, #24
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fe57 	bl	8003e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005196:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <xTaskRemoveFromEventList+0xb0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11d      	bne.n	80051da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fe4e 	bl	8003e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <xTaskRemoveFromEventList+0xb4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <xTaskRemoveFromEventList+0x5c>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a16      	ldr	r2, [pc, #88]	; (8005214 <xTaskRemoveFromEventList+0xb4>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <xTaskRemoveFromEventList+0xb8>)
 80051ca:	441a      	add	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7fe fddb 	bl	8003d8e <vListInsertEnd>
 80051d8:	e005      	b.n	80051e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3318      	adds	r3, #24
 80051de:	4619      	mov	r1, r3
 80051e0:	480e      	ldr	r0, [pc, #56]	; (800521c <xTaskRemoveFromEventList+0xbc>)
 80051e2:	f7fe fdd4 	bl	8003d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <xTaskRemoveFromEventList+0xc0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d905      	bls.n	8005200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <xTaskRemoveFromEventList+0xc4>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e001      	b.n	8005204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005204:	697b      	ldr	r3, [r7, #20]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000f24 	.word	0x20000f24
 8005214:	20000f04 	.word	0x20000f04
 8005218:	20000a2c 	.word	0x20000a2c
 800521c:	20000ebc 	.word	0x20000ebc
 8005220:	20000a28 	.word	0x20000a28
 8005224:	20000f10 	.word	0x20000f10

08005228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <vTaskInternalSetTimeOutState+0x24>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <vTaskInternalSetTimeOutState+0x28>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000f14 	.word	0x20000f14
 8005250:	20000f00 	.word	0x20000f00

08005254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	613b      	str	r3, [r7, #16]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005296:	f000 fe09 	bl	8005eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <xTaskCheckForTimeOut+0xbc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e023      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <xTaskCheckForTimeOut+0xc0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d007      	beq.n	80052d6 <xTaskCheckForTimeOut+0x82>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e015      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d20b      	bcs.n	80052f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff9b 	bl	8005228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e004      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005302:	f000 fe03 	bl	8005f0c <vPortExitCritical>

	return xReturn;
 8005306:	69fb      	ldr	r3, [r7, #28]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000f00 	.word	0x20000f00
 8005314:	20000f14 	.word	0x20000f14

08005318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <vTaskMissedYield+0x14>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000f10 	.word	0x20000f10

08005330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005338:	f000 f852 	bl	80053e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <prvIdleTask+0x28>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d9f9      	bls.n	8005338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <prvIdleTask+0x2c>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005354:	e7f0      	b.n	8005338 <prvIdleTask+0x8>
 8005356:	bf00      	nop
 8005358:	20000a2c 	.word	0x20000a2c
 800535c:	e000ed04 	.word	0xe000ed04

08005360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	e00c      	b.n	8005386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a12      	ldr	r2, [pc, #72]	; (80053c0 <prvInitialiseTaskLists+0x60>)
 8005378:	4413      	add	r3, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fcdc 	bl	8003d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3301      	adds	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b37      	cmp	r3, #55	; 0x37
 800538a:	d9ef      	bls.n	800536c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800538c:	480d      	ldr	r0, [pc, #52]	; (80053c4 <prvInitialiseTaskLists+0x64>)
 800538e:	f7fe fcd3 	bl	8003d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005392:	480d      	ldr	r0, [pc, #52]	; (80053c8 <prvInitialiseTaskLists+0x68>)
 8005394:	f7fe fcd0 	bl	8003d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005398:	480c      	ldr	r0, [pc, #48]	; (80053cc <prvInitialiseTaskLists+0x6c>)
 800539a:	f7fe fccd 	bl	8003d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800539e:	480c      	ldr	r0, [pc, #48]	; (80053d0 <prvInitialiseTaskLists+0x70>)
 80053a0:	f7fe fcca 	bl	8003d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053a4:	480b      	ldr	r0, [pc, #44]	; (80053d4 <prvInitialiseTaskLists+0x74>)
 80053a6:	f7fe fcc7 	bl	8003d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <prvInitialiseTaskLists+0x78>)
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <prvInitialiseTaskLists+0x64>)
 80053ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <prvInitialiseTaskLists+0x7c>)
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <prvInitialiseTaskLists+0x68>)
 80053b4:	601a      	str	r2, [r3, #0]
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000a2c 	.word	0x20000a2c
 80053c4:	20000e8c 	.word	0x20000e8c
 80053c8:	20000ea0 	.word	0x20000ea0
 80053cc:	20000ebc 	.word	0x20000ebc
 80053d0:	20000ed0 	.word	0x20000ed0
 80053d4:	20000ee8 	.word	0x20000ee8
 80053d8:	20000eb4 	.word	0x20000eb4
 80053dc:	20000eb8 	.word	0x20000eb8

080053e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053e6:	e019      	b.n	800541c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053e8:	f000 fd60 	bl	8005eac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <prvCheckTasksWaitingTermination+0x50>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fd23 	bl	8003e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <prvCheckTasksWaitingTermination+0x54>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3b01      	subs	r3, #1
 8005404:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <prvCheckTasksWaitingTermination+0x54>)
 8005406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 8005410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005412:	f000 fd7b 	bl	8005f0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f810 	bl	800543c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <prvCheckTasksWaitingTermination+0x58>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e1      	bne.n	80053e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000ed0 	.word	0x20000ed0
 8005434:	20000efc 	.word	0x20000efc
 8005438:	20000ee4 	.word	0x20000ee4

0800543c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3354      	adds	r3, #84	; 0x54
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f80f 	bl	800646c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fee9 	bl	8006234 <vPortFree>
				vPortFree( pxTCB );
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fee6 	bl	8006234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005468:	e018      	b.n	800549c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005470:	2b01      	cmp	r3, #1
 8005472:	d103      	bne.n	800547c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fedd 	bl	8006234 <vPortFree>
	}
 800547a:	e00f      	b.n	800549c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005482:	2b02      	cmp	r3, #2
 8005484:	d00a      	beq.n	800549c <prvDeleteTCB+0x60>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60fb      	str	r3, [r7, #12]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <prvDeleteTCB+0x5e>
	}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054aa:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <prvResetNextTaskUnblockTime+0x40>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <prvResetNextTaskUnblockTime+0x14>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <prvResetNextTaskUnblockTime+0x16>
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prvResetNextTaskUnblockTime+0x44>)
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054c6:	e008      	b.n	80054da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <prvResetNextTaskUnblockTime+0x40>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <prvResetNextTaskUnblockTime+0x44>)
 80054d8:	6013      	str	r3, [r2, #0]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	20000eb4 	.word	0x20000eb4
 80054e8:	20000f1c 	.word	0x20000f1c

080054ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <xTaskGetSchedulerState+0x34>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054fa:	2301      	movs	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	e008      	b.n	8005512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <xTaskGetSchedulerState+0x38>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005508:	2302      	movs	r3, #2
 800550a:	607b      	str	r3, [r7, #4]
 800550c:	e001      	b.n	8005512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005512:	687b      	ldr	r3, [r7, #4]
	}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000f08 	.word	0x20000f08
 8005524:	20000f24 	.word	0x20000f24

08005528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d056      	beq.n	80055ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <xTaskPriorityDisinherit+0xd0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d00a      	beq.n	800555e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	60fb      	str	r3, [r7, #12]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60bb      	str	r3, [r7, #8]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	1e5a      	subs	r2, r3, #1
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	429a      	cmp	r2, r3
 8005590:	d02c      	beq.n	80055ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005596:	2b00      	cmp	r3, #0
 8005598:	d128      	bne.n	80055ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fc50 	bl	8003e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <xTaskPriorityDisinherit+0xd4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d903      	bls.n	80055cc <xTaskPriorityDisinherit+0xa4>
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <xTaskPriorityDisinherit+0xd4>)
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <xTaskPriorityDisinherit+0xd8>)
 80055da:	441a      	add	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f7fe fbd3 	bl	8003d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055ec:	697b      	ldr	r3, [r7, #20]
	}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000a28 	.word	0x20000a28
 80055fc:	20000f04 	.word	0x20000f04
 8005600:	20000a2c 	.word	0x20000a2c

08005604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800560e:	4b21      	ldr	r3, [pc, #132]	; (8005694 <prvAddCurrentTaskToDelayedList+0x90>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <prvAddCurrentTaskToDelayedList+0x94>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc12 	bl	8003e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d10a      	bne.n	800563e <prvAddCurrentTaskToDelayedList+0x3a>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <prvAddCurrentTaskToDelayedList+0x94>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4819      	ldr	r0, [pc, #100]	; (800569c <prvAddCurrentTaskToDelayedList+0x98>)
 8005638:	f7fe fba9 	bl	8003d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800563c:	e026      	b.n	800568c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvAddCurrentTaskToDelayedList+0x94>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	429a      	cmp	r2, r3
 8005654:	d209      	bcs.n	800566a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005656:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <prvAddCurrentTaskToDelayedList+0x94>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7fe fbb6 	bl	8003dd4 <vListInsert>
}
 8005668:	e010      	b.n	800568c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <prvAddCurrentTaskToDelayedList+0x94>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe fbac 	bl	8003dd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	d202      	bcs.n	800568c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000f00 	.word	0x20000f00
 8005698:	20000a28 	.word	0x20000a28
 800569c:	20000ee8 	.word	0x20000ee8
 80056a0:	20000eb8 	.word	0x20000eb8
 80056a4:	20000eb4 	.word	0x20000eb4
 80056a8:	20000f1c 	.word	0x20000f1c

080056ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056b6:	f000 facb 	bl	8005c50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056ba:	4b1c      	ldr	r3, [pc, #112]	; (800572c <xTimerCreateTimerTask+0x80>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d021      	beq.n	8005706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056ca:	1d3a      	adds	r2, r7, #4
 80056cc:	f107 0108 	add.w	r1, r7, #8
 80056d0:	f107 030c 	add.w	r3, r7, #12
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fb15 	bl	8003d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	9202      	str	r2, [sp, #8]
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	2302      	movs	r3, #2
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2300      	movs	r3, #0
 80056ea:	460a      	mov	r2, r1
 80056ec:	4910      	ldr	r1, [pc, #64]	; (8005730 <xTimerCreateTimerTask+0x84>)
 80056ee:	4811      	ldr	r0, [pc, #68]	; (8005734 <xTimerCreateTimerTask+0x88>)
 80056f0:	f7ff f8b6 	bl	8004860 <xTaskCreateStatic>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a10      	ldr	r2, [pc, #64]	; (8005738 <xTimerCreateTimerTask+0x8c>)
 80056f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <xTimerCreateTimerTask+0x8c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005702:	2301      	movs	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	613b      	str	r3, [r7, #16]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005722:	697b      	ldr	r3, [r7, #20]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000f58 	.word	0x20000f58
 8005730:	080066a8 	.word	0x080066a8
 8005734:	08005859 	.word	0x08005859
 8005738:	20000f5c 	.word	0x20000f5c

0800573c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	623b      	str	r3, [r7, #32]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800576a:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <xTimerGenericCommand+0x98>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02a      	beq.n	80057c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b05      	cmp	r3, #5
 8005782:	dc18      	bgt.n	80057b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005784:	f7ff feb2 	bl	80054ec <xTaskGetSchedulerState>
 8005788:	4603      	mov	r3, r0
 800578a:	2b02      	cmp	r3, #2
 800578c:	d109      	bne.n	80057a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <xTimerGenericCommand+0x98>)
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	f107 0110 	add.w	r1, r7, #16
 8005796:	2300      	movs	r3, #0
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	f7fe fc7f 	bl	800409c <xQueueGenericSend>
 800579e:	6278      	str	r0, [r7, #36]	; 0x24
 80057a0:	e012      	b.n	80057c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <xTimerGenericCommand+0x98>)
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f107 0110 	add.w	r1, r7, #16
 80057aa:	2300      	movs	r3, #0
 80057ac:	2200      	movs	r2, #0
 80057ae:	f7fe fc75 	bl	800409c <xQueueGenericSend>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24
 80057b4:	e008      	b.n	80057c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <xTimerGenericCommand+0x98>)
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f107 0110 	add.w	r1, r7, #16
 80057be:	2300      	movs	r3, #0
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	f7fe fd69 	bl	8004298 <xQueueGenericSendFromISR>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3728      	adds	r7, #40	; 0x28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000f58 	.word	0x20000f58

080057d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <prvProcessExpiredTimer+0x7c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fb27 	bl	8003e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d122      	bne.n	8005844 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	18d1      	adds	r1, r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f000 f8c8 	bl	80059a0 <prvInsertTimerInActiveList>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	2100      	movs	r1, #0
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f7ff ff8b 	bl	800573c <xTimerGenericCommand>
 8005826:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	60fb      	str	r3, [r7, #12]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	4798      	blx	r3
}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000f50 	.word	0x20000f50

08005858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f857 	bl	8005918 <prvGetNextExpireTime>
 800586a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f803 	bl	800587c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005876:	f000 f8d5 	bl	8005a24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800587a:	e7f1      	b.n	8005860 <prvTimerTask+0x8>

0800587c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005886:	f7ff fa3f 	bl	8004d08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f866 	bl	8005960 <prvSampleTimeNow>
 8005894:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d130      	bne.n	80058fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <prvProcessTimerOrBlockTask+0x3c>
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d806      	bhi.n	80058b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058aa:	f7ff fa3b 	bl	8004d24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff91 	bl	80057d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058b6:	e024      	b.n	8005902 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <prvProcessTimerOrBlockTask+0x90>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <prvProcessTimerOrBlockTask+0x94>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	f7fe ff8b 	bl	80047f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058e2:	f7ff fa1f 	bl	8004d24 <xTaskResumeAll>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <prvProcessTimerOrBlockTask+0x98>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
}
 80058fc:	e001      	b.n	8005902 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058fe:	f7ff fa11 	bl	8004d24 <xTaskResumeAll>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000f54 	.word	0x20000f54
 8005910:	20000f58 	.word	0x20000f58
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005920:	4b0e      	ldr	r3, [pc, #56]	; (800595c <prvGetNextExpireTime+0x44>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvGetNextExpireTime+0x44>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e001      	b.n	800594e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000f50 	.word	0x20000f50

08005960 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005968:	f7ff fa7a 	bl	8004e60 <xTaskGetTickCount>
 800596c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800596e:	4b0b      	ldr	r3, [pc, #44]	; (800599c <prvSampleTimeNow+0x3c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d205      	bcs.n	8005984 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005978:	f000 f908 	bl	8005b8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e002      	b.n	800598a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <prvSampleTimeNow+0x3c>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000f60 	.word	0x20000f60

080059a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d812      	bhi.n	80059ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e01b      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <prvInsertTimerInActiveList+0x7c>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fe f9f5 	bl	8003dd4 <vListInsert>
 80059ea:	e012      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d206      	bcs.n	8005a02 <prvInsertTimerInActiveList+0x62>
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e007      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <prvInsertTimerInActiveList+0x80>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fe f9e1 	bl	8003dd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a12:	697b      	ldr	r3, [r7, #20]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000f54 	.word	0x20000f54
 8005a20:	20000f50 	.word	0x20000f50

08005a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2a:	e09d      	b.n	8005b68 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da18      	bge.n	8005a64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	3304      	adds	r3, #4
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	61fb      	str	r3, [r7, #28]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5a:	6850      	ldr	r0, [r2, #4]
 8005a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	4611      	mov	r1, r2
 8005a62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	db7e      	blt.n	8005b68 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe f9e2 	bl	8003e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a80:	463b      	mov	r3, r7
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ff6c 	bl	8005960 <prvSampleTimeNow>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d86a      	bhi.n	8005b66 <prvProcessReceivedCommands+0x142>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <prvProcessReceivedCommands+0x74>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005b69 	.word	0x08005b69
 8005aa8:	08005b1d 	.word	0x08005b1d
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ac1 	.word	0x08005ac1
 8005ab8:	08005b69 	.word	0x08005b69
 8005abc:	08005b1d 	.word	0x08005b1d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	18d1      	adds	r1, r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ace:	f7ff ff67 	bl	80059a0 <prvInsertTimerInActiveList>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d047      	beq.n	8005b68 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ade:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d13f      	bne.n	8005b68 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	441a      	add	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	2300      	movs	r3, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afa:	f7ff fe1f 	bl	800573c <xTimerGenericCommand>
 8005afe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d130      	bne.n	8005b68 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	61bb      	str	r3, [r7, #24]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	617b      	str	r3, [r7, #20]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	18d1      	adds	r1, r2, r3
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f7ff ff27 	bl	80059a0 <prvInsertTimerInActiveList>
					break;
 8005b52:	e009      	b.n	8005b68 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b60:	f000 fb68 	bl	8006234 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b64:	e000      	b.n	8005b68 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005b66:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <prvProcessReceivedCommands+0x164>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1d39      	adds	r1, r7, #4
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fc29 	bl	80043c8 <xQueueReceive>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f47f af57 	bne.w	8005a2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3730      	adds	r7, #48	; 0x30
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000f58 	.word	0x20000f58

08005b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b92:	e045      	b.n	8005c20 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe f949 	bl	8003e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d12e      	bne.n	8005c20 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d90e      	bls.n	8005bf2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005be0:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f7fe f8f2 	bl	8003dd4 <vListInsert>
 8005bf0:	e016      	b.n	8005c20 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fd9d 	bl	800573c <xTimerGenericCommand>
 8005c02:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	603b      	str	r3, [r7, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1b4      	bne.n	8005b94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <prvSwitchTimerLists+0xc0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <prvSwitchTimerLists+0xbc>)
 8005c36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c38:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <prvSwitchTimerLists+0xc0>)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	6013      	str	r3, [r2, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000f50 	.word	0x20000f50
 8005c4c:	20000f54 	.word	0x20000f54

08005c50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c56:	f000 f929 	bl	8005eac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d120      	bne.n	8005ca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c62:	4814      	ldr	r0, [pc, #80]	; (8005cb4 <prvCheckForValidListAndQueue+0x64>)
 8005c64:	f7fe f868 	bl	8003d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c68:	4813      	ldr	r0, [pc, #76]	; (8005cb8 <prvCheckForValidListAndQueue+0x68>)
 8005c6a:	f7fe f865 	bl	8003d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <prvCheckForValidListAndQueue+0x6c>)
 8005c70:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <prvCheckForValidListAndQueue+0x64>)
 8005c72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <prvCheckForValidListAndQueue+0x70>)
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <prvCheckForValidListAndQueue+0x68>)
 8005c78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <prvCheckForValidListAndQueue+0x74>)
 8005c80:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <prvCheckForValidListAndQueue+0x78>)
 8005c82:	2110      	movs	r1, #16
 8005c84:	200a      	movs	r0, #10
 8005c86:	f7fe f96f 	bl	8003f68 <xQueueGenericCreateStatic>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	490b      	ldr	r1, [pc, #44]	; (8005ccc <prvCheckForValidListAndQueue+0x7c>)
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fd82 	bl	80047a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ca4:	f000 f932 	bl	8005f0c <vPortExitCritical>
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000f58 	.word	0x20000f58
 8005cb4:	20000f28 	.word	0x20000f28
 8005cb8:	20000f3c 	.word	0x20000f3c
 8005cbc:	20000f50 	.word	0x20000f50
 8005cc0:	20000f54 	.word	0x20000f54
 8005cc4:	20001004 	.word	0x20001004
 8005cc8:	20000f64 	.word	0x20000f64
 8005ccc:	080066b0 	.word	0x080066b0

08005cd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d00:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <pxPortInitialiseStack+0x54>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b14      	subs	r3, #20
 8005d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b20      	subs	r3, #32
 8005d16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	08005d29 	.word	0x08005d29

08005d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <prvTaskExitError+0x54>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d00a      	beq.n	8005d52 <prvTaskExitError+0x2a>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60fb      	str	r3, [r7, #12]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <prvTaskExitError+0x28>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60bb      	str	r3, [r7, #8]
}
 8005d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d66:	bf00      	nop
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0fc      	beq.n	8005d68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	2000000c 	.word	0x2000000c

08005d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <pxCurrentTCBConst2>)
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	6808      	ldr	r0, [r1, #0]
 8005d86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d8a:	f380 8809 	msr	PSP, r0
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d9e:	4770      	bx	lr

08005da0 <pxCurrentTCBConst2>:
 8005da0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005da8:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <prvPortStartFirstTask+0x1c>)
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f380 8808 	msr	MSP, r0
 8005db2:	b662      	cpsie	i
 8005db4:	b661      	cpsie	f
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	df00      	svc	0
 8005dc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dc2:	bf00      	nop
 8005dc4:	e000ed08 	.word	0xe000ed08

08005dc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dce:	4b32      	ldr	r3, [pc, #200]	; (8005e98 <xPortStartScheduler+0xd0>)
 8005dd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <xPortStartScheduler+0xd4>)
 8005df4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005df8:	2207      	movs	r2, #7
 8005dfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dfc:	e009      	b.n	8005e12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005dfe:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d0ef      	beq.n	8005dfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e1e:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1c3 0307 	rsb	r3, r3, #7
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d00a      	beq.n	8005e40 <xPortStartScheduler+0x78>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60bb      	str	r3, [r7, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <xPortStartScheduler+0xd8>)
 8005e54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <xPortStartScheduler+0xdc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a10      	ldr	r2, [pc, #64]	; (8005ea4 <xPortStartScheduler+0xdc>)
 8005e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <xPortStartScheduler+0xdc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ea4 <xPortStartScheduler+0xdc>)
 8005e70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e76:	f000 f8b9 	bl	8005fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <xPortStartScheduler+0xe0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e80:	f7ff ff92 	bl	8005da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e84:	f7ff f8b8 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005e88:	f7ff ff4e 	bl	8005d28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000e400 	.word	0xe000e400
 8005e9c:	20001054 	.word	0x20001054
 8005ea0:	20001058 	.word	0x20001058
 8005ea4:	e000ed20 	.word	0xe000ed20
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	607b      	str	r3, [r7, #4]
}
 8005ec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <vPortEnterCritical+0x58>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <vPortEnterCritical+0x58>)
 8005ece:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <vPortEnterCritical+0x58>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10f      	bne.n	8005ef8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <vPortEnterCritical+0x5c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	603b      	str	r3, [r7, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <vPortEnterCritical+0x4a>
	}
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000000c 	.word	0x2000000c
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <vPortExitCritical+0x4c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <vPortExitCritical+0x24>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	607b      	str	r3, [r7, #4]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <vPortExitCritical+0x4c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <vPortExitCritical+0x4c>)
 8005f38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <vPortExitCritical+0x4c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <vPortExitCritical+0x42>
 8005f42:	2300      	movs	r3, #0
 8005f44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f383 8811 	msr	BASEPRI, r3
}
 8005f4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	2000000c 	.word	0x2000000c
 8005f5c:	00000000 	.word	0x00000000

08005f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f60:	f3ef 8009 	mrs	r0, PSP
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <pxCurrentTCBConst>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f70:	6010      	str	r0, [r2, #0]
 8005f72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005f76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f7a:	f380 8811 	msr	BASEPRI, r0
 8005f7e:	f7ff f83b 	bl	8004ff8 <vTaskSwitchContext>
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8811 	msr	BASEPRI, r0
 8005f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f96:	f380 8809 	msr	PSP, r0
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	4770      	bx	lr

08005fa0 <pxCurrentTCBConst>:
 8005fa0:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
}
 8005fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fc2:	f7fe ff5b 	bl	8004e7c <xTaskIncrementTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <SysTick_Handler+0x40>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <vPortSetupTimerInterrupt+0x30>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <vPortSetupTimerInterrupt+0x34>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <vPortSetupTimerInterrupt+0x38>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a09      	ldr	r2, [pc, #36]	; (8006028 <vPortSetupTimerInterrupt+0x3c>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	4a08      	ldr	r2, [pc, #32]	; (800602c <vPortSetupTimerInterrupt+0x40>)
 800600a:	3b01      	subs	r3, #1
 800600c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800600e:	4b03      	ldr	r3, [pc, #12]	; (800601c <vPortSetupTimerInterrupt+0x30>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	e000e010 	.word	0xe000e010
 8006020:	e000e018 	.word	0xe000e018
 8006024:	20000000 	.word	0x20000000
 8006028:	10624dd3 	.word	0x10624dd3
 800602c:	e000e014 	.word	0xe000e014

08006030 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b0f      	cmp	r3, #15
 8006040:	d914      	bls.n	800606c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006042:	4a16      	ldr	r2, [pc, #88]	; (800609c <vPortValidateInterruptPriority+0x6c>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800604c:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <vPortValidateInterruptPriority+0x70>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	7afa      	ldrb	r2, [r7, #11]
 8006052:	429a      	cmp	r2, r3
 8006054:	d20a      	bcs.n	800606c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	607b      	str	r3, [r7, #4]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <vPortValidateInterruptPriority+0x74>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <vPortValidateInterruptPriority+0x78>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90a      	bls.n	8006092 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	603b      	str	r3, [r7, #0]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vPortValidateInterruptPriority+0x60>
	}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	e000e3f0 	.word	0xe000e3f0
 80060a0:	20001054 	.word	0x20001054
 80060a4:	e000ed0c 	.word	0xe000ed0c
 80060a8:	20001058 	.word	0x20001058

080060ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060b8:	f7fe fe26 	bl	8004d08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060bc:	4b58      	ldr	r3, [pc, #352]	; (8006220 <pvPortMalloc+0x174>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060c4:	f000 f910 	bl	80062e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060c8:	4b56      	ldr	r3, [pc, #344]	; (8006224 <pvPortMalloc+0x178>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 808e 	bne.w	80061f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01d      	beq.n	8006118 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060dc:	2208      	movs	r2, #8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d014      	beq.n	8006118 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f023 0307 	bic.w	r3, r3, #7
 80060f4:	3308      	adds	r3, #8
 80060f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <pvPortMalloc+0x6c>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	617b      	str	r3, [r7, #20]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d069      	beq.n	80061f2 <pvPortMalloc+0x146>
 800611e:	4b42      	ldr	r3, [pc, #264]	; (8006228 <pvPortMalloc+0x17c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d864      	bhi.n	80061f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006128:	4b40      	ldr	r3, [pc, #256]	; (800622c <pvPortMalloc+0x180>)
 800612a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800612c:	4b3f      	ldr	r3, [pc, #252]	; (800622c <pvPortMalloc+0x180>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006132:	e004      	b.n	800613e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d903      	bls.n	8006150 <pvPortMalloc+0xa4>
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f1      	bne.n	8006134 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006150:	4b33      	ldr	r3, [pc, #204]	; (8006220 <pvPortMalloc+0x174>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	429a      	cmp	r2, r3
 8006158:	d04b      	beq.n	80061f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2208      	movs	r2, #8
 8006160:	4413      	add	r3, r2
 8006162:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	2308      	movs	r3, #8
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	429a      	cmp	r2, r3
 800617a:	d91f      	bls.n	80061bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <pvPortMalloc+0xf8>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	613b      	str	r3, [r7, #16]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061b6:	69b8      	ldr	r0, [r7, #24]
 80061b8:	f000 f8f8 	bl	80063ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <pvPortMalloc+0x17c>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <pvPortMalloc+0x17c>)
 80061c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061ca:	4b17      	ldr	r3, [pc, #92]	; (8006228 <pvPortMalloc+0x17c>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b18      	ldr	r3, [pc, #96]	; (8006230 <pvPortMalloc+0x184>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d203      	bcs.n	80061de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <pvPortMalloc+0x17c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a15      	ldr	r2, [pc, #84]	; (8006230 <pvPortMalloc+0x184>)
 80061dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <pvPortMalloc+0x178>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061f2:	f7fe fd97 	bl	8004d24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <pvPortMalloc+0x16a>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <pvPortMalloc+0x168>
	return pvReturn;
 8006216:	69fb      	ldr	r3, [r7, #28]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3728      	adds	r7, #40	; 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	200021f8 	.word	0x200021f8
 8006224:	20002204 	.word	0x20002204
 8006228:	200021fc 	.word	0x200021fc
 800622c:	200021f0 	.word	0x200021f0
 8006230:	20002200 	.word	0x20002200

08006234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d048      	beq.n	80062d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006246:	2308      	movs	r3, #8
 8006248:	425b      	negs	r3, r3
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <vPortFree+0xac>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vPortFree+0x44>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60fb      	str	r3, [r7, #12]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <vPortFree+0x62>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60bb      	str	r3, [r7, #8]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <vPortFree+0xac>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d019      	beq.n	80062d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d115      	bne.n	80062d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <vPortFree+0xac>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	401a      	ands	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062bc:	f7fe fd24 	bl	8004d08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <vPortFree+0xb0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4413      	add	r3, r2
 80062ca:	4a06      	ldr	r2, [pc, #24]	; (80062e4 <vPortFree+0xb0>)
 80062cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ce:	6938      	ldr	r0, [r7, #16]
 80062d0:	f000 f86c 	bl	80063ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062d4:	f7fe fd26 	bl	8004d24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062d8:	bf00      	nop
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20002204 	.word	0x20002204
 80062e4:	200021fc 	.word	0x200021fc

080062e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ee:	f241 1394 	movw	r3, #4500	; 0x1194
 80062f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062f4:	4b27      	ldr	r3, [pc, #156]	; (8006394 <prvHeapInit+0xac>)
 80062f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00c      	beq.n	800631c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3307      	adds	r3, #7
 8006306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <prvHeapInit+0xac>)
 8006318:	4413      	add	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <prvHeapInit+0xb0>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <prvHeapInit+0xb0>)
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006334:	2208      	movs	r2, #8
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a15      	ldr	r2, [pc, #84]	; (800639c <prvHeapInit+0xb4>)
 8006348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800634a:	4b14      	ldr	r3, [pc, #80]	; (800639c <prvHeapInit+0xb4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <prvHeapInit+0xb4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <prvHeapInit+0xb4>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <prvHeapInit+0xb8>)
 8006376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <prvHeapInit+0xbc>)
 800637e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006380:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <prvHeapInit+0xc0>)
 8006382:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	2000105c 	.word	0x2000105c
 8006398:	200021f0 	.word	0x200021f0
 800639c:	200021f8 	.word	0x200021f8
 80063a0:	20002200 	.word	0x20002200
 80063a4:	200021fc 	.word	0x200021fc
 80063a8:	20002204 	.word	0x20002204

080063ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <prvInsertBlockIntoFreeList+0xa8>)
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e002      	b.n	80063c0 <prvInsertBlockIntoFreeList+0x14>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d8f7      	bhi.n	80063ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	4413      	add	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d108      	bne.n	80063ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	441a      	add	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d118      	bne.n	8006434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <prvInsertBlockIntoFreeList+0xac>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d00d      	beq.n	800642a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e008      	b.n	800643c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <prvInsertBlockIntoFreeList+0xac>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e003      	b.n	800643c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d002      	beq.n	800644a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr
 8006454:	200021f0 	.word	0x200021f0
 8006458:	200021f8 	.word	0x200021f8

0800645c <memset>:
 800645c:	4603      	mov	r3, r0
 800645e:	4402      	add	r2, r0
 8006460:	4293      	cmp	r3, r2
 8006462:	d100      	bne.n	8006466 <memset+0xa>
 8006464:	4770      	bx	lr
 8006466:	f803 1b01 	strb.w	r1, [r3], #1
 800646a:	e7f9      	b.n	8006460 <memset+0x4>

0800646c <_reclaim_reent>:
 800646c:	4b29      	ldr	r3, [pc, #164]	; (8006514 <_reclaim_reent+0xa8>)
 800646e:	b570      	push	{r4, r5, r6, lr}
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4604      	mov	r4, r0
 8006474:	4283      	cmp	r3, r0
 8006476:	d04b      	beq.n	8006510 <_reclaim_reent+0xa4>
 8006478:	69c3      	ldr	r3, [r0, #28]
 800647a:	b143      	cbz	r3, 800648e <_reclaim_reent+0x22>
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d144      	bne.n	800650c <_reclaim_reent+0xa0>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	b111      	cbz	r1, 800648e <_reclaim_reent+0x22>
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f879 	bl	8006580 <_free_r>
 800648e:	6961      	ldr	r1, [r4, #20]
 8006490:	b111      	cbz	r1, 8006498 <_reclaim_reent+0x2c>
 8006492:	4620      	mov	r0, r4
 8006494:	f000 f874 	bl	8006580 <_free_r>
 8006498:	69e1      	ldr	r1, [r4, #28]
 800649a:	b111      	cbz	r1, 80064a2 <_reclaim_reent+0x36>
 800649c:	4620      	mov	r0, r4
 800649e:	f000 f86f 	bl	8006580 <_free_r>
 80064a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80064a4:	b111      	cbz	r1, 80064ac <_reclaim_reent+0x40>
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 f86a 	bl	8006580 <_free_r>
 80064ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ae:	b111      	cbz	r1, 80064b6 <_reclaim_reent+0x4a>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f865 	bl	8006580 <_free_r>
 80064b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064b8:	b111      	cbz	r1, 80064c0 <_reclaim_reent+0x54>
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 f860 	bl	8006580 <_free_r>
 80064c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064c2:	b111      	cbz	r1, 80064ca <_reclaim_reent+0x5e>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 f85b 	bl	8006580 <_free_r>
 80064ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80064cc:	b111      	cbz	r1, 80064d4 <_reclaim_reent+0x68>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f856 	bl	8006580 <_free_r>
 80064d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80064d6:	b111      	cbz	r1, 80064de <_reclaim_reent+0x72>
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 f851 	bl	8006580 <_free_r>
 80064de:	6a23      	ldr	r3, [r4, #32]
 80064e0:	b1b3      	cbz	r3, 8006510 <_reclaim_reent+0xa4>
 80064e2:	4620      	mov	r0, r4
 80064e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064e8:	4718      	bx	r3
 80064ea:	5949      	ldr	r1, [r1, r5]
 80064ec:	b941      	cbnz	r1, 8006500 <_reclaim_reent+0x94>
 80064ee:	3504      	adds	r5, #4
 80064f0:	69e3      	ldr	r3, [r4, #28]
 80064f2:	2d80      	cmp	r5, #128	; 0x80
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	d1f8      	bne.n	80064ea <_reclaim_reent+0x7e>
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 f841 	bl	8006580 <_free_r>
 80064fe:	e7c0      	b.n	8006482 <_reclaim_reent+0x16>
 8006500:	680e      	ldr	r6, [r1, #0]
 8006502:	4620      	mov	r0, r4
 8006504:	f000 f83c 	bl	8006580 <_free_r>
 8006508:	4631      	mov	r1, r6
 800650a:	e7ef      	b.n	80064ec <_reclaim_reent+0x80>
 800650c:	2500      	movs	r5, #0
 800650e:	e7ef      	b.n	80064f0 <_reclaim_reent+0x84>
 8006510:	bd70      	pop	{r4, r5, r6, pc}
 8006512:	bf00      	nop
 8006514:	2000005c 	.word	0x2000005c

08006518 <__libc_init_array>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	2600      	movs	r6, #0
 800651c:	4d0c      	ldr	r5, [pc, #48]	; (8006550 <__libc_init_array+0x38>)
 800651e:	4c0d      	ldr	r4, [pc, #52]	; (8006554 <__libc_init_array+0x3c>)
 8006520:	1b64      	subs	r4, r4, r5
 8006522:	10a4      	asrs	r4, r4, #2
 8006524:	42a6      	cmp	r6, r4
 8006526:	d109      	bne.n	800653c <__libc_init_array+0x24>
 8006528:	f000 f87e 	bl	8006628 <_init>
 800652c:	2600      	movs	r6, #0
 800652e:	4d0a      	ldr	r5, [pc, #40]	; (8006558 <__libc_init_array+0x40>)
 8006530:	4c0a      	ldr	r4, [pc, #40]	; (800655c <__libc_init_array+0x44>)
 8006532:	1b64      	subs	r4, r4, r5
 8006534:	10a4      	asrs	r4, r4, #2
 8006536:	42a6      	cmp	r6, r4
 8006538:	d105      	bne.n	8006546 <__libc_init_array+0x2e>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006540:	4798      	blx	r3
 8006542:	3601      	adds	r6, #1
 8006544:	e7ee      	b.n	8006524 <__libc_init_array+0xc>
 8006546:	f855 3b04 	ldr.w	r3, [r5], #4
 800654a:	4798      	blx	r3
 800654c:	3601      	adds	r6, #1
 800654e:	e7f2      	b.n	8006536 <__libc_init_array+0x1e>
 8006550:	08006784 	.word	0x08006784
 8006554:	08006784 	.word	0x08006784
 8006558:	08006784 	.word	0x08006784
 800655c:	08006788 	.word	0x08006788

08006560 <__retarget_lock_acquire_recursive>:
 8006560:	4770      	bx	lr

08006562 <__retarget_lock_release_recursive>:
 8006562:	4770      	bx	lr

08006564 <memcpy>:
 8006564:	440a      	add	r2, r1
 8006566:	4291      	cmp	r1, r2
 8006568:	f100 33ff 	add.w	r3, r0, #4294967295
 800656c:	d100      	bne.n	8006570 <memcpy+0xc>
 800656e:	4770      	bx	lr
 8006570:	b510      	push	{r4, lr}
 8006572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006576:	4291      	cmp	r1, r2
 8006578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800657c:	d1f9      	bne.n	8006572 <memcpy+0xe>
 800657e:	bd10      	pop	{r4, pc}

08006580 <_free_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4605      	mov	r5, r0
 8006584:	2900      	cmp	r1, #0
 8006586:	d040      	beq.n	800660a <_free_r+0x8a>
 8006588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658c:	1f0c      	subs	r4, r1, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	bfb8      	it	lt
 8006592:	18e4      	addlt	r4, r4, r3
 8006594:	f000 f83c 	bl	8006610 <__malloc_lock>
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <_free_r+0x8c>)
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	b933      	cbnz	r3, 80065ac <_free_r+0x2c>
 800659e:	6063      	str	r3, [r4, #4]
 80065a0:	6014      	str	r4, [r2, #0]
 80065a2:	4628      	mov	r0, r5
 80065a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a8:	f000 b838 	b.w	800661c <__malloc_unlock>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d908      	bls.n	80065c2 <_free_r+0x42>
 80065b0:	6820      	ldr	r0, [r4, #0]
 80065b2:	1821      	adds	r1, r4, r0
 80065b4:	428b      	cmp	r3, r1
 80065b6:	bf01      	itttt	eq
 80065b8:	6819      	ldreq	r1, [r3, #0]
 80065ba:	685b      	ldreq	r3, [r3, #4]
 80065bc:	1809      	addeq	r1, r1, r0
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	e7ed      	b.n	800659e <_free_r+0x1e>
 80065c2:	461a      	mov	r2, r3
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b10b      	cbz	r3, 80065cc <_free_r+0x4c>
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d9fa      	bls.n	80065c2 <_free_r+0x42>
 80065cc:	6811      	ldr	r1, [r2, #0]
 80065ce:	1850      	adds	r0, r2, r1
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d10b      	bne.n	80065ec <_free_r+0x6c>
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	4401      	add	r1, r0
 80065d8:	1850      	adds	r0, r2, r1
 80065da:	4283      	cmp	r3, r0
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	d1e0      	bne.n	80065a2 <_free_r+0x22>
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4408      	add	r0, r1
 80065e6:	6010      	str	r0, [r2, #0]
 80065e8:	6053      	str	r3, [r2, #4]
 80065ea:	e7da      	b.n	80065a2 <_free_r+0x22>
 80065ec:	d902      	bls.n	80065f4 <_free_r+0x74>
 80065ee:	230c      	movs	r3, #12
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	e7d6      	b.n	80065a2 <_free_r+0x22>
 80065f4:	6820      	ldr	r0, [r4, #0]
 80065f6:	1821      	adds	r1, r4, r0
 80065f8:	428b      	cmp	r3, r1
 80065fa:	bf01      	itttt	eq
 80065fc:	6819      	ldreq	r1, [r3, #0]
 80065fe:	685b      	ldreq	r3, [r3, #4]
 8006600:	1809      	addeq	r1, r1, r0
 8006602:	6021      	streq	r1, [r4, #0]
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	6054      	str	r4, [r2, #4]
 8006608:	e7cb      	b.n	80065a2 <_free_r+0x22>
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	20002344 	.word	0x20002344

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_lock+0x8>)
 8006612:	f7ff bfa5 	b.w	8006560 <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	20002340 	.word	0x20002340

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_unlock+0x8>)
 800661e:	f7ff bfa0 	b.w	8006562 <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	20002340 	.word	0x20002340

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
