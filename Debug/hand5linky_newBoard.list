
hand5linky_newBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007580  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e4  080077e4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080077e4  080077e4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077e4  080077e4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080077ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002334  20000060  0800784c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002394  0800784c  00022394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189f4  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d0  00000000  00000000  00038ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001108  00000000  00000000  0003e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a9c  00000000  00000000  0003f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197fd  00000000  00000000  00043e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083f0f  00000000  00000000  0005d691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f80  00000000  00000000  000e15a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e7520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007678 	.word	0x08007678

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007678 	.word	0x08007678

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_ADC1_Init+0x74>)
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <MX_ADC1_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_ADC1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_ADC1_Init+0x74>)
 800094a:	2201      	movs	r2, #1
 800094c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_ADC1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_ADC1_Init+0x74>)
 8000956:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800095a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_ADC1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ADC1_Init+0x74>)
 8000964:	2201      	movs	r2, #1
 8000966:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_ADC1_Init+0x74>)
 800096a:	f001 fc8f 	bl	800228c <HAL_ADC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 fd12 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097c:	2301      	movs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000980:	2303      	movs	r3, #3
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_ADC1_Init+0x74>)
 800098a:	f001 ff37 	bl	80027fc <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000994:	f000 fd02 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	40012400 	.word	0x40012400

080009a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_ADC_MspInit+0x6c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d121      	bne.n	8000a0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_ADC_MspInit+0x70>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Motor1_Current_Pin|Motor2_Current_Pin|Motor3_Current_Pin|Motor4_Current_Pin
 80009f8:	233f      	movs	r3, #63	; 0x3f
 80009fa:	613b      	str	r3, [r7, #16]
                          |Motor5_Current_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fc:	2303      	movs	r3, #3
 80009fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_ADC_MspInit+0x74>)
 8000a08:	f002 fa58 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40012400 	.word	0x40012400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800

08000a20 <ADC_Select_CH0>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0 (void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <ADC_Select_CH0+0x38>)
 8000a42:	f001 fedb 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8000a4c:	f000 fca6 	bl	800139c <Error_Handler>
	  }
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000007c 	.word	0x2000007c
 8000a5c:	00000000 	.word	0x00000000

08000a60 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 8000a64:	f7ff ffdc 	bl	8000a20 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <ADC_ReadCurrent_Pinky+0x90>)
 8000a6a:	f001 fce7 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a72:	481f      	ldr	r0, [pc, #124]	; (8000af0 <ADC_ReadCurrent_Pinky+0x90>)
 8000a74:	f001 fdbc 	bl	80025f0 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc1);
 8000a78:	481d      	ldr	r0, [pc, #116]	; (8000af0 <ADC_ReadCurrent_Pinky+0x90>)
 8000a7a:	f001 feb3 	bl	80027e4 <HAL_ADC_GetValue>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <ADC_ReadCurrent_Pinky+0x94>)
 8000a82:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc1);
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <ADC_ReadCurrent_Pinky+0x90>)
 8000a86:	f001 fd87 	bl	8002598 <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <ADC_ReadCurrent_Pinky+0x98>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fca0 	bl	80003d4 <__aeabi_ui2d>
 8000a94:	4604      	mov	r4, r0
 8000a96:	460d      	mov	r5, r1
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <ADC_ReadCurrent_Pinky+0x94>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc99 	bl	80003d4 <__aeabi_ui2d>
 8000aa2:	a30f      	add	r3, pc, #60	; (adr r3, 8000ae0 <ADC_ReadCurrent_Pinky+0x80>)
 8000aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa8:	f7ff fd0e 	bl	80004c8 <__aeabi_dmul>
 8000aac:	4602      	mov	r2, r0
 8000aae:	460b      	mov	r3, r1
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	4629      	mov	r1, r5
 8000ab4:	f7ff fb52 	bl	800015c <__adddf3>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4610      	mov	r0, r2
 8000abe:	4619      	mov	r1, r3
 8000ac0:	a309      	add	r3, pc, #36	; (adr r3, 8000ae8 <ADC_ReadCurrent_Pinky+0x88>)
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	f7ff fe29 	bl	800071c <__aeabi_ddiv>
 8000aca:	4602      	mov	r2, r0
 8000acc:	460b      	mov	r3, r1
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f7ff ff0b 	bl	80008ec <__aeabi_d2uiz>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <ADC_ReadCurrent_Pinky+0x98>)
 8000ada:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000adc:	bf00      	nop
 8000ade:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae0:	47ae147b 	.word	0x47ae147b
 8000ae4:	3f847ae1 	.word	0x3f847ae1
 8000ae8:	c28f5c29 	.word	0xc28f5c29
 8000aec:	3ff028f5 	.word	0x3ff028f5
 8000af0:	2000007c 	.word	0x2000007c
 8000af4:	2000028c 	.word	0x2000028c
 8000af8:	20000228 	.word	0x20000228

08000afc <ADC_Select_CH1>:
void ADC_Select_CH1 (void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <ADC_Select_CH1+0x38>)
 8000b1e:	f001 fe6d 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8000b28:	f000 fc38 	bl	800139c <Error_Handler>
	  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000007c 	.word	0x2000007c

08000b38 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	ADC_Select_CH1();
 8000b3c:	f7ff ffde 	bl	8000afc <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <ADC_ReadCurrent_Ring+0x90>)
 8000b42:	f001 fc7b 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000b46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b4a:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <ADC_ReadCurrent_Ring+0x90>)
 8000b4c:	f001 fd50 	bl	80025f0 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc1);
 8000b50:	481d      	ldr	r0, [pc, #116]	; (8000bc8 <ADC_ReadCurrent_Ring+0x90>)
 8000b52:	f001 fe47 	bl	80027e4 <HAL_ADC_GetValue>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <ADC_ReadCurrent_Ring+0x94>)
 8000b5a:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc1);
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <ADC_ReadCurrent_Ring+0x90>)
 8000b5e:	f001 fd1b 	bl	8002598 <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <ADC_ReadCurrent_Ring+0x98>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc34 	bl	80003d4 <__aeabi_ui2d>
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	460d      	mov	r5, r1
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <ADC_ReadCurrent_Ring+0x94>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc2d 	bl	80003d4 <__aeabi_ui2d>
 8000b7a:	a30f      	add	r3, pc, #60	; (adr r3, 8000bb8 <ADC_ReadCurrent_Ring+0x80>)
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	f7ff fca2 	bl	80004c8 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4620      	mov	r0, r4
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	f7ff fae6 	bl	800015c <__adddf3>
 8000b90:	4602      	mov	r2, r0
 8000b92:	460b      	mov	r3, r1
 8000b94:	4610      	mov	r0, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	a309      	add	r3, pc, #36	; (adr r3, 8000bc0 <ADC_ReadCurrent_Ring+0x88>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f7ff fdbd 	bl	800071c <__aeabi_ddiv>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f7ff fe9f 	bl	80008ec <__aeabi_d2uiz>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <ADC_ReadCurrent_Ring+0x98>)
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bb4:	bf00      	nop
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb8:	47ae147b 	.word	0x47ae147b
 8000bbc:	3f847ae1 	.word	0x3f847ae1
 8000bc0:	c28f5c29 	.word	0xc28f5c29
 8000bc4:	3ff028f5 	.word	0x3ff028f5
 8000bc8:	2000007c 	.word	0x2000007c
 8000bcc:	2000028c 	.word	0x2000028c
 8000bd0:	20000228 	.word	0x20000228

08000bd4 <ADC_Select_CH2>:
void ADC_Select_CH2 (void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000bec:	2303      	movs	r3, #3
 8000bee:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <ADC_Select_CH2+0x38>)
 8000bf6:	f001 fe01 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8000c00:	f000 fbcc 	bl	800139c <Error_Handler>
	  }
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000007c 	.word	0x2000007c

08000c10 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	ADC_Select_CH2();
 8000c14:	f7ff ffde 	bl	8000bd4 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 8000c18:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <ADC_ReadCurrent_Middle+0x90>)
 8000c1a:	f001 fc0f 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c22:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <ADC_ReadCurrent_Middle+0x90>)
 8000c24:	f001 fce4 	bl	80025f0 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc1);
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <ADC_ReadCurrent_Middle+0x90>)
 8000c2a:	f001 fddb 	bl	80027e4 <HAL_ADC_GetValue>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <ADC_ReadCurrent_Middle+0x94>)
 8000c32:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc1);
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <ADC_ReadCurrent_Middle+0x90>)
 8000c36:	f001 fcaf 	bl	8002598 <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <ADC_ReadCurrent_Middle+0x98>)
 8000c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbc8 	bl	80003d4 <__aeabi_ui2d>
 8000c44:	4604      	mov	r4, r0
 8000c46:	460d      	mov	r5, r1
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <ADC_ReadCurrent_Middle+0x94>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fbc1 	bl	80003d4 <__aeabi_ui2d>
 8000c52:	a30f      	add	r3, pc, #60	; (adr r3, 8000c90 <ADC_ReadCurrent_Middle+0x80>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	f7ff fc36 	bl	80004c8 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4620      	mov	r0, r4
 8000c62:	4629      	mov	r1, r5
 8000c64:	f7ff fa7a 	bl	800015c <__adddf3>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	a309      	add	r3, pc, #36	; (adr r3, 8000c98 <ADC_ReadCurrent_Middle+0x88>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fd51 	bl	800071c <__aeabi_ddiv>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff fe33 	bl	80008ec <__aeabi_d2uiz>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <ADC_ReadCurrent_Middle+0x98>)
 8000c8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c8c:	bf00      	nop
 8000c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c90:	47ae147b 	.word	0x47ae147b
 8000c94:	3f847ae1 	.word	0x3f847ae1
 8000c98:	c28f5c29 	.word	0xc28f5c29
 8000c9c:	3ff028f5 	.word	0x3ff028f5
 8000ca0:	2000007c 	.word	0x2000007c
 8000ca4:	2000028c 	.word	0x2000028c
 8000ca8:	20000228 	.word	0x20000228

08000cac <ADC_Select_CH3>:
void ADC_Select_CH3 (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <ADC_Select_CH3+0x38>)
 8000cce:	f001 fd95 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8000cd8:	f000 fb60 	bl	800139c <Error_Handler>
	  }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000007c 	.word	0x2000007c

08000ce8 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 8000cec:	f7ff ffde 	bl	8000cac <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8000cf0:	4821      	ldr	r0, [pc, #132]	; (8000d78 <ADC_ReadCurrent_Index+0x90>)
 8000cf2:	f001 fba3 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cfa:	481f      	ldr	r0, [pc, #124]	; (8000d78 <ADC_ReadCurrent_Index+0x90>)
 8000cfc:	f001 fc78 	bl	80025f0 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc1);
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <ADC_ReadCurrent_Index+0x90>)
 8000d02:	f001 fd6f 	bl	80027e4 <HAL_ADC_GetValue>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <ADC_ReadCurrent_Index+0x94>)
 8000d0a:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc1);
 8000d0c:	481a      	ldr	r0, [pc, #104]	; (8000d78 <ADC_ReadCurrent_Index+0x90>)
 8000d0e:	f001 fc43 	bl	8002598 <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <ADC_ReadCurrent_Index+0x98>)
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb5c 	bl	80003d4 <__aeabi_ui2d>
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <ADC_ReadCurrent_Index+0x94>)
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fb55 	bl	80003d4 <__aeabi_ui2d>
 8000d2a:	a30f      	add	r3, pc, #60	; (adr r3, 8000d68 <ADC_ReadCurrent_Index+0x80>)
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f7ff fbca 	bl	80004c8 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa0e 	bl	800015c <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	a309      	add	r3, pc, #36	; (adr r3, 8000d70 <ADC_ReadCurrent_Index+0x88>)
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	f7ff fce5 	bl	800071c <__aeabi_ddiv>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fdc7 	bl	80008ec <__aeabi_d2uiz>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <ADC_ReadCurrent_Index+0x98>)
 8000d62:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d64:	bf00      	nop
 8000d66:	bdb0      	pop	{r4, r5, r7, pc}
 8000d68:	47ae147b 	.word	0x47ae147b
 8000d6c:	3f847ae1 	.word	0x3f847ae1
 8000d70:	c28f5c29 	.word	0xc28f5c29
 8000d74:	3ff028f5 	.word	0x3ff028f5
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	2000028c 	.word	0x2000028c
 8000d80:	20000228 	.word	0x20000228

08000d84 <ADC_Select_CH4>:
void ADC_Select_CH4 (void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <ADC_Select_CH4+0x38>)
 8000da6:	f001 fd29 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 8000db0:	f000 faf4 	bl	800139c <Error_Handler>
	  }
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000007c 	.word	0x2000007c

08000dc0 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	ADC_Select_CH4();
 8000dc4:	f7ff ffde 	bl	8000d84 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <ADC_ReadCurrent_Thumb+0x90>)
 8000dca:	f001 fb37 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <ADC_ReadCurrent_Thumb+0x90>)
 8000dd4:	f001 fc0c 	bl	80025f0 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc1);
 8000dd8:	481d      	ldr	r0, [pc, #116]	; (8000e50 <ADC_ReadCurrent_Thumb+0x90>)
 8000dda:	f001 fd03 	bl	80027e4 <HAL_ADC_GetValue>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <ADC_ReadCurrent_Thumb+0x94>)
 8000de2:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc1);
 8000de4:	481a      	ldr	r0, [pc, #104]	; (8000e50 <ADC_ReadCurrent_Thumb+0x90>)
 8000de6:	f001 fbd7 	bl	8002598 <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <ADC_ReadCurrent_Thumb+0x98>)
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff faf0 	bl	80003d4 <__aeabi_ui2d>
 8000df4:	4604      	mov	r4, r0
 8000df6:	460d      	mov	r5, r1
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <ADC_ReadCurrent_Thumb+0x94>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fae9 	bl	80003d4 <__aeabi_ui2d>
 8000e02:	a30f      	add	r3, pc, #60	; (adr r3, 8000e40 <ADC_ReadCurrent_Thumb+0x80>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fb5e 	bl	80004c8 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4620      	mov	r0, r4
 8000e12:	4629      	mov	r1, r5
 8000e14:	f7ff f9a2 	bl	800015c <__adddf3>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	a309      	add	r3, pc, #36	; (adr r3, 8000e48 <ADC_ReadCurrent_Thumb+0x88>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fc79 	bl	800071c <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fd5b 	bl	80008ec <__aeabi_d2uiz>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <ADC_ReadCurrent_Thumb+0x98>)
 8000e3a:	6113      	str	r3, [r2, #16]
}
 8000e3c:	bf00      	nop
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	47ae147b 	.word	0x47ae147b
 8000e44:	3f847ae1 	.word	0x3f847ae1
 8000e48:	c28f5c29 	.word	0xc28f5c29
 8000e4c:	3ff028f5 	.word	0x3ff028f5
 8000e50:	2000007c 	.word	0x2000007c
 8000e54:	2000028c 	.word	0x2000028c
 8000e58:	20000228 	.word	0x20000228

08000e5c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <MX_CAN_Init+0x64>)
 8000e64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_CAN_Init+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_CAN_Init+0x60>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_CAN_Init+0x60>)
 8000eaa:	f001 fe2b 	bl	8002b04 <HAL_CAN_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 fa72 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000ac 	.word	0x200000ac
 8000ec0:	40006400 	.word	0x40006400

08000ec4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_CAN_MspInit+0xb0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d143      	bne.n	8000f6c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eee:	61d3      	str	r3, [r2, #28]
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_CAN_MspInit+0xb4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <HAL_CAN_MspInit+0xb8>)
 8000f2a:	f001 ffc7 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <HAL_CAN_MspInit+0xb8>)
 8000f44:	f001 ffba 	bl	8002ebc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_CAN_MspInit+0xbc>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_CAN_MspInit+0xbc>)
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40006400 	.word	0x40006400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40010000 	.word	0x40010000

08000f84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_Tas */
  ThumbFinger_TasHandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_Tas_attributes);
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <MX_FREERTOS_Init+0x58>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_FREERTOS_Init+0x5c>)
 8000f8e:	f003 fdf1 	bl	8004b74 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_FREERTOS_Init+0x60>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_Tas */
  IndexFinger_TasHandle = osThreadNew(IndexFinger, NULL, &IndexFinger_Tas_attributes);
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MX_FREERTOS_Init+0x64>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_FREERTOS_Init+0x68>)
 8000f9e:	f003 fde9 	bl	8004b74 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_FREERTOS_Init+0x6c>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_Ta */
  MiddleFinger_TaHandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_Ta_attributes);
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_FREERTOS_Init+0x70>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_FREERTOS_Init+0x74>)
 8000fae:	f003 fde1 	bl	8004b74 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <MX_FREERTOS_Init+0x78>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of Ringfinger_Task */
  Ringfinger_TaskHandle = osThreadNew(Ringfinger, NULL, &Ringfinger_Task_attributes);
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_FREERTOS_Init+0x7c>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_FREERTOS_Init+0x80>)
 8000fbe:	f003 fdd9 	bl	8004b74 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <MX_FREERTOS_Init+0x84>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_tas */
  PinkyFinger_tasHandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_tas_attributes);
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_FREERTOS_Init+0x88>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_FREERTOS_Init+0x8c>)
 8000fce:	f003 fdd1 	bl	8004b74 <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <MX_FREERTOS_Init+0x90>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08007718 	.word	0x08007718
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	200000d4 	.word	0x200000d4
 8000fe8:	0800773c 	.word	0x0800773c
 8000fec:	08001051 	.word	0x08001051
 8000ff0:	200000d8 	.word	0x200000d8
 8000ff4:	08007760 	.word	0x08007760
 8000ff8:	08001091 	.word	0x08001091
 8000ffc:	200000dc 	.word	0x200000dc
 8001000:	08007784 	.word	0x08007784
 8001004:	080010d1 	.word	0x080010d1
 8001008:	200000e0 	.word	0x200000e0
 800100c:	080077a8 	.word	0x080077a8
 8001010:	08001111 	.word	0x08001111
 8001014:	200000e4 	.word	0x200000e4

08001018 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Thumb, Fingers_Status.Thumb);
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <ThumbFinger+0x34>)
 8001022:	466c      	mov	r4, sp
 8001024:	f103 020c 	add.w	r2, r3, #12
 8001028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001032:	2000      	movs	r0, #0
 8001034:	f000 ff26 	bl	8001e84 <SetMotor>
		Read_Encoder(&Fingers_Status.Thumb, Thumb);
 8001038:	2100      	movs	r1, #0
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <ThumbFinger+0x34>)
 800103c:	f000 fd58 	bl	8001af0 <Read_Encoder>
		ADC_ReadCurrent_Thumb();
 8001040:	f7ff febe 	bl	8000dc0 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f003 fe3f 	bl	8004cc8 <osDelay>
		SetMotor(Thumb, Fingers_Status.Thumb);
 800104a:	e7e9      	b.n	8001020 <ThumbFinger+0x8>
 800104c:	20000228 	.word	0x20000228

08001050 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b085      	sub	sp, #20
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{

		SetMotor(Index, Fingers_Status.Index);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <IndexFinger+0x38>)
 800105a:	466c      	mov	r4, sp
 800105c:	f103 0220 	add.w	r2, r3, #32
 8001060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001064:	e884 0003 	stmia.w	r4, {r0, r1}
 8001068:	3314      	adds	r3, #20
 800106a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106c:	2001      	movs	r0, #1
 800106e:	f000 ff09 	bl	8001e84 <SetMotor>
		Read_Encoder(&Fingers_Status.Index, Index);
 8001072:	2101      	movs	r1, #1
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <IndexFinger+0x3c>)
 8001076:	f000 fd3b 	bl	8001af0 <Read_Encoder>
		ADC_ReadCurrent_Index();
 800107a:	f7ff fe35 	bl	8000ce8 <ADC_ReadCurrent_Index>
		osDelay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f003 fe22 	bl	8004cc8 <osDelay>
		SetMotor(Index, Fingers_Status.Index);
 8001084:	e7e8      	b.n	8001058 <IndexFinger+0x8>
 8001086:	bf00      	nop
 8001088:	20000228 	.word	0x20000228
 800108c:	2000023c 	.word	0x2000023c

08001090 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af02      	add	r7, sp, #8
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Middle, Fingers_Status.Middle);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MiddleFinger+0x38>)
 800109a:	466c      	mov	r4, sp
 800109c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80010a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80010a8:	3328      	adds	r3, #40	; 0x28
 80010aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 fee9 	bl	8001e84 <SetMotor>
		Read_Encoder(&Fingers_Status.Middle, Middle);
 80010b2:	2102      	movs	r1, #2
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MiddleFinger+0x3c>)
 80010b6:	f000 fd1b 	bl	8001af0 <Read_Encoder>
		ADC_ReadCurrent_Middle();
 80010ba:	f7ff fda9 	bl	8000c10 <ADC_ReadCurrent_Middle>
		osDelay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f003 fe02 	bl	8004cc8 <osDelay>
		SetMotor(Middle, Fingers_Status.Middle);
 80010c4:	e7e8      	b.n	8001098 <MiddleFinger+0x8>
 80010c6:	bf00      	nop
 80010c8:	20000228 	.word	0x20000228
 80010cc:	20000250 	.word	0x20000250

080010d0 <Ringfinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ringfinger */
void Ringfinger(void *argument)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ringfinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Ring, Fingers_Status.Ring);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <Ringfinger+0x38>)
 80010da:	466c      	mov	r4, sp
 80010dc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80010e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80010e8:	333c      	adds	r3, #60	; 0x3c
 80010ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fec9 	bl	8001e84 <SetMotor>
		Read_Encoder(&Fingers_Status.Ring, Ring);
 80010f2:	2103      	movs	r1, #3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <Ringfinger+0x3c>)
 80010f6:	f000 fcfb 	bl	8001af0 <Read_Encoder>
		ADC_ReadCurrent_Ring();
 80010fa:	f7ff fd1d 	bl	8000b38 <ADC_ReadCurrent_Ring>
		osDelay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f003 fde2 	bl	8004cc8 <osDelay>
		SetMotor(Ring, Fingers_Status.Ring);
 8001104:	e7e8      	b.n	80010d8 <Ringfinger+0x8>
 8001106:	bf00      	nop
 8001108:	20000228 	.word	0x20000228
 800110c:	20000264 	.word	0x20000264

08001110 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		SetMotor(Pinky, Fingers_Status.Pinky);
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <PinkyFinger+0x38>)
 800111a:	466c      	mov	r4, sp
 800111c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	e884 0003 	stmia.w	r4, {r0, r1}
 8001128:	3350      	adds	r3, #80	; 0x50
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	2004      	movs	r0, #4
 800112e:	f000 fea9 	bl	8001e84 <SetMotor>
		Read_Encoder(&Fingers_Status.Ring, Ring);
 8001132:	2103      	movs	r1, #3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <PinkyFinger+0x3c>)
 8001136:	f000 fcdb 	bl	8001af0 <Read_Encoder>
		ADC_ReadCurrent_Pinky();
 800113a:	f7ff fc91 	bl	8000a60 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f003 fdc2 	bl	8004cc8 <osDelay>
		SetMotor(Pinky, Fingers_Status.Pinky);
 8001144:	e7e8      	b.n	8001118 <PinkyFinger+0x8>
 8001146:	bf00      	nop
 8001148:	20000228 	.word	0x20000228
 800114c:	20000264 	.word	0x20000264

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <MX_GPIO_Init+0x12c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a44      	ldr	r2, [pc, #272]	; (800127c <MX_GPIO_Init+0x12c>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b42      	ldr	r3, [pc, #264]	; (800127c <MX_GPIO_Init+0x12c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_GPIO_Init+0x12c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <MX_GPIO_Init+0x12c>)
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <MX_GPIO_Init+0x12c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_GPIO_Init+0x12c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a38      	ldr	r2, [pc, #224]	; (800127c <MX_GPIO_Init+0x12c>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_GPIO_Init+0x12c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <MX_GPIO_Init+0x12c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <MX_GPIO_Init+0x12c>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_GPIO_Init+0x12c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <MX_GPIO_Init+0x130>)
 80011cc:	f002 f811 	bl	80031f2 <HAL_GPIO_WritePin>
                          |Motor1_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 80011d0:	2200      	movs	r2, #0
 80011d2:	f24f 0108 	movw	r1, #61448	; 0xf008
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <MX_GPIO_Init+0x134>)
 80011d8:	f002 f80b 	bl	80031f2 <HAL_GPIO_WritePin>
                          |Motor5_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2104      	movs	r1, #4
 80011e0:	4829      	ldr	r0, [pc, #164]	; (8001288 <MX_GPIO_Init+0x138>)
 80011e2:	f002 f806 	bl	80031f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 80011e6:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 80011ea:	613b      	str	r3, [r7, #16]
                          |Motor1_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4820      	ldr	r0, [pc, #128]	; (8001280 <MX_GPIO_Init+0x130>)
 8001200:	f001 fe5c 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder1_Pin|Motor3_Encoder2_Pin|Motor1_Encoder1_Pin|Motor1_Encoder2_Pin
 8001204:	f641 4333 	movw	r3, #7219	; 0x1c33
 8001208:	613b      	str	r3, [r7, #16]
                          |Motor5_Encoder2_Pin|Motor4_Encoder1_Pin|Motor4_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <MX_GPIO_Init+0x130>)
 800121a:	f001 fe4f 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor2_Encoder1_Pin|Motor2_Encoder2_Pin|Motor5_Encoder1_Pin;
 800121e:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_GPIO_Init+0x13c>)
 8001234:	f001 fe42 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 8001238:	f24f 0308 	movw	r3, #61448	; 0xf008
 800123c:	613b      	str	r3, [r7, #16]
                          |Motor5_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0x134>)
 8001252:	f001 fe33 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_INB_Pin;
 8001256:	2304      	movs	r3, #4
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_INB_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_GPIO_Init+0x138>)
 800126e:	f001 fe25 	bl	8002ebc <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40011000 	.word	0x40011000
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40011400 	.word	0x40011400
 800128c:	40010800 	.word	0x40010800

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f000 ffc8 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f817 	bl	80012ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f7ff ff58 	bl	8001150 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a0:	f7ff fb44 	bl	800092c <MX_ADC1_Init>
  MX_CAN_Init();
 80012a4:	f7ff fdda 	bl	8000e5c <MX_CAN_Init>
  MX_TIM1_Init();
 80012a8:	f000 f988 	bl	80015bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ac:	f000 fa2c 	bl	8001708 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012b0:	f000 fb18 	bl	80018e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012b4:	f000 fb40 	bl	8001938 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_motor_controller();
 80012b8:	f000 ff38 	bl	800212c <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80012bc:	f003 fbf4 	bl	8004aa8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80012c0:	f7ff fe60 	bl	8000f84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012c4:	f003 fc22 	bl	8004b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0x38>

080012ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b094      	sub	sp, #80	; 0x50
 80012ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d4:	2228      	movs	r2, #40	; 0x28
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 f8e7 	bl	80074ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fe:	2301      	movs	r3, #1
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001302:	2310      	movs	r3, #16
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800130e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001318:	4618      	mov	r0, r3
 800131a:	f001 ff83 	bl	8003224 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001324:	f000 f83a 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001338:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f9ef 	bl	8003728 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001350:	f000 f824 	bl	800139c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001354:	2302      	movs	r3, #2
 8001356:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fba9 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800136c:	f000 f816 	bl	800139c <Error_Handler>
  }
}
 8001370:	bf00      	nop
 8001372:	3750      	adds	r7, #80	; 0x50
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138a:	f000 ff63 	bl	8002254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40000800 	.word	0x40000800

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_MspInit+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_MspInit+0x68>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_MspInit+0x68>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x68>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_MspInit+0x68>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x68>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
 80013e6:	f001 fd3e 	bl	8002e66 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x6c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_MspInit+0x6c>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_InitTick+0xe8>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a33      	ldr	r2, [pc, #204]	; (8001500 <HAL_InitTick+0xe8>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_InitTick+0xe8>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fae3 	bl	8003a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001460:	f002 fab4 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8001464:	6378      	str	r0, [r7, #52]	; 0x34
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001468:	f002 fab0 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	4a23      	ldr	r2, [pc, #140]	; (8001504 <HAL_InitTick+0xec>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3b01      	subs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_InitTick+0xf0>)
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_InitTick+0xf4>)
 8001484:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_InitTick+0xf0>)
 8001488:	f240 32e7 	movw	r2, #999	; 0x3e7
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_InitTick+0xf0>)
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_InitTick+0xf0>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_InitTick+0xf0>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_InitTick+0xf0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80014a6:	4818      	ldr	r0, [pc, #96]	; (8001508 <HAL_InitTick+0xf0>)
 80014a8:	f002 fc7c 	bl	8003da4 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d11b      	bne.n	80014f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <HAL_InitTick+0xf0>)
 80014bc:	f002 fca6 	bl	8003e0c <HAL_TIM_Base_Start_IT>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d111      	bne.n	80014f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014ce:	201e      	movs	r0, #30
 80014d0:	f001 fce5 	bl	8002e9e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d808      	bhi.n	80014ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	201e      	movs	r0, #30
 80014e0:	f001 fcc1 	bl	8002e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_InitTick+0xf8>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e002      	b.n	80014f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3738      	adds	r7, #56	; 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	431bde83 	.word	0x431bde83
 8001508:	200000e8 	.word	0x200000e8
 800150c:	40000800 	.word	0x40000800
 8001510:	20000004 	.word	0x20000004

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM4_IRQHandler+0x10>)
 8001546:	f002 fce1 	bl	8003f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000e8 	.word	0x200000e8

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <SystemInit+0x5c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <SystemInit+0x5c>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <SystemInit+0x5c>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4911      	ldr	r1, [pc, #68]	; (80015b0 <SystemInit+0x5c>)
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <SystemInit+0x60>)
 800156c:	4013      	ands	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <SystemInit+0x5c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <SystemInit+0x5c>)
 8001576:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <SystemInit+0x5c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SystemInit+0x5c>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <SystemInit+0x5c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <SystemInit+0x5c>)
 8001592:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001596:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SystemInit+0x5c>)
 800159a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800159e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SystemInit+0x64>)
 80015a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	f8ff0000 	.word	0xf8ff0000
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b092      	sub	sp, #72	; 0x48
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2220      	movs	r2, #32
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 ff60 	bl	80074ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <MX_TIM1_Init+0x144>)
 80015ee:	4a45      	ldr	r2, [pc, #276]	; (8001704 <MX_TIM1_Init+0x148>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80015f2:	4b43      	ldr	r3, [pc, #268]	; (8001700 <MX_TIM1_Init+0x144>)
 80015f4:	2213      	movs	r2, #19
 80015f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MX_TIM1_Init+0x144>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <MX_TIM1_Init+0x144>)
 8001600:	2263      	movs	r2, #99	; 0x63
 8001602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <MX_TIM1_Init+0x144>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <MX_TIM1_Init+0x144>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <MX_TIM1_Init+0x144>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001616:	483a      	ldr	r0, [pc, #232]	; (8001700 <MX_TIM1_Init+0x144>)
 8001618:	f002 fc1b 	bl	8003e52 <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001622:	f7ff febb 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001632:	4619      	mov	r1, r3
 8001634:	4832      	ldr	r0, [pc, #200]	; (8001700 <MX_TIM1_Init+0x144>)
 8001636:	f003 f869 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001640:	f7ff feac 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001644:	2360      	movs	r3, #96	; 0x60
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <MX_TIM1_Init+0x144>)
 800166a:	f002 fd57 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001674:	f7ff fe92 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	2204      	movs	r2, #4
 800167e:	4619      	mov	r1, r3
 8001680:	481f      	ldr	r0, [pc, #124]	; (8001700 <MX_TIM1_Init+0x144>)
 8001682:	f002 fd4b 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800168c:	f7ff fe86 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	2208      	movs	r2, #8
 8001696:	4619      	mov	r1, r3
 8001698:	4819      	ldr	r0, [pc, #100]	; (8001700 <MX_TIM1_Init+0x144>)
 800169a:	f002 fd3f 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80016a4:	f7ff fe7a 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	220c      	movs	r2, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM1_Init+0x144>)
 80016b2:	f002 fd33 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80016bc:	f7ff fe6e 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM1_Init+0x144>)
 80016e4:	f003 f856 	bl	8004794 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80016ee:	f7ff fe55 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM1_Init+0x144>)
 80016f4:	f000 f890 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80016f8:	bf00      	nop
 80016fa:	3748      	adds	r7, #72	; 0x48
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000128 	.word	0x20000128
 8001704:	40012c00 	.word	0x40012c00

08001708 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_TIM2_Init+0xac>)
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001734:	2213      	movs	r2, #19
 8001736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_TIM2_Init+0xac>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001740:	2263      	movs	r2, #99	; 0x63
 8001742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_TIM2_Init+0xac>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001750:	4818      	ldr	r0, [pc, #96]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001752:	f002 fb7e 	bl	8003e52 <HAL_TIM_PWM_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800175c:	f7ff fe1e 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	4619      	mov	r1, r3
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001770:	f002 ffcc 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800177a:	f7ff fe0f 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177e:	2360      	movs	r3, #96	; 0x60
 8001780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM2_Init+0xac>)
 8001796:	f002 fcc1 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80017a0:	f7ff fdfc 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM2_Init+0xac>)
 80017a6:	f000 f837 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000168 	.word	0x20000168

080017b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <HAL_TIM_PWM_MspInit+0x58>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10c      	bne.n	80017e4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017e2:	e010      	b.n	8001806 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d10b      	bne.n	8001806 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_TIM_PWM_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_TIM_MspPostInit+0xbc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d119      	bne.n	800186c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin|Motor2_PWM_Pin|Motor3_PWM_Pin|Motor4_PWM_Pin;
 8001850:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2302      	movs	r3, #2
 800185c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	481d      	ldr	r0, [pc, #116]	; (80018dc <HAL_TIM_MspPostInit+0xc4>)
 8001866:	f001 fb29 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800186a:	e02f      	b.n	80018cc <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d12a      	bne.n	80018cc <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_MspPostInit+0xc0>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor5_PWM_Pin;
 800188e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor5_PWM_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0xc4>)
 80018a4:	f001 fb0a 	bl	8002ebc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_TIM_MspPostInit+0xc8>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_TIM_MspPostInit+0xc8>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	6053      	str	r3, [r2, #4]
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART1_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800191c:	f002 ff9d 	bl	800485a <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001926:	f7ff fd39 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001a8 	.word	0x200001a8
 8001934:	40013800 	.word	0x40013800

08001938 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_USART3_UART_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001970:	f002 ff73 	bl	800485a <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800197a:	f7ff fd0f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200001e8 	.word	0x200001e8
 8001988:	40004800 	.word	0x40004800

0800198c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a3e      	ldr	r2, [pc, #248]	; (8001aa0 <HAL_UART_MspInit+0x114>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d13e      	bne.n	8001a2a <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ac:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a3c      	ldr	r2, [pc, #240]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a36      	ldr	r2, [pc, #216]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	482e      	ldr	r0, [pc, #184]	; (8001aa8 <HAL_UART_MspInit+0x11c>)
 80019f0:	f001 fa64 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4828      	ldr	r0, [pc, #160]	; (8001aa8 <HAL_UART_MspInit+0x11c>)
 8001a08:	f001 fa58 	bl	8002ebc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_UART_MspInit+0x120>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_UART_MspInit+0x120>)
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a28:	e036      	b.n	8001a98 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_UART_MspInit+0x124>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d131      	bne.n	8001a98 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	61d3      	str	r3, [r2, #28]
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_UART_MspInit+0x118>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <HAL_UART_MspInit+0x11c>)
 8001a7a:	f001 fa1f 	bl	8002ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x11c>)
 8001a94:	f001 fa12 	bl	8002ebc <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	; 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40004800 	.word	0x40004800

08001ab4 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Finger_Struct* FingerStruct,Fingers_Name_Enum FingerName)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
	_Bool Signal_A;
	_Bool Signal_B;
	switch (FingerName) {
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	f200 81ae 	bhi.w	8001e60 <Read_Encoder+0x370>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <Read_Encoder+0x1c>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b21 	.word	0x08001b21
 8001b10:	08001bc9 	.word	0x08001bc9
 8001b14:	08001c71 	.word	0x08001c71
 8001b18:	08001d15 	.word	0x08001d15
 8001b1c:	08001dbf 	.word	0x08001dbf
	case Thumb:
		Signal_A=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8001b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b24:	4897      	ldr	r0, [pc, #604]	; (8001d84 <Read_Encoder+0x294>)
 8001b26:	f001 fb4d 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 8001b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3a:	4893      	ldr	r0, [pc, #588]	; (8001d88 <Read_Encoder+0x298>)
 8001b3c:	f001 fb42 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <Read_Encoder+0x70>
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <Read_Encoder+0x70>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	725a      	strb	r2, [r3, #9]
 8001b5e:	e01c      	b.n	8001b9a <Read_Encoder+0xaa>
		else if (Signal_A && !Signal_B)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <Read_Encoder+0x8a>
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	f083 0301 	eor.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <Read_Encoder+0x8a>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	725a      	strb	r2, [r3, #9]
 8001b78:	e00f      	b.n	8001b9a <Read_Encoder+0xaa>
		else if (!Signal_A && Signal_B)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <Read_Encoder+0xa4>
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <Read_Encoder+0xa4>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	725a      	strb	r2, [r3, #9]
 8001b92:	e002      	b.n	8001b9a <Read_Encoder+0xaa>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7a5a      	ldrb	r2, [r3, #9]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7a9b      	ldrb	r3, [r3, #10]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	f000 815e 	beq.w	8001e64 <Read_Encoder+0x374>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	7a92      	ldrb	r2, [r2, #10]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	7a52      	ldrb	r2, [r2, #9]
 8001bb6:	1a8a      	subs	r2, r1, r2
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7a5a      	ldrb	r2, [r3, #9]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001bc6:	e14d      	b.n	8001e64 <Read_Encoder+0x374>
	case Index:
		Signal_A=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 8001bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bcc:	486e      	ldr	r0, [pc, #440]	; (8001d88 <Read_Encoder+0x298>)
 8001bce:	f001 faf9 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 8001bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be2:	4869      	ldr	r0, [pc, #420]	; (8001d88 <Read_Encoder+0x298>)
 8001be4:	f001 faee 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <Read_Encoder+0x118>
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <Read_Encoder+0x118>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	725a      	strb	r2, [r3, #9]
 8001c06:	e01c      	b.n	8001c42 <Read_Encoder+0x152>
		else if (Signal_A && !Signal_B)
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <Read_Encoder+0x132>
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <Read_Encoder+0x132>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	725a      	strb	r2, [r3, #9]
 8001c20:	e00f      	b.n	8001c42 <Read_Encoder+0x152>
		else if (!Signal_A && Signal_B)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <Read_Encoder+0x14c>
 8001c2e:	7bbb      	ldrb	r3, [r7, #14]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <Read_Encoder+0x14c>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	725a      	strb	r2, [r3, #9]
 8001c3a:	e002      	b.n	8001c42 <Read_Encoder+0x152>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7a5a      	ldrb	r2, [r3, #9]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7a9b      	ldrb	r3, [r3, #10]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	f000 810c 	beq.w	8001e68 <Read_Encoder+0x378>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	7a92      	ldrb	r2, [r2, #10]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	7a52      	ldrb	r2, [r2, #9]
 8001c5e:	1a8a      	subs	r2, r1, r2
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a5a      	ldrb	r2, [r3, #9]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001c6e:	e0fb      	b.n	8001e68 <Read_Encoder+0x378>
	case Middle:
		Signal_A=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 8001c70:	2101      	movs	r1, #1
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <Read_Encoder+0x298>)
 8001c74:	f001 faa6 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 8001c84:	2102      	movs	r1, #2
 8001c86:	4840      	ldr	r0, [pc, #256]	; (8001d88 <Read_Encoder+0x298>)
 8001c88:	f001 fa9c 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <Read_Encoder+0x1bc>
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <Read_Encoder+0x1bc>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	725a      	strb	r2, [r3, #9]
 8001caa:	e01c      	b.n	8001ce6 <Read_Encoder+0x1f6>
		else if (Signal_A && !Signal_B)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <Read_Encoder+0x1d6>
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	f083 0301 	eor.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <Read_Encoder+0x1d6>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	725a      	strb	r2, [r3, #9]
 8001cc4:	e00f      	b.n	8001ce6 <Read_Encoder+0x1f6>
		else if (!Signal_A && Signal_B)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <Read_Encoder+0x1f0>
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <Read_Encoder+0x1f0>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	725a      	strb	r2, [r3, #9]
 8001cde:	e002      	b.n	8001ce6 <Read_Encoder+0x1f6>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7a5a      	ldrb	r2, [r3, #9]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7a9b      	ldrb	r3, [r3, #10]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	f000 80bc 	beq.w	8001e6c <Read_Encoder+0x37c>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	7a92      	ldrb	r2, [r2, #10]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7a52      	ldrb	r2, [r2, #9]
 8001d02:	1a8a      	subs	r2, r1, r2
 8001d04:	441a      	add	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7a5a      	ldrb	r2, [r3, #9]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001d12:	e0ab      	b.n	8001e6c <Read_Encoder+0x37c>
	case Ring:
		Signal_A=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 8001d14:	2140      	movs	r1, #64	; 0x40
 8001d16:	481b      	ldr	r0, [pc, #108]	; (8001d84 <Read_Encoder+0x294>)
 8001d18:	f001 fa54 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	4816      	ldr	r0, [pc, #88]	; (8001d84 <Read_Encoder+0x294>)
 8001d2c:	f001 fa4a 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bf14      	ite	ne
 8001d36:	2301      	movne	r3, #1
 8001d38:	2300      	moveq	r3, #0
 8001d3a:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <Read_Encoder+0x260>
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <Read_Encoder+0x260>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	725a      	strb	r2, [r3, #9]
 8001d4e:	e020      	b.n	8001d92 <Read_Encoder+0x2a2>
		else if (Signal_A && !Signal_B)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <Read_Encoder+0x27a>
 8001d56:	7bbb      	ldrb	r3, [r7, #14]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <Read_Encoder+0x27a>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	725a      	strb	r2, [r3, #9]
 8001d68:	e013      	b.n	8001d92 <Read_Encoder+0x2a2>
		else if (!Signal_A && Signal_B)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <Read_Encoder+0x29c>
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <Read_Encoder+0x29c>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2203      	movs	r2, #3
 8001d80:	725a      	strb	r2, [r3, #9]
 8001d82:	e006      	b.n	8001d92 <Read_Encoder+0x2a2>
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40011000 	.word	0x40011000
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7a5a      	ldrb	r2, [r3, #9]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7a9b      	ldrb	r3, [r3, #10]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d068      	beq.n	8001e70 <Read_Encoder+0x380>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	7a92      	ldrb	r2, [r2, #10]
 8001da6:	4611      	mov	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	7a52      	ldrb	r2, [r2, #9]
 8001dac:	1a8a      	subs	r2, r1, r2
 8001dae:	441a      	add	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7a5a      	ldrb	r2, [r3, #9]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001dbc:	e058      	b.n	8001e70 <Read_Encoder+0x380>
	case Pinky:
		Signal_A=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	482f      	ldr	r0, [pc, #188]	; (8001e80 <Read_Encoder+0x390>)
 8001dc2:	f001 f9ff 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
		Signal_B=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	482a      	ldr	r0, [pc, #168]	; (8001e80 <Read_Encoder+0x390>)
 8001dd6:	f001 f9f5 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	73bb      	strb	r3, [r7, #14]
		if(Signal_A && Signal_B)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <Read_Encoder+0x30a>
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <Read_Encoder+0x30a>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	725a      	strb	r2, [r3, #9]
 8001df8:	e01c      	b.n	8001e34 <Read_Encoder+0x344>
		else if (Signal_A && !Signal_B)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <Read_Encoder+0x324>
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <Read_Encoder+0x324>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	725a      	strb	r2, [r3, #9]
 8001e12:	e00f      	b.n	8001e34 <Read_Encoder+0x344>
		else if (!Signal_A && Signal_B)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	f083 0301 	eor.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <Read_Encoder+0x33e>
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <Read_Encoder+0x33e>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	725a      	strb	r2, [r3, #9]
 8001e2c:	e002      	b.n	8001e34 <Read_Encoder+0x344>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7a5a      	ldrb	r2, [r3, #9]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7a9b      	ldrb	r3, [r3, #10]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d019      	beq.n	8001e74 <Read_Encoder+0x384>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7a92      	ldrb	r2, [r2, #10]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	7a52      	ldrb	r2, [r2, #9]
 8001e4e:	1a8a      	subs	r2, r1, r2
 8001e50:	441a      	add	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7a5a      	ldrb	r2, [r3, #9]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001e5e:	e009      	b.n	8001e74 <Read_Encoder+0x384>
	default:
		break;
 8001e60:	bf00      	nop
 8001e62:	e008      	b.n	8001e76 <Read_Encoder+0x386>
		break;
 8001e64:	bf00      	nop
 8001e66:	e006      	b.n	8001e76 <Read_Encoder+0x386>
		break;
 8001e68:	bf00      	nop
 8001e6a:	e004      	b.n	8001e76 <Read_Encoder+0x386>
		break;
 8001e6c:	bf00      	nop
 8001e6e:	e002      	b.n	8001e76 <Read_Encoder+0x386>
		break;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <Read_Encoder+0x386>
		break;
 8001e74:	bf00      	nop
	}
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40011000 	.word	0x40011000

08001e84 <SetMotor>:
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct  FingerStruct) {
 8001e84:	b084      	sub	sp, #16
 8001e86:	b590      	push	{r4, r7, lr}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	f107 001c 	add.w	r0, r7, #28
 8001e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e96:	4623      	mov	r3, r4
 8001e98:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	f200 8132 	bhi.w	8002106 <SetMotor+0x282>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <SetMotor+0x24>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001ebd 	.word	0x08001ebd
 8001eac:	08001f2b 	.word	0x08001f2b
 8001eb0:	08001fa5 	.word	0x08001fa5
 8001eb4:	0800201f 	.word	0x0800201f
 8001eb8:	0800208d 	.word	0x0800208d
	case Thumb :
		if ( FingerStruct.Direction== Open) {
 8001ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10f      	bne.n	8001ee4 <SetMotor+0x60>
			htim2.Instance->CCR1 = FingerStruct.speed;
 8001ec4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ec8:	4b93      	ldr	r3, [pc, #588]	; (8002118 <SetMotor+0x294>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4892      	ldr	r0, [pc, #584]	; (800211c <SetMotor+0x298>)
 8001ed4:	f001 f98d 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2104      	movs	r1, #4
 8001edc:	4890      	ldr	r0, [pc, #576]	; (8002120 <SetMotor+0x29c>)
 8001ede:	f001 f988 	bl	80031f2 <HAL_GPIO_WritePin>
		} else {
			htim2.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
		}
		break;
 8001ee2:	e111      	b.n	8002108 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8001ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d10f      	bne.n	8001f0c <SetMotor+0x88>
			htim2.Instance->CCR1 = FingerStruct.speed;
 8001eec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <SetMotor+0x294>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2108      	movs	r1, #8
 8001efa:	4888      	ldr	r0, [pc, #544]	; (800211c <SetMotor+0x298>)
 8001efc:	f001 f979 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2104      	movs	r1, #4
 8001f04:	4886      	ldr	r0, [pc, #536]	; (8002120 <SetMotor+0x29c>)
 8001f06:	f001 f974 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8001f0a:	e0fd      	b.n	8002108 <SetMotor+0x284>
			htim2.Instance->CCR1 = 0;
 8001f0c:	4b82      	ldr	r3, [pc, #520]	; (8002118 <SetMotor+0x294>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2108      	movs	r1, #8
 8001f18:	4880      	ldr	r0, [pc, #512]	; (800211c <SetMotor+0x298>)
 8001f1a:	f001 f96a 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2104      	movs	r1, #4
 8001f22:	487f      	ldr	r0, [pc, #508]	; (8002120 <SetMotor+0x29c>)
 8001f24:	f001 f965 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8001f28:	e0ee      	b.n	8002108 <SetMotor+0x284>
	case Index :
		if ( FingerStruct.Direction== Open) {
 8001f2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d111      	bne.n	8001f56 <SetMotor+0xd2>
			htim1.Instance->CCR4 = FingerStruct.speed;
 8001f32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <SetMotor+0x2a0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f42:	4876      	ldr	r0, [pc, #472]	; (800211c <SetMotor+0x298>)
 8001f44:	f001 f955 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f4e:	4873      	ldr	r0, [pc, #460]	; (800211c <SetMotor+0x298>)
 8001f50:	f001 f94f 	bl	80031f2 <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR4 = 0;
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
		}
		break;
 8001f54:	e0d8      	b.n	8002108 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8001f56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d111      	bne.n	8001f82 <SetMotor+0xfe>
			htim1.Instance->CCR4 = FingerStruct.speed;
 8001f5e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <SetMotor+0x2a0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f6e:	486b      	ldr	r0, [pc, #428]	; (800211c <SetMotor+0x298>)
 8001f70:	f001 f93f 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7a:	4868      	ldr	r0, [pc, #416]	; (800211c <SetMotor+0x298>)
 8001f7c:	f001 f939 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8001f80:	e0c2      	b.n	8002108 <SetMotor+0x284>
			htim1.Instance->CCR4 = 0;
 8001f82:	4b68      	ldr	r3, [pc, #416]	; (8002124 <SetMotor+0x2a0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f90:	4862      	ldr	r0, [pc, #392]	; (800211c <SetMotor+0x298>)
 8001f92:	f001 f92e 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	485f      	ldr	r0, [pc, #380]	; (800211c <SetMotor+0x298>)
 8001f9e:	f001 f928 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8001fa2:	e0b1      	b.n	8002108 <SetMotor+0x284>
	case Middle :
		if ( FingerStruct.Direction== Open) {
 8001fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d111      	bne.n	8001fd0 <SetMotor+0x14c>
			htim1.Instance->CCR3 = FingerStruct.speed;
 8001fac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fb0:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <SetMotor+0x2a0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbc:	4857      	ldr	r0, [pc, #348]	; (800211c <SetMotor+0x298>)
 8001fbe:	f001 f918 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc8:	4854      	ldr	r0, [pc, #336]	; (800211c <SetMotor+0x298>)
 8001fca:	f001 f912 	bl	80031f2 <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR3 = 0;
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
		}
		break;
 8001fce:	e09b      	b.n	8002108 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8001fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d111      	bne.n	8001ffc <SetMotor+0x178>
			htim1.Instance->CCR3 = FingerStruct.speed;
 8001fd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fdc:	4b51      	ldr	r3, [pc, #324]	; (8002124 <SetMotor+0x2a0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe8:	484c      	ldr	r0, [pc, #304]	; (800211c <SetMotor+0x298>)
 8001fea:	f001 f902 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff4:	4849      	ldr	r0, [pc, #292]	; (800211c <SetMotor+0x298>)
 8001ff6:	f001 f8fc 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8001ffa:	e085      	b.n	8002108 <SetMotor+0x284>
			htim1.Instance->CCR3 = 0;
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <SetMotor+0x2a0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200a:	4844      	ldr	r0, [pc, #272]	; (800211c <SetMotor+0x298>)
 800200c:	f001 f8f1 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002016:	4841      	ldr	r0, [pc, #260]	; (800211c <SetMotor+0x298>)
 8002018:	f001 f8eb 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 800201c:	e074      	b.n	8002108 <SetMotor+0x284>
	case Ring :
		if ( FingerStruct.Direction== Open) {
 800201e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10f      	bne.n	8002046 <SetMotor+0x1c2>
			htim1.Instance->CCR2 = FingerStruct.speed;
 8002026:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <SetMotor+0x2a0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2140      	movs	r1, #64	; 0x40
 8002034:	483c      	ldr	r0, [pc, #240]	; (8002128 <SetMotor+0x2a4>)
 8002036:	f001 f8dc 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 800203a:	2201      	movs	r2, #1
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	483a      	ldr	r0, [pc, #232]	; (8002128 <SetMotor+0x2a4>)
 8002040:	f001 f8d7 	bl	80031f2 <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR2 = 0;
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
		}
		break;
 8002044:	e060      	b.n	8002108 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8002046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800204a:	2b02      	cmp	r3, #2
 800204c:	d10f      	bne.n	800206e <SetMotor+0x1ea>
			htim1.Instance->CCR2 = FingerStruct.speed;
 800204e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <SetMotor+0x2a0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8002058:	2201      	movs	r2, #1
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4832      	ldr	r0, [pc, #200]	; (8002128 <SetMotor+0x2a4>)
 800205e:	f001 f8c8 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	4830      	ldr	r0, [pc, #192]	; (8002128 <SetMotor+0x2a4>)
 8002068:	f001 f8c3 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 800206c:	e04c      	b.n	8002108 <SetMotor+0x284>
			htim1.Instance->CCR2 = 0;
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <SetMotor+0x2a0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8002076:	2201      	movs	r2, #1
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	482b      	ldr	r0, [pc, #172]	; (8002128 <SetMotor+0x2a4>)
 800207c:	f001 f8b9 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 8002080:	2201      	movs	r2, #1
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	4828      	ldr	r0, [pc, #160]	; (8002128 <SetMotor+0x2a4>)
 8002086:	f001 f8b4 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 800208a:	e03d      	b.n	8002108 <SetMotor+0x284>
	case Pinky :
		if ( FingerStruct.Direction== Open) {
 800208c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d111      	bne.n	80020b8 <SetMotor+0x234>
			htim1.Instance->CCR1 = FingerStruct.speed;
 8002094:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <SetMotor+0x2a0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a4:	4820      	ldr	r0, [pc, #128]	; (8002128 <SetMotor+0x2a4>)
 80020a6:	f001 f8a4 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b0:	481d      	ldr	r0, [pc, #116]	; (8002128 <SetMotor+0x2a4>)
 80020b2:	f001 f89e 	bl	80031f2 <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
		}
		break;
 80020b6:	e027      	b.n	8002108 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 80020b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d111      	bne.n	80020e4 <SetMotor+0x260>
			htim1.Instance->CCR1 = FingerStruct.speed;
 80020c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <SetMotor+0x2a0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d0:	4815      	ldr	r0, [pc, #84]	; (8002128 <SetMotor+0x2a4>)
 80020d2:	f001 f88e 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <SetMotor+0x2a4>)
 80020de:	f001 f888 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 80020e2:	e011      	b.n	8002108 <SetMotor+0x284>
			htim1.Instance->CCR1 = 0;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <SetMotor+0x2a0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <SetMotor+0x2a4>)
 80020f4:	f001 f87d 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <SetMotor+0x2a4>)
 8002100:	f001 f877 	bl	80031f2 <HAL_GPIO_WritePin>
		break;
 8002104:	e000      	b.n	8002108 <SetMotor+0x284>

	default:

		break;
 8002106:	bf00      	nop
	}
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002112:	b004      	add	sp, #16
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000168 	.word	0x20000168
 800211c:	40010c00 	.word	0x40010c00
 8002120:	40011400 	.word	0x40011400
 8002124:	20000128 	.word	0x20000128
 8002128:	40011000 	.word	0x40011000

0800212c <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	//start read data from ADC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002130:	2100      	movs	r1, #0
 8002132:	4823      	ldr	r0, [pc, #140]	; (80021c0 <init_motor_controller+0x94>)
 8002134:	f001 feb8 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002138:	2104      	movs	r1, #4
 800213a:	4821      	ldr	r0, [pc, #132]	; (80021c0 <init_motor_controller+0x94>)
 800213c:	f001 feb4 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002140:	2108      	movs	r1, #8
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <init_motor_controller+0x94>)
 8002144:	f001 feb0 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002148:	210c      	movs	r1, #12
 800214a:	481d      	ldr	r0, [pc, #116]	; (80021c0 <init_motor_controller+0x94>)
 800214c:	f001 feac 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002150:	2100      	movs	r1, #0
 8002152:	481c      	ldr	r0, [pc, #112]	; (80021c4 <init_motor_controller+0x98>)
 8002154:	f001 fea8 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_ADC_MspInit(&hadc1);
 8002158:	481b      	ldr	r0, [pc, #108]	; (80021c8 <init_motor_controller+0x9c>)
 800215a:	f7fe fc25 	bl	80009a8 <HAL_ADC_MspInit>
	// Configure settings
	controller.AntiWindup = ENABLED;
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <init_motor_controller+0xa0>)
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <init_motor_controller+0xa0>)
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <init_motor_controller+0xa0>)
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <init_motor_controller+0xa4>)
 8002172:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <init_motor_controller+0xa0>)
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <init_motor_controller+0xa8>)
 8002178:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <init_motor_controller+0xa0>)
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <init_motor_controller+0xac>)
 800217e:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <init_motor_controller+0xa0>)
 8002182:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002186:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <init_motor_controller+0xa0>)
 800218a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800218e:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 8002190:	480e      	ldr	r0, [pc, #56]	; (80021cc <init_motor_controller+0xa0>)
 8002192:	f7ff fc8f 	bl	8001ab4 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <init_motor_controller+0xa0>)
 8002198:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800219c:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <init_motor_controller+0xa0>)
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <init_motor_controller+0xa4>)
 80021a2:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <init_motor_controller+0xa0>)
 80021a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021aa:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <init_motor_controller+0xa0>)
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <init_motor_controller+0xac>)
 80021b0:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <init_motor_controller+0xa0>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000128 	.word	0x20000128
 80021c4:	20000168 	.word	0x20000168
 80021c8:	2000007c 	.word	0x2000007c
 80021cc:	200002a4 	.word	0x200002a4
 80021d0:	42480000 	.word	0x42480000
 80021d4:	c2480000 	.word	0xc2480000
 80021d8:	40400000 	.word	0x40400000

080021dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021de:	e003      	b.n	80021e8 <LoopCopyDataInit>

080021e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021e6:	3104      	adds	r1, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021f0:	d3f6      	bcc.n	80021e0 <CopyDataInit>
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021f4:	e002      	b.n	80021fc <LoopFillZerobss>

080021f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021f8:	f842 3b04 	str.w	r3, [r2], #4

080021fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002200:	d3f9      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002202:	f7ff f9a7 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002206:	f005 f9af 	bl	8007568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220a:	f7ff f841 	bl	8001290 <main>
  bx lr
 800220e:	4770      	bx	lr
  ldr r3, =_sidata
 8002210:	080077ec 	.word	0x080077ec
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002218:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 800221c:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8002220:	20002394 	.word	0x20002394

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x28>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x28>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 fe09 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	200f      	movs	r0, #15
 8002240:	f7ff f8ea 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff f8b0 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000008 	.word	0x20000008
 8002274:	200002dc 	.word	0x200002dc

08002278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	200002dc 	.word	0x200002dc

0800228c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0be      	b.n	800242c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fb6c 	bl	80009a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fbdd 	bl	8002a90 <ADC_ConversionStop_Disable>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8099 	bne.w	800241a <HAL_ADC_Init+0x18e>
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8095 	bne.w	800241a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f8:	f023 0302 	bic.w	r3, r3, #2
 80022fc:	f043 0202 	orr.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b1b      	ldrb	r3, [r3, #12]
 8002312:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002314:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d003      	beq.n	800232e <HAL_ADC_Init+0xa2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_ADC_Init+0xa8>
 800232e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002332:	e000      	b.n	8002336 <HAL_ADC_Init+0xaa>
 8002334:	2300      	movs	r3, #0
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7d1b      	ldrb	r3, [r3, #20]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d119      	bne.n	8002378 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7b1b      	ldrb	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	3b01      	subs	r3, #1
 8002352:	035a      	lsls	r2, r3, #13
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e00b      	b.n	8002378 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_ADC_Init+0x1a8>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_Init+0x126>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d104      	bne.n	80023bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_ADC_Init+0x1ac>)
 80023d8:	4013      	ands	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10b      	bne.n	80023f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f6:	e018      	b.n	800242a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f023 0312 	bic.w	r3, r3, #18
 8002400:	f043 0210 	orr.w	r2, r3, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002418:	e007      	b.n	800242a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	ffe1f7fd 	.word	0xffe1f7fd
 8002438:	ff1f0efe 	.word	0xff1f0efe

0800243c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Start+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e098      	b.n	8002588 <HAL_ADC_Start+0x14c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fac4 	bl	80029ec <ADC_Enable>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 8087 	bne.w	800257e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_ADC_Start+0x154>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d105      	bne.n	800249a <HAL_ADC_Start+0x5e>
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_ADC_Start+0x158>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d026      	beq.n	8002502 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c4:	e01d      	b.n	8002502 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <HAL_ADC_Start+0x158>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_Start+0xaa>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <HAL_ADC_Start+0x154>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10d      	bne.n	8002502 <HAL_ADC_Start+0xc6>
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_ADC_Start+0x158>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f023 0206 	bic.w	r2, r3, #6
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
 800251a:	e002      	b.n	8002522 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0202 	mvn.w	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800253e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002542:	d113      	bne.n	800256c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_ADC_Start+0x154>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d105      	bne.n	800255a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_ADC_Start+0x158>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e00c      	b.n	8002586 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e003      	b.n	8002586 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40012800 	.word	0x40012800
 8002594:	40012400 	.word	0x40012400

08002598 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Stop+0x1a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e01a      	b.n	80025e8 <HAL_ADC_Stop+0x50>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa68 	bl	8002a90 <ADC_ConversionStop_Disable>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002606:	f7ff fe37 	bl	8002278 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0c8      	b.n	80027c4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d12a      	bne.n	8002696 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800264a:	2b00      	cmp	r3, #0
 800264c:	d123      	bne.n	8002696 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800264e:	e01a      	b.n	8002686 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d016      	beq.n	8002686 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_ADC_PollForConversion+0x7e>
 800265e:	f7ff fe0b 	bl	8002278 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d20b      	bcs.n	8002686 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e09e      	b.n	80027c4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0dd      	beq.n	8002650 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002694:	e06c      	b.n	8002770 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002696:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <HAL_ADC_PollForConversion+0x1dc>)
 8002698:	681c      	ldr	r4, [r3, #0]
 800269a:	2002      	movs	r0, #2
 800269c:	f001 fac2 	bl	8003c24 <HAL_RCCEx_GetPeriphCLKFreq>
 80026a0:	4603      	mov	r3, r0
 80026a2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6919      	ldr	r1, [r3, #16]
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_ADC_PollForConversion+0x1e0>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_ADC_PollForConversion+0xf6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_ADC_PollForConversion+0x1e4>)
 80026bc:	400b      	ands	r3, r1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d111      	bne.n	80026e6 <HAL_ADC_PollForConversion+0xf6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_ADC_PollForConversion+0x1e8>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_ADC_PollForConversion+0xf2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_ADC_PollForConversion+0x1ec>)
 80026d8:	400b      	ands	r3, r1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_PollForConversion+0xf2>
 80026de:	2314      	movs	r3, #20
 80026e0:	e020      	b.n	8002724 <HAL_ADC_PollForConversion+0x134>
 80026e2:	2329      	movs	r3, #41	; 0x29
 80026e4:	e01e      	b.n	8002724 <HAL_ADC_PollForConversion+0x134>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_ADC_PollForConversion+0x1e8>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_ADC_PollForConversion+0x112>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_ADC_PollForConversion+0x1ec>)
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <HAL_ADC_PollForConversion+0x12e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_ADC_PollForConversion+0x1f0>)
 800270a:	400b      	ands	r3, r1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <HAL_ADC_PollForConversion+0x132>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68d9      	ldr	r1, [r3, #12]
 8002716:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_ADC_PollForConversion+0x1f0>)
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_PollForConversion+0x132>
 800271e:	2354      	movs	r3, #84	; 0x54
 8002720:	e000      	b.n	8002724 <HAL_ADC_PollForConversion+0x134>
 8002722:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800272a:	e01d      	b.n	8002768 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d016      	beq.n	8002762 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_ADC_PollForConversion+0x15a>
 800273a:	f7ff fd9d 	bl	8002278 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20b      	bcs.n	8002762 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e030      	b.n	80027c4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3301      	adds	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8dd      	bhi.n	800272c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0212 	mvn.w	r2, #18
 8002778:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002790:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002794:	d115      	bne.n	80027c2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800279a:	2b00      	cmp	r3, #0
 800279c:	d111      	bne.n	80027c2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	20000000 	.word	0x20000000
 80027d0:	24924924 	.word	0x24924924
 80027d4:	00924924 	.word	0x00924924
 80027d8:	12492492 	.word	0x12492492
 80027dc:	00492492 	.word	0x00492492
 80027e0:	00249249 	.word	0x00249249

080027e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x20>
 8002818:	2302      	movs	r3, #2
 800281a:	e0dc      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x1da>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d81c      	bhi.n	8002866 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b05      	subs	r3, #5
 800283e:	221f      	movs	r2, #31
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	4019      	ands	r1, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b05      	subs	r3, #5
 8002858:	fa00 f203 	lsl.w	r2, r0, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34
 8002864:	e03c      	b.n	80028e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d81c      	bhi.n	80028a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b23      	subs	r3, #35	; 0x23
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	4019      	ands	r1, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3b23      	subs	r3, #35	; 0x23
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
 80028a6:	e01b      	b.n	80028e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b41      	subs	r3, #65	; 0x41
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4019      	ands	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b41      	subs	r3, #65	; 0x41
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	d91c      	bls.n	8002922 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	3b1e      	subs	r3, #30
 80028fa:	2207      	movs	r2, #7
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6898      	ldr	r0, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	3b1e      	subs	r3, #30
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	e019      	b.n	8002956 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6919      	ldr	r1, [r3, #16]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	2207      	movs	r2, #7
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6898      	ldr	r0, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b10      	cmp	r3, #16
 800295c:	d003      	beq.n	8002966 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002962:	2b11      	cmp	r3, #17
 8002964:	d132      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d125      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d126      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800298c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d11a      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9a      	lsrs	r2, r3, #18
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1b2>
 80029ba:	e007      	b.n	80029cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012400 	.word	0x40012400
 80029e4:	20000000 	.word	0x20000000
 80029e8:	431bde83 	.word	0x431bde83

080029ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d039      	beq.n	8002a7e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <ADC_Enable+0x9c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <ADC_Enable+0xa0>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	0c9b      	lsrs	r3, r3, #18
 8002a26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a28:	e002      	b.n	8002a30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a36:	f7ff fc1f 	bl	8002278 <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a3c:	e018      	b.n	8002a70 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a3e:	f7ff fc1b 	bl	8002278 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d911      	bls.n	8002a70 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f043 0210 	orr.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e007      	b.n	8002a80 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d1df      	bne.n	8002a3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	431bde83 	.word	0x431bde83

08002a90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d127      	bne.n	8002afa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aba:	f7ff fbdd 	bl	8002278 <HAL_GetTick>
 8002abe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ac0:	e014      	b.n	8002aec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ac2:	f7ff fbd9 	bl	8002278 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d90d      	bls.n	8002aec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	f043 0210 	orr.w	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e007      	b.n	8002afc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d0e3      	beq.n	8002ac2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0ed      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f9ce 	bl	8000ec4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0202 	bic.w	r2, r2, #2
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7ff fb9e 	bl	8002278 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b3e:	e012      	b.n	8002b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b40:	f7ff fb9a 	bl	8002278 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	d90b      	bls.n	8002b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0c5      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff fb78 	bl	8002278 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b8a:	e012      	b.n	8002bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b8c:	f7ff fb74 	bl	8002278 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d90b      	bls.n	8002bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09f      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0e5      	beq.n	8002b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7e5b      	ldrb	r3, [r3, #25]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e9b      	ldrb	r3, [r3, #26]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0220 	bic.w	r2, r2, #32
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7edb      	ldrb	r3, [r3, #27]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0210 	orr.w	r2, r2, #16
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7f1b      	ldrb	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7f5b      	ldrb	r3, [r3, #29]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0204 	orr.w	r2, r2, #4
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <__NVIC_EnableIRQ+0x34>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff4f 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff64 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ffb2 	bl	8002dec <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff81 	bl	8002d98 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff57 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b08b      	sub	sp, #44	; 0x2c
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ece:	e169      	b.n	80031a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f040 8158 	bne.w	800319e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a9a      	ldr	r2, [pc, #616]	; (800315c <HAL_GPIO_Init+0x2a0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d05e      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002ef8:	4a98      	ldr	r2, [pc, #608]	; (800315c <HAL_GPIO_Init+0x2a0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d875      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002efe:	4a98      	ldr	r2, [pc, #608]	; (8003160 <HAL_GPIO_Init+0x2a4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d058      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f04:	4a96      	ldr	r2, [pc, #600]	; (8003160 <HAL_GPIO_Init+0x2a4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d86f      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f0a:	4a96      	ldr	r2, [pc, #600]	; (8003164 <HAL_GPIO_Init+0x2a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d052      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f10:	4a94      	ldr	r2, [pc, #592]	; (8003164 <HAL_GPIO_Init+0x2a8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d869      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f16:	4a94      	ldr	r2, [pc, #592]	; (8003168 <HAL_GPIO_Init+0x2ac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04c      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f1c:	4a92      	ldr	r2, [pc, #584]	; (8003168 <HAL_GPIO_Init+0x2ac>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d863      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f22:	4a92      	ldr	r2, [pc, #584]	; (800316c <HAL_GPIO_Init+0x2b0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d046      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f28:	4a90      	ldr	r2, [pc, #576]	; (800316c <HAL_GPIO_Init+0x2b0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d85d      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f2e:	2b12      	cmp	r3, #18
 8002f30:	d82a      	bhi.n	8002f88 <HAL_GPIO_Init+0xcc>
 8002f32:	2b12      	cmp	r3, #18
 8002f34:	d859      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_GPIO_Init+0x80>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002fb7 	.word	0x08002fb7
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002fa3 	.word	0x08002fa3
 8002f48:	08002fe5 	.word	0x08002fe5
 8002f4c:	08002feb 	.word	0x08002feb
 8002f50:	08002feb 	.word	0x08002feb
 8002f54:	08002feb 	.word	0x08002feb
 8002f58:	08002feb 	.word	0x08002feb
 8002f5c:	08002feb 	.word	0x08002feb
 8002f60:	08002feb 	.word	0x08002feb
 8002f64:	08002feb 	.word	0x08002feb
 8002f68:	08002feb 	.word	0x08002feb
 8002f6c:	08002feb 	.word	0x08002feb
 8002f70:	08002feb 	.word	0x08002feb
 8002f74:	08002feb 	.word	0x08002feb
 8002f78:	08002feb 	.word	0x08002feb
 8002f7c:	08002feb 	.word	0x08002feb
 8002f80:	08002f99 	.word	0x08002f99
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	4a79      	ldr	r2, [pc, #484]	; (8003170 <HAL_GPIO_Init+0x2b4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8e:	e02c      	b.n	8002fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	623b      	str	r3, [r7, #32]
          break;
 8002f96:	e029      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	623b      	str	r3, [r7, #32]
          break;
 8002fa0:	e024      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e01f      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	623b      	str	r3, [r7, #32]
          break;
 8002fb4:	e01a      	b.n	8002fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e013      	b.n	8002fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	611a      	str	r2, [r3, #16]
          break;
 8002fd6:	e009      	b.n	8002fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	615a      	str	r2, [r3, #20]
          break;
 8002fe2:	e003      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
          break;
 8002fe8:	e000      	b.n	8002fec <HAL_GPIO_Init+0x130>
          break;
 8002fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d801      	bhi.n	8002ff6 <HAL_GPIO_Init+0x13a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	e001      	b.n	8002ffa <HAL_GPIO_Init+0x13e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2bff      	cmp	r3, #255	; 0xff
 8003000:	d802      	bhi.n	8003008 <HAL_GPIO_Init+0x14c>
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	e002      	b.n	800300e <HAL_GPIO_Init+0x152>
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	3b08      	subs	r3, #8
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	210f      	movs	r1, #15
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	6a39      	ldr	r1, [r7, #32]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	431a      	orrs	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80b1 	beq.w	800319e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800303c:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_GPIO_Init+0x2b8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_GPIO_Init+0x2b8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_GPIO_Init+0x2b8>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003054:	4a48      	ldr	r2, [pc, #288]	; (8003178 <HAL_GPIO_Init+0x2bc>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a40      	ldr	r2, [pc, #256]	; (800317c <HAL_GPIO_Init+0x2c0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_GPIO_Init+0x1ec>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_GPIO_Init+0x2c4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00d      	beq.n	80030a4 <HAL_GPIO_Init+0x1e8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3e      	ldr	r2, [pc, #248]	; (8003184 <HAL_GPIO_Init+0x2c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <HAL_GPIO_Init+0x1e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3d      	ldr	r2, [pc, #244]	; (8003188 <HAL_GPIO_Init+0x2cc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_GPIO_Init+0x1e0>
 8003098:	2303      	movs	r3, #3
 800309a:	e006      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 800309c:	2304      	movs	r3, #4
 800309e:	e004      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e002      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a8:	2300      	movs	r3, #0
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	f002 0203 	and.w	r2, r2, #3
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	4093      	lsls	r3, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ba:	492f      	ldr	r1, [pc, #188]	; (8003178 <HAL_GPIO_Init+0x2bc>)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	492c      	ldr	r1, [pc, #176]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4928      	ldr	r1, [pc, #160]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4922      	ldr	r1, [pc, #136]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_GPIO_Init+0x2d0>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	491e      	ldr	r1, [pc, #120]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4918      	ldr	r1, [pc, #96]	; (800318c <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	43db      	mvns	r3, r3
 800313a:	4914      	ldr	r1, [pc, #80]	; (800318c <HAL_GPIO_Init+0x2d0>)
 800313c:	4013      	ands	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d021      	beq.n	8003190 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_GPIO_Init+0x2d0>)
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]
 8003158:	e021      	b.n	800319e <HAL_GPIO_Init+0x2e2>
 800315a:	bf00      	nop
 800315c:	10320000 	.word	0x10320000
 8003160:	10310000 	.word	0x10310000
 8003164:	10220000 	.word	0x10220000
 8003168:	10210000 	.word	0x10210000
 800316c:	10120000 	.word	0x10120000
 8003170:	10110000 	.word	0x10110000
 8003174:	40021000 	.word	0x40021000
 8003178:	40010000 	.word	0x40010000
 800317c:	40010800 	.word	0x40010800
 8003180:	40010c00 	.word	0x40010c00
 8003184:	40011000 	.word	0x40011000
 8003188:	40011400 	.word	0x40011400
 800318c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_GPIO_Init+0x304>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	43db      	mvns	r3, r3
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <HAL_GPIO_Init+0x304>)
 800319a:	4013      	ands	r3, r2
 800319c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3301      	adds	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f47f ae8e 	bne.w	8002ed0 <HAL_GPIO_Init+0x14>
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	372c      	adds	r7, #44	; 0x2c
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e001      	b.n	80031e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	807b      	strh	r3, [r7, #2]
 80031fe:	4613      	mov	r3, r2
 8003200:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003202:	787b      	ldrb	r3, [r7, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003208:	887a      	ldrh	r2, [r7, #2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320e:	e003      	b.n	8003218 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	041a      	lsls	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	611a      	str	r2, [r3, #16]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
	...

08003224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e272      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8087 	beq.w	8003352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003244:	4b92      	ldr	r3, [pc, #584]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	d00c      	beq.n	800326a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003250:	4b8f      	ldr	r3, [pc, #572]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d112      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
 800325c:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b89      	ldr	r3, [pc, #548]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06c      	beq.n	8003350 <HAL_RCC_OscConfig+0x12c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d168      	bne.n	8003350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e24c      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x76>
 800328c:	4b80      	ldr	r3, [pc, #512]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7f      	ldr	r2, [pc, #508]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e02e      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b7b      	ldr	r3, [pc, #492]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7a      	ldr	r2, [pc, #488]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a77      	ldr	r2, [pc, #476]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0xbc>
 80032c6:	4b72      	ldr	r3, [pc, #456]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a71      	ldr	r2, [pc, #452]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6e      	ldr	r2, [pc, #440]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032e0:	4b6b      	ldr	r3, [pc, #428]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6a      	ldr	r2, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a67      	ldr	r2, [pc, #412]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe ffba 	bl	8002278 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe ffb6 	bl	8002278 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e200      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b5d      	ldr	r3, [pc, #372]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xe4>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe ffa6 	bl	8002278 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe ffa2 	bl	8002278 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1ec      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x10c>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335e:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800336a:	4b49      	ldr	r3, [pc, #292]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
 8003376:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1c0      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4939      	ldr	r1, [pc, #228]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe ff5b 	bl	8002278 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe ff57 	bl	8002278 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1a1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4927      	ldr	r1, [pc, #156]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe ff3a 	bl	8002278 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe ff36 	bl	8002278 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e180      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03a      	beq.n	80034a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_RCC_OscConfig+0x274>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003440:	f7fe ff1a 	bl	8002278 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003448:	f7fe ff16 	bl	8002278 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e160      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_RCC_OscConfig+0x26c>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f000 fb08 	bl	8003a7c <RCC_Delay>
 800346c:	e01c      	b.n	80034a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_RCC_OscConfig+0x274>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe ff00 	bl	8002278 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347a:	e00f      	b.n	800349c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7fe fefc 	bl	8002278 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d908      	bls.n	800349c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e146      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	42420000 	.word	0x42420000
 8003498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b92      	ldr	r3, [pc, #584]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e9      	bne.n	800347c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a6 	beq.w	8003602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b8b      	ldr	r3, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	61d3      	str	r3, [r2, #28]
 80034d2:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fe febd 	bl	8002278 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fe feb9 	bl	8002278 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e103      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b75      	ldr	r3, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x4c8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x312>
 8003528:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a6e      	ldr	r2, [pc, #440]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e02d      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x334>
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a69      	ldr	r2, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x356>
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a60      	ldr	r2, [pc, #384]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 800357a:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a5a      	ldr	r2, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6213      	str	r3, [r2, #32]
 8003586:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fe6d 	bl	8002278 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fe69 	bl	8002278 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0b1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x37e>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fe57 	bl	8002278 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fe53 	bl	8002278 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e09b      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b40      	ldr	r3, [pc, #256]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b3c      	ldr	r3, [pc, #240]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8087 	beq.w	800371a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d061      	beq.n	80036dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d146      	bne.n	80036ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fe27 	bl	8002278 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fe23 	bl	8002278 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e06d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4921      	ldr	r1, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a19      	ldr	r1, [r3, #32]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	430b      	orrs	r3, r1
 800367a:	491b      	ldr	r1, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fdf7 	bl	8002278 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fdf3 	bl	8002278 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e03d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x46a>
 80036ac:	e035      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe fde0 	bl	8002278 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fddc 	bl	8002278 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e026      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x498>
 80036da:	e01e      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e019      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x500>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d0      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800378e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d040      	beq.n	8003848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e073      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4936      	ldr	r1, [pc, #216]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fe fd2e 	bl	8002278 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fe fd2a 	bl	8002278 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e053      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d210      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4922      	ldr	r1, [pc, #136]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490a      	ldr	r1, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1cc>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1d0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fd9e 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	080077cc 	.word	0x080077cc
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b490      	push	{r4, r7}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003904:	1d3c      	adds	r4, r7, #4
 8003906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800390c:	f240 2301 	movw	r3, #513	; 0x201
 8003910:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x40>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x46>
 800393a:	e02b      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800393e:	623b      	str	r3, [r7, #32]
      break;
 8003940:	e02b      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	0c9b      	lsrs	r3, r3, #18
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	3328      	adds	r3, #40	; 0x28
 800394c:	443b      	add	r3, r7
 800394e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003952:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0c5b      	lsrs	r3, r3, #17
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	3328      	adds	r3, #40	; 0x28
 800396a:	443b      	add	r3, r7
 800396c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003970:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003976:	fb03 f202 	mul.w	r2, r3, r2
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e004      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	623b      	str	r3, [r7, #32]
      break;
 8003992:	e002      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003996:	623b      	str	r3, [r7, #32]
      break;
 8003998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399a:	6a3b      	ldr	r3, [r7, #32]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3728      	adds	r7, #40	; 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc90      	pop	{r4, r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	080076e0 	.word	0x080076e0
 80039ac:	40021000 	.word	0x40021000
 80039b0:	007a1200 	.word	0x007a1200
 80039b4:	003d0900 	.word	0x003d0900

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20000000 	.word	0x20000000

080039cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d0:	f7ff fff2 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	080077dc 	.word	0x080077dc

080039f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f8:	f7ff ffde 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0adb      	lsrs	r3, r3, #11
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	080077dc 	.word	0x080077dc

08003a1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	220f      	movs	r2, #15
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_GetClockConfig+0x58>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_RCC_GetClockConfig+0x58>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_GetClockConfig+0x58>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCC_GetClockConfig+0x58>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetClockConfig+0x5c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0207 	and.w	r2, r3, #7
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40022000 	.word	0x40022000

08003a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <RCC_Delay+0x34>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <RCC_Delay+0x38>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a5b      	lsrs	r3, r3, #9
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a98:	bf00      	nop
  }
  while (Delay --);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e5a      	subs	r2, r3, #1
 8003a9e:	60fa      	str	r2, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f9      	bne.n	8003a98 <RCC_Delay+0x1c>
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	10624dd3 	.word	0x10624dd3

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	61d3      	str	r3, [r2, #28]
 8003af0:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d118      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fbae 	bl	8002278 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	e008      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fe fbaa 	bl	8002278 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e06d      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d027      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d014      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fb79 	bl	8002278 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe fb75 	bl	8002278 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e036      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4917      	ldr	r1, [pc, #92]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	490b      	ldr	r1, [pc, #44]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	4904      	ldr	r1, [pc, #16]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42420440 	.word	0x42420440

08003c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b08d      	sub	sp, #52	; 0x34
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c2c:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003c2e:	f107 040c 	add.w	r4, r7, #12
 8003c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c38:	f240 2301 	movw	r3, #513	; 0x201
 8003c3c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	f200 808e 	bhi.w	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d049      	beq.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d079      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c6c:	e086      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003c6e:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d07f      	beq.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	3330      	adds	r3, #48	; 0x30
 8003c8a:	443b      	add	r3, r7
 8003c8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c90:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c5b      	lsrs	r3, r3, #17
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	3330      	adds	r3, #48	; 0x30
 8003ca8:	443b      	add	r3, r7
 8003caa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cba:	4a37      	ldr	r2, [pc, #220]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	e004      	b.n	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	4a33      	ldr	r2, [pc, #204]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce2:	d102      	bne.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ce8:	e04a      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cf8:	e042      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0a:	d108      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1c:	e01f      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	d109      	bne.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003d36:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d48:	d11c      	bne.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003d56:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d5c:	e012      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d5e:	e011      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d60:	f7ff fe48 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	0b9b      	lsrs	r3, r3, #14
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	3301      	adds	r3, #1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d84:	bf00      	nop
    }
  }
  return (frequency);
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3734      	adds	r7, #52	; 0x34
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd90      	pop	{r4, r7, pc}
 8003d90:	080076f0 	.word	0x080076f0
 8003d94:	40021000 	.word	0x40021000
 8003d98:	007a1200 	.word	0x007a1200
 8003d9c:	003d0900 	.word	0x003d0900
 8003da0:	aaaaaaab 	.word	0xaaaaaaab

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e01d      	b.n	8003df2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f815 	bl	8003dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fa84 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d007      	beq.n	8003e46 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e01d      	b.n	8003ea0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fd fc9d 	bl	80017b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fa2d 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fc02 	bl	80046c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_TIM_PWM_Start+0x60>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d107      	bne.n	8003eda <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d007      	beq.n	8003efc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00

08003f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0202 	mvn.w	r2, #2
 8003f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9b3 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9a6 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f9b5 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f989 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f97c 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f98b 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f95f 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f952 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f961 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b10      	cmp	r3, #16
 800401c:	d122      	bne.n	8004064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b10      	cmp	r3, #16
 800402a:	d11b      	bne.n	8004064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0210 	mvn.w	r2, #16
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2208      	movs	r2, #8
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f935 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f928 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f937 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10e      	bne.n	8004090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d107      	bne.n	8004090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0201 	mvn.w	r2, #1
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd f974 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fbc6 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8fb 	bl	80042de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b20      	cmp	r3, #32
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb91 	bl	8004836 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004132:	2302      	movs	r3, #2
 8004134:	e0b4      	b.n	80042a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	f200 809f 	bhi.w	800428c <HAL_TIM_PWM_ConfigChannel+0x170>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004189 	.word	0x08004189
 8004158:	0800428d 	.word	0x0800428d
 800415c:	0800428d 	.word	0x0800428d
 8004160:	0800428d 	.word	0x0800428d
 8004164:	080041c9 	.word	0x080041c9
 8004168:	0800428d 	.word	0x0800428d
 800416c:	0800428d 	.word	0x0800428d
 8004170:	0800428d 	.word	0x0800428d
 8004174:	0800420b 	.word	0x0800420b
 8004178:	0800428d 	.word	0x0800428d
 800417c:	0800428d 	.word	0x0800428d
 8004180:	0800428d 	.word	0x0800428d
 8004184:	0800424b 	.word	0x0800424b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f910 	bl	80043b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0208 	orr.w	r2, r2, #8
 80041a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0204 	bic.w	r2, r2, #4
 80041b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	619a      	str	r2, [r3, #24]
      break;
 80041c6:	e062      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f956 	bl	8004480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6999      	ldr	r1, [r3, #24]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]
      break;
 8004208:	e041      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f99f 	bl	8004554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0208 	orr.w	r2, r2, #8
 8004224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0204 	bic.w	r2, r2, #4
 8004234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69d9      	ldr	r1, [r3, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
      break;
 8004248:	e021      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f9e9 	bl	8004628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69d9      	ldr	r1, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	021a      	lsls	r2, r3, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	61da      	str	r2, [r3, #28]
      break;
 800428a:	e000      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800428c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a26      	ldr	r2, [pc, #152]	; (80043ac <TIM_Base_SetConfig+0xbc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <TIM_Base_SetConfig+0xc0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <TIM_Base_SetConfig+0xbc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <TIM_Base_SetConfig+0xc0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800

080043b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 0302 	bic.w	r3, r3, #2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <TIM_OC1_SetConfig+0xc8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10c      	bne.n	800442a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0308 	bic.w	r3, r3, #8
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <TIM_OC1_SetConfig+0xc8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d111      	bne.n	8004456 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00

08004480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0210 	bic.w	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0320 	bic.w	r3, r3, #32
 80044ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <TIM_OC2_SetConfig+0xd0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10d      	bne.n	80044fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a14      	ldr	r2, [pc, #80]	; (8004550 <TIM_OC2_SetConfig+0xd0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d113      	bne.n	800452c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00

08004554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <TIM_OC3_SetConfig+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10d      	bne.n	80045ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <TIM_OC3_SetConfig+0xd0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d113      	bne.n	80045fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00

08004628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	031b      	lsls	r3, r3, #12
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <TIM_OC4_SetConfig+0x98>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	40012c00 	.word	0x40012c00

080046c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2201      	movs	r2, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e032      	b.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e03d      	b.n	800482c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e03f      	b.n	80048ec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fd f883 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	; 0x24
 800488a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f828 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800492e:	f023 030c 	bic.w	r3, r3, #12
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	430b      	orrs	r3, r1
 800493a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <UART_SetConfig+0x1ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d14e      	bne.n	80049fa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7ff f84a 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 8004960:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	4a4a      	ldr	r2, [pc, #296]	; (8004aa4 <UART_SetConfig+0x1b0>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	0119      	lsls	r1, r3, #4
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <UART_SetConfig+0x1b0>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	; 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a3d      	ldr	r2, [pc, #244]	; (8004aa4 <UART_SetConfig+0x1b0>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b8:	4419      	add	r1, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d0:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <UART_SetConfig+0x1b0>)
 80049d2:	fba3 0302 	umull	r0, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2064      	movs	r0, #100	; 0x64
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	; 0x32
 80049e4:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <UART_SetConfig+0x1b0>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	440a      	add	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80049f8:	e04d      	b.n	8004a96 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80049fa:	f7fe ffe7 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 80049fe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009a      	lsls	r2, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <UART_SetConfig+0x1b0>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	0119      	lsls	r1, r3, #4
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009a      	lsls	r2, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <UART_SetConfig+0x1b0>)
 8004a38:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2064      	movs	r0, #100	; 0x64
 8004a40:	fb00 f303 	mul.w	r3, r0, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	3332      	adds	r3, #50	; 0x32
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <UART_SetConfig+0x1b0>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a56:	4419      	add	r1, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009a      	lsls	r2, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <UART_SetConfig+0x1b0>)
 8004a70:	fba3 0302 	umull	r0, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2064      	movs	r0, #100	; 0x64
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <UART_SetConfig+0x1b0>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	440a      	add	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40013800 	.word	0x40013800
 8004aa4:	51eb851f 	.word	0x51eb851f

08004aa8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aae:	f3ef 8305 	mrs	r3, IPSR
 8004ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10f      	bne.n	8004ada <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aba:	f3ef 8310 	mrs	r3, PRIMASK
 8004abe:	607b      	str	r3, [r7, #4]
  return(result);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <osKernelInitialize+0x32>
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <osKernelInitialize+0x60>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d109      	bne.n	8004ae2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ace:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ada:	f06f 0305 	mvn.w	r3, #5
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e00c      	b.n	8004afc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <osKernelInitialize+0x60>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <osKernelInitialize+0x60>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e002      	b.n	8004afc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	200002e0 	.word	0x200002e0

08004b0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b12:	f3ef 8305 	mrs	r3, IPSR
 8004b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b22:	607b      	str	r3, [r7, #4]
  return(result);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <osKernelStart+0x32>
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <osKernelStart+0x64>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d109      	bne.n	8004b46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b32:	f3ef 8311 	mrs	r3, BASEPRI
 8004b36:	603b      	str	r3, [r7, #0]
  return(result);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b3e:	f06f 0305 	mvn.w	r3, #5
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e00e      	b.n	8004b64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <osKernelStart+0x64>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <osKernelStart+0x64>)
 8004b50:	2202      	movs	r2, #2
 8004b52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004b54:	f001 f890 	bl	8005c78 <vTaskStartScheduler>
      stat = osOK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200002e0 	.word	0x200002e0

08004b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b092      	sub	sp, #72	; 0x48
 8004b78:	af04      	add	r7, sp, #16
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b84:	f3ef 8305 	mrs	r3, IPSR
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8094 	bne.w	8004cba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	623b      	str	r3, [r7, #32]
  return(result);
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 808d 	bne.w	8004cba <osThreadNew+0x146>
 8004ba0:	4b48      	ldr	r3, [pc, #288]	; (8004cc4 <osThreadNew+0x150>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d106      	bne.n	8004bb6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 8082 	bne.w	8004cba <osThreadNew+0x146>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d07e      	beq.n	8004cba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004bc0:	2318      	movs	r3, #24
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004bc8:	f107 031b 	add.w	r3, r7, #27
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d045      	beq.n	8004c66 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <osThreadNew+0x74>
        name = attr->name;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <osThreadNew+0x9a>
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	2b38      	cmp	r3, #56	; 0x38
 8004c00:	d805      	bhi.n	8004c0e <osThreadNew+0x9a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <osThreadNew+0x9e>
        return (NULL);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e054      	b.n	8004cbc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00e      	beq.n	8004c48 <osThreadNew+0xd4>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2ba7      	cmp	r3, #167	; 0xa7
 8004c30:	d90a      	bls.n	8004c48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <osThreadNew+0xd4>
        mem = 1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	e010      	b.n	8004c6a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10c      	bne.n	8004c6a <osThreadNew+0xf6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d108      	bne.n	8004c6a <osThreadNew+0xf6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <osThreadNew+0xf6>
          mem = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c64:	e001      	b.n	8004c6a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d110      	bne.n	8004c92 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c78:	9202      	str	r2, [sp, #8]
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fe12 	bl	80058b0 <xTaskCreateStatic>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e013      	b.n	8004cba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d110      	bne.n	8004cba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fe5c 	bl	8005968 <xTaskCreate>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <osThreadNew+0x146>
          hTask = NULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cba:	697b      	ldr	r3, [r7, #20]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3738      	adds	r7, #56	; 0x38
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200002e0 	.word	0x200002e0

08004cc8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd0:	f3ef 8305 	mrs	r3, IPSR
 8004cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10f      	bne.n	8004cfc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <osDelay+0x34>
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <osDelay+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d109      	bne.n	8004d04 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <osDelay+0x3c>
    stat = osErrorISR;
 8004cfc:	f06f 0305 	mvn.w	r3, #5
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e007      	b.n	8004d14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ff7e 	bl	8005c10 <vTaskDelay>
    }
  }

  return (stat);
 8004d14:	697b      	ldr	r3, [r7, #20]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	200002e0 	.word	0x200002e0

08004d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a06      	ldr	r2, [pc, #24]	; (8004d4c <vApplicationGetIdleTaskMemory+0x28>)
 8004d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	200002e4 	.word	0x200002e4
 8004d50:	2000038c 	.word	0x2000038c

08004d54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <vApplicationGetTimerTaskMemory+0x30>)
 8004d6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	2000058c 	.word	0x2000058c
 8004d84:	20000634 	.word	0x20000634

08004d88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f103 0208 	add.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004da0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0208 	add.w	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0208 	add.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d103      	bne.n	8004e44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e00c      	b.n	8004e5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3308      	adds	r3, #8
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e002      	b.n	8004e52 <vListInsert+0x2e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d2f6      	bcs.n	8004e4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6892      	ldr	r2, [r2, #8]
 8004eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6852      	ldr	r2, [r2, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d103      	bne.n	8004ec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	1e5a      	subs	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
	...

08004ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f12:	f001 fff3 	bl	8006efc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	3b01      	subs	r3, #1
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d114      	bne.n	8004f92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f91b 	bl	80061b0 <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <xQueueGenericReset+0xcc>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	e009      	b.n	8004fa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3310      	adds	r3, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fef6 	bl	8004d88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3324      	adds	r3, #36	; 0x24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fef1 	bl	8004d88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 ffd9 	bl	8006f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <xQueueGenericCreateStatic+0x52>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <xQueueGenericCreateStatic+0x56>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericCreateStatic+0x58>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	623b      	str	r3, [r7, #32]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xQueueGenericCreateStatic+0x7e>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xQueueGenericCreateStatic+0x82>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericCreateStatic+0x84>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	61fb      	str	r3, [r7, #28]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005056:	2350      	movs	r3, #80	; 0x50
 8005058:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b50      	cmp	r3, #80	; 0x50
 800505e:	d00a      	beq.n	8005076 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61bb      	str	r3, [r7, #24]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005088:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f805 	bl	80050a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	3730      	adds	r7, #48	; 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050d4:	2101      	movs	r1, #1
 80050d6:	69b8      	ldr	r0, [r7, #24]
 80050d8:	f7ff ff06 	bl	8004ee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050fa:	2300      	movs	r3, #0
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericSend+0x32>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueGenericSend+0x40>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <xQueueGenericSend+0x44>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <xQueueGenericSend+0x46>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xQueueGenericSend+0x60>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d103      	bne.n	800515a <xQueueGenericSend+0x6e>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <xQueueGenericSend+0x72>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueGenericSend+0x74>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueGenericSend+0x8e>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	623b      	str	r3, [r7, #32]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800517a:	f001 f9df 	bl	800653c <xTaskGetSchedulerState>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <xQueueGenericSend+0x9e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <xQueueGenericSend+0xa2>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericSend+0xa4>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xQueueGenericSend+0xbe>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	61fb      	str	r3, [r7, #28]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051aa:	f001 fea7 	bl	8006efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <xQueueGenericSend+0xd4>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d129      	bne.n	8005214 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c6:	f000 fa07 	bl	80055d8 <prvCopyDataToQueue>
 80051ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 ffe9 	bl	80061b0 <xTaskRemoveFromEventList>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <xQueueGenericSend+0x1f8>)
 80051e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	e00a      	b.n	800520c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051fc:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <xQueueGenericSend+0x1f8>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800520c:	f001 fea6 	bl	8006f5c <vPortExitCritical>
				return pdPASS;
 8005210:	2301      	movs	r3, #1
 8005212:	e063      	b.n	80052dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800521a:	f001 fe9f 	bl	8006f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800521e:	2300      	movs	r3, #0
 8005220:	e05c      	b.n	80052dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005228:	f107 0314 	add.w	r3, r7, #20
 800522c:	4618      	mov	r0, r3
 800522e:	f001 f823 	bl	8006278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005236:	f001 fe91 	bl	8006f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800523a:	f000 fd8d 	bl	8005d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800523e:	f001 fe5d 	bl	8006efc <vPortEnterCritical>
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005248:	b25b      	sxtb	r3, r3
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d103      	bne.n	8005258 <xQueueGenericSend+0x16c>
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	b25b      	sxtb	r3, r3
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d103      	bne.n	800526e <xQueueGenericSend+0x182>
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526e:	f001 fe75 	bl	8006f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005272:	1d3a      	adds	r2, r7, #4
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f001 f812 	bl	80062a4 <xTaskCheckForTimeOut>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d124      	bne.n	80052d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005288:	f000 fa9e 	bl	80057c8 <prvIsQueueFull>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	3310      	adds	r3, #16
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f000 ff38 	bl	8006110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a2:	f000 fa29 	bl	80056f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052a6:	f000 fd65 	bl	8005d74 <xTaskResumeAll>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f af7c 	bne.w	80051aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <xQueueGenericSend+0x1f8>)
 80052b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	e772      	b.n	80051aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c6:	f000 fa17 	bl	80056f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ca:	f000 fd53 	bl	8005d74 <xTaskResumeAll>
 80052ce:	e76c      	b.n	80051aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d2:	f000 fa11 	bl	80056f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052d6:	f000 fd4d 	bl	8005d74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052da:	2300      	movs	r3, #0
		}
	}
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3738      	adds	r7, #56	; 0x38
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <xQueueGenericSendFromISR+0x3c>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <xQueueGenericSendFromISR+0x40>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <xQueueGenericSendFromISR+0x42>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	623b      	str	r3, [r7, #32]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d103      	bne.n	8005352 <xQueueGenericSendFromISR+0x6a>
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <xQueueGenericSendFromISR+0x6e>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xQueueGenericSendFromISR+0x70>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	61fb      	str	r3, [r7, #28]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005372:	f001 fe85 	bl	8007080 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005376:	f3ef 8211 	mrs	r2, BASEPRI
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61ba      	str	r2, [r7, #24]
 800538c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800538e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <xQueueGenericSendFromISR+0xbc>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d12c      	bne.n	80053fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053b4:	f000 f910 	bl	80055d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d112      	bne.n	80053e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	3324      	adds	r3, #36	; 0x24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 feee 	bl	80061b0 <xTaskRemoveFromEventList>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00e      	beq.n	80053f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e007      	b.n	80053f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053ec:	3301      	adds	r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	b25a      	sxtb	r2, r3
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053f8:	2301      	movs	r3, #1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053fc:	e001      	b.n	8005402 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800540c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005410:	4618      	mov	r0, r3
 8005412:	3738      	adds	r7, #56	; 0x38
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <xQueueReceive+0x30>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	623b      	str	r3, [r7, #32]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <xQueueReceive+0x3e>
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueReceive+0x42>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueReceive+0x44>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueReceive+0x5e>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61fb      	str	r3, [r7, #28]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005476:	f001 f861 	bl	800653c <xTaskGetSchedulerState>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d102      	bne.n	8005486 <xQueueReceive+0x6e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <xQueueReceive+0x72>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <xQueueReceive+0x74>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueReceive+0x8e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	61bb      	str	r3, [r7, #24]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80054a6:	f001 fd29 	bl	8006efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01f      	beq.n	80054f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ba:	f000 f8f7 	bl	80056ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00f      	beq.n	80054ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	3310      	adds	r3, #16
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fe6c 	bl	80061b0 <xTaskRemoveFromEventList>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <xQueueReceive+0x1bc>)
 80054e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054ee:	f001 fd35 	bl	8006f5c <vPortExitCritical>
				return pdPASS;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e069      	b.n	80055ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054fc:	f001 fd2e 	bl	8006f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005500:	2300      	movs	r3, #0
 8005502:	e062      	b.n	80055ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800550a:	f107 0310 	add.w	r3, r7, #16
 800550e:	4618      	mov	r0, r3
 8005510:	f000 feb2 	bl	8006278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005518:	f001 fd20 	bl	8006f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800551c:	f000 fc1c 	bl	8005d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005520:	f001 fcec 	bl	8006efc <vPortEnterCritical>
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueReceive+0x122>
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d103      	bne.n	8005550 <xQueueReceive+0x138>
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005550:	f001 fd04 	bl	8006f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005554:	1d3a      	adds	r2, r7, #4
 8005556:	f107 0310 	add.w	r3, r7, #16
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fea1 	bl	80062a4 <xTaskCheckForTimeOut>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d123      	bne.n	80055b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f000 f917 	bl	800579c <prvIsQueueEmpty>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fdc7 	bl	8006110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005584:	f000 f8b8 	bl	80056f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005588:	f000 fbf4 	bl	8005d74 <xTaskResumeAll>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d189      	bne.n	80054a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <xQueueReceive+0x1bc>)
 8005594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	e780      	b.n	80054a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a6:	f000 f8a7 	bl	80056f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055aa:	f000 fbe3 	bl	8005d74 <xTaskResumeAll>
 80055ae:	e77a      	b.n	80054a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b2:	f000 f8a1 	bl	80056f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055b6:	f000 fbdd 	bl	8005d74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055bc:	f000 f8ee 	bl	800579c <prvIsQueueEmpty>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f43f af6f 	beq.w	80054a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3730      	adds	r7, #48	; 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d14d      	bne.n	800569a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 ffb8 	bl	8006578 <xTaskPriorityDisinherit>
 8005608:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	e043      	b.n	800569a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d119      	bne.n	800564c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6898      	ldr	r0, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	461a      	mov	r2, r3
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	f001 ffc6 	bl	80075b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	441a      	add	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d32b      	bcc.n	800569a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	e026      	b.n	800569a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68d8      	ldr	r0, [r3, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	461a      	mov	r2, r3
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	f001 ffac 	bl	80075b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	425b      	negs	r3, r3
 8005666:	441a      	add	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d207      	bcs.n	8005688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	425b      	negs	r3, r3
 8005682:	441a      	add	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d105      	bne.n	800569a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3b01      	subs	r3, #1
 8005698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	441a      	add	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d303      	bcc.n	80056e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	461a      	mov	r2, r3
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f001 ff62 	bl	80075b4 <memcpy>
	}
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005700:	f001 fbfc 	bl	8006efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800570c:	e011      	b.n	8005732 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3324      	adds	r3, #36	; 0x24
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fd48 	bl	80061b0 <xTaskRemoveFromEventList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005726:	f000 fe1f 	bl	8006368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3b01      	subs	r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dce9      	bgt.n	800570e <prvUnlockQueue+0x16>
 800573a:	e000      	b.n	800573e <prvUnlockQueue+0x46>
					break;
 800573c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005746:	f001 fc09 	bl	8006f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800574a:	f001 fbd7 	bl	8006efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005754:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005756:	e011      	b.n	800577c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d012      	beq.n	8005786 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3310      	adds	r3, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fd23 	bl	80061b0 <xTaskRemoveFromEventList>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005770:	f000 fdfa 	bl	8006368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	3b01      	subs	r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800577c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005780:	2b00      	cmp	r3, #0
 8005782:	dce9      	bgt.n	8005758 <prvUnlockQueue+0x60>
 8005784:	e000      	b.n	8005788 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005786:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	22ff      	movs	r2, #255	; 0xff
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005790:	f001 fbe4 	bl	8006f5c <vPortExitCritical>
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a4:	f001 fbaa 	bl	8006efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e001      	b.n	80057ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f001 fbcf 	bl	8006f5c <vPortExitCritical>

	return xReturn;
 80057be:	68fb      	ldr	r3, [r7, #12]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057d0:	f001 fb94 	bl	8006efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	429a      	cmp	r2, r3
 80057de:	d102      	bne.n	80057e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e001      	b.n	80057ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f001 fbb7 	bl	8006f5c <vPortExitCritical>

	return xReturn;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e014      	b.n	8005832 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005808:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <vQueueAddToRegistry+0x4c>)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005814:	490b      	ldr	r1, [pc, #44]	; (8005844 <vQueueAddToRegistry+0x4c>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <vQueueAddToRegistry+0x4c>)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800582a:	e006      	b.n	800583a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b07      	cmp	r3, #7
 8005836:	d9e7      	bls.n	8005808 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	20000a34 	.word	0x20000a34

08005848 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005858:	f001 fb50 	bl	8006efc <vPortEnterCritical>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005862:	b25b      	sxtb	r3, r3
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d103      	bne.n	8005872 <vQueueWaitForMessageRestricted+0x2a>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005878:	b25b      	sxtb	r3, r3
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d103      	bne.n	8005888 <vQueueWaitForMessageRestricted+0x40>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005888:	f001 fb68 	bl	8006f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3324      	adds	r3, #36	; 0x24
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fc5b 	bl	8006158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f7ff ff28 	bl	80056f8 <prvUnlockQueue>
	}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	; 0x38
 80058b4:	af04      	add	r7, sp, #16
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xTaskCreateStatic+0x2a>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61fb      	str	r3, [r7, #28]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058f6:	23a8      	movs	r3, #168	; 0xa8
 80058f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2ba8      	cmp	r3, #168	; 0xa8
 80058fe:	d00a      	beq.n	8005916 <xTaskCreateStatic+0x66>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61bb      	str	r3, [r7, #24]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01e      	beq.n	800595a <xTaskCreateStatic+0xaa>
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01b      	beq.n	800595a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	2202      	movs	r2, #2
 8005930:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005934:	2300      	movs	r3, #0
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f851 	bl	80059f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005954:	f000 f8ec 	bl	8005b30 <prvAddNewTaskToReadyList>
 8005958:	e001      	b.n	800595e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800595e:	697b      	ldr	r3, [r7, #20]
	}
 8005960:	4618      	mov	r0, r3
 8005962:	3728      	adds	r7, #40	; 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af04      	add	r7, sp, #16
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fbbd 	bl	80070fc <pvPortMalloc>
 8005982:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00e      	beq.n	80059a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800598a:	20a8      	movs	r0, #168	; 0xa8
 800598c:	f001 fbb6 	bl	80070fc <pvPortMalloc>
 8005990:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
 800599e:	e005      	b.n	80059ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	f001 fc6f 	bl	8007284 <vPortFree>
 80059a6:	e001      	b.n	80059ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d017      	beq.n	80059e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	2300      	movs	r3, #0
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f80f 	bl	80059f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059d6:	69f8      	ldr	r0, [r7, #28]
 80059d8:	f000 f8aa 	bl	8005b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e002      	b.n	80059e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059e8:	69bb      	ldr	r3, [r7, #24]
	}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	21a5      	movs	r1, #165	; 0xa5
 8005a0e:	f001 fd4d 	bl	80074ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	617b      	str	r3, [r7, #20]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e012      	b.n	8005a78 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	7819      	ldrb	r1, [r3, #0]
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3334      	adds	r3, #52	; 0x34
 8005a62:	460a      	mov	r2, r1
 8005a64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b0f      	cmp	r3, #15
 8005a7c:	d9e9      	bls.n	8005a52 <prvInitialiseNewTask+0x5e>
 8005a7e:	e000      	b.n	8005a82 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005a80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b37      	cmp	r3, #55	; 0x37
 8005a8e:	d901      	bls.n	8005a94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a90:	2337      	movs	r3, #55	; 0x37
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff f98b 	bl	8004dc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff f986 	bl	8004dc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	3354      	adds	r3, #84	; 0x54
 8005ae4:	224c      	movs	r2, #76	; 0x4c
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fcdf 	bl	80074ac <memset>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <prvInitialiseNewTask+0x130>)
 8005af2:	659a      	str	r2, [r3, #88]	; 0x58
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <prvInitialiseNewTask+0x134>)
 8005af8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	4a0b      	ldr	r2, [pc, #44]	; (8005b2c <prvInitialiseNewTask+0x138>)
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	69b8      	ldr	r0, [r7, #24]
 8005b06:	f001 f90b 	bl	8006d20 <pxPortInitialiseStack>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b1c:	bf00      	nop
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20002254 	.word	0x20002254
 8005b28:	200022bc 	.word	0x200022bc
 8005b2c:	20002324 	.word	0x20002324

08005b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b38:	f001 f9e0 	bl	8006efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b3c:	4b2d      	ldr	r3, [pc, #180]	; (8005bf4 <prvAddNewTaskToReadyList+0xc4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3301      	adds	r3, #1
 8005b42:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <prvAddNewTaskToReadyList+0xc4>)
 8005b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b46:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <prvAddNewTaskToReadyList+0xc8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <prvAddNewTaskToReadyList+0xc8>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <prvAddNewTaskToReadyList+0xc4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d110      	bne.n	8005b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b5c:	f000 fc28 	bl	80063b0 <prvInitialiseTaskLists>
 8005b60:	e00d      	b.n	8005b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <prvAddNewTaskToReadyList+0xcc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b6a:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <prvAddNewTaskToReadyList+0xc8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d802      	bhi.n	8005b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b78:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <prvAddNewTaskToReadyList+0xc8>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <prvAddNewTaskToReadyList+0xd0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <prvAddNewTaskToReadyList+0xd0>)
 8005b86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <prvAddNewTaskToReadyList+0xd0>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <prvAddNewTaskToReadyList+0xd4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d903      	bls.n	8005ba4 <prvAddNewTaskToReadyList+0x74>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <prvAddNewTaskToReadyList+0xd4>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <prvAddNewTaskToReadyList+0xd8>)
 8005bb2:	441a      	add	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7ff f90f 	bl	8004dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bc0:	f001 f9cc 	bl	8006f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <prvAddNewTaskToReadyList+0xcc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddNewTaskToReadyList+0xc8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d207      	bcs.n	8005bea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <prvAddNewTaskToReadyList+0xdc>)
 8005bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000f48 	.word	0x20000f48
 8005bf8:	20000a74 	.word	0x20000a74
 8005bfc:	20000f54 	.word	0x20000f54
 8005c00:	20000f64 	.word	0x20000f64
 8005c04:	20000f50 	.word	0x20000f50
 8005c08:	20000a78 	.word	0x20000a78
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d017      	beq.n	8005c52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <vTaskDelay+0x60>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <vTaskDelay+0x30>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c40:	f000 f88a 	bl	8005d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c44:	2100      	movs	r1, #0
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fd04 	bl	8006654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c4c:	f000 f892 	bl	8005d74 <xTaskResumeAll>
 8005c50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <vTaskDelay+0x64>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000f70 	.word	0x20000f70
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c86:	463a      	mov	r2, r7
 8005c88:	1d39      	adds	r1, r7, #4
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff f848 	bl	8004d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	9202      	str	r2, [sp, #8]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	4924      	ldr	r1, [pc, #144]	; (8005d38 <vTaskStartScheduler+0xc0>)
 8005ca8:	4824      	ldr	r0, [pc, #144]	; (8005d3c <vTaskStartScheduler+0xc4>)
 8005caa:	f7ff fe01 	bl	80058b0 <xTaskCreateStatic>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4a23      	ldr	r2, [pc, #140]	; (8005d40 <vTaskStartScheduler+0xc8>)
 8005cb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cb4:	4b22      	ldr	r3, [pc, #136]	; (8005d40 <vTaskStartScheduler+0xc8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e001      	b.n	8005cc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d102      	bne.n	8005cd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ccc:	f000 fd16 	bl	80066fc <xTimerCreateTimerTask>
 8005cd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d11b      	bne.n	8005d10 <vTaskStartScheduler+0x98>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
}
 8005cea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cec:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <vTaskStartScheduler+0xcc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3354      	adds	r3, #84	; 0x54
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <vTaskStartScheduler+0xd0>)
 8005cf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf6:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <vTaskStartScheduler+0xd4>)
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cfe:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <vTaskStartScheduler+0xd8>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <vTaskStartScheduler+0xdc>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d0a:	f001 f885 	bl	8006e18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d0e:	e00e      	b.n	8005d2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d10a      	bne.n	8005d2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <vTaskStartScheduler+0xb4>
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	08007700 	.word	0x08007700
 8005d3c:	08006381 	.word	0x08006381
 8005d40:	20000f6c 	.word	0x20000f6c
 8005d44:	20000a74 	.word	0x20000a74
 8005d48:	2000005c 	.word	0x2000005c
 8005d4c:	20000f68 	.word	0x20000f68
 8005d50:	20000f54 	.word	0x20000f54
 8005d54:	20000f4c 	.word	0x20000f4c

08005d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <vTaskSuspendAll+0x18>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a03      	ldr	r2, [pc, #12]	; (8005d70 <vTaskSuspendAll+0x18>)
 8005d64:	6013      	str	r3, [r2, #0]
}
 8005d66:	bf00      	nop
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000f70 	.word	0x20000f70

08005d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d82:	4b42      	ldr	r3, [pc, #264]	; (8005e8c <xTaskResumeAll+0x118>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	603b      	str	r3, [r7, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005da0:	f001 f8ac 	bl	8006efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005da4:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <xTaskResumeAll+0x118>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4a38      	ldr	r2, [pc, #224]	; (8005e8c <xTaskResumeAll+0x118>)
 8005dac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dae:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <xTaskResumeAll+0x118>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d162      	bne.n	8005e7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <xTaskResumeAll+0x11c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d05e      	beq.n	8005e7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dbe:	e02f      	b.n	8005e20 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005dc0:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <xTaskResumeAll+0x120>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3318      	adds	r3, #24
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff f861 	bl	8004e94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff f85c 	bl	8004e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <xTaskResumeAll+0x124>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d903      	bls.n	8005df0 <xTaskResumeAll+0x7c>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	4a2a      	ldr	r2, [pc, #168]	; (8005e98 <xTaskResumeAll+0x124>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <xTaskResumeAll+0x128>)
 8005dfe:	441a      	add	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fe ffe9 	bl	8004dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e10:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <xTaskResumeAll+0x12c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <xTaskResumeAll+0x130>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e20:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <xTaskResumeAll+0x120>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1cb      	bne.n	8005dc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e2e:	f000 fb61 	bl	80064f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e32:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <xTaskResumeAll+0x134>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d010      	beq.n	8005e60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e3e:	f000 f845 	bl	8005ecc <xTaskIncrementTick>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <xTaskResumeAll+0x130>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f1      	bne.n	8005e3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <xTaskResumeAll+0x134>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <xTaskResumeAll+0x130>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <xTaskResumeAll+0x138>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e7c:	f001 f86e 	bl	8006f5c <vPortExitCritical>

	return xAlreadyYielded;
 8005e80:	68bb      	ldr	r3, [r7, #8]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000f70 	.word	0x20000f70
 8005e90:	20000f48 	.word	0x20000f48
 8005e94:	20000f08 	.word	0x20000f08
 8005e98:	20000f50 	.word	0x20000f50
 8005e9c:	20000a78 	.word	0x20000a78
 8005ea0:	20000a74 	.word	0x20000a74
 8005ea4:	20000f5c 	.word	0x20000f5c
 8005ea8:	20000f58 	.word	0x20000f58
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eb6:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <xTaskGetTickCount+0x18>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ebc:	687b      	ldr	r3, [r7, #4]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	20000f4c 	.word	0x20000f4c

08005ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed6:	4b51      	ldr	r3, [pc, #324]	; (800601c <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 808e 	bne.w	8005ffc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee0:	4b4f      	ldr	r3, [pc, #316]	; (8006020 <xTaskIncrementTick+0x154>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ee8:	4a4d      	ldr	r2, [pc, #308]	; (8006020 <xTaskIncrementTick+0x154>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d120      	bne.n	8005f36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ef4:	4b4b      	ldr	r3, [pc, #300]	; (8006024 <xTaskIncrementTick+0x158>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <xTaskIncrementTick+0x48>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	603b      	str	r3, [r7, #0]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xTaskIncrementTick+0x46>
 8005f14:	4b43      	ldr	r3, [pc, #268]	; (8006024 <xTaskIncrementTick+0x158>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	4b43      	ldr	r3, [pc, #268]	; (8006028 <xTaskIncrementTick+0x15c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a41      	ldr	r2, [pc, #260]	; (8006024 <xTaskIncrementTick+0x158>)
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	4a41      	ldr	r2, [pc, #260]	; (8006028 <xTaskIncrementTick+0x15c>)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	4b40      	ldr	r3, [pc, #256]	; (800602c <xTaskIncrementTick+0x160>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	4a3f      	ldr	r2, [pc, #252]	; (800602c <xTaskIncrementTick+0x160>)
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	f000 fadf 	bl	80064f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f36:	4b3e      	ldr	r3, [pc, #248]	; (8006030 <xTaskIncrementTick+0x164>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d34e      	bcc.n	8005fde <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f40:	4b38      	ldr	r3, [pc, #224]	; (8006024 <xTaskIncrementTick+0x158>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <xTaskIncrementTick+0x82>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <xTaskIncrementTick+0x84>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f54:	4b36      	ldr	r3, [pc, #216]	; (8006030 <xTaskIncrementTick+0x164>)
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	601a      	str	r2, [r3, #0]
					break;
 8005f5c:	e03f      	b.n	8005fde <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f5e:	4b31      	ldr	r3, [pc, #196]	; (8006024 <xTaskIncrementTick+0x158>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d203      	bcs.n	8005f7e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f76:	4a2e      	ldr	r2, [pc, #184]	; (8006030 <xTaskIncrementTick+0x164>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6013      	str	r3, [r2, #0]
						break;
 8005f7c:	e02f      	b.n	8005fde <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe ff86 	bl	8004e94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe ff7d 	bl	8004e94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <xTaskIncrementTick+0x168>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d903      	bls.n	8005fae <xTaskIncrementTick+0xe2>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <xTaskIncrementTick+0x168>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <xTaskIncrementTick+0x16c>)
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7fe ff0a 	bl	8004dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <xTaskIncrementTick+0x170>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3b3      	bcc.n	8005f40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fdc:	e7b0      	b.n	8005f40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <xTaskIncrementTick+0x170>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4914      	ldr	r1, [pc, #80]	; (8006038 <xTaskIncrementTick+0x16c>)
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d907      	bls.n	8006006 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e004      	b.n	8006006 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <xTaskIncrementTick+0x174>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <xTaskIncrementTick+0x174>)
 8006004:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <xTaskIncrementTick+0x178>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000f70 	.word	0x20000f70
 8006020:	20000f4c 	.word	0x20000f4c
 8006024:	20000f00 	.word	0x20000f00
 8006028:	20000f04 	.word	0x20000f04
 800602c:	20000f60 	.word	0x20000f60
 8006030:	20000f68 	.word	0x20000f68
 8006034:	20000f50 	.word	0x20000f50
 8006038:	20000a78 	.word	0x20000a78
 800603c:	20000a74 	.word	0x20000a74
 8006040:	20000f58 	.word	0x20000f58
 8006044:	20000f5c 	.word	0x20000f5c

08006048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <vTaskSwitchContext+0xb0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <vTaskSwitchContext+0xb4>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800605c:	e046      	b.n	80060ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800605e:	4b27      	ldr	r3, [pc, #156]	; (80060fc <vTaskSwitchContext+0xb4>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006064:	4b26      	ldr	r3, [pc, #152]	; (8006100 <vTaskSwitchContext+0xb8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e010      	b.n	800608e <vTaskSwitchContext+0x46>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <vTaskSwitchContext+0x40>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	607b      	str	r3, [r7, #4]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <vTaskSwitchContext+0x3e>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	491d      	ldr	r1, [pc, #116]	; (8006104 <vTaskSwitchContext+0xbc>)
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0e4      	beq.n	800606c <vTaskSwitchContext+0x24>
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <vTaskSwitchContext+0xbc>)
 80060ae:	4413      	add	r3, r2
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3308      	adds	r3, #8
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d104      	bne.n	80060d2 <vTaskSwitchContext+0x8a>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <vTaskSwitchContext+0xc0>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <vTaskSwitchContext+0xb8>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <vTaskSwitchContext+0xc0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3354      	adds	r3, #84	; 0x54
 80060e8:	4a08      	ldr	r2, [pc, #32]	; (800610c <vTaskSwitchContext+0xc4>)
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000f70 	.word	0x20000f70
 80060fc:	20000f5c 	.word	0x20000f5c
 8006100:	20000f50 	.word	0x20000f50
 8006104:	20000a78 	.word	0x20000a78
 8006108:	20000a74 	.word	0x20000a74
 800610c:	2000005c 	.word	0x2000005c

08006110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <vTaskPlaceOnEventList+0x44>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3318      	adds	r3, #24
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fe fe70 	bl	8004e24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006144:	2101      	movs	r1, #1
 8006146:	6838      	ldr	r0, [r7, #0]
 8006148:	f000 fa84 	bl	8006654 <prvAddCurrentTaskToDelayedList>
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000a74 	.word	0x20000a74

08006158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	617b      	str	r3, [r7, #20]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3318      	adds	r3, #24
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7fe fe28 	bl	8004dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
 8006198:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	68b8      	ldr	r0, [r7, #8]
 800619e:	f000 fa59 	bl	8006654 <prvAddCurrentTaskToDelayedList>
	}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000a74 	.word	0x20000a74

080061b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3318      	adds	r3, #24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fe57 	bl	8004e94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <xTaskRemoveFromEventList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11d      	bne.n	800622a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fe4e 	bl	8004e94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <xTaskRemoveFromEventList+0xb4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <xTaskRemoveFromEventList+0x5c>
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a16      	ldr	r2, [pc, #88]	; (8006264 <xTaskRemoveFromEventList+0xb4>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a13      	ldr	r2, [pc, #76]	; (8006268 <xTaskRemoveFromEventList+0xb8>)
 800621a:	441a      	add	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe fddb 	bl	8004dde <vListInsertEnd>
 8006228:	e005      	b.n	8006236 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3318      	adds	r3, #24
 800622e:	4619      	mov	r1, r3
 8006230:	480e      	ldr	r0, [pc, #56]	; (800626c <xTaskRemoveFromEventList+0xbc>)
 8006232:	f7fe fdd4 	bl	8004dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <xTaskRemoveFromEventList+0xc0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d905      	bls.n	8006250 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <xTaskRemoveFromEventList+0xc4>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e001      	b.n	8006254 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000f70 	.word	0x20000f70
 8006264:	20000f50 	.word	0x20000f50
 8006268:	20000a78 	.word	0x20000a78
 800626c:	20000f08 	.word	0x20000f08
 8006270:	20000a74 	.word	0x20000a74
 8006274:	20000f5c 	.word	0x20000f5c

08006278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <vTaskInternalSetTimeOutState+0x24>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <vTaskInternalSetTimeOutState+0x28>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000f60 	.word	0x20000f60
 80062a0:	20000f4c 	.word	0x20000f4c

080062a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062e6:	f000 fe09 	bl	8006efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062ea:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <xTaskCheckForTimeOut+0xbc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006302:	d102      	bne.n	800630a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006304:	2300      	movs	r3, #0
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	e023      	b.n	8006352 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <xTaskCheckForTimeOut+0xc0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d007      	beq.n	8006326 <xTaskCheckForTimeOut+0x82>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e015      	b.n	8006352 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	429a      	cmp	r2, r3
 800632e:	d20b      	bcs.n	8006348 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	1ad2      	subs	r2, r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff ff9b 	bl	8006278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	e004      	b.n	8006352 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800634e:	2301      	movs	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006352:	f000 fe03 	bl	8006f5c <vPortExitCritical>

	return xReturn;
 8006356:	69fb      	ldr	r3, [r7, #28]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000f4c 	.word	0x20000f4c
 8006364:	20000f60 	.word	0x20000f60

08006368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <vTaskMissedYield+0x14>)
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000f5c 	.word	0x20000f5c

08006380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006388:	f000 f852 	bl	8006430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <prvIdleTask+0x28>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d9f9      	bls.n	8006388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <prvIdleTask+0x2c>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063a4:	e7f0      	b.n	8006388 <prvIdleTask+0x8>
 80063a6:	bf00      	nop
 80063a8:	20000a78 	.word	0x20000a78
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	e00c      	b.n	80063d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a12      	ldr	r2, [pc, #72]	; (8006410 <prvInitialiseTaskLists+0x60>)
 80063c8:	4413      	add	r3, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fcdc 	bl	8004d88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b37      	cmp	r3, #55	; 0x37
 80063da:	d9ef      	bls.n	80063bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <prvInitialiseTaskLists+0x64>)
 80063de:	f7fe fcd3 	bl	8004d88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063e2:	480d      	ldr	r0, [pc, #52]	; (8006418 <prvInitialiseTaskLists+0x68>)
 80063e4:	f7fe fcd0 	bl	8004d88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063e8:	480c      	ldr	r0, [pc, #48]	; (800641c <prvInitialiseTaskLists+0x6c>)
 80063ea:	f7fe fccd 	bl	8004d88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063ee:	480c      	ldr	r0, [pc, #48]	; (8006420 <prvInitialiseTaskLists+0x70>)
 80063f0:	f7fe fcca 	bl	8004d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063f4:	480b      	ldr	r0, [pc, #44]	; (8006424 <prvInitialiseTaskLists+0x74>)
 80063f6:	f7fe fcc7 	bl	8004d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <prvInitialiseTaskLists+0x78>)
 80063fc:	4a05      	ldr	r2, [pc, #20]	; (8006414 <prvInitialiseTaskLists+0x64>)
 80063fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <prvInitialiseTaskLists+0x7c>)
 8006402:	4a05      	ldr	r2, [pc, #20]	; (8006418 <prvInitialiseTaskLists+0x68>)
 8006404:	601a      	str	r2, [r3, #0]
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000a78 	.word	0x20000a78
 8006414:	20000ed8 	.word	0x20000ed8
 8006418:	20000eec 	.word	0x20000eec
 800641c:	20000f08 	.word	0x20000f08
 8006420:	20000f1c 	.word	0x20000f1c
 8006424:	20000f34 	.word	0x20000f34
 8006428:	20000f00 	.word	0x20000f00
 800642c:	20000f04 	.word	0x20000f04

08006430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006436:	e019      	b.n	800646c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006438:	f000 fd60 	bl	8006efc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800643c:	4b10      	ldr	r3, [pc, #64]	; (8006480 <prvCheckTasksWaitingTermination+0x50>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe fd23 	bl	8004e94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <prvCheckTasksWaitingTermination+0x54>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3b01      	subs	r3, #1
 8006454:	4a0b      	ldr	r2, [pc, #44]	; (8006484 <prvCheckTasksWaitingTermination+0x54>)
 8006456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <prvCheckTasksWaitingTermination+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <prvCheckTasksWaitingTermination+0x58>)
 8006460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006462:	f000 fd7b 	bl	8006f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f810 	bl	800648c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <prvCheckTasksWaitingTermination+0x58>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e1      	bne.n	8006438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000f1c 	.word	0x20000f1c
 8006484:	20000f48 	.word	0x20000f48
 8006488:	20000f30 	.word	0x20000f30

0800648c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3354      	adds	r3, #84	; 0x54
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f80f 	bl	80074bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fee9 	bl	8007284 <vPortFree>
				vPortFree( pxTCB );
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fee6 	bl	8007284 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064b8:	e018      	b.n	80064ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d103      	bne.n	80064cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fedd 	bl	8007284 <vPortFree>
	}
 80064ca:	e00f      	b.n	80064ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d00a      	beq.n	80064ec <prvDeleteTCB+0x60>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <prvDeleteTCB+0x5e>
	}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fa:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <prvResetNextTaskUnblockTime+0x40>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <prvResetNextTaskUnblockTime+0x14>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <prvResetNextTaskUnblockTime+0x16>
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800650e:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <prvResetNextTaskUnblockTime+0x44>)
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006516:	e008      	b.n	800652a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <prvResetNextTaskUnblockTime+0x40>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4a04      	ldr	r2, [pc, #16]	; (8006538 <prvResetNextTaskUnblockTime+0x44>)
 8006528:	6013      	str	r3, [r2, #0]
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	20000f00 	.word	0x20000f00
 8006538:	20000f68 	.word	0x20000f68

0800653c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <xTaskGetSchedulerState+0x34>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800654a:	2301      	movs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	e008      	b.n	8006562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <xTaskGetSchedulerState+0x38>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006558:	2302      	movs	r3, #2
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e001      	b.n	8006562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006562:	687b      	ldr	r3, [r7, #4]
	}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000f54 	.word	0x20000f54
 8006574:	20000f70 	.word	0x20000f70

08006578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d056      	beq.n	800663c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800658e:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <xTaskPriorityDisinherit+0xd0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	d00a      	beq.n	80065ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	60bb      	str	r3, [r7, #8]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065de:	429a      	cmp	r2, r3
 80065e0:	d02c      	beq.n	800663c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d128      	bne.n	800663c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fc50 	bl	8004e94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <xTaskPriorityDisinherit+0xd4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d903      	bls.n	800661c <xTaskPriorityDisinherit+0xa4>
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a0c      	ldr	r2, [pc, #48]	; (800664c <xTaskPriorityDisinherit+0xd4>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <xTaskPriorityDisinherit+0xd8>)
 800662a:	441a      	add	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f7fe fbd3 	bl	8004dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800663c:	697b      	ldr	r3, [r7, #20]
	}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000a74 	.word	0x20000a74
 800664c:	20000f50 	.word	0x20000f50
 8006650:	20000a78 	.word	0x20000a78

08006654 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006664:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe fc12 	bl	8004e94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d10a      	bne.n	800668e <prvAddCurrentTaskToDelayedList+0x3a>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800667e:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4819      	ldr	r0, [pc, #100]	; (80066ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006688:	f7fe fba9 	bl	8004dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800668c:	e026      	b.n	80066dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d209      	bcs.n	80066ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a6:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f7fe fbb6 	bl	8004e24 <vListInsert>
}
 80066b8:	e010      	b.n	80066dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fe fbac 	bl	8004e24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d202      	bcs.n	80066dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066d6:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000f4c 	.word	0x20000f4c
 80066e8:	20000a74 	.word	0x20000a74
 80066ec:	20000f34 	.word	0x20000f34
 80066f0:	20000f04 	.word	0x20000f04
 80066f4:	20000f00 	.word	0x20000f00
 80066f8:	20000f68 	.word	0x20000f68

080066fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006706:	f000 facb 	bl	8006ca0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <xTimerCreateTimerTask+0x80>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d021      	beq.n	8006756 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800671a:	1d3a      	adds	r2, r7, #4
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	f107 030c 	add.w	r3, r7, #12
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fb15 	bl	8004d54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	9202      	str	r2, [sp, #8]
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	2302      	movs	r3, #2
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	460a      	mov	r2, r1
 800673c:	4910      	ldr	r1, [pc, #64]	; (8006780 <xTimerCreateTimerTask+0x84>)
 800673e:	4811      	ldr	r0, [pc, #68]	; (8006784 <xTimerCreateTimerTask+0x88>)
 8006740:	f7ff f8b6 	bl	80058b0 <xTaskCreateStatic>
 8006744:	4603      	mov	r3, r0
 8006746:	4a10      	ldr	r2, [pc, #64]	; (8006788 <xTimerCreateTimerTask+0x8c>)
 8006748:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <xTimerCreateTimerTask+0x8c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006752:	2301      	movs	r3, #1
 8006754:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006772:	697b      	ldr	r3, [r7, #20]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000fa4 	.word	0x20000fa4
 8006780:	08007708 	.word	0x08007708
 8006784:	080068a9 	.word	0x080068a9
 8006788:	20000fa8 	.word	0x20000fa8

0800678c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800679a:	2300      	movs	r3, #0
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	623b      	str	r3, [r7, #32]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <xTimerGenericCommand+0x98>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02a      	beq.n	8006818 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	dc18      	bgt.n	8006806 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067d4:	f7ff feb2 	bl	800653c <xTaskGetSchedulerState>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d109      	bne.n	80067f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <xTimerGenericCommand+0x98>)
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f107 0110 	add.w	r1, r7, #16
 80067e6:	2300      	movs	r3, #0
 80067e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ea:	f7fe fc7f 	bl	80050ec <xQueueGenericSend>
 80067ee:	6278      	str	r0, [r7, #36]	; 0x24
 80067f0:	e012      	b.n	8006818 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067f2:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <xTimerGenericCommand+0x98>)
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	f107 0110 	add.w	r1, r7, #16
 80067fa:	2300      	movs	r3, #0
 80067fc:	2200      	movs	r2, #0
 80067fe:	f7fe fc75 	bl	80050ec <xQueueGenericSend>
 8006802:	6278      	str	r0, [r7, #36]	; 0x24
 8006804:	e008      	b.n	8006818 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <xTimerGenericCommand+0x98>)
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	f107 0110 	add.w	r1, r7, #16
 800680e:	2300      	movs	r3, #0
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	f7fe fd69 	bl	80052e8 <xQueueGenericSendFromISR>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800681a:	4618      	mov	r0, r3
 800681c:	3728      	adds	r7, #40	; 0x28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000fa4 	.word	0x20000fa4

08006828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvProcessExpiredTimer+0x7c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	3304      	adds	r3, #4
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fb27 	bl	8004e94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d122      	bne.n	8006894 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	18d1      	adds	r1, r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f000 f8c8 	bl	80069f0 <prvInsertTimerInActiveList>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	2100      	movs	r1, #0
 8006870:	6978      	ldr	r0, [r7, #20]
 8006872:	f7ff ff8b 	bl	800678c <xTimerGenericCommand>
 8006876:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	60fb      	str	r3, [r7, #12]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	6978      	ldr	r0, [r7, #20]
 800689a:	4798      	blx	r3
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000f9c 	.word	0x20000f9c

080068a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f857 	bl	8006968 <prvGetNextExpireTime>
 80068ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4619      	mov	r1, r3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f803 	bl	80068cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068c6:	f000 f8d5 	bl	8006a74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ca:	e7f1      	b.n	80068b0 <prvTimerTask+0x8>

080068cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068d6:	f7ff fa3f 	bl	8005d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f866 	bl	80069b0 <prvSampleTimeNow>
 80068e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d130      	bne.n	800694e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <prvProcessTimerOrBlockTask+0x3c>
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d806      	bhi.n	8006908 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068fa:	f7ff fa3b 	bl	8005d74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff ff91 	bl	8006828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006906:	e024      	b.n	8006952 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <prvProcessTimerOrBlockTask+0x90>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006920:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <prvProcessTimerOrBlockTask+0x94>)
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	f7fe ff8b 	bl	8005848 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006932:	f7ff fa1f 	bl	8005d74 <xTaskResumeAll>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <prvProcessTimerOrBlockTask+0x98>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
}
 800694c:	e001      	b.n	8006952 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800694e:	f7ff fa11 	bl	8005d74 <xTaskResumeAll>
}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000fa0 	.word	0x20000fa0
 8006960:	20000fa4 	.word	0x20000fa4
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <prvGetNextExpireTime+0x44>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <prvGetNextExpireTime+0x44>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e001      	b.n	800699e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000f9c 	.word	0x20000f9c

080069b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069b8:	f7ff fa7a 	bl	8005eb0 <xTaskGetTickCount>
 80069bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <prvSampleTimeNow+0x3c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d205      	bcs.n	80069d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069c8:	f000 f908 	bl	8006bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e002      	b.n	80069da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069da:	4a04      	ldr	r2, [pc, #16]	; (80069ec <prvSampleTimeNow+0x3c>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000fac 	.word	0x20000fac

080069f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d812      	bhi.n	8006a3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e01b      	b.n	8006a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a2a:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <prvInsertTimerInActiveList+0x7c>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fe f9f5 	bl	8004e24 <vListInsert>
 8006a3a:	e012      	b.n	8006a62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d206      	bcs.n	8006a52 <prvInsertTimerInActiveList+0x62>
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e007      	b.n	8006a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <prvInsertTimerInActiveList+0x80>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe f9e1 	bl	8004e24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a62:	697b      	ldr	r3, [r7, #20]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000fa0 	.word	0x20000fa0
 8006a70:	20000f9c 	.word	0x20000f9c

08006a74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08e      	sub	sp, #56	; 0x38
 8006a78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a7a:	e09d      	b.n	8006bb8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da18      	bge.n	8006ab4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	3304      	adds	r3, #4
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	61fb      	str	r3, [r7, #28]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aaa:	6850      	ldr	r0, [r2, #4]
 8006aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aae:	6892      	ldr	r2, [r2, #8]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	db7e      	blt.n	8006bb8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe f9e2 	bl	8004e94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ff6c 	bl	80069b0 <prvSampleTimeNow>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d86a      	bhi.n	8006bb6 <prvProcessReceivedCommands+0x142>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <prvProcessReceivedCommands+0x74>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006b6d 	.word	0x08006b6d
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b11 	.word	0x08006b11
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006b6d 	.word	0x08006b6d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	18d1      	adds	r1, r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1e:	f7ff ff67 	bl	80069f0 <prvInsertTimerInActiveList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d047      	beq.n	8006bb8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d13f      	bne.n	8006bb8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	441a      	add	r2, r3
 8006b40:	2300      	movs	r3, #0
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4a:	f7ff fe1f 	bl	800678c <xTimerGenericCommand>
 8006b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d130      	bne.n	8006bb8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	61bb      	str	r3, [r7, #24]
}
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	699a      	ldr	r2, [r3, #24]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	18d1      	adds	r1, r2, r3
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b9e:	f7ff ff27 	bl	80069f0 <prvInsertTimerInActiveList>
					break;
 8006ba2:	e009      	b.n	8006bb8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb0:	f000 fb68 	bl	8007284 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bb4:	e000      	b.n	8006bb8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006bb6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bb8:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <prvProcessReceivedCommands+0x164>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	1d39      	adds	r1, r7, #4
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fc29 	bl	8005418 <xQueueReceive>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f af57 	bne.w	8006a7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	3730      	adds	r7, #48	; 0x30
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000fa4 	.word	0x20000fa4

08006bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006be2:	e045      	b.n	8006c70 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be4:	4b2c      	ldr	r3, [pc, #176]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bee:	4b2a      	ldr	r3, [pc, #168]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe f949 	bl	8004e94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d12e      	bne.n	8006c70 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d90e      	bls.n	8006c42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe f8f2 	bl	8004e24 <vListInsert>
 8006c40:	e016      	b.n	8006c70 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c42:	2300      	movs	r3, #0
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2300      	movs	r3, #0
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fd9d 	bl	800678c <xTimerGenericCommand>
 8006c52:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	603b      	str	r3, [r7, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1b4      	bne.n	8006be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvSwitchTimerLists+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <prvSwitchTimerLists+0xbc>)
 8006c86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c88:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <prvSwitchTimerLists+0xc0>)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6013      	str	r3, [r2, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000f9c 	.word	0x20000f9c
 8006c9c:	20000fa0 	.word	0x20000fa0

08006ca0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ca6:	f000 f929 	bl	8006efc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <prvCheckForValidListAndQueue+0x60>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d120      	bne.n	8006cf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cb2:	4814      	ldr	r0, [pc, #80]	; (8006d04 <prvCheckForValidListAndQueue+0x64>)
 8006cb4:	f7fe f868 	bl	8004d88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cb8:	4813      	ldr	r0, [pc, #76]	; (8006d08 <prvCheckForValidListAndQueue+0x68>)
 8006cba:	f7fe f865 	bl	8004d88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <prvCheckForValidListAndQueue+0x6c>)
 8006cc0:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <prvCheckForValidListAndQueue+0x64>)
 8006cc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <prvCheckForValidListAndQueue+0x70>)
 8006cc6:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <prvCheckForValidListAndQueue+0x68>)
 8006cc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <prvCheckForValidListAndQueue+0x74>)
 8006cd0:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <prvCheckForValidListAndQueue+0x78>)
 8006cd2:	2110      	movs	r1, #16
 8006cd4:	200a      	movs	r0, #10
 8006cd6:	f7fe f96f 	bl	8004fb8 <xQueueGenericCreateStatic>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <prvCheckForValidListAndQueue+0x60>)
 8006cde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <prvCheckForValidListAndQueue+0x60>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <prvCheckForValidListAndQueue+0x60>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	490b      	ldr	r1, [pc, #44]	; (8006d1c <prvCheckForValidListAndQueue+0x7c>)
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fd82 	bl	80057f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf4:	f000 f932 	bl	8006f5c <vPortExitCritical>
}
 8006cf8:	bf00      	nop
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000fa4 	.word	0x20000fa4
 8006d04:	20000f74 	.word	0x20000f74
 8006d08:	20000f88 	.word	0x20000f88
 8006d0c:	20000f9c 	.word	0x20000f9c
 8006d10:	20000fa0 	.word	0x20000fa0
 8006d14:	20001050 	.word	0x20001050
 8006d18:	20000fb0 	.word	0x20000fb0
 8006d1c:	08007710 	.word	0x08007710

08006d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3b04      	subs	r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3b04      	subs	r3, #4
 8006d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f023 0201 	bic.w	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3b04      	subs	r3, #4
 8006d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d50:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <pxPortInitialiseStack+0x54>)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3b14      	subs	r3, #20
 8006d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3b20      	subs	r3, #32
 8006d66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d68:	68fb      	ldr	r3, [r7, #12]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr
 8006d74:	08006d79 	.word	0x08006d79

08006d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <prvTaskExitError+0x54>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d00a      	beq.n	8006da2 <prvTaskExitError+0x2a>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <prvTaskExitError+0x28>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60bb      	str	r3, [r7, #8]
}
 8006db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006db6:	bf00      	nop
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0fc      	beq.n	8006db8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	2000000c 	.word	0x2000000c

08006dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <pxCurrentTCBConst2>)
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	6808      	ldr	r0, [r1, #0]
 8006dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006dda:	f380 8809 	msr	PSP, r0
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f04f 0000 	mov.w	r0, #0
 8006de6:	f380 8811 	msr	BASEPRI, r0
 8006dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8006dee:	4770      	bx	lr

08006df0 <pxCurrentTCBConst2>:
 8006df0:	20000a74 	.word	0x20000a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop

08006df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006df8:	4806      	ldr	r0, [pc, #24]	; (8006e14 <prvPortStartFirstTask+0x1c>)
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	6800      	ldr	r0, [r0, #0]
 8006dfe:	f380 8808 	msr	MSP, r0
 8006e02:	b662      	cpsie	i
 8006e04:	b661      	cpsie	f
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	df00      	svc	0
 8006e10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e12:	bf00      	nop
 8006e14:	e000ed08 	.word	0xe000ed08

08006e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e1e:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <xPortStartScheduler+0xd0>)
 8006e20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	22ff      	movs	r2, #255	; 0xff
 8006e2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <xPortStartScheduler+0xd4>)
 8006e44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e46:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e48:	2207      	movs	r2, #7
 8006e4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4c:	e009      	b.n	8006e62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e4e:	4b28      	ldr	r3, [pc, #160]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d0ef      	beq.n	8006e4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1c3 0307 	rsb	r3, r3, #7
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d00a      	beq.n	8006e90 <xPortStartScheduler+0x78>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	60bb      	str	r3, [r7, #8]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <xPortStartScheduler+0xd8>)
 8006ea4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <xPortStartScheduler+0xdc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <xPortStartScheduler+0xdc>)
 8006eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <xPortStartScheduler+0xdc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a0d      	ldr	r2, [pc, #52]	; (8006ef4 <xPortStartScheduler+0xdc>)
 8006ec0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ec4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ec6:	f000 f8b9 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eca:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <xPortStartScheduler+0xe0>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ed0:	f7ff ff92 	bl	8006df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ed4:	f7ff f8b8 	bl	8006048 <vTaskSwitchContext>
	prvTaskExitError();
 8006ed8:	f7ff ff4e 	bl	8006d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	e000e400 	.word	0xe000e400
 8006eec:	200010a0 	.word	0x200010a0
 8006ef0:	200010a4 	.word	0x200010a4
 8006ef4:	e000ed20 	.word	0xe000ed20
 8006ef8:	2000000c 	.word	0x2000000c

08006efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	607b      	str	r3, [r7, #4]
}
 8006f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f16:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <vPortEnterCritical+0x58>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <vPortEnterCritical+0x58>)
 8006f1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <vPortEnterCritical+0x58>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d10f      	bne.n	8006f48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <vPortEnterCritical+0x5c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <vPortEnterCritical+0x4a>
	}
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f62:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <vPortExitCritical+0x4c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <vPortExitCritical+0x24>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	607b      	str	r3, [r7, #4]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <vPortExitCritical+0x4c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <vPortExitCritical+0x4c>)
 8006f88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <vPortExitCritical+0x4c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <vPortExitCritical+0x42>
 8006f92:	2300      	movs	r3, #0
 8006f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f383 8811 	msr	BASEPRI, r3
}
 8006f9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	00000000 	.word	0x00000000

08006fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fb0:	f3ef 8009 	mrs	r0, PSP
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <pxCurrentTCBConst>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fc0:	6010      	str	r0, [r2, #0]
 8006fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006fc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fca:	f380 8811 	msr	BASEPRI, r0
 8006fce:	f7ff f83b 	bl	8006048 <vTaskSwitchContext>
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fe6:	f380 8809 	msr	PSP, r0
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	4770      	bx	lr

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	20000a74 	.word	0x20000a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7fe ff5b 	bl	8005ecc <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <SysTick_Handler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vPortSetupTimerInterrupt+0x30>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <vPortSetupTimerInterrupt+0x38>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a09      	ldr	r2, [pc, #36]	; (8007078 <vPortSetupTimerInterrupt+0x3c>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a08      	ldr	r2, [pc, #32]	; (800707c <vPortSetupTimerInterrupt+0x40>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <vPortSetupTimerInterrupt+0x30>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	e000e010 	.word	0xe000e010
 8007070:	e000e018 	.word	0xe000e018
 8007074:	20000000 	.word	0x20000000
 8007078:	10624dd3 	.word	0x10624dd3
 800707c:	e000e014 	.word	0xe000e014

08007080 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007086:	f3ef 8305 	mrs	r3, IPSR
 800708a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b0f      	cmp	r3, #15
 8007090:	d914      	bls.n	80070bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007092:	4a16      	ldr	r2, [pc, #88]	; (80070ec <vPortValidateInterruptPriority+0x6c>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800709c:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <vPortValidateInterruptPriority+0x70>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	7afa      	ldrb	r2, [r7, #11]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d20a      	bcs.n	80070bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	607b      	str	r3, [r7, #4]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <vPortValidateInterruptPriority+0x74>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <vPortValidateInterruptPriority+0x78>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d90a      	bls.n	80070e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	603b      	str	r3, [r7, #0]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <vPortValidateInterruptPriority+0x60>
	}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr
 80070ec:	e000e3f0 	.word	0xe000e3f0
 80070f0:	200010a0 	.word	0x200010a0
 80070f4:	e000ed0c 	.word	0xe000ed0c
 80070f8:	200010a4 	.word	0x200010a4

080070fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007108:	f7fe fe26 	bl	8005d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800710c:	4b58      	ldr	r3, [pc, #352]	; (8007270 <pvPortMalloc+0x174>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007114:	f000 f910 	bl	8007338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007118:	4b56      	ldr	r3, [pc, #344]	; (8007274 <pvPortMalloc+0x178>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4013      	ands	r3, r2
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 808e 	bne.w	8007242 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01d      	beq.n	8007168 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800712c:	2208      	movs	r2, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d014      	beq.n	8007168 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f023 0307 	bic.w	r3, r3, #7
 8007144:	3308      	adds	r3, #8
 8007146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <pvPortMalloc+0x6c>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	617b      	str	r3, [r7, #20]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d069      	beq.n	8007242 <pvPortMalloc+0x146>
 800716e:	4b42      	ldr	r3, [pc, #264]	; (8007278 <pvPortMalloc+0x17c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d864      	bhi.n	8007242 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007178:	4b40      	ldr	r3, [pc, #256]	; (800727c <pvPortMalloc+0x180>)
 800717a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800717c:	4b3f      	ldr	r3, [pc, #252]	; (800727c <pvPortMalloc+0x180>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007182:	e004      	b.n	800718e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d903      	bls.n	80071a0 <pvPortMalloc+0xa4>
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f1      	bne.n	8007184 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071a0:	4b33      	ldr	r3, [pc, #204]	; (8007270 <pvPortMalloc+0x174>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d04b      	beq.n	8007242 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2208      	movs	r2, #8
 80071b0:	4413      	add	r3, r2
 80071b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	2308      	movs	r3, #8
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d91f      	bls.n	800720c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <pvPortMalloc+0xf8>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	613b      	str	r3, [r7, #16]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007206:	69b8      	ldr	r0, [r7, #24]
 8007208:	f000 f8f8 	bl	80073fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <pvPortMalloc+0x17c>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <pvPortMalloc+0x17c>)
 8007218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800721a:	4b17      	ldr	r3, [pc, #92]	; (8007278 <pvPortMalloc+0x17c>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b18      	ldr	r3, [pc, #96]	; (8007280 <pvPortMalloc+0x184>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d203      	bcs.n	800722e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <pvPortMalloc+0x17c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <pvPortMalloc+0x184>)
 800722c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <pvPortMalloc+0x178>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	431a      	orrs	r2, r3
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007242:	f7fe fd97 	bl	8005d74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <pvPortMalloc+0x16a>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <pvPortMalloc+0x168>
	return pvReturn;
 8007266:	69fb      	ldr	r3, [r7, #28]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20002244 	.word	0x20002244
 8007274:	20002250 	.word	0x20002250
 8007278:	20002248 	.word	0x20002248
 800727c:	2000223c 	.word	0x2000223c
 8007280:	2000224c 	.word	0x2000224c

08007284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d048      	beq.n	8007328 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007296:	2308      	movs	r3, #8
 8007298:	425b      	negs	r3, r3
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4413      	add	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	4b21      	ldr	r3, [pc, #132]	; (8007330 <vPortFree+0xac>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <vPortFree+0x44>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60fb      	str	r3, [r7, #12]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <vPortFree+0x62>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60bb      	str	r3, [r7, #8]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	4b11      	ldr	r3, [pc, #68]	; (8007330 <vPortFree+0xac>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d019      	beq.n	8007328 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d115      	bne.n	8007328 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <vPortFree+0xac>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	43db      	mvns	r3, r3
 8007306:	401a      	ands	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800730c:	f7fe fd24 	bl	8005d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <vPortFree+0xb0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4413      	add	r3, r2
 800731a:	4a06      	ldr	r2, [pc, #24]	; (8007334 <vPortFree+0xb0>)
 800731c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800731e:	6938      	ldr	r0, [r7, #16]
 8007320:	f000 f86c 	bl	80073fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007324:	f7fe fd26 	bl	8005d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20002250 	.word	0x20002250
 8007334:	20002248 	.word	0x20002248

08007338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800733e:	f241 1394 	movw	r3, #4500	; 0x1194
 8007342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007344:	4b27      	ldr	r3, [pc, #156]	; (80073e4 <prvHeapInit+0xac>)
 8007346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <prvHeapInit+0xac>)
 8007368:	4413      	add	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007370:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <prvHeapInit+0xb0>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007376:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <prvHeapInit+0xb0>)
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	4413      	add	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007384:	2208      	movs	r2, #8
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0307 	bic.w	r3, r3, #7
 8007392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a15      	ldr	r2, [pc, #84]	; (80073ec <prvHeapInit+0xb4>)
 8007398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <prvHeapInit+0xb4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <prvHeapInit+0xb4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <prvHeapInit+0xb4>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <prvHeapInit+0xb8>)
 80073c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <prvHeapInit+0xbc>)
 80073ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <prvHeapInit+0xc0>)
 80073d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073d6:	601a      	str	r2, [r3, #0]
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	200010a8 	.word	0x200010a8
 80073e8:	2000223c 	.word	0x2000223c
 80073ec:	20002244 	.word	0x20002244
 80073f0:	2000224c 	.word	0x2000224c
 80073f4:	20002248 	.word	0x20002248
 80073f8:	20002250 	.word	0x20002250

080073fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007404:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <prvInsertBlockIntoFreeList+0xa8>)
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e002      	b.n	8007410 <prvInsertBlockIntoFreeList+0x14>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	429a      	cmp	r2, r3
 8007418:	d8f7      	bhi.n	800740a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4413      	add	r3, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d108      	bne.n	800743e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	441a      	add	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	441a      	add	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d118      	bne.n	8007484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <prvInsertBlockIntoFreeList+0xac>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d00d      	beq.n	800747a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	441a      	add	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e008      	b.n	800748c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <prvInsertBlockIntoFreeList+0xac>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e003      	b.n	800748c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d002      	beq.n	800749a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	2000223c 	.word	0x2000223c
 80074a8:	20002244 	.word	0x20002244

080074ac <memset>:
 80074ac:	4603      	mov	r3, r0
 80074ae:	4402      	add	r2, r0
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d100      	bne.n	80074b6 <memset+0xa>
 80074b4:	4770      	bx	lr
 80074b6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ba:	e7f9      	b.n	80074b0 <memset+0x4>

080074bc <_reclaim_reent>:
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <_reclaim_reent+0xa8>)
 80074be:	b570      	push	{r4, r5, r6, lr}
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4604      	mov	r4, r0
 80074c4:	4283      	cmp	r3, r0
 80074c6:	d04b      	beq.n	8007560 <_reclaim_reent+0xa4>
 80074c8:	69c3      	ldr	r3, [r0, #28]
 80074ca:	b143      	cbz	r3, 80074de <_reclaim_reent+0x22>
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d144      	bne.n	800755c <_reclaim_reent+0xa0>
 80074d2:	69e3      	ldr	r3, [r4, #28]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	b111      	cbz	r1, 80074de <_reclaim_reent+0x22>
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 f879 	bl	80075d0 <_free_r>
 80074de:	6961      	ldr	r1, [r4, #20]
 80074e0:	b111      	cbz	r1, 80074e8 <_reclaim_reent+0x2c>
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 f874 	bl	80075d0 <_free_r>
 80074e8:	69e1      	ldr	r1, [r4, #28]
 80074ea:	b111      	cbz	r1, 80074f2 <_reclaim_reent+0x36>
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f86f 	bl	80075d0 <_free_r>
 80074f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074f4:	b111      	cbz	r1, 80074fc <_reclaim_reent+0x40>
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 f86a 	bl	80075d0 <_free_r>
 80074fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fe:	b111      	cbz	r1, 8007506 <_reclaim_reent+0x4a>
 8007500:	4620      	mov	r0, r4
 8007502:	f000 f865 	bl	80075d0 <_free_r>
 8007506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007508:	b111      	cbz	r1, 8007510 <_reclaim_reent+0x54>
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f860 	bl	80075d0 <_free_r>
 8007510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007512:	b111      	cbz	r1, 800751a <_reclaim_reent+0x5e>
 8007514:	4620      	mov	r0, r4
 8007516:	f000 f85b 	bl	80075d0 <_free_r>
 800751a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800751c:	b111      	cbz	r1, 8007524 <_reclaim_reent+0x68>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f856 	bl	80075d0 <_free_r>
 8007524:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007526:	b111      	cbz	r1, 800752e <_reclaim_reent+0x72>
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f851 	bl	80075d0 <_free_r>
 800752e:	6a23      	ldr	r3, [r4, #32]
 8007530:	b1b3      	cbz	r3, 8007560 <_reclaim_reent+0xa4>
 8007532:	4620      	mov	r0, r4
 8007534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007538:	4718      	bx	r3
 800753a:	5949      	ldr	r1, [r1, r5]
 800753c:	b941      	cbnz	r1, 8007550 <_reclaim_reent+0x94>
 800753e:	3504      	adds	r5, #4
 8007540:	69e3      	ldr	r3, [r4, #28]
 8007542:	2d80      	cmp	r5, #128	; 0x80
 8007544:	68d9      	ldr	r1, [r3, #12]
 8007546:	d1f8      	bne.n	800753a <_reclaim_reent+0x7e>
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f841 	bl	80075d0 <_free_r>
 800754e:	e7c0      	b.n	80074d2 <_reclaim_reent+0x16>
 8007550:	680e      	ldr	r6, [r1, #0]
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f83c 	bl	80075d0 <_free_r>
 8007558:	4631      	mov	r1, r6
 800755a:	e7ef      	b.n	800753c <_reclaim_reent+0x80>
 800755c:	2500      	movs	r5, #0
 800755e:	e7ef      	b.n	8007540 <_reclaim_reent+0x84>
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	bf00      	nop
 8007564:	2000005c 	.word	0x2000005c

08007568 <__libc_init_array>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	2600      	movs	r6, #0
 800756c:	4d0c      	ldr	r5, [pc, #48]	; (80075a0 <__libc_init_array+0x38>)
 800756e:	4c0d      	ldr	r4, [pc, #52]	; (80075a4 <__libc_init_array+0x3c>)
 8007570:	1b64      	subs	r4, r4, r5
 8007572:	10a4      	asrs	r4, r4, #2
 8007574:	42a6      	cmp	r6, r4
 8007576:	d109      	bne.n	800758c <__libc_init_array+0x24>
 8007578:	f000 f87e 	bl	8007678 <_init>
 800757c:	2600      	movs	r6, #0
 800757e:	4d0a      	ldr	r5, [pc, #40]	; (80075a8 <__libc_init_array+0x40>)
 8007580:	4c0a      	ldr	r4, [pc, #40]	; (80075ac <__libc_init_array+0x44>)
 8007582:	1b64      	subs	r4, r4, r5
 8007584:	10a4      	asrs	r4, r4, #2
 8007586:	42a6      	cmp	r6, r4
 8007588:	d105      	bne.n	8007596 <__libc_init_array+0x2e>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007590:	4798      	blx	r3
 8007592:	3601      	adds	r6, #1
 8007594:	e7ee      	b.n	8007574 <__libc_init_array+0xc>
 8007596:	f855 3b04 	ldr.w	r3, [r5], #4
 800759a:	4798      	blx	r3
 800759c:	3601      	adds	r6, #1
 800759e:	e7f2      	b.n	8007586 <__libc_init_array+0x1e>
 80075a0:	080077e4 	.word	0x080077e4
 80075a4:	080077e4 	.word	0x080077e4
 80075a8:	080077e4 	.word	0x080077e4
 80075ac:	080077e8 	.word	0x080077e8

080075b0 <__retarget_lock_acquire_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <__retarget_lock_release_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <memcpy>:
 80075b4:	440a      	add	r2, r1
 80075b6:	4291      	cmp	r1, r2
 80075b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075bc:	d100      	bne.n	80075c0 <memcpy+0xc>
 80075be:	4770      	bx	lr
 80075c0:	b510      	push	{r4, lr}
 80075c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c6:	4291      	cmp	r1, r2
 80075c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075cc:	d1f9      	bne.n	80075c2 <memcpy+0xe>
 80075ce:	bd10      	pop	{r4, pc}

080075d0 <_free_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d040      	beq.n	800765a <_free_r+0x8a>
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f0c      	subs	r4, r1, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	18e4      	addlt	r4, r4, r3
 80075e4:	f000 f83c 	bl	8007660 <__malloc_lock>
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <_free_r+0x8c>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	b933      	cbnz	r3, 80075fc <_free_r+0x2c>
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	4628      	mov	r0, r5
 80075f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f8:	f000 b838 	b.w	800766c <__malloc_unlock>
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x42>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	bf01      	itttt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	e7ed      	b.n	80075ee <_free_r+0x1e>
 8007612:	461a      	mov	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b10b      	cbz	r3, 800761c <_free_r+0x4c>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d9fa      	bls.n	8007612 <_free_r+0x42>
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	1850      	adds	r0, r2, r1
 8007620:	42a0      	cmp	r0, r4
 8007622:	d10b      	bne.n	800763c <_free_r+0x6c>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	4401      	add	r1, r0
 8007628:	1850      	adds	r0, r2, r1
 800762a:	4283      	cmp	r3, r0
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	d1e0      	bne.n	80075f2 <_free_r+0x22>
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4408      	add	r0, r1
 8007636:	6010      	str	r0, [r2, #0]
 8007638:	6053      	str	r3, [r2, #4]
 800763a:	e7da      	b.n	80075f2 <_free_r+0x22>
 800763c:	d902      	bls.n	8007644 <_free_r+0x74>
 800763e:	230c      	movs	r3, #12
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	e7d6      	b.n	80075f2 <_free_r+0x22>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf01      	itttt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	1809      	addeq	r1, r1, r0
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	6054      	str	r4, [r2, #4]
 8007658:	e7cb      	b.n	80075f2 <_free_r+0x22>
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20002390 	.word	0x20002390

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__malloc_lock+0x8>)
 8007662:	f7ff bfa5 	b.w	80075b0 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	2000238c 	.word	0x2000238c

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__malloc_unlock+0x8>)
 800766e:	f7ff bfa0 	b.w	80075b2 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	2000238c 	.word	0x2000238c

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
