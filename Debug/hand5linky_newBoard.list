
hand5linky_newBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a36c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800a480  0800a480  0001a480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a668  0800a668  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a668  0800a668  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a668  0800a668  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a670  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bb8  20000078  0800a6e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c30  0800a6e8  00023c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1f7  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048fc  00000000  00000000  0003b2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011eb  00000000  00000000  00041360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e7  00000000  00000000  0004254b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcc7  00000000  00000000  0005af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846ae  00000000  00000000  00076bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006840  00000000  00000000  000fb2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00101ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a464 	.word	0x0800a464

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800a464 	.word	0x0800a464

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d801      	bhi.n	8000f4e <jsmn_alloc_token+0x1a>
    return NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e014      	b.n	8000f78 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	1c59      	adds	r1, r3, #1
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	6051      	str	r1, [r2, #4]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000f76:	697b      	ldr	r3, [r7, #20]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	7afa      	ldrb	r2, [r7, #11]
 8000f96:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000fc8:	e03f      	b.n	800104a <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b7d      	cmp	r3, #125	; 0x7d
 8000fd6:	d045      	beq.n	8001064 <jsmn_parse_primitive+0xb0>
 8000fd8:	2b7d      	cmp	r3, #125	; 0x7d
 8000fda:	dc1c      	bgt.n	8001016 <jsmn_parse_primitive+0x62>
 8000fdc:	2b5d      	cmp	r3, #93	; 0x5d
 8000fde:	d041      	beq.n	8001064 <jsmn_parse_primitive+0xb0>
 8000fe0:	2b5d      	cmp	r3, #93	; 0x5d
 8000fe2:	dc18      	bgt.n	8001016 <jsmn_parse_primitive+0x62>
 8000fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8000fe6:	dc16      	bgt.n	8001016 <jsmn_parse_primitive+0x62>
 8000fe8:	2b20      	cmp	r3, #32
 8000fea:	da04      	bge.n	8000ff6 <jsmn_parse_primitive+0x42>
 8000fec:	2b0a      	cmp	r3, #10
 8000fee:	dc10      	bgt.n	8001012 <jsmn_parse_primitive+0x5e>
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	da37      	bge.n	8001064 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000ff4:	e00f      	b.n	8001016 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8000ff6:	3b20      	subs	r3, #32
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <jsmn_parse_primitive+0x10c>)
 8000ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d129      	bne.n	8001064 <jsmn_parse_primitive+0xb0>
      break;
 8001010:	e001      	b.n	8001016 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001012:	2b0d      	cmp	r3, #13
 8001014:	d026      	beq.n	8001064 <jsmn_parse_primitive+0xb0>
      break;
 8001016:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b1f      	cmp	r3, #31
 8001024:	d906      	bls.n	8001034 <jsmn_parse_primitive+0x80>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b7e      	cmp	r3, #126	; 0x7e
 8001032:	d905      	bls.n	8001040 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 800103a:	f06f 0301 	mvn.w	r3, #1
 800103e:	e03a      	b.n	80010b6 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d909      	bls.n	8001068 <jsmn_parse_primitive+0xb4>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1b3      	bne.n	8000fca <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8001062:	e001      	b.n	8001068 <jsmn_parse_primitive+0xb4>
      goto found;
 8001064:	bf00      	nop
 8001066:	e000      	b.n	800106a <jsmn_parse_primitive+0xb6>
found:
 8001068:	bf00      	nop
  if (tokens == NULL) {
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <jsmn_parse_primitive+0xca>
    parser->pos--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]
    return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e01b      	b.n	80010b6 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 800107e:	6a3a      	ldr	r2, [r7, #32]
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff ff56 	bl	8000f34 <jsmn_alloc_token>
 8001088:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e00c      	b.n	80010b6 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2108      	movs	r1, #8
 80010a4:	6938      	ldr	r0, [r7, #16]
 80010a6:	f7ff ff6c 	bl	8000f82 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	601a      	str	r2, [r3, #0]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	04001001 	.word	0x04001001

080010c4 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80010e2:	e0ba      	b.n	800125a <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b22      	cmp	r3, #34	; 0x22
 80010f4:	d11d      	bne.n	8001132 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <jsmn_parse_string+0x3c>
        return 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e0be      	b.n	800127e <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ff15 	bl	8000f34 <jsmn_alloc_token>
 800110a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	e0af      	b.n	800127e <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2104      	movs	r1, #4
 8001128:	6938      	ldr	r0, [r7, #16]
 800112a:	f7ff ff2a 	bl	8000f82 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e0a5      	b.n	800127e <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b5c      	cmp	r3, #92	; 0x5c
 8001136:	f040 808b 	bne.w	8001250 <jsmn_parse_string+0x18c>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	f240 8084 	bls.w	8001250 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b75      	cmp	r3, #117	; 0x75
 800115e:	dc70      	bgt.n	8001242 <jsmn_parse_string+0x17e>
 8001160:	2b5c      	cmp	r3, #92	; 0x5c
 8001162:	da04      	bge.n	800116e <jsmn_parse_string+0xaa>
 8001164:	2b22      	cmp	r3, #34	; 0x22
 8001166:	d072      	beq.n	800124e <jsmn_parse_string+0x18a>
 8001168:	2b2f      	cmp	r3, #47	; 0x2f
 800116a:	d070      	beq.n	800124e <jsmn_parse_string+0x18a>
 800116c:	e069      	b.n	8001242 <jsmn_parse_string+0x17e>
 800116e:	3b5c      	subs	r3, #92	; 0x5c
 8001170:	2201      	movs	r2, #1
 8001172:	409a      	lsls	r2, r3
 8001174:	4b44      	ldr	r3, [pc, #272]	; (8001288 <jsmn_parse_string+0x1c4>)
 8001176:	4013      	ands	r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf14      	ite	ne
 800117c:	2301      	movne	r3, #1
 800117e:	2300      	moveq	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d163      	bne.n	800124e <jsmn_parse_string+0x18a>
 8001186:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d054      	beq.n	8001242 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e037      	b.n	8001218 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b2f      	cmp	r3, #47	; 0x2f
 80011b4:	d906      	bls.n	80011c4 <jsmn_parse_string+0x100>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b39      	cmp	r3, #57	; 0x39
 80011c2:	d921      	bls.n	8001208 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011ce:	2b40      	cmp	r3, #64	; 0x40
 80011d0:	d906      	bls.n	80011e0 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b46      	cmp	r3, #70	; 0x46
 80011de:	d913      	bls.n	8001208 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011ea:	2b60      	cmp	r3, #96	; 0x60
 80011ec:	d906      	bls.n	80011fc <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b66      	cmp	r3, #102	; 0x66
 80011fa:	d905      	bls.n	8001208 <jsmn_parse_string+0x144>
            parser->pos = start;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001202:	f06f 0301 	mvn.w	r3, #1
 8001206:	e03a      	b.n	800127e <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]
             i++) {
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b03      	cmp	r3, #3
 800121c:	dc0b      	bgt.n	8001236 <jsmn_parse_string+0x172>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d906      	bls.n	8001236 <jsmn_parse_string+0x172>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1b8      	bne.n	80011a8 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1e5a      	subs	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]
        break;
 8001240:	e006      	b.n	8001250 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001248:	f06f 0301 	mvn.w	r3, #1
 800124c:	e017      	b.n	800127e <jsmn_parse_string+0x1ba>
        break;
 800124e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	d907      	bls.n	8001274 <jsmn_parse_string+0x1b0>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f47f af38 	bne.w	80010e4 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 800127a:	f06f 0302 	mvn.w	r3, #2
}
 800127e:	4618      	mov	r0, r3
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	01440441 	.word	0x01440441

0800128c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80012a0:	e176      	b.n	8001590 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	2b7d      	cmp	r3, #125	; 0x7d
 80012b2:	d06c      	beq.n	800138e <jsmn_parse+0x102>
 80012b4:	2b7d      	cmp	r3, #125	; 0x7d
 80012b6:	f300 8136 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012ba:	2b7b      	cmp	r3, #123	; 0x7b
 80012bc:	d030      	beq.n	8001320 <jsmn_parse+0x94>
 80012be:	2b7b      	cmp	r3, #123	; 0x7b
 80012c0:	f300 8131 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012c4:	2b5d      	cmp	r3, #93	; 0x5d
 80012c6:	d062      	beq.n	800138e <jsmn_parse+0x102>
 80012c8:	2b5d      	cmp	r3, #93	; 0x5d
 80012ca:	f300 812c 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012ce:	2b5b      	cmp	r3, #91	; 0x5b
 80012d0:	d026      	beq.n	8001320 <jsmn_parse+0x94>
 80012d2:	2b5b      	cmp	r3, #91	; 0x5b
 80012d4:	f300 8127 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012d8:	2b3a      	cmp	r3, #58	; 0x3a
 80012da:	f000 80d6 	beq.w	800148a <jsmn_parse+0x1fe>
 80012de:	2b3a      	cmp	r3, #58	; 0x3a
 80012e0:	f300 8121 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012e4:	2b2c      	cmp	r3, #44	; 0x2c
 80012e6:	f000 80d7 	beq.w	8001498 <jsmn_parse+0x20c>
 80012ea:	2b2c      	cmp	r3, #44	; 0x2c
 80012ec:	f300 811b 	bgt.w	8001526 <jsmn_parse+0x29a>
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	dc11      	bgt.n	8001318 <jsmn_parse+0x8c>
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	f2c0 8116 	blt.w	8001526 <jsmn_parse+0x29a>
 80012fa:	3b09      	subs	r3, #9
 80012fc:	4a91      	ldr	r2, [pc, #580]	; (8001544 <jsmn_parse+0x2b8>)
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 812d 	bne.w	8001570 <jsmn_parse+0x2e4>
 8001316:	e106      	b.n	8001526 <jsmn_parse+0x29a>
 8001318:	2b22      	cmp	r3, #34	; 0x22
 800131a:	f000 8092 	beq.w	8001442 <jsmn_parse+0x1b6>
 800131e:	e102      	b.n	8001526 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	3301      	adds	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8123 	beq.w	8001574 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800132e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff fdfe 	bl	8000f34 <jsmn_alloc_token>
 8001338:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	e153      	b.n	80015ee <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134e:	d00a      	beq.n	8001366 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	2b7b      	cmp	r3, #123	; 0x7b
 800136a:	d101      	bne.n	8001370 <jsmn_parse+0xe4>
 800136c:	2201      	movs	r2, #1
 800136e:	e000      	b.n	8001372 <jsmn_parse+0xe6>
 8001370:	2202      	movs	r2, #2
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	3b01      	subs	r3, #1
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	609a      	str	r2, [r3, #8]
      break;
 800138c:	e0fb      	b.n	8001586 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80f1 	beq.w	8001578 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	2b7d      	cmp	r3, #125	; 0x7d
 800139a:	d101      	bne.n	80013a0 <jsmn_parse+0x114>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <jsmn_parse+0x116>
 80013a0:	2302      	movs	r3, #2
 80013a2:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	e024      	b.n	80013f8 <jsmn_parse+0x16c>
        token = &tokens[i];
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d017      	beq.n	80013f2 <jsmn_parse+0x166>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ca:	d112      	bne.n	80013f2 <jsmn_parse+0x166>
          if (token->type != type) {
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	7fba      	ldrb	r2, [r7, #30]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d002      	beq.n	80013dc <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 80013d6:	f06f 0301 	mvn.w	r3, #1
 80013da:	e108      	b.n	80015ee <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	461a      	mov	r2, r3
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	609a      	str	r2, [r3, #8]
          break;
 80013f0:	e005      	b.n	80013fe <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3b01      	subs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dad7      	bge.n	80013ae <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d119      	bne.n	800143a <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 8001406:	f06f 0301 	mvn.w	r3, #1
 800140a:	e0f0      	b.n	80015ee <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4413      	add	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141e:	d009      	beq.n	8001434 <jsmn_parse+0x1a8>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d104      	bne.n	8001434 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	609a      	str	r2, [r3, #8]
          break;
 8001430:	bf00      	nop
        }
      }
#endif
      break;
 8001432:	e0a8      	b.n	8001586 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	3b01      	subs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	dae5      	bge.n	800140c <jsmn_parse+0x180>
      break;
 8001440:	e0a1      	b.n	8001586 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff fe39 	bl	80010c4 <jsmn_parse_string>
 8001452:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da01      	bge.n	800145e <jsmn_parse+0x1d2>
        return r;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	e0c7      	b.n	80015ee <jsmn_parse+0x362>
      }
      count++;
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	3301      	adds	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	f000 8086 	beq.w	800157c <jsmn_parse+0x2f0>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8082 	beq.w	800157c <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	3201      	adds	r2, #1
 8001486:	60da      	str	r2, [r3, #12]
      }
      break;
 8001488:	e078      	b.n	800157c <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	609a      	str	r2, [r3, #8]
      break;
 8001496:	e076      	b.n	8001586 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d070      	beq.n	8001580 <jsmn_parse+0x2f4>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a6:	d06b      	beq.n	8001580 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d063      	beq.n	8001580 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d05b      	beq.n	8001580 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
 80014d0:	e025      	b.n	800151e <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d006      	beq.n	80014ee <jsmn_parse+0x262>
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d114      	bne.n	8001518 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d00c      	beq.n	8001518 <jsmn_parse+0x28c>
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d104      	bne.n	8001518 <jsmn_parse+0x28c>
              parser->toksuper = i;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001512:	609a      	str	r2, [r3, #8]
              break;
 8001514:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001516:	e033      	b.n	8001580 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	3b01      	subs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	dad6      	bge.n	80014d2 <jsmn_parse+0x246>
      break;
 8001524:	e02c      	b.n	8001580 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fd3f 	bl	8000fb4 <jsmn_parse_primitive>
 8001536:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da04      	bge.n	8001548 <jsmn_parse+0x2bc>
        return r;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	e055      	b.n	80015ee <jsmn_parse+0x362>
 8001542:	bf00      	nop
 8001544:	00800013 	.word	0x00800013
      }
      count++;
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	3301      	adds	r3, #1
 800154c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d015      	beq.n	8001584 <jsmn_parse+0x2f8>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	3201      	adds	r2, #1
 800156c:	60da      	str	r2, [r3, #12]
      }
      break;
 800156e:	e009      	b.n	8001584 <jsmn_parse+0x2f8>
      break;
 8001570:	bf00      	nop
 8001572:	e008      	b.n	8001586 <jsmn_parse+0x2fa>
        break;
 8001574:	bf00      	nop
 8001576:	e006      	b.n	8001586 <jsmn_parse+0x2fa>
        break;
 8001578:	bf00      	nop
 800157a:	e004      	b.n	8001586 <jsmn_parse+0x2fa>
      break;
 800157c:	bf00      	nop
 800157e:	e002      	b.n	8001586 <jsmn_parse+0x2fa>
      break;
 8001580:	bf00      	nop
 8001582:	e000      	b.n	8001586 <jsmn_parse+0x2fa>
      break;
 8001584:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d907      	bls.n	80015aa <jsmn_parse+0x31e>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f ae7c 	bne.w	80012a2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01d      	beq.n	80015ec <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	e015      	b.n	80015e6 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d00a      	beq.n	80015e0 <jsmn_parse+0x354>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d102      	bne.n	80015e0 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 80015da:	f06f 0302 	mvn.w	r3, #2
 80015de:	e006      	b.n	80015ee <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3b01      	subs	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dae6      	bge.n	80015ba <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop

080015f8 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 32ff 	mov.w	r2, #4294967295
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <jsoneq>:

/*
 * Function1--------------------------
 */
static int jsoneq(const char *json, jsmntok_t *tok, const char *s)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d11e      	bne.n	8001670 <jsoneq+0x52>
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7fe fd8c 	bl	8000150 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4299      	cmp	r1, r3
 8001648:	d112      	bne.n	8001670 <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1898      	adds	r0, r3, r2
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	461a      	mov	r2, r3
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f007 feeb 	bl	800943c <strncmp>
 8001666:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <jsoneq+0x52>
	{
		return 0;
 800166c:	2300      	movs	r3, #0
 800166e:	e001      	b.n	8001674 <jsoneq+0x56>
	}
	return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ProcessUartData>:
/*
 * Function2--------------------------
 */
_Bool ProcessUartData(void)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	f6ad 0d88 	subw	sp, sp, #2184	; 0x888
 8001682:	af02      	add	r7, sp, #8
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128]; /* We expect no more than 128 tokens */

	jsmn_init(&p);
 8001684:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffb5 	bl	80015f8 <jsmn_init>
	r = jsmn_parse(&p, uartRecieveBuffer, strlen(uartRecieveBuffer), t,
 800168e:	48d7      	ldr	r0, [pc, #860]	; (80019ec <ProcessUartData+0x370>)
 8001690:	f7fe fd5e 	bl	8000150 <strlen>
 8001694:	4602      	mov	r2, r0
 8001696:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800169a:	f607 0064 	addw	r0, r7, #2148	; 0x864
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	9100      	str	r1, [sp, #0]
 80016a2:	49d2      	ldr	r1, [pc, #840]	; (80019ec <ProcessUartData+0x370>)
 80016a4:	f7ff fdf2 	bl	800128c <jsmn_parse>
 80016a8:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
			sizeof(t) / sizeof(t[0]));
	if (r < 0)
 80016ac:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da01      	bge.n	80016b8 <ProcessUartData+0x3c>
	{
		//Failed to parse JSON
		return 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e389      	b.n	8001dcc <ProcessUartData+0x750>
	}

	/* Assume the top-level element is an object */
	if (r < 1 || t[0].type != JSMN_OBJECT)
 80016b8:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dd06      	ble.n	80016ce <ProcessUartData+0x52>
 80016c0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80016c4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <ProcessUartData+0x56>
	{
		//Object expected
		return 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e37c      	b.n	8001dcc <ProcessUartData+0x750>
	}

	/* Loop over all keys of the root object */
	for (i = 1; i < r; i++)
 80016d2:	2301      	movs	r3, #1
 80016d4:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 80016d8:	e343      	b.n	8001d62 <ProcessUartData+0x6e6>
	{

		if (jsoneq(uartRecieveBuffer, &t[i], "Thumb") == 0)
 80016da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016de:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	4ac2      	ldr	r2, [pc, #776]	; (80019f0 <ProcessUartData+0x374>)
 80016e8:	4619      	mov	r1, r3
 80016ea:	48c0      	ldr	r0, [pc, #768]	; (80019ec <ProcessUartData+0x370>)
 80016ec:	f7ff ff97 	bl	800161e <jsoneq>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <ProcessUartData+0x8c>
		{
			HandFinger = Thumb;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 80016fc:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001700:	3301      	adds	r3, #1
 8001702:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001706:	e327      	b.n	8001d58 <ProcessUartData+0x6dc>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Middele") == 0)
 8001708:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800170c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	4ab7      	ldr	r2, [pc, #732]	; (80019f4 <ProcessUartData+0x378>)
 8001716:	4619      	mov	r1, r3
 8001718:	48b4      	ldr	r0, [pc, #720]	; (80019ec <ProcessUartData+0x370>)
 800171a:	f7ff ff80 	bl	800161e <jsoneq>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <ProcessUartData+0xba>
		{
			HandFinger = Middle;
 8001724:	2302      	movs	r3, #2
 8001726:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 800172a:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800172e:	3301      	adds	r3, #1
 8001730:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001734:	e310      	b.n	8001d58 <ProcessUartData+0x6dc>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Index") == 0)
 8001736:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800173a:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	4aad      	ldr	r2, [pc, #692]	; (80019f8 <ProcessUartData+0x37c>)
 8001744:	4619      	mov	r1, r3
 8001746:	48a9      	ldr	r0, [pc, #676]	; (80019ec <ProcessUartData+0x370>)
 8001748:	f7ff ff69 	bl	800161e <jsoneq>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <ProcessUartData+0xe8>
		{
			HandFinger = Index;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 8001758:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800175c:	3301      	adds	r3, #1
 800175e:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001762:	e2f9      	b.n	8001d58 <ProcessUartData+0x6dc>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Ring") == 0)
 8001764:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001768:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	4aa2      	ldr	r2, [pc, #648]	; (80019fc <ProcessUartData+0x380>)
 8001772:	4619      	mov	r1, r3
 8001774:	489d      	ldr	r0, [pc, #628]	; (80019ec <ProcessUartData+0x370>)
 8001776:	f7ff ff52 	bl	800161e <jsoneq>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d108      	bne.n	8001792 <ProcessUartData+0x116>
		{
			HandFinger = Ring;
 8001780:	2303      	movs	r3, #3
 8001782:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 8001786:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800178a:	3301      	adds	r3, #1
 800178c:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001790:	e2e2      	b.n	8001d58 <ProcessUartData+0x6dc>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Pinky") == 0)
 8001792:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001796:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	4a98      	ldr	r2, [pc, #608]	; (8001a00 <ProcessUartData+0x384>)
 80017a0:	4619      	mov	r1, r3
 80017a2:	4892      	ldr	r0, [pc, #584]	; (80019ec <ProcessUartData+0x370>)
 80017a4:	f7ff ff3b 	bl	800161e <jsoneq>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <ProcessUartData+0x144>
		{
			HandFinger = Pinky;
 80017ae:	2304      	movs	r3, #4
 80017b0:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 80017b4:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 80017be:	e2cb      	b.n	8001d58 <ProcessUartData+0x6dc>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Value") == 0)
 80017c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017c4:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	4a8d      	ldr	r2, [pc, #564]	; (8001a04 <ProcessUartData+0x388>)
 80017ce:	4619      	mov	r1, r3
 80017d0:	4886      	ldr	r0, [pc, #536]	; (80019ec <ProcessUartData+0x370>)
 80017d2:	f7ff ff24 	bl	800161e <jsoneq>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 82bd 	bne.w	8001d58 <ProcessUartData+0x6dc>
		{
			char FingerValue[100] = {0,};
 80017de:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017e2:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	2260      	movs	r2, #96	; 0x60
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f007 fe1b 	bl	800942c <memset>
			strncpy(FingerValue, uartRecieveBuffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 80017f6:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80017fa:	3301      	adds	r3, #1
 80017fc:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001800:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	3304      	adds	r3, #4
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b77      	ldr	r3, [pc, #476]	; (80019ec <ProcessUartData+0x370>)
 8001810:	18d0      	adds	r0, r2, r3
 8001812:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001816:	3301      	adds	r3, #1
 8001818:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800181c:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	3308      	adds	r3, #8
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800182c:	3301      	adds	r3, #1
 800182e:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001832:	f6a1 011c 	subw	r1, r1, #2076	; 0x81c
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	440b      	add	r3, r1
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	461a      	mov	r2, r3
 8001842:	463b      	mov	r3, r7
 8001844:	4601      	mov	r1, r0
 8001846:	4618      	mov	r0, r3
 8001848:	f007 fe0a 	bl	8009460 <strncpy>
			i++;
 800184c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
			HandStruct[HandFinger]=0;
 8001856:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 800185a:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <ProcessUartData+0x38c>)
 800185c:	2100      	movs	r1, #0
 800185e:	54d1      	strb	r1, [r2, r3]
			for (int counter = 0; counter < strlen(FingerValue); counter++)
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001866:	e26d      	b.n	8001d44 <ProcessUartData+0x6c8>
			{
				switch (FingerValue[counter]) {
 8001868:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800186c:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 8001870:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	3b30      	subs	r3, #48	; 0x30
 800187a:	2b09      	cmp	r3, #9
 800187c:	f200 825c 	bhi.w	8001d38 <ProcessUartData+0x6bc>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <ProcessUartData+0x20c>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	080018b1 	.word	0x080018b1
 800188c:	08001921 	.word	0x08001921
 8001890:	08001981 	.word	0x08001981
 8001894:	08001a11 	.word	0x08001a11
 8001898:	08001a7f 	.word	0x08001a7f
 800189c:	08001aed 	.word	0x08001aed
 80018a0:	08001b5b 	.word	0x08001b5b
 80018a4:	08001bc9 	.word	0x08001bc9
 80018a8:	08001c37 	.word	0x08001c37
 80018ac:	08001ca5 	.word	0x08001ca5
				case '0':
					HandStruct[HandFinger] += 0 * pow(10,(strlen(FingerValue) - (counter+1)));
 80018b0:	463b      	mov	r3, r7
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fc4c 	bl	8000150 <strlen>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fd8e 	bl	80003e4 <__aeabi_ui2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	494e      	ldr	r1, [pc, #312]	; (8001a0c <ProcessUartData+0x390>)
 80018d2:	f007 febd 	bl	8009650 <pow>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f7fe fdfb 	bl	80004d8 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <ProcessUartData+0x38c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd85 	bl	8000404 <__aeabi_i2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fc33 	bl	800016c <__adddf3>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f891 	bl	8000a38 <__aeabi_d2uiz>
 8001916:	4603      	mov	r3, r0
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <ProcessUartData+0x38c>)
 800191c:	551a      	strb	r2, [r3, r4]

					break;
 800191e:	e20c      	b.n	8001d3a <ProcessUartData+0x6be>
				case '1':
					HandStruct[HandFinger] += 1 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc14 	bl	8000150 <strlen>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fd56 	bl	80003e4 <__aeabi_ui2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	4932      	ldr	r1, [pc, #200]	; (8001a0c <ProcessUartData+0x390>)
 8001942:	f007 fe85 	bl	8009650 <pow>
 8001946:	4604      	mov	r4, r0
 8001948:	460d      	mov	r5, r1
 800194a:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <ProcessUartData+0x38c>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fd55 	bl	8000404 <__aeabi_i2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fc03 	bl	800016c <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f861 	bl	8000a38 <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <ProcessUartData+0x38c>)
 800197c:	551a      	strb	r2, [r3, r4]

					break;
 800197e:	e1dc      	b.n	8001d3a <ProcessUartData+0x6be>
				case '2':
					HandStruct[HandFinger] += 2 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001980:	463b      	mov	r3, r7
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fbe4 	bl	8000150 <strlen>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd26 	bl	80003e4 <__aeabi_ui2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	f04f 0000 	mov.w	r0, #0
 80019a0:	491a      	ldr	r1, [pc, #104]	; (8001a0c <ProcessUartData+0x390>)
 80019a2:	f007 fe55 	bl	8009650 <pow>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	f7fe fbdf 	bl	800016c <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
 80019b6:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <ProcessUartData+0x38c>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd1f 	bl	8000404 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe fbcd 	bl	800016c <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f82b 	bl	8000a38 <__aeabi_d2uiz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <ProcessUartData+0x38c>)
 80019e8:	551a      	strb	r2, [r3, r4]

					break;
 80019ea:	e1a6      	b.n	8001d3a <ProcessUartData+0x6be>
 80019ec:	20000098 	.word	0x20000098
 80019f0:	0800a480 	.word	0x0800a480
 80019f4:	0800a488 	.word	0x0800a488
 80019f8:	0800a490 	.word	0x0800a490
 80019fc:	0800a498 	.word	0x0800a498
 8001a00:	0800a4a0 	.word	0x0800a4a0
 8001a04:	0800a4a8 	.word	0x0800a4a8
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	40240000 	.word	0x40240000
				case '3':
					HandStruct[HandFinger] += 3 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001a10:	463b      	mov	r3, r7
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fb9c 	bl	8000150 <strlen>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fcde 	bl	80003e4 <__aeabi_ui2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	f04f 0000 	mov.w	r0, #0
 8001a30:	49b8      	ldr	r1, [pc, #736]	; (8001d14 <ProcessUartData+0x698>)
 8001a32:	f007 fe0d 	bl	8009650 <pow>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4bb7      	ldr	r3, [pc, #732]	; (8001d18 <ProcessUartData+0x69c>)
 8001a3c:	f7fe fd4c 	bl	80004d8 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4614      	mov	r4, r2
 8001a46:	461d      	mov	r5, r3
 8001a48:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001a4c:	4ab3      	ldr	r2, [pc, #716]	; (8001d1c <ProcessUartData+0x6a0>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fcd6 	bl	8000404 <__aeabi_i2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fb84 	bl	800016c <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7fe ffe2 	bl	8000a38 <__aeabi_d2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <ProcessUartData+0x6a0>)
 8001a7a:	551a      	strb	r2, [r3, r4]

					break;
 8001a7c:	e15d      	b.n	8001d3a <ProcessUartData+0x6be>
				case '4':
					HandStruct[HandFinger]+= 4 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fb65 	bl	8000150 <strlen>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fca7 	bl	80003e4 <__aeabi_ui2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	499d      	ldr	r1, [pc, #628]	; (8001d14 <ProcessUartData+0x698>)
 8001aa0:	f007 fdd6 	bl	8009650 <pow>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <ProcessUartData+0x6a4>)
 8001aaa:	f7fe fd15 	bl	80004d8 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001aba:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <ProcessUartData+0x6a0>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fc9f 	bl	8000404 <__aeabi_i2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fb4d 	bl	800016c <__adddf3>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ffab 	bl	8000a38 <__aeabi_d2uiz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	; (8001d1c <ProcessUartData+0x6a0>)
 8001ae8:	551a      	strb	r2, [r3, r4]

					break;
 8001aea:	e126      	b.n	8001d3a <ProcessUartData+0x6be>
				case '5':
					HandStruct[HandFinger]+= 5 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001aec:	463b      	mov	r3, r7
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb2e 	bl	8000150 <strlen>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc70 	bl	80003e4 <__aeabi_ui2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	4981      	ldr	r1, [pc, #516]	; (8001d14 <ProcessUartData+0x698>)
 8001b0e:	f007 fd9f 	bl	8009650 <pow>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <ProcessUartData+0x6a8>)
 8001b18:	f7fe fcde 	bl	80004d8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001b28:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <ProcessUartData+0x6a0>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fc68 	bl	8000404 <__aeabi_i2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fb16 	bl	800016c <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7fe ff74 	bl	8000a38 <__aeabi_d2uiz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <ProcessUartData+0x6a0>)
 8001b56:	551a      	strb	r2, [r3, r4]

					break;
 8001b58:	e0ef      	b.n	8001d3a <ProcessUartData+0x6be>
				case '6':
					HandStruct[HandFinger]+= 6 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe faf7 	bl	8000150 <strlen>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc39 	bl	80003e4 <__aeabi_ui2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	4966      	ldr	r1, [pc, #408]	; (8001d14 <ProcessUartData+0x698>)
 8001b7c:	f007 fd68 	bl	8009650 <pow>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <ProcessUartData+0x6ac>)
 8001b86:	f7fe fca7 	bl	80004d8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4614      	mov	r4, r2
 8001b90:	461d      	mov	r5, r3
 8001b92:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001b96:	4a61      	ldr	r2, [pc, #388]	; (8001d1c <ProcessUartData+0x6a0>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc31 	bl	8000404 <__aeabi_i2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fadf 	bl	800016c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ff3d 	bl	8000a38 <__aeabi_d2uiz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <ProcessUartData+0x6a0>)
 8001bc4:	551a      	strb	r2, [r3, r4]

					break;
 8001bc6:	e0b8      	b.n	8001d3a <ProcessUartData+0x6be>
				case '7':
					HandStruct[HandFinger]+= 7 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fac0 	bl	8000150 <strlen>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc02 	bl	80003e4 <__aeabi_ui2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	494a      	ldr	r1, [pc, #296]	; (8001d14 <ProcessUartData+0x698>)
 8001bea:	f007 fd31 	bl	8009650 <pow>
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <ProcessUartData+0x6b0>)
 8001bf4:	f7fe fc70 	bl	80004d8 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001c04:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <ProcessUartData+0x6a0>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fbfa 	bl	8000404 <__aeabi_i2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe faa8 	bl	800016c <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ff06 	bl	8000a38 <__aeabi_d2uiz>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <ProcessUartData+0x6a0>)
 8001c32:	551a      	strb	r2, [r3, r4]

					break;
 8001c34:	e081      	b.n	8001d3a <ProcessUartData+0x6be>
				case '8':
					HandStruct[HandFinger]+= 8 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001c36:	463b      	mov	r3, r7
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fa89 	bl	8000150 <strlen>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fbcb 	bl	80003e4 <__aeabi_ui2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	492f      	ldr	r1, [pc, #188]	; (8001d14 <ProcessUartData+0x698>)
 8001c58:	f007 fcfa 	bl	8009650 <pow>
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <ProcessUartData+0x6b4>)
 8001c62:	f7fe fc39 	bl	80004d8 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <ProcessUartData+0x6a0>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fbc3 	bl	8000404 <__aeabi_i2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fa71 	bl	800016c <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe fecf 	bl	8000a38 <__aeabi_d2uiz>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <ProcessUartData+0x6a0>)
 8001ca0:	551a      	strb	r2, [r3, r4]

					break;
 8001ca2:	e04a      	b.n	8001d3a <ProcessUartData+0x6be>
				case '9':
					HandStruct[HandFinger]+= 9 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fa52 	bl	8000150 <strlen>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fb94 	bl	80003e4 <__aeabi_ui2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	4913      	ldr	r1, [pc, #76]	; (8001d14 <ProcessUartData+0x698>)
 8001cc6:	f007 fcc3 	bl	8009650 <pow>
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <ProcessUartData+0x6b8>)
 8001cd0:	f7fe fc02 	bl	80004d8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <ProcessUartData+0x6a0>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fb8c 	bl	8000404 <__aeabi_i2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fa3a 	bl	800016c <__adddf3>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe fe98 	bl	8000a38 <__aeabi_d2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <ProcessUartData+0x6a0>)
 8001d0e:	551a      	strb	r2, [r3, r4]

					break;
 8001d10:	e013      	b.n	8001d3a <ProcessUartData+0x6be>
 8001d12:	bf00      	nop
 8001d14:	40240000 	.word	0x40240000
 8001d18:	40080000 	.word	0x40080000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	40100000 	.word	0x40100000
 8001d24:	40140000 	.word	0x40140000
 8001d28:	40180000 	.word	0x40180000
 8001d2c:	401c0000 	.word	0x401c0000
 8001d30:	40200000 	.word	0x40200000
 8001d34:	40220000 	.word	0x40220000
				default:
					break;
 8001d38:	bf00      	nop
			for (int counter = 0; counter < strlen(FingerValue); counter++)
 8001d3a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001d44:	463b      	mov	r3, r7
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001d52:	429a      	cmp	r2, r3
 8001d54:	f63f ad88 	bhi.w	8001868 <ProcessUartData+0x1ec>
	for (i = 1; i < r; i++)
 8001d58:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001d62:	f8d7 2878 	ldr.w	r2, [r7, #2168]	; 0x878
 8001d66:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f6ff acb5 	blt.w	80016da <ProcessUartData+0x5e>
			//Unexpected key
		}
	}

	//store receive data in finger structure
	Fingers_Status.Thumb.SetPoint=HandStruct[Thumb];
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <ProcessUartData+0x75c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ff34 	bl	8000be4 <__aeabi_ui2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <ProcessUartData+0x760>)
 8001d80:	6013      	str	r3, [r2, #0]
	Fingers_Status.Index.SetPoint=HandStruct[Index];
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <ProcessUartData+0x75c>)
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe ff2b 	bl	8000be4 <__aeabi_ui2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <ProcessUartData+0x760>)
 8001d92:	6193      	str	r3, [r2, #24]
	Fingers_Status.Middle.SetPoint=HandStruct[Middle];
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <ProcessUartData+0x75c>)
 8001d96:	789b      	ldrb	r3, [r3, #2]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff22 	bl	8000be4 <__aeabi_ui2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <ProcessUartData+0x760>)
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
	Fingers_Status.Ring.SetPoint=HandStruct[Ring];
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <ProcessUartData+0x75c>)
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff19 	bl	8000be4 <__aeabi_ui2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <ProcessUartData+0x760>)
 8001db6:	6493      	str	r3, [r2, #72]	; 0x48
	Fingers_Status.Pinky.SetPoint=HandStruct[Pinky];
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <ProcessUartData+0x75c>)
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ff10 	bl	8000be4 <__aeabi_ui2f>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <ProcessUartData+0x760>)
 8001dc8:	6613      	str	r3, [r2, #96]	; 0x60
			HandStruct[counter].Value++;
		}
		printf("finger value : %d\n",HandStruct[counter].Value);
	}
	*/
	return EXIT_SUCCESS;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f507 6708 	add.w	r7, r7, #2176	; 0x880
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	200014d0 	.word	0x200014d0

08001de0 <HAL_UART_RxCpltCallback>:
/*
 * Function3--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_UART_RxCpltCallback+0x94>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d13c      	bne.n	8001e6c <HAL_UART_RxCpltCallback+0x8c>
		uartRecieveBuffer[uartCounter]=RXuart;
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_UART_RxCpltCallback+0x9c>)
 8001dfa:	7819      	ldrb	r1, [r3, #0]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_UART_RxCpltCallback+0xa0>)
 8001dfe:	5499      	strb	r1, [r3, r2]
		if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_UART_RxCpltCallback+0xa0>)
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	d123      	bne.n	8001e56 <HAL_UART_RxCpltCallback+0x76>
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_UART_RxCpltCallback+0xa0>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	2b0d      	cmp	r3, #13
 8001e1a:	d11c      	bne.n	8001e56 <HAL_UART_RxCpltCallback+0x76>
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	3b02      	subs	r3, #2
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_RxCpltCallback+0xa0>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	2b7d      	cmp	r3, #125	; 0x7d
 8001e28:	d115      	bne.n	8001e56 <HAL_UART_RxCpltCallback+0x76>
			ProcessUartData();
 8001e2a:	f7ff fc27 	bl	800167c <ProcessUartData>
			ManualControl=1;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_UART_RxCpltCallback+0xa4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
			uartCounter=-1;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3a:	801a      	strh	r2, [r3, #0]

			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]
 8001e40:	e006      	b.n	8001e50 <HAL_UART_RxCpltCallback+0x70>
				uartRecieveBuffer[cleanCounter]=0;
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_UART_RxCpltCallback+0xa0>)
 8001e46:	2100      	movs	r1, #0
 8001e48:	54d1      	strb	r1, [r2, r3]
			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	81fb      	strh	r3, [r7, #14]
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	2b95      	cmp	r3, #149	; 0x95
 8001e54:	d9f5      	bls.n	8001e42 <HAL_UART_RxCpltCallback+0x62>
		}
		uartCounter++;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_UART_RxCpltCallback+0x98>)
 8001e60:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	4905      	ldr	r1, [pc, #20]	; (8001e7c <HAL_UART_RxCpltCallback+0x9c>)
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <HAL_UART_RxCpltCallback+0xa8>)
 8001e68:	f004 fa84 	bl	8006374 <HAL_UART_Receive_IT>

	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013800 	.word	0x40013800
 8001e78:	20000094 	.word	0x20000094
 8001e7c:	2000012e 	.word	0x2000012e
 8001e80:	20000098 	.word	0x20000098
 8001e84:	20001598 	.word	0x20001598
 8001e88:	20001450 	.word	0x20001450

08001e8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001e9e:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <MX_ADC1_Init+0x78>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001eb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001eba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001eca:	f001 fea9 	bl	8003c20 <HAL_ADC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ed4:	f001 f834 	bl	8002f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_ADC1_Init+0x74>)
 8001eea:	f002 f951 	bl	8004190 <HAL_ADC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ef4:	f001 f824 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000130 	.word	0x20000130
 8001f04:	40012400 	.word	0x40012400

08001f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_ADC_MspInit+0x6c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d121      	bne.n	8001f6c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_ADC_MspInit+0x70>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Motor1_Current_Pin|Motor2_Current_Pin|Motor3_Current_Pin|Motor4_Current_Pin
 8001f58:	233f      	movs	r3, #63	; 0x3f
 8001f5a:	613b      	str	r3, [r7, #16]
                          |Motor5_Current_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_ADC_MspInit+0x74>)
 8001f68:	f002 fce8 	bl	800493c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40012400 	.word	0x40012400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010800 	.word	0x40010800

08001f80 <ADC_Select_CH0>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0 (void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <ADC_Select_CH0+0x40>)
 8001fa6:	f002 f8f3 	bl	8004190 <HAL_ADC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <ADC_Select_CH0+0x34>
	  {
	    Error_Handler();
 8001fb0:	f000 ffc6 	bl	8002f40 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001fb4:	b662      	cpsie	i
}
 8001fb6:	bf00      	nop
	  }
	  __enable_irq();
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000130 	.word	0x20000130
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 8001fcc:	f7ff ffd8 	bl	8001f80 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001fd0:	482f      	ldr	r0, [pc, #188]	; (8002090 <ADC_ReadCurrent_Pinky+0xc8>)
 8001fd2:	f001 fefd 	bl	8003dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001fd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fda:	482d      	ldr	r0, [pc, #180]	; (8002090 <ADC_ReadCurrent_Pinky+0xc8>)
 8001fdc:	f001 ffd2 	bl	8003f84 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc1);
 8001fe0:	482b      	ldr	r0, [pc, #172]	; (8002090 <ADC_ReadCurrent_Pinky+0xc8>)
 8001fe2:	f002 f8c9 	bl	8004178 <HAL_ADC_GetValue>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <ADC_ReadCurrent_Pinky+0xcc>)
 8001fea:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc1);
 8001fec:	4828      	ldr	r0, [pc, #160]	; (8002090 <ADC_ReadCurrent_Pinky+0xc8>)
 8001fee:	f001 ff9d 	bl	8003f2c <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f9f4 	bl	80003e4 <__aeabi_ui2d>
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	460d      	mov	r5, r1
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <ADC_ReadCurrent_Pinky+0xcc>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe f9ed 	bl	80003e4 <__aeabi_ui2d>
 800200a:	a31d      	add	r3, pc, #116	; (adr r3, 8002080 <ADC_ReadCurrent_Pinky+0xb8>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe fa62 	bl	80004d8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	f7fe f8a6 	bl	800016c <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	a317      	add	r3, pc, #92	; (adr r3, 8002088 <ADC_ReadCurrent_Pinky+0xc0>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fb7d 	bl	800072c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fcfd 	bl	8000a38 <__aeabi_d2uiz>
 800203e:	4603      	mov	r3, r0
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
	Current_motor[1]=Fingers_Status.Pinky.Current;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <ADC_ReadCurrent_Pinky+0xcc>)
 800204a:	6053      	str	r3, [r2, #4]
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002054:	4293      	cmp	r3, r2
 8002056:	d804      	bhi.n	8002062 <ADC_ReadCurrent_Pinky+0x9a>
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002060:	d204      	bcs.n	800206c <ADC_ReadCurrent_Pinky+0xa4>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 8002064:	2201      	movs	r2, #1
 8002066:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800206a:	e004      	b.n	8002076 <ADC_ReadCurrent_Pinky+0xae>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <ADC_ReadCurrent_Pinky+0xd0>)
 800206e:	2200      	movs	r2, #0
 8002070:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	47ae147b 	.word	0x47ae147b
 8002084:	3f847ae1 	.word	0x3f847ae1
 8002088:	c28f5c29 	.word	0xc28f5c29
 800208c:	3ff028f5 	.word	0x3ff028f5
 8002090:	20000130 	.word	0x20000130
 8002094:	20001548 	.word	0x20001548
 8002098:	200014d0 	.word	0x200014d0

0800209c <ADC_Select_CH1>:
void ADC_Select_CH1 (void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80020b4:	2303      	movs	r3, #3
 80020b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <ADC_Select_CH1+0x40>)
 80020c2:	f002 f865 	bl	8004190 <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <ADC_Select_CH1+0x34>
	  {
	    Error_Handler();
 80020cc:	f000 ff38 	bl	8002f40 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80020d0:	b662      	cpsie	i
}
 80020d2:	bf00      	nop
	  }
	  __enable_irq();
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000130 	.word	0x20000130

080020e0 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	ADC_Select_CH1();
 80020e4:	f7ff ffda 	bl	800209c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80020e8:	482f      	ldr	r0, [pc, #188]	; (80021a8 <ADC_ReadCurrent_Ring+0xc8>)
 80020ea:	f001 fe71 	bl	8003dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80020ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020f2:	482d      	ldr	r0, [pc, #180]	; (80021a8 <ADC_ReadCurrent_Ring+0xc8>)
 80020f4:	f001 ff46 	bl	8003f84 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc1);
 80020f8:	482b      	ldr	r0, [pc, #172]	; (80021a8 <ADC_ReadCurrent_Ring+0xc8>)
 80020fa:	f002 f83d 	bl	8004178 <HAL_ADC_GetValue>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a2a      	ldr	r2, [pc, #168]	; (80021ac <ADC_ReadCurrent_Ring+0xcc>)
 8002102:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc1);
 8002104:	4828      	ldr	r0, [pc, #160]	; (80021a8 <ADC_ReadCurrent_Ring+0xc8>)
 8002106:	f001 ff11 	bl	8003f2c <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f968 	bl	80003e4 <__aeabi_ui2d>
 8002114:	4604      	mov	r4, r0
 8002116:	460d      	mov	r5, r1
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <ADC_ReadCurrent_Ring+0xcc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f961 	bl	80003e4 <__aeabi_ui2d>
 8002122:	a31d      	add	r3, pc, #116	; (adr r3, 8002198 <ADC_ReadCurrent_Ring+0xb8>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe f9d6 	bl	80004d8 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f81a 	bl	800016c <__adddf3>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	a317      	add	r3, pc, #92	; (adr r3, 80021a0 <ADC_ReadCurrent_Ring+0xc0>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe faf1 	bl	800072c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fc71 	bl	8000a38 <__aeabi_d2uiz>
 8002156:	4603      	mov	r3, r0
 8002158:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
	Current_motor[2]=Fingers_Status.Ring.Current;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <ADC_ReadCurrent_Ring+0xcc>)
 8002162:	6093      	str	r3, [r2, #8]
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	f640 62d8 	movw	r2, #3800	; 0xed8
 800216c:	4293      	cmp	r3, r2
 800216e:	d804      	bhi.n	800217a <ADC_ReadCurrent_Ring+0x9a>
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002178:	d204      	bcs.n	8002184 <ADC_ReadCurrent_Ring+0xa4>
		Fingers_Status.Ring.Stuck_Finger=1;
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002182:	e004      	b.n	800218e <ADC_ReadCurrent_Ring+0xae>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <ADC_ReadCurrent_Ring+0xd0>)
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	bdb0      	pop	{r4, r5, r7, pc}
 8002192:	bf00      	nop
 8002194:	f3af 8000 	nop.w
 8002198:	47ae147b 	.word	0x47ae147b
 800219c:	3f847ae1 	.word	0x3f847ae1
 80021a0:	c28f5c29 	.word	0xc28f5c29
 80021a4:	3ff028f5 	.word	0x3ff028f5
 80021a8:	20000130 	.word	0x20000130
 80021ac:	20001548 	.word	0x20001548
 80021b0:	200014d0 	.word	0x200014d0

080021b4 <ADC_Select_CH2>:
void ADC_Select_CH2 (void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80021cc:	2303      	movs	r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <ADC_Select_CH2+0x40>)
 80021da:	f001 ffd9 	bl	8004190 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <ADC_Select_CH2+0x34>
	  {
	    Error_Handler();
 80021e4:	f000 feac 	bl	8002f40 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80021e8:	b662      	cpsie	i
}
 80021ea:	bf00      	nop
	  }
	  __enable_irq();
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000130 	.word	0x20000130

080021f8 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	ADC_Select_CH2();
 80021fc:	f7ff ffda 	bl	80021b4 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 8002200:	482f      	ldr	r0, [pc, #188]	; (80022c0 <ADC_ReadCurrent_Middle+0xc8>)
 8002202:	f001 fde5 	bl	8003dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002206:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800220a:	482d      	ldr	r0, [pc, #180]	; (80022c0 <ADC_ReadCurrent_Middle+0xc8>)
 800220c:	f001 feba 	bl	8003f84 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc1);
 8002210:	482b      	ldr	r0, [pc, #172]	; (80022c0 <ADC_ReadCurrent_Middle+0xc8>)
 8002212:	f001 ffb1 	bl	8004178 <HAL_ADC_GetValue>
 8002216:	4603      	mov	r3, r0
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <ADC_ReadCurrent_Middle+0xcc>)
 800221a:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc1);
 800221c:	4828      	ldr	r0, [pc, #160]	; (80022c0 <ADC_ReadCurrent_Middle+0xc8>)
 800221e:	f001 fe85 	bl	8003f2c <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f8dc 	bl	80003e4 <__aeabi_ui2d>
 800222c:	4604      	mov	r4, r0
 800222e:	460d      	mov	r5, r1
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <ADC_ReadCurrent_Middle+0xcc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f8d5 	bl	80003e4 <__aeabi_ui2d>
 800223a:	a31d      	add	r3, pc, #116	; (adr r3, 80022b0 <ADC_ReadCurrent_Middle+0xb8>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f94a 	bl	80004d8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fd ff8e 	bl	800016c <__adddf3>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	a317      	add	r3, pc, #92	; (adr r3, 80022b8 <ADC_ReadCurrent_Middle+0xc0>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe fa65 	bl	800072c <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fbe5 	bl	8000a38 <__aeabi_d2uiz>
 800226e:	4603      	mov	r3, r0
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
	Current_motor[3]=Fingers_Status.Middle.Current;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <ADC_ReadCurrent_Middle+0xcc>)
 800227a:	60d3      	str	r3, [r2, #12]
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002284:	4293      	cmp	r3, r2
 8002286:	d804      	bhi.n	8002292 <ADC_ReadCurrent_Middle+0x9a>
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002290:	d204      	bcs.n	800229c <ADC_ReadCurrent_Middle+0xa4>
		Fingers_Status.Middle.Stuck_Finger=1;
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800229a:	e004      	b.n	80022a6 <ADC_ReadCurrent_Middle+0xae>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <ADC_ReadCurrent_Middle+0xd0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	47ae147b 	.word	0x47ae147b
 80022b4:	3f847ae1 	.word	0x3f847ae1
 80022b8:	c28f5c29 	.word	0xc28f5c29
 80022bc:	3ff028f5 	.word	0x3ff028f5
 80022c0:	20000130 	.word	0x20000130
 80022c4:	20001548 	.word	0x20001548
 80022c8:	200014d0 	.word	0x200014d0

080022cc <ADC_Select_CH3>:
void ADC_Select_CH3 (void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80022dc:	2303      	movs	r3, #3
 80022de:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80022e4:	2303      	movs	r3, #3
 80022e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <ADC_Select_CH3+0x40>)
 80022f2:	f001 ff4d 	bl	8004190 <HAL_ADC_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <ADC_Select_CH3+0x34>
	  {
	    Error_Handler();
 80022fc:	f000 fe20 	bl	8002f40 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8002300:	b662      	cpsie	i
}
 8002302:	bf00      	nop
	  }
	  __enable_irq();
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000130 	.word	0x20000130

08002310 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 8002314:	f7ff ffda 	bl	80022cc <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8002318:	482f      	ldr	r0, [pc, #188]	; (80023d8 <ADC_ReadCurrent_Index+0xc8>)
 800231a:	f001 fd59 	bl	8003dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800231e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002322:	482d      	ldr	r0, [pc, #180]	; (80023d8 <ADC_ReadCurrent_Index+0xc8>)
 8002324:	f001 fe2e 	bl	8003f84 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc1);
 8002328:	482b      	ldr	r0, [pc, #172]	; (80023d8 <ADC_ReadCurrent_Index+0xc8>)
 800232a:	f001 ff25 	bl	8004178 <HAL_ADC_GetValue>
 800232e:	4603      	mov	r3, r0
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <ADC_ReadCurrent_Index+0xcc>)
 8002332:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc1);
 8002334:	4828      	ldr	r0, [pc, #160]	; (80023d8 <ADC_ReadCurrent_Index+0xc8>)
 8002336:	f001 fdf9 	bl	8003f2c <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f850 	bl	80003e4 <__aeabi_ui2d>
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <ADC_ReadCurrent_Index+0xcc>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f849 	bl	80003e4 <__aeabi_ui2d>
 8002352:	a31d      	add	r3, pc, #116	; (adr r3, 80023c8 <ADC_ReadCurrent_Index+0xb8>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f8be 	bl	80004d8 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fd ff02 	bl	800016c <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	a317      	add	r3, pc, #92	; (adr r3, 80023d0 <ADC_ReadCurrent_Index+0xc0>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f9d9 	bl	800072c <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fb59 	bl	8000a38 <__aeabi_d2uiz>
 8002386:	4603      	mov	r3, r0
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 800238a:	6293      	str	r3, [r2, #40]	; 0x28
	Current_motor[4]=Fingers_Status.Index.Current;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <ADC_ReadCurrent_Index+0xcc>)
 8002392:	6113      	str	r3, [r2, #16]
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f640 62d8 	movw	r2, #3800	; 0xed8
 800239c:	4293      	cmp	r3, r2
 800239e:	d804      	bhi.n	80023aa <ADC_ReadCurrent_Index+0x9a>
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80023a8:	d204      	bcs.n	80023b4 <ADC_ReadCurrent_Index+0xa4>
		Fingers_Status.Index.Stuck_Finger=1;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80023b2:	e004      	b.n	80023be <ADC_ReadCurrent_Index+0xae>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <ADC_ReadCurrent_Index+0xd0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	47ae147b 	.word	0x47ae147b
 80023cc:	3f847ae1 	.word	0x3f847ae1
 80023d0:	c28f5c29 	.word	0xc28f5c29
 80023d4:	3ff028f5 	.word	0x3ff028f5
 80023d8:	20000130 	.word	0x20000130
 80023dc:	20001548 	.word	0x20001548
 80023e0:	200014d0 	.word	0x200014d0

080023e4 <ADC_Select_CH4>:
void ADC_Select_CH4 (void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 80023f4:	2304      	movs	r3, #4
 80023f6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80023fc:	2303      	movs	r3, #3
 80023fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <ADC_Select_CH4+0x40>)
 800240a:	f001 fec1 	bl	8004190 <HAL_ADC_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <ADC_Select_CH4+0x34>
	  {
	    Error_Handler();
 8002414:	f000 fd94 	bl	8002f40 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8002418:	b662      	cpsie	i
}
 800241a:	bf00      	nop
	  }
	  __enable_irq();
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000130 	.word	0x20000130

08002428 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	af00      	add	r7, sp, #0
	ADC_Select_CH4();
 800242c:	f7ff ffda 	bl	80023e4 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8002430:	482d      	ldr	r0, [pc, #180]	; (80024e8 <ADC_ReadCurrent_Thumb+0xc0>)
 8002432:	f001 fccd 	bl	8003dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800243a:	482b      	ldr	r0, [pc, #172]	; (80024e8 <ADC_ReadCurrent_Thumb+0xc0>)
 800243c:	f001 fda2 	bl	8003f84 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc1);
 8002440:	4829      	ldr	r0, [pc, #164]	; (80024e8 <ADC_ReadCurrent_Thumb+0xc0>)
 8002442:	f001 fe99 	bl	8004178 <HAL_ADC_GetValue>
 8002446:	4603      	mov	r3, r0
 8002448:	4a28      	ldr	r2, [pc, #160]	; (80024ec <ADC_ReadCurrent_Thumb+0xc4>)
 800244a:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc1);
 800244c:	4826      	ldr	r0, [pc, #152]	; (80024e8 <ADC_ReadCurrent_Thumb+0xc0>)
 800244e:	f001 fd6d 	bl	8003f2c <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fd ffc4 	bl	80003e4 <__aeabi_ui2d>
 800245c:	4604      	mov	r4, r0
 800245e:	460d      	mov	r5, r1
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <ADC_ReadCurrent_Thumb+0xc4>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ffbd 	bl	80003e4 <__aeabi_ui2d>
 800246a:	a31b      	add	r3, pc, #108	; (adr r3, 80024d8 <ADC_ReadCurrent_Thumb+0xb0>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f832 	bl	80004d8 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd fe76 	bl	800016c <__adddf3>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	a315      	add	r3, pc, #84	; (adr r3, 80024e0 <ADC_ReadCurrent_Thumb+0xb8>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f94d 	bl	800072c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe facd 	bl	8000a38 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024a2:	6113      	str	r3, [r2, #16]
	Current_motor[5]=Fingers_Status.Thumb.Current;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4a10      	ldr	r2, [pc, #64]	; (80024ec <ADC_ReadCurrent_Thumb+0xc4>)
 80024aa:	6153      	str	r3, [r2, #20]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f640 62d8 	movw	r2, #3800	; 0xed8
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d804      	bhi.n	80024c2 <ADC_ReadCurrent_Thumb+0x9a>
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80024c0:	d203      	bcs.n	80024ca <ADC_ReadCurrent_Thumb+0xa2>
		Fingers_Status.Thumb.Stuck_Finger=1;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	735a      	strb	r2, [r3, #13]
 80024c8:	e003      	b.n	80024d2 <ADC_ReadCurrent_Thumb+0xaa>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <ADC_ReadCurrent_Thumb+0xc8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	735a      	strb	r2, [r3, #13]
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	bdb0      	pop	{r4, r5, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	47ae147b 	.word	0x47ae147b
 80024dc:	3f847ae1 	.word	0x3f847ae1
 80024e0:	c28f5c29 	.word	0xc28f5c29
 80024e4:	3ff028f5 	.word	0x3ff028f5
 80024e8:	20000130 	.word	0x20000130
 80024ec:	20001548 	.word	0x20001548
 80024f0:	200014d0 	.word	0x200014d0

080024f4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_CAN_Init+0x60>)
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <MX_CAN_Init+0x64>)
 80024fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_CAN_Init+0x60>)
 8002500:	2210      	movs	r2, #16
 8002502:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_CAN_Init+0x60>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_CAN_Init+0x60>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_CAN_Init+0x60>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_CAN_Init+0x60>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <MX_CAN_Init+0x60>)
 800251e:	2200      	movs	r2, #0
 8002520:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_CAN_Init+0x60>)
 8002524:	2200      	movs	r2, #0
 8002526:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MX_CAN_Init+0x60>)
 800252a:	2200      	movs	r2, #0
 800252c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_CAN_Init+0x60>)
 8002530:	2200      	movs	r2, #0
 8002532:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <MX_CAN_Init+0x60>)
 8002536:	2200      	movs	r2, #0
 8002538:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_CAN_Init+0x60>)
 800253c:	2200      	movs	r2, #0
 800253e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_CAN_Init+0x60>)
 8002542:	f001 ffa9 	bl	8004498 <HAL_CAN_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800254c:	f000 fcf8 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000160 	.word	0x20000160
 8002558:	40006400 	.word	0x40006400

0800255c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_CAN_MspInit+0xb0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d143      	bne.n	8002604 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002586:	61d3      	str	r3, [r2, #28]
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_CAN_MspInit+0xb4>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4814      	ldr	r0, [pc, #80]	; (8002614 <HAL_CAN_MspInit+0xb8>)
 80025c2:	f002 f9bb 	bl	800493c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	480e      	ldr	r0, [pc, #56]	; (8002614 <HAL_CAN_MspInit+0xb8>)
 80025dc:	f002 f9ae 	bl	800493c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_CAN_MspInit+0xbc>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_CAN_MspInit+0xbc>)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40006400 	.word	0x40006400
 8002610:	40021000 	.word	0x40021000
 8002614:	40010c00 	.word	0x40010c00
 8002618:	40010000 	.word	0x40010000

0800261c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_Tas */
  ThumbFinger_TasHandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_Tas_attributes);
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <MX_FREERTOS_Init+0x68>)
 8002622:	2100      	movs	r1, #0
 8002624:	4818      	ldr	r0, [pc, #96]	; (8002688 <MX_FREERTOS_Init+0x6c>)
 8002626:	f004 fa65 	bl	8006af4 <osThreadNew>
 800262a:	4603      	mov	r3, r0
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <MX_FREERTOS_Init+0x70>)
 800262e:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_Tas */
  IndexFinger_TasHandle = osThreadNew(IndexFinger, NULL, &IndexFinger_Tas_attributes);
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <MX_FREERTOS_Init+0x74>)
 8002632:	2100      	movs	r1, #0
 8002634:	4817      	ldr	r0, [pc, #92]	; (8002694 <MX_FREERTOS_Init+0x78>)
 8002636:	f004 fa5d 	bl	8006af4 <osThreadNew>
 800263a:	4603      	mov	r3, r0
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <MX_FREERTOS_Init+0x7c>)
 800263e:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_Ta */
  MiddleFinger_TaHandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_Ta_attributes);
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <MX_FREERTOS_Init+0x80>)
 8002642:	2100      	movs	r1, #0
 8002644:	4816      	ldr	r0, [pc, #88]	; (80026a0 <MX_FREERTOS_Init+0x84>)
 8002646:	f004 fa55 	bl	8006af4 <osThreadNew>
 800264a:	4603      	mov	r3, r0
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_FREERTOS_Init+0x88>)
 800264e:	6013      	str	r3, [r2, #0]

  /* creation of Ringfinger_Task */
  Ringfinger_TaskHandle = osThreadNew(Ringfinger, NULL, &Ringfinger_Task_attributes);
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <MX_FREERTOS_Init+0x8c>)
 8002652:	2100      	movs	r1, #0
 8002654:	4815      	ldr	r0, [pc, #84]	; (80026ac <MX_FREERTOS_Init+0x90>)
 8002656:	f004 fa4d 	bl	8006af4 <osThreadNew>
 800265a:	4603      	mov	r3, r0
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <MX_FREERTOS_Init+0x94>)
 800265e:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_tas */
  PinkyFinger_tasHandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_tas_attributes);
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <MX_FREERTOS_Init+0x98>)
 8002662:	2100      	movs	r1, #0
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <MX_FREERTOS_Init+0x9c>)
 8002666:	f004 fa45 	bl	8006af4 <osThreadNew>
 800266a:	4603      	mov	r3, r0
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_FREERTOS_Init+0xa0>)
 800266e:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <MX_FREERTOS_Init+0xa4>)
 8002672:	2100      	movs	r1, #0
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_FREERTOS_Init+0xa8>)
 8002676:	f004 fa3d 	bl	8006af4 <osThreadNew>
 800267a:	4603      	mov	r3, r0
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <MX_FREERTOS_Init+0xac>)
 800267e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800a548 	.word	0x0800a548
 8002688:	080026cd 	.word	0x080026cd
 800268c:	20000188 	.word	0x20000188
 8002690:	0800a56c 	.word	0x0800a56c
 8002694:	080026fd 	.word	0x080026fd
 8002698:	20000434 	.word	0x20000434
 800269c:	0800a590 	.word	0x0800a590
 80026a0:	08002735 	.word	0x08002735
 80026a4:	200006e0 	.word	0x200006e0
 80026a8:	0800a5b4 	.word	0x0800a5b4
 80026ac:	0800276d 	.word	0x0800276d
 80026b0:	2000098c 	.word	0x2000098c
 80026b4:	0800a5d8 	.word	0x0800a5d8
 80026b8:	080027a5 	.word	0x080027a5
 80026bc:	20000c38 	.word	0x20000c38
 80026c0:	0800a5fc 	.word	0x0800a5fc
 80026c4:	080027dd 	.word	0x080027dd
 80026c8:	20000ee4 	.word	0x20000ee4

080026cc <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Thumb.Stuck_Finger)
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <ThumbFinger+0x2c>)
 80026d6:	7b5b      	ldrb	r3, [r3, #13]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <ThumbFinger+0x16>
			Fingers_Status.Thumb.Direction=Stop;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <ThumbFinger+0x2c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	729a      	strb	r2, [r3, #10]
		SetMotor(Thumb, &Fingers_Status.Thumb);
 80026e2:	4905      	ldr	r1, [pc, #20]	; (80026f8 <ThumbFinger+0x2c>)
 80026e4:	2000      	movs	r0, #0
 80026e6:	f001 f82b 	bl	8003740 <SetMotor>
		ADC_ReadCurrent_Thumb();
 80026ea:	f7ff fe9d 	bl	8002428 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f004 faaa 	bl	8006c48 <osDelay>
		if(Fingers_Status.Thumb.Stuck_Finger)
 80026f4:	e7ee      	b.n	80026d4 <ThumbFinger+0x8>
 80026f6:	bf00      	nop
 80026f8:	200014d0 	.word	0x200014d0

080026fc <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Index.Stuck_Finger)
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <IndexFinger+0x30>)
 8002706:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <IndexFinger+0x1a>
			Fingers_Status.Index.Direction=Stop;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <IndexFinger+0x30>)
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		SetMotor(Index, &Fingers_Status.Index);
 8002716:	4906      	ldr	r1, [pc, #24]	; (8002730 <IndexFinger+0x34>)
 8002718:	2001      	movs	r0, #1
 800271a:	f001 f811 	bl	8003740 <SetMotor>
		ADC_ReadCurrent_Index();
 800271e:	f7ff fdf7 	bl	8002310 <ADC_ReadCurrent_Index>
		osDelay(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f004 fa90 	bl	8006c48 <osDelay>
		if(Fingers_Status.Index.Stuck_Finger)
 8002728:	e7ec      	b.n	8002704 <IndexFinger+0x8>
 800272a:	bf00      	nop
 800272c:	200014d0 	.word	0x200014d0
 8002730:	200014e8 	.word	0x200014e8

08002734 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Middle.Stuck_Finger)
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MiddleFinger+0x30>)
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <MiddleFinger+0x1a>
			Fingers_Status.Middle.Direction=Stop;
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MiddleFinger+0x30>)
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		SetMotor(Middle, &Fingers_Status.Middle);
 800274e:	4906      	ldr	r1, [pc, #24]	; (8002768 <MiddleFinger+0x34>)
 8002750:	2002      	movs	r0, #2
 8002752:	f000 fff5 	bl	8003740 <SetMotor>
		ADC_ReadCurrent_Middle();
 8002756:	f7ff fd4f 	bl	80021f8 <ADC_ReadCurrent_Middle>
		osDelay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f004 fa74 	bl	8006c48 <osDelay>
		if(Fingers_Status.Middle.Stuck_Finger)
 8002760:	e7ec      	b.n	800273c <MiddleFinger+0x8>
 8002762:	bf00      	nop
 8002764:	200014d0 	.word	0x200014d0
 8002768:	20001500 	.word	0x20001500

0800276c <Ringfinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ringfinger */
void Ringfinger(void *argument)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ringfinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Ring.Stuck_Finger)
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <Ringfinger+0x30>)
 8002776:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <Ringfinger+0x1a>
			Fingers_Status.Ring.Direction=Stop;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <Ringfinger+0x30>)
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		SetMotor(Ring, &Fingers_Status.Ring);
 8002786:	4906      	ldr	r1, [pc, #24]	; (80027a0 <Ringfinger+0x34>)
 8002788:	2003      	movs	r0, #3
 800278a:	f000 ffd9 	bl	8003740 <SetMotor>
		ADC_ReadCurrent_Ring();
 800278e:	f7ff fca7 	bl	80020e0 <ADC_ReadCurrent_Ring>
		osDelay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f004 fa58 	bl	8006c48 <osDelay>
		if(Fingers_Status.Ring.Stuck_Finger)
 8002798:	e7ec      	b.n	8002774 <Ringfinger+0x8>
 800279a:	bf00      	nop
 800279c:	200014d0 	.word	0x200014d0
 80027a0:	20001518 	.word	0x20001518

080027a4 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Pinky.Stuck_Finger)
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <PinkyFinger+0x30>)
 80027ae:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <PinkyFinger+0x1a>
			Fingers_Status.Pinky.Direction=Stop;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <PinkyFinger+0x30>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		SetMotor(Pinky, &Fingers_Status.Pinky);
 80027be:	4906      	ldr	r1, [pc, #24]	; (80027d8 <PinkyFinger+0x34>)
 80027c0:	2004      	movs	r0, #4
 80027c2:	f000 ffbd 	bl	8003740 <SetMotor>
		ADC_ReadCurrent_Pinky();
 80027c6:	f7ff fbff 	bl	8001fc8 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f004 fa3c 	bl	8006c48 <osDelay>
		if(Fingers_Status.Pinky.Stuck_Finger)
 80027d0:	e7ec      	b.n	80027ac <PinkyFinger+0x8>
 80027d2:	bf00      	nop
 80027d4:	200014d0 	.word	0x200014d0
 80027d8:	20001530 	.word	0x20001530

080027dc <CommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommunicationTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f004 fa2f 	bl	8006c48 <osDelay>
 80027ea:	e7fb      	b.n	80027e4 <CommunicationTask+0x8>

080027ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002800:	4b5f      	ldr	r3, [pc, #380]	; (8002980 <MX_GPIO_Init+0x194>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a5e      	ldr	r2, [pc, #376]	; (8002980 <MX_GPIO_Init+0x194>)
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	6193      	str	r3, [r2, #24]
 800280c:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <MX_GPIO_Init+0x194>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <MX_GPIO_Init+0x194>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <MX_GPIO_Init+0x194>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <MX_GPIO_Init+0x194>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <MX_GPIO_Init+0x194>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <MX_GPIO_Init+0x194>)
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <MX_GPIO_Init+0x194>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <MX_GPIO_Init+0x194>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <MX_GPIO_Init+0x194>)
 800284e:	f043 0320 	orr.w	r3, r3, #32
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <MX_GPIO_Init+0x194>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 8002866:	4847      	ldr	r0, [pc, #284]	; (8002984 <MX_GPIO_Init+0x198>)
 8002868:	f002 f9ec 	bl	8004c44 <HAL_GPIO_WritePin>
                          |Motor1_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 800286c:	2200      	movs	r2, #0
 800286e:	f24f 0108 	movw	r1, #61448	; 0xf008
 8002872:	4845      	ldr	r0, [pc, #276]	; (8002988 <MX_GPIO_Init+0x19c>)
 8002874:	f002 f9e6 	bl	8004c44 <HAL_GPIO_WritePin>
                          |Motor5_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	2104      	movs	r1, #4
 800287c:	4843      	ldr	r0, [pc, #268]	; (800298c <MX_GPIO_Init+0x1a0>)
 800287e:	f002 f9e1 	bl	8004c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 8002882:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8002886:	613b      	str	r3, [r7, #16]
                          |Motor1_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2302      	movs	r3, #2
 8002892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4619      	mov	r1, r3
 800289a:	483a      	ldr	r0, [pc, #232]	; (8002984 <MX_GPIO_Init+0x198>)
 800289c:	f002 f84e 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder1_Pin|Motor3_Encoder2_Pin|Motor1_Encoder1_Pin|Motor1_Encoder2_Pin
 80028a0:	f641 4333 	movw	r3, #7219	; 0x1c33
 80028a4:	613b      	str	r3, [r7, #16]
                          |Motor5_Encoder2_Pin|Motor4_Encoder1_Pin|Motor4_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028a6:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <MX_GPIO_Init+0x1a4>)
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	4619      	mov	r1, r3
 80028b4:	4833      	ldr	r0, [pc, #204]	; (8002984 <MX_GPIO_Init+0x198>)
 80028b6:	f002 f841 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <MX_GPIO_Init+0x1a4>)
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4619      	mov	r1, r3
 80028cc:	4831      	ldr	r0, [pc, #196]	; (8002994 <MX_GPIO_Init+0x1a8>)
 80028ce:	f002 f835 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 80028d2:	f24f 0308 	movw	r3, #61448	; 0xf008
 80028d6:	613b      	str	r3, [r7, #16]
                          |Motor5_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	4827      	ldr	r0, [pc, #156]	; (8002988 <MX_GPIO_Init+0x19c>)
 80028ec:	f002 f826 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder1_Pin;
 80028f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor5_Encoder1_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	4823      	ldr	r0, [pc, #140]	; (8002994 <MX_GPIO_Init+0x1a8>)
 8002906:	f002 f819 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_INB_Pin;
 800290a:	2304      	movs	r3, #4
 800290c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2302      	movs	r3, #2
 8002918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_INB_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	4619      	mov	r1, r3
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <MX_GPIO_Init+0x1a0>)
 8002922:	f002 f80b 	bl	800493c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2006      	movs	r0, #6
 800292c:	f001 ff65 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002930:	2006      	movs	r0, #6
 8002932:	f001 ff7e 	bl	8004832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2007      	movs	r0, #7
 800293c:	f001 ff5d 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002940:	2007      	movs	r0, #7
 8002942:	f001 ff76 	bl	8004832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	200a      	movs	r0, #10
 800294c:	f001 ff55 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002950:	200a      	movs	r0, #10
 8002952:	f001 ff6e 	bl	8004832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2017      	movs	r0, #23
 800295c:	f001 ff4d 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002960:	2017      	movs	r0, #23
 8002962:	f001 ff66 	bl	8004832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2028      	movs	r0, #40	; 0x28
 800296c:	f001 ff45 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002970:	2028      	movs	r0, #40	; 0x28
 8002972:	f001 ff5e 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 8002976:	bf00      	nop
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40011000 	.word	0x40011000
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40011400 	.word	0x40011400
 8002990:	10310000 	.word	0x10310000
 8002994:	40010800 	.word	0x40010800

08002998 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	f000 81e7 	beq.w	8002d7a <HAL_GPIO_EXTI_Callback+0x3e2>
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	f300 8237 	bgt.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b8:	f000 81ae 	beq.w	8002d18 <HAL_GPIO_EXTI_Callback+0x380>
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	f300 822f 	bgt.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	f000 8208 	beq.w	8002ddc <HAL_GPIO_EXTI_Callback+0x444>
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	f300 8227 	bgt.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	f000 8100 	beq.w	8002bda <HAL_GPIO_EXTI_Callback+0x242>
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	f300 8221 	bgt.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	dc49      	bgt.n	8002a78 <HAL_GPIO_EXTI_Callback+0xe0>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f340 821c 	ble.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029ea:	3b01      	subs	r3, #1
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	f200 8218 	bhi.w	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <HAL_GPIO_EXTI_Callback+0x60>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002c4f 	.word	0x08002c4f
 80029fc:	08002cb1 	.word	0x08002cb1
 8002a00:	08002e23 	.word	0x08002e23
 8002a04:	08002e23 	.word	0x08002e23
 8002a08:	08002e23 	.word	0x08002e23
 8002a0c:	08002e23 	.word	0x08002e23
 8002a10:	08002e23 	.word	0x08002e23
 8002a14:	08002e23 	.word	0x08002e23
 8002a18:	08002e23 	.word	0x08002e23
 8002a1c:	08002e23 	.word	0x08002e23
 8002a20:	08002e23 	.word	0x08002e23
 8002a24:	08002e23 	.word	0x08002e23
 8002a28:	08002e23 	.word	0x08002e23
 8002a2c:	08002e23 	.word	0x08002e23
 8002a30:	08002e23 	.word	0x08002e23
 8002a34:	08002a7f 	.word	0x08002a7f
 8002a38:	08002e23 	.word	0x08002e23
 8002a3c:	08002e23 	.word	0x08002e23
 8002a40:	08002e23 	.word	0x08002e23
 8002a44:	08002e23 	.word	0x08002e23
 8002a48:	08002e23 	.word	0x08002e23
 8002a4c:	08002e23 	.word	0x08002e23
 8002a50:	08002e23 	.word	0x08002e23
 8002a54:	08002e23 	.word	0x08002e23
 8002a58:	08002e23 	.word	0x08002e23
 8002a5c:	08002e23 	.word	0x08002e23
 8002a60:	08002e23 	.word	0x08002e23
 8002a64:	08002e23 	.word	0x08002e23
 8002a68:	08002e23 	.word	0x08002e23
 8002a6c:	08002e23 	.word	0x08002e23
 8002a70:	08002e23 	.word	0x08002e23
 8002a74:	08002af3 	.word	0x08002af3
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d074      	beq.n	8002b66 <HAL_GPIO_EXTI_Callback+0x1ce>
				default:
					break;
			}
			break;
		default:
			break;
 8002a7c:	e1d1      	b.n	8002e22 <HAL_GPIO_EXTI_Callback+0x48a>
			switch (Fingers_Status.Pinky.Direction) {
 8002a7e:	4ba4      	ldr	r3, [pc, #656]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002a80:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <HAL_GPIO_EXTI_Callback+0xf6>
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d015      	beq.n	8002ab8 <HAL_GPIO_EXTI_Callback+0x120>
					break;
 8002a8c:	e030      	b.n	8002af0 <HAL_GPIO_EXTI_Callback+0x158>
					Fingers_Status.Pinky.Encoder++;
 8002a8e:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002a94:	3301      	adds	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b9d      	ldr	r3, [pc, #628]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8002a9e:	4b9c      	ldr	r3, [pc, #624]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002aa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002aa4:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d91e      	bls.n	8002aea <HAL_GPIO_EXTI_Callback+0x152>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8002aac:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002aae:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8002ab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						break;
 8002ab6:	e018      	b.n	8002aea <HAL_GPIO_EXTI_Callback+0x152>
					Fingers_Status.Pinky.Encoder--;
 8002ab8:	4b95      	ldr	r3, [pc, #596]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002aba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b93      	ldr	r3, [pc, #588]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8002ac8:	4b91      	ldr	r3, [pc, #580]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002aca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002ace:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d804      	bhi.n	8002ae0 <HAL_GPIO_EXTI_Callback+0x148>
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002adc:	2b63      	cmp	r3, #99	; 0x63
 8002ade:	d806      	bhi.n	8002aee <HAL_GPIO_EXTI_Callback+0x156>
						Fingers_Status.Pinky.Encoder=0;
 8002ae0:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					break;
 8002ae8:	e001      	b.n	8002aee <HAL_GPIO_EXTI_Callback+0x156>
						break;
 8002aea:	bf00      	nop
 8002aec:	e19a      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002aee:	bf00      	nop
			break;
 8002af0:	e198      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Pinky.Direction) {
 8002af2:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002af4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <HAL_GPIO_EXTI_Callback+0x16a>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d015      	beq.n	8002b2c <HAL_GPIO_EXTI_Callback+0x194>
					break;
 8002b00:	e030      	b.n	8002b64 <HAL_GPIO_EXTI_Callback+0x1cc>
					Fingers_Status.Pinky.Encoder++;
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b80      	ldr	r3, [pc, #512]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b18:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d91e      	bls.n	8002b5e <HAL_GPIO_EXTI_Callback+0x1c6>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8002b20:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b22:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8002b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					break;
 8002b2a:	e018      	b.n	8002b5e <HAL_GPIO_EXTI_Callback+0x1c6>
					Fingers_Status.Pinky.Encoder--;
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b42:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d804      	bhi.n	8002b54 <HAL_GPIO_EXTI_Callback+0x1bc>
 8002b4a:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002b50:	2b63      	cmp	r3, #99	; 0x63
 8002b52:	d806      	bhi.n	8002b62 <HAL_GPIO_EXTI_Callback+0x1ca>
						Fingers_Status.Pinky.Encoder=0;
 8002b54:	4b6e      	ldr	r3, [pc, #440]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					break;
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_EXTI_Callback+0x1ca>
					break;
 8002b5e:	bf00      	nop
 8002b60:	e160      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002b62:	bf00      	nop
			break;
 8002b64:	e15e      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Ring.Direction) {
 8002b66:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b68:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d002      	beq.n	8002b76 <HAL_GPIO_EXTI_Callback+0x1de>
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d015      	beq.n	8002ba0 <HAL_GPIO_EXTI_Callback+0x208>
					break;
 8002b74:	e030      	b.n	8002bd8 <HAL_GPIO_EXTI_Callback+0x240>
					Fingers_Status.Ring.Encoder++;
 8002b76:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8002b86:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8c:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d91e      	bls.n	8002bd2 <HAL_GPIO_EXTI_Callback+0x23a>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8002b94:	4b5e      	ldr	r3, [pc, #376]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002b96:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8002b9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					break;
 8002b9e:	e018      	b.n	8002bd2 <HAL_GPIO_EXTI_Callback+0x23a>
					Fingers_Status.Ring.Encoder--;
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 8002bb0:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d804      	bhi.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x230>
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	2b63      	cmp	r3, #99	; 0x63
 8002bc6:	d806      	bhi.n	8002bd6 <HAL_GPIO_EXTI_Callback+0x23e>
						Fingers_Status.Ring.Encoder=0;
 8002bc8:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					break;
 8002bd0:	e001      	b.n	8002bd6 <HAL_GPIO_EXTI_Callback+0x23e>
					break;
 8002bd2:	bf00      	nop
 8002bd4:	e126      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002bd6:	bf00      	nop
			break;
 8002bd8:	e124      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Ring.Direction) {
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bdc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d002      	beq.n	8002bea <HAL_GPIO_EXTI_Callback+0x252>
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d015      	beq.n	8002c14 <HAL_GPIO_EXTI_Callback+0x27c>
					break;
 8002be8:	e030      	b.n	8002c4c <HAL_GPIO_EXTI_Callback+0x2b4>
					Fingers_Status.Ring.Encoder++;
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bf6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8002bfa:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d91e      	bls.n	8002c46 <HAL_GPIO_EXTI_Callback+0x2ae>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c0a:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8002c0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					break;
 8002c12:	e018      	b.n	8002c46 <HAL_GPIO_EXTI_Callback+0x2ae>
					Fingers_Status.Ring.Encoder--;
 8002c14:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2a:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d804      	bhi.n	8002c3c <HAL_GPIO_EXTI_Callback+0x2a4>
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	2b63      	cmp	r3, #99	; 0x63
 8002c3a:	d806      	bhi.n	8002c4a <HAL_GPIO_EXTI_Callback+0x2b2>
						Fingers_Status.Ring.Encoder=0;
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					break;
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_EXTI_Callback+0x2b2>
					break;
 8002c46:	bf00      	nop
 8002c48:	e0ec      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002c4a:	bf00      	nop
			break;
 8002c4c:	e0ea      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Middle.Direction) {
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d002      	beq.n	8002c5e <HAL_GPIO_EXTI_Callback+0x2c6>
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d011      	beq.n	8002c80 <HAL_GPIO_EXTI_Callback+0x2e8>
					break;
 8002c5c:	e027      	b.n	8002cae <HAL_GPIO_EXTI_Callback+0x316>
					Fingers_Status.Middle.Encoder++;
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c60:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c68:	871a      	strh	r2, [r3, #56]	; 0x38
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c6c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c6e:	f247 021c 	movw	r2, #28700	; 0x701c
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d918      	bls.n	8002ca8 <HAL_GPIO_EXTI_Callback+0x310>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c78:	f247 021c 	movw	r2, #28700	; 0x701c
 8002c7c:	871a      	strh	r2, [r3, #56]	; 0x38
					break;
 8002c7e:	e013      	b.n	8002ca8 <HAL_GPIO_EXTI_Callback+0x310>
					Fingers_Status.Middle.Encoder--;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c82:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c8a:	871a      	strh	r2, [r3, #56]	; 0x38
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c8e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c90:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d803      	bhi.n	8002ca0 <HAL_GPIO_EXTI_Callback+0x308>
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002c9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c9c:	2b63      	cmp	r3, #99	; 0x63
 8002c9e:	d805      	bhi.n	8002cac <HAL_GPIO_EXTI_Callback+0x314>
					Fingers_Status.Middle.Encoder=0;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	871a      	strh	r2, [r3, #56]	; 0x38
					break;
 8002ca6:	e001      	b.n	8002cac <HAL_GPIO_EXTI_Callback+0x314>
					break;
 8002ca8:	bf00      	nop
 8002caa:	e0bb      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002cac:	bf00      	nop
			break;
 8002cae:	e0b9      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Middle.Direction) {
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d002      	beq.n	8002cc0 <HAL_GPIO_EXTI_Callback+0x328>
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d011      	beq.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x34a>
					break;
 8002cbe:	e02a      	b.n	8002d16 <HAL_GPIO_EXTI_Callback+0x37e>
					Fingers_Status.Middle.Encoder++;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cc2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cca:	871a      	strh	r2, [r3, #56]	; 0x38
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cd0:	f247 021c 	movw	r2, #28700	; 0x701c
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d918      	bls.n	8002d0a <HAL_GPIO_EXTI_Callback+0x372>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cda:	f247 021c 	movw	r2, #28700	; 0x701c
 8002cde:	871a      	strh	r2, [r3, #56]	; 0x38
					break;
 8002ce0:	e013      	b.n	8002d0a <HAL_GPIO_EXTI_Callback+0x372>
					Fingers_Status.Middle.Encoder--;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002ce4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cec:	871a      	strh	r2, [r3, #56]	; 0x38
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cf0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cf2:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d803      	bhi.n	8002d02 <HAL_GPIO_EXTI_Callback+0x36a>
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002cfc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cfe:	2b63      	cmp	r3, #99	; 0x63
 8002d00:	d808      	bhi.n	8002d14 <HAL_GPIO_EXTI_Callback+0x37c>
					Fingers_Status.Middle.Encoder=0;
 8002d02:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x378>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	871a      	strh	r2, [r3, #56]	; 0x38
					break;
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_EXTI_Callback+0x37c>
					break;
 8002d0a:	bf00      	nop
 8002d0c:	e08a      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
 8002d0e:	bf00      	nop
 8002d10:	200014d0 	.word	0x200014d0
					break;
 8002d14:	bf00      	nop
			break;
 8002d16:	e085      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Index.Direction) {
 8002d18:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d002      	beq.n	8002d28 <HAL_GPIO_EXTI_Callback+0x390>
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d011      	beq.n	8002d4a <HAL_GPIO_EXTI_Callback+0x3b2>
					break;
 8002d26:	e027      	b.n	8002d78 <HAL_GPIO_EXTI_Callback+0x3e0>
					Fingers_Status.Index.Encoder++;
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d2a:	8c1b      	ldrh	r3, [r3, #32]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d32:	841a      	strh	r2, [r3, #32]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d36:	8c1b      	ldrh	r3, [r3, #32]
 8002d38:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d918      	bls.n	8002d72 <HAL_GPIO_EXTI_Callback+0x3da>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d42:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002d46:	841a      	strh	r2, [r3, #32]
					break;
 8002d48:	e013      	b.n	8002d72 <HAL_GPIO_EXTI_Callback+0x3da>
					Fingers_Status.Index.Encoder--;
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d4c:	8c1b      	ldrh	r3, [r3, #32]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d54:	841a      	strh	r2, [r3, #32]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d58:	8c1b      	ldrh	r3, [r3, #32]
 8002d5a:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d803      	bhi.n	8002d6a <HAL_GPIO_EXTI_Callback+0x3d2>
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d64:	8c1b      	ldrh	r3, [r3, #32]
 8002d66:	2b63      	cmp	r3, #99	; 0x63
 8002d68:	d805      	bhi.n	8002d76 <HAL_GPIO_EXTI_Callback+0x3de>
					Fingers_Status.Index.Encoder=0;
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	841a      	strh	r2, [r3, #32]
					break;
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_EXTI_Callback+0x3de>
					break;
 8002d72:	bf00      	nop
 8002d74:	e056      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002d76:	bf00      	nop
			break;
 8002d78:	e054      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Index.Direction) {
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d002      	beq.n	8002d8a <HAL_GPIO_EXTI_Callback+0x3f2>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d011      	beq.n	8002dac <HAL_GPIO_EXTI_Callback+0x414>
					break;
 8002d88:	e027      	b.n	8002dda <HAL_GPIO_EXTI_Callback+0x442>
					Fingers_Status.Index.Encoder++;
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d8c:	8c1b      	ldrh	r3, [r3, #32]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d94:	841a      	strh	r2, [r3, #32]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002d98:	8c1b      	ldrh	r3, [r3, #32]
 8002d9a:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d918      	bls.n	8002dd4 <HAL_GPIO_EXTI_Callback+0x43c>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002da4:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002da8:	841a      	strh	r2, [r3, #32]
					break;
 8002daa:	e013      	b.n	8002dd4 <HAL_GPIO_EXTI_Callback+0x43c>
					Fingers_Status.Index.Encoder--;
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dae:	8c1b      	ldrh	r3, [r3, #32]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002db6:	841a      	strh	r2, [r3, #32]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dba:	8c1b      	ldrh	r3, [r3, #32]
 8002dbc:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d803      	bhi.n	8002dcc <HAL_GPIO_EXTI_Callback+0x434>
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dc6:	8c1b      	ldrh	r3, [r3, #32]
 8002dc8:	2b63      	cmp	r3, #99	; 0x63
 8002dca:	d805      	bhi.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x440>
					Fingers_Status.Index.Encoder=0;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	841a      	strh	r2, [r3, #32]
					break;
 8002dd2:	e001      	b.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x440>
					break;
 8002dd4:	bf00      	nop
 8002dd6:	e025      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
					break;
 8002dd8:	bf00      	nop
			break;
 8002dda:	e023      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			switch (Fingers_Status.Thumb.Direction) {
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dde:	7a9b      	ldrb	r3, [r3, #10]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d002      	beq.n	8002dea <HAL_GPIO_EXTI_Callback+0x452>
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_EXTI_Callback+0x460>
					break;
 8002de8:	e01a      	b.n	8002e20 <HAL_GPIO_EXTI_Callback+0x488>
					Fingers_Status.Thumb.Encoder++;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dec:	891b      	ldrh	r3, [r3, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002df4:	811a      	strh	r2, [r3, #8]
					break;
 8002df6:	e013      	b.n	8002e20 <HAL_GPIO_EXTI_Callback+0x488>
					Fingers_Status.Thumb.Encoder--;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002dfa:	891b      	ldrh	r3, [r3, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002e02:	811a      	strh	r2, [r3, #8]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<100)
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002e06:	891b      	ldrh	r3, [r3, #8]
 8002e08:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d803      	bhi.n	8002e18 <HAL_GPIO_EXTI_Callback+0x480>
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002e12:	891b      	ldrh	r3, [r3, #8]
 8002e14:	2b63      	cmp	r3, #99	; 0x63
 8002e16:	d802      	bhi.n	8002e1e <HAL_GPIO_EXTI_Callback+0x486>
					Fingers_Status.Thumb.Encoder=0;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x498>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	811a      	strh	r2, [r3, #8]
					break;
 8002e1e:	bf00      	nop
			break;
 8002e20:	e000      	b.n	8002e24 <HAL_GPIO_EXTI_Callback+0x48c>
			break;
 8002e22:	bf00      	nop
	}
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200014d0 	.word	0x200014d0

08002e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e38:	f000 fec0 	bl	8003bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3c:	f000 f817 	bl	8002e6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e40:	f7ff fcd4 	bl	80027ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8002e44:	f7ff f822 	bl	8001e8c <MX_ADC1_Init>
  MX_CAN_Init();
 8002e48:	f7ff fb54 	bl	80024f4 <MX_CAN_Init>
  MX_TIM1_Init();
 8002e4c:	f000 f9ce 	bl	80031ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e50:	f000 fa72 	bl	8003338 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002e54:	f000 fb5e 	bl	8003514 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002e58:	f000 fb86 	bl	8003568 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_motor_controller();
 8002e5c:	f000 fe28 	bl	8003ab0 <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002e60:	f003 fde2 	bl	8006a28 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002e64:	f7ff fbda 	bl	800261c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e68:	f003 fe10 	bl	8006a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <main+0x38>

08002e6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b094      	sub	sp, #80	; 0x50
 8002e72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e78:	2228      	movs	r2, #40	; 0x28
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f006 fad5 	bl	800942c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002eb2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fef1 	bl	8004ca4 <HAL_RCC_OscConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ec8:	f000 f83a 	bl	8002f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ecc:	230f      	movs	r3, #15
 8002ece:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002edc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 f95d 	bl	80051a8 <HAL_RCC_ClockConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002ef4:	f000 f824 	bl	8002f40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f00:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fb17 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f10:	f000 f816 	bl	8002f40 <Error_Handler>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3750      	adds	r7, #80	; 0x50
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f2e:	f000 fe5b 	bl	8003be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40000400 	.word	0x40000400

08002f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f44:	b672      	cpsid	i
}
 8002f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <Error_Handler+0x8>
	...

08002f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6193      	str	r3, [r2, #24]
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_MspInit+0x68>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	210f      	movs	r1, #15
 8002f86:	f06f 0001 	mvn.w	r0, #1
 8002f8a:	f001 fc36 	bl	80047fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_MspInit+0x6c>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_MspInit+0x6c>)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010000 	.word	0x40010000

08002fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_InitTick+0xe8>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <HAL_InitTick+0xe8>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	61d3      	str	r3, [r2, #28]
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_InitTick+0xe8>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 fa51 	bl	800549c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003004:	f002 fa22 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8003008:	6378      	str	r0, [r7, #52]	; 0x34
 800300a:	e004      	b.n	8003016 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800300c:	f002 fa1e 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8003010:	4603      	mov	r3, r0
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_InitTick+0xec>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	3b01      	subs	r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003024:	4b21      	ldr	r3, [pc, #132]	; (80030ac <HAL_InitTick+0xf0>)
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_InitTick+0xf4>)
 8003028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_InitTick+0xf0>)
 800302c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003030:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003032:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_InitTick+0xf0>)
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_InitTick+0xf0>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_InitTick+0xf0>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_InitTick+0xf0>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800304a:	4818      	ldr	r0, [pc, #96]	; (80030ac <HAL_InitTick+0xf0>)
 800304c:	f002 fbea 	bl	8005824 <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11b      	bne.n	8003096 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800305e:	4813      	ldr	r0, [pc, #76]	; (80030ac <HAL_InitTick+0xf0>)
 8003060:	f002 fc14 	bl	800588c <HAL_TIM_Base_Start_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800306a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800306e:	2b00      	cmp	r3, #0
 8003070:	d111      	bne.n	8003096 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003072:	201d      	movs	r0, #29
 8003074:	f001 fbdd 	bl	8004832 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d808      	bhi.n	8003090 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800307e:	2200      	movs	r2, #0
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	201d      	movs	r0, #29
 8003084:	f001 fbb9 	bl	80047fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_InitTick+0xf8>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e002      	b.n	8003096 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800309a:	4618      	mov	r0, r3
 800309c:	3738      	adds	r7, #56	; 0x38
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	20001390 	.word	0x20001390
 80030b0:	40000400 	.word	0x40000400
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder1_Pin);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f001 fdc4 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder2_Pin);
 80030f4:	2002      	movs	r0, #2
 80030f6:	f001 fdbd 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}

080030fe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder1_Pin);
 8003102:	2010      	movs	r0, #16
 8003104:	f001 fdb6 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder2_Pin);
 8003110:	2020      	movs	r0, #32
 8003112:	f001 fdaf 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder1_Pin);
 8003116:	2040      	movs	r0, #64	; 0x40
 8003118:	f001 fdac 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder2_Pin);
 800311c:	2080      	movs	r0, #128	; 0x80
 800311e:	f001 fda9 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <TIM3_IRQHandler+0x10>)
 800312e:	f002 fc2d 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20001390 	.word	0x20001390

0800313c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <USART1_IRQHandler+0x10>)
 8003142:	f003 f96b 	bl	800641c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20001450 	.word	0x20001450

08003150 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <USART3_IRQHandler+0x10>)
 8003156:	f003 f961 	bl	800641c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20001490 	.word	0x20001490

08003164 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder2_Pin);
 8003168:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800316c:	f001 fd82 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder1_Pin);
 8003170:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003174:	f001 fd7e 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder2_Pin);
 8003178:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800317c:	f001 fd7a 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <SystemInit+0x5c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <SystemInit+0x5c>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <SystemInit+0x5c>)
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4911      	ldr	r1, [pc, #68]	; (80031e0 <SystemInit+0x5c>)
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <SystemInit+0x60>)
 800319c:	4013      	ands	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <SystemInit+0x5c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <SystemInit+0x5c>)
 80031a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <SystemInit+0x5c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <SystemInit+0x5c>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SystemInit+0x5c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <SystemInit+0x5c>)
 80031c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SystemInit+0x5c>)
 80031ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80031ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SystemInit+0x64>)
 80031d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40021000 	.word	0x40021000
 80031e4:	f8ff0000 	.word	0xf8ff0000
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
 800320c:	615a      	str	r2, [r3, #20]
 800320e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	2220      	movs	r2, #32
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f006 f908 	bl	800942c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800321c:	4b44      	ldr	r3, [pc, #272]	; (8003330 <MX_TIM1_Init+0x144>)
 800321e:	4a45      	ldr	r2, [pc, #276]	; (8003334 <MX_TIM1_Init+0x148>)
 8003220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8003222:	4b43      	ldr	r3, [pc, #268]	; (8003330 <MX_TIM1_Init+0x144>)
 8003224:	2213      	movs	r2, #19
 8003226:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003228:	4b41      	ldr	r3, [pc, #260]	; (8003330 <MX_TIM1_Init+0x144>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800322e:	4b40      	ldr	r3, [pc, #256]	; (8003330 <MX_TIM1_Init+0x144>)
 8003230:	2263      	movs	r2, #99	; 0x63
 8003232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <MX_TIM1_Init+0x144>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <MX_TIM1_Init+0x144>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <MX_TIM1_Init+0x144>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003246:	483a      	ldr	r0, [pc, #232]	; (8003330 <MX_TIM1_Init+0x144>)
 8003248:	f002 fb43 	bl	80058d2 <HAL_TIM_PWM_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8003252:	f7ff fe75 	bl	8002f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800325e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003262:	4619      	mov	r1, r3
 8003264:	4832      	ldr	r0, [pc, #200]	; (8003330 <MX_TIM1_Init+0x144>)
 8003266:	f002 ff91 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003270:	f7ff fe66 	bl	8002f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003274:	2360      	movs	r3, #96	; 0x60
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003294:	2200      	movs	r2, #0
 8003296:	4619      	mov	r1, r3
 8003298:	4825      	ldr	r0, [pc, #148]	; (8003330 <MX_TIM1_Init+0x144>)
 800329a:	f002 fc7f 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80032a4:	f7ff fe4c 	bl	8002f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	2204      	movs	r2, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	481f      	ldr	r0, [pc, #124]	; (8003330 <MX_TIM1_Init+0x144>)
 80032b2:	f002 fc73 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80032bc:	f7ff fe40 	bl	8002f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	2208      	movs	r2, #8
 80032c6:	4619      	mov	r1, r3
 80032c8:	4819      	ldr	r0, [pc, #100]	; (8003330 <MX_TIM1_Init+0x144>)
 80032ca:	f002 fc67 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80032d4:	f7ff fe34 	bl	8002f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	220c      	movs	r2, #12
 80032de:	4619      	mov	r1, r3
 80032e0:	4813      	ldr	r0, [pc, #76]	; (8003330 <MX_TIM1_Init+0x144>)
 80032e2:	f002 fc5b 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80032ec:	f7ff fe28 	bl	8002f40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4807      	ldr	r0, [pc, #28]	; (8003330 <MX_TIM1_Init+0x144>)
 8003314:	f002 ff7e 	bl	8006214 <HAL_TIMEx_ConfigBreakDeadTime>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800331e:	f7ff fe0f 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003322:	4803      	ldr	r0, [pc, #12]	; (8003330 <MX_TIM1_Init+0x144>)
 8003324:	f000 f890 	bl	8003448 <HAL_TIM_MspPostInit>

}
 8003328:	bf00      	nop
 800332a:	3748      	adds	r7, #72	; 0x48
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200013d0 	.word	0x200013d0
 8003334:	40012c00 	.word	0x40012c00

08003338 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333e:	f107 0320 	add.w	r3, r7, #32
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	611a      	str	r2, [r3, #16]
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <MX_TIM2_Init+0xac>)
 800335c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003360:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <MX_TIM2_Init+0xac>)
 8003364:	2213      	movs	r2, #19
 8003366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <MX_TIM2_Init+0xac>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <MX_TIM2_Init+0xac>)
 8003370:	2263      	movs	r2, #99	; 0x63
 8003372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <MX_TIM2_Init+0xac>)
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <MX_TIM2_Init+0xac>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003380:	4818      	ldr	r0, [pc, #96]	; (80033e4 <MX_TIM2_Init+0xac>)
 8003382:	f002 faa6 	bl	80058d2 <HAL_TIM_PWM_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800338c:	f7ff fdd8 	bl	8002f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003398:	f107 0320 	add.w	r3, r7, #32
 800339c:	4619      	mov	r1, r3
 800339e:	4811      	ldr	r0, [pc, #68]	; (80033e4 <MX_TIM2_Init+0xac>)
 80033a0:	f002 fef4 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80033aa:	f7ff fdc9 	bl	8002f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ae:	2360      	movs	r3, #96	; 0x60
 80033b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	4619      	mov	r1, r3
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_TIM2_Init+0xac>)
 80033c6:	f002 fbe9 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80033d0:	f7ff fdb6 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033d4:	4803      	ldr	r0, [pc, #12]	; (80033e4 <MX_TIM2_Init+0xac>)
 80033d6:	f000 f837 	bl	8003448 <HAL_TIM_MspPostInit>

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20001410 	.word	0x20001410

080033e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_TIM_PWM_MspInit+0x58>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10c      	bne.n	8003414 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 8003400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003404:	6193      	str	r3, [r2, #24]
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003412:	e010      	b.n	8003436 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d10b      	bne.n	8003436 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_TIM_PWM_MspInit+0x5c>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_TIM_MspPostInit+0xbc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin|Motor2_PWM_Pin|Motor3_PWM_Pin|Motor4_PWM_Pin;
 8003480:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2302      	movs	r3, #2
 800348c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	481d      	ldr	r0, [pc, #116]	; (800350c <HAL_TIM_MspPostInit+0xc4>)
 8003496:	f001 fa51 	bl	800493c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800349a:	e02f      	b.n	80034fc <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d12a      	bne.n	80034fc <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_TIM_MspPostInit+0xc0>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor5_PWM_Pin;
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2302      	movs	r3, #2
 80034ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor5_PWM_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4619      	mov	r1, r3
 80034d2:	480e      	ldr	r0, [pc, #56]	; (800350c <HAL_TIM_MspPostInit+0xc4>)
 80034d4:	f001 fa32 	bl	800493c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_TIM_MspPostInit+0xc8>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	4a06      	ldr	r2, [pc, #24]	; (8003510 <HAL_TIM_MspPostInit+0xc8>)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	6053      	str	r3, [r2, #4]
}
 80034fc:	bf00      	nop
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40021000 	.word	0x40021000
 800350c:	40010800 	.word	0x40010800
 8003510:	40010000 	.word	0x40010000

08003514 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <MX_USART1_UART_Init+0x50>)
 800351c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 8003520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 800353a:	220c      	movs	r2, #12
 800353c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 8003546:	2200      	movs	r2, #0
 8003548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800354a:	4805      	ldr	r0, [pc, #20]	; (8003560 <MX_USART1_UART_Init+0x4c>)
 800354c:	f002 fec5 	bl	80062da <HAL_UART_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003556:	f7ff fcf3 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20001450 	.word	0x20001450
 8003564:	40013800 	.word	0x40013800

08003568 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <MX_USART3_UART_Init+0x50>)
 8003570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 800358e:	220c      	movs	r2, #12
 8003590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800359e:	4805      	ldr	r0, [pc, #20]	; (80035b4 <MX_USART3_UART_Init+0x4c>)
 80035a0:	f002 fe9b 	bl	80062da <HAL_UART_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035aa:	f7ff fcc9 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20001490 	.word	0x20001490
 80035b8:	40004800 	.word	0x40004800

080035bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08c      	sub	sp, #48	; 0x30
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 031c 	add.w	r3, r7, #28
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a46      	ldr	r2, [pc, #280]	; (80036f0 <HAL_UART_MspInit+0x134>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d146      	bne.n	800366a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035dc:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <HAL_UART_MspInit+0x138>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a44      	ldr	r2, [pc, #272]	; (80036f4 <HAL_UART_MspInit+0x138>)
 80035e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b42      	ldr	r3, [pc, #264]	; (80036f4 <HAL_UART_MspInit+0x138>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b3f      	ldr	r3, [pc, #252]	; (80036f4 <HAL_UART_MspInit+0x138>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a3e      	ldr	r2, [pc, #248]	; (80036f4 <HAL_UART_MspInit+0x138>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <HAL_UART_MspInit+0x138>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 800360c:	2340      	movs	r3, #64	; 0x40
 800360e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003614:	2303      	movs	r3, #3
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4836      	ldr	r0, [pc, #216]	; (80036f8 <HAL_UART_MspInit+0x13c>)
 8003620:	f001 f98c 	bl	800493c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	4830      	ldr	r0, [pc, #192]	; (80036f8 <HAL_UART_MspInit+0x13c>)
 8003638:	f001 f980 	bl	800493c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <HAL_UART_MspInit+0x140>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_UART_MspInit+0x140>)
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2107      	movs	r1, #7
 800365c:	2025      	movs	r0, #37	; 0x25
 800365e:	f001 f8cc 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003662:	2025      	movs	r0, #37	; 0x25
 8003664:	f001 f8e5 	bl	8004832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003668:	e03e      	b.n	80036e8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <HAL_UART_MspInit+0x144>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d139      	bne.n	80036e8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <HAL_UART_MspInit+0x138>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_UART_MspInit+0x138>)
 800367a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <HAL_UART_MspInit+0x138>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_UART_MspInit+0x138>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0x138>)
 8003692:	f043 0308 	orr.w	r3, r3, #8
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_UART_MspInit+0x138>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b2:	f107 031c 	add.w	r3, r7, #28
 80036b6:	4619      	mov	r1, r3
 80036b8:	480f      	ldr	r0, [pc, #60]	; (80036f8 <HAL_UART_MspInit+0x13c>)
 80036ba:	f001 f93f 	bl	800493c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036cc:	f107 031c 	add.w	r3, r7, #28
 80036d0:	4619      	mov	r1, r3
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <HAL_UART_MspInit+0x13c>)
 80036d4:	f001 f932 	bl	800493c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2105      	movs	r1, #5
 80036dc:	2027      	movs	r0, #39	; 0x27
 80036de:	f001 f88c 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036e2:	2027      	movs	r0, #39	; 0x27
 80036e4:	f001 f8a5 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80036e8:	bf00      	nop
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010c00 	.word	0x40010c00
 80036fc:	40010000 	.word	0x40010000
 8003700:	40004800 	.word	0x40004800

08003704 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2203      	movs	r2, #3
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <SetMotor>:
	}
}
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b04      	cmp	r3, #4
 8003750:	f200 81a0 	bhi.w	8003a94 <SetMotor+0x354>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <SetMotor+0x1c>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003771 	.word	0x08003771
 8003760:	080037fb 	.word	0x080037fb
 8003764:	0800389b 	.word	0x0800389b
 8003768:	0800393b 	.word	0x0800393b
 800376c:	080039cf 	.word	0x080039cf
	case Thumb :
		if ( FingerStruct->Direction== Open) {
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	7a9b      	ldrb	r3, [r3, #10]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10f      	bne.n	8003798 <SetMotor+0x58>
			htim2.Instance->CCR1 = FingerStruct->speed;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	7b9a      	ldrb	r2, [r3, #14]
 800377c:	4b9f      	ldr	r3, [pc, #636]	; (80039fc <SetMotor+0x2bc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2108      	movs	r1, #8
 8003786:	489e      	ldr	r0, [pc, #632]	; (8003a00 <SetMotor+0x2c0>)
 8003788:	f001 fa5c 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 800378c:	2201      	movs	r2, #1
 800378e:	2104      	movs	r1, #4
 8003790:	489c      	ldr	r0, [pc, #624]	; (8003a04 <SetMotor+0x2c4>)
 8003792:	f001 fa57 	bl	8004c44 <HAL_GPIO_WritePin>
 8003796:	e021      	b.n	80037dc <SetMotor+0x9c>
		} else if (FingerStruct->Direction == Close) {
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	7a9b      	ldrb	r3, [r3, #10]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d10f      	bne.n	80037c0 <SetMotor+0x80>
			htim2.Instance->CCR1 = FingerStruct->speed;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	7b9a      	ldrb	r2, [r3, #14]
 80037a4:	4b95      	ldr	r3, [pc, #596]	; (80039fc <SetMotor+0x2bc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 80037aa:	2201      	movs	r2, #1
 80037ac:	2108      	movs	r1, #8
 80037ae:	4894      	ldr	r0, [pc, #592]	; (8003a00 <SetMotor+0x2c0>)
 80037b0:	f001 fa48 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2104      	movs	r1, #4
 80037b8:	4892      	ldr	r0, [pc, #584]	; (8003a04 <SetMotor+0x2c4>)
 80037ba:	f001 fa43 	bl	8004c44 <HAL_GPIO_WritePin>
 80037be:	e00d      	b.n	80037dc <SetMotor+0x9c>
		} else {
			htim2.Instance->CCR1 = 0;
 80037c0:	4b8e      	ldr	r3, [pc, #568]	; (80039fc <SetMotor+0x2bc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 80037c8:	2201      	movs	r2, #1
 80037ca:	2108      	movs	r1, #8
 80037cc:	488c      	ldr	r0, [pc, #560]	; (8003a00 <SetMotor+0x2c0>)
 80037ce:	f001 fa39 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 80037d2:	2201      	movs	r2, #1
 80037d4:	2104      	movs	r1, #4
 80037d6:	488b      	ldr	r0, [pc, #556]	; (8003a04 <SetMotor+0x2c4>)
 80037d8:	f001 fa34 	bl	8004c44 <HAL_GPIO_WritePin>
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	891b      	ldrh	r3, [r3, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd f9ff 	bl	8000be4 <__aeabi_ui2f>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4987      	ldr	r1, [pc, #540]	; (8003a08 <SetMotor+0x2c8>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fa52 	bl	8000c94 <__aeabi_fmul>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	605a      	str	r2, [r3, #4]
		break;
 80037f8:	e14d      	b.n	8003a96 <SetMotor+0x356>
	case Index :
		if ( FingerStruct->Direction== Open) {
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	7a9b      	ldrb	r3, [r3, #10]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d111      	bne.n	8003826 <SetMotor+0xe6>
			htim1.Instance->CCR4 = FingerStruct->speed;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	7b9a      	ldrb	r2, [r3, #14]
 8003806:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <SetMotor+0x2cc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003812:	487b      	ldr	r0, [pc, #492]	; (8003a00 <SetMotor+0x2c0>)
 8003814:	f001 fa16 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8003818:	2201      	movs	r2, #1
 800381a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800381e:	4878      	ldr	r0, [pc, #480]	; (8003a00 <SetMotor+0x2c0>)
 8003820:	f001 fa10 	bl	8004c44 <HAL_GPIO_WritePin>
 8003824:	e025      	b.n	8003872 <SetMotor+0x132>
		} else if (FingerStruct->Direction == Close) {
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	7a9b      	ldrb	r3, [r3, #10]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d111      	bne.n	8003852 <SetMotor+0x112>
			htim1.Instance->CCR4 = FingerStruct->speed;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	7b9a      	ldrb	r2, [r3, #14]
 8003832:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <SetMotor+0x2cc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8003838:	2201      	movs	r2, #1
 800383a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800383e:	4870      	ldr	r0, [pc, #448]	; (8003a00 <SetMotor+0x2c0>)
 8003840:	f001 fa00 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800384a:	486d      	ldr	r0, [pc, #436]	; (8003a00 <SetMotor+0x2c0>)
 800384c:	f001 f9fa 	bl	8004c44 <HAL_GPIO_WritePin>
 8003850:	e00f      	b.n	8003872 <SetMotor+0x132>
		} else {
			htim1.Instance->CCR4 = 0;
 8003852:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <SetMotor+0x2cc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 800385a:	2201      	movs	r2, #1
 800385c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003860:	4867      	ldr	r0, [pc, #412]	; (8003a00 <SetMotor+0x2c0>)
 8003862:	f001 f9ef 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8003866:	2201      	movs	r2, #1
 8003868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800386c:	4864      	ldr	r0, [pc, #400]	; (8003a00 <SetMotor+0x2c0>)
 800386e:	f001 f9e9 	bl	8004c44 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	891b      	ldrh	r3, [r3, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd f9b4 	bl	8000be4 <__aeabi_ui2f>
 800387c:	4603      	mov	r3, r0
 800387e:	4964      	ldr	r1, [pc, #400]	; (8003a10 <SetMotor+0x2d0>)
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fabb 	bl	8000dfc <__aeabi_fdiv>
 8003886:	4603      	mov	r3, r0
 8003888:	495f      	ldr	r1, [pc, #380]	; (8003a08 <SetMotor+0x2c8>)
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fa02 	bl	8000c94 <__aeabi_fmul>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	605a      	str	r2, [r3, #4]
		break;
 8003898:	e0fd      	b.n	8003a96 <SetMotor+0x356>
	case Middle :
		if ( FingerStruct->Direction== Open) {
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	7a9b      	ldrb	r3, [r3, #10]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d111      	bne.n	80038c6 <SetMotor+0x186>
			htim1.Instance->CCR3 = FingerStruct->speed;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	7b9a      	ldrb	r2, [r3, #14]
 80038a6:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <SetMotor+0x2cc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 0);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b2:	4853      	ldr	r0, [pc, #332]	; (8003a00 <SetMotor+0x2c0>)
 80038b4:	f001 f9c6 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 80038b8:	2201      	movs	r2, #1
 80038ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038be:	4850      	ldr	r0, [pc, #320]	; (8003a00 <SetMotor+0x2c0>)
 80038c0:	f001 f9c0 	bl	8004c44 <HAL_GPIO_WritePin>
 80038c4:	e025      	b.n	8003912 <SetMotor+0x1d2>
		} else if (FingerStruct->Direction == Close) {
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7a9b      	ldrb	r3, [r3, #10]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d111      	bne.n	80038f2 <SetMotor+0x1b2>
			htim1.Instance->CCR3 = FingerStruct->speed;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7b9a      	ldrb	r2, [r3, #14]
 80038d2:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <SetMotor+0x2cc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038de:	4848      	ldr	r0, [pc, #288]	; (8003a00 <SetMotor+0x2c0>)
 80038e0:	f001 f9b0 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ea:	4845      	ldr	r0, [pc, #276]	; (8003a00 <SetMotor+0x2c0>)
 80038ec:	f001 f9aa 	bl	8004c44 <HAL_GPIO_WritePin>
 80038f0:	e00f      	b.n	8003912 <SetMotor+0x1d2>
		} else {
			htim1.Instance->CCR3 = 0;
 80038f2:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <SetMotor+0x2cc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 80038fa:	2201      	movs	r2, #1
 80038fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003900:	483f      	ldr	r0, [pc, #252]	; (8003a00 <SetMotor+0x2c0>)
 8003902:	f001 f99f 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8003906:	2201      	movs	r2, #1
 8003908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800390c:	483c      	ldr	r0, [pc, #240]	; (8003a00 <SetMotor+0x2c0>)
 800390e:	f001 f999 	bl	8004c44 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	891b      	ldrh	r3, [r3, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f964 	bl	8000be4 <__aeabi_ui2f>
 800391c:	4603      	mov	r3, r0
 800391e:	493d      	ldr	r1, [pc, #244]	; (8003a14 <SetMotor+0x2d4>)
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fa6b 	bl	8000dfc <__aeabi_fdiv>
 8003926:	4603      	mov	r3, r0
 8003928:	4937      	ldr	r1, [pc, #220]	; (8003a08 <SetMotor+0x2c8>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd f9b2 	bl	8000c94 <__aeabi_fmul>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	605a      	str	r2, [r3, #4]
		break;
 8003938:	e0ad      	b.n	8003a96 <SetMotor+0x356>
	case Ring :
		if ( FingerStruct->Direction== Open) {
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	7a9b      	ldrb	r3, [r3, #10]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10f      	bne.n	8003962 <SetMotor+0x222>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	7b9a      	ldrb	r2, [r3, #14]
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <SetMotor+0x2cc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2140      	movs	r1, #64	; 0x40
 8003950:	4831      	ldr	r0, [pc, #196]	; (8003a18 <SetMotor+0x2d8>)
 8003952:	f001 f977 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 8003956:	2201      	movs	r2, #1
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	482f      	ldr	r0, [pc, #188]	; (8003a18 <SetMotor+0x2d8>)
 800395c:	f001 f972 	bl	8004c44 <HAL_GPIO_WritePin>
 8003960:	e021      	b.n	80039a6 <SetMotor+0x266>
		} else if (FingerStruct->Direction == Close) {
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7a9b      	ldrb	r3, [r3, #10]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d10f      	bne.n	800398a <SetMotor+0x24a>
			htim1.Instance->CCR2 = FingerStruct->speed;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	7b9a      	ldrb	r2, [r3, #14]
 800396e:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <SetMotor+0x2cc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8003974:	2201      	movs	r2, #1
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	4827      	ldr	r0, [pc, #156]	; (8003a18 <SetMotor+0x2d8>)
 800397a:	f001 f963 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	4825      	ldr	r0, [pc, #148]	; (8003a18 <SetMotor+0x2d8>)
 8003984:	f001 f95e 	bl	8004c44 <HAL_GPIO_WritePin>
 8003988:	e00d      	b.n	80039a6 <SetMotor+0x266>
		} else {
			htim1.Instance->CCR2 = 0;
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <SetMotor+0x2cc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8003992:	2201      	movs	r2, #1
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	4820      	ldr	r0, [pc, #128]	; (8003a18 <SetMotor+0x2d8>)
 8003998:	f001 f954 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 800399c:	2201      	movs	r2, #1
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	481d      	ldr	r0, [pc, #116]	; (8003a18 <SetMotor+0x2d8>)
 80039a2:	f001 f94f 	bl	8004c44 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	891b      	ldrh	r3, [r3, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd f91a 	bl	8000be4 <__aeabi_ui2f>
 80039b0:	4603      	mov	r3, r0
 80039b2:	491a      	ldr	r1, [pc, #104]	; (8003a1c <SetMotor+0x2dc>)
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fa21 	bl	8000dfc <__aeabi_fdiv>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4912      	ldr	r1, [pc, #72]	; (8003a08 <SetMotor+0x2c8>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f968 	bl	8000c94 <__aeabi_fmul>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	605a      	str	r2, [r3, #4]
		break;
 80039cc:	e063      	b.n	8003a96 <SetMotor+0x356>
	case Pinky :
		if ( FingerStruct->Direction== Open) {
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	7a9b      	ldrb	r3, [r3, #10]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d124      	bne.n	8003a20 <SetMotor+0x2e0>
			htim1.Instance->CCR1 = FingerStruct->speed;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	7b9a      	ldrb	r2, [r3, #14]
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <SetMotor+0x2cc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 0);
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039e6:	480c      	ldr	r0, [pc, #48]	; (8003a18 <SetMotor+0x2d8>)
 80039e8:	f001 f92c 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f2:	4809      	ldr	r0, [pc, #36]	; (8003a18 <SetMotor+0x2d8>)
 80039f4:	f001 f926 	bl	8004c44 <HAL_GPIO_WritePin>
 80039f8:	e038      	b.n	8003a6c <SetMotor+0x32c>
 80039fa:	bf00      	nop
 80039fc:	20001410 	.word	0x20001410
 8003a00:	40010c00 	.word	0x40010c00
 8003a04:	40011400 	.word	0x40011400
 8003a08:	42c80000 	.word	0x42c80000
 8003a0c:	200013d0 	.word	0x200013d0
 8003a10:	46d54800 	.word	0x46d54800
 8003a14:	46e03800 	.word	0x46e03800
 8003a18:	40011000 	.word	0x40011000
 8003a1c:	46d7a000 	.word	0x46d7a000
		} else if (FingerStruct->Direction == Close) {
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7a9b      	ldrb	r3, [r3, #10]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d111      	bne.n	8003a4c <SetMotor+0x30c>
			htim1.Instance->CCR1 = FingerStruct->speed;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7b9a      	ldrb	r2, [r3, #14]
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <SetMotor+0x360>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 8003a32:	2201      	movs	r2, #1
 8003a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a38:	481a      	ldr	r0, [pc, #104]	; (8003aa4 <SetMotor+0x364>)
 8003a3a:	f001 f903 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a44:	4817      	ldr	r0, [pc, #92]	; (8003aa4 <SetMotor+0x364>)
 8003a46:	f001 f8fd 	bl	8004c44 <HAL_GPIO_WritePin>
 8003a4a:	e00f      	b.n	8003a6c <SetMotor+0x32c>
		} else {
			htim1.Instance->CCR1 = 0;
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <SetMotor+0x360>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 8003a54:	2201      	movs	r2, #1
 8003a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a5a:	4812      	ldr	r0, [pc, #72]	; (8003aa4 <SetMotor+0x364>)
 8003a5c:	f001 f8f2 	bl	8004c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 8003a60:	2201      	movs	r2, #1
 8003a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a66:	480f      	ldr	r0, [pc, #60]	; (8003aa4 <SetMotor+0x364>)
 8003a68:	f001 f8ec 	bl	8004c44 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	891b      	ldrh	r3, [r3, #8]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fd f8b7 	bl	8000be4 <__aeabi_ui2f>
 8003a76:	4603      	mov	r3, r0
 8003a78:	490b      	ldr	r1, [pc, #44]	; (8003aa8 <SetMotor+0x368>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f9be 	bl	8000dfc <__aeabi_fdiv>
 8003a80:	4603      	mov	r3, r0
 8003a82:	490a      	ldr	r1, [pc, #40]	; (8003aac <SetMotor+0x36c>)
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd f905 	bl	8000c94 <__aeabi_fmul>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	605a      	str	r2, [r3, #4]
		break;
 8003a92:	e000      	b.n	8003a96 <SetMotor+0x356>

	default:

		break;
 8003a94:	bf00      	nop
	}
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200013d0 	.word	0x200013d0
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	46cbe800 	.word	0x46cbe800
 8003aac:	42c80000 	.word	0x42c80000

08003ab0 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	//start read data from ADC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4825      	ldr	r0, [pc, #148]	; (8003b4c <init_motor_controller+0x9c>)
 8003ab8:	f001 ff36 	bl	8005928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003abc:	2104      	movs	r1, #4
 8003abe:	4823      	ldr	r0, [pc, #140]	; (8003b4c <init_motor_controller+0x9c>)
 8003ac0:	f001 ff32 	bl	8005928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003ac4:	2108      	movs	r1, #8
 8003ac6:	4821      	ldr	r0, [pc, #132]	; (8003b4c <init_motor_controller+0x9c>)
 8003ac8:	f001 ff2e 	bl	8005928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003acc:	210c      	movs	r1, #12
 8003ace:	481f      	ldr	r0, [pc, #124]	; (8003b4c <init_motor_controller+0x9c>)
 8003ad0:	f001 ff2a 	bl	8005928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	481e      	ldr	r0, [pc, #120]	; (8003b50 <init_motor_controller+0xa0>)
 8003ad8:	f001 ff26 	bl	8005928 <HAL_TIM_PWM_Start>
	HAL_ADC_MspInit(&hadc1);
 8003adc:	481d      	ldr	r0, [pc, #116]	; (8003b54 <init_motor_controller+0xa4>)
 8003ade:	f7fe fa13 	bl	8001f08 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	491c      	ldr	r1, [pc, #112]	; (8003b58 <init_motor_controller+0xa8>)
 8003ae6:	481d      	ldr	r0, [pc, #116]	; (8003b5c <init_motor_controller+0xac>)
 8003ae8:	f002 fc44 	bl	8006374 <HAL_UART_Receive_IT>
	// Configure settings
	controller.AntiWindup = ENABLED;
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <init_motor_controller+0xb0>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <init_motor_controller+0xb0>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <init_motor_controller+0xb0>)
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <init_motor_controller+0xb4>)
 8003b00:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <init_motor_controller+0xb0>)
 8003b04:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <init_motor_controller+0xb8>)
 8003b06:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <init_motor_controller+0xb0>)
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <init_motor_controller+0xbc>)
 8003b0c:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <init_motor_controller+0xb0>)
 8003b10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b14:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <init_motor_controller+0xb0>)
 8003b18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b1c:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 8003b1e:	4810      	ldr	r0, [pc, #64]	; (8003b60 <init_motor_controller+0xb0>)
 8003b20:	f7ff fdf0 	bl	8003704 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <init_motor_controller+0xb0>)
 8003b26:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003b2a:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <init_motor_controller+0xb0>)
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <init_motor_controller+0xb4>)
 8003b30:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <init_motor_controller+0xb0>)
 8003b34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b38:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <init_motor_controller+0xb0>)
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <init_motor_controller+0xbc>)
 8003b3e:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <init_motor_controller+0xb0>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200013d0 	.word	0x200013d0
 8003b50:	20001410 	.word	0x20001410
 8003b54:	20000130 	.word	0x20000130
 8003b58:	2000012e 	.word	0x2000012e
 8003b5c:	20001450 	.word	0x20001450
 8003b60:	20001560 	.word	0x20001560
 8003b64:	42480000 	.word	0x42480000
 8003b68:	c2480000 	.word	0xc2480000
 8003b6c:	40400000 	.word	0x40400000

08003b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b72:	e003      	b.n	8003b7c <LoopCopyDataInit>

08003b74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b7a:	3104      	adds	r1, #4

08003b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b7c:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b84:	d3f6      	bcc.n	8003b74 <CopyDataInit>
  ldr r2, =_sbss
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b88:	e002      	b.n	8003b90 <LoopFillZerobss>

08003b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b8c:	f842 3b04 	str.w	r3, [r2], #4

08003b90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b94:	d3f9      	bcc.n	8003b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b96:	f7ff faf5 	bl	8003184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b9a:	f005 fcd1 	bl	8009540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b9e:	f7ff f949 	bl	8002e34 <main>
  bx lr
 8003ba2:	4770      	bx	lr
  ldr r3, =_sidata
 8003ba4:	0800a670 	.word	0x0800a670
  ldr r0, =_sdata
 8003ba8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bac:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003bb0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003bb4:	20003c30 	.word	0x20003c30

08003bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bb8:	e7fe      	b.n	8003bb8 <ADC1_2_IRQHandler>
	...

08003bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_Init+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_Init+0x28>)
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f000 fe09 	bl	80047e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd2:	200f      	movs	r0, #15
 8003bd4:	f7ff f9f2 	bl	8002fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bd8:	f7ff f9b8 	bl	8002f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_IncTick+0x1c>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_IncTick+0x20>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <HAL_IncTick+0x20>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	20000010 	.word	0x20000010
 8003c08:	2000159c 	.word	0x2000159c

08003c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <HAL_GetTick+0x10>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	2000159c 	.word	0x2000159c

08003c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0be      	b.n	8003dc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe f952 	bl	8001f08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fbdd 	bl	8004424 <ADC_ConversionStop_Disable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 8099 	bne.w	8003dae <HAL_ADC_Init+0x18e>
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 8095 	bne.w	8003dae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c8c:	f023 0302 	bic.w	r3, r3, #2
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ca0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7b1b      	ldrb	r3, [r3, #12]
 8003ca6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ca8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	d003      	beq.n	8003cc2 <HAL_ADC_Init+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_ADC_Init+0xa8>
 8003cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cc6:	e000      	b.n	8003cca <HAL_ADC_Init+0xaa>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7d1b      	ldrb	r3, [r3, #20]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d119      	bne.n	8003d0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7b1b      	ldrb	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	035a      	lsls	r2, r3, #13
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e00b      	b.n	8003d0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_ADC_Init+0x1a8>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d003      	beq.n	8003d46 <HAL_ADC_Init+0x126>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d104      	bne.n	8003d50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	051b      	lsls	r3, r3, #20
 8003d4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_ADC_Init+0x1ac>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d10b      	bne.n	8003d8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d8a:	e018      	b.n	8003dbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f023 0312 	bic.w	r3, r3, #18
 8003d94:	f043 0210 	orr.w	r2, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dac:	e007      	b.n	8003dbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	ffe1f7fd 	.word	0xffe1f7fd
 8003dcc:	ff1f0efe 	.word	0xff1f0efe

08003dd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_Start+0x1a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e098      	b.n	8003f1c <HAL_ADC_Start+0x14c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fac4 	bl	8004380 <ADC_Enable>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 8087 	bne.w	8003f12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a41      	ldr	r2, [pc, #260]	; (8003f24 <HAL_ADC_Start+0x154>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_Start+0x5e>
 8003e22:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_ADC_Start+0x158>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d115      	bne.n	8003e5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d026      	beq.n	8003e96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e58:	e01d      	b.n	8003e96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2f      	ldr	r2, [pc, #188]	; (8003f28 <HAL_ADC_Start+0x158>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_Start+0xaa>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <HAL_ADC_Start+0x154>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10d      	bne.n	8003e96 <HAL_ADC_Start+0xc6>
 8003e7a:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_ADC_Start+0x158>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f023 0206 	bic.w	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0202 	mvn.w	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ed2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ed6:	d113      	bne.n	8003f00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003edc:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <HAL_ADC_Start+0x154>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d105      	bne.n	8003eee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_ADC_Start+0x158>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d108      	bne.n	8003f00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	e00c      	b.n	8003f1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	e003      	b.n	8003f1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40012800 	.word	0x40012800
 8003f28:	40012400 	.word	0x40012400

08003f2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_Stop+0x1a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e01a      	b.n	8003f7c <HAL_ADC_Stop+0x50>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa68 	bl	8004424 <ADC_ConversionStop_Disable>
 8003f54:	4603      	mov	r3, r0
 8003f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f9a:	f7ff fe37 	bl	8003c0c <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0c8      	b.n	8004158 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d12a      	bne.n	800402a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d123      	bne.n	800402a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003fe2:	e01a      	b.n	800401a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d016      	beq.n	800401a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_ADC_PollForConversion+0x7e>
 8003ff2:	f7ff fe0b 	bl	8003c0c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20b      	bcs.n	800401a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e09e      	b.n	8004158 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0dd      	beq.n	8003fe4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004028:	e06c      	b.n	8004104 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800402a:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <HAL_ADC_PollForConversion+0x1dc>)
 800402c:	681c      	ldr	r4, [r3, #0]
 800402e:	2002      	movs	r0, #2
 8004030:	f001 fb38 	bl	80056a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004034:	4603      	mov	r3, r0
 8004036:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6919      	ldr	r1, [r3, #16]
 8004040:	4b48      	ldr	r3, [pc, #288]	; (8004164 <HAL_ADC_PollForConversion+0x1e0>)
 8004042:	400b      	ands	r3, r1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d118      	bne.n	800407a <HAL_ADC_PollForConversion+0xf6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68d9      	ldr	r1, [r3, #12]
 800404e:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_ADC_PollForConversion+0x1e4>)
 8004050:	400b      	ands	r3, r1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d111      	bne.n	800407a <HAL_ADC_PollForConversion+0xf6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6919      	ldr	r1, [r3, #16]
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_ADC_PollForConversion+0x1e8>)
 800405e:	400b      	ands	r3, r1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <HAL_ADC_PollForConversion+0xf2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68d9      	ldr	r1, [r3, #12]
 800406a:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_ADC_PollForConversion+0x1ec>)
 800406c:	400b      	ands	r3, r1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_PollForConversion+0xf2>
 8004072:	2314      	movs	r3, #20
 8004074:	e020      	b.n	80040b8 <HAL_ADC_PollForConversion+0x134>
 8004076:	2329      	movs	r3, #41	; 0x29
 8004078:	e01e      	b.n	80040b8 <HAL_ADC_PollForConversion+0x134>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6919      	ldr	r1, [r3, #16]
 8004080:	4b3a      	ldr	r3, [pc, #232]	; (800416c <HAL_ADC_PollForConversion+0x1e8>)
 8004082:	400b      	ands	r3, r1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_ADC_PollForConversion+0x112>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68d9      	ldr	r1, [r3, #12]
 800408e:	4b38      	ldr	r3, [pc, #224]	; (8004170 <HAL_ADC_PollForConversion+0x1ec>)
 8004090:	400b      	ands	r3, r1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_ADC_PollForConversion+0x12e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6919      	ldr	r1, [r3, #16]
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <HAL_ADC_PollForConversion+0x1f0>)
 800409e:	400b      	ands	r3, r1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <HAL_ADC_PollForConversion+0x132>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68d9      	ldr	r1, [r3, #12]
 80040aa:	4b32      	ldr	r3, [pc, #200]	; (8004174 <HAL_ADC_PollForConversion+0x1f0>)
 80040ac:	400b      	ands	r3, r1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_PollForConversion+0x132>
 80040b2:	2354      	movs	r3, #84	; 0x54
 80040b4:	e000      	b.n	80040b8 <HAL_ADC_PollForConversion+0x134>
 80040b6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040be:	e01d      	b.n	80040fc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d016      	beq.n	80040f6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_ADC_PollForConversion+0x15a>
 80040ce:	f7ff fd9d 	bl	8003c0c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d20b      	bcs.n	80040f6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e030      	b.n	8004158 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d8dd      	bhi.n	80040c0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0212 	mvn.w	r2, #18
 800410c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004124:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004128:	d115      	bne.n	8004156 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800412e:	2b00      	cmp	r3, #0
 8004130:	d111      	bne.n	8004156 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd90      	pop	{r4, r7, pc}
 8004160:	20000008 	.word	0x20000008
 8004164:	24924924 	.word	0x24924924
 8004168:	00924924 	.word	0x00924924
 800416c:	12492492 	.word	0x12492492
 8004170:	00492492 	.word	0x00492492
 8004174:	00249249 	.word	0x00249249

08004178 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x20>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0dc      	b.n	800436a <HAL_ADC_ConfigChannel+0x1da>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b06      	cmp	r3, #6
 80041be:	d81c      	bhi.n	80041fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	3b05      	subs	r3, #5
 80041d2:	221f      	movs	r2, #31
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	4019      	ands	r1, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	3b05      	subs	r3, #5
 80041ec:	fa00 f203 	lsl.w	r2, r0, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34
 80041f8:	e03c      	b.n	8004274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d81c      	bhi.n	800423c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	3b23      	subs	r3, #35	; 0x23
 8004214:	221f      	movs	r2, #31
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	4019      	ands	r1, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	3b23      	subs	r3, #35	; 0x23
 800422e:	fa00 f203 	lsl.w	r2, r0, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
 800423a:	e01b      	b.n	8004274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	3b41      	subs	r3, #65	; 0x41
 800424e:	221f      	movs	r2, #31
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	4019      	ands	r1, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	3b41      	subs	r3, #65	; 0x41
 8004268:	fa00 f203 	lsl.w	r2, r0, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b09      	cmp	r3, #9
 800427a:	d91c      	bls.n	80042b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	3b1e      	subs	r3, #30
 800428e:	2207      	movs	r2, #7
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	4019      	ands	r1, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6898      	ldr	r0, [r3, #8]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	3b1e      	subs	r3, #30
 80042a8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e019      	b.n	80042ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6919      	ldr	r1, [r3, #16]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4413      	add	r3, r2
 80042c6:	2207      	movs	r2, #7
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	4019      	ands	r1, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6898      	ldr	r0, [r3, #8]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	fa00 f203 	lsl.w	r2, r0, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d003      	beq.n	80042fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042f6:	2b11      	cmp	r3, #17
 80042f8:	d132      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_ADC_ConfigChannel+0x1e4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d125      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d126      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004320:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b10      	cmp	r3, #16
 8004328:	d11a      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_ADC_ConfigChannel+0x1e8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_ADC_ConfigChannel+0x1ec>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	0c9a      	lsrs	r2, r3, #18
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004340:	e002      	b.n	8004348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3b01      	subs	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x1b2>
 800434e:	e007      	b.n	8004360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012400 	.word	0x40012400
 8004378:	20000008 	.word	0x20000008
 800437c:	431bde83 	.word	0x431bde83

08004380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d039      	beq.n	8004412 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <ADC_Enable+0x9c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <ADC_Enable+0xa0>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	0c9b      	lsrs	r3, r3, #18
 80043ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043bc:	e002      	b.n	80043c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f9      	bne.n	80043be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043ca:	f7ff fc1f 	bl	8003c0c <HAL_GetTick>
 80043ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80043d0:	e018      	b.n	8004404 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043d2:	f7ff fc1b 	bl	8003c0c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d911      	bls.n	8004404 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f043 0210 	orr.w	r2, r3, #16
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d1df      	bne.n	80043d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000008 	.word	0x20000008
 8004420:	431bde83 	.word	0x431bde83

08004424 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d127      	bne.n	800448e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800444e:	f7ff fbdd 	bl	8003c0c <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004454:	e014      	b.n	8004480 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004456:	f7ff fbd9 	bl	8003c0c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d90d      	bls.n	8004480 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e007      	b.n	8004490 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d0e3      	beq.n	8004456 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0ed      	b.n	8004686 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe f850 	bl	800255c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0202 	bic.w	r2, r2, #2
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044cc:	f7ff fb9e 	bl	8003c0c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044d2:	e012      	b.n	80044fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044d4:	f7ff fb9a 	bl	8003c0c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b0a      	cmp	r3, #10
 80044e0:	d90b      	bls.n	80044fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2205      	movs	r2, #5
 80044f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0c5      	b.n	8004686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7ff fb78 	bl	8003c0c <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800451e:	e012      	b.n	8004546 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004520:	f7ff fb74 	bl	8003c0c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b0a      	cmp	r3, #10
 800452c:	d90b      	bls.n	8004546 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2205      	movs	r2, #5
 800453e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e09f      	b.n	8004686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0e5      	beq.n	8004520 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7e1b      	ldrb	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d108      	bne.n	800456e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e007      	b.n	800457e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7e5b      	ldrb	r3, [r3, #25]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e007      	b.n	80045a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7e9b      	ldrb	r3, [r3, #26]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0220 	orr.w	r2, r2, #32
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e007      	b.n	80045d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0220 	bic.w	r2, r2, #32
 80045d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7edb      	ldrb	r3, [r3, #27]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0210 	bic.w	r2, r2, #16
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0210 	orr.w	r2, r2, #16
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7f1b      	ldrb	r3, [r3, #28]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d108      	bne.n	8004616 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e007      	b.n	8004626 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0208 	bic.w	r2, r2, #8
 8004624:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f5b      	ldrb	r3, [r3, #29]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d108      	bne.n	8004640 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0204 	orr.w	r2, r2, #4
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e007      	b.n	8004650 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046c2:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	60d3      	str	r3, [r2, #12]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <__NVIC_GetPriorityGrouping+0x18>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	f003 0307 	and.w	r3, r3, #7
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	2b00      	cmp	r3, #0
 8004704:	db0b      	blt.n	800471e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	f003 021f 	and.w	r2, r3, #31
 800470c:	4906      	ldr	r1, [pc, #24]	; (8004728 <__NVIC_EnableIRQ+0x34>)
 800470e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2001      	movs	r0, #1
 8004716:	fa00 f202 	lsl.w	r2, r0, r2
 800471a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100

0800472c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	2b00      	cmp	r3, #0
 800473e:	db0a      	blt.n	8004756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	490c      	ldr	r1, [pc, #48]	; (8004778 <__NVIC_SetPriority+0x4c>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	440b      	add	r3, r1
 8004750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004754:	e00a      	b.n	800476c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4908      	ldr	r1, [pc, #32]	; (800477c <__NVIC_SetPriority+0x50>)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3b04      	subs	r3, #4
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	440b      	add	r3, r1
 800476a:	761a      	strb	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	e000e100 	.word	0xe000e100
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f1c3 0307 	rsb	r3, r3, #7
 800479a:	2b04      	cmp	r3, #4
 800479c:	bf28      	it	cs
 800479e:	2304      	movcs	r3, #4
 80047a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d902      	bls.n	80047b0 <NVIC_EncodePriority+0x30>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3b03      	subs	r3, #3
 80047ae:	e000      	b.n	80047b2 <NVIC_EncodePriority+0x32>
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	401a      	ands	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c8:	f04f 31ff 	mov.w	r1, #4294967295
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43d9      	mvns	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	4313      	orrs	r3, r2
         );
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff4f 	bl	8004690 <__NVIC_SetPriorityGrouping>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800480c:	f7ff ff64 	bl	80046d8 <__NVIC_GetPriorityGrouping>
 8004810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff ffb2 	bl	8004780 <NVIC_EncodePriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff81 	bl	800472c <__NVIC_SetPriority>
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff57 	bl	80046f4 <__NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004862:	2b02      	cmp	r3, #2
 8004864:	d005      	beq.n	8004872 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2204      	movs	r2, #4
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e051      	b.n	8004916 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 020e 	bic.w	r2, r2, #14
 8004880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a22      	ldr	r2, [pc, #136]	; (8004920 <HAL_DMA_Abort_IT+0xd0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d029      	beq.n	80048f0 <HAL_DMA_Abort_IT+0xa0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <HAL_DMA_Abort_IT+0xd4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_DMA_Abort_IT+0x9c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_DMA_Abort_IT+0xd8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d01a      	beq.n	80048e6 <HAL_DMA_Abort_IT+0x96>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_DMA_Abort_IT+0xdc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d012      	beq.n	80048e0 <HAL_DMA_Abort_IT+0x90>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_DMA_Abort_IT+0xe0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00a      	beq.n	80048da <HAL_DMA_Abort_IT+0x8a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_DMA_Abort_IT+0xe4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d102      	bne.n	80048d4 <HAL_DMA_Abort_IT+0x84>
 80048ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048d2:	e00e      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d8:	e00b      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048de:	e008      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e4:	e005      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ea:	e002      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048ec:	2310      	movs	r3, #16
 80048ee:	e000      	b.n	80048f2 <HAL_DMA_Abort_IT+0xa2>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4a11      	ldr	r2, [pc, #68]	; (8004938 <HAL_DMA_Abort_IT+0xe8>)
 80048f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
    } 
  }
  return status;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40020008 	.word	0x40020008
 8004924:	4002001c 	.word	0x4002001c
 8004928:	40020030 	.word	0x40020030
 800492c:	40020044 	.word	0x40020044
 8004930:	40020058 	.word	0x40020058
 8004934:	4002006c 	.word	0x4002006c
 8004938:	40020000 	.word	0x40020000

0800493c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800493c:	b480      	push	{r7}
 800493e:	b08b      	sub	sp, #44	; 0x2c
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494e:	e169      	b.n	8004c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004950:	2201      	movs	r2, #1
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	f040 8158 	bne.w	8004c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a9a      	ldr	r2, [pc, #616]	; (8004bdc <HAL_GPIO_Init+0x2a0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d05e      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004978:	4a98      	ldr	r2, [pc, #608]	; (8004bdc <HAL_GPIO_Init+0x2a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d875      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 800497e:	4a98      	ldr	r2, [pc, #608]	; (8004be0 <HAL_GPIO_Init+0x2a4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d058      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004984:	4a96      	ldr	r2, [pc, #600]	; (8004be0 <HAL_GPIO_Init+0x2a4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d86f      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 800498a:	4a96      	ldr	r2, [pc, #600]	; (8004be4 <HAL_GPIO_Init+0x2a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d052      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004990:	4a94      	ldr	r2, [pc, #592]	; (8004be4 <HAL_GPIO_Init+0x2a8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d869      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 8004996:	4a94      	ldr	r2, [pc, #592]	; (8004be8 <HAL_GPIO_Init+0x2ac>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d04c      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 800499c:	4a92      	ldr	r2, [pc, #584]	; (8004be8 <HAL_GPIO_Init+0x2ac>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d863      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049a2:	4a92      	ldr	r2, [pc, #584]	; (8004bec <HAL_GPIO_Init+0x2b0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d046      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 80049a8:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_GPIO_Init+0x2b0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d85d      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d82a      	bhi.n	8004a08 <HAL_GPIO_Init+0xcc>
 80049b2:	2b12      	cmp	r3, #18
 80049b4:	d859      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_GPIO_Init+0x80>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	08004a37 	.word	0x08004a37
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a23 	.word	0x08004a23
 80049c8:	08004a65 	.word	0x08004a65
 80049cc:	08004a6b 	.word	0x08004a6b
 80049d0:	08004a6b 	.word	0x08004a6b
 80049d4:	08004a6b 	.word	0x08004a6b
 80049d8:	08004a6b 	.word	0x08004a6b
 80049dc:	08004a6b 	.word	0x08004a6b
 80049e0:	08004a6b 	.word	0x08004a6b
 80049e4:	08004a6b 	.word	0x08004a6b
 80049e8:	08004a6b 	.word	0x08004a6b
 80049ec:	08004a6b 	.word	0x08004a6b
 80049f0:	08004a6b 	.word	0x08004a6b
 80049f4:	08004a6b 	.word	0x08004a6b
 80049f8:	08004a6b 	.word	0x08004a6b
 80049fc:	08004a6b 	.word	0x08004a6b
 8004a00:	08004a19 	.word	0x08004a19
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	4a79      	ldr	r2, [pc, #484]	; (8004bf0 <HAL_GPIO_Init+0x2b4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0e:	e02c      	b.n	8004a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	623b      	str	r3, [r7, #32]
          break;
 8004a16:	e029      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	623b      	str	r3, [r7, #32]
          break;
 8004a20:	e024      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3308      	adds	r3, #8
 8004a28:	623b      	str	r3, [r7, #32]
          break;
 8004a2a:	e01f      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	330c      	adds	r3, #12
 8004a32:	623b      	str	r3, [r7, #32]
          break;
 8004a34:	e01a      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a3e:	2304      	movs	r3, #4
 8004a40:	623b      	str	r3, [r7, #32]
          break;
 8004a42:	e013      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	611a      	str	r2, [r3, #16]
          break;
 8004a56:	e009      	b.n	8004a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	615a      	str	r2, [r3, #20]
          break;
 8004a62:	e003      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
          break;
 8004a68:	e000      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          break;
 8004a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2bff      	cmp	r3, #255	; 0xff
 8004a70:	d801      	bhi.n	8004a76 <HAL_GPIO_Init+0x13a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	e001      	b.n	8004a7a <HAL_GPIO_Init+0x13e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d802      	bhi.n	8004a88 <HAL_GPIO_Init+0x14c>
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	e002      	b.n	8004a8e <HAL_GPIO_Init+0x152>
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	3b08      	subs	r3, #8
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	210f      	movs	r1, #15
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	6a39      	ldr	r1, [r7, #32]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80b1 	beq.w	8004c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004abc:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4a4c      	ldr	r2, [pc, #304]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6193      	str	r3, [r2, #24]
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ad4:	4a48      	ldr	r2, [pc, #288]	; (8004bf8 <HAL_GPIO_Init+0x2bc>)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	3302      	adds	r3, #2
 8004adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	220f      	movs	r2, #15
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <HAL_GPIO_Init+0x2c0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3f      	ldr	r2, [pc, #252]	; (8004c00 <HAL_GPIO_Init+0x2c4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00d      	beq.n	8004b24 <HAL_GPIO_Init+0x1e8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <HAL_GPIO_Init+0x2c8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <HAL_GPIO_Init+0x1e4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_GPIO_Init+0x2cc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_GPIO_Init+0x1e0>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e006      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e004      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e002      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	f002 0203 	and.w	r2, r2, #3
 8004b30:	0092      	lsls	r2, r2, #2
 8004b32:	4093      	lsls	r3, r2
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b3a:	492f      	ldr	r1, [pc, #188]	; (8004bf8 <HAL_GPIO_Init+0x2bc>)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	492c      	ldr	r1, [pc, #176]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
 8004b60:	e006      	b.n	8004b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	4928      	ldr	r1, [pc, #160]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4922      	ldr	r1, [pc, #136]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	491e      	ldr	r1, [pc, #120]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4918      	ldr	r1, [pc, #96]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	4914      	ldr	r1, [pc, #80]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d021      	beq.n	8004c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
 8004bd8:	e021      	b.n	8004c1e <HAL_GPIO_Init+0x2e2>
 8004bda:	bf00      	nop
 8004bdc:	10320000 	.word	0x10320000
 8004be0:	10310000 	.word	0x10310000
 8004be4:	10220000 	.word	0x10220000
 8004be8:	10210000 	.word	0x10210000
 8004bec:	10120000 	.word	0x10120000
 8004bf0:	10110000 	.word	0x10110000
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010800 	.word	0x40010800
 8004c00:	40010c00 	.word	0x40010c00
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40011400 	.word	0x40011400
 8004c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_GPIO_Init+0x304>)
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <HAL_GPIO_Init+0x304>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	3301      	adds	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f47f ae8e 	bne.w	8004950 <HAL_GPIO_Init+0x14>
  }
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	372c      	adds	r7, #44	; 0x2c
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40010400 	.word	0x40010400

08004c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	807b      	strh	r3, [r7, #2]
 8004c50:	4613      	mov	r3, r2
 8004c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c54:	787b      	ldrb	r3, [r7, #1]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c5a:	887a      	ldrh	r2, [r7, #2]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c60:	e003      	b.n	8004c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	041a      	lsls	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	611a      	str	r2, [r3, #16]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fe80 	bl	8002998 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e272      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8087 	beq.w	8004dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cc4:	4b92      	ldr	r3, [pc, #584]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d00c      	beq.n	8004cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cd0:	4b8f      	ldr	r3, [pc, #572]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d112      	bne.n	8004d02 <HAL_RCC_OscConfig+0x5e>
 8004cdc:	4b8c      	ldr	r3, [pc, #560]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d10b      	bne.n	8004d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cea:	4b89      	ldr	r3, [pc, #548]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d06c      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x12c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d168      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e24c      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d106      	bne.n	8004d1a <HAL_RCC_OscConfig+0x76>
 8004d0c:	4b80      	ldr	r3, [pc, #512]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a7f      	ldr	r2, [pc, #508]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	e02e      	b.n	8004d78 <HAL_RCC_OscConfig+0xd4>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x98>
 8004d22:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7a      	ldr	r2, [pc, #488]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b78      	ldr	r3, [pc, #480]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a77      	ldr	r2, [pc, #476]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e01d      	b.n	8004d78 <HAL_RCC_OscConfig+0xd4>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0xbc>
 8004d46:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a71      	ldr	r2, [pc, #452]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	4b6f      	ldr	r3, [pc, #444]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6e      	ldr	r2, [pc, #440]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0xd4>
 8004d60:	4b6b      	ldr	r3, [pc, #428]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a6a      	ldr	r2, [pc, #424]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a67      	ldr	r2, [pc, #412]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d013      	beq.n	8004da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe ff44 	bl	8003c0c <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7fe ff40 	bl	8003c0c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e200      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0xe4>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da8:	f7fe ff30 	bl	8003c0c <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db0:	f7fe ff2c 	bl	8003c0c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	; 0x64
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e1ec      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc2:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x10c>
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d063      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dde:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dea:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d11c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x18c>
 8004df6:	4b46      	ldr	r3, [pc, #280]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d116      	bne.n	8004e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_RCC_OscConfig+0x176>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d001      	beq.n	8004e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e1c0      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4939      	ldr	r1, [pc, #228]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2e:	e03a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e38:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3e:	f7fe fee5 	bl	8003c0c <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fe fee1 	bl	8003c0c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e1a1      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e58:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4927      	ldr	r1, [pc, #156]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]
 8004e78:	e015      	b.n	8004ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fe fec4 	bl	8003c0c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e88:	f7fe fec0 	bl	8003c0c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e180      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03a      	beq.n	8004f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d019      	beq.n	8004eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec0:	f7fe fea4 	bl	8003c0c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fe fea0 	bl	8003c0c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e160      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f000 fb08 	bl	80054fc <RCC_Delay>
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef4:	f7fe fe8a 	bl	8003c0c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efa:	e00f      	b.n	8004f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fe fe86 	bl	8003c0c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d908      	bls.n	8004f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e146      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	42420000 	.word	0x42420000
 8004f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f1c:	4b92      	ldr	r3, [pc, #584]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e9      	bne.n	8004efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a6 	beq.w	8005082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3a:	4b8b      	ldr	r3, [pc, #556]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	4a87      	ldr	r2, [pc, #540]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	61d3      	str	r3, [r2, #28]
 8004f52:	4b85      	ldr	r3, [pc, #532]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b82      	ldr	r3, [pc, #520]	; (800516c <HAL_RCC_OscConfig+0x4c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	; (800516c <HAL_RCC_OscConfig+0x4c8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7e      	ldr	r2, [pc, #504]	; (800516c <HAL_RCC_OscConfig+0x4c8>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fe47 	bl	8003c0c <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fe fe43 	bl	8003c0c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b64      	cmp	r3, #100	; 0x64
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e103      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b75      	ldr	r3, [pc, #468]	; (800516c <HAL_RCC_OscConfig+0x4c8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d106      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x312>
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4a6e      	ldr	r2, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6213      	str	r3, [r2, #32]
 8004fb4:	e02d      	b.n	8005012 <HAL_RCC_OscConfig+0x36e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x334>
 8004fbe:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a69      	ldr	r2, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	6213      	str	r3, [r2, #32]
 8004fca:	4b67      	ldr	r3, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a66      	ldr	r2, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6213      	str	r3, [r2, #32]
 8004fd6:	e01c      	b.n	8005012 <HAL_RCC_OscConfig+0x36e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x356>
 8004fe0:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a60      	ldr	r2, [pc, #384]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	6213      	str	r3, [r2, #32]
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4a5d      	ldr	r2, [pc, #372]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6213      	str	r3, [r2, #32]
 8004ff8:	e00b      	b.n	8005012 <HAL_RCC_OscConfig+0x36e>
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a5a      	ldr	r2, [pc, #360]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	6213      	str	r3, [r2, #32]
 8005006:	4b58      	ldr	r3, [pc, #352]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4a57      	ldr	r2, [pc, #348]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	f023 0304 	bic.w	r3, r3, #4
 8005010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d015      	beq.n	8005046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501a:	f7fe fdf7 	bl	8003c0c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fe fdf3 	bl	8003c0c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e0b1      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ee      	beq.n	8005022 <HAL_RCC_OscConfig+0x37e>
 8005044:	e014      	b.n	8005070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005046:	f7fe fde1 	bl	8003c0c <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fe fddd 	bl	8003c0c <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	; 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e09b      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005064:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ee      	bne.n	800504e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d105      	bne.n	8005082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005076:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4a3b      	ldr	r2, [pc, #236]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8087 	beq.w	800519a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d061      	beq.n	800515c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d146      	bne.n	800512e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b33      	ldr	r3, [pc, #204]	; (8005170 <HAL_RCC_OscConfig+0x4cc>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fe fdb1 	bl	8003c0c <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fe fdad 	bl	8003c0c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e06d      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d108      	bne.n	80050e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4921      	ldr	r1, [pc, #132]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a19      	ldr	r1, [r3, #32]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	430b      	orrs	r3, r1
 80050fa:	491b      	ldr	r1, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCC_OscConfig+0x4cc>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005106:	f7fe fd81 	bl	8003c0c <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510e:	f7fe fd7d 	bl	8003c0c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e03d      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x46a>
 800512c:	e035      	b.n	800519a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_RCC_OscConfig+0x4cc>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fe fd6a 	bl	8003c0c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fe fd66 	bl	8003c0c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e026      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x498>
 800515a:	e01e      	b.n	800519a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e019      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
 8005170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_OscConfig+0x500>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	429a      	cmp	r2, r3
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d001      	beq.n	800519a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0d0      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051bc:	4b6a      	ldr	r3, [pc, #424]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d910      	bls.n	80051ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b67      	ldr	r3, [pc, #412]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 0207 	bic.w	r2, r3, #7
 80051d2:	4965      	ldr	r1, [pc, #404]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b63      	ldr	r3, [pc, #396]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0b8      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a58      	ldr	r2, [pc, #352]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800520e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800521c:	4b53      	ldr	r3, [pc, #332]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a52      	ldr	r2, [pc, #328]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b50      	ldr	r3, [pc, #320]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	494d      	ldr	r1, [pc, #308]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d040      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d115      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07f      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e073      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e06b      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f023 0203 	bic.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4936      	ldr	r1, [pc, #216]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005298:	f7fe fcb8 	bl	8003c0c <HAL_GetTick>
 800529c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a0:	f7fe fcb4 	bl	8003c0c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e053      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 020c 	and.w	r2, r3, #12
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d1eb      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d210      	bcs.n	80052f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 0207 	bic.w	r2, r3, #7
 80052de:	4922      	ldr	r1, [pc, #136]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e032      	b.n	800535e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4916      	ldr	r1, [pc, #88]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	490e      	ldr	r1, [pc, #56]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005336:	f000 f821 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	490a      	ldr	r1, [pc, #40]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005348:	5ccb      	ldrb	r3, [r1, r3]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_RCC_ClockConfig+0x1cc>)
 8005350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_ClockConfig+0x1d0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd fe30 	bl	8002fbc <HAL_InitTick>

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40022000 	.word	0x40022000
 800536c:	40021000 	.word	0x40021000
 8005370:	0800a620 	.word	0x0800a620
 8005374:	20000008 	.word	0x20000008
 8005378:	2000000c 	.word	0x2000000c

0800537c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800537c:	b490      	push	{r4, r7}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCC_GetSysClockFreq+0xac>)
 8005384:	1d3c      	adds	r4, r7, #4
 8005386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800538c:	f240 2301 	movw	r3, #513	; 0x201
 8005390:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCC_GetSysClockFreq+0xb0>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d002      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x40>
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d003      	beq.n	80053c2 <HAL_RCC_GetSysClockFreq+0x46>
 80053ba:	e02b      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053be:	623b      	str	r3, [r7, #32]
      break;
 80053c0:	e02b      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	0c9b      	lsrs	r3, r3, #18
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3328      	adds	r3, #40	; 0x28
 80053cc:	443b      	add	r3, r7
 80053ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d012      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <HAL_RCC_GetSysClockFreq+0xb0>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0c5b      	lsrs	r3, r3, #17
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	3328      	adds	r3, #40	; 0x28
 80053ea:	443b      	add	r3, r7
 80053ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053f6:	fb03 f202 	mul.w	r2, r3, r2
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
 8005402:	e004      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005408:	fb02 f303 	mul.w	r3, r2, r3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	623b      	str	r3, [r7, #32]
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005416:	623b      	str	r3, [r7, #32]
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	6a3b      	ldr	r3, [r7, #32]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3728      	adds	r7, #40	; 0x28
 8005420:	46bd      	mov	sp, r7
 8005422:	bc90      	pop	{r4, r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	0800a510 	.word	0x0800a510
 800542c:	40021000 	.word	0x40021000
 8005430:	007a1200 	.word	0x007a1200
 8005434:	003d0900 	.word	0x003d0900

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <HAL_RCC_GetHCLKFreq+0x10>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	20000008 	.word	0x20000008

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff2 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	0800a630 	.word	0x0800a630

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffde 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	0adb      	lsrs	r3, r3, #11
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	0800a630 	.word	0x0800a630

0800549c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	220f      	movs	r2, #15
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_RCC_GetClockConfig+0x58>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 0203 	and.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_RCC_GetClockConfig+0x58>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_GetClockConfig+0x58>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_RCC_GetClockConfig+0x58>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	08db      	lsrs	r3, r3, #3
 80054d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0207 	and.w	r2, r3, #7
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40022000 	.word	0x40022000

080054fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <RCC_Delay+0x34>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <RCC_Delay+0x38>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	0a5b      	lsrs	r3, r3, #9
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005518:	bf00      	nop
  }
  while (Delay --);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	60fa      	str	r2, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f9      	bne.n	8005518 <RCC_Delay+0x1c>
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	20000008 	.word	0x20000008
 8005534:	10624dd3 	.word	0x10624dd3

08005538 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07d      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005554:	2300      	movs	r3, #0
 8005556:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005564:	4b4c      	ldr	r3, [pc, #304]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4a4b      	ldr	r2, [pc, #300]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556e:	61d3      	str	r3, [r2, #28]
 8005570:	4b49      	ldr	r3, [pc, #292]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	4b46      	ldr	r3, [pc, #280]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d118      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558c:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a42      	ldr	r2, [pc, #264]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005598:	f7fe fb38 	bl	8003c0c <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559e:	e008      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fe fb34 	bl	8003c0c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e06d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055be:	4b36      	ldr	r3, [pc, #216]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02e      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d027      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055dc:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055f2:	4a29      	ldr	r2, [pc, #164]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d014      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005602:	f7fe fb03 	bl	8003c0c <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	e00a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fe faff 	bl	8003c0c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e036      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ee      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4917      	ldr	r1, [pc, #92]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563a:	4313      	orrs	r3, r2
 800563c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	4313      	orrs	r3, r2
 800566c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4904      	ldr	r1, [pc, #16]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	40007000 	.word	0x40007000
 80056a0:	42420440 	.word	0x42420440

080056a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b08d      	sub	sp, #52	; 0x34
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056ac:	4b58      	ldr	r3, [pc, #352]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80056ae:	f107 040c 	add.w	r4, r7, #12
 80056b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056b8:	f240 2301 	movw	r3, #513	; 0x201
 80056bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	2300      	movs	r3, #0
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	2300      	movs	r3, #0
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b10      	cmp	r3, #16
 80056dc:	f200 808e 	bhi.w	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d049      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d079      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80056ec:	e086      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80056ee:	4b49      	ldr	r3, [pc, #292]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80056f4:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d07f      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	0c9b      	lsrs	r3, r3, #18
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	3330      	adds	r3, #48	; 0x30
 800570a:	443b      	add	r3, r7
 800570c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005710:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d017      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800571c:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c5b      	lsrs	r3, r3, #17
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	3330      	adds	r3, #48	; 0x30
 8005728:	443b      	add	r3, r7
 800572a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800573a:	4a37      	ldr	r2, [pc, #220]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	e004      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	4a33      	ldr	r2, [pc, #204]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005762:	d102      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005768:	e04a      	b.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005778:	e042      	b.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	d108      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
 800579c:	e01f      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d109      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80057aa:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80057b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80057bc:	e00f      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d11c      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80057d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057dc:	e012      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80057de:	e011      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80057e0:	f7ff fe48 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	0b9b      	lsrs	r3, r3, #14
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	3301      	adds	r3, #1
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057fa:	e004      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80057fc:	bf00      	nop
 80057fe:	e002      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005804:	bf00      	nop
    }
  }
  return (frequency);
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005808:	4618      	mov	r0, r3
 800580a:	3734      	adds	r7, #52	; 0x34
 800580c:	46bd      	mov	sp, r7
 800580e:	bd90      	pop	{r4, r7, pc}
 8005810:	0800a520 	.word	0x0800a520
 8005814:	40021000 	.word	0x40021000
 8005818:	007a1200 	.word	0x007a1200
 800581c:	003d0900 	.word	0x003d0900
 8005820:	aaaaaaab 	.word	0xaaaaaaab

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e01d      	b.n	8005872 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f815 	bl	800587a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fa84 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e01d      	b.n	8005920 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fd fd75 	bl	80033e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f000 fa2d 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc02 	bl	8006144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a10      	ldr	r2, [pc, #64]	; (8005988 <HAL_TIM_PWM_Start+0x60>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d107      	bne.n	800595a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b06      	cmp	r3, #6
 800596a:	d007      	beq.n	800597c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00

0800598c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0202 	mvn.w	r2, #2
 80059b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9b3 	bl	8005d3a <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9a6 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9b5 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0204 	mvn.w	r2, #4
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f989 	bl	8005d3a <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f97c 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f98b 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0208 	mvn.w	r2, #8
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f95f 	bl	8005d3a <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f952 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f961 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f935 	bl	8005d3a <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f928 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f937 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0201 	mvn.w	r2, #1
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fd fa06 	bl	8002f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fbc6 	bl	80062c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8fb 	bl	8005d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0220 	mvn.w	r2, #32
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fb91 	bl	80062b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0b4      	b.n	8005d20 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	f200 809f 	bhi.w	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005d0d 	.word	0x08005d0d
 8005bdc:	08005d0d 	.word	0x08005d0d
 8005be0:	08005d0d 	.word	0x08005d0d
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005d0d 	.word	0x08005d0d
 8005bec:	08005d0d 	.word	0x08005d0d
 8005bf0:	08005d0d 	.word	0x08005d0d
 8005bf4:	08005c8b 	.word	0x08005c8b
 8005bf8:	08005d0d 	.word	0x08005d0d
 8005bfc:	08005d0d 	.word	0x08005d0d
 8005c00:	08005d0d 	.word	0x08005d0d
 8005c04:	08005ccb 	.word	0x08005ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f910 	bl	8005e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e062      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f956 	bl	8005f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e041      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f99f 	bl	8005fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e021      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f9e9 	bl	80060a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e000      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a29      	ldr	r2, [pc, #164]	; (8005e28 <TIM_Base_SetConfig+0xb8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x30>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x30>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <TIM_Base_SetConfig+0xbc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x30>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <TIM_Base_SetConfig+0xc0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <TIM_Base_SetConfig+0xb8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_Base_SetConfig+0x62>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d007      	beq.n	8005dd2 <TIM_Base_SetConfig+0x62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <TIM_Base_SetConfig+0xbc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_Base_SetConfig+0x62>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <TIM_Base_SetConfig+0xc0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d108      	bne.n	8005de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <TIM_Base_SetConfig+0xb8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d103      	bne.n	8005e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	615a      	str	r2, [r3, #20]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800

08005e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0302 	bic.w	r3, r3, #2
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <TIM_OC1_SetConfig+0xc8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0308 	bic.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a13      	ldr	r2, [pc, #76]	; (8005efc <TIM_OC1_SetConfig+0xc8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d111      	bne.n	8005ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00

08005f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0210 	bic.w	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 0320 	bic.w	r3, r3, #32
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <TIM_OC2_SetConfig+0xd0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10d      	bne.n	8005f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <TIM_OC2_SetConfig+0xd0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d113      	bne.n	8005fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	40012c00 	.word	0x40012c00

08005fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800601c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <TIM_OC3_SetConfig+0xd0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10d      	bne.n	800604e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800604c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <TIM_OC3_SetConfig+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d113      	bne.n	800607e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00

080060a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a0f      	ldr	r2, [pc, #60]	; (8006140 <TIM_OC4_SetConfig+0x98>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d109      	bne.n	800611c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	40012c00 	.word	0x40012c00

08006144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2201      	movs	r2, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	43db      	mvns	r3, r3
 8006166:	401a      	ands	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e032      	b.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061dc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800622c:	2302      	movs	r3, #2
 800622e:	e03d      	b.n	80062ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr

080062da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e03f      	b.n	800636c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fd f95b 	bl	80035bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	; 0x24
 800630a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 faa8 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006332:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006342:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006352:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b20      	cmp	r3, #32
 800638c:	d140      	bne.n	8006410 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_Receive_IT+0x26>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e039      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Receive_IT+0x38>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e032      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2222      	movs	r2, #34	; 0x22
 80063d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0220 	orr.w	r2, r2, #32
 800640a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e000      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006410:	2302      	movs	r3, #2
  }
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10d      	bne.n	800646e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_UART_IRQHandler+0x52>
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f982 	bl	8006770 <UART_Receive_IT>
      return;
 800646c:	e0cb      	b.n	8006606 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80ab 	beq.w	80065cc <HAL_UART_IRQHandler+0x1b0>
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d105      	bne.n	800648c <HAL_UART_IRQHandler+0x70>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80a0 	beq.w	80065cc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_UART_IRQHandler+0x90>
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_UART_IRQHandler+0xb0>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f043 0202 	orr.w	r2, r3, #2
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_UART_IRQHandler+0xd0>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	f043 0204 	orr.w	r2, r3, #4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_UART_IRQHandler+0xf0>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	f043 0208 	orr.w	r2, r3, #8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d077      	beq.n	8006604 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_UART_IRQHandler+0x112>
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f921 	bl	8006770 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf14      	ite	ne
 800653c:	2301      	movne	r3, #1
 800653e:	2300      	moveq	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_UART_IRQHandler+0x13a>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d031      	beq.n	80065ba <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f86c 	bl	8006634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d023      	beq.n	80065b2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <HAL_UART_IRQHandler+0x1f0>)
 8006588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f95e 	bl	8004850 <HAL_DMA_Abort_IT>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	e00e      	b.n	80065c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f839 	bl	8006622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	e00a      	b.n	80065c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f835 	bl	8006622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	e006      	b.n	80065c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f831 	bl	8006622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065c6:	e01d      	b.n	8006604 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	bf00      	nop
    return;
 80065ca:	e01b      	b.n	8006604 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <HAL_UART_IRQHandler+0x1cc>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f858 	bl	8006696 <UART_Transmit_IT>
    return;
 80065e6:	e00e      	b.n	8006606 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_UART_IRQHandler+0x1ea>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f89f 	bl	8006740 <UART_EndTransmit_IT>
    return;
 8006602:	e000      	b.n	8006606 <HAL_UART_IRQHandler+0x1ea>
    return;
 8006604:	bf00      	nop
  }
}
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	0800666f 	.word	0x0800666f

08006610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800664a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ffca 	bl	8006622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b21      	cmp	r3, #33	; 0x21
 80066a8:	d144      	bne.n	8006734 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b2:	d11a      	bne.n	80066ea <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	1c9a      	adds	r2, r3, #2
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]
 80066dc:	e00e      	b.n	80066fc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]
 80066e8:	e008      	b.n	80066fc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6211      	str	r1, [r2, #32]
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4619      	mov	r1, r3
 800670a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10f      	bne.n	8006730 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800672e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	e000      	b.n	8006736 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006734:	2302      	movs	r3, #2
  }
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006756:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff55 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b22      	cmp	r3, #34	; 0x22
 8006782:	d171      	bne.n	8006868 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678c:	d123      	bne.n	80067d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10e      	bne.n	80067ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
 80067b8:	e029      	b.n	800680e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	e01b      	b.n	800680e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6858      	ldr	r0, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6291      	str	r1, [r2, #40]	; 0x28
 80067ee:	b2c2      	uxtb	r2, r0
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	e00c      	b.n	800680e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	1c58      	adds	r0, r3, #1
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	6288      	str	r0, [r1, #40]	; 0x28
 8006806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29b      	uxth	r3, r3
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4619      	mov	r1, r3
 800681c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800681e:	2b00      	cmp	r3, #0
 8006820:	d120      	bne.n	8006864 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0220 	bic.w	r2, r2, #32
 8006830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006840:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695a      	ldr	r2, [r3, #20]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fb fac0 	bl	8001de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e002      	b.n	800686a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006868:	2302      	movs	r3, #2
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80068ae:	f023 030c 	bic.w	r3, r3, #12
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a52      	ldr	r2, [pc, #328]	; (8006a20 <UART_SetConfig+0x1ac>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d14e      	bne.n	800697a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7fe fdca 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80068e0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009a      	lsls	r2, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <UART_SetConfig+0x1b0>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	0119      	lsls	r1, r3, #4
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009a      	lsls	r2, r3, #2
 800690c:	441a      	add	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	fbb2 f2f3 	udiv	r2, r2, r3
 8006918:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <UART_SetConfig+0x1b0>)
 800691a:	fba3 0302 	umull	r0, r3, r3, r2
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	2064      	movs	r0, #100	; 0x64
 8006922:	fb00 f303 	mul.w	r3, r0, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	3332      	adds	r3, #50	; 0x32
 800692c:	4a3d      	ldr	r2, [pc, #244]	; (8006a24 <UART_SetConfig+0x1b0>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006938:	4419      	add	r1, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009a      	lsls	r2, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006950:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <UART_SetConfig+0x1b0>)
 8006952:	fba3 0302 	umull	r0, r3, r3, r2
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	2064      	movs	r0, #100	; 0x64
 800695a:	fb00 f303 	mul.w	r3, r0, r3
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	3332      	adds	r3, #50	; 0x32
 8006964:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <UART_SetConfig+0x1b0>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f003 020f 	and.w	r2, r3, #15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	440a      	add	r2, r1
 8006976:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006978:	e04d      	b.n	8006a16 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800697a:	f7fe fd67 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 800697e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009a      	lsls	r2, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	fbb2 f3f3 	udiv	r3, r2, r3
 8006996:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <UART_SetConfig+0x1b0>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	0119      	lsls	r1, r3, #4
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009a      	lsls	r2, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <UART_SetConfig+0x1b0>)
 80069b8:	fba3 0302 	umull	r0, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	2064      	movs	r0, #100	; 0x64
 80069c0:	fb00 f303 	mul.w	r3, r0, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	3332      	adds	r3, #50	; 0x32
 80069ca:	4a16      	ldr	r2, [pc, #88]	; (8006a24 <UART_SetConfig+0x1b0>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d6:	4419      	add	r1, r3
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009a      	lsls	r2, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <UART_SetConfig+0x1b0>)
 80069f0:	fba3 0302 	umull	r0, r3, r3, r2
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	2064      	movs	r0, #100	; 0x64
 80069f8:	fb00 f303 	mul.w	r3, r0, r3
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	3332      	adds	r3, #50	; 0x32
 8006a02:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <UART_SetConfig+0x1b0>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	f003 020f 	and.w	r2, r3, #15
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	440a      	add	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40013800 	.word	0x40013800
 8006a24:	51eb851f 	.word	0x51eb851f

08006a28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10f      	bne.n	8006a5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	607b      	str	r3, [r7, #4]
  return(result);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <osKernelInitialize+0x32>
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <osKernelInitialize+0x60>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d109      	bne.n	8006a62 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a52:	603b      	str	r3, [r7, #0]
  return(result);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a5a:	f06f 0305 	mvn.w	r3, #5
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e00c      	b.n	8006a7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <osKernelInitialize+0x60>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <osKernelInitialize+0x60>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e002      	b.n	8006a7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	200015a0 	.word	0x200015a0

08006a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a92:	f3ef 8305 	mrs	r3, IPSR
 8006a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10f      	bne.n	8006abe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa2:	607b      	str	r3, [r7, #4]
  return(result);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <osKernelStart+0x32>
 8006aaa:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <osKernelStart+0x64>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d109      	bne.n	8006ac6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006abe:	f06f 0305 	mvn.w	r3, #5
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e00e      	b.n	8006ae4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <osKernelStart+0x64>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <osKernelStart+0x64>)
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006ad4:	f001 f890 	bl	8007bf8 <vTaskStartScheduler>
      stat = osOK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e002      	b.n	8006ae4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200015a0 	.word	0x200015a0

08006af4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b092      	sub	sp, #72	; 0x48
 8006af8:	af04      	add	r7, sp, #16
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b04:	f3ef 8305 	mrs	r3, IPSR
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8094 	bne.w	8006c3a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b12:	f3ef 8310 	mrs	r3, PRIMASK
 8006b16:	623b      	str	r3, [r7, #32]
  return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 808d 	bne.w	8006c3a <osThreadNew+0x146>
 8006b20:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <osThreadNew+0x150>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d106      	bne.n	8006b36 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b28:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8082 	bne.w	8006c3a <osThreadNew+0x146>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d07e      	beq.n	8006c3a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b40:	2318      	movs	r3, #24
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b44:	2300      	movs	r3, #0
 8006b46:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b48:	f107 031b 	add.w	r3, r7, #27
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d045      	beq.n	8006be6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <osThreadNew+0x74>
        name = attr->name;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <osThreadNew+0x9a>
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	2b38      	cmp	r3, #56	; 0x38
 8006b80:	d805      	bhi.n	8006b8e <osThreadNew+0x9a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <osThreadNew+0x9e>
        return (NULL);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e054      	b.n	8006c3c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <osThreadNew+0xd4>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2ba7      	cmp	r3, #167	; 0xa7
 8006bb0:	d90a      	bls.n	8006bc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <osThreadNew+0xd4>
        mem = 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc6:	e010      	b.n	8006bea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <osThreadNew+0xf6>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d108      	bne.n	8006bea <osThreadNew+0xf6>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <osThreadNew+0xf6>
          mem = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be4:	e001      	b.n	8006bea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d110      	bne.n	8006c12 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fe12 	bl	8007830 <xTaskCreateStatic>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e013      	b.n	8006c3a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d110      	bne.n	8006c3a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f107 0314 	add.w	r3, r7, #20
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fe5c 	bl	80078e8 <xTaskCreate>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d001      	beq.n	8006c3a <osThreadNew+0x146>
          hTask = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c3a:	697b      	ldr	r3, [r7, #20]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3738      	adds	r7, #56	; 0x38
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200015a0 	.word	0x200015a0

08006c48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c50:	f3ef 8305 	mrs	r3, IPSR
 8006c54:	613b      	str	r3, [r7, #16]
  return(result);
 8006c56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10f      	bne.n	8006c7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <osDelay+0x34>
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <osDelay+0x58>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d109      	bne.n	8006c84 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c70:	f3ef 8311 	mrs	r3, BASEPRI
 8006c74:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <osDelay+0x3c>
    stat = osErrorISR;
 8006c7c:	f06f 0305 	mvn.w	r3, #5
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e007      	b.n	8006c94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ff7e 	bl	8007b90 <vTaskDelay>
    }
  }

  return (stat);
 8006c94:	697b      	ldr	r3, [r7, #20]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200015a0 	.word	0x200015a0

08006ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a06      	ldr	r2, [pc, #24]	; (8006ccc <vApplicationGetIdleTaskMemory+0x28>)
 8006cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4a05      	ldr	r2, [pc, #20]	; (8006cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	601a      	str	r2, [r3, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	200015a4 	.word	0x200015a4
 8006cd0:	2000164c 	.word	0x2000164c

08006cd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ce4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a06      	ldr	r2, [pc, #24]	; (8006d04 <vApplicationGetTimerTaskMemory+0x30>)
 8006cea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	2000184c 	.word	0x2000184c
 8006d04:	200018f4 	.word	0x200018f4

08006d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f103 0208 	add.w	r2, r3, #8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f103 0208 	add.w	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e00c      	b.n	8006dde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e002      	b.n	8006dd2 <vListInsert+0x2e>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d2f6      	bcs.n	8006dcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6892      	ldr	r2, [r2, #8]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6852      	ldr	r2, [r2, #4]
 8006e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d103      	bne.n	8006e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	1e5a      	subs	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr
	...

08006e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e92:	f001 fff3 	bl	8008e7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	441a      	add	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	22ff      	movs	r2, #255	; 0xff
 8006ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d114      	bne.n	8006f12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01a      	beq.n	8006f26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3310      	adds	r3, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f91b 	bl	8008130 <xTaskRemoveFromEventList>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d012      	beq.n	8006f26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f00:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <xQueueGenericReset+0xcc>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	e009      	b.n	8006f26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3310      	adds	r3, #16
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fef6 	bl	8006d08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fef1 	bl	8006d08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 ffd9 	bl	8008edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f2a:	2301      	movs	r3, #1
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	; 0x38
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <xQueueGenericCreateStatic+0x52>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <xQueueGenericCreateStatic+0x56>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericCreateStatic+0x58>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	623b      	str	r3, [r7, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <xQueueGenericCreateStatic+0x7e>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <xQueueGenericCreateStatic+0x82>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <xQueueGenericCreateStatic+0x84>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	61fb      	str	r3, [r7, #28]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fd6:	2350      	movs	r3, #80	; 0x50
 8006fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d00a      	beq.n	8006ff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	61bb      	str	r3, [r7, #24]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007008:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f805 	bl	8007026 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800701e:	4618      	mov	r0, r3
 8007020:	3730      	adds	r7, #48	; 0x30
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e002      	b.n	8007048 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007054:	2101      	movs	r1, #1
 8007056:	69b8      	ldr	r0, [r7, #24]
 8007058:	f7ff ff06 	bl	8006e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08e      	sub	sp, #56	; 0x38
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xQueueGenericSend+0x32>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <xQueueGenericSend+0x40>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <xQueueGenericSend+0x44>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <xQueueGenericSend+0x46>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <xQueueGenericSend+0x60>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d103      	bne.n	80070da <xQueueGenericSend+0x6e>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <xQueueGenericSend+0x72>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSend+0x74>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericSend+0x8e>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	623b      	str	r3, [r7, #32]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070fa:	f001 f9df 	bl	80084bc <xTaskGetSchedulerState>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <xQueueGenericSend+0x9e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <xQueueGenericSend+0xa2>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <xQueueGenericSend+0xa4>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xQueueGenericSend+0xbe>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	61fb      	str	r3, [r7, #28]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800712a:	f001 fea7 	bl	8008e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <xQueueGenericSend+0xd4>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d129      	bne.n	8007194 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007146:	f000 fa07 	bl	8007558 <prvCopyDataToQueue>
 800714a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d010      	beq.n	8007176 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f000 ffe9 	bl	8008130 <xTaskRemoveFromEventList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007164:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <xQueueGenericSend+0x1f8>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	e00a      	b.n	800718c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800717c:	4b39      	ldr	r3, [pc, #228]	; (8007264 <xQueueGenericSend+0x1f8>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800718c:	f001 fea6 	bl	8008edc <vPortExitCritical>
				return pdPASS;
 8007190:	2301      	movs	r3, #1
 8007192:	e063      	b.n	800725c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800719a:	f001 fe9f 	bl	8008edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	e05c      	b.n	800725c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f823 	bl	80081f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071b6:	f001 fe91 	bl	8008edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071ba:	f000 fd8d 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071be:	f001 fe5d 	bl	8008e7c <vPortEnterCritical>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d103      	bne.n	80071d8 <xQueueGenericSend+0x16c>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d103      	bne.n	80071ee <xQueueGenericSend+0x182>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ee:	f001 fe75 	bl	8008edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f2:	1d3a      	adds	r2, r7, #4
 80071f4:	f107 0314 	add.w	r3, r7, #20
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f812 	bl	8008224 <xTaskCheckForTimeOut>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d124      	bne.n	8007250 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007208:	f000 fa9e 	bl	8007748 <prvIsQueueFull>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	3310      	adds	r3, #16
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 ff38 	bl	8008090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007222:	f000 fa29 	bl	8007678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f000 fd65 	bl	8007cf4 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f af7c 	bne.w	800712a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007232:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <xQueueGenericSend+0x1f8>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	e772      	b.n	800712a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007246:	f000 fa17 	bl	8007678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800724a:	f000 fd53 	bl	8007cf4 <xTaskResumeAll>
 800724e:	e76c      	b.n	800712a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007252:	f000 fa11 	bl	8007678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007256:	f000 fd4d 	bl	8007cf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800725a:	2300      	movs	r3, #0
		}
	}
}
 800725c:	4618      	mov	r0, r3
 800725e:	3738      	adds	r7, #56	; 0x38
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	; 0x38
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <xQueueGenericSendFromISR+0x3c>
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <xQueueGenericSendFromISR+0x40>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <xQueueGenericSendFromISR+0x42>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	623b      	str	r3, [r7, #32]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d103      	bne.n	80072d2 <xQueueGenericSendFromISR+0x6a>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <xQueueGenericSendFromISR+0x6e>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <xQueueGenericSendFromISR+0x70>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61fb      	str	r3, [r7, #28]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072f2:	f001 fe85 	bl	8009000 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072f6:	f3ef 8211 	mrs	r2, BASEPRI
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	61ba      	str	r2, [r7, #24]
 800730c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800730e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <xQueueGenericSendFromISR+0xbc>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d12c      	bne.n	800737e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007334:	f000 f910 	bl	8007558 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007338:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d112      	bne.n	8007368 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	3324      	adds	r3, #36	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f000 feee 	bl	8008130 <xTaskRemoveFromEventList>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00e      	beq.n	8007378 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e007      	b.n	8007378 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800736c:	3301      	adds	r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	b25a      	sxtb	r2, r3
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007378:	2301      	movs	r3, #1
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800737c:	e001      	b.n	8007382 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800738c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007390:	4618      	mov	r0, r3
 8007392:	3738      	adds	r7, #56	; 0x38
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08c      	sub	sp, #48	; 0x30
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <xQueueReceive+0x30>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	623b      	str	r3, [r7, #32]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <xQueueReceive+0x3e>
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <xQueueReceive+0x42>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <xQueueReceive+0x44>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <xQueueReceive+0x5e>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	61fb      	str	r3, [r7, #28]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073f6:	f001 f861 	bl	80084bc <xTaskGetSchedulerState>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <xQueueReceive+0x6e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <xQueueReceive+0x72>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <xQueueReceive+0x74>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xQueueReceive+0x8e>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	61bb      	str	r3, [r7, #24]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007426:	f001 fd29 	bl	8008e7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01f      	beq.n	8007476 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743a:	f000 f8f7 	bl	800762c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	1e5a      	subs	r2, r3, #1
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	3310      	adds	r3, #16
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fe6c 	bl	8008130 <xTaskRemoveFromEventList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800745e:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <xQueueReceive+0x1bc>)
 8007460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800746e:	f001 fd35 	bl	8008edc <vPortExitCritical>
				return pdPASS;
 8007472:	2301      	movs	r3, #1
 8007474:	e069      	b.n	800754a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800747c:	f001 fd2e 	bl	8008edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007480:	2300      	movs	r3, #0
 8007482:	e062      	b.n	800754a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800748a:	f107 0310 	add.w	r3, r7, #16
 800748e:	4618      	mov	r0, r3
 8007490:	f000 feb2 	bl	80081f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007498:	f001 fd20 	bl	8008edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800749c:	f000 fc1c 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074a0:	f001 fcec 	bl	8008e7c <vPortEnterCritical>
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d103      	bne.n	80074ba <xQueueReceive+0x122>
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d103      	bne.n	80074d0 <xQueueReceive+0x138>
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d0:	f001 fd04 	bl	8008edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074d4:	1d3a      	adds	r2, r7, #4
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fea1 	bl	8008224 <xTaskCheckForTimeOut>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d123      	bne.n	8007530 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f000 f917 	bl	800771c <prvIsQueueEmpty>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d017      	beq.n	8007524 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fdc7 	bl	8008090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007504:	f000 f8b8 	bl	8007678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007508:	f000 fbf4 	bl	8007cf4 <xTaskResumeAll>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d189      	bne.n	8007426 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007512:	4b10      	ldr	r3, [pc, #64]	; (8007554 <xQueueReceive+0x1bc>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	e780      	b.n	8007426 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007526:	f000 f8a7 	bl	8007678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800752a:	f000 fbe3 	bl	8007cf4 <xTaskResumeAll>
 800752e:	e77a      	b.n	8007426 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007532:	f000 f8a1 	bl	8007678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007536:	f000 fbdd 	bl	8007cf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800753a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753c:	f000 f8ee 	bl	800771c <prvIsQueueEmpty>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	f43f af6f 	beq.w	8007426 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800754a:	4618      	mov	r0, r3
 800754c:	3730      	adds	r7, #48	; 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10d      	bne.n	8007592 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d14d      	bne.n	800761a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 ffb8 	bl	80084f8 <xTaskPriorityDisinherit>
 8007588:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	605a      	str	r2, [r3, #4]
 8007590:	e043      	b.n	800761a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d119      	bne.n	80075cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6898      	ldr	r0, [r3, #8]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	461a      	mov	r2, r3
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	f001 fff2 	bl	800958c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d32b      	bcc.n	800761a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	609a      	str	r2, [r3, #8]
 80075ca:	e026      	b.n	800761a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68d8      	ldr	r0, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	461a      	mov	r2, r3
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	f001 ffd8 	bl	800958c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	425b      	negs	r3, r3
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d207      	bcs.n	8007608 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	425b      	negs	r3, r3
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d105      	bne.n	800761a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3b01      	subs	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007622:	697b      	ldr	r3, [r7, #20]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d018      	beq.n	8007670 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	441a      	add	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d303      	bcc.n	8007660 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68d9      	ldr	r1, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	461a      	mov	r2, r3
 800766a:	6838      	ldr	r0, [r7, #0]
 800766c:	f001 ff8e 	bl	800958c <memcpy>
	}
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007680:	f001 fbfc 	bl	8008e7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800768a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800768c:	e011      	b.n	80076b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	d012      	beq.n	80076bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3324      	adds	r3, #36	; 0x24
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fd48 	bl	8008130 <xTaskRemoveFromEventList>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076a6:	f000 fe1f 	bl	80082e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dce9      	bgt.n	800768e <prvUnlockQueue+0x16>
 80076ba:	e000      	b.n	80076be <prvUnlockQueue+0x46>
					break;
 80076bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076c6:	f001 fc09 	bl	8008edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076ca:	f001 fbd7 	bl	8008e7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076d6:	e011      	b.n	80076fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d012      	beq.n	8007706 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3310      	adds	r3, #16
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fd23 	bl	8008130 <xTaskRemoveFromEventList>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076f0:	f000 fdfa 	bl	80082e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007700:	2b00      	cmp	r3, #0
 8007702:	dce9      	bgt.n	80076d8 <prvUnlockQueue+0x60>
 8007704:	e000      	b.n	8007708 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007706:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	22ff      	movs	r2, #255	; 0xff
 800770c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007710:	f001 fbe4 	bl	8008edc <vPortExitCritical>
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007724:	f001 fbaa 	bl	8008e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007730:	2301      	movs	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e001      	b.n	800773a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800773a:	f001 fbcf 	bl	8008edc <vPortExitCritical>

	return xReturn;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007750:	f001 fb94 	bl	8008e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775c:	429a      	cmp	r2, r3
 800775e:	d102      	bne.n	8007766 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e001      	b.n	800776a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800776a:	f001 fbb7 	bl	8008edc <vPortExitCritical>

	return xReturn;
 800776e:	68fb      	ldr	r3, [r7, #12]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e014      	b.n	80077b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007788:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <vQueueAddToRegistry+0x4c>)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007794:	490b      	ldr	r1, [pc, #44]	; (80077c4 <vQueueAddToRegistry+0x4c>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800779e:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <vQueueAddToRegistry+0x4c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077aa:	e006      	b.n	80077ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	d9e7      	bls.n	8007788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	20001cf4 	.word	0x20001cf4

080077c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077d8:	f001 fb50 	bl	8008e7c <vPortEnterCritical>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077e2:	b25b      	sxtb	r3, r3
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d103      	bne.n	80077f2 <vQueueWaitForMessageRestricted+0x2a>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	d103      	bne.n	8007808 <vQueueWaitForMessageRestricted+0x40>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007808:	f001 fb68 	bl	8008edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fc5b 	bl	80080d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007822:	6978      	ldr	r0, [r7, #20]
 8007824:	f7ff ff28 	bl	8007678 <prvUnlockQueue>
	}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af04      	add	r7, sp, #16
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xTaskCreateStatic+0x46>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61fb      	str	r3, [r7, #28]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007876:	23a8      	movs	r3, #168	; 0xa8
 8007878:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2ba8      	cmp	r3, #168	; 0xa8
 800787e:	d00a      	beq.n	8007896 <xTaskCreateStatic+0x66>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	61bb      	str	r3, [r7, #24]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01e      	beq.n	80078da <xTaskCreateStatic+0xaa>
 800789c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01b      	beq.n	80078da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078b4:	2300      	movs	r3, #0
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	9302      	str	r3, [sp, #8]
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f851 	bl	8007974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d4:	f000 f8ec 	bl	8007ab0 <prvAddNewTaskToReadyList>
 80078d8:	e001      	b.n	80078de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078de:	697b      	ldr	r3, [r7, #20]
	}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3728      	adds	r7, #40	; 0x28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08c      	sub	sp, #48	; 0x30
 80078ec:	af04      	add	r7, sp, #16
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fbbd 	bl	800907c <pvPortMalloc>
 8007902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00e      	beq.n	8007928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800790a:	20a8      	movs	r0, #168	; 0xa8
 800790c:	f001 fbb6 	bl	800907c <pvPortMalloc>
 8007910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
 800791e:	e005      	b.n	800792c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007920:	6978      	ldr	r0, [r7, #20]
 8007922:	f001 fc6f 	bl	8009204 <vPortFree>
 8007926:	e001      	b.n	800792c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d017      	beq.n	8007962 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	2300      	movs	r3, #0
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	9302      	str	r3, [sp, #8]
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f80f 	bl	8007974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007956:	69f8      	ldr	r0, [r7, #28]
 8007958:	f000 f8aa 	bl	8007ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800795c:	2301      	movs	r3, #1
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	e002      	b.n	8007968 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295
 8007966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007968:	69bb      	ldr	r3, [r7, #24]
	}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	461a      	mov	r2, r3
 800798c:	21a5      	movs	r1, #165	; 0xa5
 800798e:	f001 fd4d 	bl	800942c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800799c:	3b01      	subs	r3, #1
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f023 0307 	bic.w	r3, r3, #7
 80079aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	617b      	str	r3, [r7, #20]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	e012      	b.n	80079f8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	7819      	ldrb	r1, [r3, #0]
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	3334      	adds	r3, #52	; 0x34
 80079e2:	460a      	mov	r2, r1
 80079e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d006      	beq.n	8007a00 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	3301      	adds	r3, #1
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d9e9      	bls.n	80079d2 <prvInitialiseNewTask+0x5e>
 80079fe:	e000      	b.n	8007a02 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a00:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b37      	cmp	r3, #55	; 0x37
 8007a0e:	d901      	bls.n	8007a14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a10:	2337      	movs	r3, #55	; 0x37
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2200      	movs	r2, #0
 8007a24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff f98b 	bl	8006d46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	3318      	adds	r3, #24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff f986 	bl	8006d46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	3354      	adds	r3, #84	; 0x54
 8007a64:	224c      	movs	r2, #76	; 0x4c
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fcdf 	bl	800942c <memset>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <prvInitialiseNewTask+0x130>)
 8007a72:	659a      	str	r2, [r3, #88]	; 0x58
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	4a0c      	ldr	r2, [pc, #48]	; (8007aa8 <prvInitialiseNewTask+0x134>)
 8007a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <prvInitialiseNewTask+0x138>)
 8007a7e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	69b8      	ldr	r0, [r7, #24]
 8007a86:	f001 f90b 	bl	8008ca0 <pxPortInitialiseStack>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9c:	bf00      	nop
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20003af0 	.word	0x20003af0
 8007aa8:	20003b58 	.word	0x20003b58
 8007aac:	20003bc0 	.word	0x20003bc0

08007ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ab8:	f001 f9e0 	bl	8008e7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007abc:	4b2d      	ldr	r3, [pc, #180]	; (8007b74 <prvAddNewTaskToReadyList+0xc4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <prvAddNewTaskToReadyList+0xc4>)
 8007ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d109      	bne.n	8007ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ace:	4a2a      	ldr	r2, [pc, #168]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ad4:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <prvAddNewTaskToReadyList+0xc4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d110      	bne.n	8007afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007adc:	f000 fc28 	bl	8008330 <prvInitialiseTaskLists>
 8007ae0:	e00d      	b.n	8007afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ae2:	4b26      	ldr	r3, [pc, #152]	; (8007b7c <prvAddNewTaskToReadyList+0xcc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d802      	bhi.n	8007afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007af8:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007afe:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <prvAddNewTaskToReadyList+0xd0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <prvAddNewTaskToReadyList+0xd0>)
 8007b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b08:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <prvAddNewTaskToReadyList+0xd0>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <prvAddNewTaskToReadyList+0xd4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <prvAddNewTaskToReadyList+0x74>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <prvAddNewTaskToReadyList+0xd4>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <prvAddNewTaskToReadyList+0xd8>)
 8007b32:	441a      	add	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7ff f90f 	bl	8006d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b40:	f001 f9cc 	bl	8008edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b44:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <prvAddNewTaskToReadyList+0xcc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00e      	beq.n	8007b6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d207      	bcs.n	8007b6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <prvAddNewTaskToReadyList+0xdc>)
 8007b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20002208 	.word	0x20002208
 8007b78:	20001d34 	.word	0x20001d34
 8007b7c:	20002214 	.word	0x20002214
 8007b80:	20002224 	.word	0x20002224
 8007b84:	20002210 	.word	0x20002210
 8007b88:	20001d38 	.word	0x20001d38
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d017      	beq.n	8007bd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <vTaskDelay+0x60>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vTaskDelay+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60bb      	str	r3, [r7, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bc0:	f000 f88a 	bl	8007cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fd04 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bcc:	f000 f892 	bl	8007cf4 <xTaskResumeAll>
 8007bd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <vTaskDelay+0x64>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20002230 	.word	0x20002230
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c06:	463a      	mov	r2, r7
 8007c08:	1d39      	adds	r1, r7, #4
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff f848 	bl	8006ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	9202      	str	r2, [sp, #8]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	2300      	movs	r3, #0
 8007c24:	460a      	mov	r2, r1
 8007c26:	4924      	ldr	r1, [pc, #144]	; (8007cb8 <vTaskStartScheduler+0xc0>)
 8007c28:	4824      	ldr	r0, [pc, #144]	; (8007cbc <vTaskStartScheduler+0xc4>)
 8007c2a:	f7ff fe01 	bl	8007830 <xTaskCreateStatic>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <vTaskStartScheduler+0xc8>)
 8007c32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c34:	4b22      	ldr	r3, [pc, #136]	; (8007cc0 <vTaskStartScheduler+0xc8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e001      	b.n	8007c46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d102      	bne.n	8007c52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c4c:	f000 fd16 	bl	800867c <xTimerCreateTimerTask>
 8007c50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d11b      	bne.n	8007c90 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	613b      	str	r3, [r7, #16]
}
 8007c6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c6c:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <vTaskStartScheduler+0xcc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3354      	adds	r3, #84	; 0x54
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <vTaskStartScheduler+0xd0>)
 8007c74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c76:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <vTaskStartScheduler+0xd4>)
 8007c78:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c7e:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <vTaskStartScheduler+0xd8>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007c84:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <vTaskStartScheduler+0xdc>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c8a:	f001 f885 	bl	8008d98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c8e:	e00e      	b.n	8007cae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d10a      	bne.n	8007cae <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <vTaskStartScheduler+0xb4>
}
 8007cae:	bf00      	nop
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800a530 	.word	0x0800a530
 8007cbc:	08008301 	.word	0x08008301
 8007cc0:	2000222c 	.word	0x2000222c
 8007cc4:	20001d34 	.word	0x20001d34
 8007cc8:	20000064 	.word	0x20000064
 8007ccc:	20002228 	.word	0x20002228
 8007cd0:	20002214 	.word	0x20002214
 8007cd4:	2000220c 	.word	0x2000220c

08007cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <vTaskSuspendAll+0x18>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	4a03      	ldr	r2, [pc, #12]	; (8007cf0 <vTaskSuspendAll+0x18>)
 8007ce4:	6013      	str	r3, [r2, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20002230 	.word	0x20002230

08007cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d02:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	603b      	str	r3, [r7, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d20:	f001 f8ac 	bl	8008e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d24:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	4a38      	ldr	r2, [pc, #224]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d2e:	4b37      	ldr	r3, [pc, #220]	; (8007e0c <xTaskResumeAll+0x118>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d162      	bne.n	8007dfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d36:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <xTaskResumeAll+0x11c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d05e      	beq.n	8007dfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3e:	e02f      	b.n	8007da0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d40:	4b34      	ldr	r3, [pc, #208]	; (8007e14 <xTaskResumeAll+0x120>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3318      	adds	r3, #24
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff f861 	bl	8006e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f85c 	bl	8006e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <xTaskResumeAll+0x124>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d903      	bls.n	8007d70 <xTaskResumeAll+0x7c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <xTaskResumeAll+0x124>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4a27      	ldr	r2, [pc, #156]	; (8007e1c <xTaskResumeAll+0x128>)
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fe ffe9 	bl	8006d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d90:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <xTaskResumeAll+0x12c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d9a:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <xTaskResumeAll+0x130>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da0:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xTaskResumeAll+0x120>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1cb      	bne.n	8007d40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dae:	f000 fb61 	bl	8008474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <xTaskResumeAll+0x134>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dbe:	f000 f845 	bl	8007e4c <xTaskIncrementTick>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007dc8:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <xTaskResumeAll+0x130>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f1      	bne.n	8007dbe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <xTaskResumeAll+0x134>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007de0:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <xTaskResumeAll+0x130>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d009      	beq.n	8007dfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <xTaskResumeAll+0x138>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dfc:	f001 f86e 	bl	8008edc <vPortExitCritical>

	return xAlreadyYielded;
 8007e00:	68bb      	ldr	r3, [r7, #8]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20002230 	.word	0x20002230
 8007e10:	20002208 	.word	0x20002208
 8007e14:	200021c8 	.word	0x200021c8
 8007e18:	20002210 	.word	0x20002210
 8007e1c:	20001d38 	.word	0x20001d38
 8007e20:	20001d34 	.word	0x20001d34
 8007e24:	2000221c 	.word	0x2000221c
 8007e28:	20002218 	.word	0x20002218
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <xTaskGetTickCount+0x18>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e3c:	687b      	ldr	r3, [r7, #4]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	2000220c 	.word	0x2000220c

08007e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e56:	4b51      	ldr	r3, [pc, #324]	; (8007f9c <xTaskIncrementTick+0x150>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 808e 	bne.w	8007f7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e60:	4b4f      	ldr	r3, [pc, #316]	; (8007fa0 <xTaskIncrementTick+0x154>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e68:	4a4d      	ldr	r2, [pc, #308]	; (8007fa0 <xTaskIncrementTick+0x154>)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d120      	bne.n	8007eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e74:	4b4b      	ldr	r3, [pc, #300]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	603b      	str	r3, [r7, #0]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <xTaskIncrementTick+0x46>
 8007e94:	4b43      	ldr	r3, [pc, #268]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	4b43      	ldr	r3, [pc, #268]	; (8007fa8 <xTaskIncrementTick+0x15c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a41      	ldr	r2, [pc, #260]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	4a41      	ldr	r2, [pc, #260]	; (8007fa8 <xTaskIncrementTick+0x15c>)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4b40      	ldr	r3, [pc, #256]	; (8007fac <xTaskIncrementTick+0x160>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a3f      	ldr	r2, [pc, #252]	; (8007fac <xTaskIncrementTick+0x160>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	f000 fadf 	bl	8008474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eb6:	4b3e      	ldr	r3, [pc, #248]	; (8007fb0 <xTaskIncrementTick+0x164>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d34e      	bcc.n	8007f5e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec0:	4b38      	ldr	r3, [pc, #224]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <xTaskIncrementTick+0x82>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <xTaskIncrementTick+0x84>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed4:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <xTaskIncrementTick+0x164>)
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	601a      	str	r2, [r3, #0]
					break;
 8007edc:	e03f      	b.n	8007f5e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <xTaskIncrementTick+0x158>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d203      	bcs.n	8007efe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ef6:	4a2e      	ldr	r2, [pc, #184]	; (8007fb0 <xTaskIncrementTick+0x164>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6013      	str	r3, [r2, #0]
						break;
 8007efc:	e02f      	b.n	8007f5e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe ff86 	bl	8006e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3318      	adds	r3, #24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe ff7d 	bl	8006e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1e:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <xTaskIncrementTick+0x168>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d903      	bls.n	8007f2e <xTaskIncrementTick+0xe2>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	4a22      	ldr	r2, [pc, #136]	; (8007fb4 <xTaskIncrementTick+0x168>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4a1f      	ldr	r2, [pc, #124]	; (8007fb8 <xTaskIncrementTick+0x16c>)
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe ff0a 	bl	8006d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4e:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <xTaskIncrementTick+0x170>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d3b3      	bcc.n	8007ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f5c:	e7b0      	b.n	8007ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f5e:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <xTaskIncrementTick+0x170>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4914      	ldr	r1, [pc, #80]	; (8007fb8 <xTaskIncrementTick+0x16c>)
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d907      	bls.n	8007f86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f76:	2301      	movs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e004      	b.n	8007f86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xTaskIncrementTick+0x174>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <xTaskIncrementTick+0x174>)
 8007f84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <xTaskIncrementTick+0x178>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f92:	697b      	ldr	r3, [r7, #20]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20002230 	.word	0x20002230
 8007fa0:	2000220c 	.word	0x2000220c
 8007fa4:	200021c0 	.word	0x200021c0
 8007fa8:	200021c4 	.word	0x200021c4
 8007fac:	20002220 	.word	0x20002220
 8007fb0:	20002228 	.word	0x20002228
 8007fb4:	20002210 	.word	0x20002210
 8007fb8:	20001d38 	.word	0x20001d38
 8007fbc:	20001d34 	.word	0x20001d34
 8007fc0:	20002218 	.word	0x20002218
 8007fc4:	2000221c 	.word	0x2000221c

08007fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fce:	4b2a      	ldr	r3, [pc, #168]	; (8008078 <vTaskSwitchContext+0xb0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fd6:	4b29      	ldr	r3, [pc, #164]	; (800807c <vTaskSwitchContext+0xb4>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fdc:	e046      	b.n	800806c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007fde:	4b27      	ldr	r3, [pc, #156]	; (800807c <vTaskSwitchContext+0xb4>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007fe4:	4b26      	ldr	r3, [pc, #152]	; (8008080 <vTaskSwitchContext+0xb8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e010      	b.n	800800e <vTaskSwitchContext+0x46>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <vTaskSwitchContext+0x40>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	607b      	str	r3, [r7, #4]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <vTaskSwitchContext+0x3e>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b01      	subs	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	491d      	ldr	r1, [pc, #116]	; (8008084 <vTaskSwitchContext+0xbc>)
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0e4      	beq.n	8007fec <vTaskSwitchContext+0x24>
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4a15      	ldr	r2, [pc, #84]	; (8008084 <vTaskSwitchContext+0xbc>)
 800802e:	4413      	add	r3, r2
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	605a      	str	r2, [r3, #4]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3308      	adds	r3, #8
 8008044:	429a      	cmp	r2, r3
 8008046:	d104      	bne.n	8008052 <vTaskSwitchContext+0x8a>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <vTaskSwitchContext+0xc0>)
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	4a08      	ldr	r2, [pc, #32]	; (8008080 <vTaskSwitchContext+0xb8>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <vTaskSwitchContext+0xc0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3354      	adds	r3, #84	; 0x54
 8008068:	4a08      	ldr	r2, [pc, #32]	; (800808c <vTaskSwitchContext+0xc4>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20002230 	.word	0x20002230
 800807c:	2000221c 	.word	0x2000221c
 8008080:	20002210 	.word	0x20002210
 8008084:	20001d38 	.word	0x20001d38
 8008088:	20001d34 	.word	0x20001d34
 800808c:	20000064 	.word	0x20000064

08008090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <vTaskPlaceOnEventList+0x44>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3318      	adds	r3, #24
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe fe70 	bl	8006da4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080c4:	2101      	movs	r1, #1
 80080c6:	6838      	ldr	r0, [r7, #0]
 80080c8:	f000 fa84 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20001d34 	.word	0x20001d34

080080d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	617b      	str	r3, [r7, #20]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <vTaskPlaceOnEventListRestricted+0x54>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3318      	adds	r3, #24
 8008106:	4619      	mov	r1, r3
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7fe fe28 	bl	8006d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008114:	f04f 33ff 	mov.w	r3, #4294967295
 8008118:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68b8      	ldr	r0, [r7, #8]
 800811e:	f000 fa59 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
	}
 8008122:	bf00      	nop
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20001d34 	.word	0x20001d34

08008130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	3318      	adds	r3, #24
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fe57 	bl	8006e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008166:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <xTaskRemoveFromEventList+0xb0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d11d      	bne.n	80081aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	3304      	adds	r3, #4
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fe4e 	bl	8006e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <xTaskRemoveFromEventList+0xb4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <xTaskRemoveFromEventList+0x5c>
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <xTaskRemoveFromEventList+0xb4>)
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4a13      	ldr	r2, [pc, #76]	; (80081e8 <xTaskRemoveFromEventList+0xb8>)
 800819a:	441a      	add	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fe fddb 	bl	8006d5e <vListInsertEnd>
 80081a8:	e005      	b.n	80081b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3318      	adds	r3, #24
 80081ae:	4619      	mov	r1, r3
 80081b0:	480e      	ldr	r0, [pc, #56]	; (80081ec <xTaskRemoveFromEventList+0xbc>)
 80081b2:	f7fe fdd4 	bl	8006d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <xTaskRemoveFromEventList+0xc0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d905      	bls.n	80081d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <xTaskRemoveFromEventList+0xc4>)
 80081ca:	2201      	movs	r2, #1
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e001      	b.n	80081d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80081d4:	697b      	ldr	r3, [r7, #20]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20002230 	.word	0x20002230
 80081e4:	20002210 	.word	0x20002210
 80081e8:	20001d38 	.word	0x20001d38
 80081ec:	200021c8 	.word	0x200021c8
 80081f0:	20001d34 	.word	0x20001d34
 80081f4:	2000221c 	.word	0x2000221c

080081f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <vTaskInternalSetTimeOutState+0x24>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <vTaskInternalSetTimeOutState+0x28>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20002220 	.word	0x20002220
 8008220:	2000220c 	.word	0x2000220c

08008224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	613b      	str	r3, [r7, #16]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008266:	f000 fe09 	bl	8008e7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800826a:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <xTaskCheckForTimeOut+0xbc>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d102      	bne.n	800828a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	e023      	b.n	80082d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <xTaskCheckForTimeOut+0xc0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d007      	beq.n	80082a6 <xTaskCheckForTimeOut+0x82>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	429a      	cmp	r2, r3
 800829e:	d302      	bcc.n	80082a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	61fb      	str	r3, [r7, #28]
 80082a4:	e015      	b.n	80082d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d20b      	bcs.n	80082c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff9b 	bl	80081f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	e004      	b.n	80082d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082d2:	f000 fe03 	bl	8008edc <vPortExitCritical>

	return xReturn;
 80082d6:	69fb      	ldr	r3, [r7, #28]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	2000220c 	.word	0x2000220c
 80082e4:	20002220 	.word	0x20002220

080082e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <vTaskMissedYield+0x14>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	2000221c 	.word	0x2000221c

08008300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008308:	f000 f852 	bl	80083b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <prvIdleTask+0x28>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d9f9      	bls.n	8008308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <prvIdleTask+0x2c>)
 8008316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008324:	e7f0      	b.n	8008308 <prvIdleTask+0x8>
 8008326:	bf00      	nop
 8008328:	20001d38 	.word	0x20001d38
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e00c      	b.n	8008356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4a12      	ldr	r2, [pc, #72]	; (8008390 <prvInitialiseTaskLists+0x60>)
 8008348:	4413      	add	r3, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fcdc 	bl	8006d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3301      	adds	r3, #1
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b37      	cmp	r3, #55	; 0x37
 800835a:	d9ef      	bls.n	800833c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800835c:	480d      	ldr	r0, [pc, #52]	; (8008394 <prvInitialiseTaskLists+0x64>)
 800835e:	f7fe fcd3 	bl	8006d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008362:	480d      	ldr	r0, [pc, #52]	; (8008398 <prvInitialiseTaskLists+0x68>)
 8008364:	f7fe fcd0 	bl	8006d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <prvInitialiseTaskLists+0x6c>)
 800836a:	f7fe fccd 	bl	8006d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800836e:	480c      	ldr	r0, [pc, #48]	; (80083a0 <prvInitialiseTaskLists+0x70>)
 8008370:	f7fe fcca 	bl	8006d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008374:	480b      	ldr	r0, [pc, #44]	; (80083a4 <prvInitialiseTaskLists+0x74>)
 8008376:	f7fe fcc7 	bl	8006d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <prvInitialiseTaskLists+0x78>)
 800837c:	4a05      	ldr	r2, [pc, #20]	; (8008394 <prvInitialiseTaskLists+0x64>)
 800837e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <prvInitialiseTaskLists+0x7c>)
 8008382:	4a05      	ldr	r2, [pc, #20]	; (8008398 <prvInitialiseTaskLists+0x68>)
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20001d38 	.word	0x20001d38
 8008394:	20002198 	.word	0x20002198
 8008398:	200021ac 	.word	0x200021ac
 800839c:	200021c8 	.word	0x200021c8
 80083a0:	200021dc 	.word	0x200021dc
 80083a4:	200021f4 	.word	0x200021f4
 80083a8:	200021c0 	.word	0x200021c0
 80083ac:	200021c4 	.word	0x200021c4

080083b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b6:	e019      	b.n	80083ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083b8:	f000 fd60 	bl	8008e7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083bc:	4b10      	ldr	r3, [pc, #64]	; (8008400 <prvCheckTasksWaitingTermination+0x50>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fd23 	bl	8006e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <prvCheckTasksWaitingTermination+0x54>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	4a0b      	ldr	r2, [pc, #44]	; (8008404 <prvCheckTasksWaitingTermination+0x54>)
 80083d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <prvCheckTasksWaitingTermination+0x58>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a0a      	ldr	r2, [pc, #40]	; (8008408 <prvCheckTasksWaitingTermination+0x58>)
 80083e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083e2:	f000 fd7b 	bl	8008edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f810 	bl	800840c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <prvCheckTasksWaitingTermination+0x58>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e1      	bne.n	80083b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200021dc 	.word	0x200021dc
 8008404:	20002208 	.word	0x20002208
 8008408:	200021f0 	.word	0x200021f0

0800840c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3354      	adds	r3, #84	; 0x54
 8008418:	4618      	mov	r0, r3
 800841a:	f001 f835 	bl	8009488 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008424:	2b00      	cmp	r3, #0
 8008426:	d108      	bne.n	800843a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fee9 	bl	8009204 <vPortFree>
				vPortFree( pxTCB );
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fee6 	bl	8009204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008438:	e018      	b.n	800846c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008440:	2b01      	cmp	r3, #1
 8008442:	d103      	bne.n	800844c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fedd 	bl	8009204 <vPortFree>
	}
 800844a:	e00f      	b.n	800846c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008452:	2b02      	cmp	r3, #2
 8008454:	d00a      	beq.n	800846c <prvDeleteTCB+0x60>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	60fb      	str	r3, [r7, #12]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <prvDeleteTCB+0x5e>
	}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <prvResetNextTaskUnblockTime+0x40>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <prvResetNextTaskUnblockTime+0x14>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <prvResetNextTaskUnblockTime+0x16>
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <prvResetNextTaskUnblockTime+0x44>)
 8008490:	f04f 32ff 	mov.w	r2, #4294967295
 8008494:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008496:	e008      	b.n	80084aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008498:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <prvResetNextTaskUnblockTime+0x40>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	4a04      	ldr	r2, [pc, #16]	; (80084b8 <prvResetNextTaskUnblockTime+0x44>)
 80084a8:	6013      	str	r3, [r2, #0]
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr
 80084b4:	200021c0 	.word	0x200021c0
 80084b8:	20002228 	.word	0x20002228

080084bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <xTaskGetSchedulerState+0x34>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ca:	2301      	movs	r3, #1
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	e008      	b.n	80084e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d0:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <xTaskGetSchedulerState+0x38>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084d8:	2302      	movs	r3, #2
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	e001      	b.n	80084e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084e2:	687b      	ldr	r3, [r7, #4]
	}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20002214 	.word	0x20002214
 80084f4:	20002230 	.word	0x20002230

080084f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d056      	beq.n	80085bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800850e:	4b2e      	ldr	r3, [pc, #184]	; (80085c8 <xTaskPriorityDisinherit+0xd0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	d00a      	beq.n	800852e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	60fb      	str	r3, [r7, #12]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008550:	1e5a      	subs	r2, r3, #1
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	429a      	cmp	r2, r3
 8008560:	d02c      	beq.n	80085bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008566:	2b00      	cmp	r3, #0
 8008568:	d128      	bne.n	80085bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fc50 	bl	8006e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <xTaskPriorityDisinherit+0xd4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <xTaskPriorityDisinherit+0xa4>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <xTaskPriorityDisinherit+0xd4>)
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4a09      	ldr	r2, [pc, #36]	; (80085d0 <xTaskPriorityDisinherit+0xd8>)
 80085aa:	441a      	add	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fbd3 	bl	8006d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085bc:	697b      	ldr	r3, [r7, #20]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001d34 	.word	0x20001d34
 80085cc:	20002210 	.word	0x20002210
 80085d0:	20001d38 	.word	0x20001d38

080085d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085de:	4b21      	ldr	r3, [pc, #132]	; (8008664 <prvAddCurrentTaskToDelayedList+0x90>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e4:	4b20      	ldr	r3, [pc, #128]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fc12 	bl	8006e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d10a      	bne.n	800860e <prvAddCurrentTaskToDelayedList+0x3a>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fe:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4819      	ldr	r0, [pc, #100]	; (800866c <prvAddCurrentTaskToDelayedList+0x98>)
 8008608:	f7fe fba9 	bl	8006d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800860c:	e026      	b.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4413      	add	r3, r2
 8008614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	429a      	cmp	r2, r3
 8008624:	d209      	bcs.n	800863a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008626:	4b12      	ldr	r3, [pc, #72]	; (8008670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3304      	adds	r3, #4
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f7fe fbb6 	bl	8006da4 <vListInsert>
}
 8008638:	e010      	b.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f7fe fbac 	bl	8006da4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d202      	bcs.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008656:	4a08      	ldr	r2, [pc, #32]	; (8008678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6013      	str	r3, [r2, #0]
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	2000220c 	.word	0x2000220c
 8008668:	20001d34 	.word	0x20001d34
 800866c:	200021f4 	.word	0x200021f4
 8008670:	200021c4 	.word	0x200021c4
 8008674:	200021c0 	.word	0x200021c0
 8008678:	20002228 	.word	0x20002228

0800867c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008686:	f000 facb 	bl	8008c20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <xTimerCreateTimerTask+0x80>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d021      	beq.n	80086d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800869a:	1d3a      	adds	r2, r7, #4
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fb15 	bl	8006cd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	9202      	str	r2, [sp, #8]
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	2302      	movs	r3, #2
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	2300      	movs	r3, #0
 80086ba:	460a      	mov	r2, r1
 80086bc:	4910      	ldr	r1, [pc, #64]	; (8008700 <xTimerCreateTimerTask+0x84>)
 80086be:	4811      	ldr	r0, [pc, #68]	; (8008704 <xTimerCreateTimerTask+0x88>)
 80086c0:	f7ff f8b6 	bl	8007830 <xTaskCreateStatic>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4a10      	ldr	r2, [pc, #64]	; (8008708 <xTimerCreateTimerTask+0x8c>)
 80086c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <xTimerCreateTimerTask+0x8c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	613b      	str	r3, [r7, #16]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086f2:	697b      	ldr	r3, [r7, #20]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20002264 	.word	0x20002264
 8008700:	0800a538 	.word	0x0800a538
 8008704:	08008829 	.word	0x08008829
 8008708:	20002268 	.word	0x20002268

0800870c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800873a:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <xTimerGenericCommand+0x98>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d02a      	beq.n	8008798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b05      	cmp	r3, #5
 8008752:	dc18      	bgt.n	8008786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008754:	f7ff feb2 	bl	80084bc <xTaskGetSchedulerState>
 8008758:	4603      	mov	r3, r0
 800875a:	2b02      	cmp	r3, #2
 800875c:	d109      	bne.n	8008772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	f107 0110 	add.w	r1, r7, #16
 8008766:	2300      	movs	r3, #0
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	f7fe fc7f 	bl	800706c <xQueueGenericSend>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24
 8008770:	e012      	b.n	8008798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f107 0110 	add.w	r1, r7, #16
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	f7fe fc75 	bl	800706c <xQueueGenericSend>
 8008782:	6278      	str	r0, [r7, #36]	; 0x24
 8008784:	e008      	b.n	8008798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f107 0110 	add.w	r1, r7, #16
 800878e:	2300      	movs	r3, #0
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	f7fe fd69 	bl	8007268 <xQueueGenericSendFromISR>
 8008796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800879a:	4618      	mov	r0, r3
 800879c:	3728      	adds	r7, #40	; 0x28
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20002264 	.word	0x20002264

080087a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087b2:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <prvProcessExpiredTimer+0x7c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fb27 	bl	8006e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d122      	bne.n	8008814 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	699a      	ldr	r2, [r3, #24]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	18d1      	adds	r1, r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f000 f8c8 	bl	8008970 <prvInsertTimerInActiveList>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d016      	beq.n	8008814 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087e6:	2300      	movs	r3, #0
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	2100      	movs	r1, #0
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f7ff ff8b 	bl	800870c <xTimerGenericCommand>
 80087f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	60fb      	str	r3, [r7, #12]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	6978      	ldr	r0, [r7, #20]
 800881a:	4798      	blx	r3
}
 800881c:	bf00      	nop
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	2000225c 	.word	0x2000225c

08008828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008830:	f107 0308 	add.w	r3, r7, #8
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f857 	bl	80088e8 <prvGetNextExpireTime>
 800883a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4619      	mov	r1, r3
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f803 	bl	800884c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008846:	f000 f8d5 	bl	80089f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800884a:	e7f1      	b.n	8008830 <prvTimerTask+0x8>

0800884c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008856:	f7ff fa3f 	bl	8007cd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f866 	bl	8008930 <prvSampleTimeNow>
 8008864:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d130      	bne.n	80088ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <prvProcessTimerOrBlockTask+0x3c>
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	429a      	cmp	r2, r3
 8008878:	d806      	bhi.n	8008888 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800887a:	f7ff fa3b 	bl	8007cf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ff91 	bl	80087a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008886:	e024      	b.n	80088d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d008      	beq.n	80088a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <prvProcessTimerOrBlockTask+0x90>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	bf0c      	ite	eq
 8008898:	2301      	moveq	r3, #1
 800889a:	2300      	movne	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <prvProcessTimerOrBlockTask+0x94>)
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f7fe ff8b 	bl	80077c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088b2:	f7ff fa1f 	bl	8007cf4 <xTaskResumeAll>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvProcessTimerOrBlockTask+0x98>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
}
 80088cc:	e001      	b.n	80088d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088ce:	f7ff fa11 	bl	8007cf4 <xTaskResumeAll>
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20002260 	.word	0x20002260
 80088e0:	20002264 	.word	0x20002264
 80088e4:	e000ed04 	.word	0xe000ed04

080088e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088f0:	4b0e      	ldr	r3, [pc, #56]	; (800892c <prvGetNextExpireTime+0x44>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	461a      	mov	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d105      	bne.n	800891a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800890e:	4b07      	ldr	r3, [pc, #28]	; (800892c <prvGetNextExpireTime+0x44>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e001      	b.n	800891e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800891e:	68fb      	ldr	r3, [r7, #12]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	bc80      	pop	{r7}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000225c 	.word	0x2000225c

08008930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008938:	f7ff fa7a 	bl	8007e30 <xTaskGetTickCount>
 800893c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <prvSampleTimeNow+0x3c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d205      	bcs.n	8008954 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008948:	f000 f908 	bl	8008b5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e002      	b.n	800895a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800895a:	4a04      	ldr	r2, [pc, #16]	; (800896c <prvSampleTimeNow+0x3c>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008960:	68fb      	ldr	r3, [r7, #12]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	2000226c 	.word	0x2000226c

08008970 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d812      	bhi.n	80089bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e01b      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089aa:	4b10      	ldr	r3, [pc, #64]	; (80089ec <prvInsertTimerInActiveList+0x7c>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7fe f9f5 	bl	8006da4 <vListInsert>
 80089ba:	e012      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d206      	bcs.n	80089d2 <prvInsertTimerInActiveList+0x62>
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e007      	b.n	80089e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <prvInsertTimerInActiveList+0x80>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe f9e1 	bl	8006da4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089e2:	697b      	ldr	r3, [r7, #20]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20002260 	.word	0x20002260
 80089f0:	2000225c 	.word	0x2000225c

080089f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08e      	sub	sp, #56	; 0x38
 80089f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089fa:	e09d      	b.n	8008b38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da18      	bge.n	8008a34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a02:	1d3b      	adds	r3, r7, #4
 8008a04:	3304      	adds	r3, #4
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	61fb      	str	r3, [r7, #28]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2a:	6850      	ldr	r0, [r2, #4]
 8008a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2e:	6892      	ldr	r2, [r2, #8]
 8008a30:	4611      	mov	r1, r2
 8008a32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	db7e      	blt.n	8008b38 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe f9e2 	bl	8006e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a50:	463b      	mov	r3, r7
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff ff6c 	bl	8008930 <prvSampleTimeNow>
 8008a58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b09      	cmp	r3, #9
 8008a5e:	d86a      	bhi.n	8008b36 <prvProcessReceivedCommands+0x142>
 8008a60:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <prvProcessReceivedCommands+0x74>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a91 	.word	0x08008a91
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008a91 	.word	0x08008a91
 8008a74:	08008b39 	.word	0x08008b39
 8008a78:	08008aed 	.word	0x08008aed
 8008a7c:	08008b25 	.word	0x08008b25
 8008a80:	08008a91 	.word	0x08008a91
 8008a84:	08008a91 	.word	0x08008a91
 8008a88:	08008b39 	.word	0x08008b39
 8008a8c:	08008aed 	.word	0x08008aed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	18d1      	adds	r1, r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9e:	f7ff ff67 	bl	8008970 <prvInsertTimerInActiveList>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d047      	beq.n	8008b38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d13f      	bne.n	8008b38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	441a      	add	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aca:	f7ff fe1f 	bl	800870c <xTimerGenericCommand>
 8008ace:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d130      	bne.n	8008b38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	61bb      	str	r3, [r7, #24]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	617b      	str	r3, [r7, #20]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	18d1      	adds	r1, r2, r3
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1e:	f7ff ff27 	bl	8008970 <prvInsertTimerInActiveList>
					break;
 8008b22:	e009      	b.n	8008b38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d104      	bne.n	8008b38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b30:	f000 fb68 	bl	8009204 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b34:	e000      	b.n	8008b38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008b36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b38:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <prvProcessReceivedCommands+0x164>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	1d39      	adds	r1, r7, #4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fc29 	bl	8007398 <xQueueReceive>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f af57 	bne.w	80089fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3730      	adds	r7, #48	; 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20002264 	.word	0x20002264

08008b5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b62:	e045      	b.n	8008bf0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b64:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b6e:	4b2a      	ldr	r3, [pc, #168]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe f949 	bl	8006e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d12e      	bne.n	8008bf0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4413      	add	r3, r2
 8008b9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d90e      	bls.n	8008bc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bb0:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7fe f8f2 	bl	8006da4 <vListInsert>
 8008bc0:	e016      	b.n	8008bf0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff fd9d 	bl	800870c <xTimerGenericCommand>
 8008bd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	603b      	str	r3, [r7, #0]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bf0:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1b4      	bne.n	8008b64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <prvSwitchTimerLists+0xc0>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <prvSwitchTimerLists+0xbc>)
 8008c06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c08:	4a04      	ldr	r2, [pc, #16]	; (8008c1c <prvSwitchTimerLists+0xc0>)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	6013      	str	r3, [r2, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2000225c 	.word	0x2000225c
 8008c1c:	20002260 	.word	0x20002260

08008c20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c26:	f000 f929 	bl	8008e7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <prvCheckForValidListAndQueue+0x60>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d120      	bne.n	8008c74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c32:	4814      	ldr	r0, [pc, #80]	; (8008c84 <prvCheckForValidListAndQueue+0x64>)
 8008c34:	f7fe f868 	bl	8006d08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c38:	4813      	ldr	r0, [pc, #76]	; (8008c88 <prvCheckForValidListAndQueue+0x68>)
 8008c3a:	f7fe f865 	bl	8006d08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c3e:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <prvCheckForValidListAndQueue+0x6c>)
 8008c40:	4a10      	ldr	r2, [pc, #64]	; (8008c84 <prvCheckForValidListAndQueue+0x64>)
 8008c42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c44:	4b12      	ldr	r3, [pc, #72]	; (8008c90 <prvCheckForValidListAndQueue+0x70>)
 8008c46:	4a10      	ldr	r2, [pc, #64]	; (8008c88 <prvCheckForValidListAndQueue+0x68>)
 8008c48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <prvCheckForValidListAndQueue+0x74>)
 8008c50:	4a11      	ldr	r2, [pc, #68]	; (8008c98 <prvCheckForValidListAndQueue+0x78>)
 8008c52:	2110      	movs	r1, #16
 8008c54:	200a      	movs	r0, #10
 8008c56:	f7fe f96f 	bl	8006f38 <xQueueGenericCreateStatic>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <prvCheckForValidListAndQueue+0x60>)
 8008c5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <prvCheckForValidListAndQueue+0x60>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <prvCheckForValidListAndQueue+0x60>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	490b      	ldr	r1, [pc, #44]	; (8008c9c <prvCheckForValidListAndQueue+0x7c>)
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fd82 	bl	8007778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c74:	f000 f932 	bl	8008edc <vPortExitCritical>
}
 8008c78:	bf00      	nop
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20002264 	.word	0x20002264
 8008c84:	20002234 	.word	0x20002234
 8008c88:	20002248 	.word	0x20002248
 8008c8c:	2000225c 	.word	0x2000225c
 8008c90:	20002260 	.word	0x20002260
 8008c94:	20002310 	.word	0x20002310
 8008c98:	20002270 	.word	0x20002270
 8008c9c:	0800a540 	.word	0x0800a540

08008ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3b04      	subs	r3, #4
 8008cb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3b04      	subs	r3, #4
 8008cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f023 0201 	bic.w	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cd0:	4a08      	ldr	r2, [pc, #32]	; (8008cf4 <pxPortInitialiseStack+0x54>)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b14      	subs	r3, #20
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3b20      	subs	r3, #32
 8008ce6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr
 8008cf4:	08008cf9 	.word	0x08008cf9

08008cf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <prvTaskExitError+0x54>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0a:	d00a      	beq.n	8008d22 <prvTaskExitError+0x2a>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60fb      	str	r3, [r7, #12]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <prvTaskExitError+0x28>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	60bb      	str	r3, [r7, #8]
}
 8008d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d36:	bf00      	nop
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0fc      	beq.n	8008d38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d3e:	bf00      	nop
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000014 	.word	0x20000014

08008d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <pxCurrentTCBConst2>)
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	6808      	ldr	r0, [r1, #0]
 8008d56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d5a:	f380 8809 	msr	PSP, r0
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8811 	msr	BASEPRI, r0
 8008d6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008d6e:	4770      	bx	lr

08008d70 <pxCurrentTCBConst2>:
 8008d70:	20001d34 	.word	0x20001d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop

08008d78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008d78:	4806      	ldr	r0, [pc, #24]	; (8008d94 <prvPortStartFirstTask+0x1c>)
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	6800      	ldr	r0, [r0, #0]
 8008d7e:	f380 8808 	msr	MSP, r0
 8008d82:	b662      	cpsie	i
 8008d84:	b661      	cpsie	f
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	df00      	svc	0
 8008d90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d92:	bf00      	nop
 8008d94:	e000ed08 	.word	0xe000ed08

08008d98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d9e:	4b32      	ldr	r3, [pc, #200]	; (8008e68 <xPortStartScheduler+0xd0>)
 8008da0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <xPortStartScheduler+0xd4>)
 8008dc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008dc8:	2207      	movs	r2, #7
 8008dca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dcc:	e009      	b.n	8008de2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008dce:	4b28      	ldr	r3, [pc, #160]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008dd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b80      	cmp	r3, #128	; 0x80
 8008dec:	d0ef      	beq.n	8008dce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dee:	4b20      	ldr	r3, [pc, #128]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f1c3 0307 	rsb	r3, r3, #7
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d00a      	beq.n	8008e10 <xPortStartScheduler+0x78>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	60bb      	str	r3, [r7, #8]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e10:	4b17      	ldr	r3, [pc, #92]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	4a16      	ldr	r2, [pc, #88]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008e18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e1a:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e22:	4a13      	ldr	r2, [pc, #76]	; (8008e70 <xPortStartScheduler+0xd8>)
 8008e24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <xPortStartScheduler+0xdc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a10      	ldr	r2, [pc, #64]	; (8008e74 <xPortStartScheduler+0xdc>)
 8008e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <xPortStartScheduler+0xdc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <xPortStartScheduler+0xdc>)
 8008e40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e46:	f000 f8b9 	bl	8008fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <xPortStartScheduler+0xe0>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e50:	f7ff ff92 	bl	8008d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e54:	f7ff f8b8 	bl	8007fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8008e58:	f7ff ff4e 	bl	8008cf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	e000e400 	.word	0xe000e400
 8008e6c:	20002360 	.word	0x20002360
 8008e70:	20002364 	.word	0x20002364
 8008e74:	e000ed20 	.word	0xe000ed20
 8008e78:	20000014 	.word	0x20000014

08008e7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	607b      	str	r3, [r7, #4]
}
 8008e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <vPortEnterCritical+0x58>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ed4 <vPortEnterCritical+0x58>)
 8008e9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <vPortEnterCritical+0x58>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d10f      	bne.n	8008ec8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <vPortEnterCritical+0x5c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	603b      	str	r3, [r7, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vPortEnterCritical+0x4a>
	}
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc80      	pop	{r7}
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000014 	.word	0x20000014
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ee2:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <vPortExitCritical+0x4c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <vPortExitCritical+0x24>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	607b      	str	r3, [r7, #4]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <vPortExitCritical+0x4c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	4a08      	ldr	r2, [pc, #32]	; (8008f28 <vPortExitCritical+0x4c>)
 8008f08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <vPortExitCritical+0x4c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <vPortExitCritical+0x42>
 8008f12:	2300      	movs	r3, #0
 8008f14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	f383 8811 	msr	BASEPRI, r3
}
 8008f1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr
 8008f28:	20000014 	.word	0x20000014
 8008f2c:	00000000 	.word	0x00000000

08008f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f30:	f3ef 8009 	mrs	r0, PSP
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <pxCurrentTCBConst>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f40:	6010      	str	r0, [r2, #0]
 8008f42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008f46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f4a:	f380 8811 	msr	BASEPRI, r0
 8008f4e:	f7ff f83b 	bl	8007fc8 <vTaskSwitchContext>
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	6808      	ldr	r0, [r1, #0]
 8008f62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f66:	f380 8809 	msr	PSP, r0
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	4770      	bx	lr

08008f70 <pxCurrentTCBConst>:
 8008f70:	20001d34 	.word	0x20001d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f92:	f7fe ff5b 	bl	8007e4c <xTaskIncrementTick>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <SysTick_Handler+0x40>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f383 8811 	msr	BASEPRI, r3
}
 8008fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <vPortSetupTimerInterrupt+0x30>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <vPortSetupTimerInterrupt+0x38>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <vPortSetupTimerInterrupt+0x3c>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <vPortSetupTimerInterrupt+0x40>)
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fde:	4b03      	ldr	r3, [pc, #12]	; (8008fec <vPortSetupTimerInterrupt+0x30>)
 8008fe0:	2207      	movs	r2, #7
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr
 8008fec:	e000e010 	.word	0xe000e010
 8008ff0:	e000e018 	.word	0xe000e018
 8008ff4:	20000008 	.word	0x20000008
 8008ff8:	10624dd3 	.word	0x10624dd3
 8008ffc:	e000e014 	.word	0xe000e014

08009000 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009006:	f3ef 8305 	mrs	r3, IPSR
 800900a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b0f      	cmp	r3, #15
 8009010:	d914      	bls.n	800903c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009012:	4a16      	ldr	r2, [pc, #88]	; (800906c <vPortValidateInterruptPriority+0x6c>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800901c:	4b14      	ldr	r3, [pc, #80]	; (8009070 <vPortValidateInterruptPriority+0x70>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	7afa      	ldrb	r2, [r7, #11]
 8009022:	429a      	cmp	r2, r3
 8009024:	d20a      	bcs.n	800903c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	607b      	str	r3, [r7, #4]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <vPortValidateInterruptPriority+0x74>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <vPortValidateInterruptPriority+0x78>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d90a      	bls.n	8009062 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	603b      	str	r3, [r7, #0]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <vPortValidateInterruptPriority+0x60>
	}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr
 800906c:	e000e3f0 	.word	0xe000e3f0
 8009070:	20002360 	.word	0x20002360
 8009074:	e000ed0c 	.word	0xe000ed0c
 8009078:	20002364 	.word	0x20002364

0800907c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009088:	f7fe fe26 	bl	8007cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800908c:	4b58      	ldr	r3, [pc, #352]	; (80091f0 <pvPortMalloc+0x174>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009094:	f000 f910 	bl	80092b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009098:	4b56      	ldr	r3, [pc, #344]	; (80091f4 <pvPortMalloc+0x178>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4013      	ands	r3, r2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 808e 	bne.w	80091c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01d      	beq.n	80090e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090ac:	2208      	movs	r2, #8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4413      	add	r3, r2
 80090b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f023 0307 	bic.w	r3, r3, #7
 80090c4:	3308      	adds	r3, #8
 80090c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <pvPortMalloc+0x6c>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	617b      	str	r3, [r7, #20]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d069      	beq.n	80091c2 <pvPortMalloc+0x146>
 80090ee:	4b42      	ldr	r3, [pc, #264]	; (80091f8 <pvPortMalloc+0x17c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d864      	bhi.n	80091c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090f8:	4b40      	ldr	r3, [pc, #256]	; (80091fc <pvPortMalloc+0x180>)
 80090fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090fc:	4b3f      	ldr	r3, [pc, #252]	; (80091fc <pvPortMalloc+0x180>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009102:	e004      	b.n	800910e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	d903      	bls.n	8009120 <pvPortMalloc+0xa4>
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1f1      	bne.n	8009104 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009120:	4b33      	ldr	r3, [pc, #204]	; (80091f0 <pvPortMalloc+0x174>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009126:	429a      	cmp	r2, r3
 8009128:	d04b      	beq.n	80091c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2208      	movs	r2, #8
 8009130:	4413      	add	r3, r2
 8009132:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	2308      	movs	r3, #8
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	429a      	cmp	r2, r3
 800914a:	d91f      	bls.n	800918c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800914c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4413      	add	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f003 0307 	and.w	r3, r3, #7
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <pvPortMalloc+0xf8>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	613b      	str	r3, [r7, #16]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	1ad2      	subs	r2, r2, r3
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009186:	69b8      	ldr	r0, [r7, #24]
 8009188:	f000 f8f8 	bl	800937c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800918c:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <pvPortMalloc+0x17c>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	4a18      	ldr	r2, [pc, #96]	; (80091f8 <pvPortMalloc+0x17c>)
 8009198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800919a:	4b17      	ldr	r3, [pc, #92]	; (80091f8 <pvPortMalloc+0x17c>)
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b18      	ldr	r3, [pc, #96]	; (8009200 <pvPortMalloc+0x184>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d203      	bcs.n	80091ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <pvPortMalloc+0x17c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a15      	ldr	r2, [pc, #84]	; (8009200 <pvPortMalloc+0x184>)
 80091ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <pvPortMalloc+0x178>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091c2:	f7fe fd97 	bl	8007cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <pvPortMalloc+0x16a>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	60fb      	str	r3, [r7, #12]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <pvPortMalloc+0x168>
	return pvReturn;
 80091e6:	69fb      	ldr	r3, [r7, #28]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3728      	adds	r7, #40	; 0x28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20003ae0 	.word	0x20003ae0
 80091f4:	20003aec 	.word	0x20003aec
 80091f8:	20003ae4 	.word	0x20003ae4
 80091fc:	20003ad8 	.word	0x20003ad8
 8009200:	20003ae8 	.word	0x20003ae8

08009204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d048      	beq.n	80092a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009216:	2308      	movs	r3, #8
 8009218:	425b      	negs	r3, r3
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <vPortFree+0xac>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <vPortFree+0x44>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	60fb      	str	r3, [r7, #12]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <vPortFree+0x62>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60bb      	str	r3, [r7, #8]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <vPortFree+0xac>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d019      	beq.n	80092a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d115      	bne.n	80092a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <vPortFree+0xac>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	43db      	mvns	r3, r3
 8009286:	401a      	ands	r2, r3
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800928c:	f7fe fd24 	bl	8007cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <vPortFree+0xb0>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4413      	add	r3, r2
 800929a:	4a06      	ldr	r2, [pc, #24]	; (80092b4 <vPortFree+0xb0>)
 800929c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800929e:	6938      	ldr	r0, [r7, #16]
 80092a0:	f000 f86c 	bl	800937c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80092a4:	f7fe fd26 	bl	8007cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20003aec 	.word	0x20003aec
 80092b4:	20003ae4 	.word	0x20003ae4

080092b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092be:	f241 7370 	movw	r3, #6000	; 0x1770
 80092c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092c4:	4b27      	ldr	r3, [pc, #156]	; (8009364 <prvHeapInit+0xac>)
 80092c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00c      	beq.n	80092ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3307      	adds	r3, #7
 80092d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <prvHeapInit+0xac>)
 80092e8:	4413      	add	r3, r2
 80092ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092f0:	4a1d      	ldr	r2, [pc, #116]	; (8009368 <prvHeapInit+0xb0>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092f6:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <prvHeapInit+0xb0>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	4413      	add	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009304:	2208      	movs	r2, #8
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	1a9b      	subs	r3, r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0307 	bic.w	r3, r3, #7
 8009312:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a15      	ldr	r2, [pc, #84]	; (800936c <prvHeapInit+0xb4>)
 8009318:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <prvHeapInit+0xb4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009322:	4b12      	ldr	r3, [pc, #72]	; (800936c <prvHeapInit+0xb4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <prvHeapInit+0xb4>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <prvHeapInit+0xb8>)
 8009346:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	4a09      	ldr	r2, [pc, #36]	; (8009374 <prvHeapInit+0xbc>)
 800934e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009350:	4b09      	ldr	r3, [pc, #36]	; (8009378 <prvHeapInit+0xc0>)
 8009352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009356:	601a      	str	r2, [r3, #0]
}
 8009358:	bf00      	nop
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20002368 	.word	0x20002368
 8009368:	20003ad8 	.word	0x20003ad8
 800936c:	20003ae0 	.word	0x20003ae0
 8009370:	20003ae8 	.word	0x20003ae8
 8009374:	20003ae4 	.word	0x20003ae4
 8009378:	20003aec 	.word	0x20003aec

0800937c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009384:	4b27      	ldr	r3, [pc, #156]	; (8009424 <prvInsertBlockIntoFreeList+0xa8>)
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	e002      	b.n	8009390 <prvInsertBlockIntoFreeList+0x14>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d8f7      	bhi.n	800938a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d108      	bne.n	80093be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	441a      	add	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	441a      	add	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d118      	bne.n	8009404 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <prvInsertBlockIntoFreeList+0xac>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d00d      	beq.n	80093fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	e008      	b.n	800940c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093fa:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <prvInsertBlockIntoFreeList+0xac>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	e003      	b.n	800940c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d002      	beq.n	800941a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr
 8009424:	20003ad8 	.word	0x20003ad8
 8009428:	20003ae0 	.word	0x20003ae0

0800942c <memset>:
 800942c:	4603      	mov	r3, r0
 800942e:	4402      	add	r2, r0
 8009430:	4293      	cmp	r3, r2
 8009432:	d100      	bne.n	8009436 <memset+0xa>
 8009434:	4770      	bx	lr
 8009436:	f803 1b01 	strb.w	r1, [r3], #1
 800943a:	e7f9      	b.n	8009430 <memset+0x4>

0800943c <strncmp>:
 800943c:	b510      	push	{r4, lr}
 800943e:	b16a      	cbz	r2, 800945c <strncmp+0x20>
 8009440:	3901      	subs	r1, #1
 8009442:	1884      	adds	r4, r0, r2
 8009444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009448:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800944c:	429a      	cmp	r2, r3
 800944e:	d103      	bne.n	8009458 <strncmp+0x1c>
 8009450:	42a0      	cmp	r0, r4
 8009452:	d001      	beq.n	8009458 <strncmp+0x1c>
 8009454:	2a00      	cmp	r2, #0
 8009456:	d1f5      	bne.n	8009444 <strncmp+0x8>
 8009458:	1ad0      	subs	r0, r2, r3
 800945a:	bd10      	pop	{r4, pc}
 800945c:	4610      	mov	r0, r2
 800945e:	e7fc      	b.n	800945a <strncmp+0x1e>

08009460 <strncpy>:
 8009460:	4603      	mov	r3, r0
 8009462:	b510      	push	{r4, lr}
 8009464:	3901      	subs	r1, #1
 8009466:	b132      	cbz	r2, 8009476 <strncpy+0x16>
 8009468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800946c:	3a01      	subs	r2, #1
 800946e:	f803 4b01 	strb.w	r4, [r3], #1
 8009472:	2c00      	cmp	r4, #0
 8009474:	d1f7      	bne.n	8009466 <strncpy+0x6>
 8009476:	2100      	movs	r1, #0
 8009478:	441a      	add	r2, r3
 800947a:	4293      	cmp	r3, r2
 800947c:	d100      	bne.n	8009480 <strncpy+0x20>
 800947e:	bd10      	pop	{r4, pc}
 8009480:	f803 1b01 	strb.w	r1, [r3], #1
 8009484:	e7f9      	b.n	800947a <strncpy+0x1a>
	...

08009488 <_reclaim_reent>:
 8009488:	4b29      	ldr	r3, [pc, #164]	; (8009530 <_reclaim_reent+0xa8>)
 800948a:	b570      	push	{r4, r5, r6, lr}
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4604      	mov	r4, r0
 8009490:	4283      	cmp	r3, r0
 8009492:	d04b      	beq.n	800952c <_reclaim_reent+0xa4>
 8009494:	69c3      	ldr	r3, [r0, #28]
 8009496:	b143      	cbz	r3, 80094aa <_reclaim_reent+0x22>
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d144      	bne.n	8009528 <_reclaim_reent+0xa0>
 800949e:	69e3      	ldr	r3, [r4, #28]
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	b111      	cbz	r1, 80094aa <_reclaim_reent+0x22>
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 f87f 	bl	80095a8 <_free_r>
 80094aa:	6961      	ldr	r1, [r4, #20]
 80094ac:	b111      	cbz	r1, 80094b4 <_reclaim_reent+0x2c>
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 f87a 	bl	80095a8 <_free_r>
 80094b4:	69e1      	ldr	r1, [r4, #28]
 80094b6:	b111      	cbz	r1, 80094be <_reclaim_reent+0x36>
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 f875 	bl	80095a8 <_free_r>
 80094be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80094c0:	b111      	cbz	r1, 80094c8 <_reclaim_reent+0x40>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f870 	bl	80095a8 <_free_r>
 80094c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ca:	b111      	cbz	r1, 80094d2 <_reclaim_reent+0x4a>
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f86b 	bl	80095a8 <_free_r>
 80094d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094d4:	b111      	cbz	r1, 80094dc <_reclaim_reent+0x54>
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f866 	bl	80095a8 <_free_r>
 80094dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094de:	b111      	cbz	r1, 80094e6 <_reclaim_reent+0x5e>
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 f861 	bl	80095a8 <_free_r>
 80094e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80094e8:	b111      	cbz	r1, 80094f0 <_reclaim_reent+0x68>
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f85c 	bl	80095a8 <_free_r>
 80094f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80094f2:	b111      	cbz	r1, 80094fa <_reclaim_reent+0x72>
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 f857 	bl	80095a8 <_free_r>
 80094fa:	6a23      	ldr	r3, [r4, #32]
 80094fc:	b1b3      	cbz	r3, 800952c <_reclaim_reent+0xa4>
 80094fe:	4620      	mov	r0, r4
 8009500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009504:	4718      	bx	r3
 8009506:	5949      	ldr	r1, [r1, r5]
 8009508:	b941      	cbnz	r1, 800951c <_reclaim_reent+0x94>
 800950a:	3504      	adds	r5, #4
 800950c:	69e3      	ldr	r3, [r4, #28]
 800950e:	2d80      	cmp	r5, #128	; 0x80
 8009510:	68d9      	ldr	r1, [r3, #12]
 8009512:	d1f8      	bne.n	8009506 <_reclaim_reent+0x7e>
 8009514:	4620      	mov	r0, r4
 8009516:	f000 f847 	bl	80095a8 <_free_r>
 800951a:	e7c0      	b.n	800949e <_reclaim_reent+0x16>
 800951c:	680e      	ldr	r6, [r1, #0]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f842 	bl	80095a8 <_free_r>
 8009524:	4631      	mov	r1, r6
 8009526:	e7ef      	b.n	8009508 <_reclaim_reent+0x80>
 8009528:	2500      	movs	r5, #0
 800952a:	e7ef      	b.n	800950c <_reclaim_reent+0x84>
 800952c:	bd70      	pop	{r4, r5, r6, pc}
 800952e:	bf00      	nop
 8009530:	20000064 	.word	0x20000064

08009534 <__errno>:
 8009534:	4b01      	ldr	r3, [pc, #4]	; (800953c <__errno+0x8>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000064 	.word	0x20000064

08009540 <__libc_init_array>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	2600      	movs	r6, #0
 8009544:	4d0c      	ldr	r5, [pc, #48]	; (8009578 <__libc_init_array+0x38>)
 8009546:	4c0d      	ldr	r4, [pc, #52]	; (800957c <__libc_init_array+0x3c>)
 8009548:	1b64      	subs	r4, r4, r5
 800954a:	10a4      	asrs	r4, r4, #2
 800954c:	42a6      	cmp	r6, r4
 800954e:	d109      	bne.n	8009564 <__libc_init_array+0x24>
 8009550:	f000 ff88 	bl	800a464 <_init>
 8009554:	2600      	movs	r6, #0
 8009556:	4d0a      	ldr	r5, [pc, #40]	; (8009580 <__libc_init_array+0x40>)
 8009558:	4c0a      	ldr	r4, [pc, #40]	; (8009584 <__libc_init_array+0x44>)
 800955a:	1b64      	subs	r4, r4, r5
 800955c:	10a4      	asrs	r4, r4, #2
 800955e:	42a6      	cmp	r6, r4
 8009560:	d105      	bne.n	800956e <__libc_init_array+0x2e>
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	f855 3b04 	ldr.w	r3, [r5], #4
 8009568:	4798      	blx	r3
 800956a:	3601      	adds	r6, #1
 800956c:	e7ee      	b.n	800954c <__libc_init_array+0xc>
 800956e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009572:	4798      	blx	r3
 8009574:	3601      	adds	r6, #1
 8009576:	e7f2      	b.n	800955e <__libc_init_array+0x1e>
 8009578:	0800a668 	.word	0x0800a668
 800957c:	0800a668 	.word	0x0800a668
 8009580:	0800a668 	.word	0x0800a668
 8009584:	0800a66c 	.word	0x0800a66c

08009588 <__retarget_lock_acquire_recursive>:
 8009588:	4770      	bx	lr

0800958a <__retarget_lock_release_recursive>:
 800958a:	4770      	bx	lr

0800958c <memcpy>:
 800958c:	440a      	add	r2, r1
 800958e:	4291      	cmp	r1, r2
 8009590:	f100 33ff 	add.w	r3, r0, #4294967295
 8009594:	d100      	bne.n	8009598 <memcpy+0xc>
 8009596:	4770      	bx	lr
 8009598:	b510      	push	{r4, lr}
 800959a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959e:	4291      	cmp	r1, r2
 80095a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a4:	d1f9      	bne.n	800959a <memcpy+0xe>
 80095a6:	bd10      	pop	{r4, pc}

080095a8 <_free_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4605      	mov	r5, r0
 80095ac:	2900      	cmp	r1, #0
 80095ae:	d040      	beq.n	8009632 <_free_r+0x8a>
 80095b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b4:	1f0c      	subs	r4, r1, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfb8      	it	lt
 80095ba:	18e4      	addlt	r4, r4, r3
 80095bc:	f000 f83c 	bl	8009638 <__malloc_lock>
 80095c0:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <_free_r+0x8c>)
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	b933      	cbnz	r3, 80095d4 <_free_r+0x2c>
 80095c6:	6063      	str	r3, [r4, #4]
 80095c8:	6014      	str	r4, [r2, #0]
 80095ca:	4628      	mov	r0, r5
 80095cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d0:	f000 b838 	b.w	8009644 <__malloc_unlock>
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	d908      	bls.n	80095ea <_free_r+0x42>
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	1821      	adds	r1, r4, r0
 80095dc:	428b      	cmp	r3, r1
 80095de:	bf01      	itttt	eq
 80095e0:	6819      	ldreq	r1, [r3, #0]
 80095e2:	685b      	ldreq	r3, [r3, #4]
 80095e4:	1809      	addeq	r1, r1, r0
 80095e6:	6021      	streq	r1, [r4, #0]
 80095e8:	e7ed      	b.n	80095c6 <_free_r+0x1e>
 80095ea:	461a      	mov	r2, r3
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	b10b      	cbz	r3, 80095f4 <_free_r+0x4c>
 80095f0:	42a3      	cmp	r3, r4
 80095f2:	d9fa      	bls.n	80095ea <_free_r+0x42>
 80095f4:	6811      	ldr	r1, [r2, #0]
 80095f6:	1850      	adds	r0, r2, r1
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d10b      	bne.n	8009614 <_free_r+0x6c>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	4401      	add	r1, r0
 8009600:	1850      	adds	r0, r2, r1
 8009602:	4283      	cmp	r3, r0
 8009604:	6011      	str	r1, [r2, #0]
 8009606:	d1e0      	bne.n	80095ca <_free_r+0x22>
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4408      	add	r0, r1
 800960e:	6010      	str	r0, [r2, #0]
 8009610:	6053      	str	r3, [r2, #4]
 8009612:	e7da      	b.n	80095ca <_free_r+0x22>
 8009614:	d902      	bls.n	800961c <_free_r+0x74>
 8009616:	230c      	movs	r3, #12
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	e7d6      	b.n	80095ca <_free_r+0x22>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	1821      	adds	r1, r4, r0
 8009620:	428b      	cmp	r3, r1
 8009622:	bf01      	itttt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	1809      	addeq	r1, r1, r0
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	6054      	str	r4, [r2, #4]
 8009630:	e7cb      	b.n	80095ca <_free_r+0x22>
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	20003c2c 	.word	0x20003c2c

08009638 <__malloc_lock>:
 8009638:	4801      	ldr	r0, [pc, #4]	; (8009640 <__malloc_lock+0x8>)
 800963a:	f7ff bfa5 	b.w	8009588 <__retarget_lock_acquire_recursive>
 800963e:	bf00      	nop
 8009640:	20003c28 	.word	0x20003c28

08009644 <__malloc_unlock>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__malloc_unlock+0x8>)
 8009646:	f7ff bfa0 	b.w	800958a <__retarget_lock_release_recursive>
 800964a:	bf00      	nop
 800964c:	20003c28 	.word	0x20003c28

08009650 <pow>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4614      	mov	r4, r2
 8009656:	461d      	mov	r5, r3
 8009658:	4680      	mov	r8, r0
 800965a:	4689      	mov	r9, r1
 800965c:	f000 f868 	bl	8009730 <__ieee754_pow>
 8009660:	4622      	mov	r2, r4
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	462b      	mov	r3, r5
 8009668:	4620      	mov	r0, r4
 800966a:	4629      	mov	r1, r5
 800966c:	f7f7 f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8009670:	bbc8      	cbnz	r0, 80096e6 <pow+0x96>
 8009672:	2200      	movs	r2, #0
 8009674:	2300      	movs	r3, #0
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	f7f7 f995 	bl	80009a8 <__aeabi_dcmpeq>
 800967e:	b1b8      	cbz	r0, 80096b0 <pow+0x60>
 8009680:	2200      	movs	r2, #0
 8009682:	2300      	movs	r3, #0
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	f7f7 f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800968c:	2800      	cmp	r0, #0
 800968e:	d141      	bne.n	8009714 <pow+0xc4>
 8009690:	4620      	mov	r0, r4
 8009692:	4629      	mov	r1, r5
 8009694:	f000 f844 	bl	8009720 <finite>
 8009698:	b328      	cbz	r0, 80096e6 <pow+0x96>
 800969a:	2200      	movs	r2, #0
 800969c:	2300      	movs	r3, #0
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f7 f98b 	bl	80009bc <__aeabi_dcmplt>
 80096a6:	b1f0      	cbz	r0, 80096e6 <pow+0x96>
 80096a8:	f7ff ff44 	bl	8009534 <__errno>
 80096ac:	2322      	movs	r3, #34	; 0x22
 80096ae:	e019      	b.n	80096e4 <pow+0x94>
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f000 f834 	bl	8009720 <finite>
 80096b8:	b9c8      	cbnz	r0, 80096ee <pow+0x9e>
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	f000 f82f 	bl	8009720 <finite>
 80096c2:	b1a0      	cbz	r0, 80096ee <pow+0x9e>
 80096c4:	4620      	mov	r0, r4
 80096c6:	4629      	mov	r1, r5
 80096c8:	f000 f82a 	bl	8009720 <finite>
 80096cc:	b178      	cbz	r0, 80096ee <pow+0x9e>
 80096ce:	4632      	mov	r2, r6
 80096d0:	463b      	mov	r3, r7
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f7 f999 	bl	8000a0c <__aeabi_dcmpun>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0e4      	beq.n	80096a8 <pow+0x58>
 80096de:	f7ff ff29 	bl	8009534 <__errno>
 80096e2:	2321      	movs	r3, #33	; 0x21
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	4630      	mov	r0, r6
 80096e8:	4639      	mov	r1, r7
 80096ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	4630      	mov	r0, r6
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f7 f957 	bl	80009a8 <__aeabi_dcmpeq>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0f3      	beq.n	80096e6 <pow+0x96>
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f000 f80d 	bl	8009720 <finite>
 8009706:	2800      	cmp	r0, #0
 8009708:	d0ed      	beq.n	80096e6 <pow+0x96>
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f000 f807 	bl	8009720 <finite>
 8009712:	e7c8      	b.n	80096a6 <pow+0x56>
 8009714:	2600      	movs	r6, #0
 8009716:	4f01      	ldr	r7, [pc, #4]	; (800971c <pow+0xcc>)
 8009718:	e7e5      	b.n	80096e6 <pow+0x96>
 800971a:	bf00      	nop
 800971c:	3ff00000 	.word	0x3ff00000

08009720 <finite>:
 8009720:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009724:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009728:	0fc0      	lsrs	r0, r0, #31
 800972a:	4770      	bx	lr
 800972c:	0000      	movs	r0, r0
	...

08009730 <__ieee754_pow>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	b093      	sub	sp, #76	; 0x4c
 8009736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800973a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800973e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009742:	4689      	mov	r9, r1
 8009744:	ea56 0102 	orrs.w	r1, r6, r2
 8009748:	4680      	mov	r8, r0
 800974a:	d111      	bne.n	8009770 <__ieee754_pow+0x40>
 800974c:	1803      	adds	r3, r0, r0
 800974e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009752:	4152      	adcs	r2, r2
 8009754:	4299      	cmp	r1, r3
 8009756:	4b82      	ldr	r3, [pc, #520]	; (8009960 <__ieee754_pow+0x230>)
 8009758:	4193      	sbcs	r3, r2
 800975a:	f080 84ba 	bcs.w	800a0d2 <__ieee754_pow+0x9a2>
 800975e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 fd01 	bl	800016c <__adddf3>
 800976a:	4683      	mov	fp, r0
 800976c:	468c      	mov	ip, r1
 800976e:	e06f      	b.n	8009850 <__ieee754_pow+0x120>
 8009770:	4b7c      	ldr	r3, [pc, #496]	; (8009964 <__ieee754_pow+0x234>)
 8009772:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009776:	429c      	cmp	r4, r3
 8009778:	464d      	mov	r5, r9
 800977a:	4682      	mov	sl, r0
 800977c:	dc06      	bgt.n	800978c <__ieee754_pow+0x5c>
 800977e:	d101      	bne.n	8009784 <__ieee754_pow+0x54>
 8009780:	2800      	cmp	r0, #0
 8009782:	d1ec      	bne.n	800975e <__ieee754_pow+0x2e>
 8009784:	429e      	cmp	r6, r3
 8009786:	dc01      	bgt.n	800978c <__ieee754_pow+0x5c>
 8009788:	d10f      	bne.n	80097aa <__ieee754_pow+0x7a>
 800978a:	b172      	cbz	r2, 80097aa <__ieee754_pow+0x7a>
 800978c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009790:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009794:	ea55 050a 	orrs.w	r5, r5, sl
 8009798:	d1e1      	bne.n	800975e <__ieee754_pow+0x2e>
 800979a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800979e:	18db      	adds	r3, r3, r3
 80097a0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80097a4:	4152      	adcs	r2, r2
 80097a6:	429d      	cmp	r5, r3
 80097a8:	e7d5      	b.n	8009756 <__ieee754_pow+0x26>
 80097aa:	2d00      	cmp	r5, #0
 80097ac:	da39      	bge.n	8009822 <__ieee754_pow+0xf2>
 80097ae:	4b6e      	ldr	r3, [pc, #440]	; (8009968 <__ieee754_pow+0x238>)
 80097b0:	429e      	cmp	r6, r3
 80097b2:	dc52      	bgt.n	800985a <__ieee754_pow+0x12a>
 80097b4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80097b8:	429e      	cmp	r6, r3
 80097ba:	f340 849d 	ble.w	800a0f8 <__ieee754_pow+0x9c8>
 80097be:	1533      	asrs	r3, r6, #20
 80097c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097c4:	2b14      	cmp	r3, #20
 80097c6:	dd0f      	ble.n	80097e8 <__ieee754_pow+0xb8>
 80097c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80097cc:	fa22 f103 	lsr.w	r1, r2, r3
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	4293      	cmp	r3, r2
 80097d6:	f040 848f 	bne.w	800a0f8 <__ieee754_pow+0x9c8>
 80097da:	f001 0101 	and.w	r1, r1, #1
 80097de:	f1c1 0302 	rsb	r3, r1, #2
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	b182      	cbz	r2, 8009808 <__ieee754_pow+0xd8>
 80097e6:	e05d      	b.n	80098a4 <__ieee754_pow+0x174>
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d159      	bne.n	80098a0 <__ieee754_pow+0x170>
 80097ec:	f1c3 0314 	rsb	r3, r3, #20
 80097f0:	fa46 f103 	asr.w	r1, r6, r3
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	42b3      	cmp	r3, r6
 80097fa:	f040 847a 	bne.w	800a0f2 <__ieee754_pow+0x9c2>
 80097fe:	f001 0101 	and.w	r1, r1, #1
 8009802:	f1c1 0302 	rsb	r3, r1, #2
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	4b58      	ldr	r3, [pc, #352]	; (800996c <__ieee754_pow+0x23c>)
 800980a:	429e      	cmp	r6, r3
 800980c:	d132      	bne.n	8009874 <__ieee754_pow+0x144>
 800980e:	2f00      	cmp	r7, #0
 8009810:	f280 846b 	bge.w	800a0ea <__ieee754_pow+0x9ba>
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	2000      	movs	r0, #0
 800981a:	4954      	ldr	r1, [pc, #336]	; (800996c <__ieee754_pow+0x23c>)
 800981c:	f7f6 ff86 	bl	800072c <__aeabi_ddiv>
 8009820:	e7a3      	b.n	800976a <__ieee754_pow+0x3a>
 8009822:	2300      	movs	r3, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	2a00      	cmp	r2, #0
 8009828:	d13c      	bne.n	80098a4 <__ieee754_pow+0x174>
 800982a:	4b4e      	ldr	r3, [pc, #312]	; (8009964 <__ieee754_pow+0x234>)
 800982c:	429e      	cmp	r6, r3
 800982e:	d1eb      	bne.n	8009808 <__ieee754_pow+0xd8>
 8009830:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009834:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009838:	ea53 030a 	orrs.w	r3, r3, sl
 800983c:	f000 8449 	beq.w	800a0d2 <__ieee754_pow+0x9a2>
 8009840:	4b4b      	ldr	r3, [pc, #300]	; (8009970 <__ieee754_pow+0x240>)
 8009842:	429c      	cmp	r4, r3
 8009844:	dd0b      	ble.n	800985e <__ieee754_pow+0x12e>
 8009846:	2f00      	cmp	r7, #0
 8009848:	f2c0 8449 	blt.w	800a0de <__ieee754_pow+0x9ae>
 800984c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009850:	4658      	mov	r0, fp
 8009852:	4661      	mov	r1, ip
 8009854:	b013      	add	sp, #76	; 0x4c
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	2302      	movs	r3, #2
 800985c:	e7e2      	b.n	8009824 <__ieee754_pow+0xf4>
 800985e:	2f00      	cmp	r7, #0
 8009860:	f04f 0b00 	mov.w	fp, #0
 8009864:	f04f 0c00 	mov.w	ip, #0
 8009868:	daf2      	bge.n	8009850 <__ieee754_pow+0x120>
 800986a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800986e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009872:	e7ed      	b.n	8009850 <__ieee754_pow+0x120>
 8009874:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009878:	d106      	bne.n	8009888 <__ieee754_pow+0x158>
 800987a:	4642      	mov	r2, r8
 800987c:	464b      	mov	r3, r9
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f6 fe29 	bl	80004d8 <__aeabi_dmul>
 8009886:	e770      	b.n	800976a <__ieee754_pow+0x3a>
 8009888:	4b3a      	ldr	r3, [pc, #232]	; (8009974 <__ieee754_pow+0x244>)
 800988a:	429f      	cmp	r7, r3
 800988c:	d10a      	bne.n	80098a4 <__ieee754_pow+0x174>
 800988e:	2d00      	cmp	r5, #0
 8009890:	db08      	blt.n	80098a4 <__ieee754_pow+0x174>
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	b013      	add	sp, #76	; 0x4c
 8009898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	f000 bd0a 	b.w	800a2b4 <__ieee754_sqrt>
 80098a0:	2300      	movs	r3, #0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	f000 fc58 	bl	800a15c <fabs>
 80098ac:	4683      	mov	fp, r0
 80098ae:	468c      	mov	ip, r1
 80098b0:	f1ba 0f00 	cmp.w	sl, #0
 80098b4:	d128      	bne.n	8009908 <__ieee754_pow+0x1d8>
 80098b6:	b124      	cbz	r4, 80098c2 <__ieee754_pow+0x192>
 80098b8:	4b2c      	ldr	r3, [pc, #176]	; (800996c <__ieee754_pow+0x23c>)
 80098ba:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80098be:	429a      	cmp	r2, r3
 80098c0:	d122      	bne.n	8009908 <__ieee754_pow+0x1d8>
 80098c2:	2f00      	cmp	r7, #0
 80098c4:	da07      	bge.n	80098d6 <__ieee754_pow+0x1a6>
 80098c6:	465a      	mov	r2, fp
 80098c8:	4663      	mov	r3, ip
 80098ca:	2000      	movs	r0, #0
 80098cc:	4927      	ldr	r1, [pc, #156]	; (800996c <__ieee754_pow+0x23c>)
 80098ce:	f7f6 ff2d 	bl	800072c <__aeabi_ddiv>
 80098d2:	4683      	mov	fp, r0
 80098d4:	468c      	mov	ip, r1
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	daba      	bge.n	8009850 <__ieee754_pow+0x120>
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098e4:	431c      	orrs	r4, r3
 80098e6:	d108      	bne.n	80098fa <__ieee754_pow+0x1ca>
 80098e8:	465a      	mov	r2, fp
 80098ea:	4663      	mov	r3, ip
 80098ec:	4658      	mov	r0, fp
 80098ee:	4661      	mov	r1, ip
 80098f0:	f7f6 fc3a 	bl	8000168 <__aeabi_dsub>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	e790      	b.n	800981c <__ieee754_pow+0xec>
 80098fa:	9b00      	ldr	r3, [sp, #0]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d1a7      	bne.n	8009850 <__ieee754_pow+0x120>
 8009900:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009904:	469c      	mov	ip, r3
 8009906:	e7a3      	b.n	8009850 <__ieee754_pow+0x120>
 8009908:	0feb      	lsrs	r3, r5, #31
 800990a:	3b01      	subs	r3, #1
 800990c:	930c      	str	r3, [sp, #48]	; 0x30
 800990e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	4313      	orrs	r3, r2
 8009914:	d104      	bne.n	8009920 <__ieee754_pow+0x1f0>
 8009916:	4642      	mov	r2, r8
 8009918:	464b      	mov	r3, r9
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	e7e7      	b.n	80098f0 <__ieee754_pow+0x1c0>
 8009920:	4b15      	ldr	r3, [pc, #84]	; (8009978 <__ieee754_pow+0x248>)
 8009922:	429e      	cmp	r6, r3
 8009924:	f340 80f6 	ble.w	8009b14 <__ieee754_pow+0x3e4>
 8009928:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800992c:	429e      	cmp	r6, r3
 800992e:	4b10      	ldr	r3, [pc, #64]	; (8009970 <__ieee754_pow+0x240>)
 8009930:	dd09      	ble.n	8009946 <__ieee754_pow+0x216>
 8009932:	429c      	cmp	r4, r3
 8009934:	dc0c      	bgt.n	8009950 <__ieee754_pow+0x220>
 8009936:	2f00      	cmp	r7, #0
 8009938:	da0c      	bge.n	8009954 <__ieee754_pow+0x224>
 800993a:	2000      	movs	r0, #0
 800993c:	b013      	add	sp, #76	; 0x4c
 800993e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009942:	f000 bcb2 	b.w	800a2aa <__math_oflow>
 8009946:	429c      	cmp	r4, r3
 8009948:	dbf5      	blt.n	8009936 <__ieee754_pow+0x206>
 800994a:	4b08      	ldr	r3, [pc, #32]	; (800996c <__ieee754_pow+0x23c>)
 800994c:	429c      	cmp	r4, r3
 800994e:	dd15      	ble.n	800997c <__ieee754_pow+0x24c>
 8009950:	2f00      	cmp	r7, #0
 8009952:	dcf2      	bgt.n	800993a <__ieee754_pow+0x20a>
 8009954:	2000      	movs	r0, #0
 8009956:	b013      	add	sp, #76	; 0x4c
 8009958:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	f000 bca0 	b.w	800a2a0 <__math_uflow>
 8009960:	fff00000 	.word	0xfff00000
 8009964:	7ff00000 	.word	0x7ff00000
 8009968:	433fffff 	.word	0x433fffff
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	3fefffff 	.word	0x3fefffff
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	41e00000 	.word	0x41e00000
 800997c:	4661      	mov	r1, ip
 800997e:	2200      	movs	r2, #0
 8009980:	4658      	mov	r0, fp
 8009982:	4b5f      	ldr	r3, [pc, #380]	; (8009b00 <__ieee754_pow+0x3d0>)
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	a355      	add	r3, pc, #340	; (adr r3, 8009ae0 <__ieee754_pow+0x3b0>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	4604      	mov	r4, r0
 8009990:	460d      	mov	r5, r1
 8009992:	f7f6 fda1 	bl	80004d8 <__aeabi_dmul>
 8009996:	a354      	add	r3, pc, #336	; (adr r3, 8009ae8 <__ieee754_pow+0x3b8>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	4606      	mov	r6, r0
 800999e:	460f      	mov	r7, r1
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fd98 	bl	80004d8 <__aeabi_dmul>
 80099a8:	2200      	movs	r2, #0
 80099aa:	4682      	mov	sl, r0
 80099ac:	468b      	mov	fp, r1
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	4b54      	ldr	r3, [pc, #336]	; (8009b04 <__ieee754_pow+0x3d4>)
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	a14c      	add	r1, pc, #304	; (adr r1, 8009af0 <__ieee754_pow+0x3c0>)
 80099be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c2:	f7f6 fbd1 	bl	8000168 <__aeabi_dsub>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	f7f6 fd85 	bl	80004d8 <__aeabi_dmul>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	2000      	movs	r0, #0
 80099d4:	494c      	ldr	r1, [pc, #304]	; (8009b08 <__ieee754_pow+0x3d8>)
 80099d6:	f7f6 fbc7 	bl	8000168 <__aeabi_dsub>
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	4680      	mov	r8, r0
 80099e0:	4689      	mov	r9, r1
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f6 fd77 	bl	80004d8 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 fd71 	bl	80004d8 <__aeabi_dmul>
 80099f6:	a340      	add	r3, pc, #256	; (adr r3, 8009af8 <__ieee754_pow+0x3c8>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f6 fd6c 	bl	80004d8 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4650      	mov	r0, sl
 8009a06:	4659      	mov	r1, fp
 8009a08:	f7f6 fbae 	bl	8000168 <__aeabi_dsub>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f6 fba8 	bl	800016c <__adddf3>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	4632      	mov	r2, r6
 8009a20:	463b      	mov	r3, r7
 8009a22:	4682      	mov	sl, r0
 8009a24:	468b      	mov	fp, r1
 8009a26:	f7f6 fb9f 	bl	8000168 <__aeabi_dsub>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 fb99 	bl	8000168 <__aeabi_dsub>
 8009a36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a3a:	9b00      	ldr	r3, [sp, #0]
 8009a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	4313      	orrs	r3, r2
 8009a42:	f04f 0600 	mov.w	r6, #0
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	bf0c      	ite	eq
 8009a4c:	4b2f      	ldreq	r3, [pc, #188]	; (8009b0c <__ieee754_pow+0x3dc>)
 8009a4e:	4b2c      	ldrne	r3, [pc, #176]	; (8009b00 <__ieee754_pow+0x3d0>)
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a58:	e9cd 2300 	strd	r2, r3, [sp]
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f6 fb82 	bl	8000168 <__aeabi_dsub>
 8009a64:	4652      	mov	r2, sl
 8009a66:	465b      	mov	r3, fp
 8009a68:	f7f6 fd36 	bl	80004d8 <__aeabi_dmul>
 8009a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a70:	4680      	mov	r8, r0
 8009a72:	4689      	mov	r9, r1
 8009a74:	4620      	mov	r0, r4
 8009a76:	4629      	mov	r1, r5
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fb72 	bl	800016c <__adddf3>
 8009a88:	4632      	mov	r2, r6
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	4689      	mov	r9, r1
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009aa8:	f7f6 fb60 	bl	800016c <__adddf3>
 8009aac:	4b18      	ldr	r3, [pc, #96]	; (8009b10 <__ieee754_pow+0x3e0>)
 8009aae:	4682      	mov	sl, r0
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	460f      	mov	r7, r1
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	f340 82e7 	ble.w	800a088 <__ieee754_pow+0x958>
 8009aba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009abe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ac2:	4303      	orrs	r3, r0
 8009ac4:	f000 81e2 	beq.w	8009e8c <__ieee754_pow+0x75c>
 8009ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f7f6 ff74 	bl	80009bc <__aeabi_dcmplt>
 8009ad4:	3800      	subs	r0, #0
 8009ad6:	bf18      	it	ne
 8009ad8:	2001      	movne	r0, #1
 8009ada:	e72f      	b.n	800993c <__ieee754_pow+0x20c>
 8009adc:	f3af 8000 	nop.w
 8009ae0:	60000000 	.word	0x60000000
 8009ae4:	3ff71547 	.word	0x3ff71547
 8009ae8:	f85ddf44 	.word	0xf85ddf44
 8009aec:	3e54ae0b 	.word	0x3e54ae0b
 8009af0:	55555555 	.word	0x55555555
 8009af4:	3fd55555 	.word	0x3fd55555
 8009af8:	652b82fe 	.word	0x652b82fe
 8009afc:	3ff71547 	.word	0x3ff71547
 8009b00:	3ff00000 	.word	0x3ff00000
 8009b04:	3fd00000 	.word	0x3fd00000
 8009b08:	3fe00000 	.word	0x3fe00000
 8009b0c:	bff00000 	.word	0xbff00000
 8009b10:	408fffff 	.word	0x408fffff
 8009b14:	4bd4      	ldr	r3, [pc, #848]	; (8009e68 <__ieee754_pow+0x738>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	402b      	ands	r3, r5
 8009b1a:	b943      	cbnz	r3, 8009b2e <__ieee754_pow+0x3fe>
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	4661      	mov	r1, ip
 8009b20:	4bd2      	ldr	r3, [pc, #840]	; (8009e6c <__ieee754_pow+0x73c>)
 8009b22:	f7f6 fcd9 	bl	80004d8 <__aeabi_dmul>
 8009b26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b2a:	4683      	mov	fp, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	1523      	asrs	r3, r4, #20
 8009b30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b34:	4413      	add	r3, r2
 8009b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b38:	4bcd      	ldr	r3, [pc, #820]	; (8009e70 <__ieee754_pow+0x740>)
 8009b3a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b3e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b42:	429c      	cmp	r4, r3
 8009b44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b48:	dd08      	ble.n	8009b5c <__ieee754_pow+0x42c>
 8009b4a:	4bca      	ldr	r3, [pc, #808]	; (8009e74 <__ieee754_pow+0x744>)
 8009b4c:	429c      	cmp	r4, r3
 8009b4e:	f340 8164 	ble.w	8009e1a <__ieee754_pow+0x6ea>
 8009b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b54:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b58:	3301      	adds	r3, #1
 8009b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	00f3      	lsls	r3, r6, #3
 8009b60:	930d      	str	r3, [sp, #52]	; 0x34
 8009b62:	4bc5      	ldr	r3, [pc, #788]	; (8009e78 <__ieee754_pow+0x748>)
 8009b64:	4658      	mov	r0, fp
 8009b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b6e:	4629      	mov	r1, r5
 8009b70:	461a      	mov	r2, r3
 8009b72:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009b76:	4623      	mov	r3, r4
 8009b78:	f7f6 faf6 	bl	8000168 <__aeabi_dsub>
 8009b7c:	46da      	mov	sl, fp
 8009b7e:	462b      	mov	r3, r5
 8009b80:	4652      	mov	r2, sl
 8009b82:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b8a:	f7f6 faef 	bl	800016c <__adddf3>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	2000      	movs	r0, #0
 8009b94:	49b9      	ldr	r1, [pc, #740]	; (8009e7c <__ieee754_pow+0x74c>)
 8009b96:	f7f6 fdc9 	bl	800072c <__aeabi_ddiv>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ba2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ba6:	f7f6 fc97 	bl	80004d8 <__aeabi_dmul>
 8009baa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009bb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	46ab      	mov	fp, r5
 8009bbc:	106d      	asrs	r5, r5, #1
 8009bbe:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009bc8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009bcc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	461d      	mov	r5, r3
 8009bd8:	f7f6 fc7e 	bl	80004d8 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009be4:	f7f6 fac0 	bl	8000168 <__aeabi_dsub>
 8009be8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bec:	4606      	mov	r6, r0
 8009bee:	460f      	mov	r7, r1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f7f6 fab8 	bl	8000168 <__aeabi_dsub>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	4659      	mov	r1, fp
 8009c00:	f7f6 fab2 	bl	8000168 <__aeabi_dsub>
 8009c04:	4642      	mov	r2, r8
 8009c06:	464b      	mov	r3, r9
 8009c08:	f7f6 fc66 	bl	80004d8 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 faa8 	bl	8000168 <__aeabi_dsub>
 8009c18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c1c:	f7f6 fc5c 	bl	80004d8 <__aeabi_dmul>
 8009c20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c24:	4682      	mov	sl, r0
 8009c26:	468b      	mov	fp, r1
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f7f6 fc54 	bl	80004d8 <__aeabi_dmul>
 8009c30:	a37b      	add	r3, pc, #492	; (adr r3, 8009e20 <__ieee754_pow+0x6f0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	f7f6 fc4d 	bl	80004d8 <__aeabi_dmul>
 8009c3e:	a37a      	add	r3, pc, #488	; (adr r3, 8009e28 <__ieee754_pow+0x6f8>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f7f6 fa92 	bl	800016c <__adddf3>
 8009c48:	4622      	mov	r2, r4
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	f7f6 fc44 	bl	80004d8 <__aeabi_dmul>
 8009c50:	a377      	add	r3, pc, #476	; (adr r3, 8009e30 <__ieee754_pow+0x700>)
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f7f6 fa89 	bl	800016c <__adddf3>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	f7f6 fc3b 	bl	80004d8 <__aeabi_dmul>
 8009c62:	a375      	add	r3, pc, #468	; (adr r3, 8009e38 <__ieee754_pow+0x708>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f7f6 fa80 	bl	800016c <__adddf3>
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	f7f6 fc32 	bl	80004d8 <__aeabi_dmul>
 8009c74:	a372      	add	r3, pc, #456	; (adr r3, 8009e40 <__ieee754_pow+0x710>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fa77 	bl	800016c <__adddf3>
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	f7f6 fc29 	bl	80004d8 <__aeabi_dmul>
 8009c86:	a370      	add	r3, pc, #448	; (adr r3, 8009e48 <__ieee754_pow+0x718>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fa6e 	bl	800016c <__adddf3>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	462b      	mov	r3, r5
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fc1c 	bl	80004d8 <__aeabi_dmul>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f7f6 fc16 	bl	80004d8 <__aeabi_dmul>
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	f7f6 fa58 	bl	800016c <__adddf3>
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f7f6 fa50 	bl	800016c <__adddf3>
 8009ccc:	4642      	mov	r2, r8
 8009cce:	4606      	mov	r6, r0
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 fbfe 	bl	80004d8 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <__ieee754_pow+0x750>)
 8009ce8:	f7f6 fa40 	bl	800016c <__adddf3>
 8009cec:	4632      	mov	r2, r6
 8009cee:	463b      	mov	r3, r7
 8009cf0:	f7f6 fa3c 	bl	800016c <__adddf3>
 8009cf4:	2400      	movs	r4, #0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 fbea 	bl	80004d8 <__aeabi_dmul>
 8009d04:	2200      	movs	r2, #0
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4b5c      	ldr	r3, [pc, #368]	; (8009e80 <__ieee754_pow+0x750>)
 8009d10:	f7f6 fa2a 	bl	8000168 <__aeabi_dsub>
 8009d14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d18:	f7f6 fa26 	bl	8000168 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fa20 	bl	8000168 <__aeabi_dsub>
 8009d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d2c:	f7f6 fbd4 	bl	80004d8 <__aeabi_dmul>
 8009d30:	4622      	mov	r2, r4
 8009d32:	4606      	mov	r6, r0
 8009d34:	460f      	mov	r7, r1
 8009d36:	462b      	mov	r3, r5
 8009d38:	4650      	mov	r0, sl
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	f7f6 fbcc 	bl	80004d8 <__aeabi_dmul>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fa10 	bl	800016c <__adddf3>
 8009d4c:	2400      	movs	r4, #0
 8009d4e:	4606      	mov	r6, r0
 8009d50:	460f      	mov	r7, r1
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4640      	mov	r0, r8
 8009d58:	4649      	mov	r1, r9
 8009d5a:	f7f6 fa07 	bl	800016c <__adddf3>
 8009d5e:	a33c      	add	r3, pc, #240	; (adr r3, 8009e50 <__ieee754_pow+0x720>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	4620      	mov	r0, r4
 8009d66:	460d      	mov	r5, r1
 8009d68:	f7f6 fbb6 	bl	80004d8 <__aeabi_dmul>
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	464b      	mov	r3, r9
 8009d70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d74:	4620      	mov	r0, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	f7f6 f9f6 	bl	8000168 <__aeabi_dsub>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	a333      	add	r3, pc, #204	; (adr r3, 8009e58 <__ieee754_pow+0x728>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fba3 	bl	80004d8 <__aeabi_dmul>
 8009d92:	a333      	add	r3, pc, #204	; (adr r3, 8009e60 <__ieee754_pow+0x730>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fb9a 	bl	80004d8 <__aeabi_dmul>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 f9de 	bl	800016c <__adddf3>
 8009db0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db2:	4b34      	ldr	r3, [pc, #208]	; (8009e84 <__ieee754_pow+0x754>)
 8009db4:	4413      	add	r3, r2
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 f9d7 	bl	800016c <__adddf3>
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009dc2:	4689      	mov	r9, r1
 8009dc4:	f7f6 fb1e 	bl	8000404 <__aeabi_i2d>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dd2:	4b2d      	ldr	r3, [pc, #180]	; (8009e88 <__ieee754_pow+0x758>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009dda:	4642      	mov	r2, r8
 8009ddc:	464b      	mov	r3, r9
 8009dde:	f7f6 f9c5 	bl	800016c <__adddf3>
 8009de2:	4632      	mov	r2, r6
 8009de4:	463b      	mov	r3, r7
 8009de6:	f7f6 f9c1 	bl	800016c <__adddf3>
 8009dea:	4622      	mov	r2, r4
 8009dec:	462b      	mov	r3, r5
 8009dee:	f7f6 f9bd 	bl	800016c <__adddf3>
 8009df2:	2000      	movs	r0, #0
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	4682      	mov	sl, r0
 8009dfa:	468b      	mov	fp, r1
 8009dfc:	f7f6 f9b4 	bl	8000168 <__aeabi_dsub>
 8009e00:	4632      	mov	r2, r6
 8009e02:	463b      	mov	r3, r7
 8009e04:	f7f6 f9b0 	bl	8000168 <__aeabi_dsub>
 8009e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e0c:	f7f6 f9ac 	bl	8000168 <__aeabi_dsub>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	e60b      	b.n	8009a32 <__ieee754_pow+0x302>
 8009e1a:	2601      	movs	r6, #1
 8009e1c:	e69f      	b.n	8009b5e <__ieee754_pow+0x42e>
 8009e1e:	bf00      	nop
 8009e20:	4a454eef 	.word	0x4a454eef
 8009e24:	3fca7e28 	.word	0x3fca7e28
 8009e28:	93c9db65 	.word	0x93c9db65
 8009e2c:	3fcd864a 	.word	0x3fcd864a
 8009e30:	a91d4101 	.word	0xa91d4101
 8009e34:	3fd17460 	.word	0x3fd17460
 8009e38:	518f264d 	.word	0x518f264d
 8009e3c:	3fd55555 	.word	0x3fd55555
 8009e40:	db6fabff 	.word	0xdb6fabff
 8009e44:	3fdb6db6 	.word	0x3fdb6db6
 8009e48:	33333303 	.word	0x33333303
 8009e4c:	3fe33333 	.word	0x3fe33333
 8009e50:	e0000000 	.word	0xe0000000
 8009e54:	3feec709 	.word	0x3feec709
 8009e58:	dc3a03fd 	.word	0xdc3a03fd
 8009e5c:	3feec709 	.word	0x3feec709
 8009e60:	145b01f5 	.word	0x145b01f5
 8009e64:	be3e2fe0 	.word	0xbe3e2fe0
 8009e68:	7ff00000 	.word	0x7ff00000
 8009e6c:	43400000 	.word	0x43400000
 8009e70:	0003988e 	.word	0x0003988e
 8009e74:	000bb679 	.word	0x000bb679
 8009e78:	0800a638 	.word	0x0800a638
 8009e7c:	3ff00000 	.word	0x3ff00000
 8009e80:	40080000 	.word	0x40080000
 8009e84:	0800a658 	.word	0x0800a658
 8009e88:	0800a648 	.word	0x0800a648
 8009e8c:	a39c      	add	r3, pc, #624	; (adr r3, 800a100 <__ieee754_pow+0x9d0>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 f969 	bl	800016c <__adddf3>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 f95f 	bl	8000168 <__aeabi_dsub>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb2:	f7f6 fda1 	bl	80009f8 <__aeabi_dcmpgt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f47f ae06 	bne.w	8009ac8 <__ieee754_pow+0x398>
 8009ebc:	4aa2      	ldr	r2, [pc, #648]	; (800a148 <__ieee754_pow+0xa18>)
 8009ebe:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	f340 8100 	ble.w	800a0c8 <__ieee754_pow+0x998>
 8009ec8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ecc:	151b      	asrs	r3, r3, #20
 8009ece:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ed2:	fa4a fa03 	asr.w	sl, sl, r3
 8009ed6:	44b2      	add	sl, r6
 8009ed8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009edc:	489b      	ldr	r0, [pc, #620]	; (800a14c <__ieee754_pow+0xa1c>)
 8009ede:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009ee2:	4108      	asrs	r0, r1
 8009ee4:	ea00 030a 	and.w	r3, r0, sl
 8009ee8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009eec:	f1c1 0114 	rsb	r1, r1, #20
 8009ef0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ef4:	fa4a fa01 	asr.w	sl, sl, r1
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	f04f 0200 	mov.w	r2, #0
 8009efe:	4620      	mov	r0, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	bfb8      	it	lt
 8009f04:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f08:	f7f6 f92e 	bl	8000168 <__aeabi_dsub>
 8009f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f14:	2400      	movs	r4, #0
 8009f16:	4642      	mov	r2, r8
 8009f18:	464b      	mov	r3, r9
 8009f1a:	f7f6 f927 	bl	800016c <__adddf3>
 8009f1e:	a37a      	add	r3, pc, #488	; (adr r3, 800a108 <__ieee754_pow+0x9d8>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	4620      	mov	r0, r4
 8009f26:	460d      	mov	r5, r1
 8009f28:	f7f6 fad6 	bl	80004d8 <__aeabi_dmul>
 8009f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f30:	4606      	mov	r6, r0
 8009f32:	460f      	mov	r7, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f916 	bl	8000168 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4640      	mov	r0, r8
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 f910 	bl	8000168 <__aeabi_dsub>
 8009f48:	a371      	add	r3, pc, #452	; (adr r3, 800a110 <__ieee754_pow+0x9e0>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fac3 	bl	80004d8 <__aeabi_dmul>
 8009f52:	a371      	add	r3, pc, #452	; (adr r3, 800a118 <__ieee754_pow+0x9e8>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	4680      	mov	r8, r0
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 faba 	bl	80004d8 <__aeabi_dmul>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7f6 f8fe 	bl	800016c <__adddf3>
 8009f70:	4604      	mov	r4, r0
 8009f72:	460d      	mov	r5, r1
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 f8f6 	bl	800016c <__adddf3>
 8009f80:	4632      	mov	r2, r6
 8009f82:	463b      	mov	r3, r7
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	f7f6 f8ee 	bl	8000168 <__aeabi_dsub>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f8e8 	bl	8000168 <__aeabi_dsub>
 8009f98:	4642      	mov	r2, r8
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f7f6 fa98 	bl	80004d8 <__aeabi_dmul>
 8009fa8:	a35d      	add	r3, pc, #372	; (adr r3, 800a120 <__ieee754_pow+0x9f0>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	4604      	mov	r4, r0
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	f7f6 fa91 	bl	80004d8 <__aeabi_dmul>
 8009fb6:	a35c      	add	r3, pc, #368	; (adr r3, 800a128 <__ieee754_pow+0x9f8>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f8d4 	bl	8000168 <__aeabi_dsub>
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	f7f6 fa88 	bl	80004d8 <__aeabi_dmul>
 8009fc8:	a359      	add	r3, pc, #356	; (adr r3, 800a130 <__ieee754_pow+0xa00>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f8cd 	bl	800016c <__adddf3>
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	f7f6 fa7f 	bl	80004d8 <__aeabi_dmul>
 8009fda:	a357      	add	r3, pc, #348	; (adr r3, 800a138 <__ieee754_pow+0xa08>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f8c2 	bl	8000168 <__aeabi_dsub>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f7f6 fa76 	bl	80004d8 <__aeabi_dmul>
 8009fec:	a354      	add	r3, pc, #336	; (adr r3, 800a140 <__ieee754_pow+0xa10>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f8bb 	bl	800016c <__adddf3>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	f7f6 fa6d 	bl	80004d8 <__aeabi_dmul>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4640      	mov	r0, r8
 800a004:	4649      	mov	r1, r9
 800a006:	f7f6 f8af 	bl	8000168 <__aeabi_dsub>
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4640      	mov	r0, r8
 800a014:	4649      	mov	r1, r9
 800a016:	f7f6 fa5f 	bl	80004d8 <__aeabi_dmul>
 800a01a:	2200      	movs	r2, #0
 800a01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f89e 	bl	8000168 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a034:	f7f6 fb7a 	bl	800072c <__aeabi_ddiv>
 800a038:	4632      	mov	r2, r6
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	463b      	mov	r3, r7
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fa48 	bl	80004d8 <__aeabi_dmul>
 800a048:	4632      	mov	r2, r6
 800a04a:	463b      	mov	r3, r7
 800a04c:	f7f6 f88e 	bl	800016c <__adddf3>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 f886 	bl	8000168 <__aeabi_dsub>
 800a05c:	4642      	mov	r2, r8
 800a05e:	464b      	mov	r3, r9
 800a060:	f7f6 f882 	bl	8000168 <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	2000      	movs	r0, #0
 800a06a:	4939      	ldr	r1, [pc, #228]	; (800a150 <__ieee754_pow+0xa20>)
 800a06c:	f7f6 f87c 	bl	8000168 <__aeabi_dsub>
 800a070:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a074:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a078:	da29      	bge.n	800a0ce <__ieee754_pow+0x99e>
 800a07a:	4652      	mov	r2, sl
 800a07c:	f000 f874 	bl	800a168 <scalbn>
 800a080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a084:	f7ff bbfd 	b.w	8009882 <__ieee754_pow+0x152>
 800a088:	4b32      	ldr	r3, [pc, #200]	; (800a154 <__ieee754_pow+0xa24>)
 800a08a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a08e:	429f      	cmp	r7, r3
 800a090:	f77f af14 	ble.w	8009ebc <__ieee754_pow+0x78c>
 800a094:	4b30      	ldr	r3, [pc, #192]	; (800a158 <__ieee754_pow+0xa28>)
 800a096:	440b      	add	r3, r1
 800a098:	4303      	orrs	r3, r0
 800a09a:	d009      	beq.n	800a0b0 <__ieee754_pow+0x980>
 800a09c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f7f6 fc8a 	bl	80009bc <__aeabi_dcmplt>
 800a0a8:	3800      	subs	r0, #0
 800a0aa:	bf18      	it	ne
 800a0ac:	2001      	movne	r0, #1
 800a0ae:	e452      	b.n	8009956 <__ieee754_pow+0x226>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	f7f6 f858 	bl	8000168 <__aeabi_dsub>
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	f7f6 fc92 	bl	80009e4 <__aeabi_dcmpge>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f43f aefb 	beq.w	8009ebc <__ieee754_pow+0x78c>
 800a0c6:	e7e9      	b.n	800a09c <__ieee754_pow+0x96c>
 800a0c8:	f04f 0a00 	mov.w	sl, #0
 800a0cc:	e720      	b.n	8009f10 <__ieee754_pow+0x7e0>
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	e7d6      	b.n	800a080 <__ieee754_pow+0x950>
 800a0d2:	f04f 0b00 	mov.w	fp, #0
 800a0d6:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a150 <__ieee754_pow+0xa20>
 800a0da:	f7ff bbb9 	b.w	8009850 <__ieee754_pow+0x120>
 800a0de:	f04f 0b00 	mov.w	fp, #0
 800a0e2:	f04f 0c00 	mov.w	ip, #0
 800a0e6:	f7ff bbb3 	b.w	8009850 <__ieee754_pow+0x120>
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7ff bb3c 	b.w	800976a <__ieee754_pow+0x3a>
 800a0f2:	9200      	str	r2, [sp, #0]
 800a0f4:	f7ff bb88 	b.w	8009808 <__ieee754_pow+0xd8>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f7ff bb72 	b.w	80097e2 <__ieee754_pow+0xb2>
 800a0fe:	bf00      	nop
 800a100:	652b82fe 	.word	0x652b82fe
 800a104:	3c971547 	.word	0x3c971547
 800a108:	00000000 	.word	0x00000000
 800a10c:	3fe62e43 	.word	0x3fe62e43
 800a110:	fefa39ef 	.word	0xfefa39ef
 800a114:	3fe62e42 	.word	0x3fe62e42
 800a118:	0ca86c39 	.word	0x0ca86c39
 800a11c:	be205c61 	.word	0xbe205c61
 800a120:	72bea4d0 	.word	0x72bea4d0
 800a124:	3e663769 	.word	0x3e663769
 800a128:	c5d26bf1 	.word	0xc5d26bf1
 800a12c:	3ebbbd41 	.word	0x3ebbbd41
 800a130:	af25de2c 	.word	0xaf25de2c
 800a134:	3f11566a 	.word	0x3f11566a
 800a138:	16bebd93 	.word	0x16bebd93
 800a13c:	3f66c16c 	.word	0x3f66c16c
 800a140:	5555553e 	.word	0x5555553e
 800a144:	3fc55555 	.word	0x3fc55555
 800a148:	3fe00000 	.word	0x3fe00000
 800a14c:	fff00000 	.word	0xfff00000
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	4090cbff 	.word	0x4090cbff
 800a158:	3f6f3400 	.word	0x3f6f3400

0800a15c <fabs>:
 800a15c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a160:	4619      	mov	r1, r3
 800a162:	4770      	bx	lr
 800a164:	0000      	movs	r0, r0
	...

0800a168 <scalbn>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	4616      	mov	r6, r2
 800a16c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	460b      	mov	r3, r1
 800a176:	b992      	cbnz	r2, 800a19e <scalbn+0x36>
 800a178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a17c:	4303      	orrs	r3, r0
 800a17e:	d03c      	beq.n	800a1fa <scalbn+0x92>
 800a180:	4b31      	ldr	r3, [pc, #196]	; (800a248 <scalbn+0xe0>)
 800a182:	2200      	movs	r2, #0
 800a184:	f7f6 f9a8 	bl	80004d8 <__aeabi_dmul>
 800a188:	4b30      	ldr	r3, [pc, #192]	; (800a24c <scalbn+0xe4>)
 800a18a:	4604      	mov	r4, r0
 800a18c:	429e      	cmp	r6, r3
 800a18e:	460d      	mov	r5, r1
 800a190:	da0f      	bge.n	800a1b2 <scalbn+0x4a>
 800a192:	a329      	add	r3, pc, #164	; (adr r3, 800a238 <scalbn+0xd0>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f6 f99e 	bl	80004d8 <__aeabi_dmul>
 800a19c:	e006      	b.n	800a1ac <scalbn+0x44>
 800a19e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a1a2:	42ba      	cmp	r2, r7
 800a1a4:	d109      	bne.n	800a1ba <scalbn+0x52>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	f7f5 ffe0 	bl	800016c <__adddf3>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	e023      	b.n	800a1fa <scalbn+0x92>
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1b8:	3a36      	subs	r2, #54	; 0x36
 800a1ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a1be:	428e      	cmp	r6, r1
 800a1c0:	dd0e      	ble.n	800a1e0 <scalbn+0x78>
 800a1c2:	a31f      	add	r3, pc, #124	; (adr r3, 800a240 <scalbn+0xd8>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a1cc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a1d0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a1d4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a1d8:	481d      	ldr	r0, [pc, #116]	; (800a250 <scalbn+0xe8>)
 800a1da:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a1de:	e7db      	b.n	800a198 <scalbn+0x30>
 800a1e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1e4:	4432      	add	r2, r6
 800a1e6:	428a      	cmp	r2, r1
 800a1e8:	dceb      	bgt.n	800a1c2 <scalbn+0x5a>
 800a1ea:	2a00      	cmp	r2, #0
 800a1ec:	dd08      	ble.n	800a200 <scalbn+0x98>
 800a1ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1f6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a200:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a204:	da0c      	bge.n	800a220 <scalbn+0xb8>
 800a206:	a30c      	add	r3, pc, #48	; (adr r3, 800a238 <scalbn+0xd0>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a210:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a214:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a218:	480e      	ldr	r0, [pc, #56]	; (800a254 <scalbn+0xec>)
 800a21a:	f041 011f 	orr.w	r1, r1, #31
 800a21e:	e7bb      	b.n	800a198 <scalbn+0x30>
 800a220:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a224:	3236      	adds	r2, #54	; 0x36
 800a226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a22a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	2200      	movs	r2, #0
 800a234:	4b08      	ldr	r3, [pc, #32]	; (800a258 <scalbn+0xf0>)
 800a236:	e7af      	b.n	800a198 <scalbn+0x30>
 800a238:	c2f8f359 	.word	0xc2f8f359
 800a23c:	01a56e1f 	.word	0x01a56e1f
 800a240:	8800759c 	.word	0x8800759c
 800a244:	7e37e43c 	.word	0x7e37e43c
 800a248:	43500000 	.word	0x43500000
 800a24c:	ffff3cb0 	.word	0xffff3cb0
 800a250:	8800759c 	.word	0x8800759c
 800a254:	c2f8f359 	.word	0xc2f8f359
 800a258:	3c900000 	.word	0x3c900000

0800a25c <with_errno>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	4616      	mov	r6, r2
 800a264:	f7ff f966 	bl	8009534 <__errno>
 800a268:	4629      	mov	r1, r5
 800a26a:	6006      	str	r6, [r0, #0]
 800a26c:	4620      	mov	r0, r4
 800a26e:	bd70      	pop	{r4, r5, r6, pc}

0800a270 <xflow>:
 800a270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a272:	4615      	mov	r5, r2
 800a274:	461c      	mov	r4, r3
 800a276:	b180      	cbz	r0, 800a29a <xflow+0x2a>
 800a278:	4610      	mov	r0, r2
 800a27a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a27e:	e9cd 0100 	strd	r0, r1, [sp]
 800a282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a286:	4628      	mov	r0, r5
 800a288:	4621      	mov	r1, r4
 800a28a:	f7f6 f925 	bl	80004d8 <__aeabi_dmul>
 800a28e:	2222      	movs	r2, #34	; 0x22
 800a290:	b003      	add	sp, #12
 800a292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a296:	f7ff bfe1 	b.w	800a25c <with_errno>
 800a29a:	4610      	mov	r0, r2
 800a29c:	4619      	mov	r1, r3
 800a29e:	e7ee      	b.n	800a27e <xflow+0xe>

0800a2a0 <__math_uflow>:
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2a6:	f7ff bfe3 	b.w	800a270 <xflow>

0800a2aa <__math_oflow>:
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a2b0:	f7ff bfde 	b.w	800a270 <xflow>

0800a2b4 <__ieee754_sqrt>:
 800a2b4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800a458 <__ieee754_sqrt+0x1a4>
 800a2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ea3c 0c01 	bics.w	ip, ip, r1
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460d      	mov	r5, r1
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	d10e      	bne.n	800a2ea <__ieee754_sqrt+0x36>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	f7f6 f903 	bl	80004d8 <__aeabi_dmul>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f5 ff47 	bl	800016c <__adddf3>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	dc0d      	bgt.n	800a30a <__ieee754_sqrt+0x56>
 800a2ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a2f2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a2f6:	d0f4      	beq.n	800a2e2 <__ieee754_sqrt+0x2e>
 800a2f8:	b139      	cbz	r1, 800a30a <__ieee754_sqrt+0x56>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	f7f5 ff34 	bl	8000168 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	f7f6 fa12 	bl	800072c <__aeabi_ddiv>
 800a308:	e7e9      	b.n	800a2de <__ieee754_sqrt+0x2a>
 800a30a:	1512      	asrs	r2, r2, #20
 800a30c:	f000 8089 	beq.w	800a422 <__ieee754_sqrt+0x16e>
 800a310:	2500      	movs	r5, #0
 800a312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a316:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31e:	07d2      	lsls	r2, r2, #31
 800a320:	bf5c      	itt	pl
 800a322:	005b      	lslpl	r3, r3, #1
 800a324:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a328:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a32c:	bf58      	it	pl
 800a32e:	0064      	lslpl	r4, r4, #1
 800a330:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a334:	0062      	lsls	r2, r4, #1
 800a336:	2016      	movs	r0, #22
 800a338:	4629      	mov	r1, r5
 800a33a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a33e:	1076      	asrs	r6, r6, #1
 800a340:	190f      	adds	r7, r1, r4
 800a342:	429f      	cmp	r7, r3
 800a344:	bfde      	ittt	le
 800a346:	1bdb      	suble	r3, r3, r7
 800a348:	1939      	addle	r1, r7, r4
 800a34a:	192d      	addle	r5, r5, r4
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	3801      	subs	r0, #1
 800a350:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a354:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a358:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a35c:	d1f0      	bne.n	800a340 <__ieee754_sqrt+0x8c>
 800a35e:	4604      	mov	r4, r0
 800a360:	2720      	movs	r7, #32
 800a362:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a366:	428b      	cmp	r3, r1
 800a368:	eb0c 0e00 	add.w	lr, ip, r0
 800a36c:	dc02      	bgt.n	800a374 <__ieee754_sqrt+0xc0>
 800a36e:	d113      	bne.n	800a398 <__ieee754_sqrt+0xe4>
 800a370:	4596      	cmp	lr, r2
 800a372:	d811      	bhi.n	800a398 <__ieee754_sqrt+0xe4>
 800a374:	f1be 0f00 	cmp.w	lr, #0
 800a378:	eb0e 000c 	add.w	r0, lr, ip
 800a37c:	da56      	bge.n	800a42c <__ieee754_sqrt+0x178>
 800a37e:	2800      	cmp	r0, #0
 800a380:	db54      	blt.n	800a42c <__ieee754_sqrt+0x178>
 800a382:	f101 0801 	add.w	r8, r1, #1
 800a386:	1a5b      	subs	r3, r3, r1
 800a388:	4641      	mov	r1, r8
 800a38a:	4596      	cmp	lr, r2
 800a38c:	bf88      	it	hi
 800a38e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a392:	eba2 020e 	sub.w	r2, r2, lr
 800a396:	4464      	add	r4, ip
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	3f01      	subs	r7, #1
 800a39c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a3a0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a3a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a3a8:	d1dd      	bne.n	800a366 <__ieee754_sqrt+0xb2>
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	d01b      	beq.n	800a3e6 <__ieee754_sqrt+0x132>
 800a3ae:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a45c <__ieee754_sqrt+0x1a8>
 800a3b2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a460 <__ieee754_sqrt+0x1ac>
 800a3b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3be:	f7f5 fed3 	bl	8000168 <__aeabi_dsub>
 800a3c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	f7f6 faff 	bl	80009d0 <__aeabi_dcmple>
 800a3d2:	b140      	cbz	r0, 800a3e6 <__ieee754_sqrt+0x132>
 800a3d4:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3d8:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a3e0:	d126      	bne.n	800a430 <__ieee754_sqrt+0x17c>
 800a3e2:	463c      	mov	r4, r7
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	106b      	asrs	r3, r5, #1
 800a3e8:	0864      	lsrs	r4, r4, #1
 800a3ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a3ee:	07ea      	lsls	r2, r5, #31
 800a3f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a3f4:	bf48      	it	mi
 800a3f6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a400:	e76d      	b.n	800a2de <__ieee754_sqrt+0x2a>
 800a402:	0ae3      	lsrs	r3, r4, #11
 800a404:	3915      	subs	r1, #21
 800a406:	0564      	lsls	r4, r4, #21
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0fa      	beq.n	800a402 <__ieee754_sqrt+0x14e>
 800a40c:	02d8      	lsls	r0, r3, #11
 800a40e:	d50a      	bpl.n	800a426 <__ieee754_sqrt+0x172>
 800a410:	f1c2 0020 	rsb	r0, r2, #32
 800a414:	fa24 f000 	lsr.w	r0, r4, r0
 800a418:	1e55      	subs	r5, r2, #1
 800a41a:	4094      	lsls	r4, r2
 800a41c:	4303      	orrs	r3, r0
 800a41e:	1b4a      	subs	r2, r1, r5
 800a420:	e776      	b.n	800a310 <__ieee754_sqrt+0x5c>
 800a422:	4611      	mov	r1, r2
 800a424:	e7f0      	b.n	800a408 <__ieee754_sqrt+0x154>
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	3201      	adds	r2, #1
 800a42a:	e7ef      	b.n	800a40c <__ieee754_sqrt+0x158>
 800a42c:	4688      	mov	r8, r1
 800a42e:	e7aa      	b.n	800a386 <__ieee754_sqrt+0xd2>
 800a430:	f7f5 fe9c 	bl	800016c <__adddf3>
 800a434:	e9da 8900 	ldrd	r8, r9, [sl]
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f6 fabc 	bl	80009bc <__aeabi_dcmplt>
 800a444:	b120      	cbz	r0, 800a450 <__ieee754_sqrt+0x19c>
 800a446:	1ca1      	adds	r1, r4, #2
 800a448:	bf08      	it	eq
 800a44a:	3501      	addeq	r5, #1
 800a44c:	3402      	adds	r4, #2
 800a44e:	e7ca      	b.n	800a3e6 <__ieee754_sqrt+0x132>
 800a450:	3401      	adds	r4, #1
 800a452:	f024 0401 	bic.w	r4, r4, #1
 800a456:	e7c6      	b.n	800a3e6 <__ieee754_sqrt+0x132>
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	20000068 	.word	0x20000068
 800a460:	20000070 	.word	0x20000070

0800a464 <_init>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr

0800a470 <_fini>:
 800a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a472:	bf00      	nop
 800a474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a476:	bc08      	pop	{r3}
 800a478:	469e      	mov	lr, r3
 800a47a:	4770      	bx	lr
