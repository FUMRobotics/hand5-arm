
hand5linky_newBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ccc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009f98  08009f98  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f98  08009f98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f9c  08009f9c  00019f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009fa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000410c  20000078  0800a018  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004184  0800a018  00024184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001adab  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000485b  00000000  00000000  0003ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c0  00000000  00000000  00040e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018946  00000000  00000000  00042000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b924  00000000  00000000  0005a946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084450  00000000  00000000  0007626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006704  00000000  00000000  000fa6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00100dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dc4 	.word	0x08009dc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08009dc4 	.word	0x08009dc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d801      	bhi.n	8000a92 <jsmn_alloc_token+0x1a>
    return NULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e014      	b.n	8000abc <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	1c59      	adds	r1, r3, #1
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	6051      	str	r1, [r2, #4]
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000aba:	697b      	ldr	r3, [r7, #20]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7afa      	ldrb	r2, [r7, #11]
 8000ada:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000b0c:	e03f      	b.n	8000b8e <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b7d      	cmp	r3, #125	; 0x7d
 8000b1a:	d045      	beq.n	8000ba8 <jsmn_parse_primitive+0xb0>
 8000b1c:	2b7d      	cmp	r3, #125	; 0x7d
 8000b1e:	dc1c      	bgt.n	8000b5a <jsmn_parse_primitive+0x62>
 8000b20:	2b5d      	cmp	r3, #93	; 0x5d
 8000b22:	d041      	beq.n	8000ba8 <jsmn_parse_primitive+0xb0>
 8000b24:	2b5d      	cmp	r3, #93	; 0x5d
 8000b26:	dc18      	bgt.n	8000b5a <jsmn_parse_primitive+0x62>
 8000b28:	2b3a      	cmp	r3, #58	; 0x3a
 8000b2a:	dc16      	bgt.n	8000b5a <jsmn_parse_primitive+0x62>
 8000b2c:	2b20      	cmp	r3, #32
 8000b2e:	da04      	bge.n	8000b3a <jsmn_parse_primitive+0x42>
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	dc10      	bgt.n	8000b56 <jsmn_parse_primitive+0x5e>
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	da37      	bge.n	8000ba8 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000b38:	e00f      	b.n	8000b5a <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8000b3a:	3b20      	subs	r3, #32
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <jsmn_parse_primitive+0x10c>)
 8000b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d129      	bne.n	8000ba8 <jsmn_parse_primitive+0xb0>
      break;
 8000b54:	e001      	b.n	8000b5a <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8000b56:	2b0d      	cmp	r3, #13
 8000b58:	d026      	beq.n	8000ba8 <jsmn_parse_primitive+0xb0>
      break;
 8000b5a:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b1f      	cmp	r3, #31
 8000b68:	d906      	bls.n	8000b78 <jsmn_parse_primitive+0x80>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b7e      	cmp	r3, #126	; 0x7e
 8000b76:	d905      	bls.n	8000b84 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000b7e:	f06f 0301 	mvn.w	r3, #1
 8000b82:	e03a      	b.n	8000bfa <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d909      	bls.n	8000bac <jsmn_parse_primitive+0xb4>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1b3      	bne.n	8000b0e <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8000ba6:	e001      	b.n	8000bac <jsmn_parse_primitive+0xb4>
      goto found;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <jsmn_parse_primitive+0xb6>
found:
 8000bac:	bf00      	nop
  if (tokens == NULL) {
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d106      	bne.n	8000bc2 <jsmn_parse_primitive+0xca>
    parser->pos--;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]
    return 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e01b      	b.n	8000bfa <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000bc2:	6a3a      	ldr	r2, [r7, #32]
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff ff56 	bl	8000a78 <jsmn_alloc_token>
 8000bcc:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e00c      	b.n	8000bfa <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	2108      	movs	r1, #8
 8000be8:	6938      	ldr	r0, [r7, #16]
 8000bea:	f7ff ff6c 	bl	8000ac6 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	04001001 	.word	0x04001001

08000c08 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000c26:	e0ba      	b.n	8000d9e <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b22      	cmp	r3, #34	; 0x22
 8000c38:	d11d      	bne.n	8000c76 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <jsmn_parse_string+0x3c>
        return 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e0be      	b.n	8000dc2 <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff ff15 	bl	8000a78 <jsmn_alloc_token>
 8000c4e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	e0af      	b.n	8000dc2 <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	6938      	ldr	r0, [r7, #16]
 8000c6e:	f7ff ff2a 	bl	8000ac6 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e0a5      	b.n	8000dc2 <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	2b5c      	cmp	r3, #92	; 0x5c
 8000c7a:	f040 808b 	bne.w	8000d94 <jsmn_parse_string+0x18c>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f240 8084 	bls.w	8000d94 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b75      	cmp	r3, #117	; 0x75
 8000ca2:	dc70      	bgt.n	8000d86 <jsmn_parse_string+0x17e>
 8000ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8000ca6:	da04      	bge.n	8000cb2 <jsmn_parse_string+0xaa>
 8000ca8:	2b22      	cmp	r3, #34	; 0x22
 8000caa:	d072      	beq.n	8000d92 <jsmn_parse_string+0x18a>
 8000cac:	2b2f      	cmp	r3, #47	; 0x2f
 8000cae:	d070      	beq.n	8000d92 <jsmn_parse_string+0x18a>
 8000cb0:	e069      	b.n	8000d86 <jsmn_parse_string+0x17e>
 8000cb2:	3b5c      	subs	r3, #92	; 0x5c
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <jsmn_parse_string+0x1c4>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d163      	bne.n	8000d92 <jsmn_parse_string+0x18a>
 8000cca:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d054      	beq.n	8000d86 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e037      	b.n	8000d5c <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b2f      	cmp	r3, #47	; 0x2f
 8000cf8:	d906      	bls.n	8000d08 <jsmn_parse_string+0x100>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b39      	cmp	r3, #57	; 0x39
 8000d06:	d921      	bls.n	8000d4c <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000d12:	2b40      	cmp	r3, #64	; 0x40
 8000d14:	d906      	bls.n	8000d24 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b46      	cmp	r3, #70	; 0x46
 8000d22:	d913      	bls.n	8000d4c <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000d2e:	2b60      	cmp	r3, #96	; 0x60
 8000d30:	d906      	bls.n	8000d40 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b66      	cmp	r3, #102	; 0x66
 8000d3e:	d905      	bls.n	8000d4c <jsmn_parse_string+0x144>
            parser->pos = start;
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000d46:	f06f 0301 	mvn.w	r3, #1
 8000d4a:	e03a      	b.n	8000dc2 <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	601a      	str	r2, [r3, #0]
             i++) {
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	dc0b      	bgt.n	8000d7a <jsmn_parse_string+0x172>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d906      	bls.n	8000d7a <jsmn_parse_string+0x172>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1b8      	bne.n	8000cec <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1e5a      	subs	r2, r3, #1
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	601a      	str	r2, [r3, #0]
        break;
 8000d84:	e006      	b.n	8000d94 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8000d8c:	f06f 0301 	mvn.w	r3, #1
 8000d90:	e017      	b.n	8000dc2 <jsmn_parse_string+0x1ba>
        break;
 8000d92:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d907      	bls.n	8000db8 <jsmn_parse_string+0x1b0>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f47f af38 	bne.w	8000c28 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8000dbe:	f06f 0302 	mvn.w	r3, #2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	01440441 	.word	0x01440441

08000dd0 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000de4:	e176      	b.n	80010d4 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8000df2:	7ffb      	ldrb	r3, [r7, #31]
 8000df4:	2b7d      	cmp	r3, #125	; 0x7d
 8000df6:	d06c      	beq.n	8000ed2 <jsmn_parse+0x102>
 8000df8:	2b7d      	cmp	r3, #125	; 0x7d
 8000dfa:	f300 8136 	bgt.w	800106a <jsmn_parse+0x29a>
 8000dfe:	2b7b      	cmp	r3, #123	; 0x7b
 8000e00:	d030      	beq.n	8000e64 <jsmn_parse+0x94>
 8000e02:	2b7b      	cmp	r3, #123	; 0x7b
 8000e04:	f300 8131 	bgt.w	800106a <jsmn_parse+0x29a>
 8000e08:	2b5d      	cmp	r3, #93	; 0x5d
 8000e0a:	d062      	beq.n	8000ed2 <jsmn_parse+0x102>
 8000e0c:	2b5d      	cmp	r3, #93	; 0x5d
 8000e0e:	f300 812c 	bgt.w	800106a <jsmn_parse+0x29a>
 8000e12:	2b5b      	cmp	r3, #91	; 0x5b
 8000e14:	d026      	beq.n	8000e64 <jsmn_parse+0x94>
 8000e16:	2b5b      	cmp	r3, #91	; 0x5b
 8000e18:	f300 8127 	bgt.w	800106a <jsmn_parse+0x29a>
 8000e1c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e1e:	f000 80d6 	beq.w	8000fce <jsmn_parse+0x1fe>
 8000e22:	2b3a      	cmp	r3, #58	; 0x3a
 8000e24:	f300 8121 	bgt.w	800106a <jsmn_parse+0x29a>
 8000e28:	2b2c      	cmp	r3, #44	; 0x2c
 8000e2a:	f000 80d7 	beq.w	8000fdc <jsmn_parse+0x20c>
 8000e2e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e30:	f300 811b 	bgt.w	800106a <jsmn_parse+0x29a>
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	dc11      	bgt.n	8000e5c <jsmn_parse+0x8c>
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	f2c0 8116 	blt.w	800106a <jsmn_parse+0x29a>
 8000e3e:	3b09      	subs	r3, #9
 8000e40:	4a91      	ldr	r2, [pc, #580]	; (8001088 <jsmn_parse+0x2b8>)
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f040 812d 	bne.w	80010b4 <jsmn_parse+0x2e4>
 8000e5a:	e106      	b.n	800106a <jsmn_parse+0x29a>
 8000e5c:	2b22      	cmp	r3, #34	; 0x22
 8000e5e:	f000 8092 	beq.w	8000f86 <jsmn_parse+0x1b6>
 8000e62:	e102      	b.n	800106a <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	3301      	adds	r3, #1
 8000e68:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 8123 	beq.w	80010b8 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff fdfe 	bl	8000a78 <jsmn_alloc_token>
 8000e7c:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	e153      	b.n	8001132 <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e92:	d00a      	beq.n	8000eaa <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8000eaa:	7ffb      	ldrb	r3, [r7, #31]
 8000eac:	2b7b      	cmp	r3, #123	; 0x7b
 8000eae:	d101      	bne.n	8000eb4 <jsmn_parse+0xe4>
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	e000      	b.n	8000eb6 <jsmn_parse+0xe6>
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	609a      	str	r2, [r3, #8]
      break;
 8000ed0:	e0fb      	b.n	80010ca <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80f1 	beq.w	80010bc <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	2b7d      	cmp	r3, #125	; 0x7d
 8000ede:	d101      	bne.n	8000ee4 <jsmn_parse+0x114>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <jsmn_parse+0x116>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef0:	e024      	b.n	8000f3c <jsmn_parse+0x16c>
        token = &tokens[i];
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d017      	beq.n	8000f36 <jsmn_parse+0x166>
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0e:	d112      	bne.n	8000f36 <jsmn_parse+0x166>
          if (token->type != type) {
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	7fba      	ldrb	r2, [r7, #30]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d002      	beq.n	8000f20 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 8000f1a:	f06f 0301 	mvn.w	r3, #1
 8000f1e:	e108      	b.n	8001132 <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295
 8000f26:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	461a      	mov	r2, r3
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	609a      	str	r2, [r3, #8]
          break;
 8000f34:	e005      	b.n	8000f42 <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dad7      	bge.n	8000ef2 <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d119      	bne.n	8000f7e <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 8000f4a:	f06f 0301 	mvn.w	r3, #1
 8000f4e:	e0f0      	b.n	8001132 <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f62:	d009      	beq.n	8000f78 <jsmn_parse+0x1a8>
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d104      	bne.n	8000f78 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	609a      	str	r2, [r3, #8]
          break;
 8000f74:	bf00      	nop
        }
      }
#endif
      break;
 8000f76:	e0a8      	b.n	80010ca <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dae5      	bge.n	8000f50 <jsmn_parse+0x180>
      break;
 8000f84:	e0a1      	b.n	80010ca <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff fe39 	bl	8000c08 <jsmn_parse_string>
 8000f96:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da01      	bge.n	8000fa2 <jsmn_parse+0x1d2>
        return r;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	e0c7      	b.n	8001132 <jsmn_parse+0x362>
      }
      count++;
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	f000 8086 	beq.w	80010c0 <jsmn_parse+0x2f0>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8082 	beq.w	80010c0 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	3201      	adds	r2, #1
 8000fca:	60da      	str	r2, [r3, #12]
      }
      break;
 8000fcc:	e078      	b.n	80010c0 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	609a      	str	r2, [r3, #8]
      break;
 8000fda:	e076      	b.n	80010ca <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d070      	beq.n	80010c4 <jsmn_parse+0x2f4>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fea:	d06b      	beq.n	80010c4 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d063      	beq.n	80010c4 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001008:	2b01      	cmp	r3, #1
 800100a:	d05b      	beq.n	80010c4 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	3b01      	subs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	e025      	b.n	8001062 <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d006      	beq.n	8001032 <jsmn_parse+0x262>
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d114      	bne.n	800105c <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d00c      	beq.n	800105c <jsmn_parse+0x28c>
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d104      	bne.n	800105c <jsmn_parse+0x28c>
              parser->toksuper = i;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001056:	609a      	str	r2, [r3, #8]
              break;
 8001058:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 800105a:	e033      	b.n	80010c4 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3b01      	subs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	dad6      	bge.n	8001016 <jsmn_parse+0x246>
      break;
 8001068:	e02c      	b.n	80010c4 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 800106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff fd3f 	bl	8000af8 <jsmn_parse_primitive>
 800107a:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da04      	bge.n	800108c <jsmn_parse+0x2bc>
        return r;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	e055      	b.n	8001132 <jsmn_parse+0x362>
 8001086:	bf00      	nop
 8001088:	00800013 	.word	0x00800013
      }
      count++;
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	3301      	adds	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109a:	d015      	beq.n	80010c8 <jsmn_parse+0x2f8>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	3201      	adds	r2, #1
 80010b0:	60da      	str	r2, [r3, #12]
      }
      break;
 80010b2:	e009      	b.n	80010c8 <jsmn_parse+0x2f8>
      break;
 80010b4:	bf00      	nop
 80010b6:	e008      	b.n	80010ca <jsmn_parse+0x2fa>
        break;
 80010b8:	bf00      	nop
 80010ba:	e006      	b.n	80010ca <jsmn_parse+0x2fa>
        break;
 80010bc:	bf00      	nop
 80010be:	e004      	b.n	80010ca <jsmn_parse+0x2fa>
      break;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <jsmn_parse+0x2fa>
      break;
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <jsmn_parse+0x2fa>
      break;
 80010c8:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d907      	bls.n	80010ee <jsmn_parse+0x31e>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae7c 	bne.w	8000de6 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01d      	beq.n	8001130 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
 80010fc:	e015      	b.n	800112a <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d00a      	beq.n	8001124 <jsmn_parse+0x354>
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d102      	bne.n	8001124 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 800111e:	f06f 0302 	mvn.w	r3, #2
 8001122:	e006      	b.n	8001132 <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3b01      	subs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	2b00      	cmp	r3, #0
 800112e:	dae6      	bge.n	80010fe <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8001130:	6a3b      	ldr	r3, [r7, #32]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop

0800113c <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 32ff 	mov.w	r2, #4294967295
 8001156:	609a      	str	r2, [r3, #8]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <jsoneq>:

/*
 * Function1--------------------------
 */
static int jsoneq(const char *json, jsmntok_t *tok, const char *s)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d11e      	bne.n	80011b4 <jsoneq+0x52>
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7fe ffea 	bl	8000150 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4299      	cmp	r1, r3
 800118c:	d112      	bne.n	80011b4 <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1898      	adds	r0, r3, r2
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f007 fdf9 	bl	8008d9c <strncmp>
 80011aa:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <jsoneq+0x52>
	{
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e001      	b.n	80011b8 <jsoneq+0x56>
	}
	return -1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <ProcessUartData>:
/*
 * Function2--------------------------
 */
_Bool ProcessUartData(void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	f6ad 0d88 	subw	sp, sp, #2184	; 0x888
 80011c6:	af02      	add	r7, sp, #8
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[128]; /* We expect no more than 128 tokens */

	jsmn_init(&p);
 80011c8:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffb5 	bl	800113c <jsmn_init>
	r = jsmn_parse(&p, uartRecieveBuffer, strlen(uartRecieveBuffer), t,
 80011d2:	48d7      	ldr	r0, [pc, #860]	; (8001530 <ProcessUartData+0x370>)
 80011d4:	f7fe ffbc 	bl	8000150 <strlen>
 80011d8:	4602      	mov	r2, r0
 80011da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011de:	f607 0064 	addw	r0, r7, #2148	; 0x864
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	9100      	str	r1, [sp, #0]
 80011e6:	49d2      	ldr	r1, [pc, #840]	; (8001530 <ProcessUartData+0x370>)
 80011e8:	f7ff fdf2 	bl	8000dd0 <jsmn_parse>
 80011ec:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
			sizeof(t) / sizeof(t[0]));
	if (r < 0)
 80011f0:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da01      	bge.n	80011fc <ProcessUartData+0x3c>
	{
		//Failed to parse JSON
		return 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e365      	b.n	80018c8 <ProcessUartData+0x708>
	}

	/* Assume the top-level element is an object */
	if (r < 1 || t[0].type != JSMN_OBJECT)
 80011fc:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd06      	ble.n	8001212 <ProcessUartData+0x52>
 8001204:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001208:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <ProcessUartData+0x56>
	{
		//Object expected
		return 1;
 8001212:	2301      	movs	r3, #1
 8001214:	e358      	b.n	80018c8 <ProcessUartData+0x708>
	}

	/* Loop over all keys of the root object */
	for (i = 1; i < r; i++)
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 800121c:	e330      	b.n	8001880 <ProcessUartData+0x6c0>
	{

		if (jsoneq(uartRecieveBuffer, &t[i], "Thumb") == 0)
 800121e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001222:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	4ac2      	ldr	r2, [pc, #776]	; (8001534 <ProcessUartData+0x374>)
 800122c:	4619      	mov	r1, r3
 800122e:	48c0      	ldr	r0, [pc, #768]	; (8001530 <ProcessUartData+0x370>)
 8001230:	f7ff ff97 	bl	8001162 <jsoneq>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <ProcessUartData+0x8c>
		{
			HandFinger = Thumb;
 800123a:	2300      	movs	r3, #0
 800123c:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 8001240:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 800124a:	e314      	b.n	8001876 <ProcessUartData+0x6b6>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Middele") == 0)
 800124c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001250:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	4ab7      	ldr	r2, [pc, #732]	; (8001538 <ProcessUartData+0x378>)
 800125a:	4619      	mov	r1, r3
 800125c:	48b4      	ldr	r0, [pc, #720]	; (8001530 <ProcessUartData+0x370>)
 800125e:	f7ff ff80 	bl	8001162 <jsoneq>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <ProcessUartData+0xba>
		{
			HandFinger = Middle;
 8001268:	2302      	movs	r3, #2
 800126a:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 800126e:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001272:	3301      	adds	r3, #1
 8001274:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001278:	e2fd      	b.n	8001876 <ProcessUartData+0x6b6>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Index") == 0)
 800127a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800127e:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	4aad      	ldr	r2, [pc, #692]	; (800153c <ProcessUartData+0x37c>)
 8001288:	4619      	mov	r1, r3
 800128a:	48a9      	ldr	r0, [pc, #676]	; (8001530 <ProcessUartData+0x370>)
 800128c:	f7ff ff69 	bl	8001162 <jsoneq>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <ProcessUartData+0xe8>
		{
			HandFinger = Index;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 800129c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80012a0:	3301      	adds	r3, #1
 80012a2:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 80012a6:	e2e6      	b.n	8001876 <ProcessUartData+0x6b6>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Ring") == 0)
 80012a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012ac:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	4aa2      	ldr	r2, [pc, #648]	; (8001540 <ProcessUartData+0x380>)
 80012b6:	4619      	mov	r1, r3
 80012b8:	489d      	ldr	r0, [pc, #628]	; (8001530 <ProcessUartData+0x370>)
 80012ba:	f7ff ff52 	bl	8001162 <jsoneq>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <ProcessUartData+0x116>
		{
			HandFinger = Ring;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 80012ca:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 80012d4:	e2cf      	b.n	8001876 <ProcessUartData+0x6b6>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Pinky") == 0)
 80012d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012da:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	4a98      	ldr	r2, [pc, #608]	; (8001544 <ProcessUartData+0x384>)
 80012e4:	4619      	mov	r1, r3
 80012e6:	4892      	ldr	r0, [pc, #584]	; (8001530 <ProcessUartData+0x370>)
 80012e8:	f7ff ff3b 	bl	8001162 <jsoneq>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d108      	bne.n	8001304 <ProcessUartData+0x144>
		{
			HandFinger = Pinky;
 80012f2:	2304      	movs	r3, #4
 80012f4:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
			i++;
 80012f8:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80012fc:	3301      	adds	r3, #1
 80012fe:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001302:	e2b8      	b.n	8001876 <ProcessUartData+0x6b6>
		}
		else if (jsoneq(uartRecieveBuffer, &t[i], "Value") == 0)
 8001304:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001308:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	4a8d      	ldr	r2, [pc, #564]	; (8001548 <ProcessUartData+0x388>)
 8001312:	4619      	mov	r1, r3
 8001314:	4886      	ldr	r0, [pc, #536]	; (8001530 <ProcessUartData+0x370>)
 8001316:	f7ff ff24 	bl	8001162 <jsoneq>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 82aa 	bne.w	8001876 <ProcessUartData+0x6b6>
		{
			char FingerValue[100] = {0,};
 8001322:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001326:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	3304      	adds	r3, #4
 8001330:	2260      	movs	r2, #96	; 0x60
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f007 fd29 	bl	8008d8c <memset>
			strncpy(FingerValue, uartRecieveBuffer + t[i + 1].start, t[i + 1].end - t[i + 1].start);
 800133a:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800133e:	3301      	adds	r3, #1
 8001340:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001344:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b77      	ldr	r3, [pc, #476]	; (8001530 <ProcessUartData+0x370>)
 8001354:	18d0      	adds	r0, r2, r3
 8001356:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800135a:	3301      	adds	r3, #1
 800135c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001360:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	3308      	adds	r3, #8
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001370:	3301      	adds	r3, #1
 8001372:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001376:	f6a1 011c 	subw	r1, r1, #2076	; 0x81c
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	440b      	add	r3, r1
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	461a      	mov	r2, r3
 8001386:	463b      	mov	r3, r7
 8001388:	4601      	mov	r1, r0
 800138a:	4618      	mov	r0, r3
 800138c:	f007 fd18 	bl	8008dc0 <strncpy>
			i++;
 8001390:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001394:	3301      	adds	r3, #1
 8001396:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
			HandStruct[HandFinger]=0;
 800139a:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 800139e:	4a6b      	ldr	r2, [pc, #428]	; (800154c <ProcessUartData+0x38c>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	54d1      	strb	r1, [r2, r3]
			for (int counter = 0; counter < strlen(FingerValue); counter++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 80013aa:	e25a      	b.n	8001862 <ProcessUartData+0x6a2>
			{
				switch (FingerValue[counter]) {
 80013ac:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013b0:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 80013b4:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3b30      	subs	r3, #48	; 0x30
 80013be:	2b09      	cmp	r3, #9
 80013c0:	f200 8249 	bhi.w	8001856 <ProcessUartData+0x696>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <ProcessUartData+0x20c>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080013f5 	.word	0x080013f5
 80013d0:	08001465 	.word	0x08001465
 80013d4:	080014c5 	.word	0x080014c5
 80013d8:	08001555 	.word	0x08001555
 80013dc:	080015c3 	.word	0x080015c3
 80013e0:	08001631 	.word	0x08001631
 80013e4:	0800169f 	.word	0x0800169f
 80013e8:	0800170d 	.word	0x0800170d
 80013ec:	0800177b 	.word	0x0800177b
 80013f0:	080017e9 	.word	0x080017e9
				case '0':
					HandStruct[HandFinger] += 0 * pow(10,(strlen(FingerValue) - (counter+1)));
 80013f4:	463b      	mov	r3, r7
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe feaa 	bl	8000150 <strlen>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ffec 	bl	80003e4 <__aeabi_ui2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	494e      	ldr	r1, [pc, #312]	; (8001550 <ProcessUartData+0x390>)
 8001416:	f007 fdcb 	bl	8008fb0 <pow>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f7ff f859 	bl	80004d8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001432:	4a46      	ldr	r2, [pc, #280]	; (800154c <ProcessUartData+0x38c>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe ffe3 	bl	8000404 <__aeabi_i2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe fe91 	bl	800016c <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff faef 	bl	8000a38 <__aeabi_d2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <ProcessUartData+0x38c>)
 8001460:	551a      	strb	r2, [r3, r4]

					break;
 8001462:	e1f9      	b.n	8001858 <ProcessUartData+0x698>
				case '1':
					HandStruct[HandFinger] += 1 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001464:	463b      	mov	r3, r7
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe fe72 	bl	8000150 <strlen>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffb4 	bl	80003e4 <__aeabi_ui2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	4932      	ldr	r1, [pc, #200]	; (8001550 <ProcessUartData+0x390>)
 8001486:	f007 fd93 	bl	8008fb0 <pow>
 800148a:	4604      	mov	r4, r0
 800148c:	460d      	mov	r5, r1
 800148e:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <ProcessUartData+0x38c>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffb3 	bl	8000404 <__aeabi_i2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7fe fe61 	bl	800016c <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fabf 	bl	8000a38 <__aeabi_d2uiz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <ProcessUartData+0x38c>)
 80014c0:	551a      	strb	r2, [r3, r4]

					break;
 80014c2:	e1c9      	b.n	8001858 <ProcessUartData+0x698>
				case '2':
					HandStruct[HandFinger] += 2 * pow(10,(strlen(FingerValue) - (counter+1)));
 80014c4:	463b      	mov	r3, r7
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff84 	bl	80003e4 <__aeabi_ui2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	f04f 0000 	mov.w	r0, #0
 80014e4:	491a      	ldr	r1, [pc, #104]	; (8001550 <ProcessUartData+0x390>)
 80014e6:	f007 fd63 	bl	8008fb0 <pow>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	f7fe fe3d 	bl	800016c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	461d      	mov	r5, r3
 80014fa:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <ProcessUartData+0x38c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ff7d 	bl	8000404 <__aeabi_i2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fe2b 	bl	800016c <__adddf3>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fa89 	bl	8000a38 <__aeabi_d2uiz>
 8001526:	4603      	mov	r3, r0
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <ProcessUartData+0x38c>)
 800152c:	551a      	strb	r2, [r3, r4]

					break;
 800152e:	e193      	b.n	8001858 <ProcessUartData+0x698>
 8001530:	20000098 	.word	0x20000098
 8001534:	08009de0 	.word	0x08009de0
 8001538:	08009de8 	.word	0x08009de8
 800153c:	08009df0 	.word	0x08009df0
 8001540:	08009df8 	.word	0x08009df8
 8001544:	08009e00 	.word	0x08009e00
 8001548:	08009e08 	.word	0x08009e08
 800154c:	20000000 	.word	0x20000000
 8001550:	40240000 	.word	0x40240000
				case '3':
					HandStruct[HandFinger] += 3 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001554:	463b      	mov	r3, r7
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fdfa 	bl	8000150 <strlen>
 800155c:	4602      	mov	r2, r0
 800155e:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff3c 	bl	80003e4 <__aeabi_ui2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	f04f 0000 	mov.w	r0, #0
 8001574:	49d7      	ldr	r1, [pc, #860]	; (80018d4 <ProcessUartData+0x714>)
 8001576:	f007 fd1b 	bl	8008fb0 <pow>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4bd6      	ldr	r3, [pc, #856]	; (80018d8 <ProcessUartData+0x718>)
 8001580:	f7fe ffaa 	bl	80004d8 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001590:	4ad2      	ldr	r2, [pc, #840]	; (80018dc <ProcessUartData+0x71c>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff34 	bl	8000404 <__aeabi_i2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fde2 	bl	800016c <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa40 	bl	8000a38 <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4bc7      	ldr	r3, [pc, #796]	; (80018dc <ProcessUartData+0x71c>)
 80015be:	551a      	strb	r2, [r3, r4]

					break;
 80015c0:	e14a      	b.n	8001858 <ProcessUartData+0x698>
				case '4':
					HandStruct[HandFinger]+= 4 * pow(10,(strlen(FingerValue) - (counter+1)));
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fdc3 	bl	8000150 <strlen>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff05 	bl	80003e4 <__aeabi_ui2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	49bc      	ldr	r1, [pc, #752]	; (80018d4 <ProcessUartData+0x714>)
 80015e4:	f007 fce4 	bl	8008fb0 <pow>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4bbc      	ldr	r3, [pc, #752]	; (80018e0 <ProcessUartData+0x720>)
 80015ee:	f7fe ff73 	bl	80004d8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4614      	mov	r4, r2
 80015f8:	461d      	mov	r5, r3
 80015fa:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80015fe:	4ab7      	ldr	r2, [pc, #732]	; (80018dc <ProcessUartData+0x71c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fefd 	bl	8000404 <__aeabi_i2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7fe fdab 	bl	800016c <__adddf3>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa09 	bl	8000a38 <__aeabi_d2uiz>
 8001626:	4603      	mov	r3, r0
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4bac      	ldr	r3, [pc, #688]	; (80018dc <ProcessUartData+0x71c>)
 800162c:	551a      	strb	r2, [r3, r4]

					break;
 800162e:	e113      	b.n	8001858 <ProcessUartData+0x698>
				case '5':
					HandStruct[HandFinger]+= 5 * pow(10,(strlen(FingerValue) - (counter+1)));
 8001630:	463b      	mov	r3, r7
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fd8c 	bl	8000150 <strlen>
 8001638:	4602      	mov	r2, r0
 800163a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fece 	bl	80003e4 <__aeabi_ui2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	49a0      	ldr	r1, [pc, #640]	; (80018d4 <ProcessUartData+0x714>)
 8001652:	f007 fcad 	bl	8008fb0 <pow>
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4ba2      	ldr	r3, [pc, #648]	; (80018e4 <ProcessUartData+0x724>)
 800165c:	f7fe ff3c 	bl	80004d8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 800166c:	4a9b      	ldr	r2, [pc, #620]	; (80018dc <ProcessUartData+0x71c>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fec6 	bl	8000404 <__aeabi_i2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fd74 	bl	800016c <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff f9d2 	bl	8000a38 <__aeabi_d2uiz>
 8001694:	4603      	mov	r3, r0
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b90      	ldr	r3, [pc, #576]	; (80018dc <ProcessUartData+0x71c>)
 800169a:	551a      	strb	r2, [r3, r4]

					break;
 800169c:	e0dc      	b.n	8001858 <ProcessUartData+0x698>
				case '6':
					HandStruct[HandFinger]+= 6 * pow(10,(strlen(FingerValue) - (counter+1)));
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fd55 	bl	8000150 <strlen>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fe97 	bl	80003e4 <__aeabi_ui2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	4985      	ldr	r1, [pc, #532]	; (80018d4 <ProcessUartData+0x714>)
 80016c0:	f007 fc76 	bl	8008fb0 <pow>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b87      	ldr	r3, [pc, #540]	; (80018e8 <ProcessUartData+0x728>)
 80016ca:	f7fe ff05 	bl	80004d8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80016da:	4a80      	ldr	r2, [pc, #512]	; (80018dc <ProcessUartData+0x71c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fe8f 	bl	8000404 <__aeabi_i2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fd3d 	bl	800016c <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff f99b 	bl	8000a38 <__aeabi_d2uiz>
 8001702:	4603      	mov	r3, r0
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <ProcessUartData+0x71c>)
 8001708:	551a      	strb	r2, [r3, r4]

					break;
 800170a:	e0a5      	b.n	8001858 <ProcessUartData+0x698>
				case '7':
					HandStruct[HandFinger]+= 7 * pow(10,(strlen(FingerValue) - (counter+1)));
 800170c:	463b      	mov	r3, r7
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd1e 	bl	8000150 <strlen>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe60 	bl	80003e4 <__aeabi_ui2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	4969      	ldr	r1, [pc, #420]	; (80018d4 <ProcessUartData+0x714>)
 800172e:	f007 fc3f 	bl	8008fb0 <pow>
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <ProcessUartData+0x72c>)
 8001738:	f7fe fece 	bl	80004d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	461d      	mov	r5, r3
 8001744:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001748:	4a64      	ldr	r2, [pc, #400]	; (80018dc <ProcessUartData+0x71c>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe58 	bl	8000404 <__aeabi_i2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd06 	bl	800016c <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f964 	bl	8000a38 <__aeabi_d2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <ProcessUartData+0x71c>)
 8001776:	551a      	strb	r2, [r3, r4]

					break;
 8001778:	e06e      	b.n	8001858 <ProcessUartData+0x698>
				case '8':
					HandStruct[HandFinger]+= 8 * pow(10,(strlen(FingerValue) - (counter+1)));
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fce7 	bl	8000150 <strlen>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe29 	bl	80003e4 <__aeabi_ui2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	f04f 0000 	mov.w	r0, #0
 800179a:	494e      	ldr	r1, [pc, #312]	; (80018d4 <ProcessUartData+0x714>)
 800179c:	f007 fc08 	bl	8008fb0 <pow>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <ProcessUartData+0x730>)
 80017a6:	f7fe fe97 	bl	80004d8 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4614      	mov	r4, r2
 80017b0:	461d      	mov	r5, r3
 80017b2:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <ProcessUartData+0x71c>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe21 	bl	8000404 <__aeabi_i2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fccf 	bl	800016c <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f92d 	bl	8000a38 <__aeabi_d2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <ProcessUartData+0x71c>)
 80017e4:	551a      	strb	r2, [r3, r4]

					break;
 80017e6:	e037      	b.n	8001858 <ProcessUartData+0x698>
				case '9':
					HandStruct[HandFinger]+= 9 * pow(10,(strlen(FingerValue) - (counter+1)));
 80017e8:	463b      	mov	r3, r7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fcb0 	bl	8000150 <strlen>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fdf2 	bl	80003e4 <__aeabi_ui2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	4932      	ldr	r1, [pc, #200]	; (80018d4 <ProcessUartData+0x714>)
 800180a:	f007 fbd1 	bl	8008fb0 <pow>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <ProcessUartData+0x734>)
 8001814:	f7fe fe60 	bl	80004d8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4614      	mov	r4, r2
 800181e:	461d      	mov	r5, r3
 8001820:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001824:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <ProcessUartData+0x71c>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fdea 	bl	8000404 <__aeabi_i2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fc98 	bl	800016c <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	f897 487f 	ldrb.w	r4, [r7, #2175]	; 0x87f
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f8f6 	bl	8000a38 <__aeabi_d2uiz>
 800184c:	4603      	mov	r3, r0
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <ProcessUartData+0x71c>)
 8001852:	551a      	strb	r2, [r3, r4]

					break;
 8001854:	e000      	b.n	8001858 <ProcessUartData+0x698>
				default:
					break;
 8001856:	bf00      	nop
			for (int counter = 0; counter < strlen(FingerValue); counter++)
 8001858:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800185c:	3301      	adds	r3, #1
 800185e:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001862:	463b      	mov	r3, r7
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fc73 	bl	8000150 <strlen>
 800186a:	4602      	mov	r2, r0
 800186c:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001870:	429a      	cmp	r2, r3
 8001872:	f63f ad9b 	bhi.w	80013ac <ProcessUartData+0x1ec>
	for (i = 1; i < r; i++)
 8001876:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800187a:	3301      	adds	r3, #1
 800187c:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 8001880:	f8d7 2878 	ldr.w	r2, [r7, #2168]	; 0x878
 8001884:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001888:	429a      	cmp	r2, r3
 800188a:	f6ff acc8 	blt.w	800121e <ProcessUartData+0x5e>
			//Unexpected key
		}
	}

	//store receive data in finger structure
	Fingers_Status.Thumb.SetPoint=HandStruct[Thumb];
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <ProcessUartData+0x71c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <ProcessUartData+0x738>)
 8001896:	701a      	strb	r2, [r3, #0]
	Fingers_Status.Index.SetPoint=HandStruct[Index];
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <ProcessUartData+0x71c>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <ProcessUartData+0x738>)
 80018a0:	761a      	strb	r2, [r3, #24]
	Fingers_Status.Middle.SetPoint=HandStruct[Middle];
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <ProcessUartData+0x71c>)
 80018a4:	789b      	ldrb	r3, [r3, #2]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <ProcessUartData+0x738>)
 80018aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Fingers_Status.Ring.SetPoint=HandStruct[Ring];
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <ProcessUartData+0x71c>)
 80018b0:	78db      	ldrb	r3, [r3, #3]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <ProcessUartData+0x738>)
 80018b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Fingers_Status.Pinky.SetPoint=HandStruct[Pinky];
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <ProcessUartData+0x71c>)
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <ProcessUartData+0x738>)
 80018c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			HandStruct[counter].Value++;
		}
		printf("finger value : %d\n",HandStruct[counter].Value);
	}
	*/
	return EXIT_SUCCESS;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	f507 6708 	add.w	r7, r7, #2176	; 0x880
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40240000 	.word	0x40240000
 80018d8:	40080000 	.word	0x40080000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	40100000 	.word	0x40100000
 80018e4:	40140000 	.word	0x40140000
 80018e8:	40180000 	.word	0x40180000
 80018ec:	401c0000 	.word	0x401c0000
 80018f0:	40200000 	.word	0x40200000
 80018f4:	40220000 	.word	0x40220000
 80018f8:	20001a24 	.word	0x20001a24

080018fc <HAL_UART_RxCpltCallback>:
/*
 * Function3--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_UART_RxCpltCallback+0x94>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13c      	bne.n	8001988 <HAL_UART_RxCpltCallback+0x8c>
		uartRecieveBuffer[uartCounter]=RXuart;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_UART_RxCpltCallback+0x9c>)
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_UART_RxCpltCallback+0xa0>)
 800191a:	5499      	strb	r1, [r3, r2]
		if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_UART_RxCpltCallback+0xa0>)
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d123      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x76>
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_UART_RxCpltCallback+0xa0>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	2b0d      	cmp	r3, #13
 8001936:	d11c      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x76>
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	3b02      	subs	r3, #2
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_UART_RxCpltCallback+0xa0>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	2b7d      	cmp	r3, #125	; 0x7d
 8001944:	d115      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x76>
			ProcessUartData();
 8001946:	f7ff fc3b 	bl	80011c0 <ProcessUartData>
			ManualControl=1;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_RxCpltCallback+0xa4>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
			uartCounter=-1;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 8001952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001956:	801a      	strh	r2, [r3, #0]

			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]
 800195c:	e006      	b.n	800196c <HAL_UART_RxCpltCallback+0x70>
				uartRecieveBuffer[cleanCounter]=0;
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_UART_RxCpltCallback+0xa0>)
 8001962:	2100      	movs	r1, #0
 8001964:	54d1      	strb	r1, [r2, r3]
			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	3301      	adds	r3, #1
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	2b95      	cmp	r3, #149	; 0x95
 8001970:	d9f5      	bls.n	800195e <HAL_UART_RxCpltCallback+0x62>
		}
		uartCounter++;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_UART_RxCpltCallback+0x98>)
 800197c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 800197e:	2201      	movs	r2, #1
 8001980:	4905      	ldr	r1, [pc, #20]	; (8001998 <HAL_UART_RxCpltCallback+0x9c>)
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001984:	f004 f9a4 	bl	8005cd0 <HAL_UART_Receive_IT>

	}
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013800 	.word	0x40013800
 8001994:	20000094 	.word	0x20000094
 8001998:	2000012e 	.word	0x2000012e
 800199c:	20000098 	.word	0x20000098
 80019a0:	20001aec 	.word	0x20001aec
 80019a4:	200019a4 	.word	0x200019a4

080019a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <MX_ADC1_Init+0x78>)
 80019bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_ADC1_Init+0x74>)
 80019e6:	f001 fdc9 	bl	800357c <HAL_ADC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 fdc6 	bl	8002580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80019fc:	2303      	movs	r3, #3
 80019fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_ADC1_Init+0x74>)
 8001a06:	f002 f871 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a10:	f000 fdb6 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000130 	.word	0x20000130
 8001a20:	40012400 	.word	0x40012400

08001a24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_ADC_MspInit+0x6c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d121      	bne.n	8001a88 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_ADC_MspInit+0x70>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Motor1_Current_Pin|Motor2_Current_Pin|Motor3_Current_Pin|Motor4_Current_Pin
 8001a74:	233f      	movs	r3, #63	; 0x3f
 8001a76:	613b      	str	r3, [r7, #16]
                          |Motor5_Current_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_ADC_MspInit+0x74>)
 8001a84:	f002 fc08 	bl	8004298 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40012400 	.word	0x40012400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010800 	.word	0x40010800

08001a9c <ADC_Select_CH0>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0 (void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <ADC_Select_CH0+0x38>)
 8001abe:	f002 f815 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8001ac8:	f000 fd5a 	bl	8002580 <Error_Handler>
	  }
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000130 	.word	0x20000130

08001ad8 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 8001adc:	f7ff ffde 	bl	8001a9c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001ae0:	482d      	ldr	r0, [pc, #180]	; (8001b98 <ADC_ReadCurrent_Pinky+0xc0>)
 8001ae2:	f001 fe23 	bl	800372c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001ae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aea:	482b      	ldr	r0, [pc, #172]	; (8001b98 <ADC_ReadCurrent_Pinky+0xc0>)
 8001aec:	f001 fef8 	bl	80038e0 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc1);
 8001af0:	4829      	ldr	r0, [pc, #164]	; (8001b98 <ADC_ReadCurrent_Pinky+0xc0>)
 8001af2:	f001 ffef 	bl	8003ad4 <HAL_ADC_GetValue>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <ADC_ReadCurrent_Pinky+0xc4>)
 8001afa:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc1);
 8001afc:	4826      	ldr	r0, [pc, #152]	; (8001b98 <ADC_ReadCurrent_Pinky+0xc0>)
 8001afe:	f001 fec3 	bl	8003888 <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc6c 	bl	80003e4 <__aeabi_ui2d>
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	460d      	mov	r5, r1
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <ADC_ReadCurrent_Pinky+0xc4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc65 	bl	80003e4 <__aeabi_ui2d>
 8001b1a:	a31b      	add	r3, pc, #108	; (adr r3, 8001b88 <ADC_ReadCurrent_Pinky+0xb0>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fcda 	bl	80004d8 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fb1e 	bl	800016c <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	a315      	add	r3, pc, #84	; (adr r3, 8001b90 <ADC_ReadCurrent_Pinky+0xb8>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fdf5 	bl	800072c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7fe ff75 	bl	8000a38 <__aeabi_d2uiz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d804      	bhi.n	8001b6a <ADC_ReadCurrent_Pinky+0x92>
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001b68:	d204      	bcs.n	8001b74 <ADC_ReadCurrent_Pinky+0x9c>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001b72:	e004      	b.n	8001b7e <ADC_ReadCurrent_Pinky+0xa6>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <ADC_ReadCurrent_Pinky+0xc8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	47ae147b 	.word	0x47ae147b
 8001b8c:	3f847ae1 	.word	0x3f847ae1
 8001b90:	c28f5c29 	.word	0xc28f5c29
 8001b94:	3ff028f5 	.word	0x3ff028f5
 8001b98:	20000130 	.word	0x20000130
 8001b9c:	20001a9c 	.word	0x20001a9c
 8001ba0:	20001a24 	.word	0x20001a24

08001ba4 <ADC_Select_CH1>:
void ADC_Select_CH1 (void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <ADC_Select_CH1+0x38>)
 8001bc6:	f001 ff91 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8001bd0:	f000 fcd6 	bl	8002580 <Error_Handler>
	  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000130 	.word	0x20000130

08001be0 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	ADC_Select_CH1();
 8001be4:	f7ff ffde 	bl	8001ba4 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8001be8:	482d      	ldr	r0, [pc, #180]	; (8001ca0 <ADC_ReadCurrent_Ring+0xc0>)
 8001bea:	f001 fd9f 	bl	800372c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bf2:	482b      	ldr	r0, [pc, #172]	; (8001ca0 <ADC_ReadCurrent_Ring+0xc0>)
 8001bf4:	f001 fe74 	bl	80038e0 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc1);
 8001bf8:	4829      	ldr	r0, [pc, #164]	; (8001ca0 <ADC_ReadCurrent_Ring+0xc0>)
 8001bfa:	f001 ff6b 	bl	8003ad4 <HAL_ADC_GetValue>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <ADC_ReadCurrent_Ring+0xc4>)
 8001c02:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc1);
 8001c04:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <ADC_ReadCurrent_Ring+0xc0>)
 8001c06:	f001 fe3f 	bl	8003888 <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fbe8 	bl	80003e4 <__aeabi_ui2d>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <ADC_ReadCurrent_Ring+0xc4>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fbe1 	bl	80003e4 <__aeabi_ui2d>
 8001c22:	a31b      	add	r3, pc, #108	; (adr r3, 8001c90 <ADC_ReadCurrent_Ring+0xb0>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fc56 	bl	80004d8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fa9a 	bl	800016c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	a315      	add	r3, pc, #84	; (adr r3, 8001c98 <ADC_ReadCurrent_Ring+0xb8>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fd71 	bl	800072c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe fef1 	bl	8000a38 <__aeabi_d2uiz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d804      	bhi.n	8001c72 <ADC_ReadCurrent_Ring+0x92>
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001c70:	d204      	bcs.n	8001c7c <ADC_ReadCurrent_Ring+0x9c>
		Fingers_Status.Ring.Stuck_Finger=1;
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8001c7a:	e004      	b.n	8001c86 <ADC_ReadCurrent_Ring+0xa6>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <ADC_ReadCurrent_Ring+0xc8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	47ae147b 	.word	0x47ae147b
 8001c94:	3f847ae1 	.word	0x3f847ae1
 8001c98:	c28f5c29 	.word	0xc28f5c29
 8001c9c:	3ff028f5 	.word	0x3ff028f5
 8001ca0:	20000130 	.word	0x20000130
 8001ca4:	20001a9c 	.word	0x20001a9c
 8001ca8:	20001a24 	.word	0x20001a24

08001cac <ADC_Select_CH2>:
void ADC_Select_CH2 (void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <ADC_Select_CH2+0x38>)
 8001cce:	f001 ff0d 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8001cd8:	f000 fc52 	bl	8002580 <Error_Handler>
	  }
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000130 	.word	0x20000130

08001ce8 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	ADC_Select_CH2();
 8001cec:	f7ff ffde 	bl	8001cac <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 8001cf0:	482d      	ldr	r0, [pc, #180]	; (8001da8 <ADC_ReadCurrent_Middle+0xc0>)
 8001cf2:	f001 fd1b 	bl	800372c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <ADC_ReadCurrent_Middle+0xc0>)
 8001cfc:	f001 fdf0 	bl	80038e0 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc1);
 8001d00:	4829      	ldr	r0, [pc, #164]	; (8001da8 <ADC_ReadCurrent_Middle+0xc0>)
 8001d02:	f001 fee7 	bl	8003ad4 <HAL_ADC_GetValue>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <ADC_ReadCurrent_Middle+0xc4>)
 8001d0a:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc1);
 8001d0c:	4826      	ldr	r0, [pc, #152]	; (8001da8 <ADC_ReadCurrent_Middle+0xc0>)
 8001d0e:	f001 fdbb 	bl	8003888 <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fb64 	bl	80003e4 <__aeabi_ui2d>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460d      	mov	r5, r1
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <ADC_ReadCurrent_Middle+0xc4>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fb5d 	bl	80003e4 <__aeabi_ui2d>
 8001d2a:	a31b      	add	r3, pc, #108	; (adr r3, 8001d98 <ADC_ReadCurrent_Middle+0xb0>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fbd2 	bl	80004d8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa16 	bl	800016c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	a315      	add	r3, pc, #84	; (adr r3, 8001da0 <ADC_ReadCurrent_Middle+0xb8>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fced 	bl	800072c <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fe6d 	bl	8000a38 <__aeabi_d2uiz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d804      	bhi.n	8001d7a <ADC_ReadCurrent_Middle+0x92>
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d78:	d204      	bcs.n	8001d84 <ADC_ReadCurrent_Middle+0x9c>
		Fingers_Status.Middle.Stuck_Finger=1;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001d82:	e004      	b.n	8001d8e <ADC_ReadCurrent_Middle+0xa6>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <ADC_ReadCurrent_Middle+0xc8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	47ae147b 	.word	0x47ae147b
 8001d9c:	3f847ae1 	.word	0x3f847ae1
 8001da0:	c28f5c29 	.word	0xc28f5c29
 8001da4:	3ff028f5 	.word	0x3ff028f5
 8001da8:	20000130 	.word	0x20000130
 8001dac:	20001a9c 	.word	0x20001a9c
 8001db0:	20001a24 	.word	0x20001a24

08001db4 <ADC_Select_CH3>:
void ADC_Select_CH3 (void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <ADC_Select_CH3+0x38>)
 8001dd6:	f001 fe89 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8001de0:	f000 fbce 	bl	8002580 <Error_Handler>
	  }
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000130 	.word	0x20000130

08001df0 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 8001df4:	f7ff ffde 	bl	8001db4 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8001df8:	482d      	ldr	r0, [pc, #180]	; (8001eb0 <ADC_ReadCurrent_Index+0xc0>)
 8001dfa:	f001 fc97 	bl	800372c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e02:	482b      	ldr	r0, [pc, #172]	; (8001eb0 <ADC_ReadCurrent_Index+0xc0>)
 8001e04:	f001 fd6c 	bl	80038e0 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc1);
 8001e08:	4829      	ldr	r0, [pc, #164]	; (8001eb0 <ADC_ReadCurrent_Index+0xc0>)
 8001e0a:	f001 fe63 	bl	8003ad4 <HAL_ADC_GetValue>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <ADC_ReadCurrent_Index+0xc4>)
 8001e12:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc1);
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <ADC_ReadCurrent_Index+0xc0>)
 8001e16:	f001 fd37 	bl	8003888 <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 8001e1a:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fae0 	bl	80003e4 <__aeabi_ui2d>
 8001e24:	4604      	mov	r4, r0
 8001e26:	460d      	mov	r5, r1
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <ADC_ReadCurrent_Index+0xc4>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fad9 	bl	80003e4 <__aeabi_ui2d>
 8001e32:	a31b      	add	r3, pc, #108	; (adr r3, 8001ea0 <ADC_ReadCurrent_Index+0xb0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fb4e 	bl	80004d8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe f992 	bl	800016c <__adddf3>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	a315      	add	r3, pc, #84	; (adr r3, 8001ea8 <ADC_ReadCurrent_Index+0xb8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fc69 	bl	800072c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fde9 	bl	8000a38 <__aeabi_d2uiz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e6a:	6293      	str	r3, [r2, #40]	; 0x28
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d804      	bhi.n	8001e82 <ADC_ReadCurrent_Index+0x92>
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e80:	d204      	bcs.n	8001e8c <ADC_ReadCurrent_Index+0x9c>
		Fingers_Status.Index.Stuck_Finger=1;
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001e8a:	e004      	b.n	8001e96 <ADC_ReadCurrent_Index+0xa6>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <ADC_ReadCurrent_Index+0xc8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	47ae147b 	.word	0x47ae147b
 8001ea4:	3f847ae1 	.word	0x3f847ae1
 8001ea8:	c28f5c29 	.word	0xc28f5c29
 8001eac:	3ff028f5 	.word	0x3ff028f5
 8001eb0:	20000130 	.word	0x20000130
 8001eb4:	20001a9c 	.word	0x20001a9c
 8001eb8:	20001a24 	.word	0x20001a24

08001ebc <ADC_Select_CH4>:
void ADC_Select_CH4 (void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <ADC_Select_CH4+0x38>)
 8001ede:	f001 fe05 	bl	8003aec <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 8001ee8:	f000 fb4a 	bl	8002580 <Error_Handler>
	  }
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000130 	.word	0x20000130

08001ef8 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	ADC_Select_CH4();
 8001efc:	f7ff ffde 	bl	8001ebc <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8001f00:	482b      	ldr	r0, [pc, #172]	; (8001fb0 <ADC_ReadCurrent_Thumb+0xb8>)
 8001f02:	f001 fc13 	bl	800372c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001f06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f0a:	4829      	ldr	r0, [pc, #164]	; (8001fb0 <ADC_ReadCurrent_Thumb+0xb8>)
 8001f0c:	f001 fce8 	bl	80038e0 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc1);
 8001f10:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <ADC_ReadCurrent_Thumb+0xb8>)
 8001f12:	f001 fddf 	bl	8003ad4 <HAL_ADC_GetValue>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <ADC_ReadCurrent_Thumb+0xbc>)
 8001f1a:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc1);
 8001f1c:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <ADC_ReadCurrent_Thumb+0xb8>)
 8001f1e:	f001 fcb3 	bl	8003888 <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fa5c 	bl	80003e4 <__aeabi_ui2d>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <ADC_ReadCurrent_Thumb+0xbc>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fa55 	bl	80003e4 <__aeabi_ui2d>
 8001f3a:	a319      	add	r3, pc, #100	; (adr r3, 8001fa0 <ADC_ReadCurrent_Thumb+0xa8>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe faca 	bl	80004d8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f7fe f90e 	bl	800016c <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	a313      	add	r3, pc, #76	; (adr r3, 8001fa8 <ADC_ReadCurrent_Thumb+0xb0>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fbe5 	bl	800072c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fd65 	bl	8000a38 <__aeabi_d2uiz>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f72:	6113      	str	r3, [r2, #16]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d804      	bhi.n	8001f8a <ADC_ReadCurrent_Thumb+0x92>
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001f88:	d203      	bcs.n	8001f92 <ADC_ReadCurrent_Thumb+0x9a>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	72da      	strb	r2, [r3, #11]
 8001f90:	e003      	b.n	8001f9a <ADC_ReadCurrent_Thumb+0xa2>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <ADC_ReadCurrent_Thumb+0xc0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	72da      	strb	r2, [r3, #11]
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	47ae147b 	.word	0x47ae147b
 8001fa4:	3f847ae1 	.word	0x3f847ae1
 8001fa8:	c28f5c29 	.word	0xc28f5c29
 8001fac:	3ff028f5 	.word	0x3ff028f5
 8001fb0:	20000130 	.word	0x20000130
 8001fb4:	20001a9c 	.word	0x20001a9c
 8001fb8:	20001a24 	.word	0x20001a24

08001fbc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_CAN_Init+0x60>)
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <MX_CAN_Init+0x64>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_CAN_Init+0x60>)
 8001fc8:	2210      	movs	r2, #16
 8001fca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_CAN_Init+0x60>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_CAN_Init+0x60>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_CAN_Init+0x60>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_CAN_Init+0x60>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_CAN_Init+0x60>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_CAN_Init+0x60>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_CAN_Init+0x60>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_CAN_Init+0x60>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_CAN_Init+0x60>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_CAN_Init+0x60>)
 8002004:	2200      	movs	r2, #0
 8002006:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_CAN_Init+0x60>)
 800200a:	f001 fef3 	bl	8003df4 <HAL_CAN_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8002014:	f000 fab4 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000160 	.word	0x20000160
 8002020:	40006400 	.word	0x40006400

08002024 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_CAN_MspInit+0xb0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d143      	bne.n	80020cc <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 800204a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_CAN_MspInit+0xb4>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4814      	ldr	r0, [pc, #80]	; (80020dc <HAL_CAN_MspInit+0xb8>)
 800208a:	f002 f905 	bl	8004298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800208e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	480e      	ldr	r0, [pc, #56]	; (80020dc <HAL_CAN_MspInit+0xb8>)
 80020a4:	f002 f8f8 	bl	8004298 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_CAN_MspInit+0xbc>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_CAN_MspInit+0xbc>)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40006400 	.word	0x40006400
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40010000 	.word	0x40010000

080020e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_Tas */
  ThumbFinger_TasHandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_Tas_attributes);
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <MX_FREERTOS_Init+0x58>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4814      	ldr	r0, [pc, #80]	; (8002140 <MX_FREERTOS_Init+0x5c>)
 80020ee:	f004 f9af 	bl	8006450 <osThreadNew>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <MX_FREERTOS_Init+0x60>)
 80020f6:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_Tas */
  IndexFinger_TasHandle = osThreadNew(IndexFinger, NULL, &IndexFinger_Tas_attributes);
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <MX_FREERTOS_Init+0x64>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4813      	ldr	r0, [pc, #76]	; (800214c <MX_FREERTOS_Init+0x68>)
 80020fe:	f004 f9a7 	bl	8006450 <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_FREERTOS_Init+0x6c>)
 8002106:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_Ta */
  MiddleFinger_TaHandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_Ta_attributes);
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_FREERTOS_Init+0x70>)
 800210a:	2100      	movs	r1, #0
 800210c:	4812      	ldr	r0, [pc, #72]	; (8002158 <MX_FREERTOS_Init+0x74>)
 800210e:	f004 f99f 	bl	8006450 <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <MX_FREERTOS_Init+0x78>)
 8002116:	6013      	str	r3, [r2, #0]

  /* creation of Ringfinger_Task */
  Ringfinger_TaskHandle = osThreadNew(Ringfinger, NULL, &Ringfinger_Task_attributes);
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <MX_FREERTOS_Init+0x7c>)
 800211a:	2100      	movs	r1, #0
 800211c:	4811      	ldr	r0, [pc, #68]	; (8002164 <MX_FREERTOS_Init+0x80>)
 800211e:	f004 f997 	bl	8006450 <osThreadNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <MX_FREERTOS_Init+0x84>)
 8002126:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_tas */
  PinkyFinger_tasHandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_tas_attributes);
 8002128:	4a10      	ldr	r2, [pc, #64]	; (800216c <MX_FREERTOS_Init+0x88>)
 800212a:	2100      	movs	r1, #0
 800212c:	4810      	ldr	r0, [pc, #64]	; (8002170 <MX_FREERTOS_Init+0x8c>)
 800212e:	f004 f98f 	bl	8006450 <osThreadNew>
 8002132:	4603      	mov	r3, r0
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <MX_FREERTOS_Init+0x90>)
 8002136:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	08009e98 	.word	0x08009e98
 8002140:	08002179 	.word	0x08002179
 8002144:	20000188 	.word	0x20000188
 8002148:	08009ebc 	.word	0x08009ebc
 800214c:	080021c5 	.word	0x080021c5
 8002150:	20000634 	.word	0x20000634
 8002154:	08009ee0 	.word	0x08009ee0
 8002158:	08002221 	.word	0x08002221
 800215c:	20000ae0 	.word	0x20000ae0
 8002160:	08009f04 	.word	0x08009f04
 8002164:	0800227d 	.word	0x0800227d
 8002168:	20000f8c 	.word	0x20000f8c
 800216c:	08009f28 	.word	0x08009f28
 8002170:	080022d9 	.word	0x080022d9
 8002174:	20001438 	.word	0x20001438

08002178 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af04      	add	r7, sp, #16
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Thumb.Stuck_Finger)
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <ThumbFinger+0x48>)
 8002182:	7adb      	ldrb	r3, [r3, #11]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <ThumbFinger+0x16>
			Fingers_Status.Thumb.Direction=Stop;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <ThumbFinger+0x48>)
 800218a:	2200      	movs	r2, #0
 800218c:	721a      	strb	r2, [r3, #8]
		SetMotor(Thumb, Fingers_Status.Thumb);
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <ThumbFinger+0x48>)
 8002190:	466c      	mov	r4, sp
 8002192:	f103 020c 	add.w	r2, r3, #12
 8002196:	ca07      	ldmia	r2, {r0, r1, r2}
 8002198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800219c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 ffe0 	bl	8003164 <SetMotor>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
		__disable_irq();
		ADC_ReadCurrent_Thumb();
 80021a8:	f7ff fea6 	bl	8001ef8 <ADC_ReadCurrent_Thumb>
  __ASM volatile ("cpsie i" : : : "memory");
 80021ac:	b662      	cpsie	i
}
 80021ae:	bf00      	nop
		__enable_irq();
		Read_Encoder(&Fingers_Status.Thumb, Thumb);
 80021b0:	2100      	movs	r1, #0
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <ThumbFinger+0x48>)
 80021b4:	f000 fdb2 	bl	8002d1c <Read_Encoder>
		osDelay(1);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f004 f9f3 	bl	80065a4 <osDelay>
		if(Fingers_Status.Thumb.Stuck_Finger)
 80021be:	e7df      	b.n	8002180 <ThumbFinger+0x8>
 80021c0:	20001a24 	.word	0x20001a24

080021c4 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af04      	add	r7, sp, #16
 80021ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Index.Stuck_Finger)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <IndexFinger+0x54>)
 80021ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <IndexFinger+0x1a>
			Fingers_Status.Index.Direction=Stop;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <IndexFinger+0x54>)
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2020 	strb.w	r2, [r3, #32]
		SetMotor(Index, Fingers_Status.Index);
 80021de:	4d0e      	ldr	r5, [pc, #56]	; (8002218 <IndexFinger+0x54>)
 80021e0:	466c      	mov	r4, sp
 80021e2:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80021e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ee:	f105 0318 	add.w	r3, r5, #24
 80021f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 ffb5 	bl	8003164 <SetMotor>
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
		__disable_irq();
		ADC_ReadCurrent_Index();
 80021fe:	f7ff fdf7 	bl	8001df0 <ADC_ReadCurrent_Index>
  __ASM volatile ("cpsie i" : : : "memory");
 8002202:	b662      	cpsie	i
}
 8002204:	bf00      	nop
		__enable_irq();
		Read_Encoder(&Fingers_Status.Index, Index);
 8002206:	2101      	movs	r1, #1
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <IndexFinger+0x58>)
 800220a:	f000 fd87 	bl	8002d1c <Read_Encoder>
		osDelay(1);
 800220e:	2001      	movs	r0, #1
 8002210:	f004 f9c8 	bl	80065a4 <osDelay>
		if(Fingers_Status.Index.Stuck_Finger)
 8002214:	e7da      	b.n	80021cc <IndexFinger+0x8>
 8002216:	bf00      	nop
 8002218:	20001a24 	.word	0x20001a24
 800221c:	20001a3c 	.word	0x20001a3c

08002220 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af04      	add	r7, sp, #16
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Middle.Stuck_Finger)
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MiddleFinger+0x54>)
 800222a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <MiddleFinger+0x1a>
			Fingers_Status.Middle.Direction=Stop;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MiddleFinger+0x54>)
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		SetMotor(Middle, Fingers_Status.Middle);
 800223a:	4d0e      	ldr	r5, [pc, #56]	; (8002274 <MiddleFinger+0x54>)
 800223c:	466c      	mov	r4, sp
 800223e:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8002242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800224a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800224e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002250:	2002      	movs	r0, #2
 8002252:	f000 ff87 	bl	8003164 <SetMotor>
  __ASM volatile ("cpsid i" : : : "memory");
 8002256:	b672      	cpsid	i
}
 8002258:	bf00      	nop
		__disable_irq();
		ADC_ReadCurrent_Middle();
 800225a:	f7ff fd45 	bl	8001ce8 <ADC_ReadCurrent_Middle>
  __ASM volatile ("cpsie i" : : : "memory");
 800225e:	b662      	cpsie	i
}
 8002260:	bf00      	nop
		__enable_irq();
		Read_Encoder(&Fingers_Status.Middle, Middle);
 8002262:	2102      	movs	r1, #2
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MiddleFinger+0x58>)
 8002266:	f000 fd59 	bl	8002d1c <Read_Encoder>
		osDelay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f004 f99a 	bl	80065a4 <osDelay>
		if(Fingers_Status.Middle.Stuck_Finger)
 8002270:	e7da      	b.n	8002228 <MiddleFinger+0x8>
 8002272:	bf00      	nop
 8002274:	20001a24 	.word	0x20001a24
 8002278:	20001a54 	.word	0x20001a54

0800227c <Ringfinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ringfinger */
void Ringfinger(void *argument)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af04      	add	r7, sp, #16
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ringfinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Ring.Stuck_Finger)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <Ringfinger+0x54>)
 8002286:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <Ringfinger+0x1a>
			Fingers_Status.Ring.Direction=Stop;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <Ringfinger+0x54>)
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		SetMotor(Ring, Fingers_Status.Ring);
 8002296:	4d0e      	ldr	r5, [pc, #56]	; (80022d0 <Ringfinger+0x54>)
 8002298:	466c      	mov	r4, sp
 800229a:	f105 0354 	add.w	r3, r5, #84	; 0x54
 800229e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022a6:	f105 0348 	add.w	r3, r5, #72	; 0x48
 80022aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 ff59 	bl	8003164 <SetMotor>
  __ASM volatile ("cpsid i" : : : "memory");
 80022b2:	b672      	cpsid	i
}
 80022b4:	bf00      	nop
		__disable_irq();
		ADC_ReadCurrent_Ring();
 80022b6:	f7ff fc93 	bl	8001be0 <ADC_ReadCurrent_Ring>
  __ASM volatile ("cpsie i" : : : "memory");
 80022ba:	b662      	cpsie	i
}
 80022bc:	bf00      	nop
		__enable_irq();
		Read_Encoder(&Fingers_Status.Ring, Ring);
 80022be:	2103      	movs	r1, #3
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <Ringfinger+0x58>)
 80022c2:	f000 fd2b 	bl	8002d1c <Read_Encoder>
		osDelay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f004 f96c 	bl	80065a4 <osDelay>
		if(Fingers_Status.Ring.Stuck_Finger)
 80022cc:	e7da      	b.n	8002284 <Ringfinger+0x8>
 80022ce:	bf00      	nop
 80022d0:	20001a24 	.word	0x20001a24
 80022d4:	20001a6c 	.word	0x20001a6c

080022d8 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af04      	add	r7, sp, #16
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Pinky.Stuck_Finger)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <PinkyFinger+0x54>)
 80022e2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <PinkyFinger+0x1a>
			Fingers_Status.Pinky.Direction=Stop;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <PinkyFinger+0x54>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		SetMotor(Pinky, Fingers_Status.Pinky);\
 80022f2:	4d0e      	ldr	r5, [pc, #56]	; (800232c <PinkyFinger+0x54>)
 80022f4:	466c      	mov	r4, sp
 80022f6:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 80022fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002302:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8002306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002308:	2004      	movs	r0, #4
 800230a:	f000 ff2b 	bl	8003164 <SetMotor>
  __ASM volatile ("cpsid i" : : : "memory");
 800230e:	b672      	cpsid	i
}
 8002310:	bf00      	nop
		__disable_irq();
		ADC_ReadCurrent_Pinky();
 8002312:	f7ff fbe1 	bl	8001ad8 <ADC_ReadCurrent_Pinky>
  __ASM volatile ("cpsie i" : : : "memory");
 8002316:	b662      	cpsie	i
}
 8002318:	bf00      	nop
		__enable_irq();
		Read_Encoder(&Fingers_Status.Pinky, Pinky);
 800231a:	2104      	movs	r1, #4
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <PinkyFinger+0x58>)
 800231e:	f000 fcfd 	bl	8002d1c <Read_Encoder>
		osDelay(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f004 f93e 	bl	80065a4 <osDelay>
		if(Fingers_Status.Pinky.Stuck_Finger)
 8002328:	e7da      	b.n	80022e0 <PinkyFinger+0x8>
 800232a:	bf00      	nop
 800232c:	20001a24 	.word	0x20001a24
 8002330:	20001a84 	.word	0x20001a84

08002334 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002348:	4b45      	ldr	r3, [pc, #276]	; (8002460 <MX_GPIO_Init+0x12c>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a44      	ldr	r2, [pc, #272]	; (8002460 <MX_GPIO_Init+0x12c>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002366:	f043 0320 	orr.w	r3, r3, #32
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <MX_GPIO_Init+0x12c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <MX_GPIO_Init+0x12c>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <MX_GPIO_Init+0x12c>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a32      	ldr	r2, [pc, #200]	; (8002460 <MX_GPIO_Init+0x12c>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <MX_GPIO_Init+0x12c>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <MX_GPIO_Init+0x130>)
 80023b0:	f002 f90d 	bl	80045ce <HAL_GPIO_WritePin>
                          |Motor1_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 80023b4:	2200      	movs	r2, #0
 80023b6:	f24f 0108 	movw	r1, #61448	; 0xf008
 80023ba:	482b      	ldr	r0, [pc, #172]	; (8002468 <MX_GPIO_Init+0x134>)
 80023bc:	f002 f907 	bl	80045ce <HAL_GPIO_WritePin>
                          |Motor5_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2104      	movs	r1, #4
 80023c4:	4829      	ldr	r0, [pc, #164]	; (800246c <MX_GPIO_Init+0x138>)
 80023c6:	f002 f902 	bl	80045ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 80023ca:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 80023ce:	613b      	str	r3, [r7, #16]
                          |Motor1_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2302      	movs	r3, #2
 80023da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	4820      	ldr	r0, [pc, #128]	; (8002464 <MX_GPIO_Init+0x130>)
 80023e4:	f001 ff58 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder1_Pin|Motor3_Encoder2_Pin|Motor1_Encoder1_Pin|Motor1_Encoder2_Pin
 80023e8:	f641 4333 	movw	r3, #7219	; 0x1c33
 80023ec:	613b      	str	r3, [r7, #16]
                          |Motor5_Encoder2_Pin|Motor4_Encoder1_Pin|Motor4_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	4819      	ldr	r0, [pc, #100]	; (8002464 <MX_GPIO_Init+0x130>)
 80023fe:	f001 ff4b 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor2_Encoder1_Pin|Motor2_Encoder2_Pin|Motor5_Encoder1_Pin;
 8002402:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8002406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	4619      	mov	r1, r3
 8002416:	4816      	ldr	r0, [pc, #88]	; (8002470 <MX_GPIO_Init+0x13c>)
 8002418:	f001 ff3e 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 800241c:	f24f 0308 	movw	r3, #61448	; 0xf008
 8002420:	613b      	str	r3, [r7, #16]
                          |Motor5_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2302      	movs	r3, #2
 800242c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4619      	mov	r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <MX_GPIO_Init+0x134>)
 8002436:	f001 ff2f 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_INB_Pin;
 800243a:	2304      	movs	r3, #4
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2302      	movs	r3, #2
 8002448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_INB_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4619      	mov	r1, r3
 8002450:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_GPIO_Init+0x138>)
 8002452:	f001 ff21 	bl	8004298 <HAL_GPIO_Init>

}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40011000 	.word	0x40011000
 8002468:	40010c00 	.word	0x40010c00
 800246c:	40011400 	.word	0x40011400
 8002470:	40010800 	.word	0x40010800

08002474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002478:	f001 f84e 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247c:	f000 f817 	bl	80024ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002480:	f7ff ff58 	bl	8002334 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002484:	f7ff fa90 	bl	80019a8 <MX_ADC1_Init>
  MX_CAN_Init();
 8002488:	f7ff fd98 	bl	8001fbc <MX_CAN_Init>
  MX_TIM1_Init();
 800248c:	f000 f99c 	bl	80027c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002490:	f000 fa40 	bl	8002914 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002494:	f000 fb2c 	bl	8002af0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002498:	f000 fb54 	bl	8002b44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_motor_controller();
 800249c:	f000 ffb6 	bl	800340c <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80024a0:	f003 ff70 	bl	8006384 <osKernelInitialize>
  MX_FREERTOS_Init();
 80024a4:	f7ff fe1e 	bl	80020e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80024a8:	f003 ff9e 	bl	80063e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <main+0x38>

080024ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b094      	sub	sp, #80	; 0x50
 80024b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b8:	2228      	movs	r2, #40	; 0x28
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f006 fc65 	bl	8008d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024de:	2302      	movs	r3, #2
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e2:	2301      	movs	r3, #1
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e6:	2310      	movs	r3, #16
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ea:	2302      	movs	r3, #2
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80024ee:	2300      	movs	r3, #0
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 f87f 	bl	8004600 <HAL_RCC_OscConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002508:	f000 f83a 	bl	8002580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250c:	230f      	movs	r3, #15
 800250e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	2302      	movs	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800251c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f002 faeb 	bl	8004b04 <HAL_RCC_ClockConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002534:	f000 f824 	bl	8002580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002538:	2302      	movs	r3, #2
 800253a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800253c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002540:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fca5 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002550:	f000 f816 	bl	8002580 <Error_Handler>
  }
}
 8002554:	bf00      	nop
 8002556:	3750      	adds	r7, #80	; 0x50
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800256e:	f000 ffe9 	bl	8003544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40000800 	.word	0x40000800

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	e7fe      	b.n	8002588 <Error_Handler+0x8>
	...

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_MspInit+0x68>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_MspInit+0x68>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6193      	str	r3, [r2, #24]
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_MspInit+0x68>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_MspInit+0x68>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_MspInit+0x68>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_MspInit+0x68>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	210f      	movs	r1, #15
 80025c6:	f06f 0001 	mvn.w	r0, #1
 80025ca:	f001 fdc4 	bl	8004156 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_MspInit+0x6c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_MspInit+0x6c>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000

080025fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_InitTick+0xe8>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_InitTick+0xe8>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_InitTick+0xe8>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800262a:	f107 0210 	add.w	r2, r7, #16
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fbdf 	bl	8004df8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002644:	f002 fbb0 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 8002648:	6378      	str	r0, [r7, #52]	; 0x34
 800264a:	e004      	b.n	8002656 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800264c:	f002 fbac 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 8002650:	4603      	mov	r3, r0
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_InitTick+0xec>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9b      	lsrs	r3, r3, #18
 8002660:	3b01      	subs	r3, #1
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_InitTick+0xf0>)
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_InitTick+0xf4>)
 8002668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_InitTick+0xf0>)
 800266c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002670:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_InitTick+0xf0>)
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_InitTick+0xf0>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_InitTick+0xf0>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_InitTick+0xf0>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800268a:	4818      	ldr	r0, [pc, #96]	; (80026ec <HAL_InitTick+0xf0>)
 800268c:	f002 fd78 	bl	8005180 <HAL_TIM_Base_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11b      	bne.n	80026d6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800269e:	4813      	ldr	r0, [pc, #76]	; (80026ec <HAL_InitTick+0xf0>)
 80026a0:	f002 fda2 	bl	80051e8 <HAL_TIM_Base_Start_IT>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d111      	bne.n	80026d6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026b2:	201e      	movs	r0, #30
 80026b4:	f001 fd6b 	bl	800418e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d808      	bhi.n	80026d0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026be:	2200      	movs	r2, #0
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	201e      	movs	r0, #30
 80026c4:	f001 fd47 	bl	8004156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_InitTick+0xf8>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e002      	b.n	80026d6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3738      	adds	r7, #56	; 0x38
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	200018e4 	.word	0x200018e4
 80026f0:	40000800 	.word	0x40000800
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <TIM4_IRQHandler+0x10>)
 800272a:	f002 fddd 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200018e4 	.word	0x200018e4

08002738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <USART1_IRQHandler+0x10>)
 800273e:	f003 fb1b 	bl	8005d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200019a4 	.word	0x200019a4

0800274c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <USART3_IRQHandler+0x10>)
 8002752:	f003 fb11 	bl	8005d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200019e4 	.word	0x200019e4

08002760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <SystemInit+0x5c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a14      	ldr	r2, [pc, #80]	; (80027bc <SystemInit+0x5c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <SystemInit+0x5c>)
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4911      	ldr	r1, [pc, #68]	; (80027bc <SystemInit+0x5c>)
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <SystemInit+0x60>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <SystemInit+0x5c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <SystemInit+0x5c>)
 8002782:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <SystemInit+0x5c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <SystemInit+0x5c>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <SystemInit+0x5c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <SystemInit+0x5c>)
 800279e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SystemInit+0x5c>)
 80027a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SystemInit+0x64>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f8ff0000 	.word	0xf8ff0000
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b092      	sub	sp, #72	; 0x48
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2220      	movs	r2, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 faca 	bl	8008d8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f8:	4b44      	ldr	r3, [pc, #272]	; (800290c <MX_TIM1_Init+0x144>)
 80027fa:	4a45      	ldr	r2, [pc, #276]	; (8002910 <MX_TIM1_Init+0x148>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <MX_TIM1_Init+0x144>)
 8002800:	2213      	movs	r2, #19
 8002802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <MX_TIM1_Init+0x144>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <MX_TIM1_Init+0x144>)
 800280c:	2263      	movs	r2, #99	; 0x63
 800280e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <MX_TIM1_Init+0x144>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <MX_TIM1_Init+0x144>)
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <MX_TIM1_Init+0x144>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002822:	483a      	ldr	r0, [pc, #232]	; (800290c <MX_TIM1_Init+0x144>)
 8002824:	f002 fd03 	bl	800522e <HAL_TIM_PWM_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800282e:	f7ff fea7 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800283a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800283e:	4619      	mov	r1, r3
 8002840:	4832      	ldr	r0, [pc, #200]	; (800290c <MX_TIM1_Init+0x144>)
 8002842:	f003 f951 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800284c:	f7ff fe98 	bl	8002580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002850:	2360      	movs	r3, #96	; 0x60
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285c:	2300      	movs	r3, #0
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	2200      	movs	r2, #0
 8002872:	4619      	mov	r1, r3
 8002874:	4825      	ldr	r0, [pc, #148]	; (800290c <MX_TIM1_Init+0x144>)
 8002876:	f002 fe3f 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002880:	f7ff fe7e 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002888:	2204      	movs	r2, #4
 800288a:	4619      	mov	r1, r3
 800288c:	481f      	ldr	r0, [pc, #124]	; (800290c <MX_TIM1_Init+0x144>)
 800288e:	f002 fe33 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002898:	f7ff fe72 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800289c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a0:	2208      	movs	r2, #8
 80028a2:	4619      	mov	r1, r3
 80028a4:	4819      	ldr	r0, [pc, #100]	; (800290c <MX_TIM1_Init+0x144>)
 80028a6:	f002 fe27 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80028b0:	f7ff fe66 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	220c      	movs	r2, #12
 80028ba:	4619      	mov	r1, r3
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM1_Init+0x144>)
 80028be:	f002 fe1b 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80028c8:	f7ff fe5a 	bl	8002580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4807      	ldr	r0, [pc, #28]	; (800290c <MX_TIM1_Init+0x144>)
 80028f0:	f003 f93e 	bl	8005b70 <HAL_TIMEx_ConfigBreakDeadTime>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80028fa:	f7ff fe41 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <MX_TIM1_Init+0x144>)
 8002900:	f000 f890 	bl	8002a24 <HAL_TIM_MspPostInit>

}
 8002904:	bf00      	nop
 8002906:	3748      	adds	r7, #72	; 0x48
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20001924 	.word	0x20001924
 8002910:	40012c00 	.word	0x40012c00

08002914 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	f107 0320 	add.w	r3, r7, #32
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <MX_TIM2_Init+0xac>)
 8002938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800293c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <MX_TIM2_Init+0xac>)
 8002940:	2213      	movs	r2, #19
 8002942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <MX_TIM2_Init+0xac>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <MX_TIM2_Init+0xac>)
 800294c:	2263      	movs	r2, #99	; 0x63
 800294e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <MX_TIM2_Init+0xac>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <MX_TIM2_Init+0xac>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800295c:	4818      	ldr	r0, [pc, #96]	; (80029c0 <MX_TIM2_Init+0xac>)
 800295e:	f002 fc66 	bl	800522e <HAL_TIM_PWM_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002968:	f7ff fe0a 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002974:	f107 0320 	add.w	r3, r7, #32
 8002978:	4619      	mov	r1, r3
 800297a:	4811      	ldr	r0, [pc, #68]	; (80029c0 <MX_TIM2_Init+0xac>)
 800297c:	f003 f8b4 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002986:	f7ff fdfb 	bl	8002580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800298a:	2360      	movs	r3, #96	; 0x60
 800298c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <MX_TIM2_Init+0xac>)
 80029a2:	f002 fda9 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80029ac:	f7ff fde8 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <MX_TIM2_Init+0xac>)
 80029b2:	f000 f837 	bl	8002a24 <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20001964 	.word	0x20001964

080029c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_TIM_PWM_MspInit+0x58>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 80029dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029ee:	e010      	b.n	8002a12 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d10b      	bne.n	8002a12 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	61d3      	str	r3, [r2, #28]
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_TIM_MspPostInit+0xbc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d119      	bne.n	8002a78 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin|Motor2_PWM_Pin|Motor3_PWM_Pin|Motor4_PWM_Pin;
 8002a5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2302      	movs	r3, #2
 8002a68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <HAL_TIM_MspPostInit+0xc4>)
 8002a72:	f001 fc11 	bl	8004298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a76:	e02f      	b.n	8002ad8 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d12a      	bne.n	8002ad8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6193      	str	r3, [r2, #24]
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_TIM_MspPostInit+0xc0>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor5_PWM_Pin;
 8002a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	480e      	ldr	r0, [pc, #56]	; (8002ae8 <HAL_TIM_MspPostInit+0xc4>)
 8002ab0:	f001 fbf2 	bl	8004298 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_TIM_MspPostInit+0xc8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	4a06      	ldr	r2, [pc, #24]	; (8002aec <HAL_TIM_MspPostInit+0xc8>)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	6053      	str	r3, [r2, #4]
}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010800 	.word	0x40010800
 8002aec:	40010000 	.word	0x40010000

08002af0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <MX_USART1_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b28:	f003 f885 	bl	8005c36 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f7ff fd25 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200019a4 	.word	0x200019a4
 8002b40:	40013800 	.word	0x40013800

08002b44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <MX_USART3_UART_Init+0x50>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b7c:	f003 f85b 	bl	8005c36 <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b86:	f7ff fcfb 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200019e4 	.word	0x200019e4
 8002b94:	40004800 	.word	0x40004800

08002b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08c      	sub	sp, #48	; 0x30
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a46      	ldr	r2, [pc, #280]	; (8002ccc <HAL_UART_MspInit+0x134>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d146      	bne.n	8002c46 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a44      	ldr	r2, [pc, #272]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8002be8:	2340      	movs	r3, #64	; 0x40
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4836      	ldr	r0, [pc, #216]	; (8002cd4 <HAL_UART_MspInit+0x13c>)
 8002bfc:	f001 fb4c 	bl	8004298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4830      	ldr	r0, [pc, #192]	; (8002cd4 <HAL_UART_MspInit+0x13c>)
 8002c14:	f001 fb40 	bl	8004298 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_UART_MspInit+0x140>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <HAL_UART_MspInit+0x140>)
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2107      	movs	r1, #7
 8002c38:	2025      	movs	r0, #37	; 0x25
 8002c3a:	f001 fa8c 	bl	8004156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c3e:	2025      	movs	r0, #37	; 0x25
 8002c40:	f001 faa5 	bl	800418e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c44:	e03e      	b.n	8002cc4 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <HAL_UART_MspInit+0x144>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d139      	bne.n	8002cc4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5a:	61d3      	str	r3, [r2, #28]
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_UART_MspInit+0x138>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <HAL_UART_MspInit+0x13c>)
 8002c96:	f001 faff 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	4809      	ldr	r0, [pc, #36]	; (8002cd4 <HAL_UART_MspInit+0x13c>)
 8002cb0:	f001 faf2 	bl	8004298 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2105      	movs	r1, #5
 8002cb8:	2027      	movs	r0, #39	; 0x27
 8002cba:	f001 fa4c 	bl	8004156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cbe:	2027      	movs	r0, #39	; 0x27
 8002cc0:	f001 fa65 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8002cc4:	bf00      	nop
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010c00 	.word	0x40010c00
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40004800 	.word	0x40004800

08002ce0 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Finger_Struct* FingerStruct,Fingers_Name_Enum FingerName)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
//	_Bool Signal_A;
//	_Bool Signal_B;
	switch (FingerName) {
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	f200 8206 	bhi.w	800313c <Read_Encoder+0x420>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <Read_Encoder+0x1c>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d4d 	.word	0x08002d4d
 8002d3c:	08002e15 	.word	0x08002e15
 8002d40:	08002eed 	.word	0x08002eed
 8002d44:	08002fb9 	.word	0x08002fb9
 8002d48:	0800307b 	.word	0x0800307b
	case Thumb:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8002d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d50:	4897      	ldr	r0, [pc, #604]	; (8002fb0 <Read_Encoder+0x294>)
 8002d52:	f001 fc25 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	751a      	strb	r2, [r3, #20]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 8002d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d6a:	4892      	ldr	r0, [pc, #584]	; (8002fb4 <Read_Encoder+0x298>)
 8002d6c:	f001 fc18 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	755a      	strb	r2, [r3, #21]
		if(FingerStruct->SignalA && FingerStruct->SignalB)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7d1b      	ldrb	r3, [r3, #20]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <Read_Encoder+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7d5b      	ldrb	r3, [r3, #21]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <Read_Encoder+0x80>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2203      	movs	r2, #3
 8002d98:	725a      	strb	r2, [r3, #9]
 8002d9a:	e024      	b.n	8002de6 <Read_Encoder+0xca>
		else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7d1b      	ldrb	r3, [r3, #20]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <Read_Encoder+0xa2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7d5b      	ldrb	r3, [r3, #21]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <Read_Encoder+0xa2>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2204      	movs	r2, #4
 8002dba:	725a      	strb	r2, [r3, #9]
 8002dbc:	e013      	b.n	8002de6 <Read_Encoder+0xca>
		else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7d1b      	ldrb	r3, [r3, #20]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <Read_Encoder+0xc4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7d5b      	ldrb	r3, [r3, #21]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <Read_Encoder+0xc4>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	725a      	strb	r2, [r3, #9]
 8002dde:	e002      	b.n	8002de6 <Read_Encoder+0xca>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7a5a      	ldrb	r2, [r3, #9]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7a9b      	ldrb	r3, [r3, #10]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f000 81a6 	beq.w	8003140 <Read_Encoder+0x424>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	7a92      	ldrb	r2, [r2, #10]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	7a52      	ldrb	r2, [r2, #9]
 8002e02:	1a8a      	subs	r2, r1, r2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7a5a      	ldrb	r2, [r3, #9]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	729a      	strb	r2, [r3, #10]
		}
		break;
 8002e12:	e195      	b.n	8003140 <Read_Encoder+0x424>
	case Index:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 8002e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e18:	4866      	ldr	r0, [pc, #408]	; (8002fb4 <Read_Encoder+0x298>)
 8002e1a:	f001 fbc1 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	751a      	strb	r2, [r3, #20]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 8002e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e32:	4860      	ldr	r0, [pc, #384]	; (8002fb4 <Read_Encoder+0x298>)
 8002e34:	f001 fbb4 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	755a      	strb	r2, [r3, #21]
		if(FingerStruct->SignalA && FingerStruct->SignalB)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7d1b      	ldrb	r3, [r3, #20]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <Read_Encoder+0x148>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7d5b      	ldrb	r3, [r3, #21]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <Read_Encoder+0x148>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	725a      	strb	r2, [r3, #9]
 8002e62:	e024      	b.n	8002eae <Read_Encoder+0x192>
		else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7d1b      	ldrb	r3, [r3, #20]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <Read_Encoder+0x16a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7d5b      	ldrb	r3, [r3, #21]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <Read_Encoder+0x16a>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	725a      	strb	r2, [r3, #9]
 8002e84:	e013      	b.n	8002eae <Read_Encoder+0x192>
		else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7d1b      	ldrb	r3, [r3, #20]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <Read_Encoder+0x18c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7d5b      	ldrb	r3, [r3, #21]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <Read_Encoder+0x18c>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	725a      	strb	r2, [r3, #9]
 8002ea6:	e002      	b.n	8002eae <Read_Encoder+0x192>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7a5a      	ldrb	r2, [r3, #9]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a9b      	ldrb	r3, [r3, #10]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	f000 8144 	beq.w	8003144 <Read_Encoder+0x428>
		{
			if(FingerStruct->Direction==Open)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7a1b      	ldrb	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <Read_Encoder+0x1b4>
				FingerStruct->Encoder++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e008      	b.n	8002ee2 <Read_Encoder+0x1c6>
			else if(FingerStruct->Direction==Close)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7a1b      	ldrb	r3, [r3, #8]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d104      	bne.n	8002ee2 <Read_Encoder+0x1c6>
				FingerStruct->Encoder--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7a5a      	ldrb	r2, [r3, #9]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	729a      	strb	r2, [r3, #10]
		}
		break;
 8002eea:	e12b      	b.n	8003144 <Read_Encoder+0x428>
	case Middle:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 8002eec:	2101      	movs	r1, #1
 8002eee:	4831      	ldr	r0, [pc, #196]	; (8002fb4 <Read_Encoder+0x298>)
 8002ef0:	f001 fb56 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	751a      	strb	r2, [r3, #20]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 8002f04:	2102      	movs	r1, #2
 8002f06:	482b      	ldr	r0, [pc, #172]	; (8002fb4 <Read_Encoder+0x298>)
 8002f08:	f001 fb4a 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	755a      	strb	r2, [r3, #21]
		if(FingerStruct->SignalA && FingerStruct->SignalB)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7d1b      	ldrb	r3, [r3, #20]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <Read_Encoder+0x21c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7d5b      	ldrb	r3, [r3, #21]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <Read_Encoder+0x21c>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2203      	movs	r2, #3
 8002f34:	725a      	strb	r2, [r3, #9]
 8002f36:	e024      	b.n	8002f82 <Read_Encoder+0x266>
		else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7d1b      	ldrb	r3, [r3, #20]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <Read_Encoder+0x23e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7d5b      	ldrb	r3, [r3, #21]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <Read_Encoder+0x23e>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2204      	movs	r2, #4
 8002f56:	725a      	strb	r2, [r3, #9]
 8002f58:	e013      	b.n	8002f82 <Read_Encoder+0x266>
		else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7d1b      	ldrb	r3, [r3, #20]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <Read_Encoder+0x260>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7d5b      	ldrb	r3, [r3, #21]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <Read_Encoder+0x260>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	725a      	strb	r2, [r3, #9]
 8002f7a:	e002      	b.n	8002f82 <Read_Encoder+0x266>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7a5a      	ldrb	r2, [r3, #9]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a9b      	ldrb	r3, [r3, #10]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	f000 80dc 	beq.w	8003148 <Read_Encoder+0x42c>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	7a92      	ldrb	r2, [r2, #10]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	7a52      	ldrb	r2, [r2, #9]
 8002f9e:	1a8a      	subs	r2, r1, r2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7a5a      	ldrb	r2, [r3, #9]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	729a      	strb	r2, [r3, #10]
		}
		break;
 8002fae:	e0cb      	b.n	8003148 <Read_Encoder+0x42c>
 8002fb0:	40010800 	.word	0x40010800
 8002fb4:	40011000 	.word	0x40011000
	case Ring:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	4868      	ldr	r0, [pc, #416]	; (800315c <Read_Encoder+0x440>)
 8002fbc:	f001 faf0 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	751a      	strb	r2, [r3, #20]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	4862      	ldr	r0, [pc, #392]	; (800315c <Read_Encoder+0x440>)
 8002fd4:	f001 fae4 	bl	80045a0 <HAL_GPIO_ReadPin>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	755a      	strb	r2, [r3, #21]
		if(FingerStruct->SignalA && FingerStruct->SignalB)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7d1b      	ldrb	r3, [r3, #20]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <Read_Encoder+0x2e8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7d5b      	ldrb	r3, [r3, #21]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <Read_Encoder+0x2e8>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	725a      	strb	r2, [r3, #9]
 8003002:	e024      	b.n	800304e <Read_Encoder+0x332>
		else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7d1b      	ldrb	r3, [r3, #20]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <Read_Encoder+0x30a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7d5b      	ldrb	r3, [r3, #21]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <Read_Encoder+0x30a>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	725a      	strb	r2, [r3, #9]
 8003024:	e013      	b.n	800304e <Read_Encoder+0x332>
		else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7d1b      	ldrb	r3, [r3, #20]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f083 0301 	eor.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <Read_Encoder+0x32c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7d5b      	ldrb	r3, [r3, #21]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <Read_Encoder+0x32c>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	725a      	strb	r2, [r3, #9]
 8003046:	e002      	b.n	800304e <Read_Encoder+0x332>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7a5a      	ldrb	r2, [r3, #9]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7a9b      	ldrb	r3, [r3, #10]
 8003056:	429a      	cmp	r2, r3
 8003058:	d078      	beq.n	800314c <Read_Encoder+0x430>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	7a92      	ldrb	r2, [r2, #10]
 8003062:	4611      	mov	r1, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	7a52      	ldrb	r2, [r2, #9]
 8003068:	1a8a      	subs	r2, r1, r2
 800306a:	441a      	add	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7a5a      	ldrb	r2, [r3, #9]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	729a      	strb	r2, [r3, #10]
		}
		break;
 8003078:	e068      	b.n	800314c <Read_Encoder+0x430>
	case Pinky:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 800307a:	2110      	movs	r1, #16
 800307c:	4838      	ldr	r0, [pc, #224]	; (8003160 <Read_Encoder+0x444>)
 800307e:	f001 fa8f 	bl	80045a0 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	751a      	strb	r2, [r3, #20]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 8003092:	2120      	movs	r1, #32
 8003094:	4832      	ldr	r0, [pc, #200]	; (8003160 <Read_Encoder+0x444>)
 8003096:	f001 fa83 	bl	80045a0 <HAL_GPIO_ReadPin>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	755a      	strb	r2, [r3, #21]
		if(FingerStruct->SignalA && FingerStruct->SignalB)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7d1b      	ldrb	r3, [r3, #20]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <Read_Encoder+0x3aa>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7d5b      	ldrb	r3, [r3, #21]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <Read_Encoder+0x3aa>
			FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	725a      	strb	r2, [r3, #9]
 80030c4:	e024      	b.n	8003110 <Read_Encoder+0x3f4>
		else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7d1b      	ldrb	r3, [r3, #20]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <Read_Encoder+0x3cc>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7d5b      	ldrb	r3, [r3, #21]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f083 0301 	eor.w	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <Read_Encoder+0x3cc>
			FingerStruct->current_Encoder_State=Ahigh_Blow;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2204      	movs	r2, #4
 80030e4:	725a      	strb	r2, [r3, #9]
 80030e6:	e013      	b.n	8003110 <Read_Encoder+0x3f4>
		else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7d1b      	ldrb	r3, [r3, #20]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f083 0301 	eor.w	r3, r3, #1
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <Read_Encoder+0x3ee>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7d5b      	ldrb	r3, [r3, #21]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <Read_Encoder+0x3ee>
			FingerStruct->current_Encoder_State=Alow_Bhigh;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	725a      	strb	r2, [r3, #9]
 8003108:	e002      	b.n	8003110 <Read_Encoder+0x3f4>
		else
			FingerStruct->current_Encoder_State=Alow_Blow;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	725a      	strb	r2, [r3, #9]
		if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7a5a      	ldrb	r2, [r3, #9]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7a9b      	ldrb	r3, [r3, #10]
 8003118:	429a      	cmp	r2, r3
 800311a:	d019      	beq.n	8003150 <Read_Encoder+0x434>
		{
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	7a92      	ldrb	r2, [r2, #10]
 8003124:	4611      	mov	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	7a52      	ldrb	r2, [r2, #9]
 800312a:	1a8a      	subs	r2, r1, r2
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]
			FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7a5a      	ldrb	r2, [r3, #9]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	729a      	strb	r2, [r3, #10]
		}
		break;
 800313a:	e009      	b.n	8003150 <Read_Encoder+0x434>
	default:
		break;
 800313c:	bf00      	nop
 800313e:	e008      	b.n	8003152 <Read_Encoder+0x436>
		break;
 8003140:	bf00      	nop
 8003142:	e006      	b.n	8003152 <Read_Encoder+0x436>
		break;
 8003144:	bf00      	nop
 8003146:	e004      	b.n	8003152 <Read_Encoder+0x436>
		break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <Read_Encoder+0x436>
		break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <Read_Encoder+0x436>
		break;
 8003150:	bf00      	nop
	}
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40010800 	.word	0x40010800
 8003160:	40011000 	.word	0x40011000

08003164 <SetMotor>:
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct  FingerStruct) {
 8003164:	b084      	sub	sp, #16
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	4604      	mov	r4, r0
 800316e:	f107 001c 	add.w	r0, r7, #28
 8003172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003176:	4623      	mov	r3, r4
 8003178:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	2b04      	cmp	r3, #4
 800317e:	f200 8132 	bhi.w	80033e6 <SetMotor+0x282>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <SetMotor+0x24>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	0800319d 	.word	0x0800319d
 800318c:	0800320b 	.word	0x0800320b
 8003190:	08003285 	.word	0x08003285
 8003194:	080032ff 	.word	0x080032ff
 8003198:	0800336d 	.word	0x0800336d
	case Thumb :
		if ( FingerStruct.Direction== Open) {
 800319c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10f      	bne.n	80031c4 <SetMotor+0x60>
			htim2.Instance->CCR1 = FingerStruct.speed;
 80031a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <SetMotor+0x294>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2108      	movs	r1, #8
 80031b2:	4892      	ldr	r0, [pc, #584]	; (80033fc <SetMotor+0x298>)
 80031b4:	f001 fa0b 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 80031b8:	2201      	movs	r2, #1
 80031ba:	2104      	movs	r1, #4
 80031bc:	4890      	ldr	r0, [pc, #576]	; (8003400 <SetMotor+0x29c>)
 80031be:	f001 fa06 	bl	80045ce <HAL_GPIO_WritePin>
		} else {
			htim2.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
		}
		break;
 80031c2:	e111      	b.n	80033e8 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 80031c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d10f      	bne.n	80031ec <SetMotor+0x88>
			htim2.Instance->CCR1 = FingerStruct.speed;
 80031cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80031d0:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <SetMotor+0x294>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 80031d6:	2201      	movs	r2, #1
 80031d8:	2108      	movs	r1, #8
 80031da:	4888      	ldr	r0, [pc, #544]	; (80033fc <SetMotor+0x298>)
 80031dc:	f001 f9f7 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2104      	movs	r1, #4
 80031e4:	4886      	ldr	r0, [pc, #536]	; (8003400 <SetMotor+0x29c>)
 80031e6:	f001 f9f2 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 80031ea:	e0fd      	b.n	80033e8 <SetMotor+0x284>
			htim2.Instance->CCR1 = 0;
 80031ec:	4b82      	ldr	r3, [pc, #520]	; (80033f8 <SetMotor+0x294>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 80031f4:	2201      	movs	r2, #1
 80031f6:	2108      	movs	r1, #8
 80031f8:	4880      	ldr	r0, [pc, #512]	; (80033fc <SetMotor+0x298>)
 80031fa:	f001 f9e8 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 80031fe:	2201      	movs	r2, #1
 8003200:	2104      	movs	r1, #4
 8003202:	487f      	ldr	r0, [pc, #508]	; (8003400 <SetMotor+0x29c>)
 8003204:	f001 f9e3 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 8003208:	e0ee      	b.n	80033e8 <SetMotor+0x284>
	case Index :
		if ( FingerStruct.Direction== Open) {
 800320a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800320e:	2b01      	cmp	r3, #1
 8003210:	d111      	bne.n	8003236 <SetMotor+0xd2>
			htim1.Instance->CCR4 = FingerStruct.speed;
 8003212:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003216:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <SetMotor+0x2a0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003222:	4876      	ldr	r0, [pc, #472]	; (80033fc <SetMotor+0x298>)
 8003224:	f001 f9d3 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8003228:	2201      	movs	r2, #1
 800322a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800322e:	4873      	ldr	r0, [pc, #460]	; (80033fc <SetMotor+0x298>)
 8003230:	f001 f9cd 	bl	80045ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR4 = 0;
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
		}
		break;
 8003234:	e0d8      	b.n	80033e8 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8003236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800323a:	2b02      	cmp	r3, #2
 800323c:	d111      	bne.n	8003262 <SetMotor+0xfe>
			htim1.Instance->CCR4 = FingerStruct.speed;
 800323e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <SetMotor+0x2a0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8003248:	2201      	movs	r2, #1
 800324a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324e:	486b      	ldr	r0, [pc, #428]	; (80033fc <SetMotor+0x298>)
 8003250:	f001 f9bd 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800325a:	4868      	ldr	r0, [pc, #416]	; (80033fc <SetMotor+0x298>)
 800325c:	f001 f9b7 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 8003260:	e0c2      	b.n	80033e8 <SetMotor+0x284>
			htim1.Instance->CCR4 = 0;
 8003262:	4b68      	ldr	r3, [pc, #416]	; (8003404 <SetMotor+0x2a0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 800326a:	2201      	movs	r2, #1
 800326c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003270:	4862      	ldr	r0, [pc, #392]	; (80033fc <SetMotor+0x298>)
 8003272:	f001 f9ac 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8003276:	2201      	movs	r2, #1
 8003278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800327c:	485f      	ldr	r0, [pc, #380]	; (80033fc <SetMotor+0x298>)
 800327e:	f001 f9a6 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 8003282:	e0b1      	b.n	80033e8 <SetMotor+0x284>
	case Middle :
		if ( FingerStruct.Direction== Open) {
 8003284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	d111      	bne.n	80032b0 <SetMotor+0x14c>
			htim1.Instance->CCR3 = FingerStruct.speed;
 800328c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003290:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <SetMotor+0x2a0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329c:	4857      	ldr	r0, [pc, #348]	; (80033fc <SetMotor+0x298>)
 800329e:	f001 f996 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 80032a2:	2201      	movs	r2, #1
 80032a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a8:	4854      	ldr	r0, [pc, #336]	; (80033fc <SetMotor+0x298>)
 80032aa:	f001 f990 	bl	80045ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR3 = 0;
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
		}
		break;
 80032ae:	e09b      	b.n	80033e8 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 80032b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d111      	bne.n	80032dc <SetMotor+0x178>
			htim1.Instance->CCR3 = FingerStruct.speed;
 80032b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80032bc:	4b51      	ldr	r3, [pc, #324]	; (8003404 <SetMotor+0x2a0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 80032c2:	2201      	movs	r2, #1
 80032c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c8:	484c      	ldr	r0, [pc, #304]	; (80033fc <SetMotor+0x298>)
 80032ca:	f001 f980 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032d4:	4849      	ldr	r0, [pc, #292]	; (80033fc <SetMotor+0x298>)
 80032d6:	f001 f97a 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 80032da:	e085      	b.n	80033e8 <SetMotor+0x284>
			htim1.Instance->CCR3 = 0;
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <SetMotor+0x2a0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 80032e4:	2201      	movs	r2, #1
 80032e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ea:	4844      	ldr	r0, [pc, #272]	; (80033fc <SetMotor+0x298>)
 80032ec:	f001 f96f 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f6:	4841      	ldr	r0, [pc, #260]	; (80033fc <SetMotor+0x298>)
 80032f8:	f001 f969 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 80032fc:	e074      	b.n	80033e8 <SetMotor+0x284>
	case Ring :
		if ( FingerStruct.Direction== Open) {
 80032fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10f      	bne.n	8003326 <SetMotor+0x1c2>
			htim1.Instance->CCR2 = FingerStruct.speed;
 8003306:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <SetMotor+0x2a0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	483c      	ldr	r0, [pc, #240]	; (8003408 <SetMotor+0x2a4>)
 8003316:	f001 f95a 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 800331a:	2201      	movs	r2, #1
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	483a      	ldr	r0, [pc, #232]	; (8003408 <SetMotor+0x2a4>)
 8003320:	f001 f955 	bl	80045ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR2 = 0;
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
		}
		break;
 8003324:	e060      	b.n	80033e8 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8003326:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800332a:	2b02      	cmp	r3, #2
 800332c:	d10f      	bne.n	800334e <SetMotor+0x1ea>
			htim1.Instance->CCR2 = FingerStruct.speed;
 800332e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <SetMotor+0x2a0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8003338:	2201      	movs	r2, #1
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	4832      	ldr	r0, [pc, #200]	; (8003408 <SetMotor+0x2a4>)
 800333e:	f001 f946 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	4830      	ldr	r0, [pc, #192]	; (8003408 <SetMotor+0x2a4>)
 8003348:	f001 f941 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 800334c:	e04c      	b.n	80033e8 <SetMotor+0x284>
			htim1.Instance->CCR2 = 0;
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <SetMotor+0x2a0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8003356:	2201      	movs	r2, #1
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	482b      	ldr	r0, [pc, #172]	; (8003408 <SetMotor+0x2a4>)
 800335c:	f001 f937 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 8003360:	2201      	movs	r2, #1
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	4828      	ldr	r0, [pc, #160]	; (8003408 <SetMotor+0x2a4>)
 8003366:	f001 f932 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 800336a:	e03d      	b.n	80033e8 <SetMotor+0x284>
	case Pinky :
		if ( FingerStruct.Direction== Open) {
 800336c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	d111      	bne.n	8003398 <SetMotor+0x234>
			htim1.Instance->CCR1 = FingerStruct.speed;
 8003374:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <SetMotor+0x2a0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003384:	4820      	ldr	r0, [pc, #128]	; (8003408 <SetMotor+0x2a4>)
 8003386:	f001 f922 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 800338a:	2201      	movs	r2, #1
 800338c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003390:	481d      	ldr	r0, [pc, #116]	; (8003408 <SetMotor+0x2a4>)
 8003392:	f001 f91c 	bl	80045ce <HAL_GPIO_WritePin>
		} else {
			htim1.Instance->CCR1 = 0;
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
		}
		break;
 8003396:	e027      	b.n	80033e8 <SetMotor+0x284>
		} else if (FingerStruct.Direction == Close) {
 8003398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800339c:	2b02      	cmp	r3, #2
 800339e:	d111      	bne.n	80033c4 <SetMotor+0x260>
			htim1.Instance->CCR1 = FingerStruct.speed;
 80033a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80033a4:	4b17      	ldr	r3, [pc, #92]	; (8003404 <SetMotor+0x2a0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 80033aa:	2201      	movs	r2, #1
 80033ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b0:	4815      	ldr	r0, [pc, #84]	; (8003408 <SetMotor+0x2a4>)
 80033b2:	f001 f90c 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033bc:	4812      	ldr	r0, [pc, #72]	; (8003408 <SetMotor+0x2a4>)
 80033be:	f001 f906 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 80033c2:	e011      	b.n	80033e8 <SetMotor+0x284>
			htim1.Instance->CCR1 = 0;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <SetMotor+0x2a0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d2:	480d      	ldr	r0, [pc, #52]	; (8003408 <SetMotor+0x2a4>)
 80033d4:	f001 f8fb 	bl	80045ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80033d8:	2201      	movs	r2, #1
 80033da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033de:	480a      	ldr	r0, [pc, #40]	; (8003408 <SetMotor+0x2a4>)
 80033e0:	f001 f8f5 	bl	80045ce <HAL_GPIO_WritePin>
		break;
 80033e4:	e000      	b.n	80033e8 <SetMotor+0x284>

	default:

		break;
 80033e6:	bf00      	nop
	}
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033f2:	b004      	add	sp, #16
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20001964 	.word	0x20001964
 80033fc:	40010c00 	.word	0x40010c00
 8003400:	40011400 	.word	0x40011400
 8003404:	20001924 	.word	0x20001924
 8003408:	40011000 	.word	0x40011000

0800340c <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	//start read data from ADC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003410:	2100      	movs	r1, #0
 8003412:	4825      	ldr	r0, [pc, #148]	; (80034a8 <init_motor_controller+0x9c>)
 8003414:	f001 ff36 	bl	8005284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003418:	2104      	movs	r1, #4
 800341a:	4823      	ldr	r0, [pc, #140]	; (80034a8 <init_motor_controller+0x9c>)
 800341c:	f001 ff32 	bl	8005284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003420:	2108      	movs	r1, #8
 8003422:	4821      	ldr	r0, [pc, #132]	; (80034a8 <init_motor_controller+0x9c>)
 8003424:	f001 ff2e 	bl	8005284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003428:	210c      	movs	r1, #12
 800342a:	481f      	ldr	r0, [pc, #124]	; (80034a8 <init_motor_controller+0x9c>)
 800342c:	f001 ff2a 	bl	8005284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003430:	2100      	movs	r1, #0
 8003432:	481e      	ldr	r0, [pc, #120]	; (80034ac <init_motor_controller+0xa0>)
 8003434:	f001 ff26 	bl	8005284 <HAL_TIM_PWM_Start>
	HAL_ADC_MspInit(&hadc1);
 8003438:	481d      	ldr	r0, [pc, #116]	; (80034b0 <init_motor_controller+0xa4>)
 800343a:	f7fe faf3 	bl	8001a24 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 800343e:	2201      	movs	r2, #1
 8003440:	491c      	ldr	r1, [pc, #112]	; (80034b4 <init_motor_controller+0xa8>)
 8003442:	481d      	ldr	r0, [pc, #116]	; (80034b8 <init_motor_controller+0xac>)
 8003444:	f002 fc44 	bl	8005cd0 <HAL_UART_Receive_IT>
	// Configure settings
	controller.AntiWindup = ENABLED;
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <init_motor_controller+0xb0>)
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <init_motor_controller+0xb0>)
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <init_motor_controller+0xb0>)
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <init_motor_controller+0xb4>)
 800345c:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <init_motor_controller+0xb0>)
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <init_motor_controller+0xb8>)
 8003462:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <init_motor_controller+0xb0>)
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <init_motor_controller+0xbc>)
 8003468:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <init_motor_controller+0xb0>)
 800346c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003470:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <init_motor_controller+0xb0>)
 8003474:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003478:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 800347a:	4810      	ldr	r0, [pc, #64]	; (80034bc <init_motor_controller+0xb0>)
 800347c:	f7ff fc30 	bl	8002ce0 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <init_motor_controller+0xb0>)
 8003482:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003486:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <init_motor_controller+0xb0>)
 800348a:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <init_motor_controller+0xb4>)
 800348c:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <init_motor_controller+0xb0>)
 8003490:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003494:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <init_motor_controller+0xb0>)
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <init_motor_controller+0xbc>)
 800349a:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <init_motor_controller+0xb0>)
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20001924 	.word	0x20001924
 80034ac:	20001964 	.word	0x20001964
 80034b0:	20000130 	.word	0x20000130
 80034b4:	2000012e 	.word	0x2000012e
 80034b8:	200019a4 	.word	0x200019a4
 80034bc:	20001ab4 	.word	0x20001ab4
 80034c0:	42480000 	.word	0x42480000
 80034c4:	c2480000 	.word	0xc2480000
 80034c8:	40400000 	.word	0x40400000

080034cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034ce:	e003      	b.n	80034d8 <LoopCopyDataInit>

080034d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034d6:	3104      	adds	r1, #4

080034d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034d8:	480a      	ldr	r0, [pc, #40]	; (8003504 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034e0:	d3f6      	bcc.n	80034d0 <CopyDataInit>
  ldr r2, =_sbss
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034e4:	e002      	b.n	80034ec <LoopFillZerobss>

080034e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80034e8:	f842 3b04 	str.w	r3, [r2], #4

080034ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80034ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80034f0:	d3f9      	bcc.n	80034e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034f2:	f7ff f935 	bl	8002760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f6:	f005 fcd3 	bl	8008ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034fa:	f7fe ffbb 	bl	8002474 <main>
  bx lr
 80034fe:	4770      	bx	lr
  ldr r3, =_sidata
 8003500:	08009fa0 	.word	0x08009fa0
  ldr r0, =_sdata
 8003504:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003508:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800350c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003510:	20004184 	.word	0x20004184

08003514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC1_2_IRQHandler>
	...

08003518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_Init+0x28>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_Init+0x28>)
 8003522:	f043 0310 	orr.w	r3, r3, #16
 8003526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003528:	2003      	movs	r0, #3
 800352a:	f000 fe09 	bl	8004140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800352e:	200f      	movs	r0, #15
 8003530:	f7ff f864 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003534:	f7ff f82a 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_IncTick+0x1c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_IncTick+0x20>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_IncTick+0x20>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000010 	.word	0x20000010
 8003564:	20001af0 	.word	0x20001af0

08003568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return uwTick;
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <HAL_GetTick+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20001af0 	.word	0x20001af0

0800357c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0be      	b.n	800371c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fe fa32 	bl	8001a24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fbdd 	bl	8003d80 <ADC_ConversionStop_Disable>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 8099 	bne.w	800370a <HAL_ADC_Init+0x18e>
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8095 	bne.w	800370a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	f043 0202 	orr.w	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7b1b      	ldrb	r3, [r3, #12]
 8003602:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003604:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003614:	d003      	beq.n	800361e <HAL_ADC_Init+0xa2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_ADC_Init+0xa8>
 800361e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003622:	e000      	b.n	8003626 <HAL_ADC_Init+0xaa>
 8003624:	2300      	movs	r3, #0
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7d1b      	ldrb	r3, [r3, #20]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d119      	bne.n	8003668 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7b1b      	ldrb	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	3b01      	subs	r3, #1
 8003642:	035a      	lsls	r2, r3, #13
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e00b      	b.n	8003668 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_ADC_Init+0x1a8>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	430b      	orrs	r3, r1
 800368e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003698:	d003      	beq.n	80036a2 <HAL_ADC_Init+0x126>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d104      	bne.n	80036ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	051b      	lsls	r3, r3, #20
 80036aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	430a      	orrs	r2, r1
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_ADC_Init+0x1ac>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10b      	bne.n	80036e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036e6:	e018      	b.n	800371a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f023 0312 	bic.w	r3, r3, #18
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003708:	e007      	b.n	800371a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	ffe1f7fd 	.word	0xffe1f7fd
 8003728:	ff1f0efe 	.word	0xff1f0efe

0800372c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_ADC_Start+0x1a>
 8003742:	2302      	movs	r3, #2
 8003744:	e098      	b.n	8003878 <HAL_ADC_Start+0x14c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fac4 	bl	8003cdc <ADC_Enable>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8087 	bne.w	800386e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a41      	ldr	r2, [pc, #260]	; (8003880 <HAL_ADC_Start+0x154>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d105      	bne.n	800378a <HAL_ADC_Start+0x5e>
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_ADC_Start+0x158>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d115      	bne.n	80037b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d026      	beq.n	80037f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037b4:	e01d      	b.n	80037f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <HAL_ADC_Start+0x158>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_ADC_Start+0xaa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <HAL_ADC_Start+0x154>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10d      	bne.n	80037f2 <HAL_ADC_Start+0xc6>
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_ADC_Start+0x158>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f023 0206 	bic.w	r2, r3, #6
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
 800380a:	e002      	b.n	8003812 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0202 	mvn.w	r2, #2
 8003822:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800382e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003832:	d113      	bne.n	800385c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003838:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_ADC_Start+0x154>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d105      	bne.n	800384a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_ADC_Start+0x158>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	e00c      	b.n	8003876 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e003      	b.n	8003876 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40012800 	.word	0x40012800
 8003884:	40012400 	.word	0x40012400

08003888 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Stop+0x1a>
 800389e:	2302      	movs	r3, #2
 80038a0:	e01a      	b.n	80038d8 <HAL_ADC_Stop+0x50>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa68 	bl	8003d80 <ADC_ConversionStop_Disable>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80038f6:	f7ff fe37 	bl	8003568 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0c8      	b.n	8003ab4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d12a      	bne.n	8003986 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	d123      	bne.n	8003986 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800393e:	e01a      	b.n	8003976 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d016      	beq.n	8003976 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_ADC_PollForConversion+0x7e>
 800394e:	f7ff fe0b 	bl	8003568 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20b      	bcs.n	8003976 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f043 0204 	orr.w	r2, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e09e      	b.n	8003ab4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0dd      	beq.n	8003940 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003984:	e06c      	b.n	8003a60 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_ADC_PollForConversion+0x1dc>)
 8003988:	681c      	ldr	r4, [r3, #0]
 800398a:	2002      	movs	r0, #2
 800398c:	f001 fb38 	bl	8005000 <HAL_RCCEx_GetPeriphCLKFreq>
 8003990:	4603      	mov	r3, r0
 8003992:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6919      	ldr	r1, [r3, #16]
 800399c:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_ADC_PollForConversion+0x1e0>)
 800399e:	400b      	ands	r3, r1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d118      	bne.n	80039d6 <HAL_ADC_PollForConversion+0xf6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68d9      	ldr	r1, [r3, #12]
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_ADC_PollForConversion+0x1e4>)
 80039ac:	400b      	ands	r3, r1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d111      	bne.n	80039d6 <HAL_ADC_PollForConversion+0xf6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6919      	ldr	r1, [r3, #16]
 80039b8:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_ADC_PollForConversion+0x1e8>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <HAL_ADC_PollForConversion+0xf2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_ADC_PollForConversion+0x1ec>)
 80039c8:	400b      	ands	r3, r1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_PollForConversion+0xf2>
 80039ce:	2314      	movs	r3, #20
 80039d0:	e020      	b.n	8003a14 <HAL_ADC_PollForConversion+0x134>
 80039d2:	2329      	movs	r3, #41	; 0x29
 80039d4:	e01e      	b.n	8003a14 <HAL_ADC_PollForConversion+0x134>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6919      	ldr	r1, [r3, #16]
 80039dc:	4b3a      	ldr	r3, [pc, #232]	; (8003ac8 <HAL_ADC_PollForConversion+0x1e8>)
 80039de:	400b      	ands	r3, r1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x112>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_ADC_PollForConversion+0x1ec>)
 80039ec:	400b      	ands	r3, r1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <HAL_ADC_PollForConversion+0x12e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6919      	ldr	r1, [r3, #16]
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_ADC_PollForConversion+0x1f0>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <HAL_ADC_PollForConversion+0x132>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68d9      	ldr	r1, [r3, #12]
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_ADC_PollForConversion+0x1f0>)
 8003a08:	400b      	ands	r3, r1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_PollForConversion+0x132>
 8003a0e:	2354      	movs	r3, #84	; 0x54
 8003a10:	e000      	b.n	8003a14 <HAL_ADC_PollForConversion+0x134>
 8003a12:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003a1a:	e01d      	b.n	8003a58 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d016      	beq.n	8003a52 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_ADC_PollForConversion+0x15a>
 8003a2a:	f7ff fd9d 	bl	8003568 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d20b      	bcs.n	8003a52 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e030      	b.n	8003ab4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3301      	adds	r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d8dd      	bhi.n	8003a1c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0212 	mvn.w	r2, #18
 8003a68:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003a80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a84:	d115      	bne.n	8003ab2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d111      	bne.n	8003ab2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	20000008 	.word	0x20000008
 8003ac0:	24924924 	.word	0x24924924
 8003ac4:	00924924 	.word	0x00924924
 8003ac8:	12492492 	.word	0x12492492
 8003acc:	00492492 	.word	0x00492492
 8003ad0:	00249249 	.word	0x00249249

08003ad4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x20>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0dc      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x1da>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d81c      	bhi.n	8003b56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b05      	subs	r3, #5
 8003b2e:	221f      	movs	r2, #31
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	4019      	ands	r1, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	3b05      	subs	r3, #5
 8003b48:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34
 8003b54:	e03c      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d81c      	bhi.n	8003b98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b23      	subs	r3, #35	; 0x23
 8003b70:	221f      	movs	r2, #31
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	4019      	ands	r1, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	3b23      	subs	r3, #35	; 0x23
 8003b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
 8003b96:	e01b      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3b41      	subs	r3, #65	; 0x41
 8003baa:	221f      	movs	r2, #31
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	4019      	ands	r1, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b41      	subs	r3, #65	; 0x41
 8003bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d91c      	bls.n	8003c12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68d9      	ldr	r1, [r3, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	3b1e      	subs	r3, #30
 8003bea:	2207      	movs	r2, #7
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	4019      	ands	r1, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6898      	ldr	r0, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	3b1e      	subs	r3, #30
 8003c04:	fa00 f203 	lsl.w	r2, r0, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	e019      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6919      	ldr	r1, [r3, #16]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	2207      	movs	r2, #7
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	4019      	ands	r1, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6898      	ldr	r0, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d003      	beq.n	8003c56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c52:	2b11      	cmp	r3, #17
 8003c54:	d132      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d125      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d126      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c7c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d11a      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0c9a      	lsrs	r2, r3, #18
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c9c:	e002      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f9      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x1b2>
 8003caa:	e007      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40012400 	.word	0x40012400
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	431bde83 	.word	0x431bde83

08003cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d039      	beq.n	8003d6e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <ADC_Enable+0x9c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <ADC_Enable+0xa0>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	0c9b      	lsrs	r3, r3, #18
 8003d16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d18:	e002      	b.n	8003d20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f9      	bne.n	8003d1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d26:	f7ff fc1f 	bl	8003568 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d2c:	e018      	b.n	8003d60 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d2e:	f7ff fc1b 	bl	8003568 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d911      	bls.n	8003d60 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f043 0210 	orr.w	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e007      	b.n	8003d70 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d1df      	bne.n	8003d2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000008 	.word	0x20000008
 8003d7c:	431bde83 	.word	0x431bde83

08003d80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d127      	bne.n	8003dea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003daa:	f7ff fbdd 	bl	8003568 <HAL_GetTick>
 8003dae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003db0:	e014      	b.n	8003ddc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003db2:	f7ff fbd9 	bl	8003568 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d90d      	bls.n	8003ddc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e007      	b.n	8003dec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d0e3      	beq.n	8003db2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0ed      	b.n	8003fe2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe f906 	bl	8002024 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0202 	bic.w	r2, r2, #2
 8003e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e28:	f7ff fb9e 	bl	8003568 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e2e:	e012      	b.n	8003e56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e30:	f7ff fb9a 	bl	8003568 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b0a      	cmp	r3, #10
 8003e3c:	d90b      	bls.n	8003e56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0c5      	b.n	8003fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e74:	f7ff fb78 	bl	8003568 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e7a:	e012      	b.n	8003ea2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e7c:	f7ff fb74 	bl	8003568 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b0a      	cmp	r3, #10
 8003e88:	d90b      	bls.n	8003ea2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2205      	movs	r2, #5
 8003e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e09f      	b.n	8003fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0e5      	beq.n	8003e7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	7e1b      	ldrb	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d108      	bne.n	8003eca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e007      	b.n	8003eda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7e5b      	ldrb	r3, [r3, #25]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e007      	b.n	8003f04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7e9b      	ldrb	r3, [r3, #26]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d108      	bne.n	8003f1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e007      	b.n	8003f2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0220 	bic.w	r2, r2, #32
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7edb      	ldrb	r3, [r3, #27]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d108      	bne.n	8003f48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0210 	bic.w	r2, r2, #16
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e007      	b.n	8003f58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0210 	orr.w	r2, r2, #16
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7f1b      	ldrb	r3, [r3, #28]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d108      	bne.n	8003f72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e007      	b.n	8003f82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0208 	bic.w	r2, r2, #8
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7f5b      	ldrb	r3, [r3, #29]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d108      	bne.n	8003f9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e007      	b.n	8003fac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	ea42 0103 	orr.w	r1, r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <__NVIC_SetPriorityGrouping+0x44>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004008:	4013      	ands	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <__NVIC_SetPriorityGrouping+0x44>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	60d3      	str	r3, [r2, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <__NVIC_GetPriorityGrouping+0x18>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	f003 0307 	and.w	r3, r3, #7
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	2b00      	cmp	r3, #0
 8004060:	db0b      	blt.n	800407a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	4906      	ldr	r1, [pc, #24]	; (8004084 <__NVIC_EnableIRQ+0x34>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2001      	movs	r0, #1
 8004072:	fa00 f202 	lsl.w	r2, r0, r2
 8004076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff4f 	bl	8003fec <__NVIC_SetPriorityGrouping>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004168:	f7ff ff64 	bl	8004034 <__NVIC_GetPriorityGrouping>
 800416c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7ff ffb2 	bl	80040dc <NVIC_EncodePriority>
 8004178:	4602      	mov	r2, r0
 800417a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff81 	bl	8004088 <__NVIC_SetPriority>
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff57 	bl	8004050 <__NVIC_EnableIRQ>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d005      	beq.n	80041ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2204      	movs	r2, #4
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e051      	b.n	8004272 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 020e 	bic.w	r2, r2, #14
 80041dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_DMA_Abort_IT+0xd0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d029      	beq.n	800424c <HAL_DMA_Abort_IT+0xa0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_DMA_Abort_IT+0xd4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_DMA_Abort_IT+0x9c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_DMA_Abort_IT+0xd8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01a      	beq.n	8004242 <HAL_DMA_Abort_IT+0x96>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_DMA_Abort_IT+0xdc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d012      	beq.n	800423c <HAL_DMA_Abort_IT+0x90>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_DMA_Abort_IT+0xe0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00a      	beq.n	8004236 <HAL_DMA_Abort_IT+0x8a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <HAL_DMA_Abort_IT+0xe4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d102      	bne.n	8004230 <HAL_DMA_Abort_IT+0x84>
 800422a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800422e:	e00e      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 8004230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004234:	e00b      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 8004236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800423a:	e008      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 800423c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004240:	e005      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 8004242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004246:	e002      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 8004248:	2310      	movs	r3, #16
 800424a:	e000      	b.n	800424e <HAL_DMA_Abort_IT+0xa2>
 800424c:	2301      	movs	r3, #1
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_DMA_Abort_IT+0xe8>)
 8004250:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
    } 
  }
  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40020008 	.word	0x40020008
 8004280:	4002001c 	.word	0x4002001c
 8004284:	40020030 	.word	0x40020030
 8004288:	40020044 	.word	0x40020044
 800428c:	40020058 	.word	0x40020058
 8004290:	4002006c 	.word	0x4002006c
 8004294:	40020000 	.word	0x40020000

08004298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004298:	b480      	push	{r7}
 800429a:	b08b      	sub	sp, #44	; 0x2c
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042aa:	e169      	b.n	8004580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042ac:	2201      	movs	r2, #1
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	f040 8158 	bne.w	800457a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a9a      	ldr	r2, [pc, #616]	; (8004538 <HAL_GPIO_Init+0x2a0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d05e      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
 80042d4:	4a98      	ldr	r2, [pc, #608]	; (8004538 <HAL_GPIO_Init+0x2a0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d875      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 80042da:	4a98      	ldr	r2, [pc, #608]	; (800453c <HAL_GPIO_Init+0x2a4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d058      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
 80042e0:	4a96      	ldr	r2, [pc, #600]	; (800453c <HAL_GPIO_Init+0x2a4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d86f      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 80042e6:	4a96      	ldr	r2, [pc, #600]	; (8004540 <HAL_GPIO_Init+0x2a8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d052      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
 80042ec:	4a94      	ldr	r2, [pc, #592]	; (8004540 <HAL_GPIO_Init+0x2a8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d869      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 80042f2:	4a94      	ldr	r2, [pc, #592]	; (8004544 <HAL_GPIO_Init+0x2ac>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04c      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
 80042f8:	4a92      	ldr	r2, [pc, #584]	; (8004544 <HAL_GPIO_Init+0x2ac>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d863      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 80042fe:	4a92      	ldr	r2, [pc, #584]	; (8004548 <HAL_GPIO_Init+0x2b0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d046      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
 8004304:	4a90      	ldr	r2, [pc, #576]	; (8004548 <HAL_GPIO_Init+0x2b0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d85d      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 800430a:	2b12      	cmp	r3, #18
 800430c:	d82a      	bhi.n	8004364 <HAL_GPIO_Init+0xcc>
 800430e:	2b12      	cmp	r3, #18
 8004310:	d859      	bhi.n	80043c6 <HAL_GPIO_Init+0x12e>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_GPIO_Init+0x80>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004393 	.word	0x08004393
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800437f 	.word	0x0800437f
 8004324:	080043c1 	.word	0x080043c1
 8004328:	080043c7 	.word	0x080043c7
 800432c:	080043c7 	.word	0x080043c7
 8004330:	080043c7 	.word	0x080043c7
 8004334:	080043c7 	.word	0x080043c7
 8004338:	080043c7 	.word	0x080043c7
 800433c:	080043c7 	.word	0x080043c7
 8004340:	080043c7 	.word	0x080043c7
 8004344:	080043c7 	.word	0x080043c7
 8004348:	080043c7 	.word	0x080043c7
 800434c:	080043c7 	.word	0x080043c7
 8004350:	080043c7 	.word	0x080043c7
 8004354:	080043c7 	.word	0x080043c7
 8004358:	080043c7 	.word	0x080043c7
 800435c:	08004375 	.word	0x08004375
 8004360:	08004389 	.word	0x08004389
 8004364:	4a79      	ldr	r2, [pc, #484]	; (800454c <HAL_GPIO_Init+0x2b4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800436a:	e02c      	b.n	80043c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	623b      	str	r3, [r7, #32]
          break;
 8004372:	e029      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	623b      	str	r3, [r7, #32]
          break;
 800437c:	e024      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	3308      	adds	r3, #8
 8004384:	623b      	str	r3, [r7, #32]
          break;
 8004386:	e01f      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	330c      	adds	r3, #12
 800438e:	623b      	str	r3, [r7, #32]
          break;
 8004390:	e01a      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800439a:	2304      	movs	r3, #4
 800439c:	623b      	str	r3, [r7, #32]
          break;
 800439e:	e013      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043a8:	2308      	movs	r3, #8
 80043aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	611a      	str	r2, [r3, #16]
          break;
 80043b2:	e009      	b.n	80043c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043b4:	2308      	movs	r3, #8
 80043b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	615a      	str	r2, [r3, #20]
          break;
 80043be:	e003      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043c0:	2300      	movs	r3, #0
 80043c2:	623b      	str	r3, [r7, #32]
          break;
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_Init+0x130>
          break;
 80043c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d801      	bhi.n	80043d2 <HAL_GPIO_Init+0x13a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	e001      	b.n	80043d6 <HAL_GPIO_Init+0x13e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2bff      	cmp	r3, #255	; 0xff
 80043dc:	d802      	bhi.n	80043e4 <HAL_GPIO_Init+0x14c>
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	e002      	b.n	80043ea <HAL_GPIO_Init+0x152>
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	3b08      	subs	r3, #8
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	210f      	movs	r1, #15
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	401a      	ands	r2, r3
 80043fc:	6a39      	ldr	r1, [r7, #32]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	431a      	orrs	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80b1 	beq.w	800457a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004418:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <HAL_GPIO_Init+0x2b8>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4a4c      	ldr	r2, [pc, #304]	; (8004550 <HAL_GPIO_Init+0x2b8>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6193      	str	r3, [r2, #24]
 8004424:	4b4a      	ldr	r3, [pc, #296]	; (8004550 <HAL_GPIO_Init+0x2b8>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004430:	4a48      	ldr	r2, [pc, #288]	; (8004554 <HAL_GPIO_Init+0x2bc>)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	3302      	adds	r3, #2
 8004438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	220f      	movs	r2, #15
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <HAL_GPIO_Init+0x2c0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_GPIO_Init+0x1ec>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3f      	ldr	r2, [pc, #252]	; (800455c <HAL_GPIO_Init+0x2c4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00d      	beq.n	8004480 <HAL_GPIO_Init+0x1e8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3e      	ldr	r2, [pc, #248]	; (8004560 <HAL_GPIO_Init+0x2c8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_Init+0x1e4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <HAL_GPIO_Init+0x2cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_GPIO_Init+0x1e0>
 8004474:	2303      	movs	r3, #3
 8004476:	e006      	b.n	8004486 <HAL_GPIO_Init+0x1ee>
 8004478:	2304      	movs	r3, #4
 800447a:	e004      	b.n	8004486 <HAL_GPIO_Init+0x1ee>
 800447c:	2302      	movs	r3, #2
 800447e:	e002      	b.n	8004486 <HAL_GPIO_Init+0x1ee>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_GPIO_Init+0x1ee>
 8004484:	2300      	movs	r3, #0
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	f002 0203 	and.w	r2, r2, #3
 800448c:	0092      	lsls	r2, r2, #2
 800448e:	4093      	lsls	r3, r2
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004496:	492f      	ldr	r1, [pc, #188]	; (8004554 <HAL_GPIO_Init+0x2bc>)
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	492c      	ldr	r1, [pc, #176]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]
 80044bc:	e006      	b.n	80044cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	4928      	ldr	r1, [pc, #160]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4922      	ldr	r1, [pc, #136]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	491e      	ldr	r1, [pc, #120]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4918      	ldr	r1, [pc, #96]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	43db      	mvns	r3, r3
 8004516:	4914      	ldr	r1, [pc, #80]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 8004518:	4013      	ands	r3, r2
 800451a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d021      	beq.n	800456c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_GPIO_Init+0x2d0>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
 8004534:	e021      	b.n	800457a <HAL_GPIO_Init+0x2e2>
 8004536:	bf00      	nop
 8004538:	10320000 	.word	0x10320000
 800453c:	10310000 	.word	0x10310000
 8004540:	10220000 	.word	0x10220000
 8004544:	10210000 	.word	0x10210000
 8004548:	10120000 	.word	0x10120000
 800454c:	10110000 	.word	0x10110000
 8004550:	40021000 	.word	0x40021000
 8004554:	40010000 	.word	0x40010000
 8004558:	40010800 	.word	0x40010800
 800455c:	40010c00 	.word	0x40010c00
 8004560:	40011000 	.word	0x40011000
 8004564:	40011400 	.word	0x40011400
 8004568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_GPIO_Init+0x304>)
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	43db      	mvns	r3, r3
 8004574:	4909      	ldr	r1, [pc, #36]	; (800459c <HAL_GPIO_Init+0x304>)
 8004576:	4013      	ands	r3, r2
 8004578:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	3301      	adds	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f ae8e 	bne.w	80042ac <HAL_GPIO_Init+0x14>
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	372c      	adds	r7, #44	; 0x2c
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e001      	b.n	80045c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	807b      	strh	r3, [r7, #2]
 80045da:	4613      	mov	r3, r2
 80045dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045de:	787b      	ldrb	r3, [r7, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045e4:	887a      	ldrh	r2, [r7, #2]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045ea:	e003      	b.n	80045f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	041a      	lsls	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	611a      	str	r2, [r3, #16]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e272      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8087 	beq.w	800472e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004620:	4b92      	ldr	r3, [pc, #584]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b04      	cmp	r3, #4
 800462a:	d00c      	beq.n	8004646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800462c:	4b8f      	ldr	r3, [pc, #572]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d112      	bne.n	800465e <HAL_RCC_OscConfig+0x5e>
 8004638:	4b8c      	ldr	r3, [pc, #560]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d10b      	bne.n	800465e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d06c      	beq.n	800472c <HAL_RCC_OscConfig+0x12c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d168      	bne.n	800472c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e24c      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x76>
 8004668:	4b80      	ldr	r3, [pc, #512]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a7f      	ldr	r2, [pc, #508]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800466e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	e02e      	b.n	80046d4 <HAL_RCC_OscConfig+0xd4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x98>
 800467e:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7a      	ldr	r2, [pc, #488]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a77      	ldr	r2, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e01d      	b.n	80046d4 <HAL_RCC_OscConfig+0xd4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0xbc>
 80046a2:	4b72      	ldr	r3, [pc, #456]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6e      	ldr	r2, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0xd4>
 80046bc:	4b6b      	ldr	r3, [pc, #428]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a6a      	ldr	r2, [pc, #424]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a67      	ldr	r2, [pc, #412]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe ff44 	bl	8003568 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fe ff40 	bl	8003568 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e200      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0xe4>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe ff30 	bl	8003568 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe ff2c 	bl	8003568 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e1ec      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471e:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x10c>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d063      	beq.n	8004802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800473a:	4b4c      	ldr	r3, [pc, #304]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004746:	4b49      	ldr	r3, [pc, #292]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d11c      	bne.n	800478c <HAL_RCC_OscConfig+0x18c>
 8004752:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x176>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e1c0      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4939      	ldr	r1, [pc, #228]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	e03a      	b.n	8004802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x270>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479a:	f7fe fee5 	bl	8003568 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fe fee1 	bl	8003568 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1a1      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	4b2d      	ldr	r3, [pc, #180]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4927      	ldr	r1, [pc, #156]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4b26      	ldr	r3, [pc, #152]	; (8004870 <HAL_RCC_OscConfig+0x270>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fe fec4 	bl	8003568 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fe fec0 	bl	8003568 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e180      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03a      	beq.n	8004884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481c:	f7fe fea4 	bl	8003568 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004824:	f7fe fea0 	bl	8003568 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e160      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <HAL_RCC_OscConfig+0x26c>)
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004842:	2001      	movs	r0, #1
 8004844:	f000 fb08 	bl	8004e58 <RCC_Delay>
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fe fe8a 	bl	8003568 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004856:	e00f      	b.n	8004878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004858:	f7fe fe86 	bl	8003568 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d908      	bls.n	8004878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e146      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	42420000 	.word	0x42420000
 8004874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	4b92      	ldr	r3, [pc, #584]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e9      	bne.n	8004858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80a6 	beq.w	80049de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b8b      	ldr	r3, [pc, #556]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4a87      	ldr	r2, [pc, #540]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	61d3      	str	r3, [r2, #28]
 80048ae:	4b85      	ldr	r3, [pc, #532]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b82      	ldr	r3, [pc, #520]	; (8004ac8 <HAL_RCC_OscConfig+0x4c8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d118      	bne.n	80048fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ca:	4b7f      	ldr	r3, [pc, #508]	; (8004ac8 <HAL_RCC_OscConfig+0x4c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7e      	ldr	r2, [pc, #504]	; (8004ac8 <HAL_RCC_OscConfig+0x4c8>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d6:	f7fe fe47 	bl	8003568 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048de:	f7fe fe43 	bl	8003568 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b64      	cmp	r3, #100	; 0x64
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e103      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f0:	4b75      	ldr	r3, [pc, #468]	; (8004ac8 <HAL_RCC_OscConfig+0x4c8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <HAL_RCC_OscConfig+0x312>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	4a6e      	ldr	r2, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6213      	str	r3, [r2, #32]
 8004910:	e02d      	b.n	800496e <HAL_RCC_OscConfig+0x36e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x334>
 800491a:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	4a69      	ldr	r2, [pc, #420]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6213      	str	r3, [r2, #32]
 8004926:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4a66      	ldr	r2, [pc, #408]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	f023 0304 	bic.w	r3, r3, #4
 8004930:	6213      	str	r3, [r2, #32]
 8004932:	e01c      	b.n	800496e <HAL_RCC_OscConfig+0x36e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d10c      	bne.n	8004956 <HAL_RCC_OscConfig+0x356>
 800493c:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4a60      	ldr	r2, [pc, #384]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6213      	str	r3, [r2, #32]
 8004948:	4b5e      	ldr	r3, [pc, #376]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6213      	str	r3, [r2, #32]
 8004954:	e00b      	b.n	800496e <HAL_RCC_OscConfig+0x36e>
 8004956:	4b5b      	ldr	r3, [pc, #364]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	4a5a      	ldr	r2, [pc, #360]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6213      	str	r3, [r2, #32]
 8004962:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4a57      	ldr	r2, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d015      	beq.n	80049a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fe fdf7 	bl	8003568 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fe fdf3 	bl	8003568 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e0b1      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ee      	beq.n	800497e <HAL_RCC_OscConfig+0x37e>
 80049a0:	e014      	b.n	80049cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a2:	f7fe fde1 	bl	8003568 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fe fddd 	bl	8003568 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e09b      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c0:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ee      	bne.n	80049aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d2:	4b3c      	ldr	r3, [pc, #240]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8087 	beq.w	8004af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d061      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d146      	bne.n	8004a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fe fdb1 	bl	8003568 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fe fdad 	bl	8003568 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e06d      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d108      	bne.n	8004a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	4921      	ldr	r1, [pc, #132]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a44:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a19      	ldr	r1, [r3, #32]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	430b      	orrs	r3, r1
 8004a56:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fd81 	bl	8003568 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fe fd7d 	bl	8003568 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e03d      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x46a>
 8004a88:	e035      	b.n	8004af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fe fd6a 	bl	8003568 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fe fd66 	bl	8003568 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e026      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x498>
 8004ab6:	e01e      	b.n	8004af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e019      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_OscConfig+0x500>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0d0      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b6a      	ldr	r3, [pc, #424]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d910      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 0207 	bic.w	r2, r3, #7
 8004b2e:	4965      	ldr	r1, [pc, #404]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a58      	ldr	r2, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d040      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d115      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e073      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06b      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4936      	ldr	r1, [pc, #216]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf4:	f7fe fcb8 	bl	8003568 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fe fcb4 	bl	8003568 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e053      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d210      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 0207 	bic.w	r2, r3, #7
 8004c3a:	4922      	ldr	r1, [pc, #136]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	490a      	ldr	r1, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fca2 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40022000 	.word	0x40022000
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08009f4c 	.word	0x08009f4c
 8004cd0:	20000008 	.word	0x20000008
 8004cd4:	2000000c 	.word	0x2000000c

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	b490      	push	{r4, r7}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cde:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ce0:	1d3c      	adds	r4, r7, #4
 8004ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ce8:	f240 2301 	movw	r3, #513	; 0x201
 8004cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d02:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x40>
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x46>
 8004d16:	e02b      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d18:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d1a:	623b      	str	r3, [r7, #32]
      break;
 8004d1c:	e02b      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	3328      	adds	r3, #40	; 0x28
 8004d28:	443b      	add	r3, r7
 8004d2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d012      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	0c5b      	lsrs	r3, r3, #17
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	3328      	adds	r3, #40	; 0x28
 8004d46:	443b      	add	r3, r7
 8004d48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d52:	fb03 f202 	mul.w	r2, r3, r2
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	e004      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	623b      	str	r3, [r7, #32]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d72:	623b      	str	r3, [r7, #32]
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc90      	pop	{r4, r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	08009e60 	.word	0x08009e60
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	007a1200 	.word	0x007a1200
 8004d90:	003d0900 	.word	0x003d0900

08004d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b02      	ldr	r3, [pc, #8]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	20000008 	.word	0x20000008

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff2 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	08009f5c 	.word	0x08009f5c

08004dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd4:	f7ff ffde 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	0adb      	lsrs	r3, r3, #11
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	08009f5c 	.word	0x08009f5c

08004df8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	220f      	movs	r2, #15
 8004e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <HAL_RCC_GetClockConfig+0x58>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <HAL_RCC_GetClockConfig+0x58>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_GetClockConfig+0x58>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_RCC_GetClockConfig+0x58>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0207 	and.w	r2, r3, #7
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40022000 	.word	0x40022000

08004e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <RCC_Delay+0x34>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <RCC_Delay+0x38>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a5b      	lsrs	r3, r3, #9
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e74:	bf00      	nop
  }
  while (Delay --);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1e5a      	subs	r2, r3, #1
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f9      	bne.n	8004e74 <RCC_Delay+0x1c>
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	20000008 	.word	0x20000008
 8004e90:	10624dd3 	.word	0x10624dd3

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d07d      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb4:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b4c      	ldr	r3, [pc, #304]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	61d3      	str	r3, [r2, #28]
 8004ecc:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d118      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee8:	4b43      	ldr	r3, [pc, #268]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a42      	ldr	r2, [pc, #264]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef4:	f7fe fb38 	bl	8003568 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	e008      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efc:	f7fe fb34 	bl	8003568 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e06d      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02e      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d027      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f38:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f42:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f48:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f4e:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fb03 	bl	8003568 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fe faff 	bl	8003568 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e036      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ee      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4917      	ldr	r1, [pc, #92]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004faa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	490b      	ldr	r1, [pc, #44]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42420440 	.word	0x42420440

08005000 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b08d      	sub	sp, #52	; 0x34
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005008:	4b58      	ldr	r3, [pc, #352]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800500a:	f107 040c 	add.w	r4, r7, #12
 800500e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005014:	f240 2301 	movw	r3, #513	; 0x201
 8005018:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	2300      	movs	r3, #0
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b10      	cmp	r3, #16
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b10      	cmp	r3, #16
 8005038:	f200 808e 	bhi.w	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d049      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d079      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005048:	e086      	b.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800504a:	4b49      	ldr	r3, [pc, #292]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005050:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d07f      	beq.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	0c9b      	lsrs	r3, r3, #18
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	3330      	adds	r3, #48	; 0x30
 8005066:	443b      	add	r3, r7
 8005068:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800506c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005078:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c5b      	lsrs	r3, r3, #17
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	3330      	adds	r3, #48	; 0x30
 8005084:	443b      	add	r3, r7
 8005086:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005096:	4a37      	ldr	r2, [pc, #220]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	fbb2 f2f3 	udiv	r2, r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4a33      	ldr	r2, [pc, #204]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050b2:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050be:	d102      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050c4:	e04a      	b.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4a2c      	ldr	r2, [pc, #176]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050d4:	e042      	b.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e6:	d108      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f8:	e01f      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d109      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005112:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	e00f      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005124:	d11c      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005132:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005138:	e012      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800513a:	e011      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800513c:	f7ff fe48 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0b9b      	lsrs	r3, r3, #14
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	3301      	adds	r3, #1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005156:	e004      	b.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005158:	bf00      	nop
 800515a:	e002      	b.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005160:	bf00      	nop
    }
  }
  return (frequency);
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005164:	4618      	mov	r0, r3
 8005166:	3734      	adds	r7, #52	; 0x34
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	08009e70 	.word	0x08009e70
 8005170:	40021000 	.word	0x40021000
 8005174:	007a1200 	.word	0x007a1200
 8005178:	003d0900 	.word	0x003d0900
 800517c:	aaaaaaab 	.word	0xaaaaaaab

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e01d      	b.n	80051ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f815 	bl	80051d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fa84 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d007      	beq.n	8005222 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e01d      	b.n	800527c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fd fbb5 	bl	80029c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f000 fa2d 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fc02 	bl	8005aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <HAL_TIM_PWM_Start+0x60>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9b3 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9a6 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9b5 	bl	80056a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f989 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f97c 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f98b 	bl	80056a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f95f 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f952 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f961 	bl	80056a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f935 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f928 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f937 	bl	80056a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fd f878 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbc6 	bl	8005c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8fb 	bl	80056ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0220 	mvn.w	r2, #32
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fb91 	bl	8005c12 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800550e:	2302      	movs	r3, #2
 8005510:	e0b4      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	f200 809f 	bhi.w	8005668 <HAL_TIM_PWM_ConfigChannel+0x170>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005565 	.word	0x08005565
 8005534:	08005669 	.word	0x08005669
 8005538:	08005669 	.word	0x08005669
 800553c:	08005669 	.word	0x08005669
 8005540:	080055a5 	.word	0x080055a5
 8005544:	08005669 	.word	0x08005669
 8005548:	08005669 	.word	0x08005669
 800554c:	08005669 	.word	0x08005669
 8005550:	080055e7 	.word	0x080055e7
 8005554:	08005669 	.word	0x08005669
 8005558:	08005669 	.word	0x08005669
 800555c:	08005669 	.word	0x08005669
 8005560:	08005627 	.word	0x08005627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f910 	bl	8005790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
      break;
 80055a2:	e062      	b.n	800566a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f956 	bl	800585c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	619a      	str	r2, [r3, #24]
      break;
 80055e4:	e041      	b.n	800566a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f99f 	bl	8005930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0204 	bic.w	r2, r2, #4
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
      break;
 8005624:	e021      	b.n	800566a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f9e9 	bl	8005a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	021a      	lsls	r2, r3, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]
      break;
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005668:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <TIM_Base_SetConfig+0xb8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00b      	beq.n	80056fc <TIM_Base_SetConfig+0x30>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d007      	beq.n	80056fc <TIM_Base_SetConfig+0x30>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a26      	ldr	r2, [pc, #152]	; (8005788 <TIM_Base_SetConfig+0xbc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_Base_SetConfig+0x30>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a25      	ldr	r2, [pc, #148]	; (800578c <TIM_Base_SetConfig+0xc0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <TIM_Base_SetConfig+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0x62>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0x62>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a19      	ldr	r2, [pc, #100]	; (8005788 <TIM_Base_SetConfig+0xbc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <TIM_Base_SetConfig+0xc0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a07      	ldr	r2, [pc, #28]	; (8005784 <TIM_Base_SetConfig+0xb8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800

08005790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0302 	bic.w	r3, r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <TIM_OC1_SetConfig+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0308 	bic.w	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <TIM_OC1_SetConfig+0xc8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d111      	bne.n	8005832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00

0800585c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0320 	bic.w	r3, r3, #32
 80058a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <TIM_OC2_SetConfig+0xd0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10d      	bne.n	80058d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a14      	ldr	r2, [pc, #80]	; (800592c <TIM_OC2_SetConfig+0xd0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d113      	bne.n	8005908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40012c00 	.word	0x40012c00

08005930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <TIM_OC3_SetConfig+0xd0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10d      	bne.n	80059aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <TIM_OC3_SetConfig+0xd0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00

08005a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <TIM_OC4_SetConfig+0x98>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d109      	bne.n	8005a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	019b      	lsls	r3, r3, #6
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00

08005aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e032      	b.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e03d      	b.n	8005c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e03f      	b.n	8005cc8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fc ff9b 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	; 0x24
 8005c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 faa8 	bl	80061d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d140      	bne.n	8005d6c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_UART_Receive_IT+0x26>
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e039      	b.n	8005d6e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Receive_IT+0x38>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e032      	b.n	8005d6e <HAL_UART_Receive_IT+0x9e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0220 	orr.w	r2, r2, #32
 8005d66:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e000      	b.n	8005d6e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d6c:	2302      	movs	r3, #2
  }
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_UART_IRQHandler+0x52>
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f982 	bl	80060cc <UART_Receive_IT>
      return;
 8005dc8:	e0cb      	b.n	8005f62 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80ab 	beq.w	8005f28 <HAL_UART_IRQHandler+0x1b0>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_UART_IRQHandler+0x70>
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80a0 	beq.w	8005f28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_UART_IRQHandler+0x90>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	f043 0201 	orr.w	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_UART_IRQHandler+0xb0>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	f043 0202 	orr.w	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_UART_IRQHandler+0xd0>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	f043 0204 	orr.w	r2, r3, #4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf0>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	f043 0208 	orr.w	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d077      	beq.n	8005f60 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <HAL_UART_IRQHandler+0x112>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f921 	bl	80060cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x13a>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d031      	beq.n	8005f16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f86c 	bl	8005f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d023      	beq.n	8005f0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d013      	beq.n	8005f06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_UART_IRQHandler+0x1f0>)
 8005ee4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe f95e 	bl	80041ac <HAL_DMA_Abort_IT>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	e00e      	b.n	8005f24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f839 	bl	8005f7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	e00a      	b.n	8005f24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f835 	bl	8005f7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e006      	b.n	8005f24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f831 	bl	8005f7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f22:	e01d      	b.n	8005f60 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	bf00      	nop
    return;
 8005f26:	e01b      	b.n	8005f60 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_UART_IRQHandler+0x1cc>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f858 	bl	8005ff2 <UART_Transmit_IT>
    return;
 8005f42:	e00e      	b.n	8005f62 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1ea>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f89f 	bl	800609c <UART_EndTransmit_IT>
    return;
 8005f5e:	e000      	b.n	8005f62 <HAL_UART_IRQHandler+0x1ea>
    return;
 8005f60:	bf00      	nop
  }
}
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08005fcb 	.word	0x08005fcb

08005f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ffca 	bl	8005f7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b21      	cmp	r3, #33	; 0x21
 8006004:	d144      	bne.n	8006090 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d11a      	bne.n	8006046 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006024:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]
 8006038:	e00e      	b.n	8006058 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]
 8006044:	e008      	b.n	8006058 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6211      	str	r1, [r2, #32]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4619      	mov	r1, r3
 8006066:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10f      	bne.n	800608c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff55 	bl	8005f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b22      	cmp	r3, #34	; 0x22
 80060de:	d171      	bne.n	80061c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e8:	d123      	bne.n	8006132 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10e      	bne.n	8006116 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
 8006114:	e029      	b.n	800616a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	b29b      	uxth	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
 8006130:	e01b      	b.n	800616a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6858      	ldr	r0, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	1c59      	adds	r1, r3, #1
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6291      	str	r1, [r2, #40]	; 0x28
 800614a:	b2c2      	uxtb	r2, r0
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e00c      	b.n	800616a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	1c58      	adds	r0, r3, #1
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	6288      	str	r0, [r1, #40]	; 0x28
 8006162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29b      	uxth	r3, r3
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4619      	mov	r1, r3
 8006178:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800617a:	2b00      	cmp	r3, #0
 800617c:	d120      	bne.n	80061c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0220 	bic.w	r2, r2, #32
 800618c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb fba0 	bl	80018fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e002      	b.n	80061c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800620a:	f023 030c 	bic.w	r3, r3, #12
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	430b      	orrs	r3, r1
 8006216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a52      	ldr	r2, [pc, #328]	; (800637c <UART_SetConfig+0x1ac>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d14e      	bne.n	80062d6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe fdca 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 800623c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	4a4a      	ldr	r2, [pc, #296]	; (8006380 <UART_SetConfig+0x1b0>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	0119      	lsls	r1, r3, #4
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fbb2 f2f3 	udiv	r2, r2, r3
 8006274:	4b42      	ldr	r3, [pc, #264]	; (8006380 <UART_SetConfig+0x1b0>)
 8006276:	fba3 0302 	umull	r0, r3, r3, r2
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	2064      	movs	r0, #100	; 0x64
 800627e:	fb00 f303 	mul.w	r3, r0, r3
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	3332      	adds	r3, #50	; 0x32
 8006288:	4a3d      	ldr	r2, [pc, #244]	; (8006380 <UART_SetConfig+0x1b0>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006294:	4419      	add	r1, r3
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ac:	4b34      	ldr	r3, [pc, #208]	; (8006380 <UART_SetConfig+0x1b0>)
 80062ae:	fba3 0302 	umull	r0, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2064      	movs	r0, #100	; 0x64
 80062b6:	fb00 f303 	mul.w	r3, r0, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	; 0x32
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <UART_SetConfig+0x1b0>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	440a      	add	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80062d4:	e04d      	b.n	8006372 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fe fd67 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 80062da:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009a      	lsls	r2, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <UART_SetConfig+0x1b0>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	0119      	lsls	r1, r3, #4
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009a      	lsls	r2, r3, #2
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006312:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <UART_SetConfig+0x1b0>)
 8006314:	fba3 0302 	umull	r0, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2064      	movs	r0, #100	; 0x64
 800631c:	fb00 f303 	mul.w	r3, r0, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	3332      	adds	r3, #50	; 0x32
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <UART_SetConfig+0x1b0>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006332:	4419      	add	r1, r3
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009a      	lsls	r2, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	fbb2 f2f3 	udiv	r2, r2, r3
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x1b0>)
 800634c:	fba3 0302 	umull	r0, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2064      	movs	r0, #100	; 0x64
 8006354:	fb00 f303 	mul.w	r3, r0, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a08      	ldr	r2, [pc, #32]	; (8006380 <UART_SetConfig+0x1b0>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	440a      	add	r2, r1
 8006370:	609a      	str	r2, [r3, #8]
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40013800 	.word	0x40013800
 8006380:	51eb851f 	.word	0x51eb851f

08006384 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800638a:	f3ef 8305 	mrs	r3, IPSR
 800638e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10f      	bne.n	80063b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006396:	f3ef 8310 	mrs	r3, PRIMASK
 800639a:	607b      	str	r3, [r7, #4]
  return(result);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <osKernelInitialize+0x32>
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <osKernelInitialize+0x60>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d109      	bne.n	80063be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063aa:	f3ef 8311 	mrs	r3, BASEPRI
 80063ae:	603b      	str	r3, [r7, #0]
  return(result);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063b6:	f06f 0305 	mvn.w	r3, #5
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e00c      	b.n	80063d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <osKernelInitialize+0x60>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <osKernelInitialize+0x60>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e002      	b.n	80063d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295
 80063d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	20001af4 	.word	0x20001af4

080063e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fa:	f3ef 8310 	mrs	r3, PRIMASK
 80063fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <osKernelStart+0x32>
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <osKernelStart+0x64>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d109      	bne.n	8006422 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800640e:	f3ef 8311 	mrs	r3, BASEPRI
 8006412:	603b      	str	r3, [r7, #0]
  return(result);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <osKernelStart+0x3a>
    stat = osErrorISR;
 800641a:	f06f 0305 	mvn.w	r3, #5
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e00e      	b.n	8006440 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <osKernelStart+0x64>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800642a:	4b08      	ldr	r3, [pc, #32]	; (800644c <osKernelStart+0x64>)
 800642c:	2202      	movs	r2, #2
 800642e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006430:	f001 f890 	bl	8007554 <vTaskStartScheduler>
      stat = osOK;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e002      	b.n	8006440 <osKernelStart+0x58>
    } else {
      stat = osError;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006440:	68fb      	ldr	r3, [r7, #12]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20001af4 	.word	0x20001af4

08006450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b092      	sub	sp, #72	; 0x48
 8006454:	af04      	add	r7, sp, #16
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006460:	f3ef 8305 	mrs	r3, IPSR
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006468:	2b00      	cmp	r3, #0
 800646a:	f040 8094 	bne.w	8006596 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646e:	f3ef 8310 	mrs	r3, PRIMASK
 8006472:	623b      	str	r3, [r7, #32]
  return(result);
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 808d 	bne.w	8006596 <osThreadNew+0x146>
 800647c:	4b48      	ldr	r3, [pc, #288]	; (80065a0 <osThreadNew+0x150>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d106      	bne.n	8006492 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006484:	f3ef 8311 	mrs	r3, BASEPRI
 8006488:	61fb      	str	r3, [r7, #28]
  return(result);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 8082 	bne.w	8006596 <osThreadNew+0x146>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d07e      	beq.n	8006596 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800649c:	2318      	movs	r3, #24
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80064a0:	2300      	movs	r3, #0
 80064a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80064a4:	f107 031b 	add.w	r3, r7, #27
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d045      	beq.n	8006542 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <osThreadNew+0x74>
        name = attr->name;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <osThreadNew+0x9a>
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b38      	cmp	r3, #56	; 0x38
 80064dc:	d805      	bhi.n	80064ea <osThreadNew+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <osThreadNew+0x9e>
        return (NULL);
 80064ea:	2300      	movs	r3, #0
 80064ec:	e054      	b.n	8006598 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00e      	beq.n	8006524 <osThreadNew+0xd4>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2ba7      	cmp	r3, #167	; 0xa7
 800650c:	d90a      	bls.n	8006524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <osThreadNew+0xd4>
        mem = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
 8006522:	e010      	b.n	8006546 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <osThreadNew+0xf6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d108      	bne.n	8006546 <osThreadNew+0xf6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <osThreadNew+0xf6>
          mem = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006540:	e001      	b.n	8006546 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	2b01      	cmp	r3, #1
 800654a:	d110      	bne.n	800656e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fe12 	bl	800718c <xTaskCreateStatic>
 8006568:	4603      	mov	r3, r0
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e013      	b.n	8006596 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d110      	bne.n	8006596 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	b29a      	uxth	r2, r3
 8006578:	f107 0314 	add.w	r3, r7, #20
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fe5c 	bl	8007244 <xTaskCreate>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <osThreadNew+0x146>
          hTask = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006596:	697b      	ldr	r3, [r7, #20]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3738      	adds	r7, #56	; 0x38
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20001af4 	.word	0x20001af4

080065a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ac:	f3ef 8305 	mrs	r3, IPSR
 80065b0:	613b      	str	r3, [r7, #16]
  return(result);
 80065b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b8:	f3ef 8310 	mrs	r3, PRIMASK
 80065bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <osDelay+0x34>
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <osDelay+0x58>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d109      	bne.n	80065e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065cc:	f3ef 8311 	mrs	r3, BASEPRI
 80065d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <osDelay+0x3c>
    stat = osErrorISR;
 80065d8:	f06f 0305 	mvn.w	r3, #5
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e007      	b.n	80065f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 ff7e 	bl	80074ec <vTaskDelay>
    }
  }

  return (stat);
 80065f0:	697b      	ldr	r3, [r7, #20]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20001af4 	.word	0x20001af4

08006600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a06      	ldr	r2, [pc, #24]	; (8006628 <vApplicationGetIdleTaskMemory+0x28>)
 8006610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a05      	ldr	r2, [pc, #20]	; (800662c <vApplicationGetIdleTaskMemory+0x2c>)
 8006616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2280      	movs	r2, #128	; 0x80
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	20001af8 	.word	0x20001af8
 800662c:	20001ba0 	.word	0x20001ba0

08006630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a07      	ldr	r2, [pc, #28]	; (800665c <vApplicationGetTimerTaskMemory+0x2c>)
 8006640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4a06      	ldr	r2, [pc, #24]	; (8006660 <vApplicationGetTimerTaskMemory+0x30>)
 8006646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20001da0 	.word	0x20001da0
 8006660:	20001e48 	.word	0x20001e48

08006664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f103 0208 	add.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f103 0208 	add.w	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d103      	bne.n	8006720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e00c      	b.n	800673a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3308      	adds	r3, #8
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e002      	b.n	800672e <vListInsert+0x2e>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	d2f6      	bcs.n	8006728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6892      	ldr	r2, [r2, #8]
 8006786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6852      	ldr	r2, [r2, #4]
 8006790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d103      	bne.n	80067a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
	...

080067c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067ee:	f001 fff5 	bl	80087dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	441a      	add	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	3b01      	subs	r3, #1
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d114      	bne.n	800686e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3310      	adds	r3, #16
 8006850:	4618      	mov	r0, r3
 8006852:	f001 f91b 	bl	8007a8c <xTaskRemoveFromEventList>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d012      	beq.n	8006882 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <xQueueGenericReset+0xcc>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	e009      	b.n	8006882 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3310      	adds	r3, #16
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fef6 	bl	8006664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fef1 	bl	8006664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006882:	f001 ffdb 	bl	800883c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006886:	2301      	movs	r3, #1
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <xQueueGenericCreateStatic+0x52>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xQueueGenericCreateStatic+0x56>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueGenericCreateStatic+0x58>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	623b      	str	r3, [r7, #32]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <xQueueGenericCreateStatic+0x7e>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <xQueueGenericCreateStatic+0x82>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <xQueueGenericCreateStatic+0x84>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61fb      	str	r3, [r7, #28]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006932:	2350      	movs	r3, #80	; 0x50
 8006934:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b50      	cmp	r3, #80	; 0x50
 800693a:	d00a      	beq.n	8006952 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00d      	beq.n	8006978 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006964:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f805 	bl	8006982 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800697a:	4618      	mov	r0, r3
 800697c:	3730      	adds	r7, #48	; 0x30
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e002      	b.n	80069a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069b0:	2101      	movs	r1, #1
 80069b2:	69b8      	ldr	r0, [r7, #24]
 80069b4:	f7ff ff06 	bl	80067c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08e      	sub	sp, #56	; 0x38
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericSend+0x32>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <xQueueGenericSend+0x40>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueGenericSend+0x44>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueGenericSend+0x46>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <xQueueGenericSend+0x60>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSend+0x6e>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSend+0x72>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSend+0x74>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	623b      	str	r3, [r7, #32]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a56:	f001 f9df 	bl	8007e18 <xTaskGetSchedulerState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <xQueueGenericSend+0x9e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <xQueueGenericSend+0xa2>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericSend+0xa4>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	61fb      	str	r3, [r7, #28]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a86:	f001 fea9 	bl	80087dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <xQueueGenericSend+0xd4>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d129      	bne.n	8006af0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa2:	f000 fa07 	bl	8006eb4 <prvCopyDataToQueue>
 8006aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	3324      	adds	r3, #36	; 0x24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 ffe9 	bl	8007a8c <xTaskRemoveFromEventList>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ac0:	4b3f      	ldr	r3, [pc, #252]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	e00a      	b.n	8006ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ad8:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ae8:	f001 fea8 	bl	800883c <vPortExitCritical>
				return pdPASS;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e063      	b.n	8006bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006af6:	f001 fea1 	bl	800883c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e05c      	b.n	8006bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f823 	bl	8007b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b12:	f001 fe93 	bl	800883c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b16:	f000 fd8d 	bl	8007634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b1a:	f001 fe5f 	bl	80087dc <vPortEnterCritical>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d103      	bne.n	8006b34 <xQueueGenericSend+0x16c>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b3a:	b25b      	sxtb	r3, r3
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b40:	d103      	bne.n	8006b4a <xQueueGenericSend+0x182>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4a:	f001 fe77 	bl	800883c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b4e:	1d3a      	adds	r2, r7, #4
 8006b50:	f107 0314 	add.w	r3, r7, #20
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f812 	bl	8007b80 <xTaskCheckForTimeOut>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d124      	bne.n	8006bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b64:	f000 fa9e 	bl	80070a4 <prvIsQueueFull>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d018      	beq.n	8006ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	3310      	adds	r3, #16
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 ff38 	bl	80079ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7e:	f000 fa29 	bl	8006fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b82:	f000 fd65 	bl	8007650 <xTaskResumeAll>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f47f af7c 	bne.w	8006a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	e772      	b.n	8006a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ba2:	f000 fa17 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ba6:	f000 fd53 	bl	8007650 <xTaskResumeAll>
 8006baa:	e76c      	b.n	8006a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 fa11 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bb2:	f000 fd4d 	bl	8007650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bb6:	2300      	movs	r3, #0
		}
	}
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3738      	adds	r7, #56	; 0x38
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <xQueueGenericSendFromISR+0x3c>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <xQueueGenericSendFromISR+0x40>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <xQueueGenericSendFromISR+0x42>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	623b      	str	r3, [r7, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSendFromISR+0x6a>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSendFromISR+0x6e>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSendFromISR+0x70>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61fb      	str	r3, [r7, #28]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c4e:	f001 fe87 	bl	8008960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c52:	f3ef 8211 	mrs	r2, BASEPRI
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	61ba      	str	r2, [r7, #24]
 8006c68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <xQueueGenericSendFromISR+0xbc>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d12c      	bne.n	8006cda <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c90:	f000 f910 	bl	8006eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d112      	bne.n	8006cc4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d016      	beq.n	8006cd4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 feee 	bl	8007a8c <xTaskRemoveFromEventList>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00e      	beq.n	8006cd4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e007      	b.n	8006cd4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cc8:	3301      	adds	r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	b25a      	sxtb	r2, r3
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cd8:	e001      	b.n	8006cde <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ce8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3738      	adds	r7, #56	; 0x38
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <xQueueReceive+0x30>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	623b      	str	r3, [r7, #32]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <xQueueReceive+0x3e>
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <xQueueReceive+0x42>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueReceive+0x44>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueReceive+0x5e>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	61fb      	str	r3, [r7, #28]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d52:	f001 f861 	bl	8007e18 <xTaskGetSchedulerState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xQueueReceive+0x6e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <xQueueReceive+0x72>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueReceive+0x74>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xQueueReceive+0x8e>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	61bb      	str	r3, [r7, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d82:	f001 fd2b 	bl	80087dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01f      	beq.n	8006dd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f000 f8f7 	bl	8006f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1e5a      	subs	r2, r3, #1
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	3310      	adds	r3, #16
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe6c 	bl	8007a8c <xTaskRemoveFromEventList>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dba:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <xQueueReceive+0x1bc>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dca:	f001 fd37 	bl	800883c <vPortExitCritical>
				return pdPASS;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e069      	b.n	8006ea6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd8:	f001 fd30 	bl	800883c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e062      	b.n	8006ea6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de6:	f107 0310 	add.w	r3, r7, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 feb2 	bl	8007b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df4:	f001 fd22 	bl	800883c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df8:	f000 fc1c 	bl	8007634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dfc:	f001 fcee 	bl	80087dc <vPortEnterCritical>
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e06:	b25b      	sxtb	r3, r3
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d103      	bne.n	8006e16 <xQueueReceive+0x122>
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d103      	bne.n	8006e2c <xQueueReceive+0x138>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e2c:	f001 fd06 	bl	800883c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e30:	1d3a      	adds	r2, r7, #4
 8006e32:	f107 0310 	add.w	r3, r7, #16
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fea1 	bl	8007b80 <xTaskCheckForTimeOut>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d123      	bne.n	8006e8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e46:	f000 f917 	bl	8007078 <prvIsQueueEmpty>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d017      	beq.n	8006e80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fdc7 	bl	80079ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e60:	f000 f8b8 	bl	8006fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e64:	f000 fbf4 	bl	8007650 <xTaskResumeAll>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d189      	bne.n	8006d82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e6e:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <xQueueReceive+0x1bc>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	e780      	b.n	8006d82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e82:	f000 f8a7 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e86:	f000 fbe3 	bl	8007650 <xTaskResumeAll>
 8006e8a:	e77a      	b.n	8006d82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8e:	f000 f8a1 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e92:	f000 fbdd 	bl	8007650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e98:	f000 f8ee 	bl	8007078 <prvIsQueueEmpty>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f43f af6f 	beq.w	8006d82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3730      	adds	r7, #48	; 0x30
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d14d      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 ffb8 	bl	8007e54 <xTaskPriorityDisinherit>
 8006ee4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	e043      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d119      	bne.n	8006f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6898      	ldr	r0, [r3, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	f001 fff4 	bl	8008eec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d32b      	bcc.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
 8006f26:	e026      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68d8      	ldr	r0, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	461a      	mov	r2, r3
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	f001 ffda 	bl	8008eec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	425b      	negs	r3, r3
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d207      	bcs.n	8006f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d105      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d303      	bcc.n	8006fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68d9      	ldr	r1, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6838      	ldr	r0, [r7, #0]
 8006fc8:	f001 ff90 	bl	8008eec <memcpy>
	}
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fdc:	f001 fbfe 	bl	80087dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe8:	e011      	b.n	800700e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d012      	beq.n	8007018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd48 	bl	8007a8c <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007002:	f000 fe1f 	bl	8007c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	3b01      	subs	r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dce9      	bgt.n	8006fea <prvUnlockQueue+0x16>
 8007016:	e000      	b.n	800701a <prvUnlockQueue+0x46>
					break;
 8007018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007022:	f001 fc0b 	bl	800883c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007026:	f001 fbd9 	bl	80087dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007032:	e011      	b.n	8007058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d012      	beq.n	8007062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3310      	adds	r3, #16
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd23 	bl	8007a8c <xTaskRemoveFromEventList>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800704c:	f000 fdfa 	bl	8007c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	3b01      	subs	r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dce9      	bgt.n	8007034 <prvUnlockQueue+0x60>
 8007060:	e000      	b.n	8007064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800706c:	f001 fbe6 	bl	800883c <vPortExitCritical>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007080:	f001 fbac 	bl	80087dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e001      	b.n	8007096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f001 fbd1 	bl	800883c <vPortExitCritical>

	return xReturn;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ac:	f001 fb96 	bl	80087dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d102      	bne.n	80070c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 fbb9 	bl	800883c <vPortExitCritical>

	return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e014      	b.n	800710e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070e4:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <vQueueAddToRegistry+0x4c>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070f0:	490b      	ldr	r1, [pc, #44]	; (8007120 <vQueueAddToRegistry+0x4c>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <vQueueAddToRegistry+0x4c>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007106:	e006      	b.n	8007116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b07      	cmp	r3, #7
 8007112:	d9e7      	bls.n	80070e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr
 8007120:	20002248 	.word	0x20002248

08007124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007134:	f001 fb52 	bl	80087dc <vPortEnterCritical>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713e:	b25b      	sxtb	r3, r3
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d103      	bne.n	800714e <vQueueWaitForMessageRestricted+0x2a>
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007154:	b25b      	sxtb	r3, r3
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d103      	bne.n	8007164 <vQueueWaitForMessageRestricted+0x40>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007164:	f001 fb6a 	bl	800883c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fc5b 	bl	8007a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f7ff ff28 	bl	8006fd4 <prvUnlockQueue>
	}
 8007184:	bf00      	nop
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	; 0x38
 8007190:	af04      	add	r7, sp, #16
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	61fb      	str	r3, [r7, #28]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071d2:	23a8      	movs	r3, #168	; 0xa8
 80071d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2ba8      	cmp	r3, #168	; 0xa8
 80071da:	d00a      	beq.n	80071f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61bb      	str	r3, [r7, #24]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01e      	beq.n	8007236 <xTaskCreateStatic+0xaa>
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01b      	beq.n	8007236 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007206:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2202      	movs	r2, #2
 800720c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007210:	2300      	movs	r3, #0
 8007212:	9303      	str	r3, [sp, #12]
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	9302      	str	r3, [sp, #8]
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f851 	bl	80072d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800722e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007230:	f000 f8ec 	bl	800740c <prvAddNewTaskToReadyList>
 8007234:	e001      	b.n	800723a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800723a:	697b      	ldr	r3, [r7, #20]
	}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	; 0x30
 8007248:	af04      	add	r7, sp, #16
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fbbf 	bl	80089dc <pvPortMalloc>
 800725e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00e      	beq.n	8007284 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007266:	20a8      	movs	r0, #168	; 0xa8
 8007268:	f001 fbb8 	bl	80089dc <pvPortMalloc>
 800726c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
 800727a:	e005      	b.n	8007288 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800727c:	6978      	ldr	r0, [r7, #20]
 800727e:	f001 fc71 	bl	8008b64 <vPortFree>
 8007282:	e001      	b.n	8007288 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d017      	beq.n	80072be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	2300      	movs	r3, #0
 800729a:	9303      	str	r3, [sp, #12]
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	9302      	str	r3, [sp, #8]
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f80f 	bl	80072d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b2:	69f8      	ldr	r0, [r7, #28]
 80072b4:	f000 f8aa 	bl	800740c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e002      	b.n	80072c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072c4:	69bb      	ldr	r3, [r7, #24]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	21a5      	movs	r1, #165	; 0xa5
 80072ea:	f001 fd4f 	bl	8008d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072f8:	3b01      	subs	r3, #1
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	f023 0307 	bic.w	r3, r3, #7
 8007306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	617b      	str	r3, [r7, #20]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	e012      	b.n	8007354 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	7819      	ldrb	r1, [r3, #0]
 8007336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	3334      	adds	r3, #52	; 0x34
 800733e:	460a      	mov	r2, r1
 8007340:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d006      	beq.n	800735c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	3301      	adds	r3, #1
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d9e9      	bls.n	800732e <prvInitialiseNewTask+0x5e>
 800735a:	e000      	b.n	800735e <prvInitialiseNewTask+0x8e>
		{
			break;
 800735c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	2b37      	cmp	r3, #55	; 0x37
 800736a:	d901      	bls.n	8007370 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800736c:	2337      	movs	r3, #55	; 0x37
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2200      	movs	r2, #0
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f98b 	bl	80066a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	3318      	adds	r3, #24
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff f986 	bl	80066a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	3354      	adds	r3, #84	; 0x54
 80073c0:	224c      	movs	r2, #76	; 0x4c
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fce1 	bl	8008d8c <memset>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <prvInitialiseNewTask+0x130>)
 80073ce:	659a      	str	r2, [r3, #88]	; 0x58
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <prvInitialiseNewTask+0x134>)
 80073d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <prvInitialiseNewTask+0x138>)
 80073da:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	69b8      	ldr	r0, [r7, #24]
 80073e2:	f001 f90b 	bl	80085fc <pxPortInitialiseStack>
 80073e6:	4602      	mov	r2, r0
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f8:	bf00      	nop
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20004044 	.word	0x20004044
 8007404:	200040ac 	.word	0x200040ac
 8007408:	20004114 	.word	0x20004114

0800740c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007414:	f001 f9e2 	bl	80087dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007418:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	4a2c      	ldr	r2, [pc, #176]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 8007420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007422:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800742a:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007430:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d110      	bne.n	800745a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007438:	f000 fc28 	bl	8007c8c <prvInitialiseTaskLists>
 800743c:	e00d      	b.n	800745a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <prvAddNewTaskToReadyList+0xcc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	429a      	cmp	r2, r3
 8007452:	d802      	bhi.n	800745a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 8007462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <prvAddNewTaskToReadyList+0xd4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d903      	bls.n	8007480 <prvAddNewTaskToReadyList+0x74>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <prvAddNewTaskToReadyList+0xd4>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4a15      	ldr	r2, [pc, #84]	; (80074e4 <prvAddNewTaskToReadyList+0xd8>)
 800748e:	441a      	add	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7ff f90f 	bl	80066ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800749c:	f001 f9ce 	bl	800883c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074a0:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <prvAddNewTaskToReadyList+0xcc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d207      	bcs.n	80074c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <prvAddNewTaskToReadyList+0xdc>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	2000275c 	.word	0x2000275c
 80074d4:	20002288 	.word	0x20002288
 80074d8:	20002768 	.word	0x20002768
 80074dc:	20002778 	.word	0x20002778
 80074e0:	20002764 	.word	0x20002764
 80074e4:	2000228c 	.word	0x2000228c
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d017      	beq.n	800752e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <vTaskDelay+0x60>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <vTaskDelay+0x30>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60bb      	str	r3, [r7, #8]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800751c:	f000 f88a 	bl	8007634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd04 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007528:	f000 f892 	bl	8007650 <xTaskResumeAll>
 800752c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <vTaskDelay+0x64>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20002784 	.word	0x20002784
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007562:	463a      	mov	r2, r7
 8007564:	1d39      	adds	r1, r7, #4
 8007566:	f107 0308 	add.w	r3, r7, #8
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff f848 	bl	8006600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	9202      	str	r2, [sp, #8]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	2300      	movs	r3, #0
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	2300      	movs	r3, #0
 8007580:	460a      	mov	r2, r1
 8007582:	4924      	ldr	r1, [pc, #144]	; (8007614 <vTaskStartScheduler+0xc0>)
 8007584:	4824      	ldr	r0, [pc, #144]	; (8007618 <vTaskStartScheduler+0xc4>)
 8007586:	f7ff fe01 	bl	800718c <xTaskCreateStatic>
 800758a:	4603      	mov	r3, r0
 800758c:	4a23      	ldr	r2, [pc, #140]	; (800761c <vTaskStartScheduler+0xc8>)
 800758e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007590:	4b22      	ldr	r3, [pc, #136]	; (800761c <vTaskStartScheduler+0xc8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e001      	b.n	80075a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075a8:	f000 fd16 	bl	8007fd8 <xTimerCreateTimerTask>
 80075ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d11b      	bne.n	80075ec <vTaskStartScheduler+0x98>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	613b      	str	r3, [r7, #16]
}
 80075c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075c8:	4b15      	ldr	r3, [pc, #84]	; (8007620 <vTaskStartScheduler+0xcc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3354      	adds	r3, #84	; 0x54
 80075ce:	4a15      	ldr	r2, [pc, #84]	; (8007624 <vTaskStartScheduler+0xd0>)
 80075d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <vTaskStartScheduler+0xd4>)
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <vTaskStartScheduler+0xd8>)
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80075e0:	4b13      	ldr	r3, [pc, #76]	; (8007630 <vTaskStartScheduler+0xdc>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075e6:	f001 f887 	bl	80086f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075ea:	e00e      	b.n	800760a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d10a      	bne.n	800760a <vTaskStartScheduler+0xb6>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	60fb      	str	r3, [r7, #12]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <vTaskStartScheduler+0xb4>
}
 800760a:	bf00      	nop
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	08009e80 	.word	0x08009e80
 8007618:	08007c5d 	.word	0x08007c5d
 800761c:	20002780 	.word	0x20002780
 8007620:	20002288 	.word	0x20002288
 8007624:	20000064 	.word	0x20000064
 8007628:	2000277c 	.word	0x2000277c
 800762c:	20002768 	.word	0x20002768
 8007630:	20002760 	.word	0x20002760

08007634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <vTaskSuspendAll+0x18>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	4a03      	ldr	r2, [pc, #12]	; (800764c <vTaskSuspendAll+0x18>)
 8007640:	6013      	str	r3, [r2, #0]
}
 8007642:	bf00      	nop
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20002784 	.word	0x20002784

08007650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800765e:	4b42      	ldr	r3, [pc, #264]	; (8007768 <xTaskResumeAll+0x118>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <xTaskResumeAll+0x2c>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	603b      	str	r3, [r7, #0]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800767c:	f001 f8ae 	bl	80087dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007680:	4b39      	ldr	r3, [pc, #228]	; (8007768 <xTaskResumeAll+0x118>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	4a38      	ldr	r2, [pc, #224]	; (8007768 <xTaskResumeAll+0x118>)
 8007688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768a:	4b37      	ldr	r3, [pc, #220]	; (8007768 <xTaskResumeAll+0x118>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d162      	bne.n	8007758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007692:	4b36      	ldr	r3, [pc, #216]	; (800776c <xTaskResumeAll+0x11c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d05e      	beq.n	8007758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800769a:	e02f      	b.n	80076fc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800769c:	4b34      	ldr	r3, [pc, #208]	; (8007770 <xTaskResumeAll+0x120>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff f861 	bl	8006770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff f85c 	bl	8006770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4b2d      	ldr	r3, [pc, #180]	; (8007774 <xTaskResumeAll+0x124>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d903      	bls.n	80076cc <xTaskResumeAll+0x7c>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <xTaskResumeAll+0x124>)
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4a27      	ldr	r2, [pc, #156]	; (8007778 <xTaskResumeAll+0x128>)
 80076da:	441a      	add	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f7fe ffe9 	bl	80066ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <xTaskResumeAll+0x12c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076f6:	4b22      	ldr	r3, [pc, #136]	; (8007780 <xTaskResumeAll+0x130>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076fc:	4b1c      	ldr	r3, [pc, #112]	; (8007770 <xTaskResumeAll+0x120>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1cb      	bne.n	800769c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800770a:	f000 fb61 	bl	8007dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800770e:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <xTaskResumeAll+0x134>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d010      	beq.n	800773c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800771a:	f000 f845 	bl	80077a8 <xTaskIncrementTick>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007724:	4b16      	ldr	r3, [pc, #88]	; (8007780 <xTaskResumeAll+0x130>)
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3b01      	subs	r3, #1
 800772e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f1      	bne.n	800771a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <xTaskResumeAll+0x134>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <xTaskResumeAll+0x130>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <xTaskResumeAll+0x138>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007758:	f001 f870 	bl	800883c <vPortExitCritical>

	return xAlreadyYielded;
 800775c:	68bb      	ldr	r3, [r7, #8]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20002784 	.word	0x20002784
 800776c:	2000275c 	.word	0x2000275c
 8007770:	2000271c 	.word	0x2000271c
 8007774:	20002764 	.word	0x20002764
 8007778:	2000228c 	.word	0x2000228c
 800777c:	20002288 	.word	0x20002288
 8007780:	20002770 	.word	0x20002770
 8007784:	2000276c 	.word	0x2000276c
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007792:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <xTaskGetTickCount+0x18>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007798:	687b      	ldr	r3, [r7, #4]
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	20002760 	.word	0x20002760

080077a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b2:	4b51      	ldr	r3, [pc, #324]	; (80078f8 <xTaskIncrementTick+0x150>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 808e 	bne.w	80078d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077bc:	4b4f      	ldr	r3, [pc, #316]	; (80078fc <xTaskIncrementTick+0x154>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077c4:	4a4d      	ldr	r2, [pc, #308]	; (80078fc <xTaskIncrementTick+0x154>)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d120      	bne.n	8007812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077d0:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <xTaskIncrementTick+0x158>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	603b      	str	r3, [r7, #0]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xTaskIncrementTick+0x46>
 80077f0:	4b43      	ldr	r3, [pc, #268]	; (8007900 <xTaskIncrementTick+0x158>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	4b43      	ldr	r3, [pc, #268]	; (8007904 <xTaskIncrementTick+0x15c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a41      	ldr	r2, [pc, #260]	; (8007900 <xTaskIncrementTick+0x158>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	4a41      	ldr	r2, [pc, #260]	; (8007904 <xTaskIncrementTick+0x15c>)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <xTaskIncrementTick+0x160>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	4a3f      	ldr	r2, [pc, #252]	; (8007908 <xTaskIncrementTick+0x160>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	f000 fadf 	bl	8007dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007812:	4b3e      	ldr	r3, [pc, #248]	; (800790c <xTaskIncrementTick+0x164>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d34e      	bcc.n	80078ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781c:	4b38      	ldr	r3, [pc, #224]	; (8007900 <xTaskIncrementTick+0x158>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xTaskIncrementTick+0x82>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xTaskIncrementTick+0x84>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007830:	4b36      	ldr	r3, [pc, #216]	; (800790c <xTaskIncrementTick+0x164>)
 8007832:	f04f 32ff 	mov.w	r2, #4294967295
 8007836:	601a      	str	r2, [r3, #0]
					break;
 8007838:	e03f      	b.n	80078ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800783a:	4b31      	ldr	r3, [pc, #196]	; (8007900 <xTaskIncrementTick+0x158>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	429a      	cmp	r2, r3
 8007850:	d203      	bcs.n	800785a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007852:	4a2e      	ldr	r2, [pc, #184]	; (800790c <xTaskIncrementTick+0x164>)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6013      	str	r3, [r2, #0]
						break;
 8007858:	e02f      	b.n	80078ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe ff86 	bl	8006770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3318      	adds	r3, #24
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe ff7d 	bl	8006770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787a:	4b25      	ldr	r3, [pc, #148]	; (8007910 <xTaskIncrementTick+0x168>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d903      	bls.n	800788a <xTaskIncrementTick+0xe2>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	4a22      	ldr	r2, [pc, #136]	; (8007910 <xTaskIncrementTick+0x168>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <xTaskIncrementTick+0x16c>)
 8007898:	441a      	add	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fe ff0a 	bl	80066ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <xTaskIncrementTick+0x170>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d3b3      	bcc.n	800781c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b8:	e7b0      	b.n	800781c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078ba:	4b17      	ldr	r3, [pc, #92]	; (8007918 <xTaskIncrementTick+0x170>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	4914      	ldr	r1, [pc, #80]	; (8007914 <xTaskIncrementTick+0x16c>)
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d907      	bls.n	80078e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e004      	b.n	80078e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078d8:	4b10      	ldr	r3, [pc, #64]	; (800791c <xTaskIncrementTick+0x174>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a0f      	ldr	r2, [pc, #60]	; (800791c <xTaskIncrementTick+0x174>)
 80078e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078e2:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <xTaskIncrementTick+0x178>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078ee:	697b      	ldr	r3, [r7, #20]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20002784 	.word	0x20002784
 80078fc:	20002760 	.word	0x20002760
 8007900:	20002714 	.word	0x20002714
 8007904:	20002718 	.word	0x20002718
 8007908:	20002774 	.word	0x20002774
 800790c:	2000277c 	.word	0x2000277c
 8007910:	20002764 	.word	0x20002764
 8007914:	2000228c 	.word	0x2000228c
 8007918:	20002288 	.word	0x20002288
 800791c:	2000276c 	.word	0x2000276c
 8007920:	20002770 	.word	0x20002770

08007924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800792a:	4b2a      	ldr	r3, [pc, #168]	; (80079d4 <vTaskSwitchContext+0xb0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007932:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <vTaskSwitchContext+0xb4>)
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007938:	e046      	b.n	80079c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800793a:	4b27      	ldr	r3, [pc, #156]	; (80079d8 <vTaskSwitchContext+0xb4>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007940:	4b26      	ldr	r3, [pc, #152]	; (80079dc <vTaskSwitchContext+0xb8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e010      	b.n	800796a <vTaskSwitchContext+0x46>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <vTaskSwitchContext+0x40>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vTaskSwitchContext+0x3e>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3b01      	subs	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	491d      	ldr	r1, [pc, #116]	; (80079e0 <vTaskSwitchContext+0xbc>)
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0e4      	beq.n	8007948 <vTaskSwitchContext+0x24>
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4a15      	ldr	r2, [pc, #84]	; (80079e0 <vTaskSwitchContext+0xbc>)
 800798a:	4413      	add	r3, r2
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3308      	adds	r3, #8
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d104      	bne.n	80079ae <vTaskSwitchContext+0x8a>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	605a      	str	r2, [r3, #4]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4a0b      	ldr	r2, [pc, #44]	; (80079e4 <vTaskSwitchContext+0xc0>)
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <vTaskSwitchContext+0xb8>)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <vTaskSwitchContext+0xc0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3354      	adds	r3, #84	; 0x54
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <vTaskSwitchContext+0xc4>)
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20002784 	.word	0x20002784
 80079d8:	20002770 	.word	0x20002770
 80079dc:	20002764 	.word	0x20002764
 80079e0:	2000228c 	.word	0x2000228c
 80079e4:	20002288 	.word	0x20002288
 80079e8:	20000064 	.word	0x20000064

080079ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <vTaskPlaceOnEventList+0x44>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3318      	adds	r3, #24
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fe fe70 	bl	8006700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a20:	2101      	movs	r1, #1
 8007a22:	6838      	ldr	r0, [r7, #0]
 8007a24:	f000 fa84 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20002288 	.word	0x20002288

08007a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3318      	adds	r3, #24
 8007a62:	4619      	mov	r1, r3
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7fe fe28 	bl	80066ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f000 fa59 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
	}
 8007a7e:	bf00      	nop
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20002288 	.word	0x20002288

08007a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60fb      	str	r3, [r7, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	3318      	adds	r3, #24
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fe57 	bl	8006770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac2:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <xTaskRemoveFromEventList+0xb0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d11d      	bne.n	8007b06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fe4e 	bl	8006770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <xTaskRemoveFromEventList+0xb4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d903      	bls.n	8007ae8 <xTaskRemoveFromEventList+0x5c>
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <xTaskRemoveFromEventList+0xb4>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a13      	ldr	r2, [pc, #76]	; (8007b44 <xTaskRemoveFromEventList+0xb8>)
 8007af6:	441a      	add	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fe fddb 	bl	80066ba <vListInsertEnd>
 8007b04:	e005      	b.n	8007b12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	480e      	ldr	r0, [pc, #56]	; (8007b48 <xTaskRemoveFromEventList+0xbc>)
 8007b0e:	f7fe fdd4 	bl	80066ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <xTaskRemoveFromEventList+0xc0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d905      	bls.n	8007b2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <xTaskRemoveFromEventList+0xc4>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e001      	b.n	8007b30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007b30:	697b      	ldr	r3, [r7, #20]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20002784 	.word	0x20002784
 8007b40:	20002764 	.word	0x20002764
 8007b44:	2000228c 	.word	0x2000228c
 8007b48:	2000271c 	.word	0x2000271c
 8007b4c:	20002288 	.word	0x20002288
 8007b50:	20002770 	.word	0x20002770

08007b54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <vTaskInternalSetTimeOutState+0x24>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <vTaskInternalSetTimeOutState+0x28>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20002774 	.word	0x20002774
 8007b7c:	20002760 	.word	0x20002760

08007b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	613b      	str	r3, [r7, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	60fb      	str	r3, [r7, #12]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007bc2:	f000 fe0b 	bl	80087dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <xTaskCheckForTimeOut+0xbc>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d102      	bne.n	8007be6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e023      	b.n	8007c2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <xTaskCheckForTimeOut+0xc0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d007      	beq.n	8007c02 <xTaskCheckForTimeOut+0x82>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	e015      	b.n	8007c2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d20b      	bcs.n	8007c24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff9b 	bl	8007b54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	e004      	b.n	8007c2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c2e:	f000 fe05 	bl	800883c <vPortExitCritical>

	return xReturn;
 8007c32:	69fb      	ldr	r3, [r7, #28]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20002760 	.word	0x20002760
 8007c40:	20002774 	.word	0x20002774

08007c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c48:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <vTaskMissedYield+0x14>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20002770 	.word	0x20002770

08007c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c64:	f000 f852 	bl	8007d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <prvIdleTask+0x28>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d9f9      	bls.n	8007c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <prvIdleTask+0x2c>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c80:	e7f0      	b.n	8007c64 <prvIdleTask+0x8>
 8007c82:	bf00      	nop
 8007c84:	2000228c 	.word	0x2000228c
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c92:	2300      	movs	r3, #0
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	e00c      	b.n	8007cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a12      	ldr	r2, [pc, #72]	; (8007cec <prvInitialiseTaskLists+0x60>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fcdc 	bl	8006664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b37      	cmp	r3, #55	; 0x37
 8007cb6:	d9ef      	bls.n	8007c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cb8:	480d      	ldr	r0, [pc, #52]	; (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cba:	f7fe fcd3 	bl	8006664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cbe:	480d      	ldr	r0, [pc, #52]	; (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007cc0:	f7fe fcd0 	bl	8006664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cc4:	480c      	ldr	r0, [pc, #48]	; (8007cf8 <prvInitialiseTaskLists+0x6c>)
 8007cc6:	f7fe fccd 	bl	8006664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cca:	480c      	ldr	r0, [pc, #48]	; (8007cfc <prvInitialiseTaskLists+0x70>)
 8007ccc:	f7fe fcca 	bl	8006664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <prvInitialiseTaskLists+0x74>)
 8007cd2:	f7fe fcc7 	bl	8006664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <prvInitialiseTaskLists+0x78>)
 8007cd8:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <prvInitialiseTaskLists+0x7c>)
 8007cde:	4a05      	ldr	r2, [pc, #20]	; (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007ce0:	601a      	str	r2, [r3, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	2000228c 	.word	0x2000228c
 8007cf0:	200026ec 	.word	0x200026ec
 8007cf4:	20002700 	.word	0x20002700
 8007cf8:	2000271c 	.word	0x2000271c
 8007cfc:	20002730 	.word	0x20002730
 8007d00:	20002748 	.word	0x20002748
 8007d04:	20002714 	.word	0x20002714
 8007d08:	20002718 	.word	0x20002718

08007d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d12:	e019      	b.n	8007d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d14:	f000 fd62 	bl	80087dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d18:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <prvCheckTasksWaitingTermination+0x50>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fd23 	bl	8006770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	4a0b      	ldr	r2, [pc, #44]	; (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d3e:	f000 fd7d 	bl	800883c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f810 	bl	8007d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e1      	bne.n	8007d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20002730 	.word	0x20002730
 8007d60:	2000275c 	.word	0x2000275c
 8007d64:	20002744 	.word	0x20002744

08007d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3354      	adds	r3, #84	; 0x54
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f837 	bl	8008de8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 feeb 	bl	8008b64 <vPortFree>
				vPortFree( pxTCB );
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fee8 	bl	8008b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d94:	e018      	b.n	8007dc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d103      	bne.n	8007da8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fedf 	bl	8008b64 <vPortFree>
	}
 8007da6:	e00f      	b.n	8007dc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d00a      	beq.n	8007dc8 <prvDeleteTCB+0x60>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	60fb      	str	r3, [r7, #12]
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <prvDeleteTCB+0x5e>
	}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dd6:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <prvResetNextTaskUnblockTime+0x40>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <prvResetNextTaskUnblockTime+0x14>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e000      	b.n	8007de6 <prvResetNextTaskUnblockTime+0x16>
 8007de4:	2300      	movs	r3, #0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <prvResetNextTaskUnblockTime+0x44>)
 8007dec:	f04f 32ff 	mov.w	r2, #4294967295
 8007df0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007df2:	e008      	b.n	8007e06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007df4:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <prvResetNextTaskUnblockTime+0x40>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvResetNextTaskUnblockTime+0x44>)
 8007e04:	6013      	str	r3, [r2, #0]
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr
 8007e10:	20002714 	.word	0x20002714
 8007e14:	2000277c 	.word	0x2000277c

08007e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <xTaskGetSchedulerState+0x34>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e26:	2301      	movs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	e008      	b.n	8007e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <xTaskGetSchedulerState+0x38>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e34:	2302      	movs	r3, #2
 8007e36:	607b      	str	r3, [r7, #4]
 8007e38:	e001      	b.n	8007e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e3e:	687b      	ldr	r3, [r7, #4]
	}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20002768 	.word	0x20002768
 8007e50:	20002784 	.word	0x20002784

08007e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d056      	beq.n	8007f18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e6a:	4b2e      	ldr	r3, [pc, #184]	; (8007f24 <xTaskPriorityDisinherit+0xd0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d00a      	beq.n	8007e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	60bb      	str	r3, [r7, #8]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	1e5a      	subs	r2, r3, #1
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d02c      	beq.n	8007f18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d128      	bne.n	8007f18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fc50 	bl	8006770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <xTaskPriorityDisinherit+0xd4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d903      	bls.n	8007ef8 <xTaskPriorityDisinherit+0xa4>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <xTaskPriorityDisinherit+0xd4>)
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <xTaskPriorityDisinherit+0xd8>)
 8007f06:	441a      	add	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe fbd3 	bl	80066ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f18:	697b      	ldr	r3, [r7, #20]
	}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20002288 	.word	0x20002288
 8007f28:	20002764 	.word	0x20002764
 8007f2c:	2000228c 	.word	0x2000228c

08007f30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f3a:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f40:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fc12 	bl	8006770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d10a      	bne.n	8007f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5a:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4619      	mov	r1, r3
 8007f62:	4819      	ldr	r0, [pc, #100]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f64:	f7fe fba9 	bl	80066ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f68:	e026      	b.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d209      	bcs.n	8007f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe fbb6 	bl	8006700 <vListInsert>
}
 8007f94:	e010      	b.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7fe fbac 	bl	8006700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d202      	bcs.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fb2:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6013      	str	r3, [r2, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20002760 	.word	0x20002760
 8007fc4:	20002288 	.word	0x20002288
 8007fc8:	20002748 	.word	0x20002748
 8007fcc:	20002718 	.word	0x20002718
 8007fd0:	20002714 	.word	0x20002714
 8007fd4:	2000277c 	.word	0x2000277c

08007fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fe2:	f000 facb 	bl	800857c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <xTimerCreateTimerTask+0x80>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d021      	beq.n	8008032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ff6:	1d3a      	adds	r2, r7, #4
 8007ff8:	f107 0108 	add.w	r1, r7, #8
 8007ffc:	f107 030c 	add.w	r3, r7, #12
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fb15 	bl	8006630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	9202      	str	r2, [sp, #8]
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	2302      	movs	r3, #2
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	460a      	mov	r2, r1
 8008018:	4910      	ldr	r1, [pc, #64]	; (800805c <xTimerCreateTimerTask+0x84>)
 800801a:	4811      	ldr	r0, [pc, #68]	; (8008060 <xTimerCreateTimerTask+0x88>)
 800801c:	f7ff f8b6 	bl	800718c <xTaskCreateStatic>
 8008020:	4603      	mov	r3, r0
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <xTimerCreateTimerTask+0x8c>)
 8008024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <xTimerCreateTimerTask+0x8c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800802e:	2301      	movs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	613b      	str	r3, [r7, #16]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200027b8 	.word	0x200027b8
 800805c:	08009e88 	.word	0x08009e88
 8008060:	08008185 	.word	0x08008185
 8008064:	200027bc 	.word	0x200027bc

08008068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <xTimerGenericCommand+0x98>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d02a      	beq.n	80080f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	dc18      	bgt.n	80080e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080b0:	f7ff feb2 	bl	8007e18 <xTaskGetSchedulerState>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d109      	bne.n	80080ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080ba:	4b11      	ldr	r3, [pc, #68]	; (8008100 <xTimerGenericCommand+0x98>)
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f107 0110 	add.w	r1, r7, #16
 80080c2:	2300      	movs	r3, #0
 80080c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c6:	f7fe fc7f 	bl	80069c8 <xQueueGenericSend>
 80080ca:	6278      	str	r0, [r7, #36]	; 0x24
 80080cc:	e012      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <xTimerGenericCommand+0x98>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f107 0110 	add.w	r1, r7, #16
 80080d6:	2300      	movs	r3, #0
 80080d8:	2200      	movs	r2, #0
 80080da:	f7fe fc75 	bl	80069c8 <xQueueGenericSend>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24
 80080e0:	e008      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <xTimerGenericCommand+0x98>)
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f107 0110 	add.w	r1, r7, #16
 80080ea:	2300      	movs	r3, #0
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	f7fe fd69 	bl	8006bc4 <xQueueGenericSendFromISR>
 80080f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	200027b8 	.word	0x200027b8

08008104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <prvProcessExpiredTimer+0x7c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fb27 	bl	8006770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d122      	bne.n	8008170 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	18d1      	adds	r1, r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	f000 f8c8 	bl	80082cc <prvInsertTimerInActiveList>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d016      	beq.n	8008170 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008142:	2300      	movs	r3, #0
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	2100      	movs	r1, #0
 800814c:	6978      	ldr	r0, [r7, #20]
 800814e:	f7ff ff8b 	bl	8008068 <xTimerGenericCommand>
 8008152:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	60fb      	str	r3, [r7, #12]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	6978      	ldr	r0, [r7, #20]
 8008176:	4798      	blx	r3
}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	200027b0 	.word	0x200027b0

08008184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f857 	bl	8008244 <prvGetNextExpireTime>
 8008196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4619      	mov	r1, r3
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f803 	bl	80081a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081a2:	f000 f8d5 	bl	8008350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a6:	e7f1      	b.n	800818c <prvTimerTask+0x8>

080081a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081b2:	f7ff fa3f 	bl	8007634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081b6:	f107 0308 	add.w	r3, r7, #8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f866 	bl	800828c <prvSampleTimeNow>
 80081c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d130      	bne.n	800822a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <prvProcessTimerOrBlockTask+0x3c>
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d806      	bhi.n	80081e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081d6:	f7ff fa3b 	bl	8007650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff91 	bl	8008104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081e2:	e024      	b.n	800822e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <prvProcessTimerOrBlockTask+0x90>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <prvProcessTimerOrBlockTask+0x94>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4619      	mov	r1, r3
 800820a:	f7fe ff8b 	bl	8007124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800820e:	f7ff fa1f 	bl	8007650 <xTaskResumeAll>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <prvProcessTimerOrBlockTask+0x98>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
}
 8008228:	e001      	b.n	800822e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800822a:	f7ff fa11 	bl	8007650 <xTaskResumeAll>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200027b4 	.word	0x200027b4
 800823c:	200027b8 	.word	0x200027b8
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <prvGetNextExpireTime+0x44>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <prvGetNextExpireTime+0x44>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e001      	b.n	800827a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	200027b0 	.word	0x200027b0

0800828c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008294:	f7ff fa7a 	bl	800778c <xTaskGetTickCount>
 8008298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <prvSampleTimeNow+0x3c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d205      	bcs.n	80082b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082a4:	f000 f908 	bl	80084b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e002      	b.n	80082b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082b6:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <prvSampleTimeNow+0x3c>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082bc:	68fb      	ldr	r3, [r7, #12]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	200027c0 	.word	0x200027c0

080082cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d812      	bhi.n	8008318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e01b      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <prvInsertTimerInActiveList+0x7c>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fe f9f5 	bl	8006700 <vListInsert>
 8008316:	e012      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d206      	bcs.n	800832e <prvInsertTimerInActiveList+0x62>
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d302      	bcc.n	800832e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e007      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800832e:	4b07      	ldr	r3, [pc, #28]	; (800834c <prvInsertTimerInActiveList+0x80>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7fe f9e1 	bl	8006700 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800833e:	697b      	ldr	r3, [r7, #20]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	200027b4 	.word	0x200027b4
 800834c:	200027b0 	.word	0x200027b0

08008350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08e      	sub	sp, #56	; 0x38
 8008354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008356:	e09d      	b.n	8008494 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	da18      	bge.n	8008390 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	3304      	adds	r3, #4
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	61fb      	str	r3, [r7, #28]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008386:	6850      	ldr	r0, [r2, #4]
 8008388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838a:	6892      	ldr	r2, [r2, #8]
 800838c:	4611      	mov	r1, r2
 800838e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	db7e      	blt.n	8008494 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	3304      	adds	r3, #4
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe f9e2 	bl	8006770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083ac:	463b      	mov	r3, r7
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff ff6c 	bl	800828c <prvSampleTimeNow>
 80083b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	d86a      	bhi.n	8008492 <prvProcessReceivedCommands+0x142>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <prvProcessReceivedCommands+0x74>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083ed 	.word	0x080083ed
 80083d0:	08008495 	.word	0x08008495
 80083d4:	08008449 	.word	0x08008449
 80083d8:	08008481 	.word	0x08008481
 80083dc:	080083ed 	.word	0x080083ed
 80083e0:	080083ed 	.word	0x080083ed
 80083e4:	08008495 	.word	0x08008495
 80083e8:	08008449 	.word	0x08008449
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	18d1      	adds	r1, r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f7ff ff67 	bl	80082cc <prvInsertTimerInActiveList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d047      	beq.n	8008494 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d13f      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	441a      	add	r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008426:	f7ff fe1f 	bl	8008068 <xTimerGenericCommand>
 800842a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d130      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	61bb      	str	r3, [r7, #24]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	617b      	str	r3, [r7, #20]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	18d1      	adds	r1, r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847a:	f7ff ff27 	bl	80082cc <prvInsertTimerInActiveList>
					break;
 800847e:	e009      	b.n	8008494 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800848a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848c:	f000 fb6a 	bl	8008b64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008490:	e000      	b.n	8008494 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008492:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <prvProcessReceivedCommands+0x164>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	1d39      	adds	r1, r7, #4
 800849a:	2200      	movs	r2, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fc29 	bl	8006cf4 <xQueueReceive>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f47f af57 	bne.w	8008358 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	3730      	adds	r7, #48	; 0x30
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	200027b8 	.word	0x200027b8

080084b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084be:	e045      	b.n	800854c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084c0:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <prvSwitchTimerLists+0xbc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084ca:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <prvSwitchTimerLists+0xbc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe f949 	bl	8006770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d12e      	bne.n	800854c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d90e      	bls.n	800851e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <prvSwitchTimerLists+0xbc>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fe f8f2 	bl	8006700 <vListInsert>
 800851c:	e016      	b.n	800854c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800851e:	2300      	movs	r3, #0
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	2300      	movs	r3, #0
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	2100      	movs	r1, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fd9d 	bl	8008068 <xTimerGenericCommand>
 800852e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800854c:	4b09      	ldr	r3, [pc, #36]	; (8008574 <prvSwitchTimerLists+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1b4      	bne.n	80084c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <prvSwitchTimerLists+0xbc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <prvSwitchTimerLists+0xc0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a04      	ldr	r2, [pc, #16]	; (8008574 <prvSwitchTimerLists+0xbc>)
 8008562:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008564:	4a04      	ldr	r2, [pc, #16]	; (8008578 <prvSwitchTimerLists+0xc0>)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	6013      	str	r3, [r2, #0]
}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	200027b0 	.word	0x200027b0
 8008578:	200027b4 	.word	0x200027b4

0800857c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008582:	f000 f92b 	bl	80087dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008586:	4b15      	ldr	r3, [pc, #84]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d120      	bne.n	80085d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800858e:	4814      	ldr	r0, [pc, #80]	; (80085e0 <prvCheckForValidListAndQueue+0x64>)
 8008590:	f7fe f868 	bl	8006664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008594:	4813      	ldr	r0, [pc, #76]	; (80085e4 <prvCheckForValidListAndQueue+0x68>)
 8008596:	f7fe f865 	bl	8006664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <prvCheckForValidListAndQueue+0x6c>)
 800859c:	4a10      	ldr	r2, [pc, #64]	; (80085e0 <prvCheckForValidListAndQueue+0x64>)
 800859e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <prvCheckForValidListAndQueue+0x70>)
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <prvCheckForValidListAndQueue+0x68>)
 80085a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085a6:	2300      	movs	r3, #0
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <prvCheckForValidListAndQueue+0x74>)
 80085ac:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <prvCheckForValidListAndQueue+0x78>)
 80085ae:	2110      	movs	r1, #16
 80085b0:	200a      	movs	r0, #10
 80085b2:	f7fe f96f 	bl	8006894 <xQueueGenericCreateStatic>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4a08      	ldr	r2, [pc, #32]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	490b      	ldr	r1, [pc, #44]	; (80085f8 <prvCheckForValidListAndQueue+0x7c>)
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fd82 	bl	80070d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085d0:	f000 f934 	bl	800883c <vPortExitCritical>
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	200027b8 	.word	0x200027b8
 80085e0:	20002788 	.word	0x20002788
 80085e4:	2000279c 	.word	0x2000279c
 80085e8:	200027b0 	.word	0x200027b0
 80085ec:	200027b4 	.word	0x200027b4
 80085f0:	20002864 	.word	0x20002864
 80085f4:	200027c4 	.word	0x200027c4
 80085f8:	08009e90 	.word	0x08009e90

080085fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3b04      	subs	r3, #4
 800860c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3b04      	subs	r3, #4
 800861a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0201 	bic.w	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b04      	subs	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800862c:	4a08      	ldr	r2, [pc, #32]	; (8008650 <pxPortInitialiseStack+0x54>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3b14      	subs	r3, #20
 8008636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3b20      	subs	r3, #32
 8008642:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr
 8008650:	08008655 	.word	0x08008655

08008654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800865a:	2300      	movs	r3, #0
 800865c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <prvTaskExitError+0x54>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d00a      	beq.n	800867e <prvTaskExitError+0x2a>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60fb      	str	r3, [r7, #12]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <prvTaskExitError+0x28>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	60bb      	str	r3, [r7, #8]
}
 8008690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008692:	bf00      	nop
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0fc      	beq.n	8008694 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000014 	.word	0x20000014
 80086ac:	00000000 	.word	0x00000000

080086b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <pxCurrentTCBConst2>)
 80086b2:	6819      	ldr	r1, [r3, #0]
 80086b4:	6808      	ldr	r0, [r1, #0]
 80086b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086ba:	f380 8809 	msr	PSP, r0
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8811 	msr	BASEPRI, r0
 80086ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80086ce:	4770      	bx	lr

080086d0 <pxCurrentTCBConst2>:
 80086d0:	20002288 	.word	0x20002288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop

080086d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80086d8:	4806      	ldr	r0, [pc, #24]	; (80086f4 <prvPortStartFirstTask+0x1c>)
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	6800      	ldr	r0, [r0, #0]
 80086de:	f380 8808 	msr	MSP, r0
 80086e2:	b662      	cpsie	i
 80086e4:	b661      	cpsie	f
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	df00      	svc	0
 80086f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086f2:	bf00      	nop
 80086f4:	e000ed08 	.word	0xe000ed08

080086f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086fe:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <xPortStartScheduler+0xd0>)
 8008700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	22ff      	movs	r2, #255	; 0xff
 800870e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008720:	b2da      	uxtb	r2, r3
 8008722:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <xPortStartScheduler+0xd4>)
 8008724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008728:	2207      	movs	r2, #7
 800872a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800872c:	e009      	b.n	8008742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800872e:	4b28      	ldr	r3, [pc, #160]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3b01      	subs	r3, #1
 8008734:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	b2db      	uxtb	r3, r3
 8008740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874a:	2b80      	cmp	r3, #128	; 0x80
 800874c:	d0ef      	beq.n	800872e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800874e:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f1c3 0307 	rsb	r3, r3, #7
 8008756:	2b04      	cmp	r3, #4
 8008758:	d00a      	beq.n	8008770 <xPortStartScheduler+0x78>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60bb      	str	r3, [r7, #8]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008778:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <xPortStartScheduler+0xd8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008782:	4a13      	ldr	r2, [pc, #76]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008784:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <xPortStartScheduler+0xdc>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a10      	ldr	r2, [pc, #64]	; (80087d4 <xPortStartScheduler+0xdc>)
 8008794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <xPortStartScheduler+0xdc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a0d      	ldr	r2, [pc, #52]	; (80087d4 <xPortStartScheduler+0xdc>)
 80087a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087a6:	f000 f8b9 	bl	800891c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <xPortStartScheduler+0xe0>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087b0:	f7ff ff92 	bl	80086d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087b4:	f7ff f8b6 	bl	8007924 <vTaskSwitchContext>
	prvTaskExitError();
 80087b8:	f7ff ff4c 	bl	8008654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	e000e400 	.word	0xe000e400
 80087cc:	200028b4 	.word	0x200028b4
 80087d0:	200028b8 	.word	0x200028b8
 80087d4:	e000ed20 	.word	0xe000ed20
 80087d8:	20000014 	.word	0x20000014

080087dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <vPortEnterCritical+0x58>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	4a0d      	ldr	r2, [pc, #52]	; (8008834 <vPortEnterCritical+0x58>)
 80087fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <vPortEnterCritical+0x58>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d10f      	bne.n	8008828 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008808:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <vPortEnterCritical+0x5c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <vPortEnterCritical+0x4c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vPortEnterCritical+0x4a>
	}
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000014 	.word	0x20000014
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <vPortExitCritical+0x4c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <vPortExitCritical+0x24>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	607b      	str	r3, [r7, #4]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <vPortExitCritical+0x4c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3b01      	subs	r3, #1
 8008866:	4a08      	ldr	r2, [pc, #32]	; (8008888 <vPortExitCritical+0x4c>)
 8008868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <vPortExitCritical+0x4c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <vPortExitCritical+0x42>
 8008872:	2300      	movs	r3, #0
 8008874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f383 8811 	msr	BASEPRI, r3
}
 800887c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr
 8008888:	20000014 	.word	0x20000014
 800888c:	00000000 	.word	0x00000000

08008890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008890:	f3ef 8009 	mrs	r0, PSP
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <pxCurrentTCBConst>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088a0:	6010      	str	r0, [r2, #0]
 80088a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80088a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088aa:	f380 8811 	msr	BASEPRI, r0
 80088ae:	f7ff f839 	bl	8007924 <vTaskSwitchContext>
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088c6:	f380 8809 	msr	PSP, r0
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	4770      	bx	lr

080088d0 <pxCurrentTCBConst>:
 80088d0:	20002288 	.word	0x20002288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f2:	f7fe ff59 	bl	80077a8 <xTaskIncrementTick>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <SysTick_Handler+0x40>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <vPortSetupTimerInterrupt+0x30>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <vPortSetupTimerInterrupt+0x38>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <vPortSetupTimerInterrupt+0x3c>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	099b      	lsrs	r3, r3, #6
 8008938:	4a08      	ldr	r2, [pc, #32]	; (800895c <vPortSetupTimerInterrupt+0x40>)
 800893a:	3b01      	subs	r3, #1
 800893c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893e:	4b03      	ldr	r3, [pc, #12]	; (800894c <vPortSetupTimerInterrupt+0x30>)
 8008940:	2207      	movs	r2, #7
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	e000e010 	.word	0xe000e010
 8008950:	e000e018 	.word	0xe000e018
 8008954:	20000008 	.word	0x20000008
 8008958:	10624dd3 	.word	0x10624dd3
 800895c:	e000e014 	.word	0xe000e014

08008960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008966:	f3ef 8305 	mrs	r3, IPSR
 800896a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b0f      	cmp	r3, #15
 8008970:	d914      	bls.n	800899c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008972:	4a16      	ldr	r2, [pc, #88]	; (80089cc <vPortValidateInterruptPriority+0x6c>)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800897c:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <vPortValidateInterruptPriority+0x70>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	7afa      	ldrb	r2, [r7, #11]
 8008982:	429a      	cmp	r2, r3
 8008984:	d20a      	bcs.n	800899c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	607b      	str	r3, [r7, #4]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <vPortValidateInterruptPriority+0x74>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <vPortValidateInterruptPriority+0x78>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d90a      	bls.n	80089c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	603b      	str	r3, [r7, #0]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vPortValidateInterruptPriority+0x60>
	}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr
 80089cc:	e000e3f0 	.word	0xe000e3f0
 80089d0:	200028b4 	.word	0x200028b4
 80089d4:	e000ed0c 	.word	0xe000ed0c
 80089d8:	200028b8 	.word	0x200028b8

080089dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089e8:	f7fe fe24 	bl	8007634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089ec:	4b58      	ldr	r3, [pc, #352]	; (8008b50 <pvPortMalloc+0x174>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089f4:	f000 f910 	bl	8008c18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089f8:	4b56      	ldr	r3, [pc, #344]	; (8008b54 <pvPortMalloc+0x178>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 808e 	bne.w	8008b22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01d      	beq.n	8008a48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4413      	add	r3, r2
 8008a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d014      	beq.n	8008a48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f023 0307 	bic.w	r3, r3, #7
 8008a24:	3308      	adds	r3, #8
 8008a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <pvPortMalloc+0x6c>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	617b      	str	r3, [r7, #20]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d069      	beq.n	8008b22 <pvPortMalloc+0x146>
 8008a4e:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <pvPortMalloc+0x17c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d864      	bhi.n	8008b22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a58:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <pvPortMalloc+0x180>)
 8008a5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a5c:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <pvPortMalloc+0x180>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a62:	e004      	b.n	8008a6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d903      	bls.n	8008a80 <pvPortMalloc+0xa4>
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f1      	bne.n	8008a64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a80:	4b33      	ldr	r3, [pc, #204]	; (8008b50 <pvPortMalloc+0x174>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d04b      	beq.n	8008b22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2208      	movs	r2, #8
 8008a90:	4413      	add	r3, r2
 8008a92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d91f      	bls.n	8008aec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <pvPortMalloc+0xf8>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	613b      	str	r3, [r7, #16]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f000 f8f8 	bl	8008cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <pvPortMalloc+0x17c>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <pvPortMalloc+0x17c>)
 8008af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008afa:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <pvPortMalloc+0x17c>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <pvPortMalloc+0x184>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d203      	bcs.n	8008b0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <pvPortMalloc+0x17c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <pvPortMalloc+0x184>)
 8008b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4b10      	ldr	r3, [pc, #64]	; (8008b54 <pvPortMalloc+0x178>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b22:	f7fe fd95 	bl	8007650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <pvPortMalloc+0x16a>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <pvPortMalloc+0x168>
	return pvReturn;
 8008b46:	69fb      	ldr	r3, [r7, #28]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3728      	adds	r7, #40	; 0x28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20004034 	.word	0x20004034
 8008b54:	20004040 	.word	0x20004040
 8008b58:	20004038 	.word	0x20004038
 8008b5c:	2000402c 	.word	0x2000402c
 8008b60:	2000403c 	.word	0x2000403c

08008b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d048      	beq.n	8008c08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b76:	2308      	movs	r3, #8
 8008b78:	425b      	negs	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <vPortFree+0xac>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <vPortFree+0x44>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <vPortFree+0x62>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	60bb      	str	r3, [r7, #8]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <vPortFree+0xac>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d019      	beq.n	8008c08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d115      	bne.n	8008c08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <vPortFree+0xac>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	401a      	ands	r2, r3
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bec:	f7fe fd22 	bl	8007634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <vPortFree+0xb0>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	4a06      	ldr	r2, [pc, #24]	; (8008c14 <vPortFree+0xb0>)
 8008bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bfe:	6938      	ldr	r0, [r7, #16]
 8008c00:	f000 f86c 	bl	8008cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c04:	f7fe fd24 	bl	8007650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c08:	bf00      	nop
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20004040 	.word	0x20004040
 8008c14:	20004038 	.word	0x20004038

08008c18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c1e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008c22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c24:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <prvHeapInit+0xac>)
 8008c26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00c      	beq.n	8008c4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3307      	adds	r3, #7
 8008c36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0307 	bic.w	r3, r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	4a1f      	ldr	r2, [pc, #124]	; (8008cc4 <prvHeapInit+0xac>)
 8008c48:	4413      	add	r3, r2
 8008c4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c50:	4a1d      	ldr	r2, [pc, #116]	; (8008cc8 <prvHeapInit+0xb0>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c56:	4b1c      	ldr	r3, [pc, #112]	; (8008cc8 <prvHeapInit+0xb0>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	4413      	add	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c64:	2208      	movs	r2, #8
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4a15      	ldr	r2, [pc, #84]	; (8008ccc <prvHeapInit+0xb4>)
 8008c78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c7a:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <prvHeapInit+0xb4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c82:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <prvHeapInit+0xb4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <prvHeapInit+0xb4>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <prvHeapInit+0xb8>)
 8008ca6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <prvHeapInit+0xbc>)
 8008cae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cb0:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <prvHeapInit+0xc0>)
 8008cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cb6:	601a      	str	r2, [r3, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	200028bc 	.word	0x200028bc
 8008cc8:	2000402c 	.word	0x2000402c
 8008ccc:	20004034 	.word	0x20004034
 8008cd0:	2000403c 	.word	0x2000403c
 8008cd4:	20004038 	.word	0x20004038
 8008cd8:	20004040 	.word	0x20004040

08008cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ce4:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <prvInsertBlockIntoFreeList+0xa8>)
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e002      	b.n	8008cf0 <prvInsertBlockIntoFreeList+0x14>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d8f7      	bhi.n	8008cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d108      	bne.n	8008d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	441a      	add	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d118      	bne.n	8008d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <prvInsertBlockIntoFreeList+0xac>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d00d      	beq.n	8008d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e008      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <prvInsertBlockIntoFreeList+0xac>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e003      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d002      	beq.n	8008d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr
 8008d84:	2000402c 	.word	0x2000402c
 8008d88:	20004034 	.word	0x20004034

08008d8c <memset>:
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	4402      	add	r2, r0
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d100      	bne.n	8008d96 <memset+0xa>
 8008d94:	4770      	bx	lr
 8008d96:	f803 1b01 	strb.w	r1, [r3], #1
 8008d9a:	e7f9      	b.n	8008d90 <memset+0x4>

08008d9c <strncmp>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	b16a      	cbz	r2, 8008dbc <strncmp+0x20>
 8008da0:	3901      	subs	r1, #1
 8008da2:	1884      	adds	r4, r0, r2
 8008da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d103      	bne.n	8008db8 <strncmp+0x1c>
 8008db0:	42a0      	cmp	r0, r4
 8008db2:	d001      	beq.n	8008db8 <strncmp+0x1c>
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d1f5      	bne.n	8008da4 <strncmp+0x8>
 8008db8:	1ad0      	subs	r0, r2, r3
 8008dba:	bd10      	pop	{r4, pc}
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	e7fc      	b.n	8008dba <strncmp+0x1e>

08008dc0 <strncpy>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	3901      	subs	r1, #1
 8008dc6:	b132      	cbz	r2, 8008dd6 <strncpy+0x16>
 8008dc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008dcc:	3a01      	subs	r2, #1
 8008dce:	f803 4b01 	strb.w	r4, [r3], #1
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	d1f7      	bne.n	8008dc6 <strncpy+0x6>
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	441a      	add	r2, r3
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d100      	bne.n	8008de0 <strncpy+0x20>
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	f803 1b01 	strb.w	r1, [r3], #1
 8008de4:	e7f9      	b.n	8008dda <strncpy+0x1a>
	...

08008de8 <_reclaim_reent>:
 8008de8:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <_reclaim_reent+0xa8>)
 8008dea:	b570      	push	{r4, r5, r6, lr}
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4604      	mov	r4, r0
 8008df0:	4283      	cmp	r3, r0
 8008df2:	d04b      	beq.n	8008e8c <_reclaim_reent+0xa4>
 8008df4:	69c3      	ldr	r3, [r0, #28]
 8008df6:	b143      	cbz	r3, 8008e0a <_reclaim_reent+0x22>
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d144      	bne.n	8008e88 <_reclaim_reent+0xa0>
 8008dfe:	69e3      	ldr	r3, [r4, #28]
 8008e00:	6819      	ldr	r1, [r3, #0]
 8008e02:	b111      	cbz	r1, 8008e0a <_reclaim_reent+0x22>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f87f 	bl	8008f08 <_free_r>
 8008e0a:	6961      	ldr	r1, [r4, #20]
 8008e0c:	b111      	cbz	r1, 8008e14 <_reclaim_reent+0x2c>
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f87a 	bl	8008f08 <_free_r>
 8008e14:	69e1      	ldr	r1, [r4, #28]
 8008e16:	b111      	cbz	r1, 8008e1e <_reclaim_reent+0x36>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 f875 	bl	8008f08 <_free_r>
 8008e1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008e20:	b111      	cbz	r1, 8008e28 <_reclaim_reent+0x40>
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f870 	bl	8008f08 <_free_r>
 8008e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e2a:	b111      	cbz	r1, 8008e32 <_reclaim_reent+0x4a>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 f86b 	bl	8008f08 <_free_r>
 8008e32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e34:	b111      	cbz	r1, 8008e3c <_reclaim_reent+0x54>
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f866 	bl	8008f08 <_free_r>
 8008e3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e3e:	b111      	cbz	r1, 8008e46 <_reclaim_reent+0x5e>
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 f861 	bl	8008f08 <_free_r>
 8008e46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008e48:	b111      	cbz	r1, 8008e50 <_reclaim_reent+0x68>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f85c 	bl	8008f08 <_free_r>
 8008e50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008e52:	b111      	cbz	r1, 8008e5a <_reclaim_reent+0x72>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 f857 	bl	8008f08 <_free_r>
 8008e5a:	6a23      	ldr	r3, [r4, #32]
 8008e5c:	b1b3      	cbz	r3, 8008e8c <_reclaim_reent+0xa4>
 8008e5e:	4620      	mov	r0, r4
 8008e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e64:	4718      	bx	r3
 8008e66:	5949      	ldr	r1, [r1, r5]
 8008e68:	b941      	cbnz	r1, 8008e7c <_reclaim_reent+0x94>
 8008e6a:	3504      	adds	r5, #4
 8008e6c:	69e3      	ldr	r3, [r4, #28]
 8008e6e:	2d80      	cmp	r5, #128	; 0x80
 8008e70:	68d9      	ldr	r1, [r3, #12]
 8008e72:	d1f8      	bne.n	8008e66 <_reclaim_reent+0x7e>
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 f847 	bl	8008f08 <_free_r>
 8008e7a:	e7c0      	b.n	8008dfe <_reclaim_reent+0x16>
 8008e7c:	680e      	ldr	r6, [r1, #0]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f842 	bl	8008f08 <_free_r>
 8008e84:	4631      	mov	r1, r6
 8008e86:	e7ef      	b.n	8008e68 <_reclaim_reent+0x80>
 8008e88:	2500      	movs	r5, #0
 8008e8a:	e7ef      	b.n	8008e6c <_reclaim_reent+0x84>
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000064 	.word	0x20000064

08008e94 <__errno>:
 8008e94:	4b01      	ldr	r3, [pc, #4]	; (8008e9c <__errno+0x8>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20000064 	.word	0x20000064

08008ea0 <__libc_init_array>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	4d0c      	ldr	r5, [pc, #48]	; (8008ed8 <__libc_init_array+0x38>)
 8008ea6:	4c0d      	ldr	r4, [pc, #52]	; (8008edc <__libc_init_array+0x3c>)
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	42a6      	cmp	r6, r4
 8008eae:	d109      	bne.n	8008ec4 <__libc_init_array+0x24>
 8008eb0:	f000 ff88 	bl	8009dc4 <_init>
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	4d0a      	ldr	r5, [pc, #40]	; (8008ee0 <__libc_init_array+0x40>)
 8008eb8:	4c0a      	ldr	r4, [pc, #40]	; (8008ee4 <__libc_init_array+0x44>)
 8008eba:	1b64      	subs	r4, r4, r5
 8008ebc:	10a4      	asrs	r4, r4, #2
 8008ebe:	42a6      	cmp	r6, r4
 8008ec0:	d105      	bne.n	8008ece <__libc_init_array+0x2e>
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec8:	4798      	blx	r3
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7ee      	b.n	8008eac <__libc_init_array+0xc>
 8008ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed2:	4798      	blx	r3
 8008ed4:	3601      	adds	r6, #1
 8008ed6:	e7f2      	b.n	8008ebe <__libc_init_array+0x1e>
 8008ed8:	08009f98 	.word	0x08009f98
 8008edc:	08009f98 	.word	0x08009f98
 8008ee0:	08009f98 	.word	0x08009f98
 8008ee4:	08009f9c 	.word	0x08009f9c

08008ee8 <__retarget_lock_acquire_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_release_recursive>:
 8008eea:	4770      	bx	lr

08008eec <memcpy>:
 8008eec:	440a      	add	r2, r1
 8008eee:	4291      	cmp	r1, r2
 8008ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ef4:	d100      	bne.n	8008ef8 <memcpy+0xc>
 8008ef6:	4770      	bx	lr
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efe:	4291      	cmp	r1, r2
 8008f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f04:	d1f9      	bne.n	8008efa <memcpy+0xe>
 8008f06:	bd10      	pop	{r4, pc}

08008f08 <_free_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d040      	beq.n	8008f92 <_free_r+0x8a>
 8008f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f14:	1f0c      	subs	r4, r1, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	18e4      	addlt	r4, r4, r3
 8008f1c:	f000 f83c 	bl	8008f98 <__malloc_lock>
 8008f20:	4a1c      	ldr	r2, [pc, #112]	; (8008f94 <_free_r+0x8c>)
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	b933      	cbnz	r3, 8008f34 <_free_r+0x2c>
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f30:	f000 b838 	b.w	8008fa4 <__malloc_unlock>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d908      	bls.n	8008f4a <_free_r+0x42>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	1821      	adds	r1, r4, r0
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	bf01      	itttt	eq
 8008f40:	6819      	ldreq	r1, [r3, #0]
 8008f42:	685b      	ldreq	r3, [r3, #4]
 8008f44:	1809      	addeq	r1, r1, r0
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	e7ed      	b.n	8008f26 <_free_r+0x1e>
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b10b      	cbz	r3, 8008f54 <_free_r+0x4c>
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d9fa      	bls.n	8008f4a <_free_r+0x42>
 8008f54:	6811      	ldr	r1, [r2, #0]
 8008f56:	1850      	adds	r0, r2, r1
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d10b      	bne.n	8008f74 <_free_r+0x6c>
 8008f5c:	6820      	ldr	r0, [r4, #0]
 8008f5e:	4401      	add	r1, r0
 8008f60:	1850      	adds	r0, r2, r1
 8008f62:	4283      	cmp	r3, r0
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	d1e0      	bne.n	8008f2a <_free_r+0x22>
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4408      	add	r0, r1
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	e7da      	b.n	8008f2a <_free_r+0x22>
 8008f74:	d902      	bls.n	8008f7c <_free_r+0x74>
 8008f76:	230c      	movs	r3, #12
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	e7d6      	b.n	8008f2a <_free_r+0x22>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	1821      	adds	r1, r4, r0
 8008f80:	428b      	cmp	r3, r1
 8008f82:	bf01      	itttt	eq
 8008f84:	6819      	ldreq	r1, [r3, #0]
 8008f86:	685b      	ldreq	r3, [r3, #4]
 8008f88:	1809      	addeq	r1, r1, r0
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	6063      	str	r3, [r4, #4]
 8008f8e:	6054      	str	r4, [r2, #4]
 8008f90:	e7cb      	b.n	8008f2a <_free_r+0x22>
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20004180 	.word	0x20004180

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f7ff bfa5 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	2000417c 	.word	0x2000417c

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f7ff bfa0 	b.w	8008eea <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	2000417c 	.word	0x2000417c

08008fb0 <pow>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	461d      	mov	r5, r3
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4689      	mov	r9, r1
 8008fbc:	f000 f868 	bl	8009090 <__ieee754_pow>
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	462b      	mov	r3, r5
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 fd1e 	bl	8000a0c <__aeabi_dcmpun>
 8008fd0:	bbc8      	cbnz	r0, 8009046 <pow+0x96>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	4649      	mov	r1, r9
 8008fda:	f7f7 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8008fde:	b1b8      	cbz	r0, 8009010 <pow+0x60>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d141      	bne.n	8009074 <pow+0xc4>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	f000 f844 	bl	8009080 <finite>
 8008ff8:	b328      	cbz	r0, 8009046 <pow+0x96>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 fcdb 	bl	80009bc <__aeabi_dcmplt>
 8009006:	b1f0      	cbz	r0, 8009046 <pow+0x96>
 8009008:	f7ff ff44 	bl	8008e94 <__errno>
 800900c:	2322      	movs	r3, #34	; 0x22
 800900e:	e019      	b.n	8009044 <pow+0x94>
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f000 f834 	bl	8009080 <finite>
 8009018:	b9c8      	cbnz	r0, 800904e <pow+0x9e>
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f000 f82f 	bl	8009080 <finite>
 8009022:	b1a0      	cbz	r0, 800904e <pow+0x9e>
 8009024:	4620      	mov	r0, r4
 8009026:	4629      	mov	r1, r5
 8009028:	f000 f82a 	bl	8009080 <finite>
 800902c:	b178      	cbz	r0, 800904e <pow+0x9e>
 800902e:	4632      	mov	r2, r6
 8009030:	463b      	mov	r3, r7
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 fce9 	bl	8000a0c <__aeabi_dcmpun>
 800903a:	2800      	cmp	r0, #0
 800903c:	d0e4      	beq.n	8009008 <pow+0x58>
 800903e:	f7ff ff29 	bl	8008e94 <__errno>
 8009042:	2321      	movs	r3, #33	; 0x21
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904e:	2200      	movs	r2, #0
 8009050:	2300      	movs	r3, #0
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800905a:	2800      	cmp	r0, #0
 800905c:	d0f3      	beq.n	8009046 <pow+0x96>
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f000 f80d 	bl	8009080 <finite>
 8009066:	2800      	cmp	r0, #0
 8009068:	d0ed      	beq.n	8009046 <pow+0x96>
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f000 f807 	bl	8009080 <finite>
 8009072:	e7c8      	b.n	8009006 <pow+0x56>
 8009074:	2600      	movs	r6, #0
 8009076:	4f01      	ldr	r7, [pc, #4]	; (800907c <pow+0xcc>)
 8009078:	e7e5      	b.n	8009046 <pow+0x96>
 800907a:	bf00      	nop
 800907c:	3ff00000 	.word	0x3ff00000

08009080 <finite>:
 8009080:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009084:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009088:	0fc0      	lsrs	r0, r0, #31
 800908a:	4770      	bx	lr
 800908c:	0000      	movs	r0, r0
	...

08009090 <__ieee754_pow>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	b093      	sub	sp, #76	; 0x4c
 8009096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800909a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800909e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80090a2:	4689      	mov	r9, r1
 80090a4:	ea56 0102 	orrs.w	r1, r6, r2
 80090a8:	4680      	mov	r8, r0
 80090aa:	d111      	bne.n	80090d0 <__ieee754_pow+0x40>
 80090ac:	1803      	adds	r3, r0, r0
 80090ae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80090b2:	4152      	adcs	r2, r2
 80090b4:	4299      	cmp	r1, r3
 80090b6:	4b82      	ldr	r3, [pc, #520]	; (80092c0 <__ieee754_pow+0x230>)
 80090b8:	4193      	sbcs	r3, r2
 80090ba:	f080 84ba 	bcs.w	8009a32 <__ieee754_pow+0x9a2>
 80090be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 f851 	bl	800016c <__adddf3>
 80090ca:	4683      	mov	fp, r0
 80090cc:	468c      	mov	ip, r1
 80090ce:	e06f      	b.n	80091b0 <__ieee754_pow+0x120>
 80090d0:	4b7c      	ldr	r3, [pc, #496]	; (80092c4 <__ieee754_pow+0x234>)
 80090d2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80090d6:	429c      	cmp	r4, r3
 80090d8:	464d      	mov	r5, r9
 80090da:	4682      	mov	sl, r0
 80090dc:	dc06      	bgt.n	80090ec <__ieee754_pow+0x5c>
 80090de:	d101      	bne.n	80090e4 <__ieee754_pow+0x54>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d1ec      	bne.n	80090be <__ieee754_pow+0x2e>
 80090e4:	429e      	cmp	r6, r3
 80090e6:	dc01      	bgt.n	80090ec <__ieee754_pow+0x5c>
 80090e8:	d10f      	bne.n	800910a <__ieee754_pow+0x7a>
 80090ea:	b172      	cbz	r2, 800910a <__ieee754_pow+0x7a>
 80090ec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80090f0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80090f4:	ea55 050a 	orrs.w	r5, r5, sl
 80090f8:	d1e1      	bne.n	80090be <__ieee754_pow+0x2e>
 80090fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090fe:	18db      	adds	r3, r3, r3
 8009100:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009104:	4152      	adcs	r2, r2
 8009106:	429d      	cmp	r5, r3
 8009108:	e7d5      	b.n	80090b6 <__ieee754_pow+0x26>
 800910a:	2d00      	cmp	r5, #0
 800910c:	da39      	bge.n	8009182 <__ieee754_pow+0xf2>
 800910e:	4b6e      	ldr	r3, [pc, #440]	; (80092c8 <__ieee754_pow+0x238>)
 8009110:	429e      	cmp	r6, r3
 8009112:	dc52      	bgt.n	80091ba <__ieee754_pow+0x12a>
 8009114:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009118:	429e      	cmp	r6, r3
 800911a:	f340 849d 	ble.w	8009a58 <__ieee754_pow+0x9c8>
 800911e:	1533      	asrs	r3, r6, #20
 8009120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009124:	2b14      	cmp	r3, #20
 8009126:	dd0f      	ble.n	8009148 <__ieee754_pow+0xb8>
 8009128:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800912c:	fa22 f103 	lsr.w	r1, r2, r3
 8009130:	fa01 f303 	lsl.w	r3, r1, r3
 8009134:	4293      	cmp	r3, r2
 8009136:	f040 848f 	bne.w	8009a58 <__ieee754_pow+0x9c8>
 800913a:	f001 0101 	and.w	r1, r1, #1
 800913e:	f1c1 0302 	rsb	r3, r1, #2
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	b182      	cbz	r2, 8009168 <__ieee754_pow+0xd8>
 8009146:	e05d      	b.n	8009204 <__ieee754_pow+0x174>
 8009148:	2a00      	cmp	r2, #0
 800914a:	d159      	bne.n	8009200 <__ieee754_pow+0x170>
 800914c:	f1c3 0314 	rsb	r3, r3, #20
 8009150:	fa46 f103 	asr.w	r1, r6, r3
 8009154:	fa01 f303 	lsl.w	r3, r1, r3
 8009158:	42b3      	cmp	r3, r6
 800915a:	f040 847a 	bne.w	8009a52 <__ieee754_pow+0x9c2>
 800915e:	f001 0101 	and.w	r1, r1, #1
 8009162:	f1c1 0302 	rsb	r3, r1, #2
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4b58      	ldr	r3, [pc, #352]	; (80092cc <__ieee754_pow+0x23c>)
 800916a:	429e      	cmp	r6, r3
 800916c:	d132      	bne.n	80091d4 <__ieee754_pow+0x144>
 800916e:	2f00      	cmp	r7, #0
 8009170:	f280 846b 	bge.w	8009a4a <__ieee754_pow+0x9ba>
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	2000      	movs	r0, #0
 800917a:	4954      	ldr	r1, [pc, #336]	; (80092cc <__ieee754_pow+0x23c>)
 800917c:	f7f7 fad6 	bl	800072c <__aeabi_ddiv>
 8009180:	e7a3      	b.n	80090ca <__ieee754_pow+0x3a>
 8009182:	2300      	movs	r3, #0
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2a00      	cmp	r2, #0
 8009188:	d13c      	bne.n	8009204 <__ieee754_pow+0x174>
 800918a:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <__ieee754_pow+0x234>)
 800918c:	429e      	cmp	r6, r3
 800918e:	d1eb      	bne.n	8009168 <__ieee754_pow+0xd8>
 8009190:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009194:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009198:	ea53 030a 	orrs.w	r3, r3, sl
 800919c:	f000 8449 	beq.w	8009a32 <__ieee754_pow+0x9a2>
 80091a0:	4b4b      	ldr	r3, [pc, #300]	; (80092d0 <__ieee754_pow+0x240>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	dd0b      	ble.n	80091be <__ieee754_pow+0x12e>
 80091a6:	2f00      	cmp	r7, #0
 80091a8:	f2c0 8449 	blt.w	8009a3e <__ieee754_pow+0x9ae>
 80091ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80091b0:	4658      	mov	r0, fp
 80091b2:	4661      	mov	r1, ip
 80091b4:	b013      	add	sp, #76	; 0x4c
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	2302      	movs	r3, #2
 80091bc:	e7e2      	b.n	8009184 <__ieee754_pow+0xf4>
 80091be:	2f00      	cmp	r7, #0
 80091c0:	f04f 0b00 	mov.w	fp, #0
 80091c4:	f04f 0c00 	mov.w	ip, #0
 80091c8:	daf2      	bge.n	80091b0 <__ieee754_pow+0x120>
 80091ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80091ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80091d2:	e7ed      	b.n	80091b0 <__ieee754_pow+0x120>
 80091d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80091d8:	d106      	bne.n	80091e8 <__ieee754_pow+0x158>
 80091da:	4642      	mov	r2, r8
 80091dc:	464b      	mov	r3, r9
 80091de:	4640      	mov	r0, r8
 80091e0:	4649      	mov	r1, r9
 80091e2:	f7f7 f979 	bl	80004d8 <__aeabi_dmul>
 80091e6:	e770      	b.n	80090ca <__ieee754_pow+0x3a>
 80091e8:	4b3a      	ldr	r3, [pc, #232]	; (80092d4 <__ieee754_pow+0x244>)
 80091ea:	429f      	cmp	r7, r3
 80091ec:	d10a      	bne.n	8009204 <__ieee754_pow+0x174>
 80091ee:	2d00      	cmp	r5, #0
 80091f0:	db08      	blt.n	8009204 <__ieee754_pow+0x174>
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	b013      	add	sp, #76	; 0x4c
 80091f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	f000 bd0a 	b.w	8009c14 <__ieee754_sqrt>
 8009200:	2300      	movs	r3, #0
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f000 fc58 	bl	8009abc <fabs>
 800920c:	4683      	mov	fp, r0
 800920e:	468c      	mov	ip, r1
 8009210:	f1ba 0f00 	cmp.w	sl, #0
 8009214:	d128      	bne.n	8009268 <__ieee754_pow+0x1d8>
 8009216:	b124      	cbz	r4, 8009222 <__ieee754_pow+0x192>
 8009218:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <__ieee754_pow+0x23c>)
 800921a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800921e:	429a      	cmp	r2, r3
 8009220:	d122      	bne.n	8009268 <__ieee754_pow+0x1d8>
 8009222:	2f00      	cmp	r7, #0
 8009224:	da07      	bge.n	8009236 <__ieee754_pow+0x1a6>
 8009226:	465a      	mov	r2, fp
 8009228:	4663      	mov	r3, ip
 800922a:	2000      	movs	r0, #0
 800922c:	4927      	ldr	r1, [pc, #156]	; (80092cc <__ieee754_pow+0x23c>)
 800922e:	f7f7 fa7d 	bl	800072c <__aeabi_ddiv>
 8009232:	4683      	mov	fp, r0
 8009234:	468c      	mov	ip, r1
 8009236:	2d00      	cmp	r5, #0
 8009238:	daba      	bge.n	80091b0 <__ieee754_pow+0x120>
 800923a:	9b00      	ldr	r3, [sp, #0]
 800923c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009240:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009244:	431c      	orrs	r4, r3
 8009246:	d108      	bne.n	800925a <__ieee754_pow+0x1ca>
 8009248:	465a      	mov	r2, fp
 800924a:	4663      	mov	r3, ip
 800924c:	4658      	mov	r0, fp
 800924e:	4661      	mov	r1, ip
 8009250:	f7f6 ff8a 	bl	8000168 <__aeabi_dsub>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	e790      	b.n	800917c <__ieee754_pow+0xec>
 800925a:	9b00      	ldr	r3, [sp, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d1a7      	bne.n	80091b0 <__ieee754_pow+0x120>
 8009260:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009264:	469c      	mov	ip, r3
 8009266:	e7a3      	b.n	80091b0 <__ieee754_pow+0x120>
 8009268:	0feb      	lsrs	r3, r5, #31
 800926a:	3b01      	subs	r3, #1
 800926c:	930c      	str	r3, [sp, #48]	; 0x30
 800926e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	d104      	bne.n	8009280 <__ieee754_pow+0x1f0>
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	4640      	mov	r0, r8
 800927c:	4649      	mov	r1, r9
 800927e:	e7e7      	b.n	8009250 <__ieee754_pow+0x1c0>
 8009280:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <__ieee754_pow+0x248>)
 8009282:	429e      	cmp	r6, r3
 8009284:	f340 80f6 	ble.w	8009474 <__ieee754_pow+0x3e4>
 8009288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800928c:	429e      	cmp	r6, r3
 800928e:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <__ieee754_pow+0x240>)
 8009290:	dd09      	ble.n	80092a6 <__ieee754_pow+0x216>
 8009292:	429c      	cmp	r4, r3
 8009294:	dc0c      	bgt.n	80092b0 <__ieee754_pow+0x220>
 8009296:	2f00      	cmp	r7, #0
 8009298:	da0c      	bge.n	80092b4 <__ieee754_pow+0x224>
 800929a:	2000      	movs	r0, #0
 800929c:	b013      	add	sp, #76	; 0x4c
 800929e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a2:	f000 bcb2 	b.w	8009c0a <__math_oflow>
 80092a6:	429c      	cmp	r4, r3
 80092a8:	dbf5      	blt.n	8009296 <__ieee754_pow+0x206>
 80092aa:	4b08      	ldr	r3, [pc, #32]	; (80092cc <__ieee754_pow+0x23c>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	dd15      	ble.n	80092dc <__ieee754_pow+0x24c>
 80092b0:	2f00      	cmp	r7, #0
 80092b2:	dcf2      	bgt.n	800929a <__ieee754_pow+0x20a>
 80092b4:	2000      	movs	r0, #0
 80092b6:	b013      	add	sp, #76	; 0x4c
 80092b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	f000 bca0 	b.w	8009c00 <__math_uflow>
 80092c0:	fff00000 	.word	0xfff00000
 80092c4:	7ff00000 	.word	0x7ff00000
 80092c8:	433fffff 	.word	0x433fffff
 80092cc:	3ff00000 	.word	0x3ff00000
 80092d0:	3fefffff 	.word	0x3fefffff
 80092d4:	3fe00000 	.word	0x3fe00000
 80092d8:	41e00000 	.word	0x41e00000
 80092dc:	4661      	mov	r1, ip
 80092de:	2200      	movs	r2, #0
 80092e0:	4658      	mov	r0, fp
 80092e2:	4b5f      	ldr	r3, [pc, #380]	; (8009460 <__ieee754_pow+0x3d0>)
 80092e4:	f7f6 ff40 	bl	8000168 <__aeabi_dsub>
 80092e8:	a355      	add	r3, pc, #340	; (adr r3, 8009440 <__ieee754_pow+0x3b0>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	4604      	mov	r4, r0
 80092f0:	460d      	mov	r5, r1
 80092f2:	f7f7 f8f1 	bl	80004d8 <__aeabi_dmul>
 80092f6:	a354      	add	r3, pc, #336	; (adr r3, 8009448 <__ieee754_pow+0x3b8>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	4606      	mov	r6, r0
 80092fe:	460f      	mov	r7, r1
 8009300:	4620      	mov	r0, r4
 8009302:	4629      	mov	r1, r5
 8009304:	f7f7 f8e8 	bl	80004d8 <__aeabi_dmul>
 8009308:	2200      	movs	r2, #0
 800930a:	4682      	mov	sl, r0
 800930c:	468b      	mov	fp, r1
 800930e:	4620      	mov	r0, r4
 8009310:	4629      	mov	r1, r5
 8009312:	4b54      	ldr	r3, [pc, #336]	; (8009464 <__ieee754_pow+0x3d4>)
 8009314:	f7f7 f8e0 	bl	80004d8 <__aeabi_dmul>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	a14c      	add	r1, pc, #304	; (adr r1, 8009450 <__ieee754_pow+0x3c0>)
 800931e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009322:	f7f6 ff21 	bl	8000168 <__aeabi_dsub>
 8009326:	4622      	mov	r2, r4
 8009328:	462b      	mov	r3, r5
 800932a:	f7f7 f8d5 	bl	80004d8 <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	2000      	movs	r0, #0
 8009334:	494c      	ldr	r1, [pc, #304]	; (8009468 <__ieee754_pow+0x3d8>)
 8009336:	f7f6 ff17 	bl	8000168 <__aeabi_dsub>
 800933a:	4622      	mov	r2, r4
 800933c:	462b      	mov	r3, r5
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	4620      	mov	r0, r4
 8009344:	4629      	mov	r1, r5
 8009346:	f7f7 f8c7 	bl	80004d8 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 f8c1 	bl	80004d8 <__aeabi_dmul>
 8009356:	a340      	add	r3, pc, #256	; (adr r3, 8009458 <__ieee754_pow+0x3c8>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f7 f8bc 	bl	80004d8 <__aeabi_dmul>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4650      	mov	r0, sl
 8009366:	4659      	mov	r1, fp
 8009368:	f7f6 fefe 	bl	8000168 <__aeabi_dsub>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 fef8 	bl	800016c <__adddf3>
 800937c:	2000      	movs	r0, #0
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	4682      	mov	sl, r0
 8009384:	468b      	mov	fp, r1
 8009386:	f7f6 feef 	bl	8000168 <__aeabi_dsub>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	f7f6 fee9 	bl	8000168 <__aeabi_dsub>
 8009396:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939e:	3b01      	subs	r3, #1
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f04f 0600 	mov.w	r6, #0
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	bf0c      	ite	eq
 80093ac:	4b2f      	ldreq	r3, [pc, #188]	; (800946c <__ieee754_pow+0x3dc>)
 80093ae:	4b2c      	ldrne	r3, [pc, #176]	; (8009460 <__ieee754_pow+0x3d0>)
 80093b0:	4604      	mov	r4, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b8:	e9cd 2300 	strd	r2, r3, [sp]
 80093bc:	4632      	mov	r2, r6
 80093be:	463b      	mov	r3, r7
 80093c0:	f7f6 fed2 	bl	8000168 <__aeabi_dsub>
 80093c4:	4652      	mov	r2, sl
 80093c6:	465b      	mov	r3, fp
 80093c8:	f7f7 f886 	bl	80004d8 <__aeabi_dmul>
 80093cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f87e 	bl	80004d8 <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f6 fec2 	bl	800016c <__adddf3>
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	4680      	mov	r8, r0
 80093ee:	4689      	mov	r9, r1
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	f7f7 f870 	bl	80004d8 <__aeabi_dmul>
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	460b      	mov	r3, r1
 80093fe:	4602      	mov	r2, r0
 8009400:	4649      	mov	r1, r9
 8009402:	4640      	mov	r0, r8
 8009404:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009408:	f7f6 feb0 	bl	800016c <__adddf3>
 800940c:	4b18      	ldr	r3, [pc, #96]	; (8009470 <__ieee754_pow+0x3e0>)
 800940e:	4682      	mov	sl, r0
 8009410:	4299      	cmp	r1, r3
 8009412:	460f      	mov	r7, r1
 8009414:	460e      	mov	r6, r1
 8009416:	f340 82e7 	ble.w	80099e8 <__ieee754_pow+0x958>
 800941a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800941e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009422:	4303      	orrs	r3, r0
 8009424:	f000 81e2 	beq.w	80097ec <__ieee754_pow+0x75c>
 8009428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	f7f7 fac4 	bl	80009bc <__aeabi_dcmplt>
 8009434:	3800      	subs	r0, #0
 8009436:	bf18      	it	ne
 8009438:	2001      	movne	r0, #1
 800943a:	e72f      	b.n	800929c <__ieee754_pow+0x20c>
 800943c:	f3af 8000 	nop.w
 8009440:	60000000 	.word	0x60000000
 8009444:	3ff71547 	.word	0x3ff71547
 8009448:	f85ddf44 	.word	0xf85ddf44
 800944c:	3e54ae0b 	.word	0x3e54ae0b
 8009450:	55555555 	.word	0x55555555
 8009454:	3fd55555 	.word	0x3fd55555
 8009458:	652b82fe 	.word	0x652b82fe
 800945c:	3ff71547 	.word	0x3ff71547
 8009460:	3ff00000 	.word	0x3ff00000
 8009464:	3fd00000 	.word	0x3fd00000
 8009468:	3fe00000 	.word	0x3fe00000
 800946c:	bff00000 	.word	0xbff00000
 8009470:	408fffff 	.word	0x408fffff
 8009474:	4bd4      	ldr	r3, [pc, #848]	; (80097c8 <__ieee754_pow+0x738>)
 8009476:	2200      	movs	r2, #0
 8009478:	402b      	ands	r3, r5
 800947a:	b943      	cbnz	r3, 800948e <__ieee754_pow+0x3fe>
 800947c:	4658      	mov	r0, fp
 800947e:	4661      	mov	r1, ip
 8009480:	4bd2      	ldr	r3, [pc, #840]	; (80097cc <__ieee754_pow+0x73c>)
 8009482:	f7f7 f829 	bl	80004d8 <__aeabi_dmul>
 8009486:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800948a:	4683      	mov	fp, r0
 800948c:	460c      	mov	r4, r1
 800948e:	1523      	asrs	r3, r4, #20
 8009490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009494:	4413      	add	r3, r2
 8009496:	930b      	str	r3, [sp, #44]	; 0x2c
 8009498:	4bcd      	ldr	r3, [pc, #820]	; (80097d0 <__ieee754_pow+0x740>)
 800949a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800949e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80094a2:	429c      	cmp	r4, r3
 80094a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094a8:	dd08      	ble.n	80094bc <__ieee754_pow+0x42c>
 80094aa:	4bca      	ldr	r3, [pc, #808]	; (80097d4 <__ieee754_pow+0x744>)
 80094ac:	429c      	cmp	r4, r3
 80094ae:	f340 8164 	ble.w	800977a <__ieee754_pow+0x6ea>
 80094b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80094b8:	3301      	adds	r3, #1
 80094ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80094bc:	2600      	movs	r6, #0
 80094be:	00f3      	lsls	r3, r6, #3
 80094c0:	930d      	str	r3, [sp, #52]	; 0x34
 80094c2:	4bc5      	ldr	r3, [pc, #788]	; (80097d8 <__ieee754_pow+0x748>)
 80094c4:	4658      	mov	r0, fp
 80094c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094ce:	4629      	mov	r1, r5
 80094d0:	461a      	mov	r2, r3
 80094d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80094d6:	4623      	mov	r3, r4
 80094d8:	f7f6 fe46 	bl	8000168 <__aeabi_dsub>
 80094dc:	46da      	mov	sl, fp
 80094de:	462b      	mov	r3, r5
 80094e0:	4652      	mov	r2, sl
 80094e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80094e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094ea:	f7f6 fe3f 	bl	800016c <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	2000      	movs	r0, #0
 80094f4:	49b9      	ldr	r1, [pc, #740]	; (80097dc <__ieee754_pow+0x74c>)
 80094f6:	f7f7 f919 	bl	800072c <__aeabi_ddiv>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009502:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009506:	f7f6 ffe7 	bl	80004d8 <__aeabi_dmul>
 800950a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800950e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009512:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	46ab      	mov	fp, r5
 800951c:	106d      	asrs	r5, r5, #1
 800951e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009522:	9304      	str	r3, [sp, #16]
 8009524:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009528:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800952c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	4614      	mov	r4, r2
 8009536:	461d      	mov	r5, r3
 8009538:	f7f6 ffce 	bl	80004d8 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009544:	f7f6 fe10 	bl	8000168 <__aeabi_dsub>
 8009548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	4620      	mov	r0, r4
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fe08 	bl	8000168 <__aeabi_dsub>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4650      	mov	r0, sl
 800955e:	4659      	mov	r1, fp
 8009560:	f7f6 fe02 	bl	8000168 <__aeabi_dsub>
 8009564:	4642      	mov	r2, r8
 8009566:	464b      	mov	r3, r9
 8009568:	f7f6 ffb6 	bl	80004d8 <__aeabi_dmul>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f6 fdf8 	bl	8000168 <__aeabi_dsub>
 8009578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800957c:	f7f6 ffac 	bl	80004d8 <__aeabi_dmul>
 8009580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009584:	4682      	mov	sl, r0
 8009586:	468b      	mov	fp, r1
 8009588:	4610      	mov	r0, r2
 800958a:	4619      	mov	r1, r3
 800958c:	f7f6 ffa4 	bl	80004d8 <__aeabi_dmul>
 8009590:	a37b      	add	r3, pc, #492	; (adr r3, 8009780 <__ieee754_pow+0x6f0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	f7f6 ff9d 	bl	80004d8 <__aeabi_dmul>
 800959e:	a37a      	add	r3, pc, #488	; (adr r3, 8009788 <__ieee754_pow+0x6f8>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f7f6 fde2 	bl	800016c <__adddf3>
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	f7f6 ff94 	bl	80004d8 <__aeabi_dmul>
 80095b0:	a377      	add	r3, pc, #476	; (adr r3, 8009790 <__ieee754_pow+0x700>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f7f6 fdd9 	bl	800016c <__adddf3>
 80095ba:	4622      	mov	r2, r4
 80095bc:	462b      	mov	r3, r5
 80095be:	f7f6 ff8b 	bl	80004d8 <__aeabi_dmul>
 80095c2:	a375      	add	r3, pc, #468	; (adr r3, 8009798 <__ieee754_pow+0x708>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fdd0 	bl	800016c <__adddf3>
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	f7f6 ff82 	bl	80004d8 <__aeabi_dmul>
 80095d4:	a372      	add	r3, pc, #456	; (adr r3, 80097a0 <__ieee754_pow+0x710>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 fdc7 	bl	800016c <__adddf3>
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	f7f6 ff79 	bl	80004d8 <__aeabi_dmul>
 80095e6:	a370      	add	r3, pc, #448	; (adr r3, 80097a8 <__ieee754_pow+0x718>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f6 fdbe 	bl	800016c <__adddf3>
 80095f0:	4622      	mov	r2, r4
 80095f2:	4606      	mov	r6, r0
 80095f4:	460f      	mov	r7, r1
 80095f6:	462b      	mov	r3, r5
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 ff6c 	bl	80004d8 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f6 ff66 	bl	80004d8 <__aeabi_dmul>
 800960c:	4604      	mov	r4, r0
 800960e:	460d      	mov	r5, r1
 8009610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009614:	4642      	mov	r2, r8
 8009616:	464b      	mov	r3, r9
 8009618:	f7f6 fda8 	bl	800016c <__adddf3>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	f7f6 ff5a 	bl	80004d8 <__aeabi_dmul>
 8009624:	4622      	mov	r2, r4
 8009626:	462b      	mov	r3, r5
 8009628:	f7f6 fda0 	bl	800016c <__adddf3>
 800962c:	4642      	mov	r2, r8
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	464b      	mov	r3, r9
 8009634:	4640      	mov	r0, r8
 8009636:	4649      	mov	r1, r9
 8009638:	f7f6 ff4e 	bl	80004d8 <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009644:	2200      	movs	r2, #0
 8009646:	4b66      	ldr	r3, [pc, #408]	; (80097e0 <__ieee754_pow+0x750>)
 8009648:	f7f6 fd90 	bl	800016c <__adddf3>
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	f7f6 fd8c 	bl	800016c <__adddf3>
 8009654:	2400      	movs	r4, #0
 8009656:	460d      	mov	r5, r1
 8009658:	4622      	mov	r2, r4
 800965a:	460b      	mov	r3, r1
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 ff3a 	bl	80004d8 <__aeabi_dmul>
 8009664:	2200      	movs	r2, #0
 8009666:	4680      	mov	r8, r0
 8009668:	4689      	mov	r9, r1
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	4b5c      	ldr	r3, [pc, #368]	; (80097e0 <__ieee754_pow+0x750>)
 8009670:	f7f6 fd7a 	bl	8000168 <__aeabi_dsub>
 8009674:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009678:	f7f6 fd76 	bl	8000168 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f6 fd70 	bl	8000168 <__aeabi_dsub>
 8009688:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800968c:	f7f6 ff24 	bl	80004d8 <__aeabi_dmul>
 8009690:	4622      	mov	r2, r4
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	462b      	mov	r3, r5
 8009698:	4650      	mov	r0, sl
 800969a:	4659      	mov	r1, fp
 800969c:	f7f6 ff1c 	bl	80004d8 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f6 fd60 	bl	800016c <__adddf3>
 80096ac:	2400      	movs	r4, #0
 80096ae:	4606      	mov	r6, r0
 80096b0:	460f      	mov	r7, r1
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	f7f6 fd57 	bl	800016c <__adddf3>
 80096be:	a33c      	add	r3, pc, #240	; (adr r3, 80097b0 <__ieee754_pow+0x720>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4620      	mov	r0, r4
 80096c6:	460d      	mov	r5, r1
 80096c8:	f7f6 ff06 	bl	80004d8 <__aeabi_dmul>
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fd46 	bl	8000168 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fd40 	bl	8000168 <__aeabi_dsub>
 80096e8:	a333      	add	r3, pc, #204	; (adr r3, 80097b8 <__ieee754_pow+0x728>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 fef3 	bl	80004d8 <__aeabi_dmul>
 80096f2:	a333      	add	r3, pc, #204	; (adr r3, 80097c0 <__ieee754_pow+0x730>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4606      	mov	r6, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	4620      	mov	r0, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	f7f6 feea 	bl	80004d8 <__aeabi_dmul>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4630      	mov	r0, r6
 800970a:	4639      	mov	r1, r7
 800970c:	f7f6 fd2e 	bl	800016c <__adddf3>
 8009710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009712:	4b34      	ldr	r3, [pc, #208]	; (80097e4 <__ieee754_pow+0x754>)
 8009714:	4413      	add	r3, r2
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	f7f6 fd27 	bl	800016c <__adddf3>
 800971e:	4680      	mov	r8, r0
 8009720:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009722:	4689      	mov	r9, r1
 8009724:	f7f6 fe6e 	bl	8000404 <__aeabi_i2d>
 8009728:	4604      	mov	r4, r0
 800972a:	460d      	mov	r5, r1
 800972c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009732:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <__ieee754_pow+0x758>)
 8009734:	4413      	add	r3, r2
 8009736:	e9d3 6700 	ldrd	r6, r7, [r3]
 800973a:	4642      	mov	r2, r8
 800973c:	464b      	mov	r3, r9
 800973e:	f7f6 fd15 	bl	800016c <__adddf3>
 8009742:	4632      	mov	r2, r6
 8009744:	463b      	mov	r3, r7
 8009746:	f7f6 fd11 	bl	800016c <__adddf3>
 800974a:	4622      	mov	r2, r4
 800974c:	462b      	mov	r3, r5
 800974e:	f7f6 fd0d 	bl	800016c <__adddf3>
 8009752:	2000      	movs	r0, #0
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	4682      	mov	sl, r0
 800975a:	468b      	mov	fp, r1
 800975c:	f7f6 fd04 	bl	8000168 <__aeabi_dsub>
 8009760:	4632      	mov	r2, r6
 8009762:	463b      	mov	r3, r7
 8009764:	f7f6 fd00 	bl	8000168 <__aeabi_dsub>
 8009768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800976c:	f7f6 fcfc 	bl	8000168 <__aeabi_dsub>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4640      	mov	r0, r8
 8009776:	4649      	mov	r1, r9
 8009778:	e60b      	b.n	8009392 <__ieee754_pow+0x302>
 800977a:	2601      	movs	r6, #1
 800977c:	e69f      	b.n	80094be <__ieee754_pow+0x42e>
 800977e:	bf00      	nop
 8009780:	4a454eef 	.word	0x4a454eef
 8009784:	3fca7e28 	.word	0x3fca7e28
 8009788:	93c9db65 	.word	0x93c9db65
 800978c:	3fcd864a 	.word	0x3fcd864a
 8009790:	a91d4101 	.word	0xa91d4101
 8009794:	3fd17460 	.word	0x3fd17460
 8009798:	518f264d 	.word	0x518f264d
 800979c:	3fd55555 	.word	0x3fd55555
 80097a0:	db6fabff 	.word	0xdb6fabff
 80097a4:	3fdb6db6 	.word	0x3fdb6db6
 80097a8:	33333303 	.word	0x33333303
 80097ac:	3fe33333 	.word	0x3fe33333
 80097b0:	e0000000 	.word	0xe0000000
 80097b4:	3feec709 	.word	0x3feec709
 80097b8:	dc3a03fd 	.word	0xdc3a03fd
 80097bc:	3feec709 	.word	0x3feec709
 80097c0:	145b01f5 	.word	0x145b01f5
 80097c4:	be3e2fe0 	.word	0xbe3e2fe0
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	43400000 	.word	0x43400000
 80097d0:	0003988e 	.word	0x0003988e
 80097d4:	000bb679 	.word	0x000bb679
 80097d8:	08009f68 	.word	0x08009f68
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	40080000 	.word	0x40080000
 80097e4:	08009f88 	.word	0x08009f88
 80097e8:	08009f78 	.word	0x08009f78
 80097ec:	a39c      	add	r3, pc, #624	; (adr r3, 8009a60 <__ieee754_pow+0x9d0>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f7f6 fcb9 	bl	800016c <__adddf3>
 80097fa:	4622      	mov	r2, r4
 80097fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009800:	462b      	mov	r3, r5
 8009802:	4650      	mov	r0, sl
 8009804:	4639      	mov	r1, r7
 8009806:	f7f6 fcaf 	bl	8000168 <__aeabi_dsub>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009812:	f7f7 f8f1 	bl	80009f8 <__aeabi_dcmpgt>
 8009816:	2800      	cmp	r0, #0
 8009818:	f47f ae06 	bne.w	8009428 <__ieee754_pow+0x398>
 800981c:	4aa2      	ldr	r2, [pc, #648]	; (8009aa8 <__ieee754_pow+0xa18>)
 800981e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009822:	4293      	cmp	r3, r2
 8009824:	f340 8100 	ble.w	8009a28 <__ieee754_pow+0x998>
 8009828:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800982c:	151b      	asrs	r3, r3, #20
 800982e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009832:	fa4a fa03 	asr.w	sl, sl, r3
 8009836:	44b2      	add	sl, r6
 8009838:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800983c:	489b      	ldr	r0, [pc, #620]	; (8009aac <__ieee754_pow+0xa1c>)
 800983e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009842:	4108      	asrs	r0, r1
 8009844:	ea00 030a 	and.w	r3, r0, sl
 8009848:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800984c:	f1c1 0114 	rsb	r1, r1, #20
 8009850:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009854:	fa4a fa01 	asr.w	sl, sl, r1
 8009858:	2e00      	cmp	r6, #0
 800985a:	f04f 0200 	mov.w	r2, #0
 800985e:	4620      	mov	r0, r4
 8009860:	4629      	mov	r1, r5
 8009862:	bfb8      	it	lt
 8009864:	f1ca 0a00 	rsblt	sl, sl, #0
 8009868:	f7f6 fc7e 	bl	8000168 <__aeabi_dsub>
 800986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009874:	2400      	movs	r4, #0
 8009876:	4642      	mov	r2, r8
 8009878:	464b      	mov	r3, r9
 800987a:	f7f6 fc77 	bl	800016c <__adddf3>
 800987e:	a37a      	add	r3, pc, #488	; (adr r3, 8009a68 <__ieee754_pow+0x9d8>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	4620      	mov	r0, r4
 8009886:	460d      	mov	r5, r1
 8009888:	f7f6 fe26 	bl	80004d8 <__aeabi_dmul>
 800988c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009890:	4606      	mov	r6, r0
 8009892:	460f      	mov	r7, r1
 8009894:	4620      	mov	r0, r4
 8009896:	4629      	mov	r1, r5
 8009898:	f7f6 fc66 	bl	8000168 <__aeabi_dsub>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4640      	mov	r0, r8
 80098a2:	4649      	mov	r1, r9
 80098a4:	f7f6 fc60 	bl	8000168 <__aeabi_dsub>
 80098a8:	a371      	add	r3, pc, #452	; (adr r3, 8009a70 <__ieee754_pow+0x9e0>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fe13 	bl	80004d8 <__aeabi_dmul>
 80098b2:	a371      	add	r3, pc, #452	; (adr r3, 8009a78 <__ieee754_pow+0x9e8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	4680      	mov	r8, r0
 80098ba:	4689      	mov	r9, r1
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f6 fc4e 	bl	800016c <__adddf3>
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4630      	mov	r0, r6
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f6 fc46 	bl	800016c <__adddf3>
 80098e0:	4632      	mov	r2, r6
 80098e2:	463b      	mov	r3, r7
 80098e4:	4680      	mov	r8, r0
 80098e6:	4689      	mov	r9, r1
 80098e8:	f7f6 fc3e 	bl	8000168 <__aeabi_dsub>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4620      	mov	r0, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7f6 fc38 	bl	8000168 <__aeabi_dsub>
 80098f8:	4642      	mov	r2, r8
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	464b      	mov	r3, r9
 8009900:	4640      	mov	r0, r8
 8009902:	4649      	mov	r1, r9
 8009904:	f7f6 fde8 	bl	80004d8 <__aeabi_dmul>
 8009908:	a35d      	add	r3, pc, #372	; (adr r3, 8009a80 <__ieee754_pow+0x9f0>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	4604      	mov	r4, r0
 8009910:	460d      	mov	r5, r1
 8009912:	f7f6 fde1 	bl	80004d8 <__aeabi_dmul>
 8009916:	a35c      	add	r3, pc, #368	; (adr r3, 8009a88 <__ieee754_pow+0x9f8>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	f7f6 fdd8 	bl	80004d8 <__aeabi_dmul>
 8009928:	a359      	add	r3, pc, #356	; (adr r3, 8009a90 <__ieee754_pow+0xa00>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fc1d 	bl	800016c <__adddf3>
 8009932:	4622      	mov	r2, r4
 8009934:	462b      	mov	r3, r5
 8009936:	f7f6 fdcf 	bl	80004d8 <__aeabi_dmul>
 800993a:	a357      	add	r3, pc, #348	; (adr r3, 8009a98 <__ieee754_pow+0xa08>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fc12 	bl	8000168 <__aeabi_dsub>
 8009944:	4622      	mov	r2, r4
 8009946:	462b      	mov	r3, r5
 8009948:	f7f6 fdc6 	bl	80004d8 <__aeabi_dmul>
 800994c:	a354      	add	r3, pc, #336	; (adr r3, 8009aa0 <__ieee754_pow+0xa10>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fc0b 	bl	800016c <__adddf3>
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	f7f6 fdbd 	bl	80004d8 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f6 fbff 	bl	8000168 <__aeabi_dsub>
 800996a:	4604      	mov	r4, r0
 800996c:	460d      	mov	r5, r1
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fdaf 	bl	80004d8 <__aeabi_dmul>
 800997a:	2200      	movs	r2, #0
 800997c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 fbee 	bl	8000168 <__aeabi_dsub>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009994:	f7f6 feca 	bl	800072c <__aeabi_ddiv>
 8009998:	4632      	mov	r2, r6
 800999a:	4604      	mov	r4, r0
 800999c:	460d      	mov	r5, r1
 800999e:	463b      	mov	r3, r7
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f6 fd98 	bl	80004d8 <__aeabi_dmul>
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	f7f6 fbde 	bl	800016c <__adddf3>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4620      	mov	r0, r4
 80099b6:	4629      	mov	r1, r5
 80099b8:	f7f6 fbd6 	bl	8000168 <__aeabi_dsub>
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	f7f6 fbd2 	bl	8000168 <__aeabi_dsub>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	2000      	movs	r0, #0
 80099ca:	4939      	ldr	r1, [pc, #228]	; (8009ab0 <__ieee754_pow+0xa20>)
 80099cc:	f7f6 fbcc 	bl	8000168 <__aeabi_dsub>
 80099d0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80099d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80099d8:	da29      	bge.n	8009a2e <__ieee754_pow+0x99e>
 80099da:	4652      	mov	r2, sl
 80099dc:	f000 f874 	bl	8009ac8 <scalbn>
 80099e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e4:	f7ff bbfd 	b.w	80091e2 <__ieee754_pow+0x152>
 80099e8:	4b32      	ldr	r3, [pc, #200]	; (8009ab4 <__ieee754_pow+0xa24>)
 80099ea:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80099ee:	429f      	cmp	r7, r3
 80099f0:	f77f af14 	ble.w	800981c <__ieee754_pow+0x78c>
 80099f4:	4b30      	ldr	r3, [pc, #192]	; (8009ab8 <__ieee754_pow+0xa28>)
 80099f6:	440b      	add	r3, r1
 80099f8:	4303      	orrs	r3, r0
 80099fa:	d009      	beq.n	8009a10 <__ieee754_pow+0x980>
 80099fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a00:	2200      	movs	r2, #0
 8009a02:	2300      	movs	r3, #0
 8009a04:	f7f6 ffda 	bl	80009bc <__aeabi_dcmplt>
 8009a08:	3800      	subs	r0, #0
 8009a0a:	bf18      	it	ne
 8009a0c:	2001      	movne	r0, #1
 8009a0e:	e452      	b.n	80092b6 <__ieee754_pow+0x226>
 8009a10:	4622      	mov	r2, r4
 8009a12:	462b      	mov	r3, r5
 8009a14:	f7f6 fba8 	bl	8000168 <__aeabi_dsub>
 8009a18:	4642      	mov	r2, r8
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	f7f6 ffe2 	bl	80009e4 <__aeabi_dcmpge>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f aefb 	beq.w	800981c <__ieee754_pow+0x78c>
 8009a26:	e7e9      	b.n	80099fc <__ieee754_pow+0x96c>
 8009a28:	f04f 0a00 	mov.w	sl, #0
 8009a2c:	e720      	b.n	8009870 <__ieee754_pow+0x7e0>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	e7d6      	b.n	80099e0 <__ieee754_pow+0x950>
 8009a32:	f04f 0b00 	mov.w	fp, #0
 8009a36:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009ab0 <__ieee754_pow+0xa20>
 8009a3a:	f7ff bbb9 	b.w	80091b0 <__ieee754_pow+0x120>
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	f04f 0c00 	mov.w	ip, #0
 8009a46:	f7ff bbb3 	b.w	80091b0 <__ieee754_pow+0x120>
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7ff bb3c 	b.w	80090ca <__ieee754_pow+0x3a>
 8009a52:	9200      	str	r2, [sp, #0]
 8009a54:	f7ff bb88 	b.w	8009168 <__ieee754_pow+0xd8>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f7ff bb72 	b.w	8009142 <__ieee754_pow+0xb2>
 8009a5e:	bf00      	nop
 8009a60:	652b82fe 	.word	0x652b82fe
 8009a64:	3c971547 	.word	0x3c971547
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	3fe62e43 	.word	0x3fe62e43
 8009a70:	fefa39ef 	.word	0xfefa39ef
 8009a74:	3fe62e42 	.word	0x3fe62e42
 8009a78:	0ca86c39 	.word	0x0ca86c39
 8009a7c:	be205c61 	.word	0xbe205c61
 8009a80:	72bea4d0 	.word	0x72bea4d0
 8009a84:	3e663769 	.word	0x3e663769
 8009a88:	c5d26bf1 	.word	0xc5d26bf1
 8009a8c:	3ebbbd41 	.word	0x3ebbbd41
 8009a90:	af25de2c 	.word	0xaf25de2c
 8009a94:	3f11566a 	.word	0x3f11566a
 8009a98:	16bebd93 	.word	0x16bebd93
 8009a9c:	3f66c16c 	.word	0x3f66c16c
 8009aa0:	5555553e 	.word	0x5555553e
 8009aa4:	3fc55555 	.word	0x3fc55555
 8009aa8:	3fe00000 	.word	0x3fe00000
 8009aac:	fff00000 	.word	0xfff00000
 8009ab0:	3ff00000 	.word	0x3ff00000
 8009ab4:	4090cbff 	.word	0x4090cbff
 8009ab8:	3f6f3400 	.word	0x3f6f3400

08009abc <fabs>:
 8009abc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4770      	bx	lr
 8009ac4:	0000      	movs	r0, r0
	...

08009ac8 <scalbn>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	4616      	mov	r6, r2
 8009acc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	b992      	cbnz	r2, 8009afe <scalbn+0x36>
 8009ad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009adc:	4303      	orrs	r3, r0
 8009ade:	d03c      	beq.n	8009b5a <scalbn+0x92>
 8009ae0:	4b31      	ldr	r3, [pc, #196]	; (8009ba8 <scalbn+0xe0>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f7f6 fcf8 	bl	80004d8 <__aeabi_dmul>
 8009ae8:	4b30      	ldr	r3, [pc, #192]	; (8009bac <scalbn+0xe4>)
 8009aea:	4604      	mov	r4, r0
 8009aec:	429e      	cmp	r6, r3
 8009aee:	460d      	mov	r5, r1
 8009af0:	da0f      	bge.n	8009b12 <scalbn+0x4a>
 8009af2:	a329      	add	r3, pc, #164	; (adr r3, 8009b98 <scalbn+0xd0>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fcee 	bl	80004d8 <__aeabi_dmul>
 8009afc:	e006      	b.n	8009b0c <scalbn+0x44>
 8009afe:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009b02:	42ba      	cmp	r2, r7
 8009b04:	d109      	bne.n	8009b1a <scalbn+0x52>
 8009b06:	4602      	mov	r2, r0
 8009b08:	f7f6 fb30 	bl	800016c <__adddf3>
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	e023      	b.n	8009b5a <scalbn+0x92>
 8009b12:	460b      	mov	r3, r1
 8009b14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b18:	3a36      	subs	r2, #54	; 0x36
 8009b1a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009b1e:	428e      	cmp	r6, r1
 8009b20:	dd0e      	ble.n	8009b40 <scalbn+0x78>
 8009b22:	a31f      	add	r3, pc, #124	; (adr r3, 8009ba0 <scalbn+0xd8>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009b2c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009b30:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009b34:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009b38:	481d      	ldr	r0, [pc, #116]	; (8009bb0 <scalbn+0xe8>)
 8009b3a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009b3e:	e7db      	b.n	8009af8 <scalbn+0x30>
 8009b40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009b44:	4432      	add	r2, r6
 8009b46:	428a      	cmp	r2, r1
 8009b48:	dceb      	bgt.n	8009b22 <scalbn+0x5a>
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	dd08      	ble.n	8009b60 <scalbn+0x98>
 8009b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b60:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009b64:	da0c      	bge.n	8009b80 <scalbn+0xb8>
 8009b66:	a30c      	add	r3, pc, #48	; (adr r3, 8009b98 <scalbn+0xd0>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009b70:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009b74:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009b78:	480e      	ldr	r0, [pc, #56]	; (8009bb4 <scalbn+0xec>)
 8009b7a:	f041 011f 	orr.w	r1, r1, #31
 8009b7e:	e7bb      	b.n	8009af8 <scalbn+0x30>
 8009b80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b84:	3236      	adds	r2, #54	; 0x36
 8009b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	2200      	movs	r2, #0
 8009b94:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <scalbn+0xf0>)
 8009b96:	e7af      	b.n	8009af8 <scalbn+0x30>
 8009b98:	c2f8f359 	.word	0xc2f8f359
 8009b9c:	01a56e1f 	.word	0x01a56e1f
 8009ba0:	8800759c 	.word	0x8800759c
 8009ba4:	7e37e43c 	.word	0x7e37e43c
 8009ba8:	43500000 	.word	0x43500000
 8009bac:	ffff3cb0 	.word	0xffff3cb0
 8009bb0:	8800759c 	.word	0x8800759c
 8009bb4:	c2f8f359 	.word	0xc2f8f359
 8009bb8:	3c900000 	.word	0x3c900000

08009bbc <with_errno>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	4616      	mov	r6, r2
 8009bc4:	f7ff f966 	bl	8008e94 <__errno>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	6006      	str	r6, [r0, #0]
 8009bcc:	4620      	mov	r0, r4
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <xflow>:
 8009bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd2:	4615      	mov	r5, r2
 8009bd4:	461c      	mov	r4, r3
 8009bd6:	b180      	cbz	r0, 8009bfa <xflow+0x2a>
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bde:	e9cd 0100 	strd	r0, r1, [sp]
 8009be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be6:	4628      	mov	r0, r5
 8009be8:	4621      	mov	r1, r4
 8009bea:	f7f6 fc75 	bl	80004d8 <__aeabi_dmul>
 8009bee:	2222      	movs	r2, #34	; 0x22
 8009bf0:	b003      	add	sp, #12
 8009bf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf6:	f7ff bfe1 	b.w	8009bbc <with_errno>
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	e7ee      	b.n	8009bde <xflow+0xe>

08009c00 <__math_uflow>:
 8009c00:	2200      	movs	r2, #0
 8009c02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c06:	f7ff bfe3 	b.w	8009bd0 <xflow>

08009c0a <__math_oflow>:
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009c10:	f7ff bfde 	b.w	8009bd0 <xflow>

08009c14 <__ieee754_sqrt>:
 8009c14:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009db8 <__ieee754_sqrt+0x1a4>
 8009c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009c20:	460b      	mov	r3, r1
 8009c22:	4606      	mov	r6, r0
 8009c24:	460d      	mov	r5, r1
 8009c26:	460a      	mov	r2, r1
 8009c28:	4604      	mov	r4, r0
 8009c2a:	d10e      	bne.n	8009c4a <__ieee754_sqrt+0x36>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f7f6 fc53 	bl	80004d8 <__aeabi_dmul>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4630      	mov	r0, r6
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f7f6 fa97 	bl	800016c <__adddf3>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460d      	mov	r5, r1
 8009c42:	4630      	mov	r0, r6
 8009c44:	4629      	mov	r1, r5
 8009c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	dc0d      	bgt.n	8009c6a <__ieee754_sqrt+0x56>
 8009c4e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009c52:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009c56:	d0f4      	beq.n	8009c42 <__ieee754_sqrt+0x2e>
 8009c58:	b139      	cbz	r1, 8009c6a <__ieee754_sqrt+0x56>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	f7f6 fa84 	bl	8000168 <__aeabi_dsub>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	f7f6 fd62 	bl	800072c <__aeabi_ddiv>
 8009c68:	e7e9      	b.n	8009c3e <__ieee754_sqrt+0x2a>
 8009c6a:	1512      	asrs	r2, r2, #20
 8009c6c:	f000 8089 	beq.w	8009d82 <__ieee754_sqrt+0x16e>
 8009c70:	2500      	movs	r5, #0
 8009c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c76:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c7e:	07d2      	lsls	r2, r2, #31
 8009c80:	bf5c      	itt	pl
 8009c82:	005b      	lslpl	r3, r3, #1
 8009c84:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009c88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c8c:	bf58      	it	pl
 8009c8e:	0064      	lslpl	r4, r4, #1
 8009c90:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009c94:	0062      	lsls	r2, r4, #1
 8009c96:	2016      	movs	r0, #22
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009c9e:	1076      	asrs	r6, r6, #1
 8009ca0:	190f      	adds	r7, r1, r4
 8009ca2:	429f      	cmp	r7, r3
 8009ca4:	bfde      	ittt	le
 8009ca6:	1bdb      	suble	r3, r3, r7
 8009ca8:	1939      	addle	r1, r7, r4
 8009caa:	192d      	addle	r5, r5, r4
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	3801      	subs	r0, #1
 8009cb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009cb4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009cb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009cbc:	d1f0      	bne.n	8009ca0 <__ieee754_sqrt+0x8c>
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	2720      	movs	r7, #32
 8009cc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009cc6:	428b      	cmp	r3, r1
 8009cc8:	eb0c 0e00 	add.w	lr, ip, r0
 8009ccc:	dc02      	bgt.n	8009cd4 <__ieee754_sqrt+0xc0>
 8009cce:	d113      	bne.n	8009cf8 <__ieee754_sqrt+0xe4>
 8009cd0:	4596      	cmp	lr, r2
 8009cd2:	d811      	bhi.n	8009cf8 <__ieee754_sqrt+0xe4>
 8009cd4:	f1be 0f00 	cmp.w	lr, #0
 8009cd8:	eb0e 000c 	add.w	r0, lr, ip
 8009cdc:	da56      	bge.n	8009d8c <__ieee754_sqrt+0x178>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	db54      	blt.n	8009d8c <__ieee754_sqrt+0x178>
 8009ce2:	f101 0801 	add.w	r8, r1, #1
 8009ce6:	1a5b      	subs	r3, r3, r1
 8009ce8:	4641      	mov	r1, r8
 8009cea:	4596      	cmp	lr, r2
 8009cec:	bf88      	it	hi
 8009cee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009cf2:	eba2 020e 	sub.w	r2, r2, lr
 8009cf6:	4464      	add	r4, ip
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	3f01      	subs	r7, #1
 8009cfc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009d00:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009d04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d08:	d1dd      	bne.n	8009cc6 <__ieee754_sqrt+0xb2>
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d01b      	beq.n	8009d46 <__ieee754_sqrt+0x132>
 8009d0e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009dbc <__ieee754_sqrt+0x1a8>
 8009d12:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009dc0 <__ieee754_sqrt+0x1ac>
 8009d16:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d1e:	f7f6 fa23 	bl	8000168 <__aeabi_dsub>
 8009d22:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	f7f6 fe4f 	bl	80009d0 <__aeabi_dcmple>
 8009d32:	b140      	cbz	r0, 8009d46 <__ieee754_sqrt+0x132>
 8009d34:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d38:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009d40:	d126      	bne.n	8009d90 <__ieee754_sqrt+0x17c>
 8009d42:	463c      	mov	r4, r7
 8009d44:	3501      	adds	r5, #1
 8009d46:	106b      	asrs	r3, r5, #1
 8009d48:	0864      	lsrs	r4, r4, #1
 8009d4a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d4e:	07ea      	lsls	r2, r5, #31
 8009d50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d54:	bf48      	it	mi
 8009d56:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009d60:	e76d      	b.n	8009c3e <__ieee754_sqrt+0x2a>
 8009d62:	0ae3      	lsrs	r3, r4, #11
 8009d64:	3915      	subs	r1, #21
 8009d66:	0564      	lsls	r4, r4, #21
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d0fa      	beq.n	8009d62 <__ieee754_sqrt+0x14e>
 8009d6c:	02d8      	lsls	r0, r3, #11
 8009d6e:	d50a      	bpl.n	8009d86 <__ieee754_sqrt+0x172>
 8009d70:	f1c2 0020 	rsb	r0, r2, #32
 8009d74:	fa24 f000 	lsr.w	r0, r4, r0
 8009d78:	1e55      	subs	r5, r2, #1
 8009d7a:	4094      	lsls	r4, r2
 8009d7c:	4303      	orrs	r3, r0
 8009d7e:	1b4a      	subs	r2, r1, r5
 8009d80:	e776      	b.n	8009c70 <__ieee754_sqrt+0x5c>
 8009d82:	4611      	mov	r1, r2
 8009d84:	e7f0      	b.n	8009d68 <__ieee754_sqrt+0x154>
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	3201      	adds	r2, #1
 8009d8a:	e7ef      	b.n	8009d6c <__ieee754_sqrt+0x158>
 8009d8c:	4688      	mov	r8, r1
 8009d8e:	e7aa      	b.n	8009ce6 <__ieee754_sqrt+0xd2>
 8009d90:	f7f6 f9ec 	bl	800016c <__adddf3>
 8009d94:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fe0c 	bl	80009bc <__aeabi_dcmplt>
 8009da4:	b120      	cbz	r0, 8009db0 <__ieee754_sqrt+0x19c>
 8009da6:	1ca1      	adds	r1, r4, #2
 8009da8:	bf08      	it	eq
 8009daa:	3501      	addeq	r5, #1
 8009dac:	3402      	adds	r4, #2
 8009dae:	e7ca      	b.n	8009d46 <__ieee754_sqrt+0x132>
 8009db0:	3401      	adds	r4, #1
 8009db2:	f024 0401 	bic.w	r4, r4, #1
 8009db6:	e7c6      	b.n	8009d46 <__ieee754_sqrt+0x132>
 8009db8:	7ff00000 	.word	0x7ff00000
 8009dbc:	20000068 	.word	0x20000068
 8009dc0:	20000070 	.word	0x20000070

08009dc4 <_init>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr

08009dd0 <_fini>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr
