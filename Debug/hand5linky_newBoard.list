
hand5linky_newBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce30  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800cf40  0800cf40  0001cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d53c  0800d53c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d53c  0800d53c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d53c  0800d53c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d540  0800d540  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bb4  200001d8  0800d71c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d8c  0800d71c  00023d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001baa0  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a7a  00000000  00000000  0003bce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  00040760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001251  00000000  00000000  00041f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199c7  00000000  00000000  000431d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4d0  00000000  00000000  0005cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008642a  00000000  00000000  00079068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076a8  00000000  00000000  000ff494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00106b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf28 	.word	0x0800cf28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800cf28 	.word	0x0800cf28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	char* result;
	result= memchr(uartRecieveBuffer, 'P', strlen(uartRecieveBuffer));
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <ProcessUartData+0x100>)
 800109c:	f7ff f858 	bl	8000150 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	2150      	movs	r1, #80	; 0x50
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <ProcessUartData+0x100>)
 80010a8:	f009 fa4e 	bl	800a548 <memchr>
 80010ac:	6078      	str	r0, [r7, #4]
	Fingers_Status.Pinky.SetPoint = atof(result+2);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3302      	adds	r3, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fdca 	bl	8008c4c <atof>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd02 	bl	8000ac8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a34      	ldr	r2, [pc, #208]	; (8001198 <ProcessUartData+0x104>)
 80010c8:	6513      	str	r3, [r2, #80]	; 0x50
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 80010ca:	4832      	ldr	r0, [pc, #200]	; (8001194 <ProcessUartData+0x100>)
 80010cc:	f7ff f840 	bl	8000150 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	2152      	movs	r1, #82	; 0x52
 80010d6:	482f      	ldr	r0, [pc, #188]	; (8001194 <ProcessUartData+0x100>)
 80010d8:	f009 fa36 	bl	800a548 <memchr>
 80010dc:	6078      	str	r0, [r7, #4]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3302      	adds	r3, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 fdb2 	bl	8008c4c <atof>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fcea 	bl	8000ac8 <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a28      	ldr	r2, [pc, #160]	; (8001198 <ProcessUartData+0x104>)
 80010f8:	63d3      	str	r3, [r2, #60]	; 0x3c
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 80010fa:	4826      	ldr	r0, [pc, #152]	; (8001194 <ProcessUartData+0x100>)
 80010fc:	f7ff f828 	bl	8000150 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	214d      	movs	r1, #77	; 0x4d
 8001106:	4823      	ldr	r0, [pc, #140]	; (8001194 <ProcessUartData+0x100>)
 8001108:	f009 fa1e 	bl	800a548 <memchr>
 800110c:	6078      	str	r0, [r7, #4]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fd9a 	bl	8008c4c <atof>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fcd2 	bl	8000ac8 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <ProcessUartData+0x104>)
 8001128:	6293      	str	r3, [r2, #40]	; 0x28
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 800112a:	481a      	ldr	r0, [pc, #104]	; (8001194 <ProcessUartData+0x100>)
 800112c:	f7ff f810 	bl	8000150 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	2149      	movs	r1, #73	; 0x49
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <ProcessUartData+0x100>)
 8001138:	f009 fa06 	bl	800a548 <memchr>
 800113c:	6078      	str	r0, [r7, #4]
	Fingers_Status.Index.SetPoint= atof(result+2);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3302      	adds	r3, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fd82 	bl	8008c4c <atof>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fcba 	bl	8000ac8 <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <ProcessUartData+0x104>)
 8001158:	6153      	str	r3, [r2, #20]
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <ProcessUartData+0x100>)
 800115c:	f7fe fff8 	bl	8000150 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	2154      	movs	r1, #84	; 0x54
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <ProcessUartData+0x100>)
 8001168:	f009 f9ee 	bl	800a548 <memchr>
 800116c:	6078      	str	r0, [r7, #4]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3302      	adds	r3, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fd6a 	bl	8008c4c <atof>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fca2 	bl	8000ac8 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <ProcessUartData+0x104>)
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001f8 	.word	0x200001f8
 8001198:	20001634 	.word	0x20001634

0800119c <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_UART_RxCpltCallback+0x94>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d13c      	bne.n	8001228 <HAL_UART_RxCpltCallback+0x8c>
		uartRecieveBuffer[uartCounter]=RXuart;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_UART_RxCpltCallback+0x9c>)
 80011b6:	7819      	ldrb	r1, [r3, #0]
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_UART_RxCpltCallback+0xa0>)
 80011ba:	5499      	strb	r1, [r3, r2]
		if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_UART_RxCpltCallback+0xa0>)
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d123      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x76>
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_UART_RxCpltCallback+0xa0>)
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	2b0d      	cmp	r3, #13
 80011d6:	d11c      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x76>
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3b02      	subs	r3, #2
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_UART_RxCpltCallback+0xa0>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	2b7d      	cmp	r3, #125	; 0x7d
 80011e4:	d115      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x76>
			ProcessUartData();
 80011e6:	f7ff ff55 	bl	8001094 <ProcessUartData>
			ManualControl=1;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_RxCpltCallback+0xa4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
			uartCounter=-1;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	801a      	strh	r2, [r3, #0]

			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	81fb      	strh	r3, [r7, #14]
 80011fc:	e006      	b.n	800120c <HAL_UART_RxCpltCallback+0x70>
				uartRecieveBuffer[cleanCounter]=0;
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_UART_RxCpltCallback+0xa0>)
 8001202:	2100      	movs	r1, #0
 8001204:	54d1      	strb	r1, [r2, r3]
			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	3301      	adds	r3, #1
 800120a:	81fb      	strh	r3, [r7, #14]
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	2b95      	cmp	r3, #149	; 0x95
 8001210:	d9f5      	bls.n	80011fe <HAL_UART_RxCpltCallback+0x62>
		}
		uartCounter++;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_UART_RxCpltCallback+0x98>)
 800121c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	4905      	ldr	r1, [pc, #20]	; (8001238 <HAL_UART_RxCpltCallback+0x9c>)
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_UART_RxCpltCallback+0xa8>)
 8001224:	f004 fc71 	bl	8005b0a <HAL_UART_Receive_IT>
	}
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013800 	.word	0x40013800
 8001234:	200001f4 	.word	0x200001f4
 8001238:	2000028e 	.word	0x2000028e
 800123c:	200001f8 	.word	0x200001f8
 8001240:	200016e8 	.word	0x200016e8
 8001244:	200015b4 	.word	0x200015b4

08001248 <HAL_UART_TxCpltCallback>:
/*
 * Function2--------------------------
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <HAL_UART_TxCpltCallback+0x24>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d102      	bne.n	8001260 <HAL_UART_TxCpltCallback+0x18>
	{
		TX_State=idel;
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_UART_TxCpltCallback+0x28>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
	}
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40013800 	.word	0x40013800
 8001270:	2000028f 	.word	0x2000028f

08001274 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_ADC1_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_ADC1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001292:	2201      	movs	r2, #1
 8001294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_ADC1_Init+0x74>)
 800129e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012b2:	f001 ffe7 	bl	8003284 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f001 f8ac 	bl	8002418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012c8:	2303      	movs	r3, #3
 80012ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012d2:	f002 fa8f 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012dc:	f001 f89c 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000290 	.word	0x20000290
 80012ec:	40012400 	.word	0x40012400

080012f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_ADC_MspInit+0x6c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d121      	bne.n	8001354 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Motor1_Current_Pin|Motor2_Current_Pin|Motor3_Current_Pin|Motor4_Current_Pin
 8001340:	233f      	movs	r3, #63	; 0x3f
 8001342:	613b      	str	r3, [r7, #16]
                          |Motor5_Current_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_ADC_MspInit+0x74>)
 8001350:	f002 fe26 	bl	8003fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40012400 	.word	0x40012400
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <ADC_Select_CH0>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0 (void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2301      	movs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001380:	2303      	movs	r3, #3
 8001382:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <ADC_Select_CH0+0x40>)
 800138e:	f002 fa31 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <ADC_Select_CH0+0x34>
	  {
	    Error_Handler();
 8001398:	f001 f83e 	bl	8002418 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 800139c:	b662      	cpsie	i
}
 800139e:	bf00      	nop
	  }
	  __enable_irq();
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000290 	.word	0x20000290
 80013ac:	00000000 	.word	0x00000000

080013b0 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 80013b4:	f7ff ffd8 	bl	8001368 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 80013b8:	4831      	ldr	r0, [pc, #196]	; (8001480 <ADC_ReadCurrent_Pinky+0xd0>)
 80013ba:	f002 f83b 	bl	8003434 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c2:	482f      	ldr	r0, [pc, #188]	; (8001480 <ADC_ReadCurrent_Pinky+0xd0>)
 80013c4:	f002 f910 	bl	80035e8 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc1);
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <ADC_ReadCurrent_Pinky+0xd0>)
 80013ca:	f002 fa07 	bl	80037dc <HAL_ADC_GetValue>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <ADC_ReadCurrent_Pinky+0xd4>)
 80013d2:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc1);
 80013d4:	482a      	ldr	r0, [pc, #168]	; (8001480 <ADC_ReadCurrent_Pinky+0xd0>)
 80013d6:	f002 f8db 	bl	8003590 <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 80013dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f80f 	bl	8000404 <__aeabi_i2d>
 80013e6:	4604      	mov	r4, r0
 80013e8:	460d      	mov	r5, r1
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <ADC_ReadCurrent_Pinky+0xd4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe fff8 	bl	80003e4 <__aeabi_ui2d>
 80013f4:	a31e      	add	r3, pc, #120	; (adr r3, 8001470 <ADC_ReadCurrent_Pinky+0xc0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f86d 	bl	80004d8 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7fe feb1 	bl	800016c <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	a319      	add	r3, pc, #100	; (adr r3, 8001478 <ADC_ReadCurrent_Pinky+0xc8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f988 	bl	800072c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb30 	bl	8000a88 <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 800142e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Current_motor[1]=Fingers_Status.Pinky.Current;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 8001434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001438:	461a      	mov	r2, r3
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <ADC_ReadCurrent_Pinky+0xd4>)
 800143c:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 8001440:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001444:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001448:	4293      	cmp	r3, r2
 800144a:	d805      	bhi.n	8001458 <ADC_ReadCurrent_Pinky+0xa8>
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 800144e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001452:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001456:	d204      	bcs.n	8001462 <ADC_ReadCurrent_Pinky+0xb2>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 800145a:	2201      	movs	r2, #1
 800145c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001460:	e004      	b.n	800146c <ADC_ReadCurrent_Pinky+0xbc>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <ADC_ReadCurrent_Pinky+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	bdb0      	pop	{r4, r5, r7, pc}
 8001470:	47ae147b 	.word	0x47ae147b
 8001474:	3f847ae1 	.word	0x3f847ae1
 8001478:	c28f5c29 	.word	0xc28f5c29
 800147c:	3ff028f5 	.word	0x3ff028f5
 8001480:	20000290 	.word	0x20000290
 8001484:	20001698 	.word	0x20001698
 8001488:	20001634 	.word	0x20001634

0800148c <ADC_Select_CH1>:
void ADC_Select_CH1 (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80014a4:	2303      	movs	r3, #3
 80014a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <ADC_Select_CH1+0x40>)
 80014b2:	f002 f99f 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <ADC_Select_CH1+0x34>
	  {
	    Error_Handler();
 80014bc:	f000 ffac 	bl	8002418 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80014c0:	b662      	cpsie	i
}
 80014c2:	bf00      	nop
	  }
	  __enable_irq();
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000290 	.word	0x20000290

080014d0 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	ADC_Select_CH1();
 80014d4:	f7ff ffda 	bl	800148c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80014d8:	4831      	ldr	r0, [pc, #196]	; (80015a0 <ADC_ReadCurrent_Ring+0xd0>)
 80014da:	f001 ffab 	bl	8003434 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80014de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e2:	482f      	ldr	r0, [pc, #188]	; (80015a0 <ADC_ReadCurrent_Ring+0xd0>)
 80014e4:	f002 f880 	bl	80035e8 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc1);
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <ADC_ReadCurrent_Ring+0xd0>)
 80014ea:	f002 f977 	bl	80037dc <HAL_ADC_GetValue>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <ADC_ReadCurrent_Ring+0xd4>)
 80014f2:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc1);
 80014f4:	482a      	ldr	r0, [pc, #168]	; (80015a0 <ADC_ReadCurrent_Ring+0xd0>)
 80014f6:	f002 f84b 	bl	8003590 <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 80014fc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff7f 	bl	8000404 <__aeabi_i2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <ADC_ReadCurrent_Ring+0xd4>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff68 	bl	80003e4 <__aeabi_ui2d>
 8001514:	a31e      	add	r3, pc, #120	; (adr r3, 8001590 <ADC_ReadCurrent_Ring+0xc0>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7fe ffdd 	bl	80004d8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7fe fe21 	bl	800016c <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	a319      	add	r3, pc, #100	; (adr r3, 8001598 <ADC_ReadCurrent_Ring+0xc8>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f8f8 	bl	800072c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff faa0 	bl	8000a88 <__aeabi_d2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 800154e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Current_motor[2]=Fingers_Status.Ring.Current;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 8001554:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001558:	461a      	mov	r2, r3
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <ADC_ReadCurrent_Ring+0xd4>)
 800155c:	609a      	str	r2, [r3, #8]
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 8001560:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001564:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001568:	4293      	cmp	r3, r2
 800156a:	d805      	bhi.n	8001578 <ADC_ReadCurrent_Ring+0xa8>
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 800156e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001572:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001576:	d204      	bcs.n	8001582 <ADC_ReadCurrent_Ring+0xb2>
		Fingers_Status.Ring.Stuck_Finger=1;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001580:	e004      	b.n	800158c <ADC_ReadCurrent_Ring+0xbc>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <ADC_ReadCurrent_Ring+0xd8>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	47ae147b 	.word	0x47ae147b
 8001594:	3f847ae1 	.word	0x3f847ae1
 8001598:	c28f5c29 	.word	0xc28f5c29
 800159c:	3ff028f5 	.word	0x3ff028f5
 80015a0:	20000290 	.word	0x20000290
 80015a4:	20001698 	.word	0x20001698
 80015a8:	20001634 	.word	0x20001634

080015ac <ADC_Select_CH2>:
void ADC_Select_CH2 (void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80015bc:	2302      	movs	r3, #2
 80015be:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80015c4:	2303      	movs	r3, #3
 80015c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <ADC_Select_CH2+0x40>)
 80015d2:	f002 f90f 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <ADC_Select_CH2+0x34>
	  {
	    Error_Handler();
 80015dc:	f000 ff1c 	bl	8002418 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80015e0:	b662      	cpsie	i
}
 80015e2:	bf00      	nop
	  }
	  __enable_irq();
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000290 	.word	0x20000290

080015f0 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	ADC_Select_CH2();
 80015f4:	f7ff ffda 	bl	80015ac <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 80015f8:	482f      	ldr	r0, [pc, #188]	; (80016b8 <ADC_ReadCurrent_Middle+0xc8>)
 80015fa:	f001 ff1b 	bl	8003434 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80015fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <ADC_ReadCurrent_Middle+0xc8>)
 8001604:	f001 fff0 	bl	80035e8 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc1);
 8001608:	482b      	ldr	r0, [pc, #172]	; (80016b8 <ADC_ReadCurrent_Middle+0xc8>)
 800160a:	f002 f8e7 	bl	80037dc <HAL_ADC_GetValue>
 800160e:	4603      	mov	r3, r0
 8001610:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <ADC_ReadCurrent_Middle+0xcc>)
 8001612:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc1);
 8001614:	4828      	ldr	r0, [pc, #160]	; (80016b8 <ADC_ReadCurrent_Middle+0xc8>)
 8001616:	f001 ffbb 	bl	8003590 <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 800161c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fef0 	bl	8000404 <__aeabi_i2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <ADC_ReadCurrent_Middle+0xcc>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fed9 	bl	80003e4 <__aeabi_ui2d>
 8001632:	a31d      	add	r3, pc, #116	; (adr r3, 80016a8 <ADC_ReadCurrent_Middle+0xb8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ff4e 	bl	80004d8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fd92 	bl	800016c <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	a317      	add	r3, pc, #92	; (adr r3, 80016b0 <ADC_ReadCurrent_Middle+0xc0>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7ff f869 	bl	800072c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa11 	bl	8000a88 <__aeabi_d2uiz>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 800166c:	871a      	strh	r2, [r3, #56]	; 0x38
	Current_motor[3]=Fingers_Status.Middle.Current;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 8001670:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001672:	461a      	mov	r2, r3
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <ADC_ReadCurrent_Middle+0xcc>)
 8001676:	60da      	str	r2, [r3, #12]
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 800167a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800167c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001680:	4293      	cmp	r3, r2
 8001682:	d804      	bhi.n	800168e <ADC_ReadCurrent_Middle+0x9e>
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 8001686:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001688:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800168c:	d204      	bcs.n	8001698 <ADC_ReadCurrent_Middle+0xa8>
		Fingers_Status.Middle.Stuck_Finger=1;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001696:	e004      	b.n	80016a2 <ADC_ReadCurrent_Middle+0xb2>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <ADC_ReadCurrent_Middle+0xd0>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3f847ae1 	.word	0x3f847ae1
 80016b0:	c28f5c29 	.word	0xc28f5c29
 80016b4:	3ff028f5 	.word	0x3ff028f5
 80016b8:	20000290 	.word	0x20000290
 80016bc:	20001698 	.word	0x20001698
 80016c0:	20001634 	.word	0x20001634

080016c4 <ADC_Select_CH3>:
void ADC_Select_CH3 (void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d8:	2301      	movs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80016dc:	2303      	movs	r3, #3
 80016de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <ADC_Select_CH3+0x40>)
 80016ea:	f002 f883 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Select_CH3+0x34>
	  {
	    Error_Handler();
 80016f4:	f000 fe90 	bl	8002418 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80016f8:	b662      	cpsie	i
}
 80016fa:	bf00      	nop
	  }
	  __enable_irq();
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000290 	.word	0x20000290

08001708 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 800170c:	f7ff ffda 	bl	80016c4 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8001710:	482f      	ldr	r0, [pc, #188]	; (80017d0 <ADC_ReadCurrent_Index+0xc8>)
 8001712:	f001 fe8f 	bl	8003434 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001716:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171a:	482d      	ldr	r0, [pc, #180]	; (80017d0 <ADC_ReadCurrent_Index+0xc8>)
 800171c:	f001 ff64 	bl	80035e8 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc1);
 8001720:	482b      	ldr	r0, [pc, #172]	; (80017d0 <ADC_ReadCurrent_Index+0xc8>)
 8001722:	f002 f85b 	bl	80037dc <HAL_ADC_GetValue>
 8001726:	4603      	mov	r3, r0
 8001728:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <ADC_ReadCurrent_Index+0xcc>)
 800172a:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc1);
 800172c:	4828      	ldr	r0, [pc, #160]	; (80017d0 <ADC_ReadCurrent_Index+0xc8>)
 800172e:	f001 ff2f 	bl	8003590 <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 8001734:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe64 	bl	8000404 <__aeabi_i2d>
 800173c:	4604      	mov	r4, r0
 800173e:	460d      	mov	r5, r1
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <ADC_ReadCurrent_Index+0xcc>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe4d 	bl	80003e4 <__aeabi_ui2d>
 800174a:	a31d      	add	r3, pc, #116	; (adr r3, 80017c0 <ADC_ReadCurrent_Index+0xb8>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fec2 	bl	80004d8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd06 	bl	800016c <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	a317      	add	r3, pc, #92	; (adr r3, 80017c8 <ADC_ReadCurrent_Index+0xc0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ffdd 	bl	800072c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f985 	bl	8000a88 <__aeabi_d2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 8001784:	849a      	strh	r2, [r3, #36]	; 0x24
	Current_motor[4]=Fingers_Status.Index.Current;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 8001788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800178a:	461a      	mov	r2, r3
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <ADC_ReadCurrent_Index+0xcc>)
 800178e:	611a      	str	r2, [r3, #16]
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 8001792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001794:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001798:	4293      	cmp	r3, r2
 800179a:	d804      	bhi.n	80017a6 <ADC_ReadCurrent_Index+0x9e>
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 800179e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80017a4:	d204      	bcs.n	80017b0 <ADC_ReadCurrent_Index+0xa8>
		Fingers_Status.Index.Stuck_Finger=1;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80017ae:	e004      	b.n	80017ba <ADC_ReadCurrent_Index+0xb2>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <ADC_ReadCurrent_Index+0xd0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	3f847ae1 	.word	0x3f847ae1
 80017c8:	c28f5c29 	.word	0xc28f5c29
 80017cc:	3ff028f5 	.word	0x3ff028f5
 80017d0:	20000290 	.word	0x20000290
 80017d4:	20001698 	.word	0x20001698
 80017d8:	20001634 	.word	0x20001634

080017dc <ADC_Select_CH4>:
void ADC_Select_CH4 (void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 80017ec:	2304      	movs	r3, #4
 80017ee:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80017f4:	2303      	movs	r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <ADC_Select_CH4+0x40>)
 8001802:	f001 fff7 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <ADC_Select_CH4+0x34>
	  {
	    Error_Handler();
 800180c:	f000 fe04 	bl	8002418 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001810:	b662      	cpsie	i
}
 8001812:	bf00      	nop
	  }
	  __enable_irq();
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000290 	.word	0x20000290

08001820 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	af00      	add	r7, sp, #0
	ADC_Select_CH4();
 8001824:	f7ff ffda 	bl	80017dc <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8001828:	482f      	ldr	r0, [pc, #188]	; (80018e8 <ADC_ReadCurrent_Thumb+0xc8>)
 800182a:	f001 fe03 	bl	8003434 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800182e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001832:	482d      	ldr	r0, [pc, #180]	; (80018e8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001834:	f001 fed8 	bl	80035e8 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc1);
 8001838:	482b      	ldr	r0, [pc, #172]	; (80018e8 <ADC_ReadCurrent_Thumb+0xc8>)
 800183a:	f001 ffcf 	bl	80037dc <HAL_ADC_GetValue>
 800183e:	4603      	mov	r3, r0
 8001840:	4a2a      	ldr	r2, [pc, #168]	; (80018ec <ADC_ReadCurrent_Thumb+0xcc>)
 8001842:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc1);
 8001844:	4828      	ldr	r0, [pc, #160]	; (80018e8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001846:	f001 fea3 	bl	8003590 <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 800184c:	8a1b      	ldrh	r3, [r3, #16]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fdd8 	bl	8000404 <__aeabi_i2d>
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <ADC_ReadCurrent_Thumb+0xcc>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fdc1 	bl	80003e4 <__aeabi_ui2d>
 8001862:	a31d      	add	r3, pc, #116	; (adr r3, 80018d8 <ADC_ReadCurrent_Thumb+0xb8>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fe36 	bl	80004d8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fc7a 	bl	800016c <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	a317      	add	r3, pc, #92	; (adr r3, 80018e0 <ADC_ReadCurrent_Thumb+0xc0>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe ff51 	bl	800072c <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff f8f9 	bl	8000a88 <__aeabi_d2uiz>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 800189c:	821a      	strh	r2, [r3, #16]
	Current_motor[5]=Fingers_Status.Thumb.Current;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 80018a0:	8a1b      	ldrh	r3, [r3, #16]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <ADC_ReadCurrent_Thumb+0xcc>)
 80018a6:	615a      	str	r2, [r3, #20]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	f640 62d8 	movw	r2, #3800	; 0xed8
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d804      	bhi.n	80018be <ADC_ReadCurrent_Thumb+0x9e>
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 80018b6:	8a1b      	ldrh	r3, [r3, #16]
 80018b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80018bc:	d203      	bcs.n	80018c6 <ADC_ReadCurrent_Thumb+0xa6>
		Fingers_Status.Thumb.Stuck_Finger=1;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	735a      	strb	r2, [r3, #13]
 80018c4:	e003      	b.n	80018ce <ADC_ReadCurrent_Thumb+0xae>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <ADC_ReadCurrent_Thumb+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	47ae147b 	.word	0x47ae147b
 80018dc:	3f847ae1 	.word	0x3f847ae1
 80018e0:	c28f5c29 	.word	0xc28f5c29
 80018e4:	3ff028f5 	.word	0x3ff028f5
 80018e8:	20000290 	.word	0x20000290
 80018ec:	20001698 	.word	0x20001698
 80018f0:	20001634 	.word	0x20001634

080018f4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_CAN_Init+0x60>)
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <MX_CAN_Init+0x64>)
 80018fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_CAN_Init+0x60>)
 8001900:	2210      	movs	r2, #16
 8001902:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_CAN_Init+0x60>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_CAN_Init+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_CAN_Init+0x60>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_CAN_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <MX_CAN_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_CAN_Init+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_CAN_Init+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_CAN_Init+0x60>)
 8001930:	2200      	movs	r2, #0
 8001932:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_CAN_Init+0x60>)
 8001936:	2200      	movs	r2, #0
 8001938:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_CAN_Init+0x60>)
 800193c:	2200      	movs	r2, #0
 800193e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_CAN_Init+0x60>)
 8001942:	f002 f8db 	bl	8003afc <HAL_CAN_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800194c:	f000 fd64 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200002c0 	.word	0x200002c0
 8001958:	40006400 	.word	0x40006400

0800195c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <HAL_CAN_MspInit+0xb0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d143      	bne.n	8001a04 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 8001982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_CAN_MspInit+0xb4>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4814      	ldr	r0, [pc, #80]	; (8001a14 <HAL_CAN_MspInit+0xb8>)
 80019c2:	f002 faed 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <HAL_CAN_MspInit+0xb8>)
 80019dc:	f002 fae0 	bl	8003fa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_CAN_MspInit+0xbc>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_CAN_MspInit+0xbc>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40006400 	.word	0x40006400
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40010000 	.word	0x40010000

08001a1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_Tas */
  ThumbFinger_TasHandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_Tas_attributes);
 8001a20:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <MX_FREERTOS_Init+0x68>)
 8001a22:	2100      	movs	r1, #0
 8001a24:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_FREERTOS_Init+0x6c>)
 8001a26:	f004 fc71 	bl	800630c <osThreadNew>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_FREERTOS_Init+0x70>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_Tas */
  IndexFinger_TasHandle = osThreadNew(IndexFinger, NULL, &IndexFinger_Tas_attributes);
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <MX_FREERTOS_Init+0x74>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4817      	ldr	r0, [pc, #92]	; (8001a94 <MX_FREERTOS_Init+0x78>)
 8001a36:	f004 fc69 	bl	800630c <osThreadNew>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <MX_FREERTOS_Init+0x7c>)
 8001a3e:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_Ta */
  MiddleFinger_TaHandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_Ta_attributes);
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <MX_FREERTOS_Init+0x80>)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_FREERTOS_Init+0x84>)
 8001a46:	f004 fc61 	bl	800630c <osThreadNew>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_FREERTOS_Init+0x88>)
 8001a4e:	6013      	str	r3, [r2, #0]

  /* creation of Ringfinger_Task */
  Ringfinger_TaskHandle = osThreadNew(Ringfinger, NULL, &Ringfinger_Task_attributes);
 8001a50:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <MX_FREERTOS_Init+0x8c>)
 8001a52:	2100      	movs	r1, #0
 8001a54:	4815      	ldr	r0, [pc, #84]	; (8001aac <MX_FREERTOS_Init+0x90>)
 8001a56:	f004 fc59 	bl	800630c <osThreadNew>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <MX_FREERTOS_Init+0x94>)
 8001a5e:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_tas */
  PinkyFinger_tasHandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_tas_attributes);
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <MX_FREERTOS_Init+0x98>)
 8001a62:	2100      	movs	r1, #0
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_FREERTOS_Init+0x9c>)
 8001a66:	f004 fc51 	bl	800630c <osThreadNew>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_FREERTOS_Init+0xa0>)
 8001a6e:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <MX_FREERTOS_Init+0xa4>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_FREERTOS_Init+0xa8>)
 8001a76:	f004 fc49 	bl	800630c <osThreadNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_FREERTOS_Init+0xac>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	0800d020 	.word	0x0800d020
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	200002e8 	.word	0x200002e8
 8001a90:	0800d044 	.word	0x0800d044
 8001a94:	08001afd 	.word	0x08001afd
 8001a98:	20000594 	.word	0x20000594
 8001a9c:	0800d068 	.word	0x0800d068
 8001aa0:	08001b31 	.word	0x08001b31
 8001aa4:	20000840 	.word	0x20000840
 8001aa8:	0800d08c 	.word	0x0800d08c
 8001aac:	08001b69 	.word	0x08001b69
 8001ab0:	20000aec 	.word	0x20000aec
 8001ab4:	0800d0b0 	.word	0x0800d0b0
 8001ab8:	08001ba1 	.word	0x08001ba1
 8001abc:	20000d98 	.word	0x20000d98
 8001ac0:	0800d0d4 	.word	0x0800d0d4
 8001ac4:	08001bd9 	.word	0x08001bd9
 8001ac8:	20001044 	.word	0x20001044

08001acc <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Thumb.Stuck_Finger)
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <ThumbFinger+0x2c>)
 8001ad6:	7b5b      	ldrb	r3, [r3, #13]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <ThumbFinger+0x16>
			Fingers_Status.Thumb.Direction=Stop;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <ThumbFinger+0x2c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	729a      	strb	r2, [r3, #10]
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001ae2:	4905      	ldr	r1, [pc, #20]	; (8001af8 <ThumbFinger+0x2c>)
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f001 f957 	bl	8002d98 <SetMotor>
		ADC_ReadCurrent_Thumb();
 8001aea:	f7ff fe99 	bl	8001820 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f004 fcb6 	bl	8006460 <osDelay>
		if(Fingers_Status.Thumb.Stuck_Finger)
 8001af4:	e7ee      	b.n	8001ad4 <ThumbFinger+0x8>
 8001af6:	bf00      	nop
 8001af8:	20001634 	.word	0x20001634

08001afc <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Index.Stuck_Finger)
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <IndexFinger+0x2c>)
 8001b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <IndexFinger+0x18>
			Fingers_Status.Index.Direction=Stop;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <IndexFinger+0x2c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	779a      	strb	r2, [r3, #30]
		SetMotor(Index, &Fingers_Status.Index);
 8001b14:	4905      	ldr	r1, [pc, #20]	; (8001b2c <IndexFinger+0x30>)
 8001b16:	2001      	movs	r0, #1
 8001b18:	f001 f93e 	bl	8002d98 <SetMotor>
		ADC_ReadCurrent_Index();
 8001b1c:	f7ff fdf4 	bl	8001708 <ADC_ReadCurrent_Index>
		osDelay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f004 fc9d 	bl	8006460 <osDelay>
		if(Fingers_Status.Index.Stuck_Finger)
 8001b26:	e7ed      	b.n	8001b04 <IndexFinger+0x8>
 8001b28:	20001634 	.word	0x20001634
 8001b2c:	20001648 	.word	0x20001648

08001b30 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Middle.Stuck_Finger)
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MiddleFinger+0x30>)
 8001b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <MiddleFinger+0x1a>
			Fingers_Status.Middle.Direction=Stop;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MiddleFinger+0x30>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		SetMotor(Middle, &Fingers_Status.Middle);
 8001b4a:	4906      	ldr	r1, [pc, #24]	; (8001b64 <MiddleFinger+0x34>)
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f001 f923 	bl	8002d98 <SetMotor>
		ADC_ReadCurrent_Middle();
 8001b52:	f7ff fd4d 	bl	80015f0 <ADC_ReadCurrent_Middle>
		osDelay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f004 fc82 	bl	8006460 <osDelay>
		if(Fingers_Status.Middle.Stuck_Finger)
 8001b5c:	e7ec      	b.n	8001b38 <MiddleFinger+0x8>
 8001b5e:	bf00      	nop
 8001b60:	20001634 	.word	0x20001634
 8001b64:	2000165c 	.word	0x2000165c

08001b68 <Ringfinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ringfinger */
void Ringfinger(void *argument)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ringfinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Ring.Stuck_Finger)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <Ringfinger+0x30>)
 8001b72:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <Ringfinger+0x1a>
			Fingers_Status.Ring.Direction=Stop;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <Ringfinger+0x30>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		SetMotor(Ring, &Fingers_Status.Ring);
 8001b82:	4906      	ldr	r1, [pc, #24]	; (8001b9c <Ringfinger+0x34>)
 8001b84:	2003      	movs	r0, #3
 8001b86:	f001 f907 	bl	8002d98 <SetMotor>
		ADC_ReadCurrent_Ring();
 8001b8a:	f7ff fca1 	bl	80014d0 <ADC_ReadCurrent_Ring>
		osDelay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f004 fc66 	bl	8006460 <osDelay>
		if(Fingers_Status.Ring.Stuck_Finger)
 8001b94:	e7ec      	b.n	8001b70 <Ringfinger+0x8>
 8001b96:	bf00      	nop
 8001b98:	20001634 	.word	0x20001634
 8001b9c:	20001670 	.word	0x20001670

08001ba0 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Pinky.Stuck_Finger)
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <PinkyFinger+0x30>)
 8001baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <PinkyFinger+0x1a>
			Fingers_Status.Pinky.Direction=Stop;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <PinkyFinger+0x30>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001bba:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <PinkyFinger+0x34>)
 8001bbc:	2004      	movs	r0, #4
 8001bbe:	f001 f8eb 	bl	8002d98 <SetMotor>
		ADC_ReadCurrent_Pinky();
 8001bc2:	f7ff fbf5 	bl	80013b0 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f004 fc4a 	bl	8006460 <osDelay>
		if(Fingers_Status.Pinky.Stuck_Finger)
 8001bcc:	e7ec      	b.n	8001ba8 <PinkyFinger+0x8>
 8001bce:	bf00      	nop
 8001bd0:	20001634 	.word	0x20001634
 8001bd4:	20001684 	.word	0x20001684

08001bd8 <CommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b098      	sub	sp, #96	; 0x60
 8001bde:	af08      	add	r7, sp, #32
 8001be0:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN CommunicationTask */
	char uartTX[45];
	/* Infinite loop */
	for(;;)
	{
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <CommunicationTask+0xe0>)
 8001be4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001be8:	461c      	mov	r4, r3
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <CommunicationTask+0xe0>)
 8001bec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <CommunicationTask+0xe0>)
 8001bf4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <CommunicationTask+0xe0>)
 8001bfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c00:	8a1b      	ldrh	r3, [r3, #16]
 8001c02:	f107 0010 	add.w	r0, r7, #16
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	9101      	str	r1, [sp, #4]
 8001c0a:	9200      	str	r2, [sp, #0]
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	4622      	mov	r2, r4
 8001c10:	492a      	ldr	r1, [pc, #168]	; (8001cbc <CommunicationTask+0xe4>)
 8001c12:	f008 fb4f 	bl	800a2b4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fa98 	bl	8000150 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f107 0110 	add.w	r1, r7, #16
 8001c28:	2305      	movs	r3, #5
 8001c2a:	4825      	ldr	r0, [pc, #148]	; (8001cc0 <CommunicationTask+0xe8>)
 8001c2c:	f003 fed4 	bl	80059d8 <HAL_UART_Transmit>
		sprintf(uartTX,"{PP:%.2fPR:%.2fPM:%.2fPI:%.2fPT:%.2f}\n",Fingers_Status.Pinky.position,Fingers_Status.Ring.position,Fingers_Status.Middle.position,Fingers_Status.Index.position,Fingers_Status.Thumb.position);
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fbf7 	bl	8000428 <__aeabi_f2d>
 8001c3a:	e9c7 0100 	strd	r0, r1, [r7]
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fbf0 	bl	8000428 <__aeabi_f2d>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fbe9 	bl	8000428 <__aeabi_f2d>
 8001c56:	4680      	mov	r8, r0
 8001c58:	4689      	mov	r9, r1
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fbe2 	bl	8000428 <__aeabi_f2d>
 8001c64:	4682      	mov	sl, r0
 8001c66:	468b      	mov	fp, r1
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <CommunicationTask+0xe0>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	f107 0010 	add.w	r0, r7, #16
 8001c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c7e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c86:	e9cd 4500 	strd	r4, r5, [sp]
 8001c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c8e:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <CommunicationTask+0xec>)
 8001c90:	f008 fb10 	bl	800a2b4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fa59 	bl	8000150 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	f107 0110 	add.w	r1, r7, #16
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <CommunicationTask+0xe8>)
 8001caa:	f003 fe95 	bl	80059d8 <HAL_UART_Transmit>
		osDelay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f004 fbd6 	bl	8006460 <osDelay>
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001cb4:	e795      	b.n	8001be2 <CommunicationTask+0xa>
 8001cb6:	bf00      	nop
 8001cb8:	20001634 	.word	0x20001634
 8001cbc:	0800cfa0 	.word	0x0800cfa0
 8001cc0:	200015b4 	.word	0x200015b4
 8001cc4:	0800cfc0 	.word	0x0800cfc0

08001cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a4c      	ldr	r2, [pc, #304]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d2a:	f043 0320 	orr.w	r3, r3, #32
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <MX_GPIO_Init+0x194>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 8001d42:	4847      	ldr	r0, [pc, #284]	; (8001e60 <MX_GPIO_Init+0x198>)
 8001d44:	f002 fab0 	bl	80042a8 <HAL_GPIO_WritePin>
                          |Motor1_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f24f 0108 	movw	r1, #61448	; 0xf008
 8001d4e:	4845      	ldr	r0, [pc, #276]	; (8001e64 <MX_GPIO_Init+0x19c>)
 8001d50:	f002 faaa 	bl	80042a8 <HAL_GPIO_WritePin>
                          |Motor5_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2104      	movs	r1, #4
 8001d58:	4843      	ldr	r0, [pc, #268]	; (8001e68 <MX_GPIO_Init+0x1a0>)
 8001d5a:	f002 faa5 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Motor2_INA_Pin|Motor2_INB_Pin|Motor1_INB_Pin
 8001d5e:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8001d62:	613b      	str	r3, [r7, #16]
                          |Motor1_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	483a      	ldr	r0, [pc, #232]	; (8001e60 <MX_GPIO_Init+0x198>)
 8001d78:	f002 f912 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder1_Pin|Motor3_Encoder2_Pin|Motor1_Encoder1_Pin|Motor1_Encoder2_Pin
 8001d7c:	f641 4333 	movw	r3, #7219	; 0x1c33
 8001d80:	613b      	str	r3, [r7, #16]
                          |Motor5_Encoder2_Pin|Motor4_Encoder1_Pin|Motor4_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <MX_GPIO_Init+0x1a4>)
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <MX_GPIO_Init+0x198>)
 8001d92:	f002 f905 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <MX_GPIO_Init+0x1a4>)
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4619      	mov	r1, r3
 8001da8:	4831      	ldr	r0, [pc, #196]	; (8001e70 <MX_GPIO_Init+0x1a8>)
 8001daa:	f002 f8f9 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Motor3_INB_Pin|Motor3_INA_Pin|Motor4_INB_Pin|Motor4_INA_Pin
 8001dae:	f24f 0308 	movw	r3, #61448	; 0xf008
 8001db2:	613b      	str	r3, [r7, #16]
                          |Motor5_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4827      	ldr	r0, [pc, #156]	; (8001e64 <MX_GPIO_Init+0x19c>)
 8001dc8:	f002 f8ea 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder1_Pin;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor5_Encoder1_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	4823      	ldr	r0, [pc, #140]	; (8001e70 <MX_GPIO_Init+0x1a8>)
 8001de2:	f002 f8dd 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_INB_Pin;
 8001de6:	2304      	movs	r3, #4
 8001de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_INB_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <MX_GPIO_Init+0x1a0>)
 8001dfe:	f002 f8cf 	bl	8003fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2006      	movs	r0, #6
 8001e08:	f002 f829 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e0c:	2006      	movs	r0, #6
 8001e0e:	f002 f842 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2007      	movs	r0, #7
 8001e18:	f002 f821 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e1c:	2007      	movs	r0, #7
 8001e1e:	f002 f83a 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	200a      	movs	r0, #10
 8001e28:	f002 f819 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f002 f832 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2017      	movs	r0, #23
 8001e38:	f002 f811 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e3c:	2017      	movs	r0, #23
 8001e3e:	f002 f82a 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2028      	movs	r0, #40	; 0x28
 8001e48:	f002 f809 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f002 f822 	bl	8003e96 <HAL_NVIC_EnableIRQ>

}
 8001e52:	bf00      	nop
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	40010800 	.word	0x40010800

08001e74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e84:	f000 81e6 	beq.w	8002254 <HAL_GPIO_EXTI_Callback+0x3e0>
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	f300 8235 	bgt.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	f000 81ae 	beq.w	80021f4 <HAL_GPIO_EXTI_Callback+0x380>
 8001e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e9c:	f300 822d 	bgt.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	f000 8206 	beq.w	80022b4 <HAL_GPIO_EXTI_Callback+0x440>
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	f300 8225 	bgt.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	f000 8100 	beq.w	80020b6 <HAL_GPIO_EXTI_Callback+0x242>
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	f300 821f 	bgt.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	dc49      	bgt.n	8001f54 <HAL_GPIO_EXTI_Callback+0xe0>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f340 821a 	ble.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	2b1f      	cmp	r3, #31
 8001eca:	f200 8216 	bhi.w	80022fa <HAL_GPIO_EXTI_Callback+0x486>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	0800212b 	.word	0x0800212b
 8001ed8:	0800218d 	.word	0x0800218d
 8001edc:	080022fb 	.word	0x080022fb
 8001ee0:	080022fb 	.word	0x080022fb
 8001ee4:	080022fb 	.word	0x080022fb
 8001ee8:	080022fb 	.word	0x080022fb
 8001eec:	080022fb 	.word	0x080022fb
 8001ef0:	080022fb 	.word	0x080022fb
 8001ef4:	080022fb 	.word	0x080022fb
 8001ef8:	080022fb 	.word	0x080022fb
 8001efc:	080022fb 	.word	0x080022fb
 8001f00:	080022fb 	.word	0x080022fb
 8001f04:	080022fb 	.word	0x080022fb
 8001f08:	080022fb 	.word	0x080022fb
 8001f0c:	080022fb 	.word	0x080022fb
 8001f10:	08001f5b 	.word	0x08001f5b
 8001f14:	080022fb 	.word	0x080022fb
 8001f18:	080022fb 	.word	0x080022fb
 8001f1c:	080022fb 	.word	0x080022fb
 8001f20:	080022fb 	.word	0x080022fb
 8001f24:	080022fb 	.word	0x080022fb
 8001f28:	080022fb 	.word	0x080022fb
 8001f2c:	080022fb 	.word	0x080022fb
 8001f30:	080022fb 	.word	0x080022fb
 8001f34:	080022fb 	.word	0x080022fb
 8001f38:	080022fb 	.word	0x080022fb
 8001f3c:	080022fb 	.word	0x080022fb
 8001f40:	080022fb 	.word	0x080022fb
 8001f44:	080022fb 	.word	0x080022fb
 8001f48:	080022fb 	.word	0x080022fb
 8001f4c:	080022fb 	.word	0x080022fb
 8001f50:	08001fcf 	.word	0x08001fcf
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d074      	beq.n	8002042 <HAL_GPIO_EXTI_Callback+0x1ce>
				default:
					break;
			}
			break;
		default:
			break;
 8001f58:	e1cf      	b.n	80022fa <HAL_GPIO_EXTI_Callback+0x486>
			switch (Fingers_Status.Pinky.Direction) {
 8001f5a:	4ba4      	ldr	r3, [pc, #656]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f5c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d002      	beq.n	8001f6a <HAL_GPIO_EXTI_Callback+0xf6>
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d015      	beq.n	8001f94 <HAL_GPIO_EXTI_Callback+0x120>
					break;
 8001f68:	e030      	b.n	8001fcc <HAL_GPIO_EXTI_Callback+0x158>
					Fingers_Status.Pinky.Encoder++;
 8001f6a:	4ba0      	ldr	r3, [pc, #640]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b9d      	ldr	r3, [pc, #628]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001f7a:	4b9c      	ldr	r3, [pc, #624]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f80:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d91e      	bls.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x152>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001f88:	4b98      	ldr	r3, [pc, #608]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f8a:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001f8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001f92:	e018      	b.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x152>
					Fingers_Status.Pinky.Encoder--;
 8001f94:	4b95      	ldr	r3, [pc, #596]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001f96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b93      	ldr	r3, [pc, #588]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8001fa4:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001faa:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d804      	bhi.n	8001fbc <HAL_GPIO_EXTI_Callback+0x148>
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001fb8:	2b63      	cmp	r3, #99	; 0x63
 8001fba:	d806      	bhi.n	8001fca <HAL_GPIO_EXTI_Callback+0x156>
						Fingers_Status.Pinky.Encoder=0;
 8001fbc:	4b8b      	ldr	r3, [pc, #556]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_EXTI_Callback+0x156>
					break;
 8001fc6:	bf00      	nop
 8001fc8:	e198      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 8001fca:	bf00      	nop
			break;
 8001fcc:	e196      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Pinky.Direction) {
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fd0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_GPIO_EXTI_Callback+0x16a>
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d015      	beq.n	8002008 <HAL_GPIO_EXTI_Callback+0x194>
					break;
 8001fdc:	e030      	b.n	8002040 <HAL_GPIO_EXTI_Callback+0x1cc>
					Fingers_Status.Pinky.Encoder++;
 8001fde:	4b83      	ldr	r3, [pc, #524]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fe0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b80      	ldr	r3, [pc, #512]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001fea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001ff4:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d91e      	bls.n	800203a <HAL_GPIO_EXTI_Callback+0x1c6>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8001ffe:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8002002:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8002006:	e018      	b.n	800203a <HAL_GPIO_EXTI_Callback+0x1c6>
					Fingers_Status.Pinky.Encoder--;
 8002008:	4b78      	ldr	r3, [pc, #480]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800200a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002014:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800201a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800201e:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002022:	4293      	cmp	r3, r2
 8002024:	d804      	bhi.n	8002030 <HAL_GPIO_EXTI_Callback+0x1bc>
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002028:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800202c:	2b63      	cmp	r3, #99	; 0x63
 800202e:	d806      	bhi.n	800203e <HAL_GPIO_EXTI_Callback+0x1ca>
						Fingers_Status.Pinky.Encoder=0;
 8002030:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002032:	2200      	movs	r2, #0
 8002034:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8002038:	e001      	b.n	800203e <HAL_GPIO_EXTI_Callback+0x1ca>
					break;
 800203a:	bf00      	nop
 800203c:	e15e      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 800203e:	bf00      	nop
			break;
 8002040:	e15c      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Ring.Direction) {
 8002042:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002048:	2b01      	cmp	r3, #1
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_EXTI_Callback+0x1de>
 800204c:	2b02      	cmp	r3, #2
 800204e:	d015      	beq.n	800207c <HAL_GPIO_EXTI_Callback+0x208>
					break;
 8002050:	e030      	b.n	80020b4 <HAL_GPIO_EXTI_Callback+0x240>
					Fingers_Status.Ring.Encoder++;
 8002052:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002058:	3301      	adds	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8002062:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002068:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 800206c:	4293      	cmp	r3, r2
 800206e:	d91e      	bls.n	80020ae <HAL_GPIO_EXTI_Callback+0x23a>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002072:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8002076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 800207a:	e018      	b.n	80020ae <HAL_GPIO_EXTI_Callback+0x23a>
					Fingers_Status.Ring.Encoder--;
 800207c:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800207e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800208e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002092:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002096:	4293      	cmp	r3, r2
 8002098:	d804      	bhi.n	80020a4 <HAL_GPIO_EXTI_Callback+0x230>
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800209c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a0:	2b63      	cmp	r3, #99	; 0x63
 80020a2:	d806      	bhi.n	80020b2 <HAL_GPIO_EXTI_Callback+0x23e>
						Fingers_Status.Ring.Encoder=0;
 80020a4:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_EXTI_Callback+0x23e>
					break;
 80020ae:	bf00      	nop
 80020b0:	e124      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 80020b2:	bf00      	nop
			break;
 80020b4:	e122      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Ring.Direction) {
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d002      	beq.n	80020c6 <HAL_GPIO_EXTI_Callback+0x252>
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d015      	beq.n	80020f0 <HAL_GPIO_EXTI_Callback+0x27c>
					break;
 80020c4:	e030      	b.n	8002128 <HAL_GPIO_EXTI_Callback+0x2b4>
					Fingers_Status.Ring.Encoder++;
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020cc:	3301      	adds	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020dc:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d91e      	bls.n	8002122 <HAL_GPIO_EXTI_Callback+0x2ae>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020e6:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 80020ee:	e018      	b.n	8002122 <HAL_GPIO_EXTI_Callback+0x2ae>
					Fingers_Status.Ring.Encoder--;
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80020fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002106:	f64f 7278 	movw	r2, #65400	; 0xff78
 800210a:	4293      	cmp	r3, r2
 800210c:	d804      	bhi.n	8002118 <HAL_GPIO_EXTI_Callback+0x2a4>
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002114:	2b63      	cmp	r3, #99	; 0x63
 8002116:	d806      	bhi.n	8002126 <HAL_GPIO_EXTI_Callback+0x2b2>
						Fingers_Status.Ring.Encoder=0;
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800211a:	2200      	movs	r2, #0
 800211c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 8002120:	e001      	b.n	8002126 <HAL_GPIO_EXTI_Callback+0x2b2>
					break;
 8002122:	bf00      	nop
 8002124:	e0ea      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 8002126:	bf00      	nop
			break;
 8002128:	e0e8      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Middle.Direction) {
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800212c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002130:	2b01      	cmp	r3, #1
 8002132:	d002      	beq.n	800213a <HAL_GPIO_EXTI_Callback+0x2c6>
 8002134:	2b02      	cmp	r3, #2
 8002136:	d011      	beq.n	800215c <HAL_GPIO_EXTI_Callback+0x2e8>
					break;
 8002138:	e027      	b.n	800218a <HAL_GPIO_EXTI_Callback+0x316>
					Fingers_Status.Middle.Encoder++;
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800213c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800213e:	3301      	adds	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002144:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002148:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800214a:	f247 021c 	movw	r2, #28700	; 0x701c
 800214e:	4293      	cmp	r3, r2
 8002150:	d918      	bls.n	8002184 <HAL_GPIO_EXTI_Callback+0x310>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002154:	f247 021c 	movw	r2, #28700	; 0x701c
 8002158:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 800215a:	e013      	b.n	8002184 <HAL_GPIO_EXTI_Callback+0x310>
					Fingers_Status.Middle.Encoder--;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800215e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002166:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800216a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800216c:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002170:	4293      	cmp	r3, r2
 8002172:	d803      	bhi.n	800217c <HAL_GPIO_EXTI_Callback+0x308>
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 8002176:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002178:	2b63      	cmp	r3, #99	; 0x63
 800217a:	d805      	bhi.n	8002188 <HAL_GPIO_EXTI_Callback+0x314>
					Fingers_Status.Middle.Encoder=0;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800217e:	2200      	movs	r2, #0
 8002180:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 8002182:	e001      	b.n	8002188 <HAL_GPIO_EXTI_Callback+0x314>
					break;
 8002184:	bf00      	nop
 8002186:	e0b9      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 8002188:	bf00      	nop
			break;
 800218a:	e0b7      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Middle.Direction) {
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800218e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002192:	2b01      	cmp	r3, #1
 8002194:	d002      	beq.n	800219c <HAL_GPIO_EXTI_Callback+0x328>
 8002196:	2b02      	cmp	r3, #2
 8002198:	d011      	beq.n	80021be <HAL_GPIO_EXTI_Callback+0x34a>
					break;
 800219a:	e02a      	b.n	80021f2 <HAL_GPIO_EXTI_Callback+0x37e>
					Fingers_Status.Middle.Encoder++;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 800219e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021a6:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021ac:	f247 021c 	movw	r2, #28700	; 0x701c
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d918      	bls.n	80021e6 <HAL_GPIO_EXTI_Callback+0x372>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021b6:	f247 021c 	movw	r2, #28700	; 0x701c
 80021ba:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 80021bc:	e013      	b.n	80021e6 <HAL_GPIO_EXTI_Callback+0x372>
					Fingers_Status.Middle.Encoder--;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021c8:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021ce:	f64f 7278 	movw	r2, #65400	; 0xff78
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d803      	bhi.n	80021de <HAL_GPIO_EXTI_Callback+0x36a>
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021da:	2b63      	cmp	r3, #99	; 0x63
 80021dc:	d808      	bhi.n	80021f0 <HAL_GPIO_EXTI_Callback+0x37c>
					Fingers_Status.Middle.Encoder=0;
 80021de:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GPIO_EXTI_Callback+0x378>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_EXTI_Callback+0x37c>
					break;
 80021e6:	bf00      	nop
 80021e8:	e088      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
 80021ea:	bf00      	nop
 80021ec:	20001634 	.word	0x20001634
					break;
 80021f0:	bf00      	nop
			break;
 80021f2:	e083      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Index.Direction) {
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80021f6:	7f9b      	ldrb	r3, [r3, #30]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d002      	beq.n	8002202 <HAL_GPIO_EXTI_Callback+0x38e>
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d011      	beq.n	8002224 <HAL_GPIO_EXTI_Callback+0x3b0>
					break;
 8002200:	e027      	b.n	8002252 <HAL_GPIO_EXTI_Callback+0x3de>
					Fingers_Status.Index.Encoder++;
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002204:	8b9b      	ldrh	r3, [r3, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800220c:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002210:	8b9b      	ldrh	r3, [r3, #28]
 8002212:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002216:	4293      	cmp	r3, r2
 8002218:	d918      	bls.n	800224c <HAL_GPIO_EXTI_Callback+0x3d8>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 800221a:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800221c:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002220:	839a      	strh	r2, [r3, #28]
					break;
 8002222:	e013      	b.n	800224c <HAL_GPIO_EXTI_Callback+0x3d8>
					Fingers_Status.Index.Encoder--;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002226:	8b9b      	ldrh	r3, [r3, #28]
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800222e:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002232:	8b9b      	ldrh	r3, [r3, #28]
 8002234:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002238:	4293      	cmp	r3, r2
 800223a:	d803      	bhi.n	8002244 <HAL_GPIO_EXTI_Callback+0x3d0>
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800223e:	8b9b      	ldrh	r3, [r3, #28]
 8002240:	2b63      	cmp	r3, #99	; 0x63
 8002242:	d805      	bhi.n	8002250 <HAL_GPIO_EXTI_Callback+0x3dc>
					Fingers_Status.Index.Encoder=0;
 8002244:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002246:	2200      	movs	r2, #0
 8002248:	839a      	strh	r2, [r3, #28]
					break;
 800224a:	e001      	b.n	8002250 <HAL_GPIO_EXTI_Callback+0x3dc>
					break;
 800224c:	bf00      	nop
 800224e:	e055      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 8002250:	bf00      	nop
			break;
 8002252:	e053      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Index.Direction) {
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002256:	7f9b      	ldrb	r3, [r3, #30]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d002      	beq.n	8002262 <HAL_GPIO_EXTI_Callback+0x3ee>
 800225c:	2b02      	cmp	r3, #2
 800225e:	d011      	beq.n	8002284 <HAL_GPIO_EXTI_Callback+0x410>
					break;
 8002260:	e027      	b.n	80022b2 <HAL_GPIO_EXTI_Callback+0x43e>
					Fingers_Status.Index.Encoder++;
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002264:	8b9b      	ldrh	r3, [r3, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800226c:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002270:	8b9b      	ldrh	r3, [r3, #28]
 8002272:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002276:	4293      	cmp	r3, r2
 8002278:	d918      	bls.n	80022ac <HAL_GPIO_EXTI_Callback+0x438>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800227c:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002280:	839a      	strh	r2, [r3, #28]
					break;
 8002282:	e013      	b.n	80022ac <HAL_GPIO_EXTI_Callback+0x438>
					Fingers_Status.Index.Encoder--;
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002286:	8b9b      	ldrh	r3, [r3, #28]
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800228e:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 8002292:	8b9b      	ldrh	r3, [r3, #28]
 8002294:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002298:	4293      	cmp	r3, r2
 800229a:	d803      	bhi.n	80022a4 <HAL_GPIO_EXTI_Callback+0x430>
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 800229e:	8b9b      	ldrh	r3, [r3, #28]
 80022a0:	2b63      	cmp	r3, #99	; 0x63
 80022a2:	d805      	bhi.n	80022b0 <HAL_GPIO_EXTI_Callback+0x43c>
					Fingers_Status.Index.Encoder=0;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	839a      	strh	r2, [r3, #28]
					break;
 80022aa:	e001      	b.n	80022b0 <HAL_GPIO_EXTI_Callback+0x43c>
					break;
 80022ac:	bf00      	nop
 80022ae:	e025      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
					break;
 80022b0:	bf00      	nop
			break;
 80022b2:	e023      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			switch (Fingers_Status.Thumb.Direction) {
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022b6:	7a9b      	ldrb	r3, [r3, #10]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <HAL_GPIO_EXTI_Callback+0x44e>
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_EXTI_Callback+0x45c>
					break;
 80022c0:	e01a      	b.n	80022f8 <HAL_GPIO_EXTI_Callback+0x484>
					Fingers_Status.Thumb.Encoder++;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022c4:	891b      	ldrh	r3, [r3, #8]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022cc:	811a      	strh	r2, [r3, #8]
					break;
 80022ce:	e013      	b.n	80022f8 <HAL_GPIO_EXTI_Callback+0x484>
					Fingers_Status.Thumb.Encoder--;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022d2:	891b      	ldrh	r3, [r3, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022da:	811a      	strh	r2, [r3, #8]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<100)
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022de:	891b      	ldrh	r3, [r3, #8]
 80022e0:	f64f 7278 	movw	r2, #65400	; 0xff78
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d803      	bhi.n	80022f0 <HAL_GPIO_EXTI_Callback+0x47c>
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022ea:	891b      	ldrh	r3, [r3, #8]
 80022ec:	2b63      	cmp	r3, #99	; 0x63
 80022ee:	d802      	bhi.n	80022f6 <HAL_GPIO_EXTI_Callback+0x482>
					Fingers_Status.Thumb.Encoder=0;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_Callback+0x494>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	811a      	strh	r2, [r3, #8]
					break;
 80022f6:	bf00      	nop
			break;
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_EXTI_Callback+0x488>
			break;
 80022fa:	bf00      	nop
	}
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20001634 	.word	0x20001634

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002310:	f000 ff86 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002314:	f000 f817 	bl	8002346 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002318:	f7ff fcd6 	bl	8001cc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800231c:	f7fe ffaa 	bl	8001274 <MX_ADC1_Init>
  MX_CAN_Init();
 8002320:	f7ff fae8 	bl	80018f4 <MX_CAN_Init>
  MX_TIM1_Init();
 8002324:	f000 fa8e 	bl	8002844 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002328:	f000 fb32 	bl	8002990 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800232c:	f000 fc1e 	bl	8002b6c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002330:	f000 fc46 	bl	8002bc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_motor_controller();
 8002334:	f000 fee8 	bl	8003108 <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002338:	f003 ff82 	bl	8006240 <osKernelInitialize>
  MX_FREERTOS_Init();
 800233c:	f7ff fb6e 	bl	8001a1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002340:	f003 ffb0 	bl	80062a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002344:	e7fe      	b.n	8002344 <main+0x38>

08002346 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b094      	sub	sp, #80	; 0x50
 800234a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002350:	2228      	movs	r2, #40	; 0x28
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f008 f810 	bl	800a37a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237a:	2301      	movs	r3, #1
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800237e:	2310      	movs	r3, #16
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002382:	2302      	movs	r3, #2
 8002384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002386:	2300      	movs	r3, #0
 8002388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800238a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002394:	4618      	mov	r0, r3
 8002396:	f001 ffb7 	bl	8004308 <HAL_RCC_OscConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023a0:	f000 f83a 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a4:	230f      	movs	r3, #15
 80023a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fa23 	bl	800480c <HAL_RCC_ClockConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023cc:	f000 f824 	bl	8002418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023d0:	2302      	movs	r3, #2
 80023d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fbdd 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023e8:	f000 f816 	bl	8002418 <Error_Handler>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3750      	adds	r7, #80	; 0x50
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002406:	f000 ff21 	bl	800324c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	e7fe      	b.n	8002420 <Error_Handler+0x8>
	...

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_MspInit+0x68>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_MspInit+0x68>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6193      	str	r3, [r2, #24]
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_MspInit+0x68>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_MspInit+0x68>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_MspInit+0x68>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_MspInit+0x68>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	210f      	movs	r1, #15
 800245e:	f06f 0001 	mvn.w	r0, #1
 8002462:	f001 fcfc 	bl	8003e5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_MspInit+0x6c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_MspInit+0x6c>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000

08002494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_InitTick+0xe8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_InitTick+0xe8>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	61d3      	str	r3, [r2, #28]
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_InitTick+0xe8>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c2:	f107 0210 	add.w	r2, r7, #16
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fb17 	bl	8004b00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024dc:	f002 fae8 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 80024e0:	6378      	str	r0, [r7, #52]	; 0x34
 80024e2:	e004      	b.n	80024ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024e4:	f002 fae4 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 80024e8:	4603      	mov	r3, r0
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <HAL_InitTick+0xec>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9b      	lsrs	r3, r3, #18
 80024f8:	3b01      	subs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_InitTick+0xf0>)
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_InitTick+0xf4>)
 8002500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_InitTick+0xf0>)
 8002504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002508:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800250a:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <HAL_InitTick+0xf0>)
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_InitTick+0xf0>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_InitTick+0xf0>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_InitTick+0xf0>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002522:	4818      	ldr	r0, [pc, #96]	; (8002584 <HAL_InitTick+0xf0>)
 8002524:	f002 fcb0 	bl	8004e88 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800252e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11b      	bne.n	800256e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002536:	4813      	ldr	r0, [pc, #76]	; (8002584 <HAL_InitTick+0xf0>)
 8002538:	f002 fcda 	bl	8004ef0 <HAL_TIM_Base_Start_IT>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002546:	2b00      	cmp	r3, #0
 8002548:	d111      	bne.n	800256e <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800254a:	201d      	movs	r0, #29
 800254c:	f001 fca3 	bl	8003e96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d808      	bhi.n	8002568 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002556:	2200      	movs	r2, #0
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	201d      	movs	r0, #29
 800255c:	f001 fc7f 	bl	8003e5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_InitTick+0xf8>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e002      	b.n	800256e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800256e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002572:	4618      	mov	r0, r3
 8002574:	3738      	adds	r7, #56	; 0x38
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	431bde83 	.word	0x431bde83
 8002584:	200014f0 	.word	0x200014f0
 8002588:	40000400 	.word	0x40000400
 800258c:	20000004 	.word	0x20000004

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <NMI_Handler+0x4>

08002596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <MemManage_Handler+0x4>

080025a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <UsageFault_Handler+0x4>

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder1_Pin);
 80025be:	2001      	movs	r0, #1
 80025c0:	f001 fe8a 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder2_Pin);
 80025cc:	2002      	movs	r0, #2
 80025ce:	f001 fe83 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder1_Pin);
 80025da:	2010      	movs	r0, #16
 80025dc:	f001 fe7c 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder2_Pin);
 80025e8:	2020      	movs	r0, #32
 80025ea:	f001 fe75 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder1_Pin);
 80025ee:	2040      	movs	r0, #64	; 0x40
 80025f0:	f001 fe72 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder2_Pin);
 80025f4:	2080      	movs	r0, #128	; 0x80
 80025f6:	f001 fe6f 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM3_IRQHandler+0x10>)
 8002606:	f002 fcf3 	bl	8004ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200014f0 	.word	0x200014f0

08002614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART1_IRQHandler+0x10>)
 800261a:	f003 facb 	bl	8005bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200015b4 	.word	0x200015b4

08002628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <USART3_IRQHandler+0x10>)
 800262e:	f003 fac1 	bl	8005bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200015f4 	.word	0x200015f4

0800263c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder2_Pin);
 8002640:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002644:	f001 fe48 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder1_Pin);
 8002648:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800264c:	f001 fe44 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder2_Pin);
 8002650:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002654:	f001 fe40 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <_kill>:

int _kill(int pid, int sig)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002674:	f007 ff3c 	bl	800a4f0 <__errno>
 8002678:	4603      	mov	r3, r0
 800267a:	2216      	movs	r2, #22
 800267c:	601a      	str	r2, [r3, #0]
  return -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_exit>:

void _exit (int status)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002692:	f04f 31ff 	mov.w	r1, #4294967295
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffe7 	bl	800266a <_kill>
  while (1) {}    /* Make sure we hang here */
 800269c:	e7fe      	b.n	800269c <_exit+0x12>

0800269e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e00a      	b.n	80026c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b0:	f3af 8000 	nop.w
 80026b4:	4601      	mov	r1, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	60ba      	str	r2, [r7, #8]
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbf0      	blt.n	80026b0 <_read+0x12>
  }

  return len;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e009      	b.n	80026fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	60ba      	str	r2, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf1      	blt.n	80026ea <_write+0x12>
  }
  return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_close>:

int _close(int file)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002736:	605a      	str	r2, [r3, #4]
  return 0;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <_isatty>:

int _isatty(int file)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274c:	2301      	movs	r3, #1
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f007 fea6 	bl	800a4f0 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20005000 	.word	0x20005000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	20001530 	.word	0x20001530
 80027d8:	20003d90 	.word	0x20003d90

080027dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <SystemInit+0x5c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <SystemInit+0x5c>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <SystemInit+0x5c>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4911      	ldr	r1, [pc, #68]	; (8002838 <SystemInit+0x5c>)
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <SystemInit+0x60>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <SystemInit+0x5c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <SystemInit+0x5c>)
 80027fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <SystemInit+0x5c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SystemInit+0x5c>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <SystemInit+0x5c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <SystemInit+0x5c>)
 800281a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800281e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SystemInit+0x5c>)
 8002822:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002826:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SystemInit+0x64>)
 800282a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800282e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	f8ff0000 	.word	0xf8ff0000
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b092      	sub	sp, #72	; 0x48
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2220      	movs	r2, #32
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f007 fd83 	bl	800a37a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002874:	4b44      	ldr	r3, [pc, #272]	; (8002988 <MX_TIM1_Init+0x144>)
 8002876:	4a45      	ldr	r2, [pc, #276]	; (800298c <MX_TIM1_Init+0x148>)
 8002878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <MX_TIM1_Init+0x144>)
 800287c:	2213      	movs	r2, #19
 800287e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <MX_TIM1_Init+0x144>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <MX_TIM1_Init+0x144>)
 8002888:	2263      	movs	r2, #99	; 0x63
 800288a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <MX_TIM1_Init+0x144>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <MX_TIM1_Init+0x144>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <MX_TIM1_Init+0x144>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800289e:	483a      	ldr	r0, [pc, #232]	; (8002988 <MX_TIM1_Init+0x144>)
 80028a0:	f002 fb49 	bl	8004f36 <HAL_TIM_PWM_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80028aa:	f7ff fdb5 	bl	8002418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ba:	4619      	mov	r1, r3
 80028bc:	4832      	ldr	r0, [pc, #200]	; (8002988 <MX_TIM1_Init+0x144>)
 80028be:	f002 ff97 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80028c8:	f7ff fda6 	bl	8002418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028cc:	2360      	movs	r3, #96	; 0x60
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	2200      	movs	r2, #0
 80028ee:	4619      	mov	r1, r3
 80028f0:	4825      	ldr	r0, [pc, #148]	; (8002988 <MX_TIM1_Init+0x144>)
 80028f2:	f002 fc85 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028fc:	f7ff fd8c 	bl	8002418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002904:	2204      	movs	r2, #4
 8002906:	4619      	mov	r1, r3
 8002908:	481f      	ldr	r0, [pc, #124]	; (8002988 <MX_TIM1_Init+0x144>)
 800290a:	f002 fc79 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002914:	f7ff fd80 	bl	8002418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	2208      	movs	r2, #8
 800291e:	4619      	mov	r1, r3
 8002920:	4819      	ldr	r0, [pc, #100]	; (8002988 <MX_TIM1_Init+0x144>)
 8002922:	f002 fc6d 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800292c:	f7ff fd74 	bl	8002418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	220c      	movs	r2, #12
 8002936:	4619      	mov	r1, r3
 8002938:	4813      	ldr	r0, [pc, #76]	; (8002988 <MX_TIM1_Init+0x144>)
 800293a:	f002 fc61 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8002944:	f7ff fd68 	bl	8002418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <MX_TIM1_Init+0x144>)
 800296c:	f002 ff84 	bl	8005878 <HAL_TIMEx_ConfigBreakDeadTime>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8002976:	f7ff fd4f 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <MX_TIM1_Init+0x144>)
 800297c:	f000 f890 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8002980:	bf00      	nop
 8002982:	3748      	adds	r7, #72	; 0x48
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20001534 	.word	0x20001534
 800298c:	40012c00 	.word	0x40012c00

08002990 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029bc:	2213      	movs	r2, #19
 80029be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029c8:	2263      	movs	r2, #99	; 0x63
 80029ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029d8:	4818      	ldr	r0, [pc, #96]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029da:	f002 faac 	bl	8004f36 <HAL_TIM_PWM_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80029e4:	f7ff fd18 	bl	8002418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	4619      	mov	r1, r3
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <MX_TIM2_Init+0xac>)
 80029f8:	f002 fefa 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002a02:	f7ff fd09 	bl	8002418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a06:	2360      	movs	r3, #96	; 0x60
 8002a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4807      	ldr	r0, [pc, #28]	; (8002a3c <MX_TIM2_Init+0xac>)
 8002a1e:	f002 fbef 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002a28:	f7ff fcf6 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <MX_TIM2_Init+0xac>)
 8002a2e:	f000 f837 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20001574 	.word	0x20001574

08002a40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_TIM_PWM_MspInit+0x58>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10c      	bne.n	8002a6c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a5c:	6193      	str	r3, [r2, #24]
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a6a:	e010      	b.n	8002a8e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d10b      	bne.n	8002a8e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_TIM_PWM_MspInit+0x5c>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_TIM_MspPostInit+0xbc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d119      	bne.n	8002af4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin|Motor2_PWM_Pin|Motor3_PWM_Pin|Motor4_PWM_Pin;
 8002ad8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4619      	mov	r1, r3
 8002aec:	481d      	ldr	r0, [pc, #116]	; (8002b64 <HAL_TIM_MspPostInit+0xc4>)
 8002aee:	f001 fa57 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002af2:	e02f      	b.n	8002b54 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d12a      	bne.n	8002b54 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor5_PWM_Pin;
 8002b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480e      	ldr	r0, [pc, #56]	; (8002b64 <HAL_TIM_MspPostInit+0xc4>)
 8002b2c:	f001 fa38 	bl	8003fa0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <HAL_TIM_MspPostInit+0xc8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_TIM_MspPostInit+0xc8>)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6053      	str	r3, [r2, #4]
}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010800 	.word	0x40010800
 8002b68:	40010000 	.word	0x40010000

08002b6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <MX_USART1_UART_Init+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_USART1_UART_Init+0x4c>)
 8002ba4:	f002 fecb 	bl	800593e <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bae:	f7ff fc33 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200015b4 	.word	0x200015b4
 8002bbc:	40013800 	.word	0x40013800

08002bc0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_USART3_UART_Init+0x50>)
 8002bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART3_UART_Init+0x4c>)
 8002bf8:	f002 fea1 	bl	800593e <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c02:	f7ff fc09 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200015f4 	.word	0x200015f4
 8002c10:	40004800 	.word	0x40004800

08002c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_UART_MspInit+0x134>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d146      	bne.n	8002cc2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c34:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4a3e      	ldr	r2, [pc, #248]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8002c64:	2340      	movs	r3, #64	; 0x40
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	4836      	ldr	r0, [pc, #216]	; (8002d50 <HAL_UART_MspInit+0x13c>)
 8002c78:	f001 f992 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4830      	ldr	r0, [pc, #192]	; (8002d50 <HAL_UART_MspInit+0x13c>)
 8002c90:	f001 f986 	bl	8003fa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_UART_MspInit+0x140>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <HAL_UART_MspInit+0x140>)
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2107      	movs	r1, #7
 8002cb4:	2025      	movs	r0, #37	; 0x25
 8002cb6:	f001 f8d2 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cba:	2025      	movs	r0, #37	; 0x25
 8002cbc:	f001 f8eb 	bl	8003e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cc0:	e03e      	b.n	8002d40 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_UART_MspInit+0x144>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d139      	bne.n	8002d40 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd6:	61d3      	str	r3, [r2, #28]
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_UART_MspInit+0x138>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480f      	ldr	r0, [pc, #60]	; (8002d50 <HAL_UART_MspInit+0x13c>)
 8002d12:	f001 f945 	bl	8003fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4809      	ldr	r0, [pc, #36]	; (8002d50 <HAL_UART_MspInit+0x13c>)
 8002d2c:	f001 f938 	bl	8003fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2105      	movs	r1, #5
 8002d34:	2027      	movs	r0, #39	; 0x27
 8002d36:	f001 f892 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d3a:	2027      	movs	r0, #39	; 0x27
 8002d3c:	f001 f8ab 	bl	8003e96 <HAL_NVIC_EnableIRQ>
}
 8002d40:	bf00      	nop
 8002d42:	3730      	adds	r7, #48	; 0x30
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010c00 	.word	0x40010c00
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40004800 	.word	0x40004800

08002d5c <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <SetMotor>:
	}
}
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	f200 81a0 	bhi.w	80030ec <SetMotor+0x354>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <SetMotor+0x1c>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dc9 	.word	0x08002dc9
 8002db8:	08002e53 	.word	0x08002e53
 8002dbc:	08002ef3 	.word	0x08002ef3
 8002dc0:	08002f93 	.word	0x08002f93
 8002dc4:	08003027 	.word	0x08003027
	case Thumb :
		if ( FingerStruct->Direction== Open) {
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7a9b      	ldrb	r3, [r3, #10]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10f      	bne.n	8002df0 <SetMotor+0x58>
			htim2.Instance->CCR1 = FingerStruct->speed;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7b9a      	ldrb	r2, [r3, #14]
 8002dd4:	4b9f      	ldr	r3, [pc, #636]	; (8003054 <SetMotor+0x2bc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2108      	movs	r1, #8
 8002dde:	489e      	ldr	r0, [pc, #632]	; (8003058 <SetMotor+0x2c0>)
 8002de0:	f001 fa62 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2104      	movs	r1, #4
 8002de8:	489c      	ldr	r0, [pc, #624]	; (800305c <SetMotor+0x2c4>)
 8002dea:	f001 fa5d 	bl	80042a8 <HAL_GPIO_WritePin>
 8002dee:	e021      	b.n	8002e34 <SetMotor+0x9c>
		} else if (FingerStruct->Direction == Close) {
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	7a9b      	ldrb	r3, [r3, #10]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d10f      	bne.n	8002e18 <SetMotor+0x80>
			htim2.Instance->CCR1 = FingerStruct->speed;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	7b9a      	ldrb	r2, [r3, #14]
 8002dfc:	4b95      	ldr	r3, [pc, #596]	; (8003054 <SetMotor+0x2bc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 8002e02:	2201      	movs	r2, #1
 8002e04:	2108      	movs	r1, #8
 8002e06:	4894      	ldr	r0, [pc, #592]	; (8003058 <SetMotor+0x2c0>)
 8002e08:	f001 fa4e 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4892      	ldr	r0, [pc, #584]	; (800305c <SetMotor+0x2c4>)
 8002e12:	f001 fa49 	bl	80042a8 <HAL_GPIO_WritePin>
 8002e16:	e00d      	b.n	8002e34 <SetMotor+0x9c>
		} else {
			htim2.Instance->CCR1 = 0;
 8002e18:	4b8e      	ldr	r3, [pc, #568]	; (8003054 <SetMotor+0x2bc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor5_INA_GPIO_Port, Motor5_INA_Pin, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2108      	movs	r1, #8
 8002e24:	488c      	ldr	r0, [pc, #560]	; (8003058 <SetMotor+0x2c0>)
 8002e26:	f001 fa3f 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor5_INB_GPIO_Port, Motor5_INB_Pin, 1);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	488b      	ldr	r0, [pc, #556]	; (800305c <SetMotor+0x2c4>)
 8002e30:	f001 fa3a 	bl	80042a8 <HAL_GPIO_WritePin>
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	891b      	ldrh	r3, [r3, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd ff4b 	bl	8000cd4 <__aeabi_ui2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4987      	ldr	r1, [pc, #540]	; (8003060 <SetMotor+0x2c8>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd ff9e 	bl	8000d84 <__aeabi_fmul>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
		break;
 8002e50:	e14d      	b.n	80030ee <SetMotor+0x356>
	case Index :
		if ( FingerStruct->Direction== Open) {
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7a9b      	ldrb	r3, [r3, #10]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d111      	bne.n	8002e7e <SetMotor+0xe6>
			htim1.Instance->CCR4 = FingerStruct->speed;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	7b9a      	ldrb	r2, [r3, #14]
 8002e5e:	4b81      	ldr	r3, [pc, #516]	; (8003064 <SetMotor+0x2cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6a:	487b      	ldr	r0, [pc, #492]	; (8003058 <SetMotor+0x2c0>)
 8002e6c:	f001 fa1c 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8002e70:	2201      	movs	r2, #1
 8002e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e76:	4878      	ldr	r0, [pc, #480]	; (8003058 <SetMotor+0x2c0>)
 8002e78:	f001 fa16 	bl	80042a8 <HAL_GPIO_WritePin>
 8002e7c:	e025      	b.n	8002eca <SetMotor+0x132>
		} else if (FingerStruct->Direction == Close) {
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7a9b      	ldrb	r3, [r3, #10]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d111      	bne.n	8002eaa <SetMotor+0x112>
			htim1.Instance->CCR4 = FingerStruct->speed;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7b9a      	ldrb	r2, [r3, #14]
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <SetMotor+0x2cc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8002e90:	2201      	movs	r2, #1
 8002e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e96:	4870      	ldr	r0, [pc, #448]	; (8003058 <SetMotor+0x2c0>)
 8002e98:	f001 fa06 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea2:	486d      	ldr	r0, [pc, #436]	; (8003058 <SetMotor+0x2c0>)
 8002ea4:	f001 fa00 	bl	80042a8 <HAL_GPIO_WritePin>
 8002ea8:	e00f      	b.n	8002eca <SetMotor+0x132>
		} else {
			htim1.Instance->CCR4 = 0;
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <SetMotor+0x2cc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(Motor4_INA_GPIO_Port, Motor4_INA_Pin, 1);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb8:	4867      	ldr	r0, [pc, #412]	; (8003058 <SetMotor+0x2c0>)
 8002eba:	f001 f9f5 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor4_INB_GPIO_Port, Motor4_INB_Pin, 1);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ec4:	4864      	ldr	r0, [pc, #400]	; (8003058 <SetMotor+0x2c0>)
 8002ec6:	f001 f9ef 	bl	80042a8 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	891b      	ldrh	r3, [r3, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd ff00 	bl	8000cd4 <__aeabi_ui2f>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4964      	ldr	r1, [pc, #400]	; (8003068 <SetMotor+0x2d0>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe f807 	bl	8000eec <__aeabi_fdiv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	495f      	ldr	r1, [pc, #380]	; (8003060 <SetMotor+0x2c8>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd ff4e 	bl	8000d84 <__aeabi_fmul>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	605a      	str	r2, [r3, #4]
		break;
 8002ef0:	e0fd      	b.n	80030ee <SetMotor+0x356>
	case Middle :
		if ( FingerStruct->Direction== Open) {
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	7a9b      	ldrb	r3, [r3, #10]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d111      	bne.n	8002f1e <SetMotor+0x186>
			htim1.Instance->CCR3 = FingerStruct->speed;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7b9a      	ldrb	r2, [r3, #14]
 8002efe:	4b59      	ldr	r3, [pc, #356]	; (8003064 <SetMotor+0x2cc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f0a:	4853      	ldr	r0, [pc, #332]	; (8003058 <SetMotor+0x2c0>)
 8002f0c:	f001 f9cc 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f16:	4850      	ldr	r0, [pc, #320]	; (8003058 <SetMotor+0x2c0>)
 8002f18:	f001 f9c6 	bl	80042a8 <HAL_GPIO_WritePin>
 8002f1c:	e025      	b.n	8002f6a <SetMotor+0x1d2>
		} else if (FingerStruct->Direction == Close) {
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	7a9b      	ldrb	r3, [r3, #10]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d111      	bne.n	8002f4a <SetMotor+0x1b2>
			htim1.Instance->CCR3 = FingerStruct->speed;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	7b9a      	ldrb	r2, [r3, #14]
 8002f2a:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <SetMotor+0x2cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 8002f30:	2201      	movs	r2, #1
 8002f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f36:	4848      	ldr	r0, [pc, #288]	; (8003058 <SetMotor+0x2c0>)
 8002f38:	f001 f9b6 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f42:	4845      	ldr	r0, [pc, #276]	; (8003058 <SetMotor+0x2c0>)
 8002f44:	f001 f9b0 	bl	80042a8 <HAL_GPIO_WritePin>
 8002f48:	e00f      	b.n	8002f6a <SetMotor+0x1d2>
		} else {
			htim1.Instance->CCR3 = 0;
 8002f4a:	4b46      	ldr	r3, [pc, #280]	; (8003064 <SetMotor+0x2cc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Motor3_INA_GPIO_Port, Motor3_INA_Pin, 1);
 8002f52:	2201      	movs	r2, #1
 8002f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f58:	483f      	ldr	r0, [pc, #252]	; (8003058 <SetMotor+0x2c0>)
 8002f5a:	f001 f9a5 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor3_INB_GPIO_Port, Motor3_INB_Pin, 1);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f64:	483c      	ldr	r0, [pc, #240]	; (8003058 <SetMotor+0x2c0>)
 8002f66:	f001 f99f 	bl	80042a8 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	891b      	ldrh	r3, [r3, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd feb0 	bl	8000cd4 <__aeabi_ui2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	493d      	ldr	r1, [pc, #244]	; (800306c <SetMotor+0x2d4>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd ffb7 	bl	8000eec <__aeabi_fdiv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4937      	ldr	r1, [pc, #220]	; (8003060 <SetMotor+0x2c8>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fefe 	bl	8000d84 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
		break;
 8002f90:	e0ad      	b.n	80030ee <SetMotor+0x356>
	case Ring :
		if ( FingerStruct->Direction== Open) {
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7a9b      	ldrb	r3, [r3, #10]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10f      	bne.n	8002fba <SetMotor+0x222>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	7b9a      	ldrb	r2, [r3, #14]
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <SetMotor+0x2cc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	4831      	ldr	r0, [pc, #196]	; (8003070 <SetMotor+0x2d8>)
 8002faa:	f001 f97d 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	482f      	ldr	r0, [pc, #188]	; (8003070 <SetMotor+0x2d8>)
 8002fb4:	f001 f978 	bl	80042a8 <HAL_GPIO_WritePin>
 8002fb8:	e021      	b.n	8002ffe <SetMotor+0x266>
		} else if (FingerStruct->Direction == Close) {
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	7a9b      	ldrb	r3, [r3, #10]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d10f      	bne.n	8002fe2 <SetMotor+0x24a>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7b9a      	ldrb	r2, [r3, #14]
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <SetMotor+0x2cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	4827      	ldr	r0, [pc, #156]	; (8003070 <SetMotor+0x2d8>)
 8002fd2:	f001 f969 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	4825      	ldr	r0, [pc, #148]	; (8003070 <SetMotor+0x2d8>)
 8002fdc:	f001 f964 	bl	80042a8 <HAL_GPIO_WritePin>
 8002fe0:	e00d      	b.n	8002ffe <SetMotor+0x266>
		} else {
			htim1.Instance->CCR2 = 0;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <SetMotor+0x2cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, 1);
 8002fea:	2201      	movs	r2, #1
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	4820      	ldr	r0, [pc, #128]	; (8003070 <SetMotor+0x2d8>)
 8002ff0:	f001 f95a 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, 1);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	481d      	ldr	r0, [pc, #116]	; (8003070 <SetMotor+0x2d8>)
 8002ffa:	f001 f955 	bl	80042a8 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	891b      	ldrh	r3, [r3, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fe66 	bl	8000cd4 <__aeabi_ui2f>
 8003008:	4603      	mov	r3, r0
 800300a:	491a      	ldr	r1, [pc, #104]	; (8003074 <SetMotor+0x2dc>)
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ff6d 	bl	8000eec <__aeabi_fdiv>
 8003012:	4603      	mov	r3, r0
 8003014:	4912      	ldr	r1, [pc, #72]	; (8003060 <SetMotor+0x2c8>)
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd feb4 	bl	8000d84 <__aeabi_fmul>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
		break;
 8003024:	e063      	b.n	80030ee <SetMotor+0x356>
	case Pinky :
		if ( FingerStruct->Direction== Open) {
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7a9b      	ldrb	r3, [r3, #10]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d124      	bne.n	8003078 <SetMotor+0x2e0>
			htim1.Instance->CCR1 = FingerStruct->speed;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	7b9a      	ldrb	r2, [r3, #14]
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <SetMotor+0x2cc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800303e:	480c      	ldr	r0, [pc, #48]	; (8003070 <SetMotor+0x2d8>)
 8003040:	f001 f932 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800304a:	4809      	ldr	r0, [pc, #36]	; (8003070 <SetMotor+0x2d8>)
 800304c:	f001 f92c 	bl	80042a8 <HAL_GPIO_WritePin>
 8003050:	e038      	b.n	80030c4 <SetMotor+0x32c>
 8003052:	bf00      	nop
 8003054:	20001574 	.word	0x20001574
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40011400 	.word	0x40011400
 8003060:	42c80000 	.word	0x42c80000
 8003064:	20001534 	.word	0x20001534
 8003068:	46d54800 	.word	0x46d54800
 800306c:	46e03800 	.word	0x46e03800
 8003070:	40011000 	.word	0x40011000
 8003074:	46d7a000 	.word	0x46d7a000
		} else if (FingerStruct->Direction == Close) {
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7a9b      	ldrb	r3, [r3, #10]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d111      	bne.n	80030a4 <SetMotor+0x30c>
			htim1.Instance->CCR1 = FingerStruct->speed;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	7b9a      	ldrb	r2, [r3, #14]
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <SetMotor+0x360>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 800308a:	2201      	movs	r2, #1
 800308c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003090:	481a      	ldr	r0, [pc, #104]	; (80030fc <SetMotor+0x364>)
 8003092:	f001 f909 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800309c:	4817      	ldr	r0, [pc, #92]	; (80030fc <SetMotor+0x364>)
 800309e:	f001 f903 	bl	80042a8 <HAL_GPIO_WritePin>
 80030a2:	e00f      	b.n	80030c4 <SetMotor+0x32c>
		} else {
			htim1.Instance->CCR1 = 0;
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <SetMotor+0x360>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b2:	4812      	ldr	r0, [pc, #72]	; (80030fc <SetMotor+0x364>)
 80030b4:	f001 f8f8 	bl	80042a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, 1);
 80030b8:	2201      	movs	r2, #1
 80030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030be:	480f      	ldr	r0, [pc, #60]	; (80030fc <SetMotor+0x364>)
 80030c0:	f001 f8f2 	bl	80042a8 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	891b      	ldrh	r3, [r3, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fe03 	bl	8000cd4 <__aeabi_ui2f>
 80030ce:	4603      	mov	r3, r0
 80030d0:	490b      	ldr	r1, [pc, #44]	; (8003100 <SetMotor+0x368>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd ff0a 	bl	8000eec <__aeabi_fdiv>
 80030d8:	4603      	mov	r3, r0
 80030da:	490a      	ldr	r1, [pc, #40]	; (8003104 <SetMotor+0x36c>)
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe51 	bl	8000d84 <__aeabi_fmul>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]
		break;
 80030ea:	e000      	b.n	80030ee <SetMotor+0x356>

	default:

		break;
 80030ec:	bf00      	nop
	}
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20001534 	.word	0x20001534
 80030fc:	40011000 	.word	0x40011000
 8003100:	46cbe800 	.word	0x46cbe800
 8003104:	42c80000 	.word	0x42c80000

08003108 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	//start read data from ADC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800310c:	2100      	movs	r1, #0
 800310e:	4827      	ldr	r0, [pc, #156]	; (80031ac <init_motor_controller+0xa4>)
 8003110:	f001 ff3c 	bl	8004f8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003114:	2104      	movs	r1, #4
 8003116:	4825      	ldr	r0, [pc, #148]	; (80031ac <init_motor_controller+0xa4>)
 8003118:	f001 ff38 	bl	8004f8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800311c:	2108      	movs	r1, #8
 800311e:	4823      	ldr	r0, [pc, #140]	; (80031ac <init_motor_controller+0xa4>)
 8003120:	f001 ff34 	bl	8004f8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003124:	210c      	movs	r1, #12
 8003126:	4821      	ldr	r0, [pc, #132]	; (80031ac <init_motor_controller+0xa4>)
 8003128:	f001 ff30 	bl	8004f8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800312c:	2100      	movs	r1, #0
 800312e:	4820      	ldr	r0, [pc, #128]	; (80031b0 <init_motor_controller+0xa8>)
 8003130:	f001 ff2c 	bl	8004f8c <HAL_TIM_PWM_Start>
	HAL_ADC_MspInit(&hadc1);
 8003134:	481f      	ldr	r0, [pc, #124]	; (80031b4 <init_motor_controller+0xac>)
 8003136:	f7fe f8db 	bl	80012f0 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart1, &RXuart, 1);
 800313a:	2201      	movs	r2, #1
 800313c:	491e      	ldr	r1, [pc, #120]	; (80031b8 <init_motor_controller+0xb0>)
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <init_motor_controller+0xb4>)
 8003140:	f002 fce3 	bl	8005b0a <HAL_UART_Receive_IT>
	TX_State=idel;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <init_motor_controller+0xb8>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
	// Configure settings
	controller.AntiWindup = ENABLED;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <init_motor_controller+0xbc>)
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <init_motor_controller+0xbc>)
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <init_motor_controller+0xbc>)
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <init_motor_controller+0xc0>)
 800315e:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 8003160:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <init_motor_controller+0xbc>)
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <init_motor_controller+0xc4>)
 8003164:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <init_motor_controller+0xbc>)
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <init_motor_controller+0xc8>)
 800316a:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <init_motor_controller+0xbc>)
 800316e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003172:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <init_motor_controller+0xbc>)
 8003176:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800317a:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 800317c:	4811      	ldr	r0, [pc, #68]	; (80031c4 <init_motor_controller+0xbc>)
 800317e:	f7ff fded 	bl	8002d5c <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <init_motor_controller+0xbc>)
 8003184:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003188:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <init_motor_controller+0xbc>)
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <init_motor_controller+0xc0>)
 800318e:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <init_motor_controller+0xbc>)
 8003192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003196:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <init_motor_controller+0xbc>)
 800319a:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <init_motor_controller+0xc8>)
 800319c:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <init_motor_controller+0xbc>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20001534 	.word	0x20001534
 80031b0:	20001574 	.word	0x20001574
 80031b4:	20000290 	.word	0x20000290
 80031b8:	2000028e 	.word	0x2000028e
 80031bc:	200015b4 	.word	0x200015b4
 80031c0:	2000028f 	.word	0x2000028f
 80031c4:	200016b0 	.word	0x200016b0
 80031c8:	42480000 	.word	0x42480000
 80031cc:	c2480000 	.word	0xc2480000
 80031d0:	40400000 	.word	0x40400000

080031d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031d6:	e003      	b.n	80031e0 <LoopCopyDataInit>

080031d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031de:	3104      	adds	r1, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031e0:	480a      	ldr	r0, [pc, #40]	; (800320c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031e8:	d3f6      	bcc.n	80031d8 <CopyDataInit>
  ldr r2, =_sbss
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031ec:	e002      	b.n	80031f4 <LoopFillZerobss>

080031ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031f0:	f842 3b04 	str.w	r3, [r2], #4

080031f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031f8:	d3f9      	bcc.n	80031ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fa:	f7ff faef 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fe:	f007 f97d 	bl	800a4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003202:	f7ff f883 	bl	800230c <main>
  bx lr
 8003206:	4770      	bx	lr
  ldr r3, =_sidata
 8003208:	0800d544 	.word	0x0800d544
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003210:	200001d8 	.word	0x200001d8
  ldr r2, =_sbss
 8003214:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 8003218:	20003d8c 	.word	0x20003d8c

0800321c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC1_2_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_Init+0x28>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_Init+0x28>)
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003230:	2003      	movs	r0, #3
 8003232:	f000 fe09 	bl	8003e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003236:	200f      	movs	r0, #15
 8003238:	f7ff f92c 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800323c:	f7ff f8f2 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000

0800324c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_IncTick+0x20>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000008 	.word	0x20000008
 800326c:	200016ec 	.word	0x200016ec

08003270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_GetTick+0x10>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	200016ec 	.word	0x200016ec

08003284 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0be      	b.n	8003424 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f814 	bl	80012f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fbdd 	bl	8003a88 <ADC_ConversionStop_Disable>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8099 	bne.w	8003412 <HAL_ADC_Init+0x18e>
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8095 	bne.w	8003412 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003304:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800330c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d003      	beq.n	8003326 <HAL_ADC_Init+0xa2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_ADC_Init+0xa8>
 8003326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332a:	e000      	b.n	800332e <HAL_ADC_Init+0xaa>
 800332c:	2300      	movs	r3, #0
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7d1b      	ldrb	r3, [r3, #20]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d119      	bne.n	8003370 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b1b      	ldrb	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	3b01      	subs	r3, #1
 800334a:	035a      	lsls	r2, r3, #13
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e00b      	b.n	8003370 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_ADC_Init+0x1a8>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	430b      	orrs	r3, r1
 8003396:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d003      	beq.n	80033aa <HAL_ADC_Init+0x126>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	051b      	lsls	r3, r3, #20
 80033b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_ADC_Init+0x1ac>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10b      	bne.n	80033f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033ee:	e018      	b.n	8003422 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f023 0312 	bic.w	r3, r3, #18
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003410:	e007      	b.n	8003422 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	f043 0210 	orr.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffe1f7fd 	.word	0xffe1f7fd
 8003430:	ff1f0efe 	.word	0xff1f0efe

08003434 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Start+0x1a>
 800344a:	2302      	movs	r3, #2
 800344c:	e098      	b.n	8003580 <HAL_ADC_Start+0x14c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fac4 	bl	80039e4 <ADC_Enable>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8087 	bne.w	8003576 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a41      	ldr	r2, [pc, #260]	; (8003588 <HAL_ADC_Start+0x154>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d105      	bne.n	8003492 <HAL_ADC_Start+0x5e>
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_ADC_Start+0x158>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d115      	bne.n	80034be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d026      	beq.n	80034fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034bc:	e01d      	b.n	80034fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <HAL_ADC_Start+0x158>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_ADC_Start+0xaa>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_ADC_Start+0x154>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10d      	bne.n	80034fa <HAL_ADC_Start+0xc6>
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_ADC_Start+0x158>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f023 0206 	bic.w	r2, r3, #6
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
 8003512:	e002      	b.n	800351a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0202 	mvn.w	r2, #2
 800352a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003536:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800353a:	d113      	bne.n	8003564 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <HAL_ADC_Start+0x154>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d105      	bne.n	8003552 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_ADC_Start+0x158>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	e00c      	b.n	800357e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e003      	b.n	800357e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40012800 	.word	0x40012800
 800358c:	40012400 	.word	0x40012400

08003590 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Stop+0x1a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e01a      	b.n	80035e0 <HAL_ADC_Stop+0x50>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa68 	bl	8003a88 <ADC_ConversionStop_Disable>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80035fe:	f7ff fe37 	bl	8003270 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0c8      	b.n	80037bc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d12a      	bne.n	800368e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d123      	bne.n	800368e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003646:	e01a      	b.n	800367e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d016      	beq.n	800367e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_ADC_PollForConversion+0x7e>
 8003656:	f7ff fe0b 	bl	8003270 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20b      	bcs.n	800367e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e09e      	b.n	80037bc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0dd      	beq.n	8003648 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800368c:	e06c      	b.n	8003768 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800368e:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <HAL_ADC_PollForConversion+0x1dc>)
 8003690:	681c      	ldr	r4, [r3, #0]
 8003692:	2002      	movs	r0, #2
 8003694:	f001 fb38 	bl	8004d08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003698:	4603      	mov	r3, r0
 800369a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <HAL_ADC_PollForConversion+0x1e0>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d118      	bne.n	80036de <HAL_ADC_PollForConversion+0xf6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_ADC_PollForConversion+0x1e4>)
 80036b4:	400b      	ands	r3, r1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d111      	bne.n	80036de <HAL_ADC_PollForConversion+0xf6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6919      	ldr	r1, [r3, #16]
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_ADC_PollForConversion+0x1e8>)
 80036c2:	400b      	ands	r3, r1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_ADC_PollForConversion+0xf2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_ADC_PollForConversion+0x1ec>)
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_PollForConversion+0xf2>
 80036d6:	2314      	movs	r3, #20
 80036d8:	e020      	b.n	800371c <HAL_ADC_PollForConversion+0x134>
 80036da:	2329      	movs	r3, #41	; 0x29
 80036dc:	e01e      	b.n	800371c <HAL_ADC_PollForConversion+0x134>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6919      	ldr	r1, [r3, #16]
 80036e4:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_ADC_PollForConversion+0x1e8>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <HAL_ADC_PollForConversion+0x112>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_ADC_PollForConversion+0x1ec>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_ADC_PollForConversion+0x12e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6919      	ldr	r1, [r3, #16]
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_ADC_PollForConversion+0x1f0>)
 8003702:	400b      	ands	r3, r1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <HAL_ADC_PollForConversion+0x132>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_ADC_PollForConversion+0x1f0>)
 8003710:	400b      	ands	r3, r1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_PollForConversion+0x132>
 8003716:	2354      	movs	r3, #84	; 0x54
 8003718:	e000      	b.n	800371c <HAL_ADC_PollForConversion+0x134>
 800371a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003722:	e01d      	b.n	8003760 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d016      	beq.n	800375a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_ADC_PollForConversion+0x15a>
 8003732:	f7ff fd9d 	bl	8003270 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20b      	bcs.n	800375a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e030      	b.n	80037bc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3301      	adds	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8dd      	bhi.n	8003724 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0212 	mvn.w	r2, #18
 8003770:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003788:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800378c:	d115      	bne.n	80037ba <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003792:	2b00      	cmp	r3, #0
 8003794:	d111      	bne.n	80037ba <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	20000000 	.word	0x20000000
 80037c8:	24924924 	.word	0x24924924
 80037cc:	00924924 	.word	0x00924924
 80037d0:	12492492 	.word	0x12492492
 80037d4:	00492492 	.word	0x00492492
 80037d8:	00249249 	.word	0x00249249

080037dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x20>
 8003810:	2302      	movs	r3, #2
 8003812:	e0dc      	b.n	80039ce <HAL_ADC_ConfigChannel+0x1da>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d81c      	bhi.n	800385e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	3b05      	subs	r3, #5
 8003836:	221f      	movs	r2, #31
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	4019      	ands	r1, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	3b05      	subs	r3, #5
 8003850:	fa00 f203 	lsl.w	r2, r0, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
 800385c:	e03c      	b.n	80038d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d81c      	bhi.n	80038a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b23      	subs	r3, #35	; 0x23
 8003878:	221f      	movs	r2, #31
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	4019      	ands	r1, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b23      	subs	r3, #35	; 0x23
 8003892:	fa00 f203 	lsl.w	r2, r0, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
 800389e:	e01b      	b.n	80038d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3b41      	subs	r3, #65	; 0x41
 80038b2:	221f      	movs	r2, #31
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	4019      	ands	r1, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	3b41      	subs	r3, #65	; 0x41
 80038cc:	fa00 f203 	lsl.w	r2, r0, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b09      	cmp	r3, #9
 80038de:	d91c      	bls.n	800391a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68d9      	ldr	r1, [r3, #12]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	3b1e      	subs	r3, #30
 80038f2:	2207      	movs	r2, #7
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	4019      	ands	r1, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6898      	ldr	r0, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	3b1e      	subs	r3, #30
 800390c:	fa00 f203 	lsl.w	r2, r0, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e019      	b.n	800394e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6919      	ldr	r1, [r3, #16]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	2207      	movs	r2, #7
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	4019      	ands	r1, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6898      	ldr	r0, [r3, #8]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	fa00 f203 	lsl.w	r2, r0, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b10      	cmp	r3, #16
 8003954:	d003      	beq.n	800395e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800395a:	2b11      	cmp	r3, #17
 800395c:	d132      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d126      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003984:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b10      	cmp	r3, #16
 800398c:	d11a      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_ADC_ConfigChannel+0x1e8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	0c9a      	lsrs	r2, r3, #18
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a4:	e002      	b.n	80039ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f9      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x1b2>
 80039b2:	e007      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40012400 	.word	0x40012400
 80039dc:	20000000 	.word	0x20000000
 80039e0:	431bde83 	.word	0x431bde83

080039e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d039      	beq.n	8003a76 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <ADC_Enable+0x9c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <ADC_Enable+0xa0>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	0c9b      	lsrs	r3, r3, #18
 8003a1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a20:	e002      	b.n	8003a28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a2e:	f7ff fc1f 	bl	8003270 <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a34:	e018      	b.n	8003a68 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a36:	f7ff fc1b 	bl	8003270 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d911      	bls.n	8003a68 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d1df      	bne.n	8003a36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000000 	.word	0x20000000
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d127      	bne.n	8003af2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab2:	f7ff fbdd 	bl	8003270 <HAL_GetTick>
 8003ab6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ab8:	e014      	b.n	8003ae4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aba:	f7ff fbd9 	bl	8003270 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d90d      	bls.n	8003ae4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f043 0210 	orr.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e007      	b.n	8003af4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d0e3      	beq.n	8003aba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0ed      	b.n	8003cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd ff1e 	bl	800195c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0202 	bic.w	r2, r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b30:	f7ff fb9e 	bl	8003270 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b36:	e012      	b.n	8003b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b38:	f7ff fb9a 	bl	8003270 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b0a      	cmp	r3, #10
 8003b44:	d90b      	bls.n	8003b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2205      	movs	r2, #5
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0c5      	b.n	8003cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7c:	f7ff fb78 	bl	8003270 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b82:	e012      	b.n	8003baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b84:	f7ff fb74 	bl	8003270 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b0a      	cmp	r3, #10
 8003b90:	d90b      	bls.n	8003baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e09f      	b.n	8003cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0e5      	beq.n	8003b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7e1b      	ldrb	r3, [r3, #24]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d108      	bne.n	8003bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7e5b      	ldrb	r3, [r3, #25]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e007      	b.n	8003c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7e9b      	ldrb	r3, [r3, #26]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d108      	bne.n	8003c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0220 	orr.w	r2, r2, #32
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e007      	b.n	8003c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0220 	bic.w	r2, r2, #32
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7edb      	ldrb	r3, [r3, #27]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0210 	bic.w	r2, r2, #16
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e007      	b.n	8003c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0210 	orr.w	r2, r2, #16
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7f1b      	ldrb	r3, [r3, #28]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e007      	b.n	8003c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0208 	bic.w	r2, r2, #8
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7f5b      	ldrb	r3, [r3, #29]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d108      	bne.n	8003ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0204 	orr.w	r2, r2, #4
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e007      	b.n	8003cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0204 	bic.w	r2, r2, #4
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	ea42 0103 	orr.w	r1, r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4906      	ldr	r1, [pc, #24]	; (8003d8c <__NVIC_EnableIRQ+0x34>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100

08003d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db0a      	blt.n	8003dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	490c      	ldr	r1, [pc, #48]	; (8003ddc <__NVIC_SetPriority+0x4c>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	440b      	add	r3, r1
 8003db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db8:	e00a      	b.n	8003dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4908      	ldr	r1, [pc, #32]	; (8003de0 <__NVIC_SetPriority+0x50>)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	440b      	add	r3, r1
 8003dce:	761a      	strb	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000e100 	.word	0xe000e100
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f1c3 0307 	rsb	r3, r3, #7
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf28      	it	cs
 8003e02:	2304      	movcs	r3, #4
 8003e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d902      	bls.n	8003e14 <NVIC_EncodePriority+0x30>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3b03      	subs	r3, #3
 8003e12:	e000      	b.n	8003e16 <NVIC_EncodePriority+0x32>
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	401a      	ands	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	4313      	orrs	r3, r2
         );
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff4f 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e70:	f7ff ff64 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f7ff ffb2 	bl	8003de4 <NVIC_EncodePriority>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff81 	bl	8003d90 <__NVIC_SetPriority>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff57 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d005      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e051      	b.n	8003f7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 020e 	bic.w	r2, r2, #14
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_DMA_Abort_IT+0xd0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d029      	beq.n	8003f54 <HAL_DMA_Abort_IT+0xa0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_DMA_Abort_IT+0xd4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <HAL_DMA_Abort_IT+0x9c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_DMA_Abort_IT+0xd8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01a      	beq.n	8003f4a <HAL_DMA_Abort_IT+0x96>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_DMA_Abort_IT+0xdc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d012      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x90>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_DMA_Abort_IT+0xe0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00a      	beq.n	8003f3e <HAL_DMA_Abort_IT+0x8a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_DMA_Abort_IT+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d102      	bne.n	8003f38 <HAL_DMA_Abort_IT+0x84>
 8003f32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f36:	e00e      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f3c:	e00b      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f42:	e008      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f48:	e005      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f4e:	e002      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f50:	2310      	movs	r3, #16
 8003f52:	e000      	b.n	8003f56 <HAL_DMA_Abort_IT+0xa2>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <HAL_DMA_Abort_IT+0xe8>)
 8003f58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
    } 
  }
  return status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40020008 	.word	0x40020008
 8003f88:	4002001c 	.word	0x4002001c
 8003f8c:	40020030 	.word	0x40020030
 8003f90:	40020044 	.word	0x40020044
 8003f94:	40020058 	.word	0x40020058
 8003f98:	4002006c 	.word	0x4002006c
 8003f9c:	40020000 	.word	0x40020000

08003fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08b      	sub	sp, #44	; 0x2c
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb2:	e169      	b.n	8004288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	f040 8158 	bne.w	8004282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a9a      	ldr	r2, [pc, #616]	; (8004240 <HAL_GPIO_Init+0x2a0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d05e      	beq.n	800409a <HAL_GPIO_Init+0xfa>
 8003fdc:	4a98      	ldr	r2, [pc, #608]	; (8004240 <HAL_GPIO_Init+0x2a0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d875      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 8003fe2:	4a98      	ldr	r2, [pc, #608]	; (8004244 <HAL_GPIO_Init+0x2a4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d058      	beq.n	800409a <HAL_GPIO_Init+0xfa>
 8003fe8:	4a96      	ldr	r2, [pc, #600]	; (8004244 <HAL_GPIO_Init+0x2a4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d86f      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 8003fee:	4a96      	ldr	r2, [pc, #600]	; (8004248 <HAL_GPIO_Init+0x2a8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d052      	beq.n	800409a <HAL_GPIO_Init+0xfa>
 8003ff4:	4a94      	ldr	r2, [pc, #592]	; (8004248 <HAL_GPIO_Init+0x2a8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d869      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 8003ffa:	4a94      	ldr	r2, [pc, #592]	; (800424c <HAL_GPIO_Init+0x2ac>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04c      	beq.n	800409a <HAL_GPIO_Init+0xfa>
 8004000:	4a92      	ldr	r2, [pc, #584]	; (800424c <HAL_GPIO_Init+0x2ac>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d863      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 8004006:	4a92      	ldr	r2, [pc, #584]	; (8004250 <HAL_GPIO_Init+0x2b0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d046      	beq.n	800409a <HAL_GPIO_Init+0xfa>
 800400c:	4a90      	ldr	r2, [pc, #576]	; (8004250 <HAL_GPIO_Init+0x2b0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d85d      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 8004012:	2b12      	cmp	r3, #18
 8004014:	d82a      	bhi.n	800406c <HAL_GPIO_Init+0xcc>
 8004016:	2b12      	cmp	r3, #18
 8004018:	d859      	bhi.n	80040ce <HAL_GPIO_Init+0x12e>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_GPIO_Init+0x80>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	0800409b 	.word	0x0800409b
 8004024:	08004075 	.word	0x08004075
 8004028:	08004087 	.word	0x08004087
 800402c:	080040c9 	.word	0x080040c9
 8004030:	080040cf 	.word	0x080040cf
 8004034:	080040cf 	.word	0x080040cf
 8004038:	080040cf 	.word	0x080040cf
 800403c:	080040cf 	.word	0x080040cf
 8004040:	080040cf 	.word	0x080040cf
 8004044:	080040cf 	.word	0x080040cf
 8004048:	080040cf 	.word	0x080040cf
 800404c:	080040cf 	.word	0x080040cf
 8004050:	080040cf 	.word	0x080040cf
 8004054:	080040cf 	.word	0x080040cf
 8004058:	080040cf 	.word	0x080040cf
 800405c:	080040cf 	.word	0x080040cf
 8004060:	080040cf 	.word	0x080040cf
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004091 	.word	0x08004091
 800406c:	4a79      	ldr	r2, [pc, #484]	; (8004254 <HAL_GPIO_Init+0x2b4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004072:	e02c      	b.n	80040ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	623b      	str	r3, [r7, #32]
          break;
 800407a:	e029      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	3304      	adds	r3, #4
 8004082:	623b      	str	r3, [r7, #32]
          break;
 8004084:	e024      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	3308      	adds	r3, #8
 800408c:	623b      	str	r3, [r7, #32]
          break;
 800408e:	e01f      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	330c      	adds	r3, #12
 8004096:	623b      	str	r3, [r7, #32]
          break;
 8004098:	e01a      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040a2:	2304      	movs	r3, #4
 80040a4:	623b      	str	r3, [r7, #32]
          break;
 80040a6:	e013      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040b0:	2308      	movs	r3, #8
 80040b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	611a      	str	r2, [r3, #16]
          break;
 80040ba:	e009      	b.n	80040d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040bc:	2308      	movs	r3, #8
 80040be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	615a      	str	r2, [r3, #20]
          break;
 80040c6:	e003      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
          break;
 80040cc:	e000      	b.n	80040d0 <HAL_GPIO_Init+0x130>
          break;
 80040ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2bff      	cmp	r3, #255	; 0xff
 80040d4:	d801      	bhi.n	80040da <HAL_GPIO_Init+0x13a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	e001      	b.n	80040de <HAL_GPIO_Init+0x13e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2bff      	cmp	r3, #255	; 0xff
 80040e4:	d802      	bhi.n	80040ec <HAL_GPIO_Init+0x14c>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	e002      	b.n	80040f2 <HAL_GPIO_Init+0x152>
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	3b08      	subs	r3, #8
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	210f      	movs	r1, #15
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	6a39      	ldr	r1, [r7, #32]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80b1 	beq.w	8004282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <HAL_GPIO_Init+0x2b8>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4a4c      	ldr	r2, [pc, #304]	; (8004258 <HAL_GPIO_Init+0x2b8>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6193      	str	r3, [r2, #24]
 800412c:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <HAL_GPIO_Init+0x2b8>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004138:	4a48      	ldr	r2, [pc, #288]	; (800425c <HAL_GPIO_Init+0x2bc>)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <HAL_GPIO_Init+0x2c0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_GPIO_Init+0x1ec>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <HAL_GPIO_Init+0x2c4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00d      	beq.n	8004188 <HAL_GPIO_Init+0x1e8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3e      	ldr	r2, [pc, #248]	; (8004268 <HAL_GPIO_Init+0x2c8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_Init+0x1e4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <HAL_GPIO_Init+0x2cc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <HAL_GPIO_Init+0x1e0>
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <HAL_GPIO_Init+0x1ee>
 8004180:	2304      	movs	r3, #4
 8004182:	e004      	b.n	800418e <HAL_GPIO_Init+0x1ee>
 8004184:	2302      	movs	r3, #2
 8004186:	e002      	b.n	800418e <HAL_GPIO_Init+0x1ee>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_GPIO_Init+0x1ee>
 800418c:	2300      	movs	r3, #0
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	f002 0203 	and.w	r2, r2, #3
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	4093      	lsls	r3, r2
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800419e:	492f      	ldr	r1, [pc, #188]	; (800425c <HAL_GPIO_Init+0x2bc>)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	492c      	ldr	r1, [pc, #176]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e006      	b.n	80041d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4928      	ldr	r1, [pc, #160]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4922      	ldr	r1, [pc, #136]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	e006      	b.n	80041fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	491e      	ldr	r1, [pc, #120]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4918      	ldr	r1, [pc, #96]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	43db      	mvns	r3, r3
 800421e:	4914      	ldr	r1, [pc, #80]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 8004220:	4013      	ands	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d021      	beq.n	8004274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	490e      	ldr	r1, [pc, #56]	; (8004270 <HAL_GPIO_Init+0x2d0>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
 800423c:	e021      	b.n	8004282 <HAL_GPIO_Init+0x2e2>
 800423e:	bf00      	nop
 8004240:	10320000 	.word	0x10320000
 8004244:	10310000 	.word	0x10310000
 8004248:	10220000 	.word	0x10220000
 800424c:	10210000 	.word	0x10210000
 8004250:	10120000 	.word	0x10120000
 8004254:	10110000 	.word	0x10110000
 8004258:	40021000 	.word	0x40021000
 800425c:	40010000 	.word	0x40010000
 8004260:	40010800 	.word	0x40010800
 8004264:	40010c00 	.word	0x40010c00
 8004268:	40011000 	.word	0x40011000
 800426c:	40011400 	.word	0x40011400
 8004270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_GPIO_Init+0x304>)
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	43db      	mvns	r3, r3
 800427c:	4909      	ldr	r1, [pc, #36]	; (80042a4 <HAL_GPIO_Init+0x304>)
 800427e:	4013      	ands	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	3301      	adds	r3, #1
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	f47f ae8e 	bne.w	8003fb4 <HAL_GPIO_Init+0x14>
  }
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	372c      	adds	r7, #44	; 0x2c
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	40010400 	.word	0x40010400

080042a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	4613      	mov	r3, r2
 80042b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b8:	787b      	ldrb	r3, [r7, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042c4:	e003      	b.n	80042ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042c6:	887b      	ldrh	r3, [r7, #2]
 80042c8:	041a      	lsls	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fdbc 	bl	8001e74 <HAL_GPIO_EXTI_Callback>
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e272      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8087 	beq.w	8004436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004328:	4b92      	ldr	r3, [pc, #584]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b04      	cmp	r3, #4
 8004332:	d00c      	beq.n	800434e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004334:	4b8f      	ldr	r3, [pc, #572]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d112      	bne.n	8004366 <HAL_RCC_OscConfig+0x5e>
 8004340:	4b8c      	ldr	r3, [pc, #560]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d10b      	bne.n	8004366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434e:	4b89      	ldr	r3, [pc, #548]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d06c      	beq.n	8004434 <HAL_RCC_OscConfig+0x12c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d168      	bne.n	8004434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e24c      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x76>
 8004370:	4b80      	ldr	r3, [pc, #512]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7f      	ldr	r2, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e02e      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7a      	ldr	r2, [pc, #488]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b78      	ldr	r3, [pc, #480]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a77      	ldr	r2, [pc, #476]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0xbc>
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a71      	ldr	r2, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6f      	ldr	r3, [pc, #444]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xd4>
 80043c4:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b68      	ldr	r3, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a67      	ldr	r2, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe ff44 	bl	8003270 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fe ff40 	bl	8003270 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e200      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xe4>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe ff30 	bl	8003270 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fe ff2c 	bl	8003270 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1ec      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x10c>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004442:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800444e:	4b49      	ldr	r3, [pc, #292]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x18c>
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x176>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c0      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4939      	ldr	r1, [pc, #228]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_RCC_OscConfig+0x270>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fee5 	bl	8003270 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fe fee1 	bl	8003270 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1a1      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4927      	ldr	r1, [pc, #156]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCC_OscConfig+0x270>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fec4 	bl	8003270 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe fec0 	bl	8003270 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e180      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03a      	beq.n	800458c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d019      	beq.n	8004552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_RCC_OscConfig+0x274>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fe fea4 	bl	8003270 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452c:	f7fe fea0 	bl	8003270 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e160      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_RCC_OscConfig+0x26c>)
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f000 fb08 	bl	8004b60 <RCC_Delay>
 8004550:	e01c      	b.n	800458c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_RCC_OscConfig+0x274>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004558:	f7fe fe8a 	bl	8003270 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455e:	e00f      	b.n	8004580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7fe fe86 	bl	8003270 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d908      	bls.n	8004580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e146      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	42420000 	.word	0x42420000
 800457c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b92      	ldr	r3, [pc, #584]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e9      	bne.n	8004560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a6 	beq.w	80046e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b8b      	ldr	r3, [pc, #556]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4a87      	ldr	r2, [pc, #540]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	61d3      	str	r3, [r2, #28]
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7e      	ldr	r2, [pc, #504]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fe fe47 	bl	8003270 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fe fe43 	bl	8003270 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b64      	cmp	r3, #100	; 0x64
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e103      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x4c8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x312>
 800460c:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4a6e      	ldr	r2, [pc, #440]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6213      	str	r3, [r2, #32]
 8004618:	e02d      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x334>
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a69      	ldr	r2, [pc, #420]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a66      	ldr	r2, [pc, #408]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6213      	str	r3, [r2, #32]
 800463a:	e01c      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d10c      	bne.n	800465e <HAL_RCC_OscConfig+0x356>
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a60      	ldr	r2, [pc, #384]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4a5d      	ldr	r2, [pc, #372]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6213      	str	r3, [r2, #32]
 800465c:	e00b      	b.n	8004676 <HAL_RCC_OscConfig+0x36e>
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a5a      	ldr	r2, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6213      	str	r3, [r2, #32]
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fe fdf7 	bl	8003270 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fe fdf3 	bl	8003270 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0b1      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ee      	beq.n	8004686 <HAL_RCC_OscConfig+0x37e>
 80046a8:	e014      	b.n	80046d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046aa:	f7fe fde1 	bl	8003270 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fe fddd 	bl	8003270 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e09b      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ee      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046da:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d061      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d146      	bne.n	8004792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7fe fdb1 	bl	8003270 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fdad 	bl	8003270 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e06d      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d108      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4921      	ldr	r1, [pc, #132]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474c:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a19      	ldr	r1, [r3, #32]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	430b      	orrs	r3, r1
 800475e:	491b      	ldr	r1, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fe fd81 	bl	8003270 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004772:	f7fe fd7d 	bl	8003270 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e03d      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x46a>
 8004790:	e035      	b.n	80047fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fd6a 	bl	8003270 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe fd66 	bl	8003270 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e026      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x498>
 80047be:	e01e      	b.n	80047fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e019      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_OscConfig+0x500>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0d0      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d910      	bls.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b67      	ldr	r3, [pc, #412]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	4965      	ldr	r1, [pc, #404]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800488a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d040      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d115      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e073      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06b      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4936      	ldr	r1, [pc, #216]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fe fcb8 	bl	8003270 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fe fcb4 	bl	8003270 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e053      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d210      	bcs.n	800495c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	4922      	ldr	r1, [pc, #136]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f821 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1cc>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1d0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fd6a 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	0800d0f8 	.word	0x0800d0f8
 80049d8:	20000000 	.word	0x20000000
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b490      	push	{r4, r7}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049e6:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xac>)
 80049e8:	1d3c      	adds	r4, r7, #4
 80049ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049f0:	f240 2301 	movw	r3, #513	; 0x201
 80049f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x46>
 8004a1e:	e02b      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a20:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a22:	623b      	str	r3, [r7, #32]
      break;
 8004a24:	e02b      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	0c9b      	lsrs	r3, r3, #18
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3328      	adds	r3, #40	; 0x28
 8004a30:	443b      	add	r3, r7
 8004a32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d012      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0c5b      	lsrs	r3, r3, #17
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	3328      	adds	r3, #40	; 0x28
 8004a4e:	443b      	add	r3, r7
 8004a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e004      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	623b      	str	r3, [r7, #32]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a7a:	623b      	str	r3, [r7, #32]
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3728      	adds	r7, #40	; 0x28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc90      	pop	{r4, r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	0800cfe8 	.word	0x0800cfe8
 8004a90:	40021000 	.word	0x40021000
 8004a94:	007a1200 	.word	0x007a1200
 8004a98:	003d0900 	.word	0x003d0900

08004a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa0:	4b02      	ldr	r3, [pc, #8]	; (8004aac <HAL_RCC_GetHCLKFreq+0x10>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab4:	f7ff fff2 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	0800d108 	.word	0x0800d108

08004ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004adc:	f7ff ffde 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0adb      	lsrs	r3, r3, #11
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800d108 	.word	0x0800d108

08004b00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_GetClockConfig+0x58>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0207 	and.w	r2, r3, #7
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <RCC_Delay+0x34>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <RCC_Delay+0x38>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0a5b      	lsrs	r3, r3, #9
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b7c:	bf00      	nop
  }
  while (Delay --);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1e5a      	subs	r2, r3, #1
 8004b82:	60fa      	str	r2, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f9      	bne.n	8004b7c <RCC_Delay+0x1c>
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000000 	.word	0x20000000
 8004b98:	10624dd3 	.word	0x10624dd3

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d07d      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4a4b      	ldr	r2, [pc, #300]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	61d3      	str	r3, [r2, #28]
 8004bd4:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d118      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfc:	f7fe fb38 	bl	8003270 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fe fb34 	bl	8003270 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e06d      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d027      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c50:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d014      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fe fb03 	bl	8003270 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fe faff 	bl	8003270 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e036      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	490b      	ldr	r1, [pc, #44]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4904      	ldr	r1, [pc, #16]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42420440 	.word	0x42420440

08004d08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b08d      	sub	sp, #52	; 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d10:	4b58      	ldr	r3, [pc, #352]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004d12:	f107 040c 	add.w	r4, r7, #12
 8004d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d1c:	f240 2301 	movw	r3, #513	; 0x201
 8004d20:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	2300      	movs	r3, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	f200 808e 	bhi.w	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d049      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d079      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d50:	e086      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004d52:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d07f      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	3330      	adds	r3, #48	; 0x30
 8004d6e:	443b      	add	r3, r7
 8004d70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d74:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d80:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c5b      	lsrs	r3, r3, #17
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	3330      	adds	r3, #48	; 0x30
 8004d8c:	443b      	add	r3, r7
 8004d8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d9e:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	4a33      	ldr	r2, [pc, #204]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc6:	d102      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dcc:	e04a      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ddc:	e042      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004dde:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d108      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e00:	e01f      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004e1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e20:	e00f      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2c:	d11c      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004e3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e40:	e012      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004e42:	e011      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e44:	f7ff fe48 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0b9b      	lsrs	r3, r3, #14
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	3301      	adds	r3, #1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e5e:	e004      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e60:	bf00      	nop
 8004e62:	e002      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004e68:	bf00      	nop
    }
  }
  return (frequency);
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3734      	adds	r7, #52	; 0x34
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	0800cff8 	.word	0x0800cff8
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	007a1200 	.word	0x007a1200
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	aaaaaaab 	.word	0xaaaaaaab

08004e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e01d      	b.n	8004ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f815 	bl	8004ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fa84 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d007      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e01d      	b.n	8004f84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fd fd6f 	bl	8002a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 fa2d 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fc02 	bl	80057a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a10      	ldr	r2, [pc, #64]	; (8004fec <HAL_TIM_PWM_Start+0x60>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d107      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40012c00 	.word	0x40012c00

08004ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0202 	mvn.w	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9b3 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9a6 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f9b5 	bl	80053b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0204 	mvn.w	r2, #4
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f989 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f97c 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f98b 	bl	80053b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0208 	mvn.w	r2, #8
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f95f 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f952 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f961 	bl	80053b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0210 	mvn.w	r2, #16
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2208      	movs	r2, #8
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f935 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f928 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f937 	bl	80053b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10e      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0201 	mvn.w	r2, #1
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd f940 	bl	80023f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fbc6 	bl	800592c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8fb 	bl	80053c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0220 	mvn.w	r2, #32
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fb91 	bl	800591a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005216:	2302      	movs	r3, #2
 8005218:	e0b4      	b.n	8005384 <HAL_TIM_PWM_ConfigChannel+0x184>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	f200 809f 	bhi.w	8005370 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	0800526d 	.word	0x0800526d
 800523c:	08005371 	.word	0x08005371
 8005240:	08005371 	.word	0x08005371
 8005244:	08005371 	.word	0x08005371
 8005248:	080052ad 	.word	0x080052ad
 800524c:	08005371 	.word	0x08005371
 8005250:	08005371 	.word	0x08005371
 8005254:	08005371 	.word	0x08005371
 8005258:	080052ef 	.word	0x080052ef
 800525c:	08005371 	.word	0x08005371
 8005260:	08005371 	.word	0x08005371
 8005264:	08005371 	.word	0x08005371
 8005268:	0800532f 	.word	0x0800532f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f910 	bl	8005498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0204 	bic.w	r2, r2, #4
 8005296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6999      	ldr	r1, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	619a      	str	r2, [r3, #24]
      break;
 80052aa:	e062      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f956 	bl	8005564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6999      	ldr	r1, [r3, #24]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]
      break;
 80052ec:	e041      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 f99f 	bl	8005638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0208 	orr.w	r2, r2, #8
 8005308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0204 	bic.w	r2, r2, #4
 8005318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69d9      	ldr	r1, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	61da      	str	r2, [r3, #28]
      break;
 800532c:	e021      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f9e9 	bl	800570c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69d9      	ldr	r1, [r3, #28]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	61da      	str	r2, [r3, #28]
      break;
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005370:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a29      	ldr	r2, [pc, #164]	; (800548c <TIM_Base_SetConfig+0xb8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a26      	ldr	r2, [pc, #152]	; (8005490 <TIM_Base_SetConfig+0xbc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a25      	ldr	r2, [pc, #148]	; (8005494 <TIM_Base_SetConfig+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <TIM_Base_SetConfig+0xb8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <TIM_Base_SetConfig+0xbc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a18      	ldr	r2, [pc, #96]	; (8005494 <TIM_Base_SetConfig+0xc0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <TIM_Base_SetConfig+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d103      	bne.n	800547c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	615a      	str	r2, [r3, #20]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800

08005498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 0302 	bic.w	r3, r3, #2
 80054e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <TIM_OC1_SetConfig+0xc8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10c      	bne.n	800550e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0308 	bic.w	r3, r3, #8
 80054fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <TIM_OC1_SetConfig+0xc8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	621a      	str	r2, [r3, #32]
}
 8005554:	bf00      	nop
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00

08005564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0210 	bic.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0320 	bic.w	r3, r3, #32
 80055ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <TIM_OC2_SetConfig+0xd0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10d      	bne.n	80055e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a14      	ldr	r2, [pc, #80]	; (8005634 <TIM_OC2_SetConfig+0xd0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d113      	bne.n	8005610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00

08005638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <TIM_OC3_SetConfig+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d10d      	bne.n	80056b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800569c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a14      	ldr	r2, [pc, #80]	; (8005708 <TIM_OC3_SetConfig+0xd0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d113      	bne.n	80056e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	621a      	str	r2, [r3, #32]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00

0800570c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	031b      	lsls	r3, r3, #12
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0f      	ldr	r2, [pc, #60]	; (80057a4 <TIM_OC4_SetConfig+0x98>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	40012c00 	.word	0x40012c00

080057a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2201      	movs	r2, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e032      	b.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005890:	2302      	movs	r3, #2
 8005892:	e03d      	b.n	8005910 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e03f      	b.n	80059d0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fd f955 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2224      	movs	r2, #36	; 0x24
 800596e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005980:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fb82 	bl	800608c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005996:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	f040 8083 	bne.w	8005b00 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_Transmit+0x2e>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07b      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Transmit+0x40>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e074      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2221      	movs	r2, #33	; 0x21
 8005a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a2e:	f7fd fc1f 	bl	8003270 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a40:	e042      	b.n	8005ac8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a58:	d122      	bne.n	8005aa0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f9a8 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e046      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a86:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	3302      	adds	r3, #2
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	e017      	b.n	8005ac8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	e013      	b.n	8005ac8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f985 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e023      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	60ba      	str	r2, [r7, #8]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1b7      	bne.n	8005a42 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2140      	movs	r1, #64	; 0x40
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f96c 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e00a      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	4613      	mov	r3, r2
 8005b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d140      	bne.n	8005ba6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_UART_Receive_IT+0x26>
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e039      	b.n	8005ba8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Receive_IT+0x38>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e032      	b.n	8005ba8 <HAL_UART_Receive_IT+0x9e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2222      	movs	r2, #34	; 0x22
 8005b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b80:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0220 	orr.w	r2, r2, #32
 8005ba0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x52>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f9c3 	bl	8005f8a <UART_Receive_IT>
      return;
 8005c04:	e0cb      	b.n	8005d9e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80ab 	beq.w	8005d64 <HAL_UART_IRQHandler+0x1b0>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d105      	bne.n	8005c24 <HAL_UART_IRQHandler+0x70>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80a0 	beq.w	8005d64 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_UART_IRQHandler+0x90>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	f043 0201 	orr.w	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_UART_IRQHandler+0xb0>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	f043 0202 	orr.w	r2, r3, #2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_UART_IRQHandler+0xd0>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7c:	f043 0204 	orr.w	r2, r3, #4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xf0>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	f043 0208 	orr.w	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d077      	beq.n	8005d9c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x112>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f962 	bl	8005f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <HAL_UART_IRQHandler+0x13a>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d031      	beq.n	8005d52 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f8ad 	bl	8005e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d023      	beq.n	8005d4a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d013      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	4a21      	ldr	r2, [pc, #132]	; (8005da4 <HAL_UART_IRQHandler+0x1f0>)
 8005d20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe f8c4 	bl	8003eb4 <HAL_DMA_Abort_IT>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d016      	beq.n	8005d60 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00e      	b.n	8005d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f830 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e00a      	b.n	8005d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f82c 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e006      	b.n	8005d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f828 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d5e:	e01d      	b.n	8005d9c <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	bf00      	nop
    return;
 8005d62:	e01b      	b.n	8005d9c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x1cc>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f899 	bl	8005eb0 <UART_Transmit_IT>
    return;
 8005d7e:	e00e      	b.n	8005d9e <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_UART_IRQHandler+0x1ea>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f8e0 	bl	8005f5a <UART_EndTransmit_IT>
    return;
 8005d9a:	e000      	b.n	8005d9e <HAL_UART_IRQHandler+0x1ea>
    return;
 8005d9c:	bf00      	nop
  }
}
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	08005e89 	.word	0x08005e89

08005da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr

08005dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	e02c      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d028      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0x30>
 8005dda:	f7fd fa49 	bl	8003270 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d21d      	bcs.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005df8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e00f      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d0c3      	beq.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff ff80 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b21      	cmp	r3, #33	; 0x21
 8005ec2:	d144      	bne.n	8005f4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ecc:	d11a      	bne.n	8005f04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]
 8005ef6:	e00e      	b.n	8005f16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]
 8005f02:	e008      	b.n	8005f16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	1c59      	adds	r1, r3, #1
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6211      	str	r1, [r2, #32]
 8005f0e:	781a      	ldrb	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4619      	mov	r1, r3
 8005f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
  }
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb f964 	bl	8001248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b22      	cmp	r3, #34	; 0x22
 8005f9c:	d171      	bne.n	8006082 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa6:	d123      	bne.n	8005ff0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10e      	bne.n	8005fd4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8005fd2:	e029      	b.n	8006028 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	629a      	str	r2, [r3, #40]	; 0x28
 8005fee:	e01b      	b.n	8006028 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6858      	ldr	r0, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6291      	str	r1, [r2, #40]	; 0x28
 8006008:	b2c2      	uxtb	r2, r0
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e00c      	b.n	8006028 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	1c58      	adds	r0, r3, #1
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	6288      	str	r0, [r1, #40]	; 0x28
 8006020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4619      	mov	r1, r3
 8006036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006038:	2b00      	cmp	r3, #0
 800603a:	d120      	bne.n	800607e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0220 	bic.w	r2, r2, #32
 800604a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fb f891 	bl	800119c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	e002      	b.n	8006084 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060c6:	f023 030c 	bic.w	r3, r3, #12
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a52      	ldr	r2, [pc, #328]	; (8006238 <UART_SetConfig+0x1ac>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d14e      	bne.n	8006192 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe fcf0 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 80060f8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	4a4a      	ldr	r2, [pc, #296]	; (800623c <UART_SetConfig+0x1b0>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	0119      	lsls	r1, r3, #4
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009a      	lsls	r2, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006130:	4b42      	ldr	r3, [pc, #264]	; (800623c <UART_SetConfig+0x1b0>)
 8006132:	fba3 0302 	umull	r0, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2064      	movs	r0, #100	; 0x64
 800613a:	fb00 f303 	mul.w	r3, r0, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	; 0x32
 8006144:	4a3d      	ldr	r2, [pc, #244]	; (800623c <UART_SetConfig+0x1b0>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006150:	4419      	add	r1, r3
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009a      	lsls	r2, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	fbb2 f2f3 	udiv	r2, r2, r3
 8006168:	4b34      	ldr	r3, [pc, #208]	; (800623c <UART_SetConfig+0x1b0>)
 800616a:	fba3 0302 	umull	r0, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2064      	movs	r0, #100	; 0x64
 8006172:	fb00 f303 	mul.w	r3, r0, r3
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	3332      	adds	r3, #50	; 0x32
 800617c:	4a2f      	ldr	r2, [pc, #188]	; (800623c <UART_SetConfig+0x1b0>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	440a      	add	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006190:	e04d      	b.n	800622e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006192:	f7fe fc8d 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006196:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009a      	lsls	r2, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <UART_SetConfig+0x1b0>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	0119      	lsls	r1, r3, #4
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009a      	lsls	r2, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <UART_SetConfig+0x1b0>)
 80061d0:	fba3 0302 	umull	r0, r3, r3, r2
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	2064      	movs	r0, #100	; 0x64
 80061d8:	fb00 f303 	mul.w	r3, r0, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	3332      	adds	r3, #50	; 0x32
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <UART_SetConfig+0x1b0>)
 80061e4:	fba2 2303 	umull	r2, r3, r2, r3
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ee:	4419      	add	r1, r3
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009a      	lsls	r2, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	fbb2 f2f3 	udiv	r2, r2, r3
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <UART_SetConfig+0x1b0>)
 8006208:	fba3 0302 	umull	r0, r3, r3, r2
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	2064      	movs	r0, #100	; 0x64
 8006210:	fb00 f303 	mul.w	r3, r0, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	3332      	adds	r3, #50	; 0x32
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <UART_SetConfig+0x1b0>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	f003 020f 	and.w	r2, r3, #15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	440a      	add	r2, r1
 800622c:	609a      	str	r2, [r3, #8]
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40013800 	.word	0x40013800
 800623c:	51eb851f 	.word	0x51eb851f

08006240 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006246:	f3ef 8305 	mrs	r3, IPSR
 800624a:	60bb      	str	r3, [r7, #8]
  return(result);
 800624c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10f      	bne.n	8006272 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006252:	f3ef 8310 	mrs	r3, PRIMASK
 8006256:	607b      	str	r3, [r7, #4]
  return(result);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <osKernelInitialize+0x32>
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <osKernelInitialize+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d109      	bne.n	800627a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	603b      	str	r3, [r7, #0]
  return(result);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006272:	f06f 0305 	mvn.w	r3, #5
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e00c      	b.n	8006294 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <osKernelInitialize+0x60>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <osKernelInitialize+0x60>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e002      	b.n	8006294 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	200016f0 	.word	0x200016f0

080062a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062aa:	f3ef 8305 	mrs	r3, IPSR
 80062ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80062b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ba:	607b      	str	r3, [r7, #4]
  return(result);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <osKernelStart+0x32>
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <osKernelStart+0x64>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d109      	bne.n	80062de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062ca:	f3ef 8311 	mrs	r3, BASEPRI
 80062ce:	603b      	str	r3, [r7, #0]
  return(result);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <osKernelStart+0x3a>
    stat = osErrorISR;
 80062d6:	f06f 0305 	mvn.w	r3, #5
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e00e      	b.n	80062fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <osKernelStart+0x64>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <osKernelStart+0x64>)
 80062e8:	2202      	movs	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80062ec:	f001 f890 	bl	8007410 <vTaskStartScheduler>
      stat = osOK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e002      	b.n	80062fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80062f6:	f04f 33ff 	mov.w	r3, #4294967295
 80062fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200016f0 	.word	0x200016f0

0800630c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b092      	sub	sp, #72	; 0x48
 8006310:	af04      	add	r7, sp, #16
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631c:	f3ef 8305 	mrs	r3, IPSR
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 8094 	bne.w	8006452 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
 800632e:	623b      	str	r3, [r7, #32]
  return(result);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 808d 	bne.w	8006452 <osThreadNew+0x146>
 8006338:	4b48      	ldr	r3, [pc, #288]	; (800645c <osThreadNew+0x150>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d106      	bne.n	800634e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	61fb      	str	r3, [r7, #28]
  return(result);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 8082 	bne.w	8006452 <osThreadNew+0x146>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d07e      	beq.n	8006452 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006358:	2318      	movs	r3, #24
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800635c:	2300      	movs	r3, #0
 800635e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006360:	f107 031b 	add.w	r3, r7, #27
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d045      	beq.n	80063fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <osThreadNew+0x74>
        name = attr->name;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <osThreadNew+0x9a>
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b38      	cmp	r3, #56	; 0x38
 8006398:	d805      	bhi.n	80063a6 <osThreadNew+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <osThreadNew+0x9e>
        return (NULL);
 80063a6:	2300      	movs	r3, #0
 80063a8:	e054      	b.n	8006454 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <osThreadNew+0xd4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2ba7      	cmp	r3, #167	; 0xa7
 80063c8:	d90a      	bls.n	80063e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <osThreadNew+0xd4>
        mem = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	e010      	b.n	8006402 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10c      	bne.n	8006402 <osThreadNew+0xf6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <osThreadNew+0xf6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <osThreadNew+0xf6>
          mem = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fc:	e001      	b.n	8006402 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	2b01      	cmp	r3, #1
 8006406:	d110      	bne.n	800642a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006410:	9202      	str	r2, [sp, #8]
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fe12 	bl	8007048 <xTaskCreateStatic>
 8006424:	4603      	mov	r3, r0
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e013      	b.n	8006452 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d110      	bne.n	8006452 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	b29a      	uxth	r2, r3
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fe5c 	bl	8007100 <xTaskCreate>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d001      	beq.n	8006452 <osThreadNew+0x146>
          hTask = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3738      	adds	r7, #56	; 0x38
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200016f0 	.word	0x200016f0

08006460 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006468:	f3ef 8305 	mrs	r3, IPSR
 800646c:	613b      	str	r3, [r7, #16]
  return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10f      	bne.n	8006494 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006474:	f3ef 8310 	mrs	r3, PRIMASK
 8006478:	60fb      	str	r3, [r7, #12]
  return(result);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <osDelay+0x34>
 8006480:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <osDelay+0x58>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d109      	bne.n	800649c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006488:	f3ef 8311 	mrs	r3, BASEPRI
 800648c:	60bb      	str	r3, [r7, #8]
  return(result);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <osDelay+0x3c>
    stat = osErrorISR;
 8006494:	f06f 0305 	mvn.w	r3, #5
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e007      	b.n	80064ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 ff7e 	bl	80073a8 <vTaskDelay>
    }
  }

  return (stat);
 80064ac:	697b      	ldr	r3, [r7, #20]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200016f0 	.word	0x200016f0

080064bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a06      	ldr	r2, [pc, #24]	; (80064e4 <vApplicationGetIdleTaskMemory+0x28>)
 80064cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a05      	ldr	r2, [pc, #20]	; (80064e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80064d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	200016f4 	.word	0x200016f4
 80064e8:	2000179c 	.word	0x2000179c

080064ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a07      	ldr	r2, [pc, #28]	; (8006518 <vApplicationGetTimerTaskMemory+0x2c>)
 80064fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a06      	ldr	r2, [pc, #24]	; (800651c <vApplicationGetTimerTaskMemory+0x30>)
 8006502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800650a:	601a      	str	r2, [r3, #0]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000199c 	.word	0x2000199c
 800651c:	20001a44 	.word	0x20001a44

08006520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f103 0208 	add.w	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f103 0208 	add.w	r2, r3, #8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 0208 	add.w	r2, r3, #8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr

080065bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d103      	bne.n	80065dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e00c      	b.n	80065f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3308      	adds	r3, #8
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e002      	b.n	80065ea <vListInsert+0x2e>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d2f6      	bcs.n	80065e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6892      	ldr	r2, [r2, #8]
 8006642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6852      	ldr	r2, [r2, #4]
 800664c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d103      	bne.n	8006660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	1e5a      	subs	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr
	...

08006680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066aa:	f001 fff7 	bl	800869c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	441a      	add	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	3b01      	subs	r3, #1
 80066dc:	68f9      	ldr	r1, [r7, #12]
 80066de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22ff      	movs	r2, #255	; 0xff
 80066ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d114      	bne.n	800672a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01a      	beq.n	800673e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3310      	adds	r3, #16
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f91b 	bl	8007948 <xTaskRemoveFromEventList>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d012      	beq.n	800673e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <xQueueGenericReset+0xcc>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	e009      	b.n	800673e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3310      	adds	r3, #16
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fef6 	bl	8006520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fef1 	bl	8006520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800673e:	f001 ffdd 	bl	80086fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006742:	2301      	movs	r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08e      	sub	sp, #56	; 0x38
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <xQueueGenericCreateStatic+0x52>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <xQueueGenericCreateStatic+0x56>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <xQueueGenericCreateStatic+0x58>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	623b      	str	r3, [r7, #32]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <xQueueGenericCreateStatic+0x7e>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <xQueueGenericCreateStatic+0x82>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <xQueueGenericCreateStatic+0x84>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067ee:	2350      	movs	r3, #80	; 0x50
 80067f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b50      	cmp	r3, #80	; 0x50
 80067f6:	d00a      	beq.n	800680e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006820:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f805 	bl	800683e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3730      	adds	r7, #48	; 0x30
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e002      	b.n	8006860 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800686c:	2101      	movs	r1, #1
 800686e:	69b8      	ldr	r0, [r7, #24]
 8006870:	f7ff ff06 	bl	8006680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006892:	2300      	movs	r3, #0
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueGenericSend+0x32>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <xQueueGenericSend+0x40>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <xQueueGenericSend+0x44>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <xQueueGenericSend+0x46>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <xQueueGenericSend+0x60>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSend+0x6e>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSend+0x72>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSend+0x74>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueGenericSend+0x8e>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006912:	f001 f9df 	bl	8007cd4 <xTaskGetSchedulerState>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <xQueueGenericSend+0x9e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueGenericSend+0xa2>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericSend+0xa4>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueGenericSend+0xbe>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	61fb      	str	r3, [r7, #28]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006942:	f001 feab 	bl	800869c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <xQueueGenericSend+0xd4>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d129      	bne.n	80069ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695e:	f000 fa07 	bl	8006d70 <prvCopyDataToQueue>
 8006962:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ffe9 	bl	8007948 <xTaskRemoveFromEventList>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800697c:	4b3f      	ldr	r3, [pc, #252]	; (8006a7c <xQueueGenericSend+0x1f8>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	e00a      	b.n	80069a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006994:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <xQueueGenericSend+0x1f8>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069a4:	f001 feaa 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e063      	b.n	8006a74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069b2:	f001 fea3 	bl	80086fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e05c      	b.n	8006a74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f823 	bl	8007a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ca:	2301      	movs	r3, #1
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ce:	f001 fe95 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069d2:	f000 fd8d 	bl	80074f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d6:	f001 fe61 	bl	800869c <vPortEnterCritical>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d103      	bne.n	80069f0 <xQueueGenericSend+0x16c>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSend+0x182>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a06:	f001 fe79 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a0a:	1d3a      	adds	r2, r7, #4
 8006a0c:	f107 0314 	add.w	r3, r7, #20
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 f812 	bl	8007a3c <xTaskCheckForTimeOut>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d124      	bne.n	8006a68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a20:	f000 fa9e 	bl	8006f60 <prvIsQueueFull>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d018      	beq.n	8006a5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 ff38 	bl	80078a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3a:	f000 fa29 	bl	8006e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a3e:	f000 fd65 	bl	800750c <xTaskResumeAll>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f af7c 	bne.w	8006942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <xQueueGenericSend+0x1f8>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	e772      	b.n	8006942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5e:	f000 fa17 	bl	8006e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a62:	f000 fd53 	bl	800750c <xTaskResumeAll>
 8006a66:	e76c      	b.n	8006942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6a:	f000 fa11 	bl	8006e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a6e:	f000 fd4d 	bl	800750c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a72:	2300      	movs	r3, #0
		}
	}
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3738      	adds	r7, #56	; 0x38
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <xQueueGenericSendFromISR+0x3c>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <xQueueGenericSendFromISR+0x40>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <xQueueGenericSendFromISR+0x42>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	623b      	str	r3, [r7, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d103      	bne.n	8006aea <xQueueGenericSendFromISR+0x6a>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <xQueueGenericSendFromISR+0x6e>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueGenericSendFromISR+0x70>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61fb      	str	r3, [r7, #28]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b0a:	f001 fe89 	bl	8008820 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	61ba      	str	r2, [r7, #24]
 8006b24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <xQueueGenericSendFromISR+0xbc>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d12c      	bne.n	8006b96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4c:	f000 f910 	bl	8006d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d112      	bne.n	8006b80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 feee 	bl	8007948 <xTaskRemoveFromEventList>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e007      	b.n	8006b90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b84:	3301      	adds	r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	b25a      	sxtb	r2, r3
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b90:	2301      	movs	r3, #1
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b94:	e001      	b.n	8006b9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ba4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3738      	adds	r7, #56	; 0x38
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <xQueueReceive+0x30>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	623b      	str	r3, [r7, #32]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <xQueueReceive+0x3e>
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <xQueueReceive+0x42>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <xQueueReceive+0x44>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueReceive+0x5e>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	61fb      	str	r3, [r7, #28]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c0e:	f001 f861 	bl	8007cd4 <xTaskGetSchedulerState>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <xQueueReceive+0x6e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <xQueueReceive+0x72>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueReceive+0x74>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueReceive+0x8e>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	61bb      	str	r3, [r7, #24]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c3e:	f001 fd2d 	bl	800869c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01f      	beq.n	8006c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c52:	f000 f8f7 	bl	8006e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	1e5a      	subs	r2, r3, #1
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00f      	beq.n	8006c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	3310      	adds	r3, #16
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fe6c 	bl	8007948 <xTaskRemoveFromEventList>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c76:	4b3d      	ldr	r3, [pc, #244]	; (8006d6c <xQueueReceive+0x1bc>)
 8006c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c86:	f001 fd39 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e069      	b.n	8006d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c94:	f001 fd32 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e062      	b.n	8006d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ca2:	f107 0310 	add.w	r3, r7, #16
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 feb2 	bl	8007a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cb0:	f001 fd24 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cb4:	f000 fc1c 	bl	80074f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cb8:	f001 fcf0 	bl	800869c <vPortEnterCritical>
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d103      	bne.n	8006cd2 <xQueueReceive+0x122>
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd8:	b25b      	sxtb	r3, r3
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d103      	bne.n	8006ce8 <xQueueReceive+0x138>
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ce8:	f001 fd08 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cec:	1d3a      	adds	r2, r7, #4
 8006cee:	f107 0310 	add.w	r3, r7, #16
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fea1 	bl	8007a3c <xTaskCheckForTimeOut>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d123      	bne.n	8006d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f000 f917 	bl	8006f34 <prvIsQueueEmpty>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d017      	beq.n	8006d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fdc7 	bl	80078a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1c:	f000 f8b8 	bl	8006e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d20:	f000 fbf4 	bl	800750c <xTaskResumeAll>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d189      	bne.n	8006c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <xQueueReceive+0x1bc>)
 8006d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	e780      	b.n	8006c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3e:	f000 f8a7 	bl	8006e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d42:	f000 fbe3 	bl	800750c <xTaskResumeAll>
 8006d46:	e77a      	b.n	8006c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4a:	f000 f8a1 	bl	8006e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d4e:	f000 fbdd 	bl	800750c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d54:	f000 f8ee 	bl	8006f34 <prvIsQueueEmpty>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f43f af6f 	beq.w	8006c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3730      	adds	r7, #48	; 0x30
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10d      	bne.n	8006daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d14d      	bne.n	8006e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 ffb8 	bl	8007d10 <xTaskPriorityDisinherit>
 8006da0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	e043      	b.n	8006e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d119      	bne.n	8006de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6898      	ldr	r0, [r3, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	461a      	mov	r2, r3
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	f003 fbd2 	bl	800a564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	441a      	add	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d32b      	bcc.n	8006e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	e026      	b.n	8006e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68d8      	ldr	r0, [r3, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	461a      	mov	r2, r3
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	f003 fbb8 	bl	800a564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	441a      	add	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d207      	bcs.n	8006e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	425b      	negs	r3, r3
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d105      	bne.n	8006e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e3a:	697b      	ldr	r3, [r7, #20]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	441a      	add	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d303      	bcc.n	8006e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68d9      	ldr	r1, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	461a      	mov	r2, r3
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f003 fb6e 	bl	800a564 <memcpy>
	}
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e98:	f001 fc00 	bl	800869c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ea4:	e011      	b.n	8006eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3324      	adds	r3, #36	; 0x24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fd48 	bl	8007948 <xTaskRemoveFromEventList>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ebe:	f000 fe1f 	bl	8007b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dce9      	bgt.n	8006ea6 <prvUnlockQueue+0x16>
 8006ed2:	e000      	b.n	8006ed6 <prvUnlockQueue+0x46>
					break;
 8006ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	22ff      	movs	r2, #255	; 0xff
 8006eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ede:	f001 fc0d 	bl	80086fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ee2:	f001 fbdb 	bl	800869c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eee:	e011      	b.n	8006f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d012      	beq.n	8006f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3310      	adds	r3, #16
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fd23 	bl	8007948 <xTaskRemoveFromEventList>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f08:	f000 fdfa 	bl	8007b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dce9      	bgt.n	8006ef0 <prvUnlockQueue+0x60>
 8006f1c:	e000      	b.n	8006f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	22ff      	movs	r2, #255	; 0xff
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f28:	f001 fbe8 	bl	80086fc <vPortExitCritical>
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f3c:	f001 fbae 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	e001      	b.n	8006f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f52:	f001 fbd3 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006f56:	68fb      	ldr	r3, [r7, #12]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f68:	f001 fb98 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d102      	bne.n	8006f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e001      	b.n	8006f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f82:	f001 fbbb 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e014      	b.n	8006fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fa0:	4a0e      	ldr	r2, [pc, #56]	; (8006fdc <vQueueAddToRegistry+0x4c>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fac:	490b      	ldr	r1, [pc, #44]	; (8006fdc <vQueueAddToRegistry+0x4c>)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <vQueueAddToRegistry+0x4c>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fc2:	e006      	b.n	8006fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b07      	cmp	r3, #7
 8006fce:	d9e7      	bls.n	8006fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr
 8006fdc:	20001e44 	.word	0x20001e44

08006fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ff0:	f001 fb54 	bl	800869c <vPortEnterCritical>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d103      	bne.n	800700a <vQueueWaitForMessageRestricted+0x2a>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007010:	b25b      	sxtb	r3, r3
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d103      	bne.n	8007020 <vQueueWaitForMessageRestricted+0x40>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007020:	f001 fb6c 	bl	80086fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3324      	adds	r3, #36	; 0x24
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fc5b 	bl	80078f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800703a:	6978      	ldr	r0, [r7, #20]
 800703c:	f7ff ff28 	bl	8006e90 <prvUnlockQueue>
	}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af04      	add	r7, sp, #16
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xTaskCreateStatic+0x2a>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskCreateStatic+0x46>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	61fb      	str	r3, [r7, #28]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800708e:	23a8      	movs	r3, #168	; 0xa8
 8007090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2ba8      	cmp	r3, #168	; 0xa8
 8007096:	d00a      	beq.n	80070ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	61bb      	str	r3, [r7, #24]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01e      	beq.n	80070f2 <xTaskCreateStatic+0xaa>
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070cc:	2300      	movs	r3, #0
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	9302      	str	r3, [sp, #8]
 80070d4:	f107 0314 	add.w	r3, r7, #20
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f851 	bl	800718c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ec:	f000 f8ec 	bl	80072c8 <prvAddNewTaskToReadyList>
 80070f0:	e001      	b.n	80070f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	; 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	; 0x30
 8007104:	af04      	add	r7, sp, #16
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4618      	mov	r0, r3
 8007116:	f001 fbc1 	bl	800889c <pvPortMalloc>
 800711a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007122:	20a8      	movs	r0, #168	; 0xa8
 8007124:	f001 fbba 	bl	800889c <pvPortMalloc>
 8007128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	631a      	str	r2, [r3, #48]	; 0x30
 8007136:	e005      	b.n	8007144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f001 fc73 	bl	8008a24 <vPortFree>
 800713e:	e001      	b.n	8007144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d017      	beq.n	800717a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	2300      	movs	r3, #0
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f80f 	bl	800718c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800716e:	69f8      	ldr	r0, [r7, #28]
 8007170:	f000 f8aa 	bl	80072c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e002      	b.n	8007180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
 800717e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007180:	69bb      	ldr	r3, [r7, #24]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	461a      	mov	r2, r3
 80071a4:	21a5      	movs	r1, #165	; 0xa5
 80071a6:	f003 f8e8 	bl	800a37a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071b4:	3b01      	subs	r3, #1
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	617b      	str	r3, [r7, #20]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	e012      	b.n	8007210 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	4413      	add	r3, r2
 80071f0:	7819      	ldrb	r1, [r3, #0]
 80071f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	3334      	adds	r3, #52	; 0x34
 80071fa:	460a      	mov	r2, r1
 80071fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d006      	beq.n	8007218 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3301      	adds	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b0f      	cmp	r3, #15
 8007214:	d9e9      	bls.n	80071ea <prvInitialiseNewTask+0x5e>
 8007216:	e000      	b.n	800721a <prvInitialiseNewTask+0x8e>
		{
			break;
 8007218:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b37      	cmp	r3, #55	; 0x37
 8007226:	d901      	bls.n	800722c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007228:	2337      	movs	r3, #55	; 0x37
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007236:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	2200      	movs	r2, #0
 800723c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff f98b 	bl	800655e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	3318      	adds	r3, #24
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff f986 	bl	800655e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007266:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	2200      	movs	r2, #0
 8007274:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	3354      	adds	r3, #84	; 0x54
 800727c:	224c      	movs	r2, #76	; 0x4c
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f003 f87a 	bl	800a37a <memset>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <prvInitialiseNewTask+0x130>)
 800728a:	659a      	str	r2, [r3, #88]	; 0x58
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	4a0c      	ldr	r2, [pc, #48]	; (80072c0 <prvInitialiseNewTask+0x134>)
 8007290:	65da      	str	r2, [r3, #92]	; 0x5c
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <prvInitialiseNewTask+0x138>)
 8007296:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	69b8      	ldr	r0, [r7, #24]
 800729e:	f001 f90b 	bl	80084b8 <pxPortInitialiseStack>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b4:	bf00      	nop
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20003c40 	.word	0x20003c40
 80072c0:	20003ca8 	.word	0x20003ca8
 80072c4:	20003d10 	.word	0x20003d10

080072c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072d0:	f001 f9e4 	bl	800869c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072d4:	4b2d      	ldr	r3, [pc, #180]	; (800738c <prvAddNewTaskToReadyList+0xc4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	4a2c      	ldr	r2, [pc, #176]	; (800738c <prvAddNewTaskToReadyList+0xc4>)
 80072dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072de:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <prvAddNewTaskToReadyList+0xc8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072e6:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <prvAddNewTaskToReadyList+0xc8>)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <prvAddNewTaskToReadyList+0xc4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d110      	bne.n	8007316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072f4:	f000 fc28 	bl	8007b48 <prvInitialiseTaskLists>
 80072f8:	e00d      	b.n	8007316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072fa:	4b26      	ldr	r3, [pc, #152]	; (8007394 <prvAddNewTaskToReadyList+0xcc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007302:	4b23      	ldr	r3, [pc, #140]	; (8007390 <prvAddNewTaskToReadyList+0xc8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	429a      	cmp	r2, r3
 800730e:	d802      	bhi.n	8007316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007310:	4a1f      	ldr	r2, [pc, #124]	; (8007390 <prvAddNewTaskToReadyList+0xc8>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007316:	4b20      	ldr	r3, [pc, #128]	; (8007398 <prvAddNewTaskToReadyList+0xd0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <prvAddNewTaskToReadyList+0xd0>)
 800731e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <prvAddNewTaskToReadyList+0xd0>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <prvAddNewTaskToReadyList+0xd4>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d903      	bls.n	800733c <prvAddNewTaskToReadyList+0x74>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a18      	ldr	r2, [pc, #96]	; (800739c <prvAddNewTaskToReadyList+0xd4>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <prvAddNewTaskToReadyList+0xd8>)
 800734a:	441a      	add	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7ff f90f 	bl	8006576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007358:	f001 f9d0 	bl	80086fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <prvAddNewTaskToReadyList+0xcc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00e      	beq.n	8007382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007364:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <prvAddNewTaskToReadyList+0xc8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	429a      	cmp	r2, r3
 8007370:	d207      	bcs.n	8007382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <prvAddNewTaskToReadyList+0xdc>)
 8007374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20002358 	.word	0x20002358
 8007390:	20001e84 	.word	0x20001e84
 8007394:	20002364 	.word	0x20002364
 8007398:	20002374 	.word	0x20002374
 800739c:	20002360 	.word	0x20002360
 80073a0:	20001e88 	.word	0x20001e88
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d017      	beq.n	80073ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073ba:	4b13      	ldr	r3, [pc, #76]	; (8007408 <vTaskDelay+0x60>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <vTaskDelay+0x30>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	60bb      	str	r3, [r7, #8]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073d8:	f000 f88a 	bl	80074f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd04 	bl	8007dec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073e4:	f000 f892 	bl	800750c <xTaskResumeAll>
 80073e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d107      	bne.n	8007400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073f0:	4b06      	ldr	r3, [pc, #24]	; (800740c <vTaskDelay+0x64>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20002380 	.word	0x20002380
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800741e:	463a      	mov	r2, r7
 8007420:	1d39      	adds	r1, r7, #4
 8007422:	f107 0308 	add.w	r3, r7, #8
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff f848 	bl	80064bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	9202      	str	r2, [sp, #8]
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	2300      	movs	r3, #0
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	2300      	movs	r3, #0
 800743c:	460a      	mov	r2, r1
 800743e:	4924      	ldr	r1, [pc, #144]	; (80074d0 <vTaskStartScheduler+0xc0>)
 8007440:	4824      	ldr	r0, [pc, #144]	; (80074d4 <vTaskStartScheduler+0xc4>)
 8007442:	f7ff fe01 	bl	8007048 <xTaskCreateStatic>
 8007446:	4603      	mov	r3, r0
 8007448:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <vTaskStartScheduler+0xc8>)
 800744a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800744c:	4b22      	ldr	r3, [pc, #136]	; (80074d8 <vTaskStartScheduler+0xc8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e001      	b.n	800745e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d102      	bne.n	800746a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007464:	f000 fd16 	bl	8007e94 <xTimerCreateTimerTask>
 8007468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d11b      	bne.n	80074a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	613b      	str	r3, [r7, #16]
}
 8007482:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <vTaskStartScheduler+0xcc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3354      	adds	r3, #84	; 0x54
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <vTaskStartScheduler+0xd0>)
 800748c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <vTaskStartScheduler+0xd4>)
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <vTaskStartScheduler+0xd8>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <vTaskStartScheduler+0xdc>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074a2:	f001 f889 	bl	80085b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074a6:	e00e      	b.n	80074c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d10a      	bne.n	80074c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <vTaskStartScheduler+0xb4>
}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800d008 	.word	0x0800d008
 80074d4:	08007b19 	.word	0x08007b19
 80074d8:	2000237c 	.word	0x2000237c
 80074dc:	20001e84 	.word	0x20001e84
 80074e0:	200001d4 	.word	0x200001d4
 80074e4:	20002378 	.word	0x20002378
 80074e8:	20002364 	.word	0x20002364
 80074ec:	2000235c 	.word	0x2000235c

080074f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <vTaskSuspendAll+0x18>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	4a03      	ldr	r2, [pc, #12]	; (8007508 <vTaskSuspendAll+0x18>)
 80074fc:	6013      	str	r3, [r2, #0]
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	20002380 	.word	0x20002380

0800750c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800751a:	4b42      	ldr	r3, [pc, #264]	; (8007624 <xTaskResumeAll+0x118>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xTaskResumeAll+0x2c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007538:	f001 f8b0 	bl	800869c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800753c:	4b39      	ldr	r3, [pc, #228]	; (8007624 <xTaskResumeAll+0x118>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a38      	ldr	r2, [pc, #224]	; (8007624 <xTaskResumeAll+0x118>)
 8007544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007546:	4b37      	ldr	r3, [pc, #220]	; (8007624 <xTaskResumeAll+0x118>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d162      	bne.n	8007614 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800754e:	4b36      	ldr	r3, [pc, #216]	; (8007628 <xTaskResumeAll+0x11c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d05e      	beq.n	8007614 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007556:	e02f      	b.n	80075b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007558:	4b34      	ldr	r3, [pc, #208]	; (800762c <xTaskResumeAll+0x120>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3318      	adds	r3, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff f861 	bl	800662c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3304      	adds	r3, #4
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff f85c 	bl	800662c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <xTaskResumeAll+0x124>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <xTaskResumeAll+0x7c>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <xTaskResumeAll+0x124>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a27      	ldr	r2, [pc, #156]	; (8007634 <xTaskResumeAll+0x128>)
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe ffe9 	bl	8006576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <xTaskResumeAll+0x12c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075b2:	4b22      	ldr	r3, [pc, #136]	; (800763c <xTaskResumeAll+0x130>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075b8:	4b1c      	ldr	r3, [pc, #112]	; (800762c <xTaskResumeAll+0x120>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1cb      	bne.n	8007558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075c6:	f000 fb61 	bl	8007c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <xTaskResumeAll+0x134>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075d6:	f000 f845 	bl	8007664 <xTaskIncrementTick>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075e0:	4b16      	ldr	r3, [pc, #88]	; (800763c <xTaskResumeAll+0x130>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f1      	bne.n	80075d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <xTaskResumeAll+0x134>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075f8:	4b10      	ldr	r3, [pc, #64]	; (800763c <xTaskResumeAll+0x130>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <xTaskResumeAll+0x138>)
 8007606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007614:	f001 f872 	bl	80086fc <vPortExitCritical>

	return xAlreadyYielded;
 8007618:	68bb      	ldr	r3, [r7, #8]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20002380 	.word	0x20002380
 8007628:	20002358 	.word	0x20002358
 800762c:	20002318 	.word	0x20002318
 8007630:	20002360 	.word	0x20002360
 8007634:	20001e88 	.word	0x20001e88
 8007638:	20001e84 	.word	0x20001e84
 800763c:	2000236c 	.word	0x2000236c
 8007640:	20002368 	.word	0x20002368
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <xTaskGetTickCount+0x18>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007654:	687b      	ldr	r3, [r7, #4]
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr
 8007660:	2000235c 	.word	0x2000235c

08007664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766e:	4b51      	ldr	r3, [pc, #324]	; (80077b4 <xTaskIncrementTick+0x150>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 808e 	bne.w	8007794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007678:	4b4f      	ldr	r3, [pc, #316]	; (80077b8 <xTaskIncrementTick+0x154>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007680:	4a4d      	ldr	r2, [pc, #308]	; (80077b8 <xTaskIncrementTick+0x154>)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d120      	bne.n	80076ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800768c:	4b4b      	ldr	r3, [pc, #300]	; (80077bc <xTaskIncrementTick+0x158>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <xTaskIncrementTick+0x48>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	603b      	str	r3, [r7, #0]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <xTaskIncrementTick+0x46>
 80076ac:	4b43      	ldr	r3, [pc, #268]	; (80077bc <xTaskIncrementTick+0x158>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	4b43      	ldr	r3, [pc, #268]	; (80077c0 <xTaskIncrementTick+0x15c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a41      	ldr	r2, [pc, #260]	; (80077bc <xTaskIncrementTick+0x158>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4a41      	ldr	r2, [pc, #260]	; (80077c0 <xTaskIncrementTick+0x15c>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4b40      	ldr	r3, [pc, #256]	; (80077c4 <xTaskIncrementTick+0x160>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a3f      	ldr	r2, [pc, #252]	; (80077c4 <xTaskIncrementTick+0x160>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	f000 fadf 	bl	8007c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076ce:	4b3e      	ldr	r3, [pc, #248]	; (80077c8 <xTaskIncrementTick+0x164>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d34e      	bcc.n	8007776 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d8:	4b38      	ldr	r3, [pc, #224]	; (80077bc <xTaskIncrementTick+0x158>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <xTaskIncrementTick+0x82>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <xTaskIncrementTick+0x84>
 80076e6:	2300      	movs	r3, #0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ec:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <xTaskIncrementTick+0x164>)
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	601a      	str	r2, [r3, #0]
					break;
 80076f4:	e03f      	b.n	8007776 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076f6:	4b31      	ldr	r3, [pc, #196]	; (80077bc <xTaskIncrementTick+0x158>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d203      	bcs.n	8007716 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800770e:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <xTaskIncrementTick+0x164>)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6013      	str	r3, [r2, #0]
						break;
 8007714:	e02f      	b.n	8007776 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3304      	adds	r3, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe ff86 	bl	800662c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3318      	adds	r3, #24
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe ff7d 	bl	800662c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	4b25      	ldr	r3, [pc, #148]	; (80077cc <xTaskIncrementTick+0x168>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d903      	bls.n	8007746 <xTaskIncrementTick+0xe2>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	4a22      	ldr	r2, [pc, #136]	; (80077cc <xTaskIncrementTick+0x168>)
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <xTaskIncrementTick+0x16c>)
 8007754:	441a      	add	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe ff0a 	bl	8006576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <xTaskIncrementTick+0x170>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	429a      	cmp	r2, r3
 800776e:	d3b3      	bcc.n	80076d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007774:	e7b0      	b.n	80076d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007776:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <xTaskIncrementTick+0x170>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777c:	4914      	ldr	r1, [pc, #80]	; (80077d0 <xTaskIncrementTick+0x16c>)
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d907      	bls.n	800779e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e004      	b.n	800779e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <xTaskIncrementTick+0x174>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a0f      	ldr	r2, [pc, #60]	; (80077d8 <xTaskIncrementTick+0x174>)
 800779c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <xTaskIncrementTick+0x178>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80077a6:	2301      	movs	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20002380 	.word	0x20002380
 80077b8:	2000235c 	.word	0x2000235c
 80077bc:	20002310 	.word	0x20002310
 80077c0:	20002314 	.word	0x20002314
 80077c4:	20002370 	.word	0x20002370
 80077c8:	20002378 	.word	0x20002378
 80077cc:	20002360 	.word	0x20002360
 80077d0:	20001e88 	.word	0x20001e88
 80077d4:	20001e84 	.word	0x20001e84
 80077d8:	20002368 	.word	0x20002368
 80077dc:	2000236c 	.word	0x2000236c

080077e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077e6:	4b2a      	ldr	r3, [pc, #168]	; (8007890 <vTaskSwitchContext+0xb0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077ee:	4b29      	ldr	r3, [pc, #164]	; (8007894 <vTaskSwitchContext+0xb4>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077f4:	e046      	b.n	8007884 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80077f6:	4b27      	ldr	r3, [pc, #156]	; (8007894 <vTaskSwitchContext+0xb4>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80077fc:	4b26      	ldr	r3, [pc, #152]	; (8007898 <vTaskSwitchContext+0xb8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	e010      	b.n	8007826 <vTaskSwitchContext+0x46>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <vTaskSwitchContext+0x40>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vTaskSwitchContext+0x3e>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3b01      	subs	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	491d      	ldr	r1, [pc, #116]	; (800789c <vTaskSwitchContext+0xbc>)
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0e4      	beq.n	8007804 <vTaskSwitchContext+0x24>
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <vTaskSwitchContext+0xbc>)
 8007846:	4413      	add	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	3308      	adds	r3, #8
 800785c:	429a      	cmp	r2, r3
 800785e:	d104      	bne.n	800786a <vTaskSwitchContext+0x8a>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4a0b      	ldr	r2, [pc, #44]	; (80078a0 <vTaskSwitchContext+0xc0>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <vTaskSwitchContext+0xb8>)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <vTaskSwitchContext+0xc0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3354      	adds	r3, #84	; 0x54
 8007880:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <vTaskSwitchContext+0xc4>)
 8007882:	6013      	str	r3, [r2, #0]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20002380 	.word	0x20002380
 8007894:	2000236c 	.word	0x2000236c
 8007898:	20002360 	.word	0x20002360
 800789c:	20001e88 	.word	0x20001e88
 80078a0:	20001e84 	.word	0x20001e84
 80078a4:	200001d4 	.word	0x200001d4

080078a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60fb      	str	r3, [r7, #12]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <vTaskPlaceOnEventList+0x44>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3318      	adds	r3, #24
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe fe70 	bl	80065bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078dc:	2101      	movs	r1, #1
 80078de:	6838      	ldr	r0, [r7, #0]
 80078e0:	f000 fa84 	bl	8007dec <prvAddCurrentTaskToDelayedList>
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20001e84 	.word	0x20001e84

080078f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	617b      	str	r3, [r7, #20]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <vTaskPlaceOnEventListRestricted+0x54>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3318      	adds	r3, #24
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7fe fe28 	bl	8006576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800792c:	f04f 33ff 	mov.w	r3, #4294967295
 8007930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	68b8      	ldr	r0, [r7, #8]
 8007936:	f000 fa59 	bl	8007dec <prvAddCurrentTaskToDelayedList>
	}
 800793a:	bf00      	nop
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20001e84 	.word	0x20001e84

08007948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	3318      	adds	r3, #24
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fe57 	bl	800662c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <xTaskRemoveFromEventList+0xb0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11d      	bne.n	80079c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	3304      	adds	r3, #4
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fe4e 	bl	800662c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <xTaskRemoveFromEventList+0xb4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d903      	bls.n	80079a4 <xTaskRemoveFromEventList+0x5c>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a16      	ldr	r2, [pc, #88]	; (80079fc <xTaskRemoveFromEventList+0xb4>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <xTaskRemoveFromEventList+0xb8>)
 80079b2:	441a      	add	r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fddb 	bl	8006576 <vListInsertEnd>
 80079c0:	e005      	b.n	80079ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3318      	adds	r3, #24
 80079c6:	4619      	mov	r1, r3
 80079c8:	480e      	ldr	r0, [pc, #56]	; (8007a04 <xTaskRemoveFromEventList+0xbc>)
 80079ca:	f7fe fdd4 	bl	8006576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <xTaskRemoveFromEventList+0xc0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d905      	bls.n	80079e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <xTaskRemoveFromEventList+0xc4>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e001      	b.n	80079ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80079ec:	697b      	ldr	r3, [r7, #20]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20002380 	.word	0x20002380
 80079fc:	20002360 	.word	0x20002360
 8007a00:	20001e88 	.word	0x20001e88
 8007a04:	20002318 	.word	0x20002318
 8007a08:	20001e84 	.word	0x20001e84
 8007a0c:	2000236c 	.word	0x2000236c

08007a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <vTaskInternalSetTimeOutState+0x24>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <vTaskInternalSetTimeOutState+0x28>)
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	605a      	str	r2, [r3, #4]
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20002370 	.word	0x20002370
 8007a38:	2000235c 	.word	0x2000235c

08007a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	613b      	str	r3, [r7, #16]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a7e:	f000 fe0d 	bl	800869c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <xTaskCheckForTimeOut+0xbc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d102      	bne.n	8007aa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e023      	b.n	8007aea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <xTaskCheckForTimeOut+0xc0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d007      	beq.n	8007abe <xTaskCheckForTimeOut+0x82>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d302      	bcc.n	8007abe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	61fb      	str	r3, [r7, #28]
 8007abc:	e015      	b.n	8007aea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d20b      	bcs.n	8007ae0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ff9b 	bl	8007a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
 8007ade:	e004      	b.n	8007aea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007aea:	f000 fe07 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8007aee:	69fb      	ldr	r3, [r7, #28]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	2000235c 	.word	0x2000235c
 8007afc:	20002370 	.word	0x20002370

08007b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <vTaskMissedYield+0x14>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000236c 	.word	0x2000236c

08007b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b20:	f000 f852 	bl	8007bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <prvIdleTask+0x28>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d9f9      	bls.n	8007b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <prvIdleTask+0x2c>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b3c:	e7f0      	b.n	8007b20 <prvIdleTask+0x8>
 8007b3e:	bf00      	nop
 8007b40:	20001e88 	.word	0x20001e88
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	e00c      	b.n	8007b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4a12      	ldr	r2, [pc, #72]	; (8007ba8 <prvInitialiseTaskLists+0x60>)
 8007b60:	4413      	add	r3, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fcdc 	bl	8006520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b37      	cmp	r3, #55	; 0x37
 8007b72:	d9ef      	bls.n	8007b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b74:	480d      	ldr	r0, [pc, #52]	; (8007bac <prvInitialiseTaskLists+0x64>)
 8007b76:	f7fe fcd3 	bl	8006520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b7a:	480d      	ldr	r0, [pc, #52]	; (8007bb0 <prvInitialiseTaskLists+0x68>)
 8007b7c:	f7fe fcd0 	bl	8006520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b80:	480c      	ldr	r0, [pc, #48]	; (8007bb4 <prvInitialiseTaskLists+0x6c>)
 8007b82:	f7fe fccd 	bl	8006520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b86:	480c      	ldr	r0, [pc, #48]	; (8007bb8 <prvInitialiseTaskLists+0x70>)
 8007b88:	f7fe fcca 	bl	8006520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b8c:	480b      	ldr	r0, [pc, #44]	; (8007bbc <prvInitialiseTaskLists+0x74>)
 8007b8e:	f7fe fcc7 	bl	8006520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <prvInitialiseTaskLists+0x78>)
 8007b94:	4a05      	ldr	r2, [pc, #20]	; (8007bac <prvInitialiseTaskLists+0x64>)
 8007b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <prvInitialiseTaskLists+0x7c>)
 8007b9a:	4a05      	ldr	r2, [pc, #20]	; (8007bb0 <prvInitialiseTaskLists+0x68>)
 8007b9c:	601a      	str	r2, [r3, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20001e88 	.word	0x20001e88
 8007bac:	200022e8 	.word	0x200022e8
 8007bb0:	200022fc 	.word	0x200022fc
 8007bb4:	20002318 	.word	0x20002318
 8007bb8:	2000232c 	.word	0x2000232c
 8007bbc:	20002344 	.word	0x20002344
 8007bc0:	20002310 	.word	0x20002310
 8007bc4:	20002314 	.word	0x20002314

08007bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bce:	e019      	b.n	8007c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bd0:	f000 fd64 	bl	800869c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <prvCheckTasksWaitingTermination+0x50>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fd23 	bl	800662c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <prvCheckTasksWaitingTermination+0x54>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <prvCheckTasksWaitingTermination+0x54>)
 8007bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bfa:	f000 fd7f 	bl	80086fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f810 	bl	8007c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <prvCheckTasksWaitingTermination+0x58>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e1      	bne.n	8007bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000232c 	.word	0x2000232c
 8007c1c:	20002358 	.word	0x20002358
 8007c20:	20002340 	.word	0x20002340

08007c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3354      	adds	r3, #84	; 0x54
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 fbd1 	bl	800a3d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d108      	bne.n	8007c52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 feed 	bl	8008a24 <vPortFree>
				vPortFree( pxTCB );
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 feea 	bl	8008a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c50:	e018      	b.n	8007c84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d103      	bne.n	8007c64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fee1 	bl	8008a24 <vPortFree>
	}
 8007c62:	e00f      	b.n	8007c84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d00a      	beq.n	8007c84 <prvDeleteTCB+0x60>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60fb      	str	r3, [r7, #12]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <prvDeleteTCB+0x5e>
	}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c92:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <prvResetNextTaskUnblockTime+0x40>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <prvResetNextTaskUnblockTime+0x14>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <prvResetNextTaskUnblockTime+0x16>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d004      	beq.n	8007cb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <prvResetNextTaskUnblockTime+0x44>)
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cae:	e008      	b.n	8007cc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007cb0:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <prvResetNextTaskUnblockTime+0x40>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <prvResetNextTaskUnblockTime+0x44>)
 8007cc0:	6013      	str	r3, [r2, #0]
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr
 8007ccc:	20002310 	.word	0x20002310
 8007cd0:	20002378 	.word	0x20002378

08007cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <xTaskGetSchedulerState+0x34>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	607b      	str	r3, [r7, #4]
 8007ce6:	e008      	b.n	8007cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <xTaskGetSchedulerState+0x38>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	e001      	b.n	8007cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cfa:	687b      	ldr	r3, [r7, #4]
	}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20002364 	.word	0x20002364
 8007d0c:	20002380 	.word	0x20002380

08007d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d056      	beq.n	8007dd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d26:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <xTaskPriorityDisinherit+0xd0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d00a      	beq.n	8007d46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60fb      	str	r3, [r7, #12]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d68:	1e5a      	subs	r2, r3, #1
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d02c      	beq.n	8007dd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d128      	bne.n	8007dd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fc50 	bl	800662c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <xTaskPriorityDisinherit+0xd4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d903      	bls.n	8007db4 <xTaskPriorityDisinherit+0xa4>
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <xTaskPriorityDisinherit+0xd4>)
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <xTaskPriorityDisinherit+0xd8>)
 8007dc2:	441a      	add	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f7fe fbd3 	bl	8006576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dd4:	697b      	ldr	r3, [r7, #20]
	}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20001e84 	.word	0x20001e84
 8007de4:	20002360 	.word	0x20002360
 8007de8:	20001e88 	.word	0x20001e88

08007dec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007df6:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x90>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fc12 	bl	800662c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d10a      	bne.n	8007e26 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e16:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4819      	ldr	r0, [pc, #100]	; (8007e84 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e20:	f7fe fba9 	bl	8006576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e24:	e026      	b.n	8007e74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e2e:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d209      	bcs.n	8007e52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fe fbb6 	bl	80065bc <vListInsert>
}
 8007e50:	e010      	b.n	8007e74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e52:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fbac 	bl	80065bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d202      	bcs.n	8007e74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e6e:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6013      	str	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000235c 	.word	0x2000235c
 8007e80:	20001e84 	.word	0x20001e84
 8007e84:	20002344 	.word	0x20002344
 8007e88:	20002314 	.word	0x20002314
 8007e8c:	20002310 	.word	0x20002310
 8007e90:	20002378 	.word	0x20002378

08007e94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e9e:	f000 facb 	bl	8008438 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <xTimerCreateTimerTask+0x80>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d021      	beq.n	8007eee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007eb2:	1d3a      	adds	r2, r7, #4
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe fb15 	bl	80064ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	9202      	str	r2, [sp, #8]
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	460a      	mov	r2, r1
 8007ed4:	4910      	ldr	r1, [pc, #64]	; (8007f18 <xTimerCreateTimerTask+0x84>)
 8007ed6:	4811      	ldr	r0, [pc, #68]	; (8007f1c <xTimerCreateTimerTask+0x88>)
 8007ed8:	f7ff f8b6 	bl	8007048 <xTaskCreateStatic>
 8007edc:	4603      	mov	r3, r0
 8007ede:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <xTimerCreateTimerTask+0x8c>)
 8007ee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <xTimerCreateTimerTask+0x8c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f0a:	697b      	ldr	r3, [r7, #20]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200023b4 	.word	0x200023b4
 8007f18:	0800d010 	.word	0x0800d010
 8007f1c:	08008041 	.word	0x08008041
 8007f20:	200023b8 	.word	0x200023b8

08007f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	; 0x28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <xTimerGenericCommand+0x98>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d02a      	beq.n	8007fb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b05      	cmp	r3, #5
 8007f6a:	dc18      	bgt.n	8007f9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f6c:	f7ff feb2 	bl	8007cd4 <xTaskGetSchedulerState>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d109      	bne.n	8007f8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f76:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <xTimerGenericCommand+0x98>)
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f107 0110 	add.w	r1, r7, #16
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f82:	f7fe fc7f 	bl	8006884 <xQueueGenericSend>
 8007f86:	6278      	str	r0, [r7, #36]	; 0x24
 8007f88:	e012      	b.n	8007fb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <xTimerGenericCommand+0x98>)
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	f107 0110 	add.w	r1, r7, #16
 8007f92:	2300      	movs	r3, #0
 8007f94:	2200      	movs	r2, #0
 8007f96:	f7fe fc75 	bl	8006884 <xQueueGenericSend>
 8007f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f9c:	e008      	b.n	8007fb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <xTimerGenericCommand+0x98>)
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	f107 0110 	add.w	r1, r7, #16
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f7fe fd69 	bl	8006a80 <xQueueGenericSendFromISR>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3728      	adds	r7, #40	; 0x28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	200023b4 	.word	0x200023b4

08007fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <prvProcessExpiredTimer+0x7c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe fb27 	bl	800662c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d122      	bne.n	800802c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	18d1      	adds	r1, r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	6978      	ldr	r0, [r7, #20]
 8007ff4:	f000 f8c8 	bl	8008188 <prvInsertTimerInActiveList>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ffe:	2300      	movs	r3, #0
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	2100      	movs	r1, #0
 8008008:	6978      	ldr	r0, [r7, #20]
 800800a:	f7ff ff8b 	bl	8007f24 <xTimerGenericCommand>
 800800e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60fb      	str	r3, [r7, #12]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	4798      	blx	r3
}
 8008034:	bf00      	nop
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200023ac 	.word	0x200023ac

08008040 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008048:	f107 0308 	add.w	r3, r7, #8
 800804c:	4618      	mov	r0, r3
 800804e:	f000 f857 	bl	8008100 <prvGetNextExpireTime>
 8008052:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4619      	mov	r1, r3
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f803 	bl	8008064 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800805e:	f000 f8d5 	bl	800820c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008062:	e7f1      	b.n	8008048 <prvTimerTask+0x8>

08008064 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800806e:	f7ff fa3f 	bl	80074f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f866 	bl	8008148 <prvSampleTimeNow>
 800807c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d130      	bne.n	80080e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <prvProcessTimerOrBlockTask+0x3c>
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	429a      	cmp	r2, r3
 8008090:	d806      	bhi.n	80080a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008092:	f7ff fa3b 	bl	800750c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff91 	bl	8007fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800809e:	e024      	b.n	80080ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <prvProcessTimerOrBlockTask+0x90>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bf0c      	ite	eq
 80080b0:	2301      	moveq	r3, #1
 80080b2:	2300      	movne	r3, #0
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <prvProcessTimerOrBlockTask+0x94>)
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f7fe ff8b 	bl	8006fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080ca:	f7ff fa1f 	bl	800750c <xTaskResumeAll>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <prvProcessTimerOrBlockTask+0x98>)
 80080d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	f3bf 8f6f 	isb	sy
}
 80080e4:	e001      	b.n	80080ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080e6:	f7ff fa11 	bl	800750c <xTaskResumeAll>
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200023b0 	.word	0x200023b0
 80080f8:	200023b4 	.word	0x200023b4
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008108:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <prvGetNextExpireTime+0x44>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d105      	bne.n	8008132 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008126:	4b07      	ldr	r3, [pc, #28]	; (8008144 <prvGetNextExpireTime+0x44>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e001      	b.n	8008136 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008136:	68fb      	ldr	r3, [r7, #12]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	200023ac 	.word	0x200023ac

08008148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008150:	f7ff fa7a 	bl	8007648 <xTaskGetTickCount>
 8008154:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <prvSampleTimeNow+0x3c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	429a      	cmp	r2, r3
 800815e:	d205      	bcs.n	800816c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008160:	f000 f908 	bl	8008374 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e002      	b.n	8008172 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008172:	4a04      	ldr	r2, [pc, #16]	; (8008184 <prvSampleTimeNow+0x3c>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008178:	68fb      	ldr	r3, [r7, #12]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200023bc 	.word	0x200023bc

08008188 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d812      	bhi.n	80081d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d302      	bcc.n	80081c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081bc:	2301      	movs	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e01b      	b.n	80081fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <prvInsertTimerInActiveList+0x7c>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f7fe f9f5 	bl	80065bc <vListInsert>
 80081d2:	e012      	b.n	80081fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d206      	bcs.n	80081ea <prvInsertTimerInActiveList+0x62>
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	e007      	b.n	80081fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <prvInsertTimerInActiveList+0x80>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f7fe f9e1 	bl	80065bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200023b0 	.word	0x200023b0
 8008208:	200023ac 	.word	0x200023ac

0800820c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08e      	sub	sp, #56	; 0x38
 8008210:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008212:	e09d      	b.n	8008350 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	da18      	bge.n	800824c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	3304      	adds	r3, #4
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	61fb      	str	r3, [r7, #28]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008242:	6850      	ldr	r0, [r2, #4]
 8008244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008246:	6892      	ldr	r2, [r2, #8]
 8008248:	4611      	mov	r1, r2
 800824a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	db7e      	blt.n	8008350 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f9e2 	bl	800662c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008268:	463b      	mov	r3, r7
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff ff6c 	bl	8008148 <prvSampleTimeNow>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b09      	cmp	r3, #9
 8008276:	d86a      	bhi.n	800834e <prvProcessReceivedCommands+0x142>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <prvProcessReceivedCommands+0x74>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082a9 	.word	0x080082a9
 8008288:	080082a9 	.word	0x080082a9
 800828c:	08008351 	.word	0x08008351
 8008290:	08008305 	.word	0x08008305
 8008294:	0800833d 	.word	0x0800833d
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082a9 	.word	0x080082a9
 80082a0:	08008351 	.word	0x08008351
 80082a4:	08008305 	.word	0x08008305
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	18d1      	adds	r1, r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b6:	f7ff ff67 	bl	8008188 <prvInsertTimerInActiveList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d047      	beq.n	8008350 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d13f      	bne.n	8008350 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	441a      	add	r2, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	2300      	movs	r3, #0
 80082de:	2100      	movs	r1, #0
 80082e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e2:	f7ff fe1f 	bl	8007f24 <xTimerGenericCommand>
 80082e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d130      	bne.n	8008350 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	61bb      	str	r3, [r7, #24]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	617b      	str	r3, [r7, #20]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	18d1      	adds	r1, r2, r3
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008336:	f7ff ff27 	bl	8008188 <prvInsertTimerInActiveList>
					break;
 800833a:	e009      	b.n	8008350 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f000 fb6c 	bl	8008a24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800834c:	e000      	b.n	8008350 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800834e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <prvProcessReceivedCommands+0x164>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1d39      	adds	r1, r7, #4
 8008356:	2200      	movs	r2, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fc29 	bl	8006bb0 <xQueueReceive>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	f47f af57 	bne.w	8008214 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	3730      	adds	r7, #48	; 0x30
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200023b4 	.word	0x200023b4

08008374 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800837a:	e045      	b.n	8008408 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800837c:	4b2c      	ldr	r3, [pc, #176]	; (8008430 <prvSwitchTimerLists+0xbc>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008386:	4b2a      	ldr	r3, [pc, #168]	; (8008430 <prvSwitchTimerLists+0xbc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3304      	adds	r3, #4
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe f949 	bl	800662c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d12e      	bne.n	8008408 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4413      	add	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d90e      	bls.n	80083da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <prvSwitchTimerLists+0xbc>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe f8f2 	bl	80065bc <vListInsert>
 80083d8:	e016      	b.n	8008408 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083da:	2300      	movs	r3, #0
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	2100      	movs	r1, #0
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff fd9d 	bl	8007f24 <xTimerGenericCommand>
 80083ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <prvSwitchTimerLists+0x94>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	603b      	str	r3, [r7, #0]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008408:	4b09      	ldr	r3, [pc, #36]	; (8008430 <prvSwitchTimerLists+0xbc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1b4      	bne.n	800837c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008412:	4b07      	ldr	r3, [pc, #28]	; (8008430 <prvSwitchTimerLists+0xbc>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <prvSwitchTimerLists+0xc0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <prvSwitchTimerLists+0xbc>)
 800841e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008420:	4a04      	ldr	r2, [pc, #16]	; (8008434 <prvSwitchTimerLists+0xc0>)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6013      	str	r3, [r2, #0]
}
 8008426:	bf00      	nop
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200023ac 	.word	0x200023ac
 8008434:	200023b0 	.word	0x200023b0

08008438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800843e:	f000 f92d 	bl	800869c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <prvCheckForValidListAndQueue+0x60>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d120      	bne.n	800848c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800844a:	4814      	ldr	r0, [pc, #80]	; (800849c <prvCheckForValidListAndQueue+0x64>)
 800844c:	f7fe f868 	bl	8006520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008450:	4813      	ldr	r0, [pc, #76]	; (80084a0 <prvCheckForValidListAndQueue+0x68>)
 8008452:	f7fe f865 	bl	8006520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <prvCheckForValidListAndQueue+0x6c>)
 8008458:	4a10      	ldr	r2, [pc, #64]	; (800849c <prvCheckForValidListAndQueue+0x64>)
 800845a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800845c:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <prvCheckForValidListAndQueue+0x70>)
 800845e:	4a10      	ldr	r2, [pc, #64]	; (80084a0 <prvCheckForValidListAndQueue+0x68>)
 8008460:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008462:	2300      	movs	r3, #0
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	4b11      	ldr	r3, [pc, #68]	; (80084ac <prvCheckForValidListAndQueue+0x74>)
 8008468:	4a11      	ldr	r2, [pc, #68]	; (80084b0 <prvCheckForValidListAndQueue+0x78>)
 800846a:	2110      	movs	r1, #16
 800846c:	200a      	movs	r0, #10
 800846e:	f7fe f96f 	bl	8006750 <xQueueGenericCreateStatic>
 8008472:	4603      	mov	r3, r0
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <prvCheckForValidListAndQueue+0x60>)
 8008476:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008478:	4b07      	ldr	r3, [pc, #28]	; (8008498 <prvCheckForValidListAndQueue+0x60>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <prvCheckForValidListAndQueue+0x60>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	490b      	ldr	r1, [pc, #44]	; (80084b4 <prvCheckForValidListAndQueue+0x7c>)
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fd82 	bl	8006f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800848c:	f000 f936 	bl	80086fc <vPortExitCritical>
}
 8008490:	bf00      	nop
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200023b4 	.word	0x200023b4
 800849c:	20002384 	.word	0x20002384
 80084a0:	20002398 	.word	0x20002398
 80084a4:	200023ac 	.word	0x200023ac
 80084a8:	200023b0 	.word	0x200023b0
 80084ac:	20002460 	.word	0x20002460
 80084b0:	200023c0 	.word	0x200023c0
 80084b4:	0800d018 	.word	0x0800d018

080084b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3b04      	subs	r3, #4
 80084c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f023 0201 	bic.w	r2, r3, #1
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <pxPortInitialiseStack+0x54>)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3b14      	subs	r3, #20
 80084f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3b20      	subs	r3, #32
 80084fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr
 800850c:	08008511 	.word	0x08008511

08008510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851a:	4b12      	ldr	r3, [pc, #72]	; (8008564 <prvTaskExitError+0x54>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d00a      	beq.n	800853a <prvTaskExitError+0x2a>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60fb      	str	r3, [r7, #12]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <prvTaskExitError+0x28>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	60bb      	str	r3, [r7, #8]
}
 800854c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800854e:	bf00      	nop
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0fc      	beq.n	8008550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c
	...

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	f04e 0e0d 	orr.w	lr, lr, #13
 800858e:	4770      	bx	lr

08008590 <pxCurrentTCBConst2>:
 8008590:	20001e84 	.word	0x20001e84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008598:	4806      	ldr	r0, [pc, #24]	; (80085b4 <prvPortStartFirstTask+0x1c>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	b662      	cpsie	i
 80085a4:	b661      	cpsie	f
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	df00      	svc	0
 80085b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085b2:	bf00      	nop
 80085b4:	e000ed08 	.word	0xe000ed08

080085b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <xPortStartScheduler+0xd0>)
 80085c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	4b2a      	ldr	r3, [pc, #168]	; (800868c <xPortStartScheduler+0xd4>)
 80085e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085e6:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <xPortStartScheduler+0xd8>)
 80085e8:	2207      	movs	r2, #7
 80085ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ec:	e009      	b.n	8008602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085ee:	4b28      	ldr	r3, [pc, #160]	; (8008690 <xPortStartScheduler+0xd8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	4a26      	ldr	r2, [pc, #152]	; (8008690 <xPortStartScheduler+0xd8>)
 80085f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d0ef      	beq.n	80085ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <xPortStartScheduler+0xd8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1c3 0307 	rsb	r3, r3, #7
 8008616:	2b04      	cmp	r3, #4
 8008618:	d00a      	beq.n	8008630 <xPortStartScheduler+0x78>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60bb      	str	r3, [r7, #8]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <xPortStartScheduler+0xd8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	4a16      	ldr	r2, [pc, #88]	; (8008690 <xPortStartScheduler+0xd8>)
 8008638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800863a:	4b15      	ldr	r3, [pc, #84]	; (8008690 <xPortStartScheduler+0xd8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008642:	4a13      	ldr	r2, [pc, #76]	; (8008690 <xPortStartScheduler+0xd8>)
 8008644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <xPortStartScheduler+0xdc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a10      	ldr	r2, [pc, #64]	; (8008694 <xPortStartScheduler+0xdc>)
 8008654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800865a:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <xPortStartScheduler+0xdc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <xPortStartScheduler+0xdc>)
 8008660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008666:	f000 f8b9 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800866a:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <xPortStartScheduler+0xe0>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008670:	f7ff ff92 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008674:	f7ff f8b4 	bl	80077e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008678:	f7ff ff4a 	bl	8008510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	e000e400 	.word	0xe000e400
 800868c:	200024b0 	.word	0x200024b0
 8008690:	200024b4 	.word	0x200024b4
 8008694:	e000ed20 	.word	0xe000ed20
 8008698:	2000000c 	.word	0x2000000c

0800869c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	607b      	str	r3, [r7, #4]
}
 80086b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <vPortEnterCritical+0x58>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a0d      	ldr	r2, [pc, #52]	; (80086f4 <vPortEnterCritical+0x58>)
 80086be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <vPortEnterCritical+0x58>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d10f      	bne.n	80086e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <vPortEnterCritical+0x5c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	603b      	str	r3, [r7, #0]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vPortEnterCritical+0x4a>
	}
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	2000000c 	.word	0x2000000c
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <vPortExitCritical+0x4c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <vPortExitCritical+0x24>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <vPortExitCritical+0x4c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3b01      	subs	r3, #1
 8008726:	4a08      	ldr	r2, [pc, #32]	; (8008748 <vPortExitCritical+0x4c>)
 8008728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800872a:	4b07      	ldr	r3, [pc, #28]	; (8008748 <vPortExitCritical+0x4c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <vPortExitCritical+0x42>
 8008732:	2300      	movs	r3, #0
 8008734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f383 8811 	msr	BASEPRI, r3
}
 800873c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	2000000c 	.word	0x2000000c
 800874c:	00000000 	.word	0x00000000

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008760:	6010      	str	r0, [r2, #0]
 8008762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800876a:	f380 8811 	msr	BASEPRI, r0
 800876e:	f7ff f837 	bl	80077e0 <vTaskSwitchContext>
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8811 	msr	BASEPRI, r0
 800877a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800877e:	6819      	ldr	r1, [r3, #0]
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008786:	f380 8809 	msr	PSP, r0
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	4770      	bx	lr

08008790 <pxCurrentTCBConst>:
 8008790:	20001e84 	.word	0x20001e84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7fe ff57 	bl	8007664 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <SysTick_Handler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x30>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a09      	ldr	r2, [pc, #36]	; (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a08      	ldr	r2, [pc, #32]	; (800881c <vPortSetupTimerInterrupt+0x40>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <vPortSetupTimerInterrupt+0x30>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	e000e010 	.word	0xe000e010
 8008810:	e000e018 	.word	0xe000e018
 8008814:	20000000 	.word	0x20000000
 8008818:	10624dd3 	.word	0x10624dd3
 800881c:	e000e014 	.word	0xe000e014

08008820 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008826:	f3ef 8305 	mrs	r3, IPSR
 800882a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b0f      	cmp	r3, #15
 8008830:	d914      	bls.n	800885c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008832:	4a16      	ldr	r2, [pc, #88]	; (800888c <vPortValidateInterruptPriority+0x6c>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800883c:	4b14      	ldr	r3, [pc, #80]	; (8008890 <vPortValidateInterruptPriority+0x70>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	7afa      	ldrb	r2, [r7, #11]
 8008842:	429a      	cmp	r2, r3
 8008844:	d20a      	bcs.n	800885c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <vPortValidateInterruptPriority+0x74>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <vPortValidateInterruptPriority+0x78>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	429a      	cmp	r2, r3
 800886a:	d90a      	bls.n	8008882 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	603b      	str	r3, [r7, #0]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <vPortValidateInterruptPriority+0x60>
	}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr
 800888c:	e000e3f0 	.word	0xe000e3f0
 8008890:	200024b0 	.word	0x200024b0
 8008894:	e000ed0c 	.word	0xe000ed0c
 8008898:	200024b4 	.word	0x200024b4

0800889c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088a8:	f7fe fe22 	bl	80074f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088ac:	4b58      	ldr	r3, [pc, #352]	; (8008a10 <pvPortMalloc+0x174>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088b4:	f000 f910 	bl	8008ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088b8:	4b56      	ldr	r3, [pc, #344]	; (8008a14 <pvPortMalloc+0x178>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 808e 	bne.w	80089e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01d      	beq.n	8008908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088cc:	2208      	movs	r2, #8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d014      	beq.n	8008908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	3308      	adds	r3, #8
 80088e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <pvPortMalloc+0x6c>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	617b      	str	r3, [r7, #20]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d069      	beq.n	80089e2 <pvPortMalloc+0x146>
 800890e:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <pvPortMalloc+0x17c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d864      	bhi.n	80089e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008918:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <pvPortMalloc+0x180>)
 800891a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800891c:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <pvPortMalloc+0x180>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008922:	e004      	b.n	800892e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d903      	bls.n	8008940 <pvPortMalloc+0xa4>
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f1      	bne.n	8008924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008940:	4b33      	ldr	r3, [pc, #204]	; (8008a10 <pvPortMalloc+0x174>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008946:	429a      	cmp	r2, r3
 8008948:	d04b      	beq.n	80089e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2208      	movs	r2, #8
 8008950:	4413      	add	r3, r2
 8008952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	2308      	movs	r3, #8
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	429a      	cmp	r2, r3
 800896a:	d91f      	bls.n	80089ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <pvPortMalloc+0xf8>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	613b      	str	r3, [r7, #16]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089a6:	69b8      	ldr	r0, [r7, #24]
 80089a8:	f000 f8f8 	bl	8008b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <pvPortMalloc+0x17c>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <pvPortMalloc+0x17c>)
 80089b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ba:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <pvPortMalloc+0x17c>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <pvPortMalloc+0x184>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d203      	bcs.n	80089ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <pvPortMalloc+0x17c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <pvPortMalloc+0x184>)
 80089cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <pvPortMalloc+0x178>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089e2:	f7fe fd93 	bl	800750c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <pvPortMalloc+0x16a>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60fb      	str	r3, [r7, #12]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <pvPortMalloc+0x168>
	return pvReturn;
 8008a06:	69fb      	ldr	r3, [r7, #28]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3728      	adds	r7, #40	; 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20003c30 	.word	0x20003c30
 8008a14:	20003c3c 	.word	0x20003c3c
 8008a18:	20003c34 	.word	0x20003c34
 8008a1c:	20003c28 	.word	0x20003c28
 8008a20:	20003c38 	.word	0x20003c38

08008a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d048      	beq.n	8008ac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a36:	2308      	movs	r3, #8
 8008a38:	425b      	negs	r3, r3
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	4b21      	ldr	r3, [pc, #132]	; (8008ad0 <vPortFree+0xac>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vPortFree+0x44>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60fb      	str	r3, [r7, #12]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <vPortFree+0x62>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60bb      	str	r3, [r7, #8]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <vPortFree+0xac>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d019      	beq.n	8008ac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d115      	bne.n	8008ac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <vPortFree+0xac>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	401a      	ands	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aac:	f7fe fd20 	bl	80074f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <vPortFree+0xb0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4413      	add	r3, r2
 8008aba:	4a06      	ldr	r2, [pc, #24]	; (8008ad4 <vPortFree+0xb0>)
 8008abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f000 f86c 	bl	8008b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ac4:	f7fe fd22 	bl	800750c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ac8:	bf00      	nop
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20003c3c 	.word	0x20003c3c
 8008ad4:	20003c34 	.word	0x20003c34

08008ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ade:	f241 7370 	movw	r3, #6000	; 0x1770
 8008ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ae4:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <prvHeapInit+0xac>)
 8008ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3307      	adds	r3, #7
 8008af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	4a1f      	ldr	r2, [pc, #124]	; (8008b84 <prvHeapInit+0xac>)
 8008b08:	4413      	add	r3, r2
 8008b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b10:	4a1d      	ldr	r2, [pc, #116]	; (8008b88 <prvHeapInit+0xb0>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b16:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <prvHeapInit+0xb0>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b24:	2208      	movs	r2, #8
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0307 	bic.w	r3, r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <prvHeapInit+0xb4>)
 8008b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <prvHeapInit+0xb4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <prvHeapInit+0xb4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	1ad2      	subs	r2, r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <prvHeapInit+0xb4>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <prvHeapInit+0xb8>)
 8008b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <prvHeapInit+0xbc>)
 8008b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <prvHeapInit+0xc0>)
 8008b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b76:	601a      	str	r2, [r3, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	200024b8 	.word	0x200024b8
 8008b88:	20003c28 	.word	0x20003c28
 8008b8c:	20003c30 	.word	0x20003c30
 8008b90:	20003c38 	.word	0x20003c38
 8008b94:	20003c34 	.word	0x20003c34
 8008b98:	20003c3c 	.word	0x20003c3c

08008b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ba4:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <prvInsertBlockIntoFreeList+0xa8>)
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	e002      	b.n	8008bb0 <prvInsertBlockIntoFreeList+0x14>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d8f7      	bhi.n	8008baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d108      	bne.n	8008bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d118      	bne.n	8008c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvInsertBlockIntoFreeList+0xac>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d00d      	beq.n	8008c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	441a      	add	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	e008      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <prvInsertBlockIntoFreeList+0xac>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e003      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d002      	beq.n	8008c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr
 8008c44:	20003c28 	.word	0x20003c28
 8008c48:	20003c30 	.word	0x20003c30

08008c4c <atof>:
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f000 be17 	b.w	8009880 <strtod>

08008c52 <sulp>:
 8008c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c56:	460f      	mov	r7, r1
 8008c58:	4690      	mov	r8, r2
 8008c5a:	f003 fad9 	bl	800c210 <__ulp>
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	f1b8 0f00 	cmp.w	r8, #0
 8008c66:	d011      	beq.n	8008c8c <sulp+0x3a>
 8008c68:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dd0b      	ble.n	8008c8c <sulp+0x3a>
 8008c74:	2400      	movs	r4, #0
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c7c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	f7f7 fc28 	bl	80004d8 <__aeabi_dmul>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	0000      	movs	r0, r0
	...

08008c98 <_strtod_l>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	b09f      	sub	sp, #124	; 0x7c
 8008c9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	921a      	str	r2, [sp, #104]	; 0x68
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	f04f 0800 	mov.w	r8, #0
 8008cac:	f04f 0900 	mov.w	r9, #0
 8008cb0:	460a      	mov	r2, r1
 8008cb2:	9219      	str	r2, [sp, #100]	; 0x64
 8008cb4:	7811      	ldrb	r1, [r2, #0]
 8008cb6:	292b      	cmp	r1, #43	; 0x2b
 8008cb8:	d04a      	beq.n	8008d50 <_strtod_l+0xb8>
 8008cba:	d838      	bhi.n	8008d2e <_strtod_l+0x96>
 8008cbc:	290d      	cmp	r1, #13
 8008cbe:	d832      	bhi.n	8008d26 <_strtod_l+0x8e>
 8008cc0:	2908      	cmp	r1, #8
 8008cc2:	d832      	bhi.n	8008d2a <_strtod_l+0x92>
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d03b      	beq.n	8008d40 <_strtod_l+0xa8>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	920e      	str	r2, [sp, #56]	; 0x38
 8008ccc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008cce:	7832      	ldrb	r2, [r6, #0]
 8008cd0:	2a30      	cmp	r2, #48	; 0x30
 8008cd2:	f040 80b2 	bne.w	8008e3a <_strtod_l+0x1a2>
 8008cd6:	7872      	ldrb	r2, [r6, #1]
 8008cd8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008cdc:	2a58      	cmp	r2, #88	; 0x58
 8008cde:	d16e      	bne.n	8008dbe <_strtod_l+0x126>
 8008ce0:	9302      	str	r3, [sp, #8]
 8008ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	ab1a      	add	r3, sp, #104	; 0x68
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4a8c      	ldr	r2, [pc, #560]	; (8008f20 <_strtod_l+0x288>)
 8008cee:	ab1b      	add	r3, sp, #108	; 0x6c
 8008cf0:	a919      	add	r1, sp, #100	; 0x64
 8008cf2:	f002 fb69 	bl	800b3c8 <__gethex>
 8008cf6:	f010 070f 	ands.w	r7, r0, #15
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	d005      	beq.n	8008d0a <_strtod_l+0x72>
 8008cfe:	2f06      	cmp	r7, #6
 8008d00:	d128      	bne.n	8008d54 <_strtod_l+0xbc>
 8008d02:	2300      	movs	r3, #0
 8008d04:	3601      	adds	r6, #1
 8008d06:	9619      	str	r6, [sp, #100]	; 0x64
 8008d08:	930e      	str	r3, [sp, #56]	; 0x38
 8008d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 85a0 	bne.w	8009852 <_strtod_l+0xbba>
 8008d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d14:	b1cb      	cbz	r3, 8008d4a <_strtod_l+0xb2>
 8008d16:	4642      	mov	r2, r8
 8008d18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	b01f      	add	sp, #124	; 0x7c
 8008d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d26:	2920      	cmp	r1, #32
 8008d28:	d1ce      	bne.n	8008cc8 <_strtod_l+0x30>
 8008d2a:	3201      	adds	r2, #1
 8008d2c:	e7c1      	b.n	8008cb2 <_strtod_l+0x1a>
 8008d2e:	292d      	cmp	r1, #45	; 0x2d
 8008d30:	d1ca      	bne.n	8008cc8 <_strtod_l+0x30>
 8008d32:	2101      	movs	r1, #1
 8008d34:	910e      	str	r1, [sp, #56]	; 0x38
 8008d36:	1c51      	adds	r1, r2, #1
 8008d38:	9119      	str	r1, [sp, #100]	; 0x64
 8008d3a:	7852      	ldrb	r2, [r2, #1]
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	d1c5      	bne.n	8008ccc <_strtod_l+0x34>
 8008d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d42:	9519      	str	r5, [sp, #100]	; 0x64
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8582 	bne.w	800984e <_strtod_l+0xbb6>
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	e7e5      	b.n	8008d1c <_strtod_l+0x84>
 8008d50:	2100      	movs	r1, #0
 8008d52:	e7ef      	b.n	8008d34 <_strtod_l+0x9c>
 8008d54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d56:	b13a      	cbz	r2, 8008d68 <_strtod_l+0xd0>
 8008d58:	2135      	movs	r1, #53	; 0x35
 8008d5a:	a81c      	add	r0, sp, #112	; 0x70
 8008d5c:	f003 fb44 	bl	800c3e8 <__copybits>
 8008d60:	4620      	mov	r0, r4
 8008d62:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d64:	f002 ff28 	bl	800bbb8 <_Bfree>
 8008d68:	3f01      	subs	r7, #1
 8008d6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d6c:	2f04      	cmp	r7, #4
 8008d6e:	d806      	bhi.n	8008d7e <_strtod_l+0xe6>
 8008d70:	e8df f007 	tbb	[pc, r7]
 8008d74:	201d0314 	.word	0x201d0314
 8008d78:	14          	.byte	0x14
 8008d79:	00          	.byte	0x00
 8008d7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d7e:	05e9      	lsls	r1, r5, #23
 8008d80:	bf48      	it	mi
 8008d82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d8a:	0d1b      	lsrs	r3, r3, #20
 8008d8c:	051b      	lsls	r3, r3, #20
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1bb      	bne.n	8008d0a <_strtod_l+0x72>
 8008d92:	f001 fbad 	bl	800a4f0 <__errno>
 8008d96:	2322      	movs	r3, #34	; 0x22
 8008d98:	6003      	str	r3, [r0, #0]
 8008d9a:	e7b6      	b.n	8008d0a <_strtod_l+0x72>
 8008d9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008da0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008da4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008da8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008dac:	e7e7      	b.n	8008d7e <_strtod_l+0xe6>
 8008dae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008f24 <_strtod_l+0x28c>
 8008db2:	e7e4      	b.n	8008d7e <_strtod_l+0xe6>
 8008db4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008db8:	f04f 38ff 	mov.w	r8, #4294967295
 8008dbc:	e7df      	b.n	8008d7e <_strtod_l+0xe6>
 8008dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	9219      	str	r2, [sp, #100]	; 0x64
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b30      	cmp	r3, #48	; 0x30
 8008dc8:	d0f9      	beq.n	8008dbe <_strtod_l+0x126>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d09d      	beq.n	8008d0a <_strtod_l+0x72>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f04f 0a00 	mov.w	sl, #0
 8008dd4:	220a      	movs	r2, #10
 8008dd6:	46d3      	mov	fp, sl
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ddc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008de4:	7806      	ldrb	r6, [r0, #0]
 8008de6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008dea:	b2d9      	uxtb	r1, r3
 8008dec:	2909      	cmp	r1, #9
 8008dee:	d926      	bls.n	8008e3e <_strtod_l+0x1a6>
 8008df0:	2201      	movs	r2, #1
 8008df2:	494d      	ldr	r1, [pc, #308]	; (8008f28 <_strtod_l+0x290>)
 8008df4:	f001 fac9 	bl	800a38a <strncmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d030      	beq.n	8008e5e <_strtod_l+0x1c6>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4632      	mov	r2, r6
 8008e00:	4603      	mov	r3, r0
 8008e02:	465e      	mov	r6, fp
 8008e04:	9008      	str	r0, [sp, #32]
 8008e06:	2a65      	cmp	r2, #101	; 0x65
 8008e08:	d001      	beq.n	8008e0e <_strtod_l+0x176>
 8008e0a:	2a45      	cmp	r2, #69	; 0x45
 8008e0c:	d113      	bne.n	8008e36 <_strtod_l+0x19e>
 8008e0e:	b91e      	cbnz	r6, 8008e18 <_strtod_l+0x180>
 8008e10:	9a05      	ldr	r2, [sp, #20]
 8008e12:	4302      	orrs	r2, r0
 8008e14:	d094      	beq.n	8008d40 <_strtod_l+0xa8>
 8008e16:	2600      	movs	r6, #0
 8008e18:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008e1a:	1c6a      	adds	r2, r5, #1
 8008e1c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e1e:	786a      	ldrb	r2, [r5, #1]
 8008e20:	2a2b      	cmp	r2, #43	; 0x2b
 8008e22:	d074      	beq.n	8008f0e <_strtod_l+0x276>
 8008e24:	2a2d      	cmp	r2, #45	; 0x2d
 8008e26:	d078      	beq.n	8008f1a <_strtod_l+0x282>
 8008e28:	f04f 0c00 	mov.w	ip, #0
 8008e2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e30:	2909      	cmp	r1, #9
 8008e32:	d97f      	bls.n	8008f34 <_strtod_l+0x29c>
 8008e34:	9519      	str	r5, [sp, #100]	; 0x64
 8008e36:	2700      	movs	r7, #0
 8008e38:	e09e      	b.n	8008f78 <_strtod_l+0x2e0>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e7c8      	b.n	8008dd0 <_strtod_l+0x138>
 8008e3e:	f1bb 0f08 	cmp.w	fp, #8
 8008e42:	bfd8      	it	le
 8008e44:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008e46:	f100 0001 	add.w	r0, r0, #1
 8008e4a:	bfd6      	itet	le
 8008e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e50:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008e54:	930a      	strle	r3, [sp, #40]	; 0x28
 8008e56:	f10b 0b01 	add.w	fp, fp, #1
 8008e5a:	9019      	str	r0, [sp, #100]	; 0x64
 8008e5c:	e7c1      	b.n	8008de2 <_strtod_l+0x14a>
 8008e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	9219      	str	r2, [sp, #100]	; 0x64
 8008e64:	785a      	ldrb	r2, [r3, #1]
 8008e66:	f1bb 0f00 	cmp.w	fp, #0
 8008e6a:	d037      	beq.n	8008edc <_strtod_l+0x244>
 8008e6c:	465e      	mov	r6, fp
 8008e6e:	9008      	str	r0, [sp, #32]
 8008e70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e74:	2b09      	cmp	r3, #9
 8008e76:	d912      	bls.n	8008e9e <_strtod_l+0x206>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7c4      	b.n	8008e06 <_strtod_l+0x16e>
 8008e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e7e:	3001      	adds	r0, #1
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	9219      	str	r2, [sp, #100]	; 0x64
 8008e84:	785a      	ldrb	r2, [r3, #1]
 8008e86:	2a30      	cmp	r2, #48	; 0x30
 8008e88:	d0f8      	beq.n	8008e7c <_strtod_l+0x1e4>
 8008e8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	f200 84e4 	bhi.w	800985c <_strtod_l+0xbc4>
 8008e94:	9008      	str	r0, [sp, #32]
 8008e96:	2000      	movs	r0, #0
 8008e98:	4606      	mov	r6, r0
 8008e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e9e:	3a30      	subs	r2, #48	; 0x30
 8008ea0:	f100 0301 	add.w	r3, r0, #1
 8008ea4:	d014      	beq.n	8008ed0 <_strtod_l+0x238>
 8008ea6:	9908      	ldr	r1, [sp, #32]
 8008ea8:	eb00 0c06 	add.w	ip, r0, r6
 8008eac:	4419      	add	r1, r3
 8008eae:	9108      	str	r1, [sp, #32]
 8008eb0:	4633      	mov	r3, r6
 8008eb2:	210a      	movs	r1, #10
 8008eb4:	4563      	cmp	r3, ip
 8008eb6:	d113      	bne.n	8008ee0 <_strtod_l+0x248>
 8008eb8:	1833      	adds	r3, r6, r0
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	f106 0601 	add.w	r6, r6, #1
 8008ec0:	4406      	add	r6, r0
 8008ec2:	dc1a      	bgt.n	8008efa <_strtod_l+0x262>
 8008ec4:	230a      	movs	r3, #10
 8008ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ec8:	fb03 2301 	mla	r3, r3, r1, r2
 8008ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	1c51      	adds	r1, r2, #1
 8008ed6:	9119      	str	r1, [sp, #100]	; 0x64
 8008ed8:	7852      	ldrb	r2, [r2, #1]
 8008eda:	e7c9      	b.n	8008e70 <_strtod_l+0x1d8>
 8008edc:	4658      	mov	r0, fp
 8008ede:	e7d2      	b.n	8008e86 <_strtod_l+0x1ee>
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	f103 0301 	add.w	r3, r3, #1
 8008ee6:	dc03      	bgt.n	8008ef0 <_strtod_l+0x258>
 8008ee8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008eea:	434f      	muls	r7, r1
 8008eec:	970a      	str	r7, [sp, #40]	; 0x28
 8008eee:	e7e1      	b.n	8008eb4 <_strtod_l+0x21c>
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	bfd8      	it	le
 8008ef4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ef8:	e7dc      	b.n	8008eb4 <_strtod_l+0x21c>
 8008efa:	2e10      	cmp	r6, #16
 8008efc:	bfdc      	itt	le
 8008efe:	230a      	movle	r3, #10
 8008f00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008f04:	e7e3      	b.n	8008ece <_strtod_l+0x236>
 8008f06:	2300      	movs	r3, #0
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e780      	b.n	8008e10 <_strtod_l+0x178>
 8008f0e:	f04f 0c00 	mov.w	ip, #0
 8008f12:	1caa      	adds	r2, r5, #2
 8008f14:	9219      	str	r2, [sp, #100]	; 0x64
 8008f16:	78aa      	ldrb	r2, [r5, #2]
 8008f18:	e788      	b.n	8008e2c <_strtod_l+0x194>
 8008f1a:	f04f 0c01 	mov.w	ip, #1
 8008f1e:	e7f8      	b.n	8008f12 <_strtod_l+0x27a>
 8008f20:	0800d114 	.word	0x0800d114
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	0800d110 	.word	0x0800d110
 8008f2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f2e:	1c51      	adds	r1, r2, #1
 8008f30:	9119      	str	r1, [sp, #100]	; 0x64
 8008f32:	7852      	ldrb	r2, [r2, #1]
 8008f34:	2a30      	cmp	r2, #48	; 0x30
 8008f36:	d0f9      	beq.n	8008f2c <_strtod_l+0x294>
 8008f38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f3c:	2908      	cmp	r1, #8
 8008f3e:	f63f af7a 	bhi.w	8008e36 <_strtod_l+0x19e>
 8008f42:	3a30      	subs	r2, #48	; 0x30
 8008f44:	9209      	str	r2, [sp, #36]	; 0x24
 8008f46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f48:	920c      	str	r2, [sp, #48]	; 0x30
 8008f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f4c:	1c57      	adds	r7, r2, #1
 8008f4e:	9719      	str	r7, [sp, #100]	; 0x64
 8008f50:	7852      	ldrb	r2, [r2, #1]
 8008f52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f56:	f1be 0f09 	cmp.w	lr, #9
 8008f5a:	d938      	bls.n	8008fce <_strtod_l+0x336>
 8008f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f5e:	1a7f      	subs	r7, r7, r1
 8008f60:	2f08      	cmp	r7, #8
 8008f62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f66:	dc03      	bgt.n	8008f70 <_strtod_l+0x2d8>
 8008f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f6a:	428f      	cmp	r7, r1
 8008f6c:	bfa8      	it	ge
 8008f6e:	460f      	movge	r7, r1
 8008f70:	f1bc 0f00 	cmp.w	ip, #0
 8008f74:	d000      	beq.n	8008f78 <_strtod_l+0x2e0>
 8008f76:	427f      	negs	r7, r7
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	d14f      	bne.n	800901c <_strtod_l+0x384>
 8008f7c:	9905      	ldr	r1, [sp, #20]
 8008f7e:	4301      	orrs	r1, r0
 8008f80:	f47f aec3 	bne.w	8008d0a <_strtod_l+0x72>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f47f aedb 	bne.w	8008d40 <_strtod_l+0xa8>
 8008f8a:	2a69      	cmp	r2, #105	; 0x69
 8008f8c:	d029      	beq.n	8008fe2 <_strtod_l+0x34a>
 8008f8e:	dc26      	bgt.n	8008fde <_strtod_l+0x346>
 8008f90:	2a49      	cmp	r2, #73	; 0x49
 8008f92:	d026      	beq.n	8008fe2 <_strtod_l+0x34a>
 8008f94:	2a4e      	cmp	r2, #78	; 0x4e
 8008f96:	f47f aed3 	bne.w	8008d40 <_strtod_l+0xa8>
 8008f9a:	499a      	ldr	r1, [pc, #616]	; (8009204 <_strtod_l+0x56c>)
 8008f9c:	a819      	add	r0, sp, #100	; 0x64
 8008f9e:	f002 fc55 	bl	800b84c <__match>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f43f aecc 	beq.w	8008d40 <_strtod_l+0xa8>
 8008fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b28      	cmp	r3, #40	; 0x28
 8008fae:	d12f      	bne.n	8009010 <_strtod_l+0x378>
 8008fb0:	4995      	ldr	r1, [pc, #596]	; (8009208 <_strtod_l+0x570>)
 8008fb2:	aa1c      	add	r2, sp, #112	; 0x70
 8008fb4:	a819      	add	r0, sp, #100	; 0x64
 8008fb6:	f002 fc5d 	bl	800b874 <__hexnan>
 8008fba:	2805      	cmp	r0, #5
 8008fbc:	d128      	bne.n	8009010 <_strtod_l+0x378>
 8008fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fcc:	e69d      	b.n	8008d0a <_strtod_l+0x72>
 8008fce:	210a      	movs	r1, #10
 8008fd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fd2:	fb01 2107 	mla	r1, r1, r7, r2
 8008fd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008fda:	9209      	str	r2, [sp, #36]	; 0x24
 8008fdc:	e7b5      	b.n	8008f4a <_strtod_l+0x2b2>
 8008fde:	2a6e      	cmp	r2, #110	; 0x6e
 8008fe0:	e7d9      	b.n	8008f96 <_strtod_l+0x2fe>
 8008fe2:	498a      	ldr	r1, [pc, #552]	; (800920c <_strtod_l+0x574>)
 8008fe4:	a819      	add	r0, sp, #100	; 0x64
 8008fe6:	f002 fc31 	bl	800b84c <__match>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f43f aea8 	beq.w	8008d40 <_strtod_l+0xa8>
 8008ff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ff2:	4987      	ldr	r1, [pc, #540]	; (8009210 <_strtod_l+0x578>)
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	a819      	add	r0, sp, #100	; 0x64
 8008ff8:	9319      	str	r3, [sp, #100]	; 0x64
 8008ffa:	f002 fc27 	bl	800b84c <__match>
 8008ffe:	b910      	cbnz	r0, 8009006 <_strtod_l+0x36e>
 8009000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009002:	3301      	adds	r3, #1
 8009004:	9319      	str	r3, [sp, #100]	; 0x64
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009214 <_strtod_l+0x57c>
 800900e:	e67c      	b.n	8008d0a <_strtod_l+0x72>
 8009010:	4881      	ldr	r0, [pc, #516]	; (8009218 <_strtod_l+0x580>)
 8009012:	f001 fab5 	bl	800a580 <nan>
 8009016:	4680      	mov	r8, r0
 8009018:	4689      	mov	r9, r1
 800901a:	e676      	b.n	8008d0a <_strtod_l+0x72>
 800901c:	9b08      	ldr	r3, [sp, #32]
 800901e:	f1bb 0f00 	cmp.w	fp, #0
 8009022:	bf08      	it	eq
 8009024:	46b3      	moveq	fp, r6
 8009026:	1afb      	subs	r3, r7, r3
 8009028:	2e10      	cmp	r6, #16
 800902a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800902c:	4635      	mov	r5, r6
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	bfa8      	it	ge
 8009032:	2510      	movge	r5, #16
 8009034:	f7f7 f9d6 	bl	80003e4 <__aeabi_ui2d>
 8009038:	2e09      	cmp	r6, #9
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	dd13      	ble.n	8009068 <_strtod_l+0x3d0>
 8009040:	4b76      	ldr	r3, [pc, #472]	; (800921c <_strtod_l+0x584>)
 8009042:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009046:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800904a:	f7f7 fa45 	bl	80004d8 <__aeabi_dmul>
 800904e:	4680      	mov	r8, r0
 8009050:	4650      	mov	r0, sl
 8009052:	4689      	mov	r9, r1
 8009054:	f7f7 f9c6 	bl	80003e4 <__aeabi_ui2d>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4640      	mov	r0, r8
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 f884 	bl	800016c <__adddf3>
 8009064:	4680      	mov	r8, r0
 8009066:	4689      	mov	r9, r1
 8009068:	2e0f      	cmp	r6, #15
 800906a:	dc36      	bgt.n	80090da <_strtod_l+0x442>
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	f43f ae4b 	beq.w	8008d0a <_strtod_l+0x72>
 8009074:	dd22      	ble.n	80090bc <_strtod_l+0x424>
 8009076:	2b16      	cmp	r3, #22
 8009078:	dc09      	bgt.n	800908e <_strtod_l+0x3f6>
 800907a:	4968      	ldr	r1, [pc, #416]	; (800921c <_strtod_l+0x584>)
 800907c:	4642      	mov	r2, r8
 800907e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009082:	464b      	mov	r3, r9
 8009084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009088:	f7f7 fa26 	bl	80004d8 <__aeabi_dmul>
 800908c:	e7c3      	b.n	8009016 <_strtod_l+0x37e>
 800908e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009090:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009094:	4293      	cmp	r3, r2
 8009096:	db20      	blt.n	80090da <_strtod_l+0x442>
 8009098:	4c60      	ldr	r4, [pc, #384]	; (800921c <_strtod_l+0x584>)
 800909a:	f1c6 060f 	rsb	r6, r6, #15
 800909e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80090a2:	4642      	mov	r2, r8
 80090a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090a8:	464b      	mov	r3, r9
 80090aa:	f7f7 fa15 	bl	80004d8 <__aeabi_dmul>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	1b9e      	subs	r6, r3, r6
 80090b2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80090b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090ba:	e7e5      	b.n	8009088 <_strtod_l+0x3f0>
 80090bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090be:	3316      	adds	r3, #22
 80090c0:	db0b      	blt.n	80090da <_strtod_l+0x442>
 80090c2:	9b08      	ldr	r3, [sp, #32]
 80090c4:	4640      	mov	r0, r8
 80090c6:	1bdf      	subs	r7, r3, r7
 80090c8:	4b54      	ldr	r3, [pc, #336]	; (800921c <_strtod_l+0x584>)
 80090ca:	4649      	mov	r1, r9
 80090cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	f7f7 fb2a 	bl	800072c <__aeabi_ddiv>
 80090d8:	e79d      	b.n	8009016 <_strtod_l+0x37e>
 80090da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090dc:	1b75      	subs	r5, r6, r5
 80090de:	441d      	add	r5, r3
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	dd70      	ble.n	80091c6 <_strtod_l+0x52e>
 80090e4:	f015 030f 	ands.w	r3, r5, #15
 80090e8:	d00a      	beq.n	8009100 <_strtod_l+0x468>
 80090ea:	494c      	ldr	r1, [pc, #304]	; (800921c <_strtod_l+0x584>)
 80090ec:	4642      	mov	r2, r8
 80090ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f6:	464b      	mov	r3, r9
 80090f8:	f7f7 f9ee 	bl	80004d8 <__aeabi_dmul>
 80090fc:	4680      	mov	r8, r0
 80090fe:	4689      	mov	r9, r1
 8009100:	f035 050f 	bics.w	r5, r5, #15
 8009104:	d04d      	beq.n	80091a2 <_strtod_l+0x50a>
 8009106:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800910a:	dd22      	ble.n	8009152 <_strtod_l+0x4ba>
 800910c:	2600      	movs	r6, #0
 800910e:	46b3      	mov	fp, r6
 8009110:	960b      	str	r6, [sp, #44]	; 0x2c
 8009112:	9608      	str	r6, [sp, #32]
 8009114:	2322      	movs	r3, #34	; 0x22
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009214 <_strtod_l+0x57c>
 800911e:	6023      	str	r3, [r4, #0]
 8009120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009122:	2b00      	cmp	r3, #0
 8009124:	f43f adf1 	beq.w	8008d0a <_strtod_l+0x72>
 8009128:	4620      	mov	r0, r4
 800912a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800912c:	f002 fd44 	bl	800bbb8 <_Bfree>
 8009130:	4620      	mov	r0, r4
 8009132:	9908      	ldr	r1, [sp, #32]
 8009134:	f002 fd40 	bl	800bbb8 <_Bfree>
 8009138:	4659      	mov	r1, fp
 800913a:	4620      	mov	r0, r4
 800913c:	f002 fd3c 	bl	800bbb8 <_Bfree>
 8009140:	4620      	mov	r0, r4
 8009142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009144:	f002 fd38 	bl	800bbb8 <_Bfree>
 8009148:	4631      	mov	r1, r6
 800914a:	4620      	mov	r0, r4
 800914c:	f002 fd34 	bl	800bbb8 <_Bfree>
 8009150:	e5db      	b.n	8008d0a <_strtod_l+0x72>
 8009152:	4b33      	ldr	r3, [pc, #204]	; (8009220 <_strtod_l+0x588>)
 8009154:	4640      	mov	r0, r8
 8009156:	9305      	str	r3, [sp, #20]
 8009158:	2300      	movs	r3, #0
 800915a:	4649      	mov	r1, r9
 800915c:	469a      	mov	sl, r3
 800915e:	112d      	asrs	r5, r5, #4
 8009160:	2d01      	cmp	r5, #1
 8009162:	dc21      	bgt.n	80091a8 <_strtod_l+0x510>
 8009164:	b10b      	cbz	r3, 800916a <_strtod_l+0x4d2>
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	492d      	ldr	r1, [pc, #180]	; (8009220 <_strtod_l+0x588>)
 800916c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009170:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009174:	4642      	mov	r2, r8
 8009176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800917a:	464b      	mov	r3, r9
 800917c:	f7f7 f9ac 	bl	80004d8 <__aeabi_dmul>
 8009180:	4b24      	ldr	r3, [pc, #144]	; (8009214 <_strtod_l+0x57c>)
 8009182:	460a      	mov	r2, r1
 8009184:	400b      	ands	r3, r1
 8009186:	4927      	ldr	r1, [pc, #156]	; (8009224 <_strtod_l+0x58c>)
 8009188:	4680      	mov	r8, r0
 800918a:	428b      	cmp	r3, r1
 800918c:	d8be      	bhi.n	800910c <_strtod_l+0x474>
 800918e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009192:	428b      	cmp	r3, r1
 8009194:	bf86      	itte	hi
 8009196:	f04f 38ff 	movhi.w	r8, #4294967295
 800919a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009228 <_strtod_l+0x590>
 800919e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091a2:	2300      	movs	r3, #0
 80091a4:	9305      	str	r3, [sp, #20]
 80091a6:	e07b      	b.n	80092a0 <_strtod_l+0x608>
 80091a8:	07ea      	lsls	r2, r5, #31
 80091aa:	d505      	bpl.n	80091b8 <_strtod_l+0x520>
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 f991 	bl	80004d8 <__aeabi_dmul>
 80091b6:	2301      	movs	r3, #1
 80091b8:	9a05      	ldr	r2, [sp, #20]
 80091ba:	f10a 0a01 	add.w	sl, sl, #1
 80091be:	3208      	adds	r2, #8
 80091c0:	106d      	asrs	r5, r5, #1
 80091c2:	9205      	str	r2, [sp, #20]
 80091c4:	e7cc      	b.n	8009160 <_strtod_l+0x4c8>
 80091c6:	d0ec      	beq.n	80091a2 <_strtod_l+0x50a>
 80091c8:	426d      	negs	r5, r5
 80091ca:	f015 020f 	ands.w	r2, r5, #15
 80091ce:	d00a      	beq.n	80091e6 <_strtod_l+0x54e>
 80091d0:	4b12      	ldr	r3, [pc, #72]	; (800921c <_strtod_l+0x584>)
 80091d2:	4640      	mov	r0, r8
 80091d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d8:	4649      	mov	r1, r9
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 faa5 	bl	800072c <__aeabi_ddiv>
 80091e2:	4680      	mov	r8, r0
 80091e4:	4689      	mov	r9, r1
 80091e6:	112d      	asrs	r5, r5, #4
 80091e8:	d0db      	beq.n	80091a2 <_strtod_l+0x50a>
 80091ea:	2d1f      	cmp	r5, #31
 80091ec:	dd1e      	ble.n	800922c <_strtod_l+0x594>
 80091ee:	2600      	movs	r6, #0
 80091f0:	46b3      	mov	fp, r6
 80091f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80091f4:	9608      	str	r6, [sp, #32]
 80091f6:	2322      	movs	r3, #34	; 0x22
 80091f8:	f04f 0800 	mov.w	r8, #0
 80091fc:	f04f 0900 	mov.w	r9, #0
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	e78d      	b.n	8009120 <_strtod_l+0x488>
 8009204:	0800d175 	.word	0x0800d175
 8009208:	0800d128 	.word	0x0800d128
 800920c:	0800d16d 	.word	0x0800d16d
 8009210:	0800d1a7 	.word	0x0800d1a7
 8009214:	7ff00000 	.word	0x7ff00000
 8009218:	0800d539 	.word	0x0800d539
 800921c:	0800d318 	.word	0x0800d318
 8009220:	0800d2f0 	.word	0x0800d2f0
 8009224:	7ca00000 	.word	0x7ca00000
 8009228:	7fefffff 	.word	0x7fefffff
 800922c:	f015 0310 	ands.w	r3, r5, #16
 8009230:	bf18      	it	ne
 8009232:	236a      	movne	r3, #106	; 0x6a
 8009234:	4640      	mov	r0, r8
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	4649      	mov	r1, r9
 800923a:	2300      	movs	r3, #0
 800923c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009508 <_strtod_l+0x870>
 8009240:	07ea      	lsls	r2, r5, #31
 8009242:	d504      	bpl.n	800924e <_strtod_l+0x5b6>
 8009244:	e9da 2300 	ldrd	r2, r3, [sl]
 8009248:	f7f7 f946 	bl	80004d8 <__aeabi_dmul>
 800924c:	2301      	movs	r3, #1
 800924e:	106d      	asrs	r5, r5, #1
 8009250:	f10a 0a08 	add.w	sl, sl, #8
 8009254:	d1f4      	bne.n	8009240 <_strtod_l+0x5a8>
 8009256:	b10b      	cbz	r3, 800925c <_strtod_l+0x5c4>
 8009258:	4680      	mov	r8, r0
 800925a:	4689      	mov	r9, r1
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	b1bb      	cbz	r3, 8009290 <_strtod_l+0x5f8>
 8009260:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009268:	2b00      	cmp	r3, #0
 800926a:	4649      	mov	r1, r9
 800926c:	dd10      	ble.n	8009290 <_strtod_l+0x5f8>
 800926e:	2b1f      	cmp	r3, #31
 8009270:	f340 8128 	ble.w	80094c4 <_strtod_l+0x82c>
 8009274:	2b34      	cmp	r3, #52	; 0x34
 8009276:	bfd8      	it	le
 8009278:	f04f 33ff 	movle.w	r3, #4294967295
 800927c:	f04f 0800 	mov.w	r8, #0
 8009280:	bfcf      	iteee	gt
 8009282:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009286:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800928a:	4093      	lslle	r3, r2
 800928c:	ea03 0901 	andle.w	r9, r3, r1
 8009290:	2200      	movs	r2, #0
 8009292:	2300      	movs	r3, #0
 8009294:	4640      	mov	r0, r8
 8009296:	4649      	mov	r1, r9
 8009298:	f7f7 fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800929c:	2800      	cmp	r0, #0
 800929e:	d1a6      	bne.n	80091ee <_strtod_l+0x556>
 80092a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a2:	465a      	mov	r2, fp
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	4620      	mov	r0, r4
 80092a8:	4633      	mov	r3, r6
 80092aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ac:	f002 fcec 	bl	800bc88 <__s2b>
 80092b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f43f af2a 	beq.w	800910c <_strtod_l+0x474>
 80092b8:	2600      	movs	r6, #0
 80092ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092bc:	9b08      	ldr	r3, [sp, #32]
 80092be:	2a00      	cmp	r2, #0
 80092c0:	eba3 0307 	sub.w	r3, r3, r7
 80092c4:	bfa8      	it	ge
 80092c6:	2300      	movge	r3, #0
 80092c8:	46b3      	mov	fp, r6
 80092ca:	9312      	str	r3, [sp, #72]	; 0x48
 80092cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092d0:	9316      	str	r3, [sp, #88]	; 0x58
 80092d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d4:	4620      	mov	r0, r4
 80092d6:	6859      	ldr	r1, [r3, #4]
 80092d8:	f002 fc2e 	bl	800bb38 <_Balloc>
 80092dc:	9008      	str	r0, [sp, #32]
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f af18 	beq.w	8009114 <_strtod_l+0x47c>
 80092e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e6:	300c      	adds	r0, #12
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	f103 010c 	add.w	r1, r3, #12
 80092ee:	3202      	adds	r2, #2
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	f001 f937 	bl	800a564 <memcpy>
 80092f6:	ab1c      	add	r3, sp, #112	; 0x70
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4642      	mov	r2, r8
 8009300:	464b      	mov	r3, r9
 8009302:	4620      	mov	r0, r4
 8009304:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009308:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800930c:	f002 ffe8 	bl	800c2e0 <__d2b>
 8009310:	901a      	str	r0, [sp, #104]	; 0x68
 8009312:	2800      	cmp	r0, #0
 8009314:	f43f aefe 	beq.w	8009114 <_strtod_l+0x47c>
 8009318:	2101      	movs	r1, #1
 800931a:	4620      	mov	r0, r4
 800931c:	f002 fd4c 	bl	800bdb8 <__i2b>
 8009320:	4683      	mov	fp, r0
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aef6 	beq.w	8009114 <_strtod_l+0x47c>
 8009328:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800932a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800932c:	2f00      	cmp	r7, #0
 800932e:	bfab      	itete	ge
 8009330:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009332:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009334:	eb07 0a03 	addge.w	sl, r7, r3
 8009338:	1bdd      	sublt	r5, r3, r7
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	bfa8      	it	ge
 800933e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009340:	eba7 0703 	sub.w	r7, r7, r3
 8009344:	4417      	add	r7, r2
 8009346:	4b71      	ldr	r3, [pc, #452]	; (800950c <_strtod_l+0x874>)
 8009348:	f107 37ff 	add.w	r7, r7, #4294967295
 800934c:	bfb8      	it	lt
 800934e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009352:	429f      	cmp	r7, r3
 8009354:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009358:	f280 80c7 	bge.w	80094ea <_strtod_l+0x852>
 800935c:	1bdb      	subs	r3, r3, r7
 800935e:	2b1f      	cmp	r3, #31
 8009360:	f04f 0101 	mov.w	r1, #1
 8009364:	eba2 0203 	sub.w	r2, r2, r3
 8009368:	f300 80b3 	bgt.w	80094d2 <_strtod_l+0x83a>
 800936c:	fa01 f303 	lsl.w	r3, r1, r3
 8009370:	9313      	str	r3, [sp, #76]	; 0x4c
 8009372:	2300      	movs	r3, #0
 8009374:	9310      	str	r3, [sp, #64]	; 0x40
 8009376:	eb0a 0702 	add.w	r7, sl, r2
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	45ba      	cmp	sl, r7
 800937e:	4415      	add	r5, r2
 8009380:	441d      	add	r5, r3
 8009382:	4653      	mov	r3, sl
 8009384:	bfa8      	it	ge
 8009386:	463b      	movge	r3, r7
 8009388:	42ab      	cmp	r3, r5
 800938a:	bfa8      	it	ge
 800938c:	462b      	movge	r3, r5
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfc2      	ittt	gt
 8009392:	1aff      	subgt	r7, r7, r3
 8009394:	1aed      	subgt	r5, r5, r3
 8009396:	ebaa 0a03 	subgt.w	sl, sl, r3
 800939a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800939c:	2b00      	cmp	r3, #0
 800939e:	dd17      	ble.n	80093d0 <_strtod_l+0x738>
 80093a0:	4659      	mov	r1, fp
 80093a2:	461a      	mov	r2, r3
 80093a4:	4620      	mov	r0, r4
 80093a6:	f002 fdc5 	bl	800bf34 <__pow5mult>
 80093aa:	4683      	mov	fp, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f43f aeb1 	beq.w	8009114 <_strtod_l+0x47c>
 80093b2:	4601      	mov	r1, r0
 80093b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093b6:	4620      	mov	r0, r4
 80093b8:	f002 fd14 	bl	800bde4 <__multiply>
 80093bc:	900a      	str	r0, [sp, #40]	; 0x28
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f aea8 	beq.w	8009114 <_strtod_l+0x47c>
 80093c4:	4620      	mov	r0, r4
 80093c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093c8:	f002 fbf6 	bl	800bbb8 <_Bfree>
 80093cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ce:	931a      	str	r3, [sp, #104]	; 0x68
 80093d0:	2f00      	cmp	r7, #0
 80093d2:	f300 808f 	bgt.w	80094f4 <_strtod_l+0x85c>
 80093d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dd08      	ble.n	80093ee <_strtod_l+0x756>
 80093dc:	4620      	mov	r0, r4
 80093de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093e0:	9908      	ldr	r1, [sp, #32]
 80093e2:	f002 fda7 	bl	800bf34 <__pow5mult>
 80093e6:	9008      	str	r0, [sp, #32]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f43f ae93 	beq.w	8009114 <_strtod_l+0x47c>
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	dd08      	ble.n	8009404 <_strtod_l+0x76c>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4620      	mov	r0, r4
 80093f6:	9908      	ldr	r1, [sp, #32]
 80093f8:	f002 fdf6 	bl	800bfe8 <__lshift>
 80093fc:	9008      	str	r0, [sp, #32]
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f ae88 	beq.w	8009114 <_strtod_l+0x47c>
 8009404:	f1ba 0f00 	cmp.w	sl, #0
 8009408:	dd08      	ble.n	800941c <_strtod_l+0x784>
 800940a:	4659      	mov	r1, fp
 800940c:	4652      	mov	r2, sl
 800940e:	4620      	mov	r0, r4
 8009410:	f002 fdea 	bl	800bfe8 <__lshift>
 8009414:	4683      	mov	fp, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f ae7c 	beq.w	8009114 <_strtod_l+0x47c>
 800941c:	4620      	mov	r0, r4
 800941e:	9a08      	ldr	r2, [sp, #32]
 8009420:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009422:	f002 fe69 	bl	800c0f8 <__mdiff>
 8009426:	4606      	mov	r6, r0
 8009428:	2800      	cmp	r0, #0
 800942a:	f43f ae73 	beq.w	8009114 <_strtod_l+0x47c>
 800942e:	2500      	movs	r5, #0
 8009430:	68c3      	ldr	r3, [r0, #12]
 8009432:	4659      	mov	r1, fp
 8009434:	60c5      	str	r5, [r0, #12]
 8009436:	930a      	str	r3, [sp, #40]	; 0x28
 8009438:	f002 fe42 	bl	800c0c0 <__mcmp>
 800943c:	42a8      	cmp	r0, r5
 800943e:	da6b      	bge.n	8009518 <_strtod_l+0x880>
 8009440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009442:	ea53 0308 	orrs.w	r3, r3, r8
 8009446:	f040 808f 	bne.w	8009568 <_strtod_l+0x8d0>
 800944a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800944e:	2b00      	cmp	r3, #0
 8009450:	f040 808a 	bne.w	8009568 <_strtod_l+0x8d0>
 8009454:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009458:	0d1b      	lsrs	r3, r3, #20
 800945a:	051b      	lsls	r3, r3, #20
 800945c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009460:	f240 8082 	bls.w	8009568 <_strtod_l+0x8d0>
 8009464:	6973      	ldr	r3, [r6, #20]
 8009466:	b913      	cbnz	r3, 800946e <_strtod_l+0x7d6>
 8009468:	6933      	ldr	r3, [r6, #16]
 800946a:	2b01      	cmp	r3, #1
 800946c:	dd7c      	ble.n	8009568 <_strtod_l+0x8d0>
 800946e:	4631      	mov	r1, r6
 8009470:	2201      	movs	r2, #1
 8009472:	4620      	mov	r0, r4
 8009474:	f002 fdb8 	bl	800bfe8 <__lshift>
 8009478:	4659      	mov	r1, fp
 800947a:	4606      	mov	r6, r0
 800947c:	f002 fe20 	bl	800c0c0 <__mcmp>
 8009480:	2800      	cmp	r0, #0
 8009482:	dd71      	ble.n	8009568 <_strtod_l+0x8d0>
 8009484:	9905      	ldr	r1, [sp, #20]
 8009486:	464b      	mov	r3, r9
 8009488:	4a21      	ldr	r2, [pc, #132]	; (8009510 <_strtod_l+0x878>)
 800948a:	2900      	cmp	r1, #0
 800948c:	f000 808d 	beq.w	80095aa <_strtod_l+0x912>
 8009490:	ea02 0109 	and.w	r1, r2, r9
 8009494:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009498:	f300 8087 	bgt.w	80095aa <_strtod_l+0x912>
 800949c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094a0:	f77f aea9 	ble.w	80091f6 <_strtod_l+0x55e>
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	4b1a      	ldr	r3, [pc, #104]	; (8009514 <_strtod_l+0x87c>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	4b17      	ldr	r3, [pc, #92]	; (8009510 <_strtod_l+0x878>)
 80094b2:	4680      	mov	r8, r0
 80094b4:	400b      	ands	r3, r1
 80094b6:	4689      	mov	r9, r1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f47f ae35 	bne.w	8009128 <_strtod_l+0x490>
 80094be:	2322      	movs	r3, #34	; 0x22
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	e631      	b.n	8009128 <_strtod_l+0x490>
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	ea03 0808 	and.w	r8, r3, r8
 80094d0:	e6de      	b.n	8009290 <_strtod_l+0x5f8>
 80094d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80094d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80094da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80094de:	37e2      	adds	r7, #226	; 0xe2
 80094e0:	fa01 f307 	lsl.w	r3, r1, r7
 80094e4:	9310      	str	r3, [sp, #64]	; 0x40
 80094e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80094e8:	e745      	b.n	8009376 <_strtod_l+0x6de>
 80094ea:	2300      	movs	r3, #0
 80094ec:	9310      	str	r3, [sp, #64]	; 0x40
 80094ee:	2301      	movs	r3, #1
 80094f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80094f2:	e740      	b.n	8009376 <_strtod_l+0x6de>
 80094f4:	463a      	mov	r2, r7
 80094f6:	4620      	mov	r0, r4
 80094f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094fa:	f002 fd75 	bl	800bfe8 <__lshift>
 80094fe:	901a      	str	r0, [sp, #104]	; 0x68
 8009500:	2800      	cmp	r0, #0
 8009502:	f47f af68 	bne.w	80093d6 <_strtod_l+0x73e>
 8009506:	e605      	b.n	8009114 <_strtod_l+0x47c>
 8009508:	0800d140 	.word	0x0800d140
 800950c:	fffffc02 	.word	0xfffffc02
 8009510:	7ff00000 	.word	0x7ff00000
 8009514:	39500000 	.word	0x39500000
 8009518:	46ca      	mov	sl, r9
 800951a:	d165      	bne.n	80095e8 <_strtod_l+0x950>
 800951c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009522:	b352      	cbz	r2, 800957a <_strtod_l+0x8e2>
 8009524:	4a9e      	ldr	r2, [pc, #632]	; (80097a0 <_strtod_l+0xb08>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d12a      	bne.n	8009580 <_strtod_l+0x8e8>
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	4641      	mov	r1, r8
 800952e:	b1fb      	cbz	r3, 8009570 <_strtod_l+0x8d8>
 8009530:	4b9c      	ldr	r3, [pc, #624]	; (80097a4 <_strtod_l+0xb0c>)
 8009532:	f04f 32ff 	mov.w	r2, #4294967295
 8009536:	ea09 0303 	and.w	r3, r9, r3
 800953a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800953e:	d81a      	bhi.n	8009576 <_strtod_l+0x8de>
 8009540:	0d1b      	lsrs	r3, r3, #20
 8009542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009546:	fa02 f303 	lsl.w	r3, r2, r3
 800954a:	4299      	cmp	r1, r3
 800954c:	d118      	bne.n	8009580 <_strtod_l+0x8e8>
 800954e:	4b96      	ldr	r3, [pc, #600]	; (80097a8 <_strtod_l+0xb10>)
 8009550:	459a      	cmp	sl, r3
 8009552:	d102      	bne.n	800955a <_strtod_l+0x8c2>
 8009554:	3101      	adds	r1, #1
 8009556:	f43f addd 	beq.w	8009114 <_strtod_l+0x47c>
 800955a:	f04f 0800 	mov.w	r8, #0
 800955e:	4b91      	ldr	r3, [pc, #580]	; (80097a4 <_strtod_l+0xb0c>)
 8009560:	ea0a 0303 	and.w	r3, sl, r3
 8009564:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d19a      	bne.n	80094a4 <_strtod_l+0x80c>
 800956e:	e5db      	b.n	8009128 <_strtod_l+0x490>
 8009570:	f04f 33ff 	mov.w	r3, #4294967295
 8009574:	e7e9      	b.n	800954a <_strtod_l+0x8b2>
 8009576:	4613      	mov	r3, r2
 8009578:	e7e7      	b.n	800954a <_strtod_l+0x8b2>
 800957a:	ea53 0308 	orrs.w	r3, r3, r8
 800957e:	d081      	beq.n	8009484 <_strtod_l+0x7ec>
 8009580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009582:	b1e3      	cbz	r3, 80095be <_strtod_l+0x926>
 8009584:	ea13 0f0a 	tst.w	r3, sl
 8009588:	d0ee      	beq.n	8009568 <_strtod_l+0x8d0>
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	9a05      	ldr	r2, [sp, #20]
 8009592:	b1c3      	cbz	r3, 80095c6 <_strtod_l+0x92e>
 8009594:	f7ff fb5d 	bl	8008c52 <sulp>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800959e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095a0:	f7f6 fde4 	bl	800016c <__adddf3>
 80095a4:	4680      	mov	r8, r0
 80095a6:	4689      	mov	r9, r1
 80095a8:	e7de      	b.n	8009568 <_strtod_l+0x8d0>
 80095aa:	4013      	ands	r3, r2
 80095ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095b4:	f04f 38ff 	mov.w	r8, #4294967295
 80095b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095bc:	e7d4      	b.n	8009568 <_strtod_l+0x8d0>
 80095be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095c0:	ea13 0f08 	tst.w	r3, r8
 80095c4:	e7e0      	b.n	8009588 <_strtod_l+0x8f0>
 80095c6:	f7ff fb44 	bl	8008c52 <sulp>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095d2:	f7f6 fdc9 	bl	8000168 <__aeabi_dsub>
 80095d6:	2200      	movs	r2, #0
 80095d8:	2300      	movs	r3, #0
 80095da:	4680      	mov	r8, r0
 80095dc:	4689      	mov	r9, r1
 80095de:	f7f7 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0c0      	beq.n	8009568 <_strtod_l+0x8d0>
 80095e6:	e606      	b.n	80091f6 <_strtod_l+0x55e>
 80095e8:	4659      	mov	r1, fp
 80095ea:	4630      	mov	r0, r6
 80095ec:	f002 fece 	bl	800c38c <__ratio>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80095f8:	2200      	movs	r2, #0
 80095fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095fe:	f7f7 f9e7 	bl	80009d0 <__aeabi_dcmple>
 8009602:	2800      	cmp	r0, #0
 8009604:	d06f      	beq.n	80096e6 <_strtod_l+0xa4e>
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d17c      	bne.n	8009706 <_strtod_l+0xa6e>
 800960c:	f1b8 0f00 	cmp.w	r8, #0
 8009610:	d159      	bne.n	80096c6 <_strtod_l+0xa2e>
 8009612:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009616:	2b00      	cmp	r3, #0
 8009618:	d17b      	bne.n	8009712 <_strtod_l+0xa7a>
 800961a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800961e:	2200      	movs	r2, #0
 8009620:	4b62      	ldr	r3, [pc, #392]	; (80097ac <_strtod_l+0xb14>)
 8009622:	f7f7 f9cb 	bl	80009bc <__aeabi_dcmplt>
 8009626:	2800      	cmp	r0, #0
 8009628:	d15a      	bne.n	80096e0 <_strtod_l+0xa48>
 800962a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800962e:	2200      	movs	r2, #0
 8009630:	4b5f      	ldr	r3, [pc, #380]	; (80097b0 <_strtod_l+0xb18>)
 8009632:	f7f6 ff51 	bl	80004d8 <__aeabi_dmul>
 8009636:	4605      	mov	r5, r0
 8009638:	460f      	mov	r7, r1
 800963a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800963e:	9506      	str	r5, [sp, #24]
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009646:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800964a:	4b56      	ldr	r3, [pc, #344]	; (80097a4 <_strtod_l+0xb0c>)
 800964c:	4a55      	ldr	r2, [pc, #340]	; (80097a4 <_strtod_l+0xb0c>)
 800964e:	ea0a 0303 	and.w	r3, sl, r3
 8009652:	9313      	str	r3, [sp, #76]	; 0x4c
 8009654:	4b57      	ldr	r3, [pc, #348]	; (80097b4 <_strtod_l+0xb1c>)
 8009656:	ea0a 0202 	and.w	r2, sl, r2
 800965a:	429a      	cmp	r2, r3
 800965c:	f040 80b0 	bne.w	80097c0 <_strtod_l+0xb28>
 8009660:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f002 fdd2 	bl	800c210 <__ulp>
 800966c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009670:	f7f6 ff32 	bl	80004d8 <__aeabi_dmul>
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	f7f6 fd78 	bl	800016c <__adddf3>
 800967c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80097a4 <_strtod_l+0xb0c>
 8009680:	4a4d      	ldr	r2, [pc, #308]	; (80097b8 <_strtod_l+0xb20>)
 8009682:	ea01 0a0a 	and.w	sl, r1, sl
 8009686:	4592      	cmp	sl, r2
 8009688:	4680      	mov	r8, r0
 800968a:	d948      	bls.n	800971e <_strtod_l+0xa86>
 800968c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800968e:	4b46      	ldr	r3, [pc, #280]	; (80097a8 <_strtod_l+0xb10>)
 8009690:	429a      	cmp	r2, r3
 8009692:	d103      	bne.n	800969c <_strtod_l+0xa04>
 8009694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009696:	3301      	adds	r3, #1
 8009698:	f43f ad3c 	beq.w	8009114 <_strtod_l+0x47c>
 800969c:	f04f 38ff 	mov.w	r8, #4294967295
 80096a0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80097a8 <_strtod_l+0xb10>
 80096a4:	4620      	mov	r0, r4
 80096a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096a8:	f002 fa86 	bl	800bbb8 <_Bfree>
 80096ac:	4620      	mov	r0, r4
 80096ae:	9908      	ldr	r1, [sp, #32]
 80096b0:	f002 fa82 	bl	800bbb8 <_Bfree>
 80096b4:	4659      	mov	r1, fp
 80096b6:	4620      	mov	r0, r4
 80096b8:	f002 fa7e 	bl	800bbb8 <_Bfree>
 80096bc:	4631      	mov	r1, r6
 80096be:	4620      	mov	r0, r4
 80096c0:	f002 fa7a 	bl	800bbb8 <_Bfree>
 80096c4:	e605      	b.n	80092d2 <_strtod_l+0x63a>
 80096c6:	f1b8 0f01 	cmp.w	r8, #1
 80096ca:	d103      	bne.n	80096d4 <_strtod_l+0xa3c>
 80096cc:	f1b9 0f00 	cmp.w	r9, #0
 80096d0:	f43f ad91 	beq.w	80091f6 <_strtod_l+0x55e>
 80096d4:	2200      	movs	r2, #0
 80096d6:	4b39      	ldr	r3, [pc, #228]	; (80097bc <_strtod_l+0xb24>)
 80096d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096de:	e016      	b.n	800970e <_strtod_l+0xa76>
 80096e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096e2:	4f33      	ldr	r7, [pc, #204]	; (80097b0 <_strtod_l+0xb18>)
 80096e4:	e7a9      	b.n	800963a <_strtod_l+0x9a2>
 80096e6:	4b32      	ldr	r3, [pc, #200]	; (80097b0 <_strtod_l+0xb18>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ee:	f7f6 fef3 	bl	80004d8 <__aeabi_dmul>
 80096f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f4:	4605      	mov	r5, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d09e      	beq.n	800963a <_strtod_l+0x9a2>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009704:	e79d      	b.n	8009642 <_strtod_l+0x9aa>
 8009706:	2200      	movs	r2, #0
 8009708:	4b28      	ldr	r3, [pc, #160]	; (80097ac <_strtod_l+0xb14>)
 800970a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800970e:	4f27      	ldr	r7, [pc, #156]	; (80097ac <_strtod_l+0xb14>)
 8009710:	e797      	b.n	8009642 <_strtod_l+0x9aa>
 8009712:	2200      	movs	r2, #0
 8009714:	4b29      	ldr	r3, [pc, #164]	; (80097bc <_strtod_l+0xb24>)
 8009716:	4645      	mov	r5, r8
 8009718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800971c:	e7f7      	b.n	800970e <_strtod_l+0xa76>
 800971e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	46ca      	mov	sl, r9
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1bc      	bne.n	80096a4 <_strtod_l+0xa0c>
 800972a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800972e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009730:	0d1b      	lsrs	r3, r3, #20
 8009732:	051b      	lsls	r3, r3, #20
 8009734:	429a      	cmp	r2, r3
 8009736:	d1b5      	bne.n	80096a4 <_strtod_l+0xa0c>
 8009738:	4628      	mov	r0, r5
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 fc72 	bl	8001024 <__aeabi_d2lz>
 8009740:	f7f6 fe9c 	bl	800047c <__aeabi_l2d>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4628      	mov	r0, r5
 800974a:	4639      	mov	r1, r7
 800974c:	f7f6 fd0c 	bl	8000168 <__aeabi_dsub>
 8009750:	460b      	mov	r3, r1
 8009752:	4602      	mov	r2, r0
 8009754:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009758:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800975c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009762:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009766:	d06c      	beq.n	8009842 <_strtod_l+0xbaa>
 8009768:	a309      	add	r3, pc, #36	; (adr r3, 8009790 <_strtod_l+0xaf8>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f7 f925 	bl	80009bc <__aeabi_dcmplt>
 8009772:	2800      	cmp	r0, #0
 8009774:	f47f acd8 	bne.w	8009128 <_strtod_l+0x490>
 8009778:	a307      	add	r3, pc, #28	; (adr r3, 8009798 <_strtod_l+0xb00>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009782:	f7f7 f939 	bl	80009f8 <__aeabi_dcmpgt>
 8009786:	2800      	cmp	r0, #0
 8009788:	d08c      	beq.n	80096a4 <_strtod_l+0xa0c>
 800978a:	e4cd      	b.n	8009128 <_strtod_l+0x490>
 800978c:	f3af 8000 	nop.w
 8009790:	94a03595 	.word	0x94a03595
 8009794:	3fdfffff 	.word	0x3fdfffff
 8009798:	35afe535 	.word	0x35afe535
 800979c:	3fe00000 	.word	0x3fe00000
 80097a0:	000fffff 	.word	0x000fffff
 80097a4:	7ff00000 	.word	0x7ff00000
 80097a8:	7fefffff 	.word	0x7fefffff
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	3fe00000 	.word	0x3fe00000
 80097b4:	7fe00000 	.word	0x7fe00000
 80097b8:	7c9fffff 	.word	0x7c9fffff
 80097bc:	bff00000 	.word	0xbff00000
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	b333      	cbz	r3, 8009812 <_strtod_l+0xb7a>
 80097c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097ca:	d822      	bhi.n	8009812 <_strtod_l+0xb7a>
 80097cc:	a328      	add	r3, pc, #160	; (adr r3, 8009870 <_strtod_l+0xbd8>)
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	4628      	mov	r0, r5
 80097d4:	4639      	mov	r1, r7
 80097d6:	f7f7 f8fb 	bl	80009d0 <__aeabi_dcmple>
 80097da:	b1a0      	cbz	r0, 8009806 <_strtod_l+0xb6e>
 80097dc:	4639      	mov	r1, r7
 80097de:	4628      	mov	r0, r5
 80097e0:	f7f7 f952 	bl	8000a88 <__aeabi_d2uiz>
 80097e4:	2801      	cmp	r0, #1
 80097e6:	bf38      	it	cc
 80097e8:	2001      	movcc	r0, #1
 80097ea:	f7f6 fdfb 	bl	80003e4 <__aeabi_ui2d>
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	4605      	mov	r5, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	bb03      	cbnz	r3, 8009838 <_strtod_l+0xba0>
 80097f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097fa:	9014      	str	r0, [sp, #80]	; 0x50
 80097fc:	9315      	str	r3, [sp, #84]	; 0x54
 80097fe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009802:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800980a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	9311      	str	r3, [sp, #68]	; 0x44
 8009812:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009814:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009816:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800981a:	f002 fcf9 	bl	800c210 <__ulp>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4640      	mov	r0, r8
 8009824:	4649      	mov	r1, r9
 8009826:	f7f6 fe57 	bl	80004d8 <__aeabi_dmul>
 800982a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800982c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800982e:	f7f6 fc9d 	bl	800016c <__adddf3>
 8009832:	4680      	mov	r8, r0
 8009834:	4689      	mov	r9, r1
 8009836:	e774      	b.n	8009722 <_strtod_l+0xa8a>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009840:	e7dd      	b.n	80097fe <_strtod_l+0xb66>
 8009842:	a30d      	add	r3, pc, #52	; (adr r3, 8009878 <_strtod_l+0xbe0>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f7 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800984c:	e79b      	b.n	8009786 <_strtod_l+0xaee>
 800984e:	2300      	movs	r3, #0
 8009850:	930e      	str	r3, [sp, #56]	; 0x38
 8009852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	f7ff ba5b 	b.w	8008d12 <_strtod_l+0x7a>
 800985c:	2a65      	cmp	r2, #101	; 0x65
 800985e:	f43f ab52 	beq.w	8008f06 <_strtod_l+0x26e>
 8009862:	2a45      	cmp	r2, #69	; 0x45
 8009864:	f43f ab4f 	beq.w	8008f06 <_strtod_l+0x26e>
 8009868:	2301      	movs	r3, #1
 800986a:	f7ff bb87 	b.w	8008f7c <_strtod_l+0x2e4>
 800986e:	bf00      	nop
 8009870:	ffc00000 	.word	0xffc00000
 8009874:	41dfffff 	.word	0x41dfffff
 8009878:	94a03595 	.word	0x94a03595
 800987c:	3fcfffff 	.word	0x3fcfffff

08009880 <strtod>:
 8009880:	460a      	mov	r2, r1
 8009882:	4601      	mov	r1, r0
 8009884:	4802      	ldr	r0, [pc, #8]	; (8009890 <strtod+0x10>)
 8009886:	4b03      	ldr	r3, [pc, #12]	; (8009894 <strtod+0x14>)
 8009888:	6800      	ldr	r0, [r0, #0]
 800988a:	f7ff ba05 	b.w	8008c98 <_strtod_l>
 800988e:	bf00      	nop
 8009890:	200001d4 	.word	0x200001d4
 8009894:	2000001c 	.word	0x2000001c

08009898 <__cvt>:
 8009898:	2b00      	cmp	r3, #0
 800989a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989e:	461f      	mov	r7, r3
 80098a0:	bfbb      	ittet	lt
 80098a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80098a6:	461f      	movlt	r7, r3
 80098a8:	2300      	movge	r3, #0
 80098aa:	232d      	movlt	r3, #45	; 0x2d
 80098ac:	b088      	sub	sp, #32
 80098ae:	4614      	mov	r4, r2
 80098b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80098b4:	7013      	strb	r3, [r2, #0]
 80098b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80098bc:	f023 0820 	bic.w	r8, r3, #32
 80098c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098c4:	d005      	beq.n	80098d2 <__cvt+0x3a>
 80098c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098ca:	d100      	bne.n	80098ce <__cvt+0x36>
 80098cc:	3501      	adds	r5, #1
 80098ce:	2302      	movs	r3, #2
 80098d0:	e000      	b.n	80098d4 <__cvt+0x3c>
 80098d2:	2303      	movs	r3, #3
 80098d4:	aa07      	add	r2, sp, #28
 80098d6:	9204      	str	r2, [sp, #16]
 80098d8:	aa06      	add	r2, sp, #24
 80098da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80098de:	e9cd 3500 	strd	r3, r5, [sp]
 80098e2:	4622      	mov	r2, r4
 80098e4:	463b      	mov	r3, r7
 80098e6:	f000 fedb 	bl	800a6a0 <_dtoa_r>
 80098ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098ee:	4606      	mov	r6, r0
 80098f0:	d102      	bne.n	80098f8 <__cvt+0x60>
 80098f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098f4:	07db      	lsls	r3, r3, #31
 80098f6:	d522      	bpl.n	800993e <__cvt+0xa6>
 80098f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098fc:	eb06 0905 	add.w	r9, r6, r5
 8009900:	d110      	bne.n	8009924 <__cvt+0x8c>
 8009902:	7833      	ldrb	r3, [r6, #0]
 8009904:	2b30      	cmp	r3, #48	; 0x30
 8009906:	d10a      	bne.n	800991e <__cvt+0x86>
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	4620      	mov	r0, r4
 800990e:	4639      	mov	r1, r7
 8009910:	f7f7 f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8009914:	b918      	cbnz	r0, 800991e <__cvt+0x86>
 8009916:	f1c5 0501 	rsb	r5, r5, #1
 800991a:	f8ca 5000 	str.w	r5, [sl]
 800991e:	f8da 3000 	ldr.w	r3, [sl]
 8009922:	4499      	add	r9, r3
 8009924:	2200      	movs	r2, #0
 8009926:	2300      	movs	r3, #0
 8009928:	4620      	mov	r0, r4
 800992a:	4639      	mov	r1, r7
 800992c:	f7f7 f83c 	bl	80009a8 <__aeabi_dcmpeq>
 8009930:	b108      	cbz	r0, 8009936 <__cvt+0x9e>
 8009932:	f8cd 901c 	str.w	r9, [sp, #28]
 8009936:	2230      	movs	r2, #48	; 0x30
 8009938:	9b07      	ldr	r3, [sp, #28]
 800993a:	454b      	cmp	r3, r9
 800993c:	d307      	bcc.n	800994e <__cvt+0xb6>
 800993e:	4630      	mov	r0, r6
 8009940:	9b07      	ldr	r3, [sp, #28]
 8009942:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009944:	1b9b      	subs	r3, r3, r6
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	b008      	add	sp, #32
 800994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994e:	1c59      	adds	r1, r3, #1
 8009950:	9107      	str	r1, [sp, #28]
 8009952:	701a      	strb	r2, [r3, #0]
 8009954:	e7f0      	b.n	8009938 <__cvt+0xa0>

08009956 <__exponent>:
 8009956:	4603      	mov	r3, r0
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	2900      	cmp	r1, #0
 800995c:	f803 2b02 	strb.w	r2, [r3], #2
 8009960:	bfb6      	itet	lt
 8009962:	222d      	movlt	r2, #45	; 0x2d
 8009964:	222b      	movge	r2, #43	; 0x2b
 8009966:	4249      	neglt	r1, r1
 8009968:	2909      	cmp	r1, #9
 800996a:	7042      	strb	r2, [r0, #1]
 800996c:	dd2a      	ble.n	80099c4 <__exponent+0x6e>
 800996e:	f10d 0207 	add.w	r2, sp, #7
 8009972:	4617      	mov	r7, r2
 8009974:	260a      	movs	r6, #10
 8009976:	fb91 f5f6 	sdiv	r5, r1, r6
 800997a:	4694      	mov	ip, r2
 800997c:	fb06 1415 	mls	r4, r6, r5, r1
 8009980:	3430      	adds	r4, #48	; 0x30
 8009982:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009986:	460c      	mov	r4, r1
 8009988:	2c63      	cmp	r4, #99	; 0x63
 800998a:	4629      	mov	r1, r5
 800998c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009990:	dcf1      	bgt.n	8009976 <__exponent+0x20>
 8009992:	3130      	adds	r1, #48	; 0x30
 8009994:	f1ac 0402 	sub.w	r4, ip, #2
 8009998:	f802 1c01 	strb.w	r1, [r2, #-1]
 800999c:	4622      	mov	r2, r4
 800999e:	1c41      	adds	r1, r0, #1
 80099a0:	42ba      	cmp	r2, r7
 80099a2:	d30a      	bcc.n	80099ba <__exponent+0x64>
 80099a4:	f10d 0209 	add.w	r2, sp, #9
 80099a8:	eba2 020c 	sub.w	r2, r2, ip
 80099ac:	42bc      	cmp	r4, r7
 80099ae:	bf88      	it	hi
 80099b0:	2200      	movhi	r2, #0
 80099b2:	4413      	add	r3, r2
 80099b4:	1a18      	subs	r0, r3, r0
 80099b6:	b003      	add	sp, #12
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80099be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80099c2:	e7ed      	b.n	80099a0 <__exponent+0x4a>
 80099c4:	2330      	movs	r3, #48	; 0x30
 80099c6:	3130      	adds	r1, #48	; 0x30
 80099c8:	7083      	strb	r3, [r0, #2]
 80099ca:	70c1      	strb	r1, [r0, #3]
 80099cc:	1d03      	adds	r3, r0, #4
 80099ce:	e7f1      	b.n	80099b4 <__exponent+0x5e>

080099d0 <_printf_float>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	b091      	sub	sp, #68	; 0x44
 80099d6:	460c      	mov	r4, r1
 80099d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80099dc:	4616      	mov	r6, r2
 80099de:	461f      	mov	r7, r3
 80099e0:	4605      	mov	r5, r0
 80099e2:	f000 fce5 	bl	800a3b0 <_localeconv_r>
 80099e6:	6803      	ldr	r3, [r0, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	f7f6 fbb0 	bl	8000150 <strlen>
 80099f0:	2300      	movs	r3, #0
 80099f2:	930e      	str	r3, [sp, #56]	; 0x38
 80099f4:	f8d8 3000 	ldr.w	r3, [r8]
 80099f8:	900a      	str	r0, [sp, #40]	; 0x28
 80099fa:	3307      	adds	r3, #7
 80099fc:	f023 0307 	bic.w	r3, r3, #7
 8009a00:	f103 0208 	add.w	r2, r3, #8
 8009a04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009a08:	f8d4 b000 	ldr.w	fp, [r4]
 8009a0c:	f8c8 2000 	str.w	r2, [r8]
 8009a10:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009a14:	4652      	mov	r2, sl
 8009a16:	4643      	mov	r3, r8
 8009a18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a1c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	4650      	mov	r0, sl
 8009a28:	4b9c      	ldr	r3, [pc, #624]	; (8009c9c <_printf_float+0x2cc>)
 8009a2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a2c:	f7f6 ffee 	bl	8000a0c <__aeabi_dcmpun>
 8009a30:	bb70      	cbnz	r0, 8009a90 <_printf_float+0xc0>
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	4650      	mov	r0, sl
 8009a38:	4b98      	ldr	r3, [pc, #608]	; (8009c9c <_printf_float+0x2cc>)
 8009a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a3c:	f7f6 ffc8 	bl	80009d0 <__aeabi_dcmple>
 8009a40:	bb30      	cbnz	r0, 8009a90 <_printf_float+0xc0>
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4650      	mov	r0, sl
 8009a48:	4641      	mov	r1, r8
 8009a4a:	f7f6 ffb7 	bl	80009bc <__aeabi_dcmplt>
 8009a4e:	b110      	cbz	r0, 8009a56 <_printf_float+0x86>
 8009a50:	232d      	movs	r3, #45	; 0x2d
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a56:	4a92      	ldr	r2, [pc, #584]	; (8009ca0 <_printf_float+0x2d0>)
 8009a58:	4b92      	ldr	r3, [pc, #584]	; (8009ca4 <_printf_float+0x2d4>)
 8009a5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009a5e:	bf94      	ite	ls
 8009a60:	4690      	movls	r8, r2
 8009a62:	4698      	movhi	r8, r3
 8009a64:	2303      	movs	r3, #3
 8009a66:	f04f 0a00 	mov.w	sl, #0
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	f02b 0304 	bic.w	r3, fp, #4
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	4633      	mov	r3, r6
 8009a74:	4621      	mov	r1, r4
 8009a76:	4628      	mov	r0, r5
 8009a78:	9700      	str	r7, [sp, #0]
 8009a7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a7c:	f000 f9d6 	bl	8009e2c <_printf_common>
 8009a80:	3001      	adds	r0, #1
 8009a82:	f040 8090 	bne.w	8009ba6 <_printf_float+0x1d6>
 8009a86:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8a:	b011      	add	sp, #68	; 0x44
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	4652      	mov	r2, sl
 8009a92:	4643      	mov	r3, r8
 8009a94:	4650      	mov	r0, sl
 8009a96:	4641      	mov	r1, r8
 8009a98:	f7f6 ffb8 	bl	8000a0c <__aeabi_dcmpun>
 8009a9c:	b148      	cbz	r0, 8009ab2 <_printf_float+0xe2>
 8009a9e:	f1b8 0f00 	cmp.w	r8, #0
 8009aa2:	bfb8      	it	lt
 8009aa4:	232d      	movlt	r3, #45	; 0x2d
 8009aa6:	4a80      	ldr	r2, [pc, #512]	; (8009ca8 <_printf_float+0x2d8>)
 8009aa8:	bfb8      	it	lt
 8009aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009aae:	4b7f      	ldr	r3, [pc, #508]	; (8009cac <_printf_float+0x2dc>)
 8009ab0:	e7d3      	b.n	8009a5a <_printf_float+0x8a>
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	d142      	bne.n	8009b42 <_printf_float+0x172>
 8009abc:	2306      	movs	r3, #6
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	9206      	str	r2, [sp, #24]
 8009ac4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ac6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009aca:	aa0d      	add	r2, sp, #52	; 0x34
 8009acc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009ad0:	9203      	str	r2, [sp, #12]
 8009ad2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009ad6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	4652      	mov	r2, sl
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4643      	mov	r3, r8
 8009ae6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ae8:	f7ff fed6 	bl	8009898 <__cvt>
 8009aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aee:	4680      	mov	r8, r0
 8009af0:	2947      	cmp	r1, #71	; 0x47
 8009af2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009af4:	d108      	bne.n	8009b08 <_printf_float+0x138>
 8009af6:	1cc8      	adds	r0, r1, #3
 8009af8:	db02      	blt.n	8009b00 <_printf_float+0x130>
 8009afa:	6863      	ldr	r3, [r4, #4]
 8009afc:	4299      	cmp	r1, r3
 8009afe:	dd40      	ble.n	8009b82 <_printf_float+0x1b2>
 8009b00:	f1a9 0902 	sub.w	r9, r9, #2
 8009b04:	fa5f f989 	uxtb.w	r9, r9
 8009b08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b0c:	d81f      	bhi.n	8009b4e <_printf_float+0x17e>
 8009b0e:	464a      	mov	r2, r9
 8009b10:	3901      	subs	r1, #1
 8009b12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b16:	910d      	str	r1, [sp, #52]	; 0x34
 8009b18:	f7ff ff1d 	bl	8009956 <__exponent>
 8009b1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b1e:	4682      	mov	sl, r0
 8009b20:	1813      	adds	r3, r2, r0
 8009b22:	2a01      	cmp	r2, #1
 8009b24:	6123      	str	r3, [r4, #16]
 8009b26:	dc02      	bgt.n	8009b2e <_printf_float+0x15e>
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	07d2      	lsls	r2, r2, #31
 8009b2c:	d501      	bpl.n	8009b32 <_printf_float+0x162>
 8009b2e:	3301      	adds	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d09b      	beq.n	8009a72 <_printf_float+0xa2>
 8009b3a:	232d      	movs	r3, #45	; 0x2d
 8009b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b40:	e797      	b.n	8009a72 <_printf_float+0xa2>
 8009b42:	2947      	cmp	r1, #71	; 0x47
 8009b44:	d1bc      	bne.n	8009ac0 <_printf_float+0xf0>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1ba      	bne.n	8009ac0 <_printf_float+0xf0>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e7b7      	b.n	8009abe <_printf_float+0xee>
 8009b4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009b52:	d118      	bne.n	8009b86 <_printf_float+0x1b6>
 8009b54:	2900      	cmp	r1, #0
 8009b56:	6863      	ldr	r3, [r4, #4]
 8009b58:	dd0b      	ble.n	8009b72 <_printf_float+0x1a2>
 8009b5a:	6121      	str	r1, [r4, #16]
 8009b5c:	b913      	cbnz	r3, 8009b64 <_printf_float+0x194>
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	07d0      	lsls	r0, r2, #31
 8009b62:	d502      	bpl.n	8009b6a <_printf_float+0x19a>
 8009b64:	3301      	adds	r3, #1
 8009b66:	440b      	add	r3, r1
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	f04f 0a00 	mov.w	sl, #0
 8009b6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b70:	e7df      	b.n	8009b32 <_printf_float+0x162>
 8009b72:	b913      	cbnz	r3, 8009b7a <_printf_float+0x1aa>
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	07d2      	lsls	r2, r2, #31
 8009b78:	d501      	bpl.n	8009b7e <_printf_float+0x1ae>
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	e7f4      	b.n	8009b68 <_printf_float+0x198>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e7f2      	b.n	8009b68 <_printf_float+0x198>
 8009b82:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	db05      	blt.n	8009b98 <_printf_float+0x1c8>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	6121      	str	r1, [r4, #16]
 8009b90:	07d8      	lsls	r0, r3, #31
 8009b92:	d5ea      	bpl.n	8009b6a <_printf_float+0x19a>
 8009b94:	1c4b      	adds	r3, r1, #1
 8009b96:	e7e7      	b.n	8009b68 <_printf_float+0x198>
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	bfcc      	ite	gt
 8009b9c:	2201      	movgt	r2, #1
 8009b9e:	f1c1 0202 	rsble	r2, r1, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	e7e0      	b.n	8009b68 <_printf_float+0x198>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	055a      	lsls	r2, r3, #21
 8009baa:	d407      	bmi.n	8009bbc <_printf_float+0x1ec>
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	4642      	mov	r2, r8
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d12b      	bne.n	8009c12 <_printf_float+0x242>
 8009bba:	e764      	b.n	8009a86 <_printf_float+0xb6>
 8009bbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009bc0:	f240 80dd 	bls.w	8009d7e <_printf_float+0x3ae>
 8009bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f7f6 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d033      	beq.n	8009c3c <_printf_float+0x26c>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	4a35      	ldr	r2, [pc, #212]	; (8009cb0 <_printf_float+0x2e0>)
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af51 	beq.w	8009a86 <_printf_float+0xb6>
 8009be4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009be8:	429a      	cmp	r2, r3
 8009bea:	db02      	blt.n	8009bf2 <_printf_float+0x222>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	07d8      	lsls	r0, r3, #31
 8009bf0:	d50f      	bpl.n	8009c12 <_printf_float+0x242>
 8009bf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f af42 	beq.w	8009a86 <_printf_float+0xb6>
 8009c02:	f04f 0800 	mov.w	r8, #0
 8009c06:	f104 091a 	add.w	r9, r4, #26
 8009c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	4543      	cmp	r3, r8
 8009c10:	dc09      	bgt.n	8009c26 <_printf_float+0x256>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	079b      	lsls	r3, r3, #30
 8009c16:	f100 8104 	bmi.w	8009e22 <_printf_float+0x452>
 8009c1a:	68e0      	ldr	r0, [r4, #12]
 8009c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	bfb8      	it	lt
 8009c22:	4618      	movlt	r0, r3
 8009c24:	e731      	b.n	8009a8a <_printf_float+0xba>
 8009c26:	2301      	movs	r3, #1
 8009c28:	464a      	mov	r2, r9
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f af28 	beq.w	8009a86 <_printf_float+0xb6>
 8009c36:	f108 0801 	add.w	r8, r8, #1
 8009c3a:	e7e6      	b.n	8009c0a <_printf_float+0x23a>
 8009c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dc38      	bgt.n	8009cb4 <_printf_float+0x2e4>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <_printf_float+0x2e0>)
 8009c4a:	47b8      	blx	r7
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f af1a 	beq.w	8009a86 <_printf_float+0xb6>
 8009c52:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c56:	4313      	orrs	r3, r2
 8009c58:	d102      	bne.n	8009c60 <_printf_float+0x290>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	07d9      	lsls	r1, r3, #31
 8009c5e:	d5d8      	bpl.n	8009c12 <_printf_float+0x242>
 8009c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c64:	4631      	mov	r1, r6
 8009c66:	4628      	mov	r0, r5
 8009c68:	47b8      	blx	r7
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	f43f af0b 	beq.w	8009a86 <_printf_float+0xb6>
 8009c70:	f04f 0900 	mov.w	r9, #0
 8009c74:	f104 0a1a 	add.w	sl, r4, #26
 8009c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7a:	425b      	negs	r3, r3
 8009c7c:	454b      	cmp	r3, r9
 8009c7e:	dc01      	bgt.n	8009c84 <_printf_float+0x2b4>
 8009c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c82:	e794      	b.n	8009bae <_printf_float+0x1de>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4652      	mov	r2, sl
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f aef9 	beq.w	8009a86 <_printf_float+0xb6>
 8009c94:	f109 0901 	add.w	r9, r9, #1
 8009c98:	e7ee      	b.n	8009c78 <_printf_float+0x2a8>
 8009c9a:	bf00      	nop
 8009c9c:	7fefffff 	.word	0x7fefffff
 8009ca0:	0800d168 	.word	0x0800d168
 8009ca4:	0800d16c 	.word	0x0800d16c
 8009ca8:	0800d170 	.word	0x0800d170
 8009cac:	0800d174 	.word	0x0800d174
 8009cb0:	0800d178 	.word	0x0800d178
 8009cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bfa8      	it	ge
 8009cbc:	461a      	movge	r2, r3
 8009cbe:	2a00      	cmp	r2, #0
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	dc37      	bgt.n	8009d34 <_printf_float+0x364>
 8009cc4:	f04f 0b00 	mov.w	fp, #0
 8009cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ccc:	f104 021a 	add.w	r2, r4, #26
 8009cd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009cd4:	ebaa 0309 	sub.w	r3, sl, r9
 8009cd8:	455b      	cmp	r3, fp
 8009cda:	dc33      	bgt.n	8009d44 <_printf_float+0x374>
 8009cdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	db3b      	blt.n	8009d5c <_printf_float+0x38c>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07da      	lsls	r2, r3, #31
 8009ce8:	d438      	bmi.n	8009d5c <_printf_float+0x38c>
 8009cea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009cee:	eba2 0903 	sub.w	r9, r2, r3
 8009cf2:	eba2 020a 	sub.w	r2, r2, sl
 8009cf6:	4591      	cmp	r9, r2
 8009cf8:	bfa8      	it	ge
 8009cfa:	4691      	movge	r9, r2
 8009cfc:	f1b9 0f00 	cmp.w	r9, #0
 8009d00:	dc34      	bgt.n	8009d6c <_printf_float+0x39c>
 8009d02:	f04f 0800 	mov.w	r8, #0
 8009d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d0a:	f104 0a1a 	add.w	sl, r4, #26
 8009d0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	eba3 0309 	sub.w	r3, r3, r9
 8009d18:	4543      	cmp	r3, r8
 8009d1a:	f77f af7a 	ble.w	8009c12 <_printf_float+0x242>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f43f aeac 	beq.w	8009a86 <_printf_float+0xb6>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	e7ec      	b.n	8009d0e <_printf_float+0x33e>
 8009d34:	4613      	mov	r3, r2
 8009d36:	4631      	mov	r1, r6
 8009d38:	4642      	mov	r2, r8
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d1c0      	bne.n	8009cc4 <_printf_float+0x2f4>
 8009d42:	e6a0      	b.n	8009a86 <_printf_float+0xb6>
 8009d44:	2301      	movs	r3, #1
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f ae99 	beq.w	8009a86 <_printf_float+0xb6>
 8009d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d56:	f10b 0b01 	add.w	fp, fp, #1
 8009d5a:	e7b9      	b.n	8009cd0 <_printf_float+0x300>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	d1bf      	bne.n	8009cea <_printf_float+0x31a>
 8009d6a:	e68c      	b.n	8009a86 <_printf_float+0xb6>
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	eb08 020a 	add.w	r2, r8, sl
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d1c2      	bne.n	8009d02 <_printf_float+0x332>
 8009d7c:	e683      	b.n	8009a86 <_printf_float+0xb6>
 8009d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d80:	2a01      	cmp	r2, #1
 8009d82:	dc01      	bgt.n	8009d88 <_printf_float+0x3b8>
 8009d84:	07db      	lsls	r3, r3, #31
 8009d86:	d539      	bpl.n	8009dfc <_printf_float+0x42c>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	f43f ae77 	beq.w	8009a86 <_printf_float+0xb6>
 8009d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f ae6f 	beq.w	8009a86 <_printf_float+0xb6>
 8009da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009db4:	f7f6 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8009db8:	b9d8      	cbnz	r0, 8009df2 <_printf_float+0x422>
 8009dba:	f109 33ff 	add.w	r3, r9, #4294967295
 8009dbe:	f108 0201 	add.w	r2, r8, #1
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d10e      	bne.n	8009dea <_printf_float+0x41a>
 8009dcc:	e65b      	b.n	8009a86 <_printf_float+0xb6>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	464a      	mov	r2, r9
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f43f ae54 	beq.w	8009a86 <_printf_float+0xb6>
 8009dde:	f108 0801 	add.w	r8, r8, #1
 8009de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009de4:	3b01      	subs	r3, #1
 8009de6:	4543      	cmp	r3, r8
 8009de8:	dcf1      	bgt.n	8009dce <_printf_float+0x3fe>
 8009dea:	4653      	mov	r3, sl
 8009dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009df0:	e6de      	b.n	8009bb0 <_printf_float+0x1e0>
 8009df2:	f04f 0800 	mov.w	r8, #0
 8009df6:	f104 091a 	add.w	r9, r4, #26
 8009dfa:	e7f2      	b.n	8009de2 <_printf_float+0x412>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4642      	mov	r2, r8
 8009e00:	e7df      	b.n	8009dc2 <_printf_float+0x3f2>
 8009e02:	2301      	movs	r3, #1
 8009e04:	464a      	mov	r2, r9
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f ae3a 	beq.w	8009a86 <_printf_float+0xb6>
 8009e12:	f108 0801 	add.w	r8, r8, #1
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e1a:	1a5b      	subs	r3, r3, r1
 8009e1c:	4543      	cmp	r3, r8
 8009e1e:	dcf0      	bgt.n	8009e02 <_printf_float+0x432>
 8009e20:	e6fb      	b.n	8009c1a <_printf_float+0x24a>
 8009e22:	f04f 0800 	mov.w	r8, #0
 8009e26:	f104 0919 	add.w	r9, r4, #25
 8009e2a:	e7f4      	b.n	8009e16 <_printf_float+0x446>

08009e2c <_printf_common>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	4616      	mov	r6, r2
 8009e32:	4699      	mov	r9, r3
 8009e34:	688a      	ldr	r2, [r1, #8]
 8009e36:	690b      	ldr	r3, [r1, #16]
 8009e38:	4607      	mov	r7, r0
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	bfb8      	it	lt
 8009e3e:	4613      	movlt	r3, r2
 8009e40:	6033      	str	r3, [r6, #0]
 8009e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e46:	460c      	mov	r4, r1
 8009e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e4c:	b10a      	cbz	r2, 8009e52 <_printf_common+0x26>
 8009e4e:	3301      	adds	r3, #1
 8009e50:	6033      	str	r3, [r6, #0]
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	0699      	lsls	r1, r3, #26
 8009e56:	bf42      	ittt	mi
 8009e58:	6833      	ldrmi	r3, [r6, #0]
 8009e5a:	3302      	addmi	r3, #2
 8009e5c:	6033      	strmi	r3, [r6, #0]
 8009e5e:	6825      	ldr	r5, [r4, #0]
 8009e60:	f015 0506 	ands.w	r5, r5, #6
 8009e64:	d106      	bne.n	8009e74 <_printf_common+0x48>
 8009e66:	f104 0a19 	add.w	sl, r4, #25
 8009e6a:	68e3      	ldr	r3, [r4, #12]
 8009e6c:	6832      	ldr	r2, [r6, #0]
 8009e6e:	1a9b      	subs	r3, r3, r2
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	dc2b      	bgt.n	8009ecc <_printf_common+0xa0>
 8009e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e78:	1e13      	subs	r3, r2, #0
 8009e7a:	6822      	ldr	r2, [r4, #0]
 8009e7c:	bf18      	it	ne
 8009e7e:	2301      	movne	r3, #1
 8009e80:	0692      	lsls	r2, r2, #26
 8009e82:	d430      	bmi.n	8009ee6 <_printf_common+0xba>
 8009e84:	4649      	mov	r1, r9
 8009e86:	4638      	mov	r0, r7
 8009e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e8c:	47c0      	blx	r8
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d023      	beq.n	8009eda <_printf_common+0xae>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	6922      	ldr	r2, [r4, #16]
 8009e96:	f003 0306 	and.w	r3, r3, #6
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	bf14      	ite	ne
 8009e9e:	2500      	movne	r5, #0
 8009ea0:	6833      	ldreq	r3, [r6, #0]
 8009ea2:	f04f 0600 	mov.w	r6, #0
 8009ea6:	bf08      	it	eq
 8009ea8:	68e5      	ldreq	r5, [r4, #12]
 8009eaa:	f104 041a 	add.w	r4, r4, #26
 8009eae:	bf08      	it	eq
 8009eb0:	1aed      	subeq	r5, r5, r3
 8009eb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009eb6:	bf08      	it	eq
 8009eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	bfc4      	itt	gt
 8009ec0:	1a9b      	subgt	r3, r3, r2
 8009ec2:	18ed      	addgt	r5, r5, r3
 8009ec4:	42b5      	cmp	r5, r6
 8009ec6:	d11a      	bne.n	8009efe <_printf_common+0xd2>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e008      	b.n	8009ede <_printf_common+0xb2>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4652      	mov	r2, sl
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	47c0      	blx	r8
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d103      	bne.n	8009ee2 <_printf_common+0xb6>
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee2:	3501      	adds	r5, #1
 8009ee4:	e7c1      	b.n	8009e6a <_printf_common+0x3e>
 8009ee6:	2030      	movs	r0, #48	; 0x30
 8009ee8:	18e1      	adds	r1, r4, r3
 8009eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ef4:	4422      	add	r2, r4
 8009ef6:	3302      	adds	r3, #2
 8009ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009efc:	e7c2      	b.n	8009e84 <_printf_common+0x58>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4622      	mov	r2, r4
 8009f02:	4649      	mov	r1, r9
 8009f04:	4638      	mov	r0, r7
 8009f06:	47c0      	blx	r8
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d0e6      	beq.n	8009eda <_printf_common+0xae>
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7d9      	b.n	8009ec4 <_printf_common+0x98>

08009f10 <_printf_i>:
 8009f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	7e0f      	ldrb	r7, [r1, #24]
 8009f16:	4691      	mov	r9, r2
 8009f18:	2f78      	cmp	r7, #120	; 0x78
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	469a      	mov	sl, r3
 8009f20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f26:	d807      	bhi.n	8009f38 <_printf_i+0x28>
 8009f28:	2f62      	cmp	r7, #98	; 0x62
 8009f2a:	d80a      	bhi.n	8009f42 <_printf_i+0x32>
 8009f2c:	2f00      	cmp	r7, #0
 8009f2e:	f000 80d5 	beq.w	800a0dc <_printf_i+0x1cc>
 8009f32:	2f58      	cmp	r7, #88	; 0x58
 8009f34:	f000 80c1 	beq.w	800a0ba <_printf_i+0x1aa>
 8009f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f40:	e03a      	b.n	8009fb8 <_printf_i+0xa8>
 8009f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f46:	2b15      	cmp	r3, #21
 8009f48:	d8f6      	bhi.n	8009f38 <_printf_i+0x28>
 8009f4a:	a101      	add	r1, pc, #4	; (adr r1, 8009f50 <_printf_i+0x40>)
 8009f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f50:	08009fa9 	.word	0x08009fa9
 8009f54:	08009fbd 	.word	0x08009fbd
 8009f58:	08009f39 	.word	0x08009f39
 8009f5c:	08009f39 	.word	0x08009f39
 8009f60:	08009f39 	.word	0x08009f39
 8009f64:	08009f39 	.word	0x08009f39
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	08009f39 	.word	0x08009f39
 8009f70:	08009f39 	.word	0x08009f39
 8009f74:	08009f39 	.word	0x08009f39
 8009f78:	08009f39 	.word	0x08009f39
 8009f7c:	0800a0c3 	.word	0x0800a0c3
 8009f80:	08009fe9 	.word	0x08009fe9
 8009f84:	0800a07d 	.word	0x0800a07d
 8009f88:	08009f39 	.word	0x08009f39
 8009f8c:	08009f39 	.word	0x08009f39
 8009f90:	0800a0e5 	.word	0x0800a0e5
 8009f94:	08009f39 	.word	0x08009f39
 8009f98:	08009fe9 	.word	0x08009fe9
 8009f9c:	08009f39 	.word	0x08009f39
 8009fa0:	08009f39 	.word	0x08009f39
 8009fa4:	0800a085 	.word	0x0800a085
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	1d1a      	adds	r2, r3, #4
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	602a      	str	r2, [r5, #0]
 8009fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e0a0      	b.n	800a0fe <_printf_i+0x1ee>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	682b      	ldr	r3, [r5, #0]
 8009fc0:	0607      	lsls	r7, r0, #24
 8009fc2:	f103 0104 	add.w	r1, r3, #4
 8009fc6:	6029      	str	r1, [r5, #0]
 8009fc8:	d501      	bpl.n	8009fce <_printf_i+0xbe>
 8009fca:	681e      	ldr	r6, [r3, #0]
 8009fcc:	e003      	b.n	8009fd6 <_printf_i+0xc6>
 8009fce:	0646      	lsls	r6, r0, #25
 8009fd0:	d5fb      	bpl.n	8009fca <_printf_i+0xba>
 8009fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	da03      	bge.n	8009fe2 <_printf_i+0xd2>
 8009fda:	232d      	movs	r3, #45	; 0x2d
 8009fdc:	4276      	negs	r6, r6
 8009fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe2:	230a      	movs	r3, #10
 8009fe4:	4859      	ldr	r0, [pc, #356]	; (800a14c <_printf_i+0x23c>)
 8009fe6:	e012      	b.n	800a00e <_printf_i+0xfe>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	1d19      	adds	r1, r3, #4
 8009fee:	6029      	str	r1, [r5, #0]
 8009ff0:	0605      	lsls	r5, r0, #24
 8009ff2:	d501      	bpl.n	8009ff8 <_printf_i+0xe8>
 8009ff4:	681e      	ldr	r6, [r3, #0]
 8009ff6:	e002      	b.n	8009ffe <_printf_i+0xee>
 8009ff8:	0641      	lsls	r1, r0, #25
 8009ffa:	d5fb      	bpl.n	8009ff4 <_printf_i+0xe4>
 8009ffc:	881e      	ldrh	r6, [r3, #0]
 8009ffe:	2f6f      	cmp	r7, #111	; 0x6f
 800a000:	bf0c      	ite	eq
 800a002:	2308      	moveq	r3, #8
 800a004:	230a      	movne	r3, #10
 800a006:	4851      	ldr	r0, [pc, #324]	; (800a14c <_printf_i+0x23c>)
 800a008:	2100      	movs	r1, #0
 800a00a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a00e:	6865      	ldr	r5, [r4, #4]
 800a010:	2d00      	cmp	r5, #0
 800a012:	bfa8      	it	ge
 800a014:	6821      	ldrge	r1, [r4, #0]
 800a016:	60a5      	str	r5, [r4, #8]
 800a018:	bfa4      	itt	ge
 800a01a:	f021 0104 	bicge.w	r1, r1, #4
 800a01e:	6021      	strge	r1, [r4, #0]
 800a020:	b90e      	cbnz	r6, 800a026 <_printf_i+0x116>
 800a022:	2d00      	cmp	r5, #0
 800a024:	d04b      	beq.n	800a0be <_printf_i+0x1ae>
 800a026:	4615      	mov	r5, r2
 800a028:	fbb6 f1f3 	udiv	r1, r6, r3
 800a02c:	fb03 6711 	mls	r7, r3, r1, r6
 800a030:	5dc7      	ldrb	r7, [r0, r7]
 800a032:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a036:	4637      	mov	r7, r6
 800a038:	42bb      	cmp	r3, r7
 800a03a:	460e      	mov	r6, r1
 800a03c:	d9f4      	bls.n	800a028 <_printf_i+0x118>
 800a03e:	2b08      	cmp	r3, #8
 800a040:	d10b      	bne.n	800a05a <_printf_i+0x14a>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	07de      	lsls	r6, r3, #31
 800a046:	d508      	bpl.n	800a05a <_printf_i+0x14a>
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	6861      	ldr	r1, [r4, #4]
 800a04c:	4299      	cmp	r1, r3
 800a04e:	bfde      	ittt	le
 800a050:	2330      	movle	r3, #48	; 0x30
 800a052:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	6122      	str	r2, [r4, #16]
 800a05e:	464b      	mov	r3, r9
 800a060:	4621      	mov	r1, r4
 800a062:	4640      	mov	r0, r8
 800a064:	f8cd a000 	str.w	sl, [sp]
 800a068:	aa03      	add	r2, sp, #12
 800a06a:	f7ff fedf 	bl	8009e2c <_printf_common>
 800a06e:	3001      	adds	r0, #1
 800a070:	d14a      	bne.n	800a108 <_printf_i+0x1f8>
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	b004      	add	sp, #16
 800a078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	f043 0320 	orr.w	r3, r3, #32
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	2778      	movs	r7, #120	; 0x78
 800a086:	4832      	ldr	r0, [pc, #200]	; (800a150 <_printf_i+0x240>)
 800a088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	6829      	ldr	r1, [r5, #0]
 800a090:	061f      	lsls	r7, r3, #24
 800a092:	f851 6b04 	ldr.w	r6, [r1], #4
 800a096:	d402      	bmi.n	800a09e <_printf_i+0x18e>
 800a098:	065f      	lsls	r7, r3, #25
 800a09a:	bf48      	it	mi
 800a09c:	b2b6      	uxthmi	r6, r6
 800a09e:	07df      	lsls	r7, r3, #31
 800a0a0:	bf48      	it	mi
 800a0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0a6:	6029      	str	r1, [r5, #0]
 800a0a8:	bf48      	it	mi
 800a0aa:	6023      	strmi	r3, [r4, #0]
 800a0ac:	b91e      	cbnz	r6, 800a0b6 <_printf_i+0x1a6>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	f023 0320 	bic.w	r3, r3, #32
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	2310      	movs	r3, #16
 800a0b8:	e7a6      	b.n	800a008 <_printf_i+0xf8>
 800a0ba:	4824      	ldr	r0, [pc, #144]	; (800a14c <_printf_i+0x23c>)
 800a0bc:	e7e4      	b.n	800a088 <_printf_i+0x178>
 800a0be:	4615      	mov	r5, r2
 800a0c0:	e7bd      	b.n	800a03e <_printf_i+0x12e>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	6826      	ldr	r6, [r4, #0]
 800a0c6:	1d18      	adds	r0, r3, #4
 800a0c8:	6961      	ldr	r1, [r4, #20]
 800a0ca:	6028      	str	r0, [r5, #0]
 800a0cc:	0635      	lsls	r5, r6, #24
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	d501      	bpl.n	800a0d6 <_printf_i+0x1c6>
 800a0d2:	6019      	str	r1, [r3, #0]
 800a0d4:	e002      	b.n	800a0dc <_printf_i+0x1cc>
 800a0d6:	0670      	lsls	r0, r6, #25
 800a0d8:	d5fb      	bpl.n	800a0d2 <_printf_i+0x1c2>
 800a0da:	8019      	strh	r1, [r3, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4615      	mov	r5, r2
 800a0e0:	6123      	str	r3, [r4, #16]
 800a0e2:	e7bc      	b.n	800a05e <_printf_i+0x14e>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	1d1a      	adds	r2, r3, #4
 800a0ea:	602a      	str	r2, [r5, #0]
 800a0ec:	681d      	ldr	r5, [r3, #0]
 800a0ee:	6862      	ldr	r2, [r4, #4]
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fa29 	bl	800a548 <memchr>
 800a0f6:	b108      	cbz	r0, 800a0fc <_printf_i+0x1ec>
 800a0f8:	1b40      	subs	r0, r0, r5
 800a0fa:	6060      	str	r0, [r4, #4]
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	2300      	movs	r3, #0
 800a102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a106:	e7aa      	b.n	800a05e <_printf_i+0x14e>
 800a108:	462a      	mov	r2, r5
 800a10a:	4649      	mov	r1, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	47d0      	blx	sl
 800a112:	3001      	adds	r0, #1
 800a114:	d0ad      	beq.n	800a072 <_printf_i+0x162>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	079b      	lsls	r3, r3, #30
 800a11a:	d413      	bmi.n	800a144 <_printf_i+0x234>
 800a11c:	68e0      	ldr	r0, [r4, #12]
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	4298      	cmp	r0, r3
 800a122:	bfb8      	it	lt
 800a124:	4618      	movlt	r0, r3
 800a126:	e7a6      	b.n	800a076 <_printf_i+0x166>
 800a128:	2301      	movs	r3, #1
 800a12a:	4632      	mov	r2, r6
 800a12c:	4649      	mov	r1, r9
 800a12e:	4640      	mov	r0, r8
 800a130:	47d0      	blx	sl
 800a132:	3001      	adds	r0, #1
 800a134:	d09d      	beq.n	800a072 <_printf_i+0x162>
 800a136:	3501      	adds	r5, #1
 800a138:	68e3      	ldr	r3, [r4, #12]
 800a13a:	9903      	ldr	r1, [sp, #12]
 800a13c:	1a5b      	subs	r3, r3, r1
 800a13e:	42ab      	cmp	r3, r5
 800a140:	dcf2      	bgt.n	800a128 <_printf_i+0x218>
 800a142:	e7eb      	b.n	800a11c <_printf_i+0x20c>
 800a144:	2500      	movs	r5, #0
 800a146:	f104 0619 	add.w	r6, r4, #25
 800a14a:	e7f5      	b.n	800a138 <_printf_i+0x228>
 800a14c:	0800d17a 	.word	0x0800d17a
 800a150:	0800d18b 	.word	0x0800d18b

0800a154 <std>:
 800a154:	2300      	movs	r3, #0
 800a156:	b510      	push	{r4, lr}
 800a158:	4604      	mov	r4, r0
 800a15a:	e9c0 3300 	strd	r3, r3, [r0]
 800a15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a162:	6083      	str	r3, [r0, #8]
 800a164:	8181      	strh	r1, [r0, #12]
 800a166:	6643      	str	r3, [r0, #100]	; 0x64
 800a168:	81c2      	strh	r2, [r0, #14]
 800a16a:	6183      	str	r3, [r0, #24]
 800a16c:	4619      	mov	r1, r3
 800a16e:	2208      	movs	r2, #8
 800a170:	305c      	adds	r0, #92	; 0x5c
 800a172:	f000 f902 	bl	800a37a <memset>
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x38>)
 800a178:	6224      	str	r4, [r4, #32]
 800a17a:	6263      	str	r3, [r4, #36]	; 0x24
 800a17c:	4b04      	ldr	r3, [pc, #16]	; (800a190 <std+0x3c>)
 800a17e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a180:	4b04      	ldr	r3, [pc, #16]	; (800a194 <std+0x40>)
 800a182:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a184:	4b04      	ldr	r3, [pc, #16]	; (800a198 <std+0x44>)
 800a186:	6323      	str	r3, [r4, #48]	; 0x30
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	bf00      	nop
 800a18c:	0800a2f5 	.word	0x0800a2f5
 800a190:	0800a317 	.word	0x0800a317
 800a194:	0800a34f 	.word	0x0800a34f
 800a198:	0800a373 	.word	0x0800a373

0800a19c <stdio_exit_handler>:
 800a19c:	4a02      	ldr	r2, [pc, #8]	; (800a1a8 <stdio_exit_handler+0xc>)
 800a19e:	4903      	ldr	r1, [pc, #12]	; (800a1ac <stdio_exit_handler+0x10>)
 800a1a0:	4803      	ldr	r0, [pc, #12]	; (800a1b0 <stdio_exit_handler+0x14>)
 800a1a2:	f000 b869 	b.w	800a278 <_fwalk_sglue>
 800a1a6:	bf00      	nop
 800a1a8:	20000010 	.word	0x20000010
 800a1ac:	0800c841 	.word	0x0800c841
 800a1b0:	20000188 	.word	0x20000188

0800a1b4 <cleanup_stdio>:
 800a1b4:	6841      	ldr	r1, [r0, #4]
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <cleanup_stdio+0x34>)
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	4299      	cmp	r1, r3
 800a1bc:	4604      	mov	r4, r0
 800a1be:	d001      	beq.n	800a1c4 <cleanup_stdio+0x10>
 800a1c0:	f002 fb3e 	bl	800c840 <_fflush_r>
 800a1c4:	68a1      	ldr	r1, [r4, #8]
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <cleanup_stdio+0x38>)
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	d002      	beq.n	800a1d2 <cleanup_stdio+0x1e>
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f002 fb37 	bl	800c840 <_fflush_r>
 800a1d2:	68e1      	ldr	r1, [r4, #12]
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <cleanup_stdio+0x3c>)
 800a1d6:	4299      	cmp	r1, r3
 800a1d8:	d004      	beq.n	800a1e4 <cleanup_stdio+0x30>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1e0:	f002 bb2e 	b.w	800c840 <_fflush_r>
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20003c40 	.word	0x20003c40
 800a1ec:	20003ca8 	.word	0x20003ca8
 800a1f0:	20003d10 	.word	0x20003d10

0800a1f4 <global_stdio_init.part.0>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <global_stdio_init.part.0+0x30>)
 800a1f8:	4c0b      	ldr	r4, [pc, #44]	; (800a228 <global_stdio_init.part.0+0x34>)
 800a1fa:	4a0c      	ldr	r2, [pc, #48]	; (800a22c <global_stdio_init.part.0+0x38>)
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	2104      	movs	r1, #4
 800a202:	2200      	movs	r2, #0
 800a204:	f7ff ffa6 	bl	800a154 <std>
 800a208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a20c:	2201      	movs	r2, #1
 800a20e:	2109      	movs	r1, #9
 800a210:	f7ff ffa0 	bl	800a154 <std>
 800a214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a218:	2202      	movs	r2, #2
 800a21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21e:	2112      	movs	r1, #18
 800a220:	f7ff bf98 	b.w	800a154 <std>
 800a224:	20003d78 	.word	0x20003d78
 800a228:	20003c40 	.word	0x20003c40
 800a22c:	0800a19d 	.word	0x0800a19d

0800a230 <__sfp_lock_acquire>:
 800a230:	4801      	ldr	r0, [pc, #4]	; (800a238 <__sfp_lock_acquire+0x8>)
 800a232:	f000 b987 	b.w	800a544 <__retarget_lock_acquire_recursive>
 800a236:	bf00      	nop
 800a238:	20003d81 	.word	0x20003d81

0800a23c <__sfp_lock_release>:
 800a23c:	4801      	ldr	r0, [pc, #4]	; (800a244 <__sfp_lock_release+0x8>)
 800a23e:	f000 b982 	b.w	800a546 <__retarget_lock_release_recursive>
 800a242:	bf00      	nop
 800a244:	20003d81 	.word	0x20003d81

0800a248 <__sinit>:
 800a248:	b510      	push	{r4, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	f7ff fff0 	bl	800a230 <__sfp_lock_acquire>
 800a250:	6a23      	ldr	r3, [r4, #32]
 800a252:	b11b      	cbz	r3, 800a25c <__sinit+0x14>
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	f7ff bff0 	b.w	800a23c <__sfp_lock_release>
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <__sinit+0x28>)
 800a25e:	6223      	str	r3, [r4, #32]
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <__sinit+0x2c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1f5      	bne.n	800a254 <__sinit+0xc>
 800a268:	f7ff ffc4 	bl	800a1f4 <global_stdio_init.part.0>
 800a26c:	e7f2      	b.n	800a254 <__sinit+0xc>
 800a26e:	bf00      	nop
 800a270:	0800a1b5 	.word	0x0800a1b5
 800a274:	20003d78 	.word	0x20003d78

0800a278 <_fwalk_sglue>:
 800a278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a27c:	4607      	mov	r7, r0
 800a27e:	4688      	mov	r8, r1
 800a280:	4614      	mov	r4, r2
 800a282:	2600      	movs	r6, #0
 800a284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a288:	f1b9 0901 	subs.w	r9, r9, #1
 800a28c:	d505      	bpl.n	800a29a <_fwalk_sglue+0x22>
 800a28e:	6824      	ldr	r4, [r4, #0]
 800a290:	2c00      	cmp	r4, #0
 800a292:	d1f7      	bne.n	800a284 <_fwalk_sglue+0xc>
 800a294:	4630      	mov	r0, r6
 800a296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d907      	bls.n	800a2b0 <_fwalk_sglue+0x38>
 800a2a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	d003      	beq.n	800a2b0 <_fwalk_sglue+0x38>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	47c0      	blx	r8
 800a2ae:	4306      	orrs	r6, r0
 800a2b0:	3568      	adds	r5, #104	; 0x68
 800a2b2:	e7e9      	b.n	800a288 <_fwalk_sglue+0x10>

0800a2b4 <siprintf>:
 800a2b4:	b40e      	push	{r1, r2, r3}
 800a2b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2ba:	b500      	push	{lr}
 800a2bc:	b09c      	sub	sp, #112	; 0x70
 800a2be:	ab1d      	add	r3, sp, #116	; 0x74
 800a2c0:	9002      	str	r0, [sp, #8]
 800a2c2:	9006      	str	r0, [sp, #24]
 800a2c4:	9107      	str	r1, [sp, #28]
 800a2c6:	9104      	str	r1, [sp, #16]
 800a2c8:	4808      	ldr	r0, [pc, #32]	; (800a2ec <siprintf+0x38>)
 800a2ca:	4909      	ldr	r1, [pc, #36]	; (800a2f0 <siprintf+0x3c>)
 800a2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d0:	9105      	str	r1, [sp, #20]
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	a902      	add	r1, sp, #8
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	f002 f932 	bl	800c540 <_svfiprintf_r>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	9b02      	ldr	r3, [sp, #8]
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	b01c      	add	sp, #112	; 0x70
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	200001d4 	.word	0x200001d4
 800a2f0:	ffff0208 	.word	0xffff0208

0800a2f4 <__sread>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	f000 f8d4 	bl	800a4a8 <_read_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	bfab      	itete	ge
 800a304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a306:	89a3      	ldrhlt	r3, [r4, #12]
 800a308:	181b      	addge	r3, r3, r0
 800a30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30e:	bfac      	ite	ge
 800a310:	6563      	strge	r3, [r4, #84]	; 0x54
 800a312:	81a3      	strhlt	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__swrite>:
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	461f      	mov	r7, r3
 800a31c:	898b      	ldrh	r3, [r1, #12]
 800a31e:	4605      	mov	r5, r0
 800a320:	05db      	lsls	r3, r3, #23
 800a322:	460c      	mov	r4, r1
 800a324:	4616      	mov	r6, r2
 800a326:	d505      	bpl.n	800a334 <__swrite+0x1e>
 800a328:	2302      	movs	r3, #2
 800a32a:	2200      	movs	r2, #0
 800a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a330:	f000 f8a8 	bl	800a484 <_lseek_r>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	4632      	mov	r2, r6
 800a338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	4628      	mov	r0, r5
 800a340:	463b      	mov	r3, r7
 800a342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	f000 b8bf 	b.w	800a4cc <_write_r>

0800a34e <__sseek>:
 800a34e:	b510      	push	{r4, lr}
 800a350:	460c      	mov	r4, r1
 800a352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a356:	f000 f895 	bl	800a484 <_lseek_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	bf15      	itete	ne
 800a360:	6560      	strne	r0, [r4, #84]	; 0x54
 800a362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a36a:	81a3      	strheq	r3, [r4, #12]
 800a36c:	bf18      	it	ne
 800a36e:	81a3      	strhne	r3, [r4, #12]
 800a370:	bd10      	pop	{r4, pc}

0800a372 <__sclose>:
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 b81f 	b.w	800a3b8 <_close_r>

0800a37a <memset>:
 800a37a:	4603      	mov	r3, r0
 800a37c:	4402      	add	r2, r0
 800a37e:	4293      	cmp	r3, r2
 800a380:	d100      	bne.n	800a384 <memset+0xa>
 800a382:	4770      	bx	lr
 800a384:	f803 1b01 	strb.w	r1, [r3], #1
 800a388:	e7f9      	b.n	800a37e <memset+0x4>

0800a38a <strncmp>:
 800a38a:	b510      	push	{r4, lr}
 800a38c:	b16a      	cbz	r2, 800a3aa <strncmp+0x20>
 800a38e:	3901      	subs	r1, #1
 800a390:	1884      	adds	r4, r0, r2
 800a392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a396:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d103      	bne.n	800a3a6 <strncmp+0x1c>
 800a39e:	42a0      	cmp	r0, r4
 800a3a0:	d001      	beq.n	800a3a6 <strncmp+0x1c>
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	d1f5      	bne.n	800a392 <strncmp+0x8>
 800a3a6:	1ad0      	subs	r0, r2, r3
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	e7fc      	b.n	800a3a8 <strncmp+0x1e>
	...

0800a3b0 <_localeconv_r>:
 800a3b0:	4800      	ldr	r0, [pc, #0]	; (800a3b4 <_localeconv_r+0x4>)
 800a3b2:	4770      	bx	lr
 800a3b4:	2000010c 	.word	0x2000010c

0800a3b8 <_close_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4d05      	ldr	r5, [pc, #20]	; (800a3d4 <_close_r+0x1c>)
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7f8 f9a4 	bl	8002710 <_close>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_close_r+0x1a>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_close_r+0x1a>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20003d7c 	.word	0x20003d7c

0800a3d8 <_reclaim_reent>:
 800a3d8:	4b29      	ldr	r3, [pc, #164]	; (800a480 <_reclaim_reent+0xa8>)
 800a3da:	b570      	push	{r4, r5, r6, lr}
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	d04b      	beq.n	800a47c <_reclaim_reent+0xa4>
 800a3e4:	69c3      	ldr	r3, [r0, #28]
 800a3e6:	b143      	cbz	r3, 800a3fa <_reclaim_reent+0x22>
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d144      	bne.n	800a478 <_reclaim_reent+0xa0>
 800a3ee:	69e3      	ldr	r3, [r4, #28]
 800a3f0:	6819      	ldr	r1, [r3, #0]
 800a3f2:	b111      	cbz	r1, 800a3fa <_reclaim_reent+0x22>
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 ff37 	bl	800b268 <_free_r>
 800a3fa:	6961      	ldr	r1, [r4, #20]
 800a3fc:	b111      	cbz	r1, 800a404 <_reclaim_reent+0x2c>
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 ff32 	bl	800b268 <_free_r>
 800a404:	69e1      	ldr	r1, [r4, #28]
 800a406:	b111      	cbz	r1, 800a40e <_reclaim_reent+0x36>
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 ff2d 	bl	800b268 <_free_r>
 800a40e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a410:	b111      	cbz	r1, 800a418 <_reclaim_reent+0x40>
 800a412:	4620      	mov	r0, r4
 800a414:	f000 ff28 	bl	800b268 <_free_r>
 800a418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a41a:	b111      	cbz	r1, 800a422 <_reclaim_reent+0x4a>
 800a41c:	4620      	mov	r0, r4
 800a41e:	f000 ff23 	bl	800b268 <_free_r>
 800a422:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a424:	b111      	cbz	r1, 800a42c <_reclaim_reent+0x54>
 800a426:	4620      	mov	r0, r4
 800a428:	f000 ff1e 	bl	800b268 <_free_r>
 800a42c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a42e:	b111      	cbz	r1, 800a436 <_reclaim_reent+0x5e>
 800a430:	4620      	mov	r0, r4
 800a432:	f000 ff19 	bl	800b268 <_free_r>
 800a436:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a438:	b111      	cbz	r1, 800a440 <_reclaim_reent+0x68>
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 ff14 	bl	800b268 <_free_r>
 800a440:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a442:	b111      	cbz	r1, 800a44a <_reclaim_reent+0x72>
 800a444:	4620      	mov	r0, r4
 800a446:	f000 ff0f 	bl	800b268 <_free_r>
 800a44a:	6a23      	ldr	r3, [r4, #32]
 800a44c:	b1b3      	cbz	r3, 800a47c <_reclaim_reent+0xa4>
 800a44e:	4620      	mov	r0, r4
 800a450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a454:	4718      	bx	r3
 800a456:	5949      	ldr	r1, [r1, r5]
 800a458:	b941      	cbnz	r1, 800a46c <_reclaim_reent+0x94>
 800a45a:	3504      	adds	r5, #4
 800a45c:	69e3      	ldr	r3, [r4, #28]
 800a45e:	2d80      	cmp	r5, #128	; 0x80
 800a460:	68d9      	ldr	r1, [r3, #12]
 800a462:	d1f8      	bne.n	800a456 <_reclaim_reent+0x7e>
 800a464:	4620      	mov	r0, r4
 800a466:	f000 feff 	bl	800b268 <_free_r>
 800a46a:	e7c0      	b.n	800a3ee <_reclaim_reent+0x16>
 800a46c:	680e      	ldr	r6, [r1, #0]
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 fefa 	bl	800b268 <_free_r>
 800a474:	4631      	mov	r1, r6
 800a476:	e7ef      	b.n	800a458 <_reclaim_reent+0x80>
 800a478:	2500      	movs	r5, #0
 800a47a:	e7ef      	b.n	800a45c <_reclaim_reent+0x84>
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	bf00      	nop
 800a480:	200001d4 	.word	0x200001d4

0800a484 <_lseek_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	4611      	mov	r1, r2
 800a48c:	2200      	movs	r2, #0
 800a48e:	4d05      	ldr	r5, [pc, #20]	; (800a4a4 <_lseek_r+0x20>)
 800a490:	602a      	str	r2, [r5, #0]
 800a492:	461a      	mov	r2, r3
 800a494:	f7f8 f960 	bl	8002758 <_lseek>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d102      	bne.n	800a4a2 <_lseek_r+0x1e>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b103      	cbz	r3, 800a4a2 <_lseek_r+0x1e>
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	20003d7c 	.word	0x20003d7c

0800a4a8 <_read_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4d05      	ldr	r5, [pc, #20]	; (800a4c8 <_read_r+0x20>)
 800a4b4:	602a      	str	r2, [r5, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f7f8 f8f1 	bl	800269e <_read>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_read_r+0x1e>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_read_r+0x1e>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	20003d7c 	.word	0x20003d7c

0800a4cc <_write_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4d05      	ldr	r5, [pc, #20]	; (800a4ec <_write_r+0x20>)
 800a4d8:	602a      	str	r2, [r5, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f7f8 f8fc 	bl	80026d8 <_write>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_write_r+0x1e>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_write_r+0x1e>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20003d7c 	.word	0x20003d7c

0800a4f0 <__errno>:
 800a4f0:	4b01      	ldr	r3, [pc, #4]	; (800a4f8 <__errno+0x8>)
 800a4f2:	6818      	ldr	r0, [r3, #0]
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	200001d4 	.word	0x200001d4

0800a4fc <__libc_init_array>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	2600      	movs	r6, #0
 800a500:	4d0c      	ldr	r5, [pc, #48]	; (800a534 <__libc_init_array+0x38>)
 800a502:	4c0d      	ldr	r4, [pc, #52]	; (800a538 <__libc_init_array+0x3c>)
 800a504:	1b64      	subs	r4, r4, r5
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	42a6      	cmp	r6, r4
 800a50a:	d109      	bne.n	800a520 <__libc_init_array+0x24>
 800a50c:	f002 fd0c 	bl	800cf28 <_init>
 800a510:	2600      	movs	r6, #0
 800a512:	4d0a      	ldr	r5, [pc, #40]	; (800a53c <__libc_init_array+0x40>)
 800a514:	4c0a      	ldr	r4, [pc, #40]	; (800a540 <__libc_init_array+0x44>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	42a6      	cmp	r6, r4
 800a51c:	d105      	bne.n	800a52a <__libc_init_array+0x2e>
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	f855 3b04 	ldr.w	r3, [r5], #4
 800a524:	4798      	blx	r3
 800a526:	3601      	adds	r6, #1
 800a528:	e7ee      	b.n	800a508 <__libc_init_array+0xc>
 800a52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a52e:	4798      	blx	r3
 800a530:	3601      	adds	r6, #1
 800a532:	e7f2      	b.n	800a51a <__libc_init_array+0x1e>
 800a534:	0800d53c 	.word	0x0800d53c
 800a538:	0800d53c 	.word	0x0800d53c
 800a53c:	0800d53c 	.word	0x0800d53c
 800a540:	0800d540 	.word	0x0800d540

0800a544 <__retarget_lock_acquire_recursive>:
 800a544:	4770      	bx	lr

0800a546 <__retarget_lock_release_recursive>:
 800a546:	4770      	bx	lr

0800a548 <memchr>:
 800a548:	4603      	mov	r3, r0
 800a54a:	b510      	push	{r4, lr}
 800a54c:	b2c9      	uxtb	r1, r1
 800a54e:	4402      	add	r2, r0
 800a550:	4293      	cmp	r3, r2
 800a552:	4618      	mov	r0, r3
 800a554:	d101      	bne.n	800a55a <memchr+0x12>
 800a556:	2000      	movs	r0, #0
 800a558:	e003      	b.n	800a562 <memchr+0x1a>
 800a55a:	7804      	ldrb	r4, [r0, #0]
 800a55c:	3301      	adds	r3, #1
 800a55e:	428c      	cmp	r4, r1
 800a560:	d1f6      	bne.n	800a550 <memchr+0x8>
 800a562:	bd10      	pop	{r4, pc}

0800a564 <memcpy>:
 800a564:	440a      	add	r2, r1
 800a566:	4291      	cmp	r1, r2
 800a568:	f100 33ff 	add.w	r3, r0, #4294967295
 800a56c:	d100      	bne.n	800a570 <memcpy+0xc>
 800a56e:	4770      	bx	lr
 800a570:	b510      	push	{r4, lr}
 800a572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a576:	4291      	cmp	r1, r2
 800a578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a57c:	d1f9      	bne.n	800a572 <memcpy+0xe>
 800a57e:	bd10      	pop	{r4, pc}

0800a580 <nan>:
 800a580:	2000      	movs	r0, #0
 800a582:	4901      	ldr	r1, [pc, #4]	; (800a588 <nan+0x8>)
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	7ff80000 	.word	0x7ff80000

0800a58c <quorem>:
 800a58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	6903      	ldr	r3, [r0, #16]
 800a592:	690c      	ldr	r4, [r1, #16]
 800a594:	4607      	mov	r7, r0
 800a596:	42a3      	cmp	r3, r4
 800a598:	db7f      	blt.n	800a69a <quorem+0x10e>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	f100 0514 	add.w	r5, r0, #20
 800a5a0:	f101 0814 	add.w	r8, r1, #20
 800a5a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5c2:	d331      	bcc.n	800a628 <quorem+0x9c>
 800a5c4:	f04f 0e00 	mov.w	lr, #0
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	46ac      	mov	ip, r5
 800a5cc:	46f2      	mov	sl, lr
 800a5ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5d2:	b293      	uxth	r3, r2
 800a5d4:	fb06 e303 	mla	r3, r6, r3, lr
 800a5d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5dc:	0c1a      	lsrs	r2, r3, #16
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	fb06 220e 	mla	r2, r6, lr, r2
 800a5e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e8:	f8dc a000 	ldr.w	sl, [ip]
 800a5ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5f0:	fa1f fa8a 	uxth.w	sl, sl
 800a5f4:	4453      	add	r3, sl
 800a5f6:	f8dc a000 	ldr.w	sl, [ip]
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a604:	b29b      	uxth	r3, r3
 800a606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a60a:	4581      	cmp	r9, r0
 800a60c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a610:	f84c 3b04 	str.w	r3, [ip], #4
 800a614:	d2db      	bcs.n	800a5ce <quorem+0x42>
 800a616:	f855 300b 	ldr.w	r3, [r5, fp]
 800a61a:	b92b      	cbnz	r3, 800a628 <quorem+0x9c>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	3b04      	subs	r3, #4
 800a620:	429d      	cmp	r5, r3
 800a622:	461a      	mov	r2, r3
 800a624:	d32d      	bcc.n	800a682 <quorem+0xf6>
 800a626:	613c      	str	r4, [r7, #16]
 800a628:	4638      	mov	r0, r7
 800a62a:	f001 fd49 	bl	800c0c0 <__mcmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	db23      	blt.n	800a67a <quorem+0xee>
 800a632:	4629      	mov	r1, r5
 800a634:	2000      	movs	r0, #0
 800a636:	3601      	adds	r6, #1
 800a638:	f858 2b04 	ldr.w	r2, [r8], #4
 800a63c:	f8d1 c000 	ldr.w	ip, [r1]
 800a640:	b293      	uxth	r3, r2
 800a642:	1ac3      	subs	r3, r0, r3
 800a644:	0c12      	lsrs	r2, r2, #16
 800a646:	fa1f f08c 	uxth.w	r0, ip
 800a64a:	4403      	add	r3, r0
 800a64c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a654:	b29b      	uxth	r3, r3
 800a656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a65a:	45c1      	cmp	r9, r8
 800a65c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a660:	f841 3b04 	str.w	r3, [r1], #4
 800a664:	d2e8      	bcs.n	800a638 <quorem+0xac>
 800a666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a66e:	b922      	cbnz	r2, 800a67a <quorem+0xee>
 800a670:	3b04      	subs	r3, #4
 800a672:	429d      	cmp	r5, r3
 800a674:	461a      	mov	r2, r3
 800a676:	d30a      	bcc.n	800a68e <quorem+0x102>
 800a678:	613c      	str	r4, [r7, #16]
 800a67a:	4630      	mov	r0, r6
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	3b04      	subs	r3, #4
 800a686:	2a00      	cmp	r2, #0
 800a688:	d1cd      	bne.n	800a626 <quorem+0x9a>
 800a68a:	3c01      	subs	r4, #1
 800a68c:	e7c8      	b.n	800a620 <quorem+0x94>
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	3b04      	subs	r3, #4
 800a692:	2a00      	cmp	r2, #0
 800a694:	d1f0      	bne.n	800a678 <quorem+0xec>
 800a696:	3c01      	subs	r4, #1
 800a698:	e7eb      	b.n	800a672 <quorem+0xe6>
 800a69a:	2000      	movs	r0, #0
 800a69c:	e7ee      	b.n	800a67c <quorem+0xf0>
	...

0800a6a0 <_dtoa_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	4616      	mov	r6, r2
 800a6a6:	461f      	mov	r7, r3
 800a6a8:	69c4      	ldr	r4, [r0, #28]
 800a6aa:	b099      	sub	sp, #100	; 0x64
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a6b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a6b6:	b974      	cbnz	r4, 800a6d6 <_dtoa_r+0x36>
 800a6b8:	2010      	movs	r0, #16
 800a6ba:	f001 f977 	bl	800b9ac <malloc>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	61e8      	str	r0, [r5, #28]
 800a6c2:	b920      	cbnz	r0, 800a6ce <_dtoa_r+0x2e>
 800a6c4:	21ef      	movs	r1, #239	; 0xef
 800a6c6:	4bac      	ldr	r3, [pc, #688]	; (800a978 <_dtoa_r+0x2d8>)
 800a6c8:	48ac      	ldr	r0, [pc, #688]	; (800a97c <_dtoa_r+0x2dc>)
 800a6ca:	f002 f90b 	bl	800c8e4 <__assert_func>
 800a6ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6d2:	6004      	str	r4, [r0, #0]
 800a6d4:	60c4      	str	r4, [r0, #12]
 800a6d6:	69eb      	ldr	r3, [r5, #28]
 800a6d8:	6819      	ldr	r1, [r3, #0]
 800a6da:	b151      	cbz	r1, 800a6f2 <_dtoa_r+0x52>
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4093      	lsls	r3, r2
 800a6e2:	604a      	str	r2, [r1, #4]
 800a6e4:	608b      	str	r3, [r1, #8]
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f001 fa66 	bl	800bbb8 <_Bfree>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	69eb      	ldr	r3, [r5, #28]
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	1e3b      	subs	r3, r7, #0
 800a6f4:	bfaf      	iteee	ge
 800a6f6:	2300      	movge	r3, #0
 800a6f8:	2201      	movlt	r2, #1
 800a6fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6fe:	9305      	strlt	r3, [sp, #20]
 800a700:	bfa8      	it	ge
 800a702:	f8c8 3000 	strge.w	r3, [r8]
 800a706:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a70a:	4b9d      	ldr	r3, [pc, #628]	; (800a980 <_dtoa_r+0x2e0>)
 800a70c:	bfb8      	it	lt
 800a70e:	f8c8 2000 	strlt.w	r2, [r8]
 800a712:	ea33 0309 	bics.w	r3, r3, r9
 800a716:	d119      	bne.n	800a74c <_dtoa_r+0xac>
 800a718:	f242 730f 	movw	r3, #9999	; 0x270f
 800a71c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a724:	4333      	orrs	r3, r6
 800a726:	f000 8589 	beq.w	800b23c <_dtoa_r+0xb9c>
 800a72a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a72c:	b953      	cbnz	r3, 800a744 <_dtoa_r+0xa4>
 800a72e:	4b95      	ldr	r3, [pc, #596]	; (800a984 <_dtoa_r+0x2e4>)
 800a730:	e023      	b.n	800a77a <_dtoa_r+0xda>
 800a732:	4b95      	ldr	r3, [pc, #596]	; (800a988 <_dtoa_r+0x2e8>)
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	3308      	adds	r3, #8
 800a738:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	9803      	ldr	r0, [sp, #12]
 800a73e:	b019      	add	sp, #100	; 0x64
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	4b8f      	ldr	r3, [pc, #572]	; (800a984 <_dtoa_r+0x2e4>)
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	3303      	adds	r3, #3
 800a74a:	e7f5      	b.n	800a738 <_dtoa_r+0x98>
 800a74c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a750:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a758:	2200      	movs	r2, #0
 800a75a:	2300      	movs	r3, #0
 800a75c:	f7f6 f924 	bl	80009a8 <__aeabi_dcmpeq>
 800a760:	4680      	mov	r8, r0
 800a762:	b160      	cbz	r0, 800a77e <_dtoa_r+0xde>
 800a764:	2301      	movs	r3, #1
 800a766:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 8562 	beq.w	800b236 <_dtoa_r+0xb96>
 800a772:	4b86      	ldr	r3, [pc, #536]	; (800a98c <_dtoa_r+0x2ec>)
 800a774:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	9303      	str	r3, [sp, #12]
 800a77c:	e7de      	b.n	800a73c <_dtoa_r+0x9c>
 800a77e:	ab16      	add	r3, sp, #88	; 0x58
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	ab17      	add	r3, sp, #92	; 0x5c
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	4628      	mov	r0, r5
 800a788:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a78c:	f001 fda8 	bl	800c2e0 <__d2b>
 800a790:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a794:	4682      	mov	sl, r0
 800a796:	2c00      	cmp	r4, #0
 800a798:	d07e      	beq.n	800a898 <_dtoa_r+0x1f8>
 800a79a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a7ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4b75      	ldr	r3, [pc, #468]	; (800a990 <_dtoa_r+0x2f0>)
 800a7ba:	f7f5 fcd5 	bl	8000168 <__aeabi_dsub>
 800a7be:	a368      	add	r3, pc, #416	; (adr r3, 800a960 <_dtoa_r+0x2c0>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 fe88 	bl	80004d8 <__aeabi_dmul>
 800a7c8:	a367      	add	r3, pc, #412	; (adr r3, 800a968 <_dtoa_r+0x2c8>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fccd 	bl	800016c <__adddf3>
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	f7f5 fe14 	bl	8000404 <__aeabi_i2d>
 800a7dc:	a364      	add	r3, pc, #400	; (adr r3, 800a970 <_dtoa_r+0x2d0>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fe79 	bl	80004d8 <__aeabi_dmul>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f5 fcbd 	bl	800016c <__adddf3>
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	f7f6 f91f 	bl	8000a38 <__aeabi_d2iz>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4683      	mov	fp, r0
 800a7fe:	2300      	movs	r3, #0
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f6 f8da 	bl	80009bc <__aeabi_dcmplt>
 800a808:	b148      	cbz	r0, 800a81e <_dtoa_r+0x17e>
 800a80a:	4658      	mov	r0, fp
 800a80c:	f7f5 fdfa 	bl	8000404 <__aeabi_i2d>
 800a810:	4632      	mov	r2, r6
 800a812:	463b      	mov	r3, r7
 800a814:	f7f6 f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 800a818:	b908      	cbnz	r0, 800a81e <_dtoa_r+0x17e>
 800a81a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a81e:	f1bb 0f16 	cmp.w	fp, #22
 800a822:	d857      	bhi.n	800a8d4 <_dtoa_r+0x234>
 800a824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a828:	4b5a      	ldr	r3, [pc, #360]	; (800a994 <_dtoa_r+0x2f4>)
 800a82a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f6 f8c3 	bl	80009bc <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d04e      	beq.n	800a8d8 <_dtoa_r+0x238>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a840:	930f      	str	r3, [sp, #60]	; 0x3c
 800a842:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a844:	1b1b      	subs	r3, r3, r4
 800a846:	1e5a      	subs	r2, r3, #1
 800a848:	bf46      	itte	mi
 800a84a:	f1c3 0901 	rsbmi	r9, r3, #1
 800a84e:	2300      	movmi	r3, #0
 800a850:	f04f 0900 	movpl.w	r9, #0
 800a854:	9209      	str	r2, [sp, #36]	; 0x24
 800a856:	bf48      	it	mi
 800a858:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a85a:	f1bb 0f00 	cmp.w	fp, #0
 800a85e:	db3d      	blt.n	800a8dc <_dtoa_r+0x23c>
 800a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a862:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a866:	445b      	add	r3, fp
 800a868:	9309      	str	r3, [sp, #36]	; 0x24
 800a86a:	2300      	movs	r3, #0
 800a86c:	930a      	str	r3, [sp, #40]	; 0x28
 800a86e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a870:	2b09      	cmp	r3, #9
 800a872:	d867      	bhi.n	800a944 <_dtoa_r+0x2a4>
 800a874:	2b05      	cmp	r3, #5
 800a876:	bfc4      	itt	gt
 800a878:	3b04      	subgt	r3, #4
 800a87a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a87c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a87e:	bfc8      	it	gt
 800a880:	2400      	movgt	r4, #0
 800a882:	f1a3 0302 	sub.w	r3, r3, #2
 800a886:	bfd8      	it	le
 800a888:	2401      	movle	r4, #1
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f200 8086 	bhi.w	800a99c <_dtoa_r+0x2fc>
 800a890:	e8df f003 	tbb	[pc, r3]
 800a894:	5637392c 	.word	0x5637392c
 800a898:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a89c:	441c      	add	r4, r3
 800a89e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	bfc1      	itttt	gt
 800a8a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8aa:	fa09 f903 	lslgt.w	r9, r9, r3
 800a8ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a8b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a8b6:	bfd6      	itet	le
 800a8b8:	f1c3 0320 	rsble	r3, r3, #32
 800a8bc:	ea49 0003 	orrgt.w	r0, r9, r3
 800a8c0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8c4:	f7f5 fd8e 	bl	80003e4 <__aeabi_ui2d>
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a8ce:	3c01      	subs	r4, #1
 800a8d0:	9213      	str	r2, [sp, #76]	; 0x4c
 800a8d2:	e76f      	b.n	800a7b4 <_dtoa_r+0x114>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e7b3      	b.n	800a840 <_dtoa_r+0x1a0>
 800a8d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a8da:	e7b2      	b.n	800a842 <_dtoa_r+0x1a2>
 800a8dc:	f1cb 0300 	rsb	r3, fp, #0
 800a8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	eba9 090b 	sub.w	r9, r9, fp
 800a8e8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ea:	e7c0      	b.n	800a86e <_dtoa_r+0x1ce>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dc55      	bgt.n	800a9a2 <_dtoa_r+0x302>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	9306      	str	r3, [sp, #24]
 800a8fc:	9308      	str	r3, [sp, #32]
 800a8fe:	9223      	str	r2, [sp, #140]	; 0x8c
 800a900:	e00b      	b.n	800a91a <_dtoa_r+0x27a>
 800a902:	2301      	movs	r3, #1
 800a904:	e7f3      	b.n	800a8ee <_dtoa_r+0x24e>
 800a906:	2300      	movs	r3, #0
 800a908:	930b      	str	r3, [sp, #44]	; 0x2c
 800a90a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a90c:	445b      	add	r3, fp
 800a90e:	9306      	str	r3, [sp, #24]
 800a910:	3301      	adds	r3, #1
 800a912:	2b01      	cmp	r3, #1
 800a914:	9308      	str	r3, [sp, #32]
 800a916:	bfb8      	it	lt
 800a918:	2301      	movlt	r3, #1
 800a91a:	2100      	movs	r1, #0
 800a91c:	2204      	movs	r2, #4
 800a91e:	69e8      	ldr	r0, [r5, #28]
 800a920:	f102 0614 	add.w	r6, r2, #20
 800a924:	429e      	cmp	r6, r3
 800a926:	d940      	bls.n	800a9aa <_dtoa_r+0x30a>
 800a928:	6041      	str	r1, [r0, #4]
 800a92a:	4628      	mov	r0, r5
 800a92c:	f001 f904 	bl	800bb38 <_Balloc>
 800a930:	9003      	str	r0, [sp, #12]
 800a932:	2800      	cmp	r0, #0
 800a934:	d13c      	bne.n	800a9b0 <_dtoa_r+0x310>
 800a936:	4602      	mov	r2, r0
 800a938:	f240 11af 	movw	r1, #431	; 0x1af
 800a93c:	4b16      	ldr	r3, [pc, #88]	; (800a998 <_dtoa_r+0x2f8>)
 800a93e:	e6c3      	b.n	800a6c8 <_dtoa_r+0x28>
 800a940:	2301      	movs	r3, #1
 800a942:	e7e1      	b.n	800a908 <_dtoa_r+0x268>
 800a944:	2401      	movs	r4, #1
 800a946:	2300      	movs	r3, #0
 800a948:	940b      	str	r4, [sp, #44]	; 0x2c
 800a94a:	9322      	str	r3, [sp, #136]	; 0x88
 800a94c:	f04f 33ff 	mov.w	r3, #4294967295
 800a950:	2200      	movs	r2, #0
 800a952:	9306      	str	r3, [sp, #24]
 800a954:	9308      	str	r3, [sp, #32]
 800a956:	2312      	movs	r3, #18
 800a958:	e7d1      	b.n	800a8fe <_dtoa_r+0x25e>
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w
 800a960:	636f4361 	.word	0x636f4361
 800a964:	3fd287a7 	.word	0x3fd287a7
 800a968:	8b60c8b3 	.word	0x8b60c8b3
 800a96c:	3fc68a28 	.word	0x3fc68a28
 800a970:	509f79fb 	.word	0x509f79fb
 800a974:	3fd34413 	.word	0x3fd34413
 800a978:	0800d1b1 	.word	0x0800d1b1
 800a97c:	0800d1c8 	.word	0x0800d1c8
 800a980:	7ff00000 	.word	0x7ff00000
 800a984:	0800d1ad 	.word	0x0800d1ad
 800a988:	0800d1a4 	.word	0x0800d1a4
 800a98c:	0800d179 	.word	0x0800d179
 800a990:	3ff80000 	.word	0x3ff80000
 800a994:	0800d318 	.word	0x0800d318
 800a998:	0800d220 	.word	0x0800d220
 800a99c:	2301      	movs	r3, #1
 800a99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a0:	e7d4      	b.n	800a94c <_dtoa_r+0x2ac>
 800a9a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9a4:	9306      	str	r3, [sp, #24]
 800a9a6:	9308      	str	r3, [sp, #32]
 800a9a8:	e7b7      	b.n	800a91a <_dtoa_r+0x27a>
 800a9aa:	3101      	adds	r1, #1
 800a9ac:	0052      	lsls	r2, r2, #1
 800a9ae:	e7b7      	b.n	800a920 <_dtoa_r+0x280>
 800a9b0:	69eb      	ldr	r3, [r5, #28]
 800a9b2:	9a03      	ldr	r2, [sp, #12]
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	2b0e      	cmp	r3, #14
 800a9ba:	f200 80a8 	bhi.w	800ab0e <_dtoa_r+0x46e>
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	f000 80a5 	beq.w	800ab0e <_dtoa_r+0x46e>
 800a9c4:	f1bb 0f00 	cmp.w	fp, #0
 800a9c8:	dd34      	ble.n	800aa34 <_dtoa_r+0x394>
 800a9ca:	4b9a      	ldr	r3, [pc, #616]	; (800ac34 <_dtoa_r+0x594>)
 800a9cc:	f00b 020f 	and.w	r2, fp, #15
 800a9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a9d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a9e4:	d016      	beq.n	800aa14 <_dtoa_r+0x374>
 800a9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9ea:	4b93      	ldr	r3, [pc, #588]	; (800ac38 <_dtoa_r+0x598>)
 800a9ec:	2703      	movs	r7, #3
 800a9ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9f2:	f7f5 fe9b 	bl	800072c <__aeabi_ddiv>
 800a9f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9fa:	f004 040f 	and.w	r4, r4, #15
 800a9fe:	4e8e      	ldr	r6, [pc, #568]	; (800ac38 <_dtoa_r+0x598>)
 800aa00:	b954      	cbnz	r4, 800aa18 <_dtoa_r+0x378>
 800aa02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0a:	f7f5 fe8f 	bl	800072c <__aeabi_ddiv>
 800aa0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa12:	e029      	b.n	800aa68 <_dtoa_r+0x3c8>
 800aa14:	2702      	movs	r7, #2
 800aa16:	e7f2      	b.n	800a9fe <_dtoa_r+0x35e>
 800aa18:	07e1      	lsls	r1, r4, #31
 800aa1a:	d508      	bpl.n	800aa2e <_dtoa_r+0x38e>
 800aa1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa20:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa24:	f7f5 fd58 	bl	80004d8 <__aeabi_dmul>
 800aa28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa2c:	3701      	adds	r7, #1
 800aa2e:	1064      	asrs	r4, r4, #1
 800aa30:	3608      	adds	r6, #8
 800aa32:	e7e5      	b.n	800aa00 <_dtoa_r+0x360>
 800aa34:	f000 80a5 	beq.w	800ab82 <_dtoa_r+0x4e2>
 800aa38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa3c:	f1cb 0400 	rsb	r4, fp, #0
 800aa40:	4b7c      	ldr	r3, [pc, #496]	; (800ac34 <_dtoa_r+0x594>)
 800aa42:	f004 020f 	and.w	r2, r4, #15
 800aa46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fd43 	bl	80004d8 <__aeabi_dmul>
 800aa52:	2702      	movs	r7, #2
 800aa54:	2300      	movs	r3, #0
 800aa56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa5a:	4e77      	ldr	r6, [pc, #476]	; (800ac38 <_dtoa_r+0x598>)
 800aa5c:	1124      	asrs	r4, r4, #4
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	f040 8084 	bne.w	800ab6c <_dtoa_r+0x4cc>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1d2      	bne.n	800aa0e <_dtoa_r+0x36e>
 800aa68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8087 	beq.w	800ab86 <_dtoa_r+0x4e6>
 800aa78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4b6f      	ldr	r3, [pc, #444]	; (800ac3c <_dtoa_r+0x59c>)
 800aa80:	f7f5 ff9c 	bl	80009bc <__aeabi_dcmplt>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d07e      	beq.n	800ab86 <_dtoa_r+0x4e6>
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d07b      	beq.n	800ab86 <_dtoa_r+0x4e6>
 800aa8e:	9b06      	ldr	r3, [sp, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dd38      	ble.n	800ab06 <_dtoa_r+0x466>
 800aa94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4b69      	ldr	r3, [pc, #420]	; (800ac40 <_dtoa_r+0x5a0>)
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aaa4:	9c06      	ldr	r4, [sp, #24]
 800aaa6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800aaaa:	3701      	adds	r7, #1
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7f5 fca9 	bl	8000404 <__aeabi_i2d>
 800aab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab6:	f7f5 fd0f 	bl	80004d8 <__aeabi_dmul>
 800aaba:	2200      	movs	r2, #0
 800aabc:	4b61      	ldr	r3, [pc, #388]	; (800ac44 <_dtoa_r+0x5a4>)
 800aabe:	f7f5 fb55 	bl	800016c <__adddf3>
 800aac2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aac6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aaca:	9611      	str	r6, [sp, #68]	; 0x44
 800aacc:	2c00      	cmp	r4, #0
 800aace:	d15d      	bne.n	800ab8c <_dtoa_r+0x4ec>
 800aad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aad4:	2200      	movs	r2, #0
 800aad6:	4b5c      	ldr	r3, [pc, #368]	; (800ac48 <_dtoa_r+0x5a8>)
 800aad8:	f7f5 fb46 	bl	8000168 <__aeabi_dsub>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aae4:	4633      	mov	r3, r6
 800aae6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aae8:	f7f5 ff86 	bl	80009f8 <__aeabi_dcmpgt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f040 8295 	bne.w	800b01c <_dtoa_r+0x97c>
 800aaf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aafc:	f7f5 ff5e 	bl	80009bc <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f040 8289 	bne.w	800b018 <_dtoa_r+0x978>
 800ab06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ab0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f2c0 8151 	blt.w	800adb8 <_dtoa_r+0x718>
 800ab16:	f1bb 0f0e 	cmp.w	fp, #14
 800ab1a:	f300 814d 	bgt.w	800adb8 <_dtoa_r+0x718>
 800ab1e:	4b45      	ldr	r3, [pc, #276]	; (800ac34 <_dtoa_r+0x594>)
 800ab20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f280 80da 	bge.w	800ace8 <_dtoa_r+0x648>
 800ab34:	9b08      	ldr	r3, [sp, #32]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f300 80d6 	bgt.w	800ace8 <_dtoa_r+0x648>
 800ab3c:	f040 826b 	bne.w	800b016 <_dtoa_r+0x976>
 800ab40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab44:	2200      	movs	r2, #0
 800ab46:	4b40      	ldr	r3, [pc, #256]	; (800ac48 <_dtoa_r+0x5a8>)
 800ab48:	f7f5 fcc6 	bl	80004d8 <__aeabi_dmul>
 800ab4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab50:	f7f5 ff48 	bl	80009e4 <__aeabi_dcmpge>
 800ab54:	9c08      	ldr	r4, [sp, #32]
 800ab56:	4626      	mov	r6, r4
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f040 8241 	bne.w	800afe0 <_dtoa_r+0x940>
 800ab5e:	2331      	movs	r3, #49	; 0x31
 800ab60:	9f03      	ldr	r7, [sp, #12]
 800ab62:	f10b 0b01 	add.w	fp, fp, #1
 800ab66:	f807 3b01 	strb.w	r3, [r7], #1
 800ab6a:	e23d      	b.n	800afe8 <_dtoa_r+0x948>
 800ab6c:	07e2      	lsls	r2, r4, #31
 800ab6e:	d505      	bpl.n	800ab7c <_dtoa_r+0x4dc>
 800ab70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab74:	f7f5 fcb0 	bl	80004d8 <__aeabi_dmul>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	3701      	adds	r7, #1
 800ab7c:	1064      	asrs	r4, r4, #1
 800ab7e:	3608      	adds	r6, #8
 800ab80:	e76d      	b.n	800aa5e <_dtoa_r+0x3be>
 800ab82:	2702      	movs	r7, #2
 800ab84:	e770      	b.n	800aa68 <_dtoa_r+0x3c8>
 800ab86:	46d8      	mov	r8, fp
 800ab88:	9c08      	ldr	r4, [sp, #32]
 800ab8a:	e78f      	b.n	800aaac <_dtoa_r+0x40c>
 800ab8c:	9903      	ldr	r1, [sp, #12]
 800ab8e:	4b29      	ldr	r3, [pc, #164]	; (800ac34 <_dtoa_r+0x594>)
 800ab90:	4421      	add	r1, r4
 800ab92:	9112      	str	r1, [sp, #72]	; 0x48
 800ab94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aba2:	2900      	cmp	r1, #0
 800aba4:	d054      	beq.n	800ac50 <_dtoa_r+0x5b0>
 800aba6:	2000      	movs	r0, #0
 800aba8:	4928      	ldr	r1, [pc, #160]	; (800ac4c <_dtoa_r+0x5ac>)
 800abaa:	f7f5 fdbf 	bl	800072c <__aeabi_ddiv>
 800abae:	463b      	mov	r3, r7
 800abb0:	4632      	mov	r2, r6
 800abb2:	f7f5 fad9 	bl	8000168 <__aeabi_dsub>
 800abb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abba:	9f03      	ldr	r7, [sp, #12]
 800abbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc0:	f7f5 ff3a 	bl	8000a38 <__aeabi_d2iz>
 800abc4:	4604      	mov	r4, r0
 800abc6:	f7f5 fc1d 	bl	8000404 <__aeabi_i2d>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abd2:	f7f5 fac9 	bl	8000168 <__aeabi_dsub>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	3430      	adds	r4, #48	; 0x30
 800abdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abe4:	f807 4b01 	strb.w	r4, [r7], #1
 800abe8:	f7f5 fee8 	bl	80009bc <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d173      	bne.n	800acd8 <_dtoa_r+0x638>
 800abf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abf4:	2000      	movs	r0, #0
 800abf6:	4911      	ldr	r1, [pc, #68]	; (800ac3c <_dtoa_r+0x59c>)
 800abf8:	f7f5 fab6 	bl	8000168 <__aeabi_dsub>
 800abfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac00:	f7f5 fedc 	bl	80009bc <__aeabi_dcmplt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f040 80b6 	bne.w	800ad76 <_dtoa_r+0x6d6>
 800ac0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac0c:	429f      	cmp	r7, r3
 800ac0e:	f43f af7a 	beq.w	800ab06 <_dtoa_r+0x466>
 800ac12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac16:	2200      	movs	r2, #0
 800ac18:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <_dtoa_r+0x5a0>)
 800ac1a:	f7f5 fc5d 	bl	80004d8 <__aeabi_dmul>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac28:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <_dtoa_r+0x5a0>)
 800ac2a:	f7f5 fc55 	bl	80004d8 <__aeabi_dmul>
 800ac2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac32:	e7c3      	b.n	800abbc <_dtoa_r+0x51c>
 800ac34:	0800d318 	.word	0x0800d318
 800ac38:	0800d2f0 	.word	0x0800d2f0
 800ac3c:	3ff00000 	.word	0x3ff00000
 800ac40:	40240000 	.word	0x40240000
 800ac44:	401c0000 	.word	0x401c0000
 800ac48:	40140000 	.word	0x40140000
 800ac4c:	3fe00000 	.word	0x3fe00000
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 fc40 	bl	80004d8 <__aeabi_dmul>
 800ac58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac5e:	9c03      	ldr	r4, [sp, #12]
 800ac60:	9314      	str	r3, [sp, #80]	; 0x50
 800ac62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac66:	f7f5 fee7 	bl	8000a38 <__aeabi_d2iz>
 800ac6a:	9015      	str	r0, [sp, #84]	; 0x54
 800ac6c:	f7f5 fbca 	bl	8000404 <__aeabi_i2d>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac78:	f7f5 fa76 	bl	8000168 <__aeabi_dsub>
 800ac7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac7e:	4606      	mov	r6, r0
 800ac80:	3330      	adds	r3, #48	; 0x30
 800ac82:	f804 3b01 	strb.w	r3, [r4], #1
 800ac86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac88:	460f      	mov	r7, r1
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d124      	bne.n	800acdc <_dtoa_r+0x63c>
 800ac92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac96:	4baf      	ldr	r3, [pc, #700]	; (800af54 <_dtoa_r+0x8b4>)
 800ac98:	f7f5 fa68 	bl	800016c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fea8 	bl	80009f8 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d163      	bne.n	800ad74 <_dtoa_r+0x6d4>
 800acac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acb0:	2000      	movs	r0, #0
 800acb2:	49a8      	ldr	r1, [pc, #672]	; (800af54 <_dtoa_r+0x8b4>)
 800acb4:	f7f5 fa58 	bl	8000168 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fe7c 	bl	80009bc <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af1e 	beq.w	800ab06 <_dtoa_r+0x466>
 800acca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800accc:	1e7b      	subs	r3, r7, #1
 800acce:	9314      	str	r3, [sp, #80]	; 0x50
 800acd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800acd4:	2b30      	cmp	r3, #48	; 0x30
 800acd6:	d0f8      	beq.n	800acca <_dtoa_r+0x62a>
 800acd8:	46c3      	mov	fp, r8
 800acda:	e03b      	b.n	800ad54 <_dtoa_r+0x6b4>
 800acdc:	4b9e      	ldr	r3, [pc, #632]	; (800af58 <_dtoa_r+0x8b8>)
 800acde:	f7f5 fbfb 	bl	80004d8 <__aeabi_dmul>
 800ace2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ace6:	e7bc      	b.n	800ac62 <_dtoa_r+0x5c2>
 800ace8:	9f03      	ldr	r7, [sp, #12]
 800acea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800acee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 fd19 	bl	800072c <__aeabi_ddiv>
 800acfa:	f7f5 fe9d 	bl	8000a38 <__aeabi_d2iz>
 800acfe:	4604      	mov	r4, r0
 800ad00:	f7f5 fb80 	bl	8000404 <__aeabi_i2d>
 800ad04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad08:	f7f5 fbe6 	bl	80004d8 <__aeabi_dmul>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fa28 	bl	8000168 <__aeabi_dsub>
 800ad18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ad1c:	f807 6b01 	strb.w	r6, [r7], #1
 800ad20:	9e03      	ldr	r6, [sp, #12]
 800ad22:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ad26:	1bbe      	subs	r6, r7, r6
 800ad28:	45b4      	cmp	ip, r6
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	d136      	bne.n	800ad9e <_dtoa_r+0x6fe>
 800ad30:	f7f5 fa1c 	bl	800016c <__adddf3>
 800ad34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4689      	mov	r9, r1
 800ad3c:	f7f5 fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 800ad40:	bb58      	cbnz	r0, 800ad9a <_dtoa_r+0x6fa>
 800ad42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad46:	4640      	mov	r0, r8
 800ad48:	4649      	mov	r1, r9
 800ad4a:	f7f5 fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 800ad4e:	b108      	cbz	r0, 800ad54 <_dtoa_r+0x6b4>
 800ad50:	07e3      	lsls	r3, r4, #31
 800ad52:	d422      	bmi.n	800ad9a <_dtoa_r+0x6fa>
 800ad54:	4651      	mov	r1, sl
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 ff2e 	bl	800bbb8 <_Bfree>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad60:	703b      	strb	r3, [r7, #0]
 800ad62:	f10b 0301 	add.w	r3, fp, #1
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f43f ace6 	beq.w	800a73c <_dtoa_r+0x9c>
 800ad70:	601f      	str	r7, [r3, #0]
 800ad72:	e4e3      	b.n	800a73c <_dtoa_r+0x9c>
 800ad74:	4627      	mov	r7, r4
 800ad76:	463b      	mov	r3, r7
 800ad78:	461f      	mov	r7, r3
 800ad7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad7e:	2a39      	cmp	r2, #57	; 0x39
 800ad80:	d107      	bne.n	800ad92 <_dtoa_r+0x6f2>
 800ad82:	9a03      	ldr	r2, [sp, #12]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d1f7      	bne.n	800ad78 <_dtoa_r+0x6d8>
 800ad88:	2230      	movs	r2, #48	; 0x30
 800ad8a:	9903      	ldr	r1, [sp, #12]
 800ad8c:	f108 0801 	add.w	r8, r8, #1
 800ad90:	700a      	strb	r2, [r1, #0]
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	3201      	adds	r2, #1
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e79e      	b.n	800acd8 <_dtoa_r+0x638>
 800ad9a:	46d8      	mov	r8, fp
 800ad9c:	e7eb      	b.n	800ad76 <_dtoa_r+0x6d6>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4b6d      	ldr	r3, [pc, #436]	; (800af58 <_dtoa_r+0x8b8>)
 800ada2:	f7f5 fb99 	bl	80004d8 <__aeabi_dmul>
 800ada6:	2200      	movs	r2, #0
 800ada8:	2300      	movs	r3, #0
 800adaa:	4680      	mov	r8, r0
 800adac:	4689      	mov	r9, r1
 800adae:	f7f5 fdfb 	bl	80009a8 <__aeabi_dcmpeq>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d09b      	beq.n	800acee <_dtoa_r+0x64e>
 800adb6:	e7cd      	b.n	800ad54 <_dtoa_r+0x6b4>
 800adb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adba:	2a00      	cmp	r2, #0
 800adbc:	f000 80c4 	beq.w	800af48 <_dtoa_r+0x8a8>
 800adc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adc2:	2a01      	cmp	r2, #1
 800adc4:	f300 80a8 	bgt.w	800af18 <_dtoa_r+0x878>
 800adc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adca:	2a00      	cmp	r2, #0
 800adcc:	f000 80a0 	beq.w	800af10 <_dtoa_r+0x870>
 800add0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800add4:	464f      	mov	r7, r9
 800add6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800add8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adda:	2101      	movs	r1, #1
 800addc:	441a      	add	r2, r3
 800adde:	4628      	mov	r0, r5
 800ade0:	4499      	add	r9, r3
 800ade2:	9209      	str	r2, [sp, #36]	; 0x24
 800ade4:	f000 ffe8 	bl	800bdb8 <__i2b>
 800ade8:	4606      	mov	r6, r0
 800adea:	b15f      	cbz	r7, 800ae04 <_dtoa_r+0x764>
 800adec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dd08      	ble.n	800ae04 <_dtoa_r+0x764>
 800adf2:	42bb      	cmp	r3, r7
 800adf4:	bfa8      	it	ge
 800adf6:	463b      	movge	r3, r7
 800adf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfa:	eba9 0903 	sub.w	r9, r9, r3
 800adfe:	1aff      	subs	r7, r7, r3
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	9309      	str	r3, [sp, #36]	; 0x24
 800ae04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae06:	b1f3      	cbz	r3, 800ae46 <_dtoa_r+0x7a6>
 800ae08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80a0 	beq.w	800af50 <_dtoa_r+0x8b0>
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	dd10      	ble.n	800ae36 <_dtoa_r+0x796>
 800ae14:	4631      	mov	r1, r6
 800ae16:	4622      	mov	r2, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f001 f88b 	bl	800bf34 <__pow5mult>
 800ae1e:	4652      	mov	r2, sl
 800ae20:	4601      	mov	r1, r0
 800ae22:	4606      	mov	r6, r0
 800ae24:	4628      	mov	r0, r5
 800ae26:	f000 ffdd 	bl	800bde4 <__multiply>
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	4651      	mov	r1, sl
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fec2 	bl	800bbb8 <_Bfree>
 800ae34:	46c2      	mov	sl, r8
 800ae36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae38:	1b1a      	subs	r2, r3, r4
 800ae3a:	d004      	beq.n	800ae46 <_dtoa_r+0x7a6>
 800ae3c:	4651      	mov	r1, sl
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f001 f878 	bl	800bf34 <__pow5mult>
 800ae44:	4682      	mov	sl, r0
 800ae46:	2101      	movs	r1, #1
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 ffb5 	bl	800bdb8 <__i2b>
 800ae4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae50:	4604      	mov	r4, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f340 8082 	ble.w	800af5c <_dtoa_r+0x8bc>
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f001 f869 	bl	800bf34 <__pow5mult>
 800ae62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae64:	4604      	mov	r4, r0
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	dd7b      	ble.n	800af62 <_dtoa_r+0x8c2>
 800ae6a:	f04f 0800 	mov.w	r8, #0
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae74:	6918      	ldr	r0, [r3, #16]
 800ae76:	f000 ff51 	bl	800bd1c <__hi0bits>
 800ae7a:	f1c0 0020 	rsb	r0, r0, #32
 800ae7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae80:	4418      	add	r0, r3
 800ae82:	f010 001f 	ands.w	r0, r0, #31
 800ae86:	f000 8092 	beq.w	800afae <_dtoa_r+0x90e>
 800ae8a:	f1c0 0320 	rsb	r3, r0, #32
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	f340 8085 	ble.w	800af9e <_dtoa_r+0x8fe>
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	f1c0 001c 	rsb	r0, r0, #28
 800ae9a:	4403      	add	r3, r0
 800ae9c:	4481      	add	r9, r0
 800ae9e:	4407      	add	r7, r0
 800aea0:	9309      	str	r3, [sp, #36]	; 0x24
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	dd05      	ble.n	800aeb4 <_dtoa_r+0x814>
 800aea8:	4651      	mov	r1, sl
 800aeaa:	464a      	mov	r2, r9
 800aeac:	4628      	mov	r0, r5
 800aeae:	f001 f89b 	bl	800bfe8 <__lshift>
 800aeb2:	4682      	mov	sl, r0
 800aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dd05      	ble.n	800aec6 <_dtoa_r+0x826>
 800aeba:	4621      	mov	r1, r4
 800aebc:	461a      	mov	r2, r3
 800aebe:	4628      	mov	r0, r5
 800aec0:	f001 f892 	bl	800bfe8 <__lshift>
 800aec4:	4604      	mov	r4, r0
 800aec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d072      	beq.n	800afb2 <_dtoa_r+0x912>
 800aecc:	4621      	mov	r1, r4
 800aece:	4650      	mov	r0, sl
 800aed0:	f001 f8f6 	bl	800c0c0 <__mcmp>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	da6c      	bge.n	800afb2 <_dtoa_r+0x912>
 800aed8:	2300      	movs	r3, #0
 800aeda:	4651      	mov	r1, sl
 800aedc:	220a      	movs	r2, #10
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 fe8c 	bl	800bbfc <__multadd>
 800aee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee6:	4682      	mov	sl, r0
 800aee8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 81ac 	beq.w	800b24a <_dtoa_r+0xbaa>
 800aef2:	2300      	movs	r3, #0
 800aef4:	4631      	mov	r1, r6
 800aef6:	220a      	movs	r2, #10
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fe7f 	bl	800bbfc <__multadd>
 800aefe:	9b06      	ldr	r3, [sp, #24]
 800af00:	4606      	mov	r6, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	f300 8093 	bgt.w	800b02e <_dtoa_r+0x98e>
 800af08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	dc59      	bgt.n	800afc2 <_dtoa_r+0x922>
 800af0e:	e08e      	b.n	800b02e <_dtoa_r+0x98e>
 800af10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af16:	e75d      	b.n	800add4 <_dtoa_r+0x734>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	1e5c      	subs	r4, r3, #1
 800af1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1e:	42a3      	cmp	r3, r4
 800af20:	bfbf      	itttt	lt
 800af22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800af26:	1ae3      	sublt	r3, r4, r3
 800af28:	18d2      	addlt	r2, r2, r3
 800af2a:	bfa8      	it	ge
 800af2c:	1b1c      	subge	r4, r3, r4
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	bfbe      	ittt	lt
 800af32:	940a      	strlt	r4, [sp, #40]	; 0x28
 800af34:	920e      	strlt	r2, [sp, #56]	; 0x38
 800af36:	2400      	movlt	r4, #0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bfb5      	itete	lt
 800af3c:	eba9 0703 	sublt.w	r7, r9, r3
 800af40:	464f      	movge	r7, r9
 800af42:	2300      	movlt	r3, #0
 800af44:	9b08      	ldrge	r3, [sp, #32]
 800af46:	e747      	b.n	800add8 <_dtoa_r+0x738>
 800af48:	464f      	mov	r7, r9
 800af4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af4e:	e74c      	b.n	800adea <_dtoa_r+0x74a>
 800af50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af52:	e773      	b.n	800ae3c <_dtoa_r+0x79c>
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	40240000 	.word	0x40240000
 800af5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af5e:	2b01      	cmp	r3, #1
 800af60:	dc18      	bgt.n	800af94 <_dtoa_r+0x8f4>
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	b9b3      	cbnz	r3, 800af94 <_dtoa_r+0x8f4>
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af6c:	b993      	cbnz	r3, 800af94 <_dtoa_r+0x8f4>
 800af6e:	9b05      	ldr	r3, [sp, #20]
 800af70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af74:	0d1b      	lsrs	r3, r3, #20
 800af76:	051b      	lsls	r3, r3, #20
 800af78:	b17b      	cbz	r3, 800af9a <_dtoa_r+0x8fa>
 800af7a:	f04f 0801 	mov.w	r8, #1
 800af7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af80:	f109 0901 	add.w	r9, r9, #1
 800af84:	3301      	adds	r3, #1
 800af86:	9309      	str	r3, [sp, #36]	; 0x24
 800af88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f47f af6f 	bne.w	800ae6e <_dtoa_r+0x7ce>
 800af90:	2001      	movs	r0, #1
 800af92:	e774      	b.n	800ae7e <_dtoa_r+0x7de>
 800af94:	f04f 0800 	mov.w	r8, #0
 800af98:	e7f6      	b.n	800af88 <_dtoa_r+0x8e8>
 800af9a:	4698      	mov	r8, r3
 800af9c:	e7f4      	b.n	800af88 <_dtoa_r+0x8e8>
 800af9e:	d080      	beq.n	800aea2 <_dtoa_r+0x802>
 800afa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa2:	331c      	adds	r3, #28
 800afa4:	441a      	add	r2, r3
 800afa6:	4499      	add	r9, r3
 800afa8:	441f      	add	r7, r3
 800afaa:	9209      	str	r2, [sp, #36]	; 0x24
 800afac:	e779      	b.n	800aea2 <_dtoa_r+0x802>
 800afae:	4603      	mov	r3, r0
 800afb0:	e7f6      	b.n	800afa0 <_dtoa_r+0x900>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc34      	bgt.n	800b022 <_dtoa_r+0x982>
 800afb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dd31      	ble.n	800b022 <_dtoa_r+0x982>
 800afbe:	9b08      	ldr	r3, [sp, #32]
 800afc0:	9306      	str	r3, [sp, #24]
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	b963      	cbnz	r3, 800afe0 <_dtoa_r+0x940>
 800afc6:	4621      	mov	r1, r4
 800afc8:	2205      	movs	r2, #5
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 fe16 	bl	800bbfc <__multadd>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4604      	mov	r4, r0
 800afd4:	4650      	mov	r0, sl
 800afd6:	f001 f873 	bl	800c0c0 <__mcmp>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f73f adbf 	bgt.w	800ab5e <_dtoa_r+0x4be>
 800afe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afe2:	9f03      	ldr	r7, [sp, #12]
 800afe4:	ea6f 0b03 	mvn.w	fp, r3
 800afe8:	f04f 0800 	mov.w	r8, #0
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fde2 	bl	800bbb8 <_Bfree>
 800aff4:	2e00      	cmp	r6, #0
 800aff6:	f43f aead 	beq.w	800ad54 <_dtoa_r+0x6b4>
 800affa:	f1b8 0f00 	cmp.w	r8, #0
 800affe:	d005      	beq.n	800b00c <_dtoa_r+0x96c>
 800b000:	45b0      	cmp	r8, r6
 800b002:	d003      	beq.n	800b00c <_dtoa_r+0x96c>
 800b004:	4641      	mov	r1, r8
 800b006:	4628      	mov	r0, r5
 800b008:	f000 fdd6 	bl	800bbb8 <_Bfree>
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 fdd2 	bl	800bbb8 <_Bfree>
 800b014:	e69e      	b.n	800ad54 <_dtoa_r+0x6b4>
 800b016:	2400      	movs	r4, #0
 800b018:	4626      	mov	r6, r4
 800b01a:	e7e1      	b.n	800afe0 <_dtoa_r+0x940>
 800b01c:	46c3      	mov	fp, r8
 800b01e:	4626      	mov	r6, r4
 800b020:	e59d      	b.n	800ab5e <_dtoa_r+0x4be>
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80c8 	beq.w	800b1ba <_dtoa_r+0xb1a>
 800b02a:	9b08      	ldr	r3, [sp, #32]
 800b02c:	9306      	str	r3, [sp, #24]
 800b02e:	2f00      	cmp	r7, #0
 800b030:	dd05      	ble.n	800b03e <_dtoa_r+0x99e>
 800b032:	4631      	mov	r1, r6
 800b034:	463a      	mov	r2, r7
 800b036:	4628      	mov	r0, r5
 800b038:	f000 ffd6 	bl	800bfe8 <__lshift>
 800b03c:	4606      	mov	r6, r0
 800b03e:	f1b8 0f00 	cmp.w	r8, #0
 800b042:	d05b      	beq.n	800b0fc <_dtoa_r+0xa5c>
 800b044:	4628      	mov	r0, r5
 800b046:	6871      	ldr	r1, [r6, #4]
 800b048:	f000 fd76 	bl	800bb38 <_Balloc>
 800b04c:	4607      	mov	r7, r0
 800b04e:	b928      	cbnz	r0, 800b05c <_dtoa_r+0x9bc>
 800b050:	4602      	mov	r2, r0
 800b052:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b056:	4b81      	ldr	r3, [pc, #516]	; (800b25c <_dtoa_r+0xbbc>)
 800b058:	f7ff bb36 	b.w	800a6c8 <_dtoa_r+0x28>
 800b05c:	6932      	ldr	r2, [r6, #16]
 800b05e:	f106 010c 	add.w	r1, r6, #12
 800b062:	3202      	adds	r2, #2
 800b064:	0092      	lsls	r2, r2, #2
 800b066:	300c      	adds	r0, #12
 800b068:	f7ff fa7c 	bl	800a564 <memcpy>
 800b06c:	2201      	movs	r2, #1
 800b06e:	4639      	mov	r1, r7
 800b070:	4628      	mov	r0, r5
 800b072:	f000 ffb9 	bl	800bfe8 <__lshift>
 800b076:	46b0      	mov	r8, r6
 800b078:	4606      	mov	r6, r0
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	9a03      	ldr	r2, [sp, #12]
 800b07e:	3301      	adds	r3, #1
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	9b06      	ldr	r3, [sp, #24]
 800b084:	4413      	add	r3, r2
 800b086:	930b      	str	r3, [sp, #44]	; 0x2c
 800b088:	9b04      	ldr	r3, [sp, #16]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	930a      	str	r3, [sp, #40]	; 0x28
 800b090:	9b08      	ldr	r3, [sp, #32]
 800b092:	4621      	mov	r1, r4
 800b094:	3b01      	subs	r3, #1
 800b096:	4650      	mov	r0, sl
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	f7ff fa77 	bl	800a58c <quorem>
 800b09e:	4641      	mov	r1, r8
 800b0a0:	9006      	str	r0, [sp, #24]
 800b0a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	f001 f80a 	bl	800c0c0 <__mcmp>
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	9009      	str	r0, [sp, #36]	; 0x24
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f001 f820 	bl	800c0f8 <__mdiff>
 800b0b8:	68c2      	ldr	r2, [r0, #12]
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	bb02      	cbnz	r2, 800b100 <_dtoa_r+0xa60>
 800b0be:	4601      	mov	r1, r0
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	f000 fffd 	bl	800c0c0 <__mcmp>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	920c      	str	r2, [sp, #48]	; 0x30
 800b0ce:	f000 fd73 	bl	800bbb8 <_Bfree>
 800b0d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0d6:	9f08      	ldr	r7, [sp, #32]
 800b0d8:	ea43 0102 	orr.w	r1, r3, r2
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0de:	4319      	orrs	r1, r3
 800b0e0:	d110      	bne.n	800b104 <_dtoa_r+0xa64>
 800b0e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0e6:	d029      	beq.n	800b13c <_dtoa_r+0xa9c>
 800b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	dd02      	ble.n	800b0f4 <_dtoa_r+0xa54>
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	f883 9000 	strb.w	r9, [r3]
 800b0fa:	e777      	b.n	800afec <_dtoa_r+0x94c>
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	e7ba      	b.n	800b076 <_dtoa_r+0x9d6>
 800b100:	2201      	movs	r2, #1
 800b102:	e7e1      	b.n	800b0c8 <_dtoa_r+0xa28>
 800b104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	db04      	blt.n	800b114 <_dtoa_r+0xa74>
 800b10a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b10c:	430b      	orrs	r3, r1
 800b10e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b110:	430b      	orrs	r3, r1
 800b112:	d120      	bne.n	800b156 <_dtoa_r+0xab6>
 800b114:	2a00      	cmp	r2, #0
 800b116:	dded      	ble.n	800b0f4 <_dtoa_r+0xa54>
 800b118:	4651      	mov	r1, sl
 800b11a:	2201      	movs	r2, #1
 800b11c:	4628      	mov	r0, r5
 800b11e:	f000 ff63 	bl	800bfe8 <__lshift>
 800b122:	4621      	mov	r1, r4
 800b124:	4682      	mov	sl, r0
 800b126:	f000 ffcb 	bl	800c0c0 <__mcmp>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	dc03      	bgt.n	800b136 <_dtoa_r+0xa96>
 800b12e:	d1e1      	bne.n	800b0f4 <_dtoa_r+0xa54>
 800b130:	f019 0f01 	tst.w	r9, #1
 800b134:	d0de      	beq.n	800b0f4 <_dtoa_r+0xa54>
 800b136:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b13a:	d1d8      	bne.n	800b0ee <_dtoa_r+0xa4e>
 800b13c:	2339      	movs	r3, #57	; 0x39
 800b13e:	9a04      	ldr	r2, [sp, #16]
 800b140:	7013      	strb	r3, [r2, #0]
 800b142:	463b      	mov	r3, r7
 800b144:	461f      	mov	r7, r3
 800b146:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2a39      	cmp	r2, #57	; 0x39
 800b14e:	d06b      	beq.n	800b228 <_dtoa_r+0xb88>
 800b150:	3201      	adds	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	e74a      	b.n	800afec <_dtoa_r+0x94c>
 800b156:	2a00      	cmp	r2, #0
 800b158:	dd07      	ble.n	800b16a <_dtoa_r+0xaca>
 800b15a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b15e:	d0ed      	beq.n	800b13c <_dtoa_r+0xa9c>
 800b160:	9a04      	ldr	r2, [sp, #16]
 800b162:	f109 0301 	add.w	r3, r9, #1
 800b166:	7013      	strb	r3, [r2, #0]
 800b168:	e740      	b.n	800afec <_dtoa_r+0x94c>
 800b16a:	9b08      	ldr	r3, [sp, #32]
 800b16c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b16e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b172:	4293      	cmp	r3, r2
 800b174:	d042      	beq.n	800b1fc <_dtoa_r+0xb5c>
 800b176:	4651      	mov	r1, sl
 800b178:	2300      	movs	r3, #0
 800b17a:	220a      	movs	r2, #10
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 fd3d 	bl	800bbfc <__multadd>
 800b182:	45b0      	cmp	r8, r6
 800b184:	4682      	mov	sl, r0
 800b186:	f04f 0300 	mov.w	r3, #0
 800b18a:	f04f 020a 	mov.w	r2, #10
 800b18e:	4641      	mov	r1, r8
 800b190:	4628      	mov	r0, r5
 800b192:	d107      	bne.n	800b1a4 <_dtoa_r+0xb04>
 800b194:	f000 fd32 	bl	800bbfc <__multadd>
 800b198:	4680      	mov	r8, r0
 800b19a:	4606      	mov	r6, r0
 800b19c:	9b08      	ldr	r3, [sp, #32]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	e775      	b.n	800b090 <_dtoa_r+0x9f0>
 800b1a4:	f000 fd2a 	bl	800bbfc <__multadd>
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	220a      	movs	r2, #10
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f000 fd23 	bl	800bbfc <__multadd>
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	e7f0      	b.n	800b19c <_dtoa_r+0xafc>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	9306      	str	r3, [sp, #24]
 800b1be:	9f03      	ldr	r7, [sp, #12]
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	f7ff f9e2 	bl	800a58c <quorem>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1ce:	f807 9b01 	strb.w	r9, [r7], #1
 800b1d2:	1afa      	subs	r2, r7, r3
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	dd07      	ble.n	800b1ea <_dtoa_r+0xb4a>
 800b1da:	4651      	mov	r1, sl
 800b1dc:	2300      	movs	r3, #0
 800b1de:	220a      	movs	r2, #10
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 fd0b 	bl	800bbfc <__multadd>
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	e7ea      	b.n	800b1c0 <_dtoa_r+0xb20>
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	f04f 0800 	mov.w	r8, #0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfcc      	ite	gt
 800b1f4:	461f      	movgt	r7, r3
 800b1f6:	2701      	movle	r7, #1
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	441f      	add	r7, r3
 800b1fc:	4651      	mov	r1, sl
 800b1fe:	2201      	movs	r2, #1
 800b200:	4628      	mov	r0, r5
 800b202:	f000 fef1 	bl	800bfe8 <__lshift>
 800b206:	4621      	mov	r1, r4
 800b208:	4682      	mov	sl, r0
 800b20a:	f000 ff59 	bl	800c0c0 <__mcmp>
 800b20e:	2800      	cmp	r0, #0
 800b210:	dc97      	bgt.n	800b142 <_dtoa_r+0xaa2>
 800b212:	d102      	bne.n	800b21a <_dtoa_r+0xb7a>
 800b214:	f019 0f01 	tst.w	r9, #1
 800b218:	d193      	bne.n	800b142 <_dtoa_r+0xaa2>
 800b21a:	463b      	mov	r3, r7
 800b21c:	461f      	mov	r7, r3
 800b21e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b222:	2a30      	cmp	r2, #48	; 0x30
 800b224:	d0fa      	beq.n	800b21c <_dtoa_r+0xb7c>
 800b226:	e6e1      	b.n	800afec <_dtoa_r+0x94c>
 800b228:	9a03      	ldr	r2, [sp, #12]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d18a      	bne.n	800b144 <_dtoa_r+0xaa4>
 800b22e:	2331      	movs	r3, #49	; 0x31
 800b230:	f10b 0b01 	add.w	fp, fp, #1
 800b234:	e797      	b.n	800b166 <_dtoa_r+0xac6>
 800b236:	4b0a      	ldr	r3, [pc, #40]	; (800b260 <_dtoa_r+0xbc0>)
 800b238:	f7ff ba9f 	b.w	800a77a <_dtoa_r+0xda>
 800b23c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f47f aa77 	bne.w	800a732 <_dtoa_r+0x92>
 800b244:	4b07      	ldr	r3, [pc, #28]	; (800b264 <_dtoa_r+0xbc4>)
 800b246:	f7ff ba98 	b.w	800a77a <_dtoa_r+0xda>
 800b24a:	9b06      	ldr	r3, [sp, #24]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dcb6      	bgt.n	800b1be <_dtoa_r+0xb1e>
 800b250:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b252:	2b02      	cmp	r3, #2
 800b254:	f73f aeb5 	bgt.w	800afc2 <_dtoa_r+0x922>
 800b258:	e7b1      	b.n	800b1be <_dtoa_r+0xb1e>
 800b25a:	bf00      	nop
 800b25c:	0800d220 	.word	0x0800d220
 800b260:	0800d178 	.word	0x0800d178
 800b264:	0800d1a4 	.word	0x0800d1a4

0800b268 <_free_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4605      	mov	r5, r0
 800b26c:	2900      	cmp	r1, #0
 800b26e:	d040      	beq.n	800b2f2 <_free_r+0x8a>
 800b270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b274:	1f0c      	subs	r4, r1, #4
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfb8      	it	lt
 800b27a:	18e4      	addlt	r4, r4, r3
 800b27c:	f000 fc50 	bl	800bb20 <__malloc_lock>
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <_free_r+0x8c>)
 800b282:	6813      	ldr	r3, [r2, #0]
 800b284:	b933      	cbnz	r3, 800b294 <_free_r+0x2c>
 800b286:	6063      	str	r3, [r4, #4]
 800b288:	6014      	str	r4, [r2, #0]
 800b28a:	4628      	mov	r0, r5
 800b28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b290:	f000 bc4c 	b.w	800bb2c <__malloc_unlock>
 800b294:	42a3      	cmp	r3, r4
 800b296:	d908      	bls.n	800b2aa <_free_r+0x42>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	1821      	adds	r1, r4, r0
 800b29c:	428b      	cmp	r3, r1
 800b29e:	bf01      	itttt	eq
 800b2a0:	6819      	ldreq	r1, [r3, #0]
 800b2a2:	685b      	ldreq	r3, [r3, #4]
 800b2a4:	1809      	addeq	r1, r1, r0
 800b2a6:	6021      	streq	r1, [r4, #0]
 800b2a8:	e7ed      	b.n	800b286 <_free_r+0x1e>
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	b10b      	cbz	r3, 800b2b4 <_free_r+0x4c>
 800b2b0:	42a3      	cmp	r3, r4
 800b2b2:	d9fa      	bls.n	800b2aa <_free_r+0x42>
 800b2b4:	6811      	ldr	r1, [r2, #0]
 800b2b6:	1850      	adds	r0, r2, r1
 800b2b8:	42a0      	cmp	r0, r4
 800b2ba:	d10b      	bne.n	800b2d4 <_free_r+0x6c>
 800b2bc:	6820      	ldr	r0, [r4, #0]
 800b2be:	4401      	add	r1, r0
 800b2c0:	1850      	adds	r0, r2, r1
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	6011      	str	r1, [r2, #0]
 800b2c6:	d1e0      	bne.n	800b28a <_free_r+0x22>
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	4408      	add	r0, r1
 800b2ce:	6010      	str	r0, [r2, #0]
 800b2d0:	6053      	str	r3, [r2, #4]
 800b2d2:	e7da      	b.n	800b28a <_free_r+0x22>
 800b2d4:	d902      	bls.n	800b2dc <_free_r+0x74>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	e7d6      	b.n	800b28a <_free_r+0x22>
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	1821      	adds	r1, r4, r0
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	bf01      	itttt	eq
 800b2e4:	6819      	ldreq	r1, [r3, #0]
 800b2e6:	685b      	ldreq	r3, [r3, #4]
 800b2e8:	1809      	addeq	r1, r1, r0
 800b2ea:	6021      	streq	r1, [r4, #0]
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	6054      	str	r4, [r2, #4]
 800b2f0:	e7cb      	b.n	800b28a <_free_r+0x22>
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20003d84 	.word	0x20003d84

0800b2f8 <rshift>:
 800b2f8:	6903      	ldr	r3, [r0, #16]
 800b2fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b302:	f100 0414 	add.w	r4, r0, #20
 800b306:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b30a:	dd46      	ble.n	800b39a <rshift+0xa2>
 800b30c:	f011 011f 	ands.w	r1, r1, #31
 800b310:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b314:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b318:	d10c      	bne.n	800b334 <rshift+0x3c>
 800b31a:	4629      	mov	r1, r5
 800b31c:	f100 0710 	add.w	r7, r0, #16
 800b320:	42b1      	cmp	r1, r6
 800b322:	d335      	bcc.n	800b390 <rshift+0x98>
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	1eea      	subs	r2, r5, #3
 800b32a:	4296      	cmp	r6, r2
 800b32c:	bf38      	it	cc
 800b32e:	2300      	movcc	r3, #0
 800b330:	4423      	add	r3, r4
 800b332:	e015      	b.n	800b360 <rshift+0x68>
 800b334:	46a1      	mov	r9, r4
 800b336:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b33a:	f1c1 0820 	rsb	r8, r1, #32
 800b33e:	40cf      	lsrs	r7, r1
 800b340:	f105 0e04 	add.w	lr, r5, #4
 800b344:	4576      	cmp	r6, lr
 800b346:	46f4      	mov	ip, lr
 800b348:	d816      	bhi.n	800b378 <rshift+0x80>
 800b34a:	1a9a      	subs	r2, r3, r2
 800b34c:	0092      	lsls	r2, r2, #2
 800b34e:	3a04      	subs	r2, #4
 800b350:	3501      	adds	r5, #1
 800b352:	42ae      	cmp	r6, r5
 800b354:	bf38      	it	cc
 800b356:	2200      	movcc	r2, #0
 800b358:	18a3      	adds	r3, r4, r2
 800b35a:	50a7      	str	r7, [r4, r2]
 800b35c:	b107      	cbz	r7, 800b360 <rshift+0x68>
 800b35e:	3304      	adds	r3, #4
 800b360:	42a3      	cmp	r3, r4
 800b362:	eba3 0204 	sub.w	r2, r3, r4
 800b366:	bf08      	it	eq
 800b368:	2300      	moveq	r3, #0
 800b36a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b36e:	6102      	str	r2, [r0, #16]
 800b370:	bf08      	it	eq
 800b372:	6143      	streq	r3, [r0, #20]
 800b374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b378:	f8dc c000 	ldr.w	ip, [ip]
 800b37c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b380:	ea4c 0707 	orr.w	r7, ip, r7
 800b384:	f849 7b04 	str.w	r7, [r9], #4
 800b388:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b38c:	40cf      	lsrs	r7, r1
 800b38e:	e7d9      	b.n	800b344 <rshift+0x4c>
 800b390:	f851 cb04 	ldr.w	ip, [r1], #4
 800b394:	f847 cf04 	str.w	ip, [r7, #4]!
 800b398:	e7c2      	b.n	800b320 <rshift+0x28>
 800b39a:	4623      	mov	r3, r4
 800b39c:	e7e0      	b.n	800b360 <rshift+0x68>

0800b39e <__hexdig_fun>:
 800b39e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b3a2:	2b09      	cmp	r3, #9
 800b3a4:	d802      	bhi.n	800b3ac <__hexdig_fun+0xe>
 800b3a6:	3820      	subs	r0, #32
 800b3a8:	b2c0      	uxtb	r0, r0
 800b3aa:	4770      	bx	lr
 800b3ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3b0:	2b05      	cmp	r3, #5
 800b3b2:	d801      	bhi.n	800b3b8 <__hexdig_fun+0x1a>
 800b3b4:	3847      	subs	r0, #71	; 0x47
 800b3b6:	e7f7      	b.n	800b3a8 <__hexdig_fun+0xa>
 800b3b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3bc:	2b05      	cmp	r3, #5
 800b3be:	d801      	bhi.n	800b3c4 <__hexdig_fun+0x26>
 800b3c0:	3827      	subs	r0, #39	; 0x27
 800b3c2:	e7f1      	b.n	800b3a8 <__hexdig_fun+0xa>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	4770      	bx	lr

0800b3c8 <__gethex>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	4681      	mov	r9, r0
 800b3ce:	468a      	mov	sl, r1
 800b3d0:	4617      	mov	r7, r2
 800b3d2:	680a      	ldr	r2, [r1, #0]
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	f102 0b02 	add.w	fp, r2, #2
 800b3da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3e2:	9302      	str	r3, [sp, #8]
 800b3e4:	32fe      	adds	r2, #254	; 0xfe
 800b3e6:	eb02 030b 	add.w	r3, r2, fp
 800b3ea:	46d8      	mov	r8, fp
 800b3ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	2830      	cmp	r0, #48	; 0x30
 800b3f4:	d0f7      	beq.n	800b3e6 <__gethex+0x1e>
 800b3f6:	f7ff ffd2 	bl	800b39e <__hexdig_fun>
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d138      	bne.n	800b472 <__gethex+0xaa>
 800b400:	2201      	movs	r2, #1
 800b402:	4640      	mov	r0, r8
 800b404:	49a7      	ldr	r1, [pc, #668]	; (800b6a4 <__gethex+0x2dc>)
 800b406:	f7fe ffc0 	bl	800a38a <strncmp>
 800b40a:	4606      	mov	r6, r0
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d169      	bne.n	800b4e4 <__gethex+0x11c>
 800b410:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b414:	465d      	mov	r5, fp
 800b416:	f7ff ffc2 	bl	800b39e <__hexdig_fun>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d064      	beq.n	800b4e8 <__gethex+0x120>
 800b41e:	465a      	mov	r2, fp
 800b420:	7810      	ldrb	r0, [r2, #0]
 800b422:	4690      	mov	r8, r2
 800b424:	2830      	cmp	r0, #48	; 0x30
 800b426:	f102 0201 	add.w	r2, r2, #1
 800b42a:	d0f9      	beq.n	800b420 <__gethex+0x58>
 800b42c:	f7ff ffb7 	bl	800b39e <__hexdig_fun>
 800b430:	2301      	movs	r3, #1
 800b432:	fab0 f480 	clz	r4, r0
 800b436:	465e      	mov	r6, fp
 800b438:	0964      	lsrs	r4, r4, #5
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	4642      	mov	r2, r8
 800b43e:	4615      	mov	r5, r2
 800b440:	7828      	ldrb	r0, [r5, #0]
 800b442:	3201      	adds	r2, #1
 800b444:	f7ff ffab 	bl	800b39e <__hexdig_fun>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d1f8      	bne.n	800b43e <__gethex+0x76>
 800b44c:	2201      	movs	r2, #1
 800b44e:	4628      	mov	r0, r5
 800b450:	4994      	ldr	r1, [pc, #592]	; (800b6a4 <__gethex+0x2dc>)
 800b452:	f7fe ff9a 	bl	800a38a <strncmp>
 800b456:	b978      	cbnz	r0, 800b478 <__gethex+0xb0>
 800b458:	b946      	cbnz	r6, 800b46c <__gethex+0xa4>
 800b45a:	1c6e      	adds	r6, r5, #1
 800b45c:	4632      	mov	r2, r6
 800b45e:	4615      	mov	r5, r2
 800b460:	7828      	ldrb	r0, [r5, #0]
 800b462:	3201      	adds	r2, #1
 800b464:	f7ff ff9b 	bl	800b39e <__hexdig_fun>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d1f8      	bne.n	800b45e <__gethex+0x96>
 800b46c:	1b73      	subs	r3, r6, r5
 800b46e:	009e      	lsls	r6, r3, #2
 800b470:	e004      	b.n	800b47c <__gethex+0xb4>
 800b472:	2400      	movs	r4, #0
 800b474:	4626      	mov	r6, r4
 800b476:	e7e1      	b.n	800b43c <__gethex+0x74>
 800b478:	2e00      	cmp	r6, #0
 800b47a:	d1f7      	bne.n	800b46c <__gethex+0xa4>
 800b47c:	782b      	ldrb	r3, [r5, #0]
 800b47e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b482:	2b50      	cmp	r3, #80	; 0x50
 800b484:	d13d      	bne.n	800b502 <__gethex+0x13a>
 800b486:	786b      	ldrb	r3, [r5, #1]
 800b488:	2b2b      	cmp	r3, #43	; 0x2b
 800b48a:	d02f      	beq.n	800b4ec <__gethex+0x124>
 800b48c:	2b2d      	cmp	r3, #45	; 0x2d
 800b48e:	d031      	beq.n	800b4f4 <__gethex+0x12c>
 800b490:	f04f 0b00 	mov.w	fp, #0
 800b494:	1c69      	adds	r1, r5, #1
 800b496:	7808      	ldrb	r0, [r1, #0]
 800b498:	f7ff ff81 	bl	800b39e <__hexdig_fun>
 800b49c:	1e42      	subs	r2, r0, #1
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	2a18      	cmp	r2, #24
 800b4a2:	d82e      	bhi.n	800b502 <__gethex+0x13a>
 800b4a4:	f1a0 0210 	sub.w	r2, r0, #16
 800b4a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4ac:	f7ff ff77 	bl	800b39e <__hexdig_fun>
 800b4b0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4b4:	fa5f fc8c 	uxtb.w	ip, ip
 800b4b8:	f1bc 0f18 	cmp.w	ip, #24
 800b4bc:	d91d      	bls.n	800b4fa <__gethex+0x132>
 800b4be:	f1bb 0f00 	cmp.w	fp, #0
 800b4c2:	d000      	beq.n	800b4c6 <__gethex+0xfe>
 800b4c4:	4252      	negs	r2, r2
 800b4c6:	4416      	add	r6, r2
 800b4c8:	f8ca 1000 	str.w	r1, [sl]
 800b4cc:	b1dc      	cbz	r4, 800b506 <__gethex+0x13e>
 800b4ce:	9b01      	ldr	r3, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bf14      	ite	ne
 800b4d4:	f04f 0800 	movne.w	r8, #0
 800b4d8:	f04f 0806 	moveq.w	r8, #6
 800b4dc:	4640      	mov	r0, r8
 800b4de:	b005      	add	sp, #20
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	4645      	mov	r5, r8
 800b4e6:	4626      	mov	r6, r4
 800b4e8:	2401      	movs	r4, #1
 800b4ea:	e7c7      	b.n	800b47c <__gethex+0xb4>
 800b4ec:	f04f 0b00 	mov.w	fp, #0
 800b4f0:	1ca9      	adds	r1, r5, #2
 800b4f2:	e7d0      	b.n	800b496 <__gethex+0xce>
 800b4f4:	f04f 0b01 	mov.w	fp, #1
 800b4f8:	e7fa      	b.n	800b4f0 <__gethex+0x128>
 800b4fa:	230a      	movs	r3, #10
 800b4fc:	fb03 0002 	mla	r0, r3, r2, r0
 800b500:	e7d0      	b.n	800b4a4 <__gethex+0xdc>
 800b502:	4629      	mov	r1, r5
 800b504:	e7e0      	b.n	800b4c8 <__gethex+0x100>
 800b506:	4621      	mov	r1, r4
 800b508:	eba5 0308 	sub.w	r3, r5, r8
 800b50c:	3b01      	subs	r3, #1
 800b50e:	2b07      	cmp	r3, #7
 800b510:	dc0a      	bgt.n	800b528 <__gethex+0x160>
 800b512:	4648      	mov	r0, r9
 800b514:	f000 fb10 	bl	800bb38 <_Balloc>
 800b518:	4604      	mov	r4, r0
 800b51a:	b940      	cbnz	r0, 800b52e <__gethex+0x166>
 800b51c:	4602      	mov	r2, r0
 800b51e:	21e4      	movs	r1, #228	; 0xe4
 800b520:	4b61      	ldr	r3, [pc, #388]	; (800b6a8 <__gethex+0x2e0>)
 800b522:	4862      	ldr	r0, [pc, #392]	; (800b6ac <__gethex+0x2e4>)
 800b524:	f001 f9de 	bl	800c8e4 <__assert_func>
 800b528:	3101      	adds	r1, #1
 800b52a:	105b      	asrs	r3, r3, #1
 800b52c:	e7ef      	b.n	800b50e <__gethex+0x146>
 800b52e:	2300      	movs	r3, #0
 800b530:	469b      	mov	fp, r3
 800b532:	f100 0a14 	add.w	sl, r0, #20
 800b536:	f8cd a004 	str.w	sl, [sp, #4]
 800b53a:	45a8      	cmp	r8, r5
 800b53c:	d344      	bcc.n	800b5c8 <__gethex+0x200>
 800b53e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b542:	4658      	mov	r0, fp
 800b544:	f848 bb04 	str.w	fp, [r8], #4
 800b548:	eba8 080a 	sub.w	r8, r8, sl
 800b54c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800b550:	6122      	str	r2, [r4, #16]
 800b552:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800b556:	f000 fbe1 	bl	800bd1c <__hi0bits>
 800b55a:	683d      	ldr	r5, [r7, #0]
 800b55c:	eba8 0800 	sub.w	r8, r8, r0
 800b560:	45a8      	cmp	r8, r5
 800b562:	dd59      	ble.n	800b618 <__gethex+0x250>
 800b564:	eba8 0805 	sub.w	r8, r8, r5
 800b568:	4641      	mov	r1, r8
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 ff5f 	bl	800c42e <__any_on>
 800b570:	4683      	mov	fp, r0
 800b572:	b1b8      	cbz	r0, 800b5a4 <__gethex+0x1dc>
 800b574:	f04f 0b01 	mov.w	fp, #1
 800b578:	f108 33ff 	add.w	r3, r8, #4294967295
 800b57c:	1159      	asrs	r1, r3, #5
 800b57e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b582:	f003 021f 	and.w	r2, r3, #31
 800b586:	fa0b f202 	lsl.w	r2, fp, r2
 800b58a:	420a      	tst	r2, r1
 800b58c:	d00a      	beq.n	800b5a4 <__gethex+0x1dc>
 800b58e:	455b      	cmp	r3, fp
 800b590:	dd06      	ble.n	800b5a0 <__gethex+0x1d8>
 800b592:	4620      	mov	r0, r4
 800b594:	f1a8 0102 	sub.w	r1, r8, #2
 800b598:	f000 ff49 	bl	800c42e <__any_on>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d138      	bne.n	800b612 <__gethex+0x24a>
 800b5a0:	f04f 0b02 	mov.w	fp, #2
 800b5a4:	4641      	mov	r1, r8
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff fea6 	bl	800b2f8 <rshift>
 800b5ac:	4446      	add	r6, r8
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	42b3      	cmp	r3, r6
 800b5b2:	da41      	bge.n	800b638 <__gethex+0x270>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	4648      	mov	r0, r9
 800b5b8:	f000 fafe 	bl	800bbb8 <_Bfree>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	e789      	b.n	800b4dc <__gethex+0x114>
 800b5c8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b5cc:	2a2e      	cmp	r2, #46	; 0x2e
 800b5ce:	d014      	beq.n	800b5fa <__gethex+0x232>
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d106      	bne.n	800b5e2 <__gethex+0x21a>
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	f843 bb04 	str.w	fp, [r3], #4
 800b5da:	f04f 0b00 	mov.w	fp, #0
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	465b      	mov	r3, fp
 800b5e2:	7828      	ldrb	r0, [r5, #0]
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	f7ff feda 	bl	800b39e <__hexdig_fun>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	f000 000f 	and.w	r0, r0, #15
 800b5f0:	4098      	lsls	r0, r3
 800b5f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	e79f      	b.n	800b53a <__gethex+0x172>
 800b5fa:	45a8      	cmp	r8, r5
 800b5fc:	d8e8      	bhi.n	800b5d0 <__gethex+0x208>
 800b5fe:	2201      	movs	r2, #1
 800b600:	4628      	mov	r0, r5
 800b602:	4928      	ldr	r1, [pc, #160]	; (800b6a4 <__gethex+0x2dc>)
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	f7fe fec0 	bl	800a38a <strncmp>
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d1df      	bne.n	800b5d0 <__gethex+0x208>
 800b610:	e793      	b.n	800b53a <__gethex+0x172>
 800b612:	f04f 0b03 	mov.w	fp, #3
 800b616:	e7c5      	b.n	800b5a4 <__gethex+0x1dc>
 800b618:	da0b      	bge.n	800b632 <__gethex+0x26a>
 800b61a:	eba5 0808 	sub.w	r8, r5, r8
 800b61e:	4621      	mov	r1, r4
 800b620:	4642      	mov	r2, r8
 800b622:	4648      	mov	r0, r9
 800b624:	f000 fce0 	bl	800bfe8 <__lshift>
 800b628:	4604      	mov	r4, r0
 800b62a:	eba6 0608 	sub.w	r6, r6, r8
 800b62e:	f100 0a14 	add.w	sl, r0, #20
 800b632:	f04f 0b00 	mov.w	fp, #0
 800b636:	e7ba      	b.n	800b5ae <__gethex+0x1e6>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	42b3      	cmp	r3, r6
 800b63c:	dd74      	ble.n	800b728 <__gethex+0x360>
 800b63e:	1b9e      	subs	r6, r3, r6
 800b640:	42b5      	cmp	r5, r6
 800b642:	dc35      	bgt.n	800b6b0 <__gethex+0x2e8>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d023      	beq.n	800b692 <__gethex+0x2ca>
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d025      	beq.n	800b69a <__gethex+0x2d2>
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d115      	bne.n	800b67e <__gethex+0x2b6>
 800b652:	42b5      	cmp	r5, r6
 800b654:	d113      	bne.n	800b67e <__gethex+0x2b6>
 800b656:	2d01      	cmp	r5, #1
 800b658:	d10b      	bne.n	800b672 <__gethex+0x2aa>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	9a02      	ldr	r2, [sp, #8]
 800b65e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	2301      	movs	r3, #1
 800b666:	6123      	str	r3, [r4, #16]
 800b668:	f8ca 3000 	str.w	r3, [sl]
 800b66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b66e:	601c      	str	r4, [r3, #0]
 800b670:	e734      	b.n	800b4dc <__gethex+0x114>
 800b672:	4620      	mov	r0, r4
 800b674:	1e69      	subs	r1, r5, #1
 800b676:	f000 feda 	bl	800c42e <__any_on>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d1ed      	bne.n	800b65a <__gethex+0x292>
 800b67e:	4621      	mov	r1, r4
 800b680:	4648      	mov	r0, r9
 800b682:	f000 fa99 	bl	800bbb8 <_Bfree>
 800b686:	2300      	movs	r3, #0
 800b688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b68a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e724      	b.n	800b4dc <__gethex+0x114>
 800b692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1f2      	bne.n	800b67e <__gethex+0x2b6>
 800b698:	e7df      	b.n	800b65a <__gethex+0x292>
 800b69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1dc      	bne.n	800b65a <__gethex+0x292>
 800b6a0:	e7ed      	b.n	800b67e <__gethex+0x2b6>
 800b6a2:	bf00      	nop
 800b6a4:	0800d110 	.word	0x0800d110
 800b6a8:	0800d220 	.word	0x0800d220
 800b6ac:	0800d231 	.word	0x0800d231
 800b6b0:	f106 38ff 	add.w	r8, r6, #4294967295
 800b6b4:	f1bb 0f00 	cmp.w	fp, #0
 800b6b8:	d133      	bne.n	800b722 <__gethex+0x35a>
 800b6ba:	f1b8 0f00 	cmp.w	r8, #0
 800b6be:	d004      	beq.n	800b6ca <__gethex+0x302>
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 feb3 	bl	800c42e <__any_on>
 800b6c8:	4683      	mov	fp, r0
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b6d0:	f008 081f 	and.w	r8, r8, #31
 800b6d4:	fa03 f308 	lsl.w	r3, r3, r8
 800b6d8:	f04f 0802 	mov.w	r8, #2
 800b6dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4213      	tst	r3, r2
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	bf18      	it	ne
 800b6e8:	f04b 0b02 	orrne.w	fp, fp, #2
 800b6ec:	1bad      	subs	r5, r5, r6
 800b6ee:	f7ff fe03 	bl	800b2f8 <rshift>
 800b6f2:	687e      	ldr	r6, [r7, #4]
 800b6f4:	f1bb 0f00 	cmp.w	fp, #0
 800b6f8:	d04a      	beq.n	800b790 <__gethex+0x3c8>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d016      	beq.n	800b72e <__gethex+0x366>
 800b700:	2b03      	cmp	r3, #3
 800b702:	d018      	beq.n	800b736 <__gethex+0x36e>
 800b704:	2b01      	cmp	r3, #1
 800b706:	d109      	bne.n	800b71c <__gethex+0x354>
 800b708:	f01b 0f02 	tst.w	fp, #2
 800b70c:	d006      	beq.n	800b71c <__gethex+0x354>
 800b70e:	f8da 3000 	ldr.w	r3, [sl]
 800b712:	ea4b 0b03 	orr.w	fp, fp, r3
 800b716:	f01b 0f01 	tst.w	fp, #1
 800b71a:	d10f      	bne.n	800b73c <__gethex+0x374>
 800b71c:	f048 0810 	orr.w	r8, r8, #16
 800b720:	e036      	b.n	800b790 <__gethex+0x3c8>
 800b722:	f04f 0b01 	mov.w	fp, #1
 800b726:	e7d0      	b.n	800b6ca <__gethex+0x302>
 800b728:	f04f 0801 	mov.w	r8, #1
 800b72c:	e7e2      	b.n	800b6f4 <__gethex+0x32c>
 800b72e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b730:	f1c3 0301 	rsb	r3, r3, #1
 800b734:	930f      	str	r3, [sp, #60]	; 0x3c
 800b736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0ef      	beq.n	800b71c <__gethex+0x354>
 800b73c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b740:	f104 0214 	add.w	r2, r4, #20
 800b744:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	2300      	movs	r3, #0
 800b74c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b750:	4694      	mov	ip, r2
 800b752:	f852 1b04 	ldr.w	r1, [r2], #4
 800b756:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b75a:	d01e      	beq.n	800b79a <__gethex+0x3d2>
 800b75c:	3101      	adds	r1, #1
 800b75e:	f8cc 1000 	str.w	r1, [ip]
 800b762:	f1b8 0f02 	cmp.w	r8, #2
 800b766:	f104 0214 	add.w	r2, r4, #20
 800b76a:	d13d      	bne.n	800b7e8 <__gethex+0x420>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	42ab      	cmp	r3, r5
 800b772:	d10b      	bne.n	800b78c <__gethex+0x3c4>
 800b774:	2301      	movs	r3, #1
 800b776:	1169      	asrs	r1, r5, #5
 800b778:	f005 051f 	and.w	r5, r5, #31
 800b77c:	fa03 f505 	lsl.w	r5, r3, r5
 800b780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b784:	421d      	tst	r5, r3
 800b786:	bf18      	it	ne
 800b788:	f04f 0801 	movne.w	r8, #1
 800b78c:	f048 0820 	orr.w	r8, r8, #32
 800b790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b792:	601c      	str	r4, [r3, #0]
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	601e      	str	r6, [r3, #0]
 800b798:	e6a0      	b.n	800b4dc <__gethex+0x114>
 800b79a:	4290      	cmp	r0, r2
 800b79c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b7a0:	d8d6      	bhi.n	800b750 <__gethex+0x388>
 800b7a2:	68a2      	ldr	r2, [r4, #8]
 800b7a4:	4593      	cmp	fp, r2
 800b7a6:	db17      	blt.n	800b7d8 <__gethex+0x410>
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	4648      	mov	r0, r9
 800b7ac:	3101      	adds	r1, #1
 800b7ae:	f000 f9c3 	bl	800bb38 <_Balloc>
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	b918      	cbnz	r0, 800b7be <__gethex+0x3f6>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	2184      	movs	r1, #132	; 0x84
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	; (800b824 <__gethex+0x45c>)
 800b7bc:	e6b1      	b.n	800b522 <__gethex+0x15a>
 800b7be:	6922      	ldr	r2, [r4, #16]
 800b7c0:	f104 010c 	add.w	r1, r4, #12
 800b7c4:	3202      	adds	r2, #2
 800b7c6:	0092      	lsls	r2, r2, #2
 800b7c8:	300c      	adds	r0, #12
 800b7ca:	f7fe fecb 	bl	800a564 <memcpy>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4648      	mov	r0, r9
 800b7d2:	f000 f9f1 	bl	800bbb8 <_Bfree>
 800b7d6:	4654      	mov	r4, sl
 800b7d8:	6922      	ldr	r2, [r4, #16]
 800b7da:	1c51      	adds	r1, r2, #1
 800b7dc:	6121      	str	r1, [r4, #16]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b7e4:	6151      	str	r1, [r2, #20]
 800b7e6:	e7bc      	b.n	800b762 <__gethex+0x39a>
 800b7e8:	6921      	ldr	r1, [r4, #16]
 800b7ea:	4559      	cmp	r1, fp
 800b7ec:	dd0b      	ble.n	800b806 <__gethex+0x43e>
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7ff fd81 	bl	800b2f8 <rshift>
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	3601      	adds	r6, #1
 800b7fa:	42b3      	cmp	r3, r6
 800b7fc:	f6ff aeda 	blt.w	800b5b4 <__gethex+0x1ec>
 800b800:	f04f 0801 	mov.w	r8, #1
 800b804:	e7c2      	b.n	800b78c <__gethex+0x3c4>
 800b806:	f015 051f 	ands.w	r5, r5, #31
 800b80a:	d0f9      	beq.n	800b800 <__gethex+0x438>
 800b80c:	9b01      	ldr	r3, [sp, #4]
 800b80e:	f1c5 0520 	rsb	r5, r5, #32
 800b812:	441a      	add	r2, r3
 800b814:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b818:	f000 fa80 	bl	800bd1c <__hi0bits>
 800b81c:	42a8      	cmp	r0, r5
 800b81e:	dbe6      	blt.n	800b7ee <__gethex+0x426>
 800b820:	e7ee      	b.n	800b800 <__gethex+0x438>
 800b822:	bf00      	nop
 800b824:	0800d220 	.word	0x0800d220

0800b828 <L_shift>:
 800b828:	f1c2 0208 	rsb	r2, r2, #8
 800b82c:	0092      	lsls	r2, r2, #2
 800b82e:	b570      	push	{r4, r5, r6, lr}
 800b830:	f1c2 0620 	rsb	r6, r2, #32
 800b834:	6843      	ldr	r3, [r0, #4]
 800b836:	6804      	ldr	r4, [r0, #0]
 800b838:	fa03 f506 	lsl.w	r5, r3, r6
 800b83c:	432c      	orrs	r4, r5
 800b83e:	40d3      	lsrs	r3, r2
 800b840:	6004      	str	r4, [r0, #0]
 800b842:	f840 3f04 	str.w	r3, [r0, #4]!
 800b846:	4288      	cmp	r0, r1
 800b848:	d3f4      	bcc.n	800b834 <L_shift+0xc>
 800b84a:	bd70      	pop	{r4, r5, r6, pc}

0800b84c <__match>:
 800b84c:	b530      	push	{r4, r5, lr}
 800b84e:	6803      	ldr	r3, [r0, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b856:	b914      	cbnz	r4, 800b85e <__match+0x12>
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	2001      	movs	r0, #1
 800b85c:	bd30      	pop	{r4, r5, pc}
 800b85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b862:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b866:	2d19      	cmp	r5, #25
 800b868:	bf98      	it	ls
 800b86a:	3220      	addls	r2, #32
 800b86c:	42a2      	cmp	r2, r4
 800b86e:	d0f0      	beq.n	800b852 <__match+0x6>
 800b870:	2000      	movs	r0, #0
 800b872:	e7f3      	b.n	800b85c <__match+0x10>

0800b874 <__hexnan>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	2500      	movs	r5, #0
 800b87a:	680b      	ldr	r3, [r1, #0]
 800b87c:	4682      	mov	sl, r0
 800b87e:	115e      	asrs	r6, r3, #5
 800b880:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b884:	f013 031f 	ands.w	r3, r3, #31
 800b888:	bf18      	it	ne
 800b88a:	3604      	addne	r6, #4
 800b88c:	1f37      	subs	r7, r6, #4
 800b88e:	4690      	mov	r8, r2
 800b890:	46b9      	mov	r9, r7
 800b892:	463c      	mov	r4, r7
 800b894:	46ab      	mov	fp, r5
 800b896:	b087      	sub	sp, #28
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8a0:	9502      	str	r5, [sp, #8]
 800b8a2:	784a      	ldrb	r2, [r1, #1]
 800b8a4:	1c4b      	adds	r3, r1, #1
 800b8a6:	9303      	str	r3, [sp, #12]
 800b8a8:	b342      	cbz	r2, 800b8fc <__hexnan+0x88>
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	9105      	str	r1, [sp, #20]
 800b8ae:	9204      	str	r2, [sp, #16]
 800b8b0:	f7ff fd75 	bl	800b39e <__hexdig_fun>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d14f      	bne.n	800b958 <__hexnan+0xe4>
 800b8b8:	9a04      	ldr	r2, [sp, #16]
 800b8ba:	9905      	ldr	r1, [sp, #20]
 800b8bc:	2a20      	cmp	r2, #32
 800b8be:	d818      	bhi.n	800b8f2 <__hexnan+0x7e>
 800b8c0:	9b02      	ldr	r3, [sp, #8]
 800b8c2:	459b      	cmp	fp, r3
 800b8c4:	dd13      	ble.n	800b8ee <__hexnan+0x7a>
 800b8c6:	454c      	cmp	r4, r9
 800b8c8:	d206      	bcs.n	800b8d8 <__hexnan+0x64>
 800b8ca:	2d07      	cmp	r5, #7
 800b8cc:	dc04      	bgt.n	800b8d8 <__hexnan+0x64>
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff ffa8 	bl	800b828 <L_shift>
 800b8d8:	4544      	cmp	r4, r8
 800b8da:	d950      	bls.n	800b97e <__hexnan+0x10a>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f1a4 0904 	sub.w	r9, r4, #4
 800b8e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	464c      	mov	r4, r9
 800b8ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ee:	9903      	ldr	r1, [sp, #12]
 800b8f0:	e7d7      	b.n	800b8a2 <__hexnan+0x2e>
 800b8f2:	2a29      	cmp	r2, #41	; 0x29
 800b8f4:	d155      	bne.n	800b9a2 <__hexnan+0x12e>
 800b8f6:	3102      	adds	r1, #2
 800b8f8:	f8ca 1000 	str.w	r1, [sl]
 800b8fc:	f1bb 0f00 	cmp.w	fp, #0
 800b900:	d04f      	beq.n	800b9a2 <__hexnan+0x12e>
 800b902:	454c      	cmp	r4, r9
 800b904:	d206      	bcs.n	800b914 <__hexnan+0xa0>
 800b906:	2d07      	cmp	r5, #7
 800b908:	dc04      	bgt.n	800b914 <__hexnan+0xa0>
 800b90a:	462a      	mov	r2, r5
 800b90c:	4649      	mov	r1, r9
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff ff8a 	bl	800b828 <L_shift>
 800b914:	4544      	cmp	r4, r8
 800b916:	d934      	bls.n	800b982 <__hexnan+0x10e>
 800b918:	4623      	mov	r3, r4
 800b91a:	f1a8 0204 	sub.w	r2, r8, #4
 800b91e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b922:	429f      	cmp	r7, r3
 800b924:	f842 1f04 	str.w	r1, [r2, #4]!
 800b928:	d2f9      	bcs.n	800b91e <__hexnan+0xaa>
 800b92a:	1b3b      	subs	r3, r7, r4
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	3304      	adds	r3, #4
 800b932:	3e03      	subs	r6, #3
 800b934:	3401      	adds	r4, #1
 800b936:	42a6      	cmp	r6, r4
 800b938:	bf38      	it	cc
 800b93a:	2304      	movcc	r3, #4
 800b93c:	2200      	movs	r2, #0
 800b93e:	4443      	add	r3, r8
 800b940:	f843 2b04 	str.w	r2, [r3], #4
 800b944:	429f      	cmp	r7, r3
 800b946:	d2fb      	bcs.n	800b940 <__hexnan+0xcc>
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	b91b      	cbnz	r3, 800b954 <__hexnan+0xe0>
 800b94c:	4547      	cmp	r7, r8
 800b94e:	d126      	bne.n	800b99e <__hexnan+0x12a>
 800b950:	2301      	movs	r3, #1
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	2005      	movs	r0, #5
 800b956:	e025      	b.n	800b9a4 <__hexnan+0x130>
 800b958:	3501      	adds	r5, #1
 800b95a:	2d08      	cmp	r5, #8
 800b95c:	f10b 0b01 	add.w	fp, fp, #1
 800b960:	dd06      	ble.n	800b970 <__hexnan+0xfc>
 800b962:	4544      	cmp	r4, r8
 800b964:	d9c3      	bls.n	800b8ee <__hexnan+0x7a>
 800b966:	2300      	movs	r3, #0
 800b968:	2501      	movs	r5, #1
 800b96a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b96e:	3c04      	subs	r4, #4
 800b970:	6822      	ldr	r2, [r4, #0]
 800b972:	f000 000f 	and.w	r0, r0, #15
 800b976:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b97a:	6020      	str	r0, [r4, #0]
 800b97c:	e7b7      	b.n	800b8ee <__hexnan+0x7a>
 800b97e:	2508      	movs	r5, #8
 800b980:	e7b5      	b.n	800b8ee <__hexnan+0x7a>
 800b982:	9b01      	ldr	r3, [sp, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0df      	beq.n	800b948 <__hexnan+0xd4>
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	f1c3 0320 	rsb	r3, r3, #32
 800b990:	40da      	lsrs	r2, r3
 800b992:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b996:	4013      	ands	r3, r2
 800b998:	f846 3c04 	str.w	r3, [r6, #-4]
 800b99c:	e7d4      	b.n	800b948 <__hexnan+0xd4>
 800b99e:	3f04      	subs	r7, #4
 800b9a0:	e7d2      	b.n	800b948 <__hexnan+0xd4>
 800b9a2:	2004      	movs	r0, #4
 800b9a4:	b007      	add	sp, #28
 800b9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b9ac <malloc>:
 800b9ac:	4b02      	ldr	r3, [pc, #8]	; (800b9b8 <malloc+0xc>)
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	f000 b823 	b.w	800b9fc <_malloc_r>
 800b9b6:	bf00      	nop
 800b9b8:	200001d4 	.word	0x200001d4

0800b9bc <sbrk_aligned>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	4e0e      	ldr	r6, [pc, #56]	; (800b9f8 <sbrk_aligned+0x3c>)
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	6831      	ldr	r1, [r6, #0]
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	b911      	cbnz	r1, 800b9ce <sbrk_aligned+0x12>
 800b9c8:	f000 ff7c 	bl	800c8c4 <_sbrk_r>
 800b9cc:	6030      	str	r0, [r6, #0]
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 ff77 	bl	800c8c4 <_sbrk_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d00a      	beq.n	800b9f0 <sbrk_aligned+0x34>
 800b9da:	1cc4      	adds	r4, r0, #3
 800b9dc:	f024 0403 	bic.w	r4, r4, #3
 800b9e0:	42a0      	cmp	r0, r4
 800b9e2:	d007      	beq.n	800b9f4 <sbrk_aligned+0x38>
 800b9e4:	1a21      	subs	r1, r4, r0
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f000 ff6c 	bl	800c8c4 <_sbrk_r>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d101      	bne.n	800b9f4 <sbrk_aligned+0x38>
 800b9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	20003d88 	.word	0x20003d88

0800b9fc <_malloc_r>:
 800b9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba00:	1ccd      	adds	r5, r1, #3
 800ba02:	f025 0503 	bic.w	r5, r5, #3
 800ba06:	3508      	adds	r5, #8
 800ba08:	2d0c      	cmp	r5, #12
 800ba0a:	bf38      	it	cc
 800ba0c:	250c      	movcc	r5, #12
 800ba0e:	2d00      	cmp	r5, #0
 800ba10:	4607      	mov	r7, r0
 800ba12:	db01      	blt.n	800ba18 <_malloc_r+0x1c>
 800ba14:	42a9      	cmp	r1, r5
 800ba16:	d905      	bls.n	800ba24 <_malloc_r+0x28>
 800ba18:	230c      	movs	r3, #12
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	603b      	str	r3, [r7, #0]
 800ba1e:	4630      	mov	r0, r6
 800ba20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800baf8 <_malloc_r+0xfc>
 800ba28:	f000 f87a 	bl	800bb20 <__malloc_lock>
 800ba2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba30:	461c      	mov	r4, r3
 800ba32:	bb5c      	cbnz	r4, 800ba8c <_malloc_r+0x90>
 800ba34:	4629      	mov	r1, r5
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7ff ffc0 	bl	800b9bc <sbrk_aligned>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	4604      	mov	r4, r0
 800ba40:	d155      	bne.n	800baee <_malloc_r+0xf2>
 800ba42:	f8d8 4000 	ldr.w	r4, [r8]
 800ba46:	4626      	mov	r6, r4
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	d145      	bne.n	800bad8 <_malloc_r+0xdc>
 800ba4c:	2c00      	cmp	r4, #0
 800ba4e:	d048      	beq.n	800bae2 <_malloc_r+0xe6>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	4631      	mov	r1, r6
 800ba54:	4638      	mov	r0, r7
 800ba56:	eb04 0903 	add.w	r9, r4, r3
 800ba5a:	f000 ff33 	bl	800c8c4 <_sbrk_r>
 800ba5e:	4581      	cmp	r9, r0
 800ba60:	d13f      	bne.n	800bae2 <_malloc_r+0xe6>
 800ba62:	6821      	ldr	r1, [r4, #0]
 800ba64:	4638      	mov	r0, r7
 800ba66:	1a6d      	subs	r5, r5, r1
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7ff ffa7 	bl	800b9bc <sbrk_aligned>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	d037      	beq.n	800bae2 <_malloc_r+0xe6>
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	442b      	add	r3, r5
 800ba76:	6023      	str	r3, [r4, #0]
 800ba78:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d038      	beq.n	800baf2 <_malloc_r+0xf6>
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	42a2      	cmp	r2, r4
 800ba84:	d12b      	bne.n	800bade <_malloc_r+0xe2>
 800ba86:	2200      	movs	r2, #0
 800ba88:	605a      	str	r2, [r3, #4]
 800ba8a:	e00f      	b.n	800baac <_malloc_r+0xb0>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	1b52      	subs	r2, r2, r5
 800ba90:	d41f      	bmi.n	800bad2 <_malloc_r+0xd6>
 800ba92:	2a0b      	cmp	r2, #11
 800ba94:	d917      	bls.n	800bac6 <_malloc_r+0xca>
 800ba96:	1961      	adds	r1, r4, r5
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	6025      	str	r5, [r4, #0]
 800ba9c:	bf18      	it	ne
 800ba9e:	6059      	strne	r1, [r3, #4]
 800baa0:	6863      	ldr	r3, [r4, #4]
 800baa2:	bf08      	it	eq
 800baa4:	f8c8 1000 	streq.w	r1, [r8]
 800baa8:	5162      	str	r2, [r4, r5]
 800baaa:	604b      	str	r3, [r1, #4]
 800baac:	4638      	mov	r0, r7
 800baae:	f104 060b 	add.w	r6, r4, #11
 800bab2:	f000 f83b 	bl	800bb2c <__malloc_unlock>
 800bab6:	f026 0607 	bic.w	r6, r6, #7
 800baba:	1d23      	adds	r3, r4, #4
 800babc:	1af2      	subs	r2, r6, r3
 800babe:	d0ae      	beq.n	800ba1e <_malloc_r+0x22>
 800bac0:	1b9b      	subs	r3, r3, r6
 800bac2:	50a3      	str	r3, [r4, r2]
 800bac4:	e7ab      	b.n	800ba1e <_malloc_r+0x22>
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	6862      	ldr	r2, [r4, #4]
 800baca:	d1dd      	bne.n	800ba88 <_malloc_r+0x8c>
 800bacc:	f8c8 2000 	str.w	r2, [r8]
 800bad0:	e7ec      	b.n	800baac <_malloc_r+0xb0>
 800bad2:	4623      	mov	r3, r4
 800bad4:	6864      	ldr	r4, [r4, #4]
 800bad6:	e7ac      	b.n	800ba32 <_malloc_r+0x36>
 800bad8:	4634      	mov	r4, r6
 800bada:	6876      	ldr	r6, [r6, #4]
 800badc:	e7b4      	b.n	800ba48 <_malloc_r+0x4c>
 800bade:	4613      	mov	r3, r2
 800bae0:	e7cc      	b.n	800ba7c <_malloc_r+0x80>
 800bae2:	230c      	movs	r3, #12
 800bae4:	4638      	mov	r0, r7
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	f000 f820 	bl	800bb2c <__malloc_unlock>
 800baec:	e797      	b.n	800ba1e <_malloc_r+0x22>
 800baee:	6025      	str	r5, [r4, #0]
 800baf0:	e7dc      	b.n	800baac <_malloc_r+0xb0>
 800baf2:	605b      	str	r3, [r3, #4]
 800baf4:	deff      	udf	#255	; 0xff
 800baf6:	bf00      	nop
 800baf8:	20003d84 	.word	0x20003d84

0800bafc <__ascii_mbtowc>:
 800bafc:	b082      	sub	sp, #8
 800bafe:	b901      	cbnz	r1, 800bb02 <__ascii_mbtowc+0x6>
 800bb00:	a901      	add	r1, sp, #4
 800bb02:	b142      	cbz	r2, 800bb16 <__ascii_mbtowc+0x1a>
 800bb04:	b14b      	cbz	r3, 800bb1a <__ascii_mbtowc+0x1e>
 800bb06:	7813      	ldrb	r3, [r2, #0]
 800bb08:	600b      	str	r3, [r1, #0]
 800bb0a:	7812      	ldrb	r2, [r2, #0]
 800bb0c:	1e10      	subs	r0, r2, #0
 800bb0e:	bf18      	it	ne
 800bb10:	2001      	movne	r0, #1
 800bb12:	b002      	add	sp, #8
 800bb14:	4770      	bx	lr
 800bb16:	4610      	mov	r0, r2
 800bb18:	e7fb      	b.n	800bb12 <__ascii_mbtowc+0x16>
 800bb1a:	f06f 0001 	mvn.w	r0, #1
 800bb1e:	e7f8      	b.n	800bb12 <__ascii_mbtowc+0x16>

0800bb20 <__malloc_lock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	; (800bb28 <__malloc_lock+0x8>)
 800bb22:	f7fe bd0f 	b.w	800a544 <__retarget_lock_acquire_recursive>
 800bb26:	bf00      	nop
 800bb28:	20003d80 	.word	0x20003d80

0800bb2c <__malloc_unlock>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	; (800bb34 <__malloc_unlock+0x8>)
 800bb2e:	f7fe bd0a 	b.w	800a546 <__retarget_lock_release_recursive>
 800bb32:	bf00      	nop
 800bb34:	20003d80 	.word	0x20003d80

0800bb38 <_Balloc>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	69c6      	ldr	r6, [r0, #28]
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	460d      	mov	r5, r1
 800bb40:	b976      	cbnz	r6, 800bb60 <_Balloc+0x28>
 800bb42:	2010      	movs	r0, #16
 800bb44:	f7ff ff32 	bl	800b9ac <malloc>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	61e0      	str	r0, [r4, #28]
 800bb4c:	b920      	cbnz	r0, 800bb58 <_Balloc+0x20>
 800bb4e:	216b      	movs	r1, #107	; 0x6b
 800bb50:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <_Balloc+0x78>)
 800bb52:	4818      	ldr	r0, [pc, #96]	; (800bbb4 <_Balloc+0x7c>)
 800bb54:	f000 fec6 	bl	800c8e4 <__assert_func>
 800bb58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb5c:	6006      	str	r6, [r0, #0]
 800bb5e:	60c6      	str	r6, [r0, #12]
 800bb60:	69e6      	ldr	r6, [r4, #28]
 800bb62:	68f3      	ldr	r3, [r6, #12]
 800bb64:	b183      	cbz	r3, 800bb88 <_Balloc+0x50>
 800bb66:	69e3      	ldr	r3, [r4, #28]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb6e:	b9b8      	cbnz	r0, 800bba0 <_Balloc+0x68>
 800bb70:	2101      	movs	r1, #1
 800bb72:	fa01 f605 	lsl.w	r6, r1, r5
 800bb76:	1d72      	adds	r2, r6, #5
 800bb78:	4620      	mov	r0, r4
 800bb7a:	0092      	lsls	r2, r2, #2
 800bb7c:	f000 fed0 	bl	800c920 <_calloc_r>
 800bb80:	b160      	cbz	r0, 800bb9c <_Balloc+0x64>
 800bb82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb86:	e00e      	b.n	800bba6 <_Balloc+0x6e>
 800bb88:	2221      	movs	r2, #33	; 0x21
 800bb8a:	2104      	movs	r1, #4
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fec7 	bl	800c920 <_calloc_r>
 800bb92:	69e3      	ldr	r3, [r4, #28]
 800bb94:	60f0      	str	r0, [r6, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e4      	bne.n	800bb66 <_Balloc+0x2e>
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}
 800bba0:	6802      	ldr	r2, [r0, #0]
 800bba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bba6:	2300      	movs	r3, #0
 800bba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbac:	e7f7      	b.n	800bb9e <_Balloc+0x66>
 800bbae:	bf00      	nop
 800bbb0:	0800d1b1 	.word	0x0800d1b1
 800bbb4:	0800d291 	.word	0x0800d291

0800bbb8 <_Bfree>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	69c6      	ldr	r6, [r0, #28]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	b976      	cbnz	r6, 800bbe0 <_Bfree+0x28>
 800bbc2:	2010      	movs	r0, #16
 800bbc4:	f7ff fef2 	bl	800b9ac <malloc>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	61e8      	str	r0, [r5, #28]
 800bbcc:	b920      	cbnz	r0, 800bbd8 <_Bfree+0x20>
 800bbce:	218f      	movs	r1, #143	; 0x8f
 800bbd0:	4b08      	ldr	r3, [pc, #32]	; (800bbf4 <_Bfree+0x3c>)
 800bbd2:	4809      	ldr	r0, [pc, #36]	; (800bbf8 <_Bfree+0x40>)
 800bbd4:	f000 fe86 	bl	800c8e4 <__assert_func>
 800bbd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbdc:	6006      	str	r6, [r0, #0]
 800bbde:	60c6      	str	r6, [r0, #12]
 800bbe0:	b13c      	cbz	r4, 800bbf2 <_Bfree+0x3a>
 800bbe2:	69eb      	ldr	r3, [r5, #28]
 800bbe4:	6862      	ldr	r2, [r4, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbec:	6021      	str	r1, [r4, #0]
 800bbee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}
 800bbf4:	0800d1b1 	.word	0x0800d1b1
 800bbf8:	0800d291 	.word	0x0800d291

0800bbfc <__multadd>:
 800bbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc00:	4607      	mov	r7, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	461e      	mov	r6, r3
 800bc06:	2000      	movs	r0, #0
 800bc08:	690d      	ldr	r5, [r1, #16]
 800bc0a:	f101 0c14 	add.w	ip, r1, #20
 800bc0e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc12:	3001      	adds	r0, #1
 800bc14:	b299      	uxth	r1, r3
 800bc16:	fb02 6101 	mla	r1, r2, r1, r6
 800bc1a:	0c1e      	lsrs	r6, r3, #16
 800bc1c:	0c0b      	lsrs	r3, r1, #16
 800bc1e:	fb02 3306 	mla	r3, r2, r6, r3
 800bc22:	b289      	uxth	r1, r1
 800bc24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc28:	4285      	cmp	r5, r0
 800bc2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc2e:	f84c 1b04 	str.w	r1, [ip], #4
 800bc32:	dcec      	bgt.n	800bc0e <__multadd+0x12>
 800bc34:	b30e      	cbz	r6, 800bc7a <__multadd+0x7e>
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	42ab      	cmp	r3, r5
 800bc3a:	dc19      	bgt.n	800bc70 <__multadd+0x74>
 800bc3c:	6861      	ldr	r1, [r4, #4]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	3101      	adds	r1, #1
 800bc42:	f7ff ff79 	bl	800bb38 <_Balloc>
 800bc46:	4680      	mov	r8, r0
 800bc48:	b928      	cbnz	r0, 800bc56 <__multadd+0x5a>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	21ba      	movs	r1, #186	; 0xba
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	; (800bc80 <__multadd+0x84>)
 800bc50:	480c      	ldr	r0, [pc, #48]	; (800bc84 <__multadd+0x88>)
 800bc52:	f000 fe47 	bl	800c8e4 <__assert_func>
 800bc56:	6922      	ldr	r2, [r4, #16]
 800bc58:	f104 010c 	add.w	r1, r4, #12
 800bc5c:	3202      	adds	r2, #2
 800bc5e:	0092      	lsls	r2, r2, #2
 800bc60:	300c      	adds	r0, #12
 800bc62:	f7fe fc7f 	bl	800a564 <memcpy>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff ffa5 	bl	800bbb8 <_Bfree>
 800bc6e:	4644      	mov	r4, r8
 800bc70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc74:	3501      	adds	r5, #1
 800bc76:	615e      	str	r6, [r3, #20]
 800bc78:	6125      	str	r5, [r4, #16]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	0800d220 	.word	0x0800d220
 800bc84:	0800d291 	.word	0x0800d291

0800bc88 <__s2b>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	4615      	mov	r5, r2
 800bc8e:	2209      	movs	r2, #9
 800bc90:	461f      	mov	r7, r3
 800bc92:	3308      	adds	r3, #8
 800bc94:	460c      	mov	r4, r1
 800bc96:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	2100      	movs	r1, #0
 800bca0:	429a      	cmp	r2, r3
 800bca2:	db09      	blt.n	800bcb8 <__s2b+0x30>
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff ff47 	bl	800bb38 <_Balloc>
 800bcaa:	b940      	cbnz	r0, 800bcbe <__s2b+0x36>
 800bcac:	4602      	mov	r2, r0
 800bcae:	21d3      	movs	r1, #211	; 0xd3
 800bcb0:	4b18      	ldr	r3, [pc, #96]	; (800bd14 <__s2b+0x8c>)
 800bcb2:	4819      	ldr	r0, [pc, #100]	; (800bd18 <__s2b+0x90>)
 800bcb4:	f000 fe16 	bl	800c8e4 <__assert_func>
 800bcb8:	0052      	lsls	r2, r2, #1
 800bcba:	3101      	adds	r1, #1
 800bcbc:	e7f0      	b.n	800bca0 <__s2b+0x18>
 800bcbe:	9b08      	ldr	r3, [sp, #32]
 800bcc0:	2d09      	cmp	r5, #9
 800bcc2:	6143      	str	r3, [r0, #20]
 800bcc4:	f04f 0301 	mov.w	r3, #1
 800bcc8:	6103      	str	r3, [r0, #16]
 800bcca:	dd16      	ble.n	800bcfa <__s2b+0x72>
 800bccc:	f104 0909 	add.w	r9, r4, #9
 800bcd0:	46c8      	mov	r8, r9
 800bcd2:	442c      	add	r4, r5
 800bcd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcd8:	4601      	mov	r1, r0
 800bcda:	220a      	movs	r2, #10
 800bcdc:	4630      	mov	r0, r6
 800bcde:	3b30      	subs	r3, #48	; 0x30
 800bce0:	f7ff ff8c 	bl	800bbfc <__multadd>
 800bce4:	45a0      	cmp	r8, r4
 800bce6:	d1f5      	bne.n	800bcd4 <__s2b+0x4c>
 800bce8:	f1a5 0408 	sub.w	r4, r5, #8
 800bcec:	444c      	add	r4, r9
 800bcee:	1b2d      	subs	r5, r5, r4
 800bcf0:	1963      	adds	r3, r4, r5
 800bcf2:	42bb      	cmp	r3, r7
 800bcf4:	db04      	blt.n	800bd00 <__s2b+0x78>
 800bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	2509      	movs	r5, #9
 800bcfc:	340a      	adds	r4, #10
 800bcfe:	e7f6      	b.n	800bcee <__s2b+0x66>
 800bd00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd04:	4601      	mov	r1, r0
 800bd06:	220a      	movs	r2, #10
 800bd08:	4630      	mov	r0, r6
 800bd0a:	3b30      	subs	r3, #48	; 0x30
 800bd0c:	f7ff ff76 	bl	800bbfc <__multadd>
 800bd10:	e7ee      	b.n	800bcf0 <__s2b+0x68>
 800bd12:	bf00      	nop
 800bd14:	0800d220 	.word	0x0800d220
 800bd18:	0800d291 	.word	0x0800d291

0800bd1c <__hi0bits>:
 800bd1c:	0c02      	lsrs	r2, r0, #16
 800bd1e:	0412      	lsls	r2, r2, #16
 800bd20:	4603      	mov	r3, r0
 800bd22:	b9ca      	cbnz	r2, 800bd58 <__hi0bits+0x3c>
 800bd24:	0403      	lsls	r3, r0, #16
 800bd26:	2010      	movs	r0, #16
 800bd28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bd2c:	bf04      	itt	eq
 800bd2e:	021b      	lsleq	r3, r3, #8
 800bd30:	3008      	addeq	r0, #8
 800bd32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bd36:	bf04      	itt	eq
 800bd38:	011b      	lsleq	r3, r3, #4
 800bd3a:	3004      	addeq	r0, #4
 800bd3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bd40:	bf04      	itt	eq
 800bd42:	009b      	lsleq	r3, r3, #2
 800bd44:	3002      	addeq	r0, #2
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	db05      	blt.n	800bd56 <__hi0bits+0x3a>
 800bd4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bd4e:	f100 0001 	add.w	r0, r0, #1
 800bd52:	bf08      	it	eq
 800bd54:	2020      	moveq	r0, #32
 800bd56:	4770      	bx	lr
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e7e5      	b.n	800bd28 <__hi0bits+0xc>

0800bd5c <__lo0bits>:
 800bd5c:	6803      	ldr	r3, [r0, #0]
 800bd5e:	4602      	mov	r2, r0
 800bd60:	f013 0007 	ands.w	r0, r3, #7
 800bd64:	d00b      	beq.n	800bd7e <__lo0bits+0x22>
 800bd66:	07d9      	lsls	r1, r3, #31
 800bd68:	d421      	bmi.n	800bdae <__lo0bits+0x52>
 800bd6a:	0798      	lsls	r0, r3, #30
 800bd6c:	bf49      	itett	mi
 800bd6e:	085b      	lsrmi	r3, r3, #1
 800bd70:	089b      	lsrpl	r3, r3, #2
 800bd72:	2001      	movmi	r0, #1
 800bd74:	6013      	strmi	r3, [r2, #0]
 800bd76:	bf5c      	itt	pl
 800bd78:	2002      	movpl	r0, #2
 800bd7a:	6013      	strpl	r3, [r2, #0]
 800bd7c:	4770      	bx	lr
 800bd7e:	b299      	uxth	r1, r3
 800bd80:	b909      	cbnz	r1, 800bd86 <__lo0bits+0x2a>
 800bd82:	2010      	movs	r0, #16
 800bd84:	0c1b      	lsrs	r3, r3, #16
 800bd86:	b2d9      	uxtb	r1, r3
 800bd88:	b909      	cbnz	r1, 800bd8e <__lo0bits+0x32>
 800bd8a:	3008      	adds	r0, #8
 800bd8c:	0a1b      	lsrs	r3, r3, #8
 800bd8e:	0719      	lsls	r1, r3, #28
 800bd90:	bf04      	itt	eq
 800bd92:	091b      	lsreq	r3, r3, #4
 800bd94:	3004      	addeq	r0, #4
 800bd96:	0799      	lsls	r1, r3, #30
 800bd98:	bf04      	itt	eq
 800bd9a:	089b      	lsreq	r3, r3, #2
 800bd9c:	3002      	addeq	r0, #2
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d403      	bmi.n	800bdaa <__lo0bits+0x4e>
 800bda2:	085b      	lsrs	r3, r3, #1
 800bda4:	f100 0001 	add.w	r0, r0, #1
 800bda8:	d003      	beq.n	800bdb2 <__lo0bits+0x56>
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	4770      	bx	lr
 800bdae:	2000      	movs	r0, #0
 800bdb0:	4770      	bx	lr
 800bdb2:	2020      	movs	r0, #32
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <__i2b>:
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	460c      	mov	r4, r1
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	f7ff febb 	bl	800bb38 <_Balloc>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	b928      	cbnz	r0, 800bdd2 <__i2b+0x1a>
 800bdc6:	f240 1145 	movw	r1, #325	; 0x145
 800bdca:	4b04      	ldr	r3, [pc, #16]	; (800bddc <__i2b+0x24>)
 800bdcc:	4804      	ldr	r0, [pc, #16]	; (800bde0 <__i2b+0x28>)
 800bdce:	f000 fd89 	bl	800c8e4 <__assert_func>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	6144      	str	r4, [r0, #20]
 800bdd6:	6103      	str	r3, [r0, #16]
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	bf00      	nop
 800bddc:	0800d220 	.word	0x0800d220
 800bde0:	0800d291 	.word	0x0800d291

0800bde4 <__multiply>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	4691      	mov	r9, r2
 800bdea:	690a      	ldr	r2, [r1, #16]
 800bdec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bfbe      	ittt	lt
 800bdf6:	460b      	movlt	r3, r1
 800bdf8:	464c      	movlt	r4, r9
 800bdfa:	4699      	movlt	r9, r3
 800bdfc:	6927      	ldr	r7, [r4, #16]
 800bdfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	6861      	ldr	r1, [r4, #4]
 800be06:	eb07 060a 	add.w	r6, r7, sl
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	b085      	sub	sp, #20
 800be0e:	bfb8      	it	lt
 800be10:	3101      	addlt	r1, #1
 800be12:	f7ff fe91 	bl	800bb38 <_Balloc>
 800be16:	b930      	cbnz	r0, 800be26 <__multiply+0x42>
 800be18:	4602      	mov	r2, r0
 800be1a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be1e:	4b43      	ldr	r3, [pc, #268]	; (800bf2c <__multiply+0x148>)
 800be20:	4843      	ldr	r0, [pc, #268]	; (800bf30 <__multiply+0x14c>)
 800be22:	f000 fd5f 	bl	800c8e4 <__assert_func>
 800be26:	f100 0514 	add.w	r5, r0, #20
 800be2a:	462b      	mov	r3, r5
 800be2c:	2200      	movs	r2, #0
 800be2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be32:	4543      	cmp	r3, r8
 800be34:	d321      	bcc.n	800be7a <__multiply+0x96>
 800be36:	f104 0314 	add.w	r3, r4, #20
 800be3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be3e:	f109 0314 	add.w	r3, r9, #20
 800be42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be46:	9202      	str	r2, [sp, #8]
 800be48:	1b3a      	subs	r2, r7, r4
 800be4a:	3a15      	subs	r2, #21
 800be4c:	f022 0203 	bic.w	r2, r2, #3
 800be50:	3204      	adds	r2, #4
 800be52:	f104 0115 	add.w	r1, r4, #21
 800be56:	428f      	cmp	r7, r1
 800be58:	bf38      	it	cc
 800be5a:	2204      	movcc	r2, #4
 800be5c:	9201      	str	r2, [sp, #4]
 800be5e:	9a02      	ldr	r2, [sp, #8]
 800be60:	9303      	str	r3, [sp, #12]
 800be62:	429a      	cmp	r2, r3
 800be64:	d80c      	bhi.n	800be80 <__multiply+0x9c>
 800be66:	2e00      	cmp	r6, #0
 800be68:	dd03      	ble.n	800be72 <__multiply+0x8e>
 800be6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d05a      	beq.n	800bf28 <__multiply+0x144>
 800be72:	6106      	str	r6, [r0, #16]
 800be74:	b005      	add	sp, #20
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7a:	f843 2b04 	str.w	r2, [r3], #4
 800be7e:	e7d8      	b.n	800be32 <__multiply+0x4e>
 800be80:	f8b3 a000 	ldrh.w	sl, [r3]
 800be84:	f1ba 0f00 	cmp.w	sl, #0
 800be88:	d023      	beq.n	800bed2 <__multiply+0xee>
 800be8a:	46a9      	mov	r9, r5
 800be8c:	f04f 0c00 	mov.w	ip, #0
 800be90:	f104 0e14 	add.w	lr, r4, #20
 800be94:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be98:	f8d9 1000 	ldr.w	r1, [r9]
 800be9c:	fa1f fb82 	uxth.w	fp, r2
 800bea0:	b289      	uxth	r1, r1
 800bea2:	fb0a 110b 	mla	r1, sl, fp, r1
 800bea6:	4461      	add	r1, ip
 800bea8:	f8d9 c000 	ldr.w	ip, [r9]
 800beac:	0c12      	lsrs	r2, r2, #16
 800beae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800beb2:	fb0a c202 	mla	r2, sl, r2, ip
 800beb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800beba:	b289      	uxth	r1, r1
 800bebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bec0:	4577      	cmp	r7, lr
 800bec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bec6:	f849 1b04 	str.w	r1, [r9], #4
 800beca:	d8e3      	bhi.n	800be94 <__multiply+0xb0>
 800becc:	9a01      	ldr	r2, [sp, #4]
 800bece:	f845 c002 	str.w	ip, [r5, r2]
 800bed2:	9a03      	ldr	r2, [sp, #12]
 800bed4:	3304      	adds	r3, #4
 800bed6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	d021      	beq.n	800bf24 <__multiply+0x140>
 800bee0:	46ae      	mov	lr, r5
 800bee2:	f04f 0a00 	mov.w	sl, #0
 800bee6:	6829      	ldr	r1, [r5, #0]
 800bee8:	f104 0c14 	add.w	ip, r4, #20
 800beec:	f8bc b000 	ldrh.w	fp, [ip]
 800bef0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bef4:	b289      	uxth	r1, r1
 800bef6:	fb09 220b 	mla	r2, r9, fp, r2
 800befa:	4452      	add	r2, sl
 800befc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf00:	f84e 1b04 	str.w	r1, [lr], #4
 800bf04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf0c:	f8be 1000 	ldrh.w	r1, [lr]
 800bf10:	4567      	cmp	r7, ip
 800bf12:	fb09 110a 	mla	r1, r9, sl, r1
 800bf16:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf1e:	d8e5      	bhi.n	800beec <__multiply+0x108>
 800bf20:	9a01      	ldr	r2, [sp, #4]
 800bf22:	50a9      	str	r1, [r5, r2]
 800bf24:	3504      	adds	r5, #4
 800bf26:	e79a      	b.n	800be5e <__multiply+0x7a>
 800bf28:	3e01      	subs	r6, #1
 800bf2a:	e79c      	b.n	800be66 <__multiply+0x82>
 800bf2c:	0800d220 	.word	0x0800d220
 800bf30:	0800d291 	.word	0x0800d291

0800bf34 <__pow5mult>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	4615      	mov	r5, r2
 800bf3a:	f012 0203 	ands.w	r2, r2, #3
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	d007      	beq.n	800bf54 <__pow5mult+0x20>
 800bf44:	4c25      	ldr	r4, [pc, #148]	; (800bfdc <__pow5mult+0xa8>)
 800bf46:	3a01      	subs	r2, #1
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf4e:	f7ff fe55 	bl	800bbfc <__multadd>
 800bf52:	4607      	mov	r7, r0
 800bf54:	10ad      	asrs	r5, r5, #2
 800bf56:	d03d      	beq.n	800bfd4 <__pow5mult+0xa0>
 800bf58:	69f4      	ldr	r4, [r6, #28]
 800bf5a:	b97c      	cbnz	r4, 800bf7c <__pow5mult+0x48>
 800bf5c:	2010      	movs	r0, #16
 800bf5e:	f7ff fd25 	bl	800b9ac <malloc>
 800bf62:	4602      	mov	r2, r0
 800bf64:	61f0      	str	r0, [r6, #28]
 800bf66:	b928      	cbnz	r0, 800bf74 <__pow5mult+0x40>
 800bf68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bf6c:	4b1c      	ldr	r3, [pc, #112]	; (800bfe0 <__pow5mult+0xac>)
 800bf6e:	481d      	ldr	r0, [pc, #116]	; (800bfe4 <__pow5mult+0xb0>)
 800bf70:	f000 fcb8 	bl	800c8e4 <__assert_func>
 800bf74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf78:	6004      	str	r4, [r0, #0]
 800bf7a:	60c4      	str	r4, [r0, #12]
 800bf7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bf80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf84:	b94c      	cbnz	r4, 800bf9a <__pow5mult+0x66>
 800bf86:	f240 2171 	movw	r1, #625	; 0x271
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ff14 	bl	800bdb8 <__i2b>
 800bf90:	2300      	movs	r3, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf98:	6003      	str	r3, [r0, #0]
 800bf9a:	f04f 0900 	mov.w	r9, #0
 800bf9e:	07eb      	lsls	r3, r5, #31
 800bfa0:	d50a      	bpl.n	800bfb8 <__pow5mult+0x84>
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f7ff ff1c 	bl	800bde4 <__multiply>
 800bfac:	4680      	mov	r8, r0
 800bfae:	4639      	mov	r1, r7
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7ff fe01 	bl	800bbb8 <_Bfree>
 800bfb6:	4647      	mov	r7, r8
 800bfb8:	106d      	asrs	r5, r5, #1
 800bfba:	d00b      	beq.n	800bfd4 <__pow5mult+0xa0>
 800bfbc:	6820      	ldr	r0, [r4, #0]
 800bfbe:	b938      	cbnz	r0, 800bfd0 <__pow5mult+0x9c>
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff ff0d 	bl	800bde4 <__multiply>
 800bfca:	6020      	str	r0, [r4, #0]
 800bfcc:	f8c0 9000 	str.w	r9, [r0]
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	e7e4      	b.n	800bf9e <__pow5mult+0x6a>
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800d3e0 	.word	0x0800d3e0
 800bfe0:	0800d1b1 	.word	0x0800d1b1
 800bfe4:	0800d291 	.word	0x0800d291

0800bfe8 <__lshift>:
 800bfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	4607      	mov	r7, r0
 800bff0:	4691      	mov	r9, r2
 800bff2:	6923      	ldr	r3, [r4, #16]
 800bff4:	6849      	ldr	r1, [r1, #4]
 800bff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c000:	f108 0601 	add.w	r6, r8, #1
 800c004:	42b3      	cmp	r3, r6
 800c006:	db0b      	blt.n	800c020 <__lshift+0x38>
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff fd95 	bl	800bb38 <_Balloc>
 800c00e:	4605      	mov	r5, r0
 800c010:	b948      	cbnz	r0, 800c026 <__lshift+0x3e>
 800c012:	4602      	mov	r2, r0
 800c014:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c018:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <__lshift+0xd0>)
 800c01a:	4828      	ldr	r0, [pc, #160]	; (800c0bc <__lshift+0xd4>)
 800c01c:	f000 fc62 	bl	800c8e4 <__assert_func>
 800c020:	3101      	adds	r1, #1
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	e7ee      	b.n	800c004 <__lshift+0x1c>
 800c026:	2300      	movs	r3, #0
 800c028:	f100 0114 	add.w	r1, r0, #20
 800c02c:	f100 0210 	add.w	r2, r0, #16
 800c030:	4618      	mov	r0, r3
 800c032:	4553      	cmp	r3, sl
 800c034:	db33      	blt.n	800c09e <__lshift+0xb6>
 800c036:	6920      	ldr	r0, [r4, #16]
 800c038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c03c:	f104 0314 	add.w	r3, r4, #20
 800c040:	f019 091f 	ands.w	r9, r9, #31
 800c044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c04c:	d02b      	beq.n	800c0a6 <__lshift+0xbe>
 800c04e:	468a      	mov	sl, r1
 800c050:	2200      	movs	r2, #0
 800c052:	f1c9 0e20 	rsb	lr, r9, #32
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	fa00 f009 	lsl.w	r0, r0, r9
 800c05c:	4310      	orrs	r0, r2
 800c05e:	f84a 0b04 	str.w	r0, [sl], #4
 800c062:	f853 2b04 	ldr.w	r2, [r3], #4
 800c066:	459c      	cmp	ip, r3
 800c068:	fa22 f20e 	lsr.w	r2, r2, lr
 800c06c:	d8f3      	bhi.n	800c056 <__lshift+0x6e>
 800c06e:	ebac 0304 	sub.w	r3, ip, r4
 800c072:	3b15      	subs	r3, #21
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	3304      	adds	r3, #4
 800c07a:	f104 0015 	add.w	r0, r4, #21
 800c07e:	4584      	cmp	ip, r0
 800c080:	bf38      	it	cc
 800c082:	2304      	movcc	r3, #4
 800c084:	50ca      	str	r2, [r1, r3]
 800c086:	b10a      	cbz	r2, 800c08c <__lshift+0xa4>
 800c088:	f108 0602 	add.w	r6, r8, #2
 800c08c:	3e01      	subs	r6, #1
 800c08e:	4638      	mov	r0, r7
 800c090:	4621      	mov	r1, r4
 800c092:	612e      	str	r6, [r5, #16]
 800c094:	f7ff fd90 	bl	800bbb8 <_Bfree>
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	e7c5      	b.n	800c032 <__lshift+0x4a>
 800c0a6:	3904      	subs	r1, #4
 800c0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ac:	459c      	cmp	ip, r3
 800c0ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0b2:	d8f9      	bhi.n	800c0a8 <__lshift+0xc0>
 800c0b4:	e7ea      	b.n	800c08c <__lshift+0xa4>
 800c0b6:	bf00      	nop
 800c0b8:	0800d220 	.word	0x0800d220
 800c0bc:	0800d291 	.word	0x0800d291

0800c0c0 <__mcmp>:
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	690a      	ldr	r2, [r1, #16]
 800c0c4:	6900      	ldr	r0, [r0, #16]
 800c0c6:	b530      	push	{r4, r5, lr}
 800c0c8:	1a80      	subs	r0, r0, r2
 800c0ca:	d10d      	bne.n	800c0e8 <__mcmp+0x28>
 800c0cc:	3314      	adds	r3, #20
 800c0ce:	3114      	adds	r1, #20
 800c0d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0e0:	4295      	cmp	r5, r2
 800c0e2:	d002      	beq.n	800c0ea <__mcmp+0x2a>
 800c0e4:	d304      	bcc.n	800c0f0 <__mcmp+0x30>
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	bd30      	pop	{r4, r5, pc}
 800c0ea:	42a3      	cmp	r3, r4
 800c0ec:	d3f4      	bcc.n	800c0d8 <__mcmp+0x18>
 800c0ee:	e7fb      	b.n	800c0e8 <__mcmp+0x28>
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e7f8      	b.n	800c0e8 <__mcmp+0x28>
	...

0800c0f8 <__mdiff>:
 800c0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	4607      	mov	r7, r0
 800c100:	4611      	mov	r1, r2
 800c102:	4628      	mov	r0, r5
 800c104:	4614      	mov	r4, r2
 800c106:	f7ff ffdb 	bl	800c0c0 <__mcmp>
 800c10a:	1e06      	subs	r6, r0, #0
 800c10c:	d111      	bne.n	800c132 <__mdiff+0x3a>
 800c10e:	4631      	mov	r1, r6
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff fd11 	bl	800bb38 <_Balloc>
 800c116:	4602      	mov	r2, r0
 800c118:	b928      	cbnz	r0, 800c126 <__mdiff+0x2e>
 800c11a:	f240 2137 	movw	r1, #567	; 0x237
 800c11e:	4b3a      	ldr	r3, [pc, #232]	; (800c208 <__mdiff+0x110>)
 800c120:	483a      	ldr	r0, [pc, #232]	; (800c20c <__mdiff+0x114>)
 800c122:	f000 fbdf 	bl	800c8e4 <__assert_func>
 800c126:	2301      	movs	r3, #1
 800c128:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c12c:	4610      	mov	r0, r2
 800c12e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	bfa4      	itt	ge
 800c134:	4623      	movge	r3, r4
 800c136:	462c      	movge	r4, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	6861      	ldr	r1, [r4, #4]
 800c13c:	bfa6      	itte	ge
 800c13e:	461d      	movge	r5, r3
 800c140:	2600      	movge	r6, #0
 800c142:	2601      	movlt	r6, #1
 800c144:	f7ff fcf8 	bl	800bb38 <_Balloc>
 800c148:	4602      	mov	r2, r0
 800c14a:	b918      	cbnz	r0, 800c154 <__mdiff+0x5c>
 800c14c:	f240 2145 	movw	r1, #581	; 0x245
 800c150:	4b2d      	ldr	r3, [pc, #180]	; (800c208 <__mdiff+0x110>)
 800c152:	e7e5      	b.n	800c120 <__mdiff+0x28>
 800c154:	f102 0814 	add.w	r8, r2, #20
 800c158:	46c2      	mov	sl, r8
 800c15a:	f04f 0c00 	mov.w	ip, #0
 800c15e:	6927      	ldr	r7, [r4, #16]
 800c160:	60c6      	str	r6, [r0, #12]
 800c162:	692e      	ldr	r6, [r5, #16]
 800c164:	f104 0014 	add.w	r0, r4, #20
 800c168:	f105 0914 	add.w	r9, r5, #20
 800c16c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c170:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c174:	3410      	adds	r4, #16
 800c176:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c17a:	f859 3b04 	ldr.w	r3, [r9], #4
 800c17e:	fa1f f18b 	uxth.w	r1, fp
 800c182:	4461      	add	r1, ip
 800c184:	fa1f fc83 	uxth.w	ip, r3
 800c188:	0c1b      	lsrs	r3, r3, #16
 800c18a:	eba1 010c 	sub.w	r1, r1, ip
 800c18e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c192:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c196:	b289      	uxth	r1, r1
 800c198:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c19c:	454e      	cmp	r6, r9
 800c19e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c1a2:	f84a 1b04 	str.w	r1, [sl], #4
 800c1a6:	d8e6      	bhi.n	800c176 <__mdiff+0x7e>
 800c1a8:	1b73      	subs	r3, r6, r5
 800c1aa:	3b15      	subs	r3, #21
 800c1ac:	f023 0303 	bic.w	r3, r3, #3
 800c1b0:	3515      	adds	r5, #21
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	42ae      	cmp	r6, r5
 800c1b6:	bf38      	it	cc
 800c1b8:	2304      	movcc	r3, #4
 800c1ba:	4418      	add	r0, r3
 800c1bc:	4443      	add	r3, r8
 800c1be:	461e      	mov	r6, r3
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	4575      	cmp	r5, lr
 800c1c4:	d30e      	bcc.n	800c1e4 <__mdiff+0xec>
 800c1c6:	f10e 0103 	add.w	r1, lr, #3
 800c1ca:	1a09      	subs	r1, r1, r0
 800c1cc:	f021 0103 	bic.w	r1, r1, #3
 800c1d0:	3803      	subs	r0, #3
 800c1d2:	4586      	cmp	lr, r0
 800c1d4:	bf38      	it	cc
 800c1d6:	2100      	movcc	r1, #0
 800c1d8:	440b      	add	r3, r1
 800c1da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1de:	b189      	cbz	r1, 800c204 <__mdiff+0x10c>
 800c1e0:	6117      	str	r7, [r2, #16]
 800c1e2:	e7a3      	b.n	800c12c <__mdiff+0x34>
 800c1e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c1e8:	fa1f f188 	uxth.w	r1, r8
 800c1ec:	4461      	add	r1, ip
 800c1ee:	140c      	asrs	r4, r1, #16
 800c1f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1f4:	b289      	uxth	r1, r1
 800c1f6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c1fa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c1fe:	f846 1b04 	str.w	r1, [r6], #4
 800c202:	e7de      	b.n	800c1c2 <__mdiff+0xca>
 800c204:	3f01      	subs	r7, #1
 800c206:	e7e8      	b.n	800c1da <__mdiff+0xe2>
 800c208:	0800d220 	.word	0x0800d220
 800c20c:	0800d291 	.word	0x0800d291

0800c210 <__ulp>:
 800c210:	4b0e      	ldr	r3, [pc, #56]	; (800c24c <__ulp+0x3c>)
 800c212:	400b      	ands	r3, r1
 800c214:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dc08      	bgt.n	800c22e <__ulp+0x1e>
 800c21c:	425b      	negs	r3, r3
 800c21e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c222:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c226:	da04      	bge.n	800c232 <__ulp+0x22>
 800c228:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c22c:	4113      	asrs	r3, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	e008      	b.n	800c244 <__ulp+0x34>
 800c232:	f1a2 0314 	sub.w	r3, r2, #20
 800c236:	2b1e      	cmp	r3, #30
 800c238:	bfd6      	itet	le
 800c23a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c23e:	2201      	movgt	r2, #1
 800c240:	40da      	lsrle	r2, r3
 800c242:	2300      	movs	r3, #0
 800c244:	4619      	mov	r1, r3
 800c246:	4610      	mov	r0, r2
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	7ff00000 	.word	0x7ff00000

0800c250 <__b2d>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	6905      	ldr	r5, [r0, #16]
 800c254:	f100 0714 	add.w	r7, r0, #20
 800c258:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c25c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c260:	1f2e      	subs	r6, r5, #4
 800c262:	4620      	mov	r0, r4
 800c264:	f7ff fd5a 	bl	800bd1c <__hi0bits>
 800c268:	f1c0 0220 	rsb	r2, r0, #32
 800c26c:	280a      	cmp	r0, #10
 800c26e:	4603      	mov	r3, r0
 800c270:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c2dc <__b2d+0x8c>
 800c274:	600a      	str	r2, [r1, #0]
 800c276:	dc12      	bgt.n	800c29e <__b2d+0x4e>
 800c278:	f1c0 0e0b 	rsb	lr, r0, #11
 800c27c:	fa24 f20e 	lsr.w	r2, r4, lr
 800c280:	42b7      	cmp	r7, r6
 800c282:	ea42 010c 	orr.w	r1, r2, ip
 800c286:	bf2c      	ite	cs
 800c288:	2200      	movcs	r2, #0
 800c28a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c28e:	3315      	adds	r3, #21
 800c290:	fa04 f303 	lsl.w	r3, r4, r3
 800c294:	fa22 f20e 	lsr.w	r2, r2, lr
 800c298:	431a      	orrs	r2, r3
 800c29a:	4610      	mov	r0, r2
 800c29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29e:	42b7      	cmp	r7, r6
 800c2a0:	bf2e      	itee	cs
 800c2a2:	2200      	movcs	r2, #0
 800c2a4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c2a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800c2ac:	3b0b      	subs	r3, #11
 800c2ae:	d012      	beq.n	800c2d6 <__b2d+0x86>
 800c2b0:	f1c3 0520 	rsb	r5, r3, #32
 800c2b4:	fa22 f105 	lsr.w	r1, r2, r5
 800c2b8:	409c      	lsls	r4, r3
 800c2ba:	430c      	orrs	r4, r1
 800c2bc:	42be      	cmp	r6, r7
 800c2be:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800c2c2:	bf94      	ite	ls
 800c2c4:	2400      	movls	r4, #0
 800c2c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c2ca:	409a      	lsls	r2, r3
 800c2cc:	40ec      	lsrs	r4, r5
 800c2ce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c2d2:	4322      	orrs	r2, r4
 800c2d4:	e7e1      	b.n	800c29a <__b2d+0x4a>
 800c2d6:	ea44 010c 	orr.w	r1, r4, ip
 800c2da:	e7de      	b.n	800c29a <__b2d+0x4a>
 800c2dc:	3ff00000 	.word	0x3ff00000

0800c2e0 <__d2b>:
 800c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	4617      	mov	r7, r2
 800c2e6:	461c      	mov	r4, r3
 800c2e8:	9e08      	ldr	r6, [sp, #32]
 800c2ea:	f7ff fc25 	bl	800bb38 <_Balloc>
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	b930      	cbnz	r0, 800c300 <__d2b+0x20>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	f240 310f 	movw	r1, #783	; 0x30f
 800c2f8:	4b22      	ldr	r3, [pc, #136]	; (800c384 <__d2b+0xa4>)
 800c2fa:	4823      	ldr	r0, [pc, #140]	; (800c388 <__d2b+0xa8>)
 800c2fc:	f000 faf2 	bl	800c8e4 <__assert_func>
 800c300:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c304:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c308:	bb24      	cbnz	r4, 800c354 <__d2b+0x74>
 800c30a:	2f00      	cmp	r7, #0
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	d026      	beq.n	800c35e <__d2b+0x7e>
 800c310:	4668      	mov	r0, sp
 800c312:	9700      	str	r7, [sp, #0]
 800c314:	f7ff fd22 	bl	800bd5c <__lo0bits>
 800c318:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c31c:	b1e8      	cbz	r0, 800c35a <__d2b+0x7a>
 800c31e:	f1c0 0320 	rsb	r3, r0, #32
 800c322:	fa02 f303 	lsl.w	r3, r2, r3
 800c326:	430b      	orrs	r3, r1
 800c328:	40c2      	lsrs	r2, r0
 800c32a:	616b      	str	r3, [r5, #20]
 800c32c:	9201      	str	r2, [sp, #4]
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	bf14      	ite	ne
 800c334:	2102      	movne	r1, #2
 800c336:	2101      	moveq	r1, #1
 800c338:	61ab      	str	r3, [r5, #24]
 800c33a:	6129      	str	r1, [r5, #16]
 800c33c:	b1bc      	cbz	r4, 800c36e <__d2b+0x8e>
 800c33e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c342:	4404      	add	r4, r0
 800c344:	6034      	str	r4, [r6, #0]
 800c346:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34c:	6018      	str	r0, [r3, #0]
 800c34e:	4628      	mov	r0, r5
 800c350:	b003      	add	sp, #12
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c358:	e7d7      	b.n	800c30a <__d2b+0x2a>
 800c35a:	6169      	str	r1, [r5, #20]
 800c35c:	e7e7      	b.n	800c32e <__d2b+0x4e>
 800c35e:	a801      	add	r0, sp, #4
 800c360:	f7ff fcfc 	bl	800bd5c <__lo0bits>
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	2101      	movs	r1, #1
 800c368:	616b      	str	r3, [r5, #20]
 800c36a:	3020      	adds	r0, #32
 800c36c:	e7e5      	b.n	800c33a <__d2b+0x5a>
 800c36e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c372:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c376:	6030      	str	r0, [r6, #0]
 800c378:	6918      	ldr	r0, [r3, #16]
 800c37a:	f7ff fccf 	bl	800bd1c <__hi0bits>
 800c37e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c382:	e7e2      	b.n	800c34a <__d2b+0x6a>
 800c384:	0800d220 	.word	0x0800d220
 800c388:	0800d291 	.word	0x0800d291

0800c38c <__ratio>:
 800c38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	4688      	mov	r8, r1
 800c392:	4669      	mov	r1, sp
 800c394:	4681      	mov	r9, r0
 800c396:	f7ff ff5b 	bl	800c250 <__b2d>
 800c39a:	460f      	mov	r7, r1
 800c39c:	4604      	mov	r4, r0
 800c39e:	460d      	mov	r5, r1
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	a901      	add	r1, sp, #4
 800c3a4:	f7ff ff54 	bl	800c250 <__b2d>
 800c3a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3b0:	468b      	mov	fp, r1
 800c3b2:	eba3 0c02 	sub.w	ip, r3, r2
 800c3b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bfd5      	itete	le
 800c3c4:	460a      	movle	r2, r1
 800c3c6:	462a      	movgt	r2, r5
 800c3c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3cc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c3d0:	bfd8      	it	le
 800c3d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c3d6:	465b      	mov	r3, fp
 800c3d8:	4602      	mov	r2, r0
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7f4 f9a5 	bl	800072c <__aeabi_ddiv>
 800c3e2:	b003      	add	sp, #12
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3e8 <__copybits>:
 800c3e8:	3901      	subs	r1, #1
 800c3ea:	b570      	push	{r4, r5, r6, lr}
 800c3ec:	1149      	asrs	r1, r1, #5
 800c3ee:	6914      	ldr	r4, [r2, #16]
 800c3f0:	3101      	adds	r1, #1
 800c3f2:	f102 0314 	add.w	r3, r2, #20
 800c3f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c3fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3fe:	1f05      	subs	r5, r0, #4
 800c400:	42a3      	cmp	r3, r4
 800c402:	d30c      	bcc.n	800c41e <__copybits+0x36>
 800c404:	1aa3      	subs	r3, r4, r2
 800c406:	3b11      	subs	r3, #17
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	3211      	adds	r2, #17
 800c40e:	42a2      	cmp	r2, r4
 800c410:	bf88      	it	hi
 800c412:	2300      	movhi	r3, #0
 800c414:	4418      	add	r0, r3
 800c416:	2300      	movs	r3, #0
 800c418:	4288      	cmp	r0, r1
 800c41a:	d305      	bcc.n	800c428 <__copybits+0x40>
 800c41c:	bd70      	pop	{r4, r5, r6, pc}
 800c41e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c422:	f845 6f04 	str.w	r6, [r5, #4]!
 800c426:	e7eb      	b.n	800c400 <__copybits+0x18>
 800c428:	f840 3b04 	str.w	r3, [r0], #4
 800c42c:	e7f4      	b.n	800c418 <__copybits+0x30>

0800c42e <__any_on>:
 800c42e:	f100 0214 	add.w	r2, r0, #20
 800c432:	6900      	ldr	r0, [r0, #16]
 800c434:	114b      	asrs	r3, r1, #5
 800c436:	4298      	cmp	r0, r3
 800c438:	b510      	push	{r4, lr}
 800c43a:	db11      	blt.n	800c460 <__any_on+0x32>
 800c43c:	dd0a      	ble.n	800c454 <__any_on+0x26>
 800c43e:	f011 011f 	ands.w	r1, r1, #31
 800c442:	d007      	beq.n	800c454 <__any_on+0x26>
 800c444:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c448:	fa24 f001 	lsr.w	r0, r4, r1
 800c44c:	fa00 f101 	lsl.w	r1, r0, r1
 800c450:	428c      	cmp	r4, r1
 800c452:	d10b      	bne.n	800c46c <__any_on+0x3e>
 800c454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c458:	4293      	cmp	r3, r2
 800c45a:	d803      	bhi.n	800c464 <__any_on+0x36>
 800c45c:	2000      	movs	r0, #0
 800c45e:	bd10      	pop	{r4, pc}
 800c460:	4603      	mov	r3, r0
 800c462:	e7f7      	b.n	800c454 <__any_on+0x26>
 800c464:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c468:	2900      	cmp	r1, #0
 800c46a:	d0f5      	beq.n	800c458 <__any_on+0x2a>
 800c46c:	2001      	movs	r0, #1
 800c46e:	e7f6      	b.n	800c45e <__any_on+0x30>

0800c470 <__ascii_wctomb>:
 800c470:	4603      	mov	r3, r0
 800c472:	4608      	mov	r0, r1
 800c474:	b141      	cbz	r1, 800c488 <__ascii_wctomb+0x18>
 800c476:	2aff      	cmp	r2, #255	; 0xff
 800c478:	d904      	bls.n	800c484 <__ascii_wctomb+0x14>
 800c47a:	228a      	movs	r2, #138	; 0x8a
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	4770      	bx	lr
 800c484:	2001      	movs	r0, #1
 800c486:	700a      	strb	r2, [r1, #0]
 800c488:	4770      	bx	lr

0800c48a <__ssputs_r>:
 800c48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48e:	461f      	mov	r7, r3
 800c490:	688e      	ldr	r6, [r1, #8]
 800c492:	4682      	mov	sl, r0
 800c494:	42be      	cmp	r6, r7
 800c496:	460c      	mov	r4, r1
 800c498:	4690      	mov	r8, r2
 800c49a:	680b      	ldr	r3, [r1, #0]
 800c49c:	d82c      	bhi.n	800c4f8 <__ssputs_r+0x6e>
 800c49e:	898a      	ldrh	r2, [r1, #12]
 800c4a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4a4:	d026      	beq.n	800c4f4 <__ssputs_r+0x6a>
 800c4a6:	6965      	ldr	r5, [r4, #20]
 800c4a8:	6909      	ldr	r1, [r1, #16]
 800c4aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4ae:	eba3 0901 	sub.w	r9, r3, r1
 800c4b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b6:	1c7b      	adds	r3, r7, #1
 800c4b8:	444b      	add	r3, r9
 800c4ba:	106d      	asrs	r5, r5, #1
 800c4bc:	429d      	cmp	r5, r3
 800c4be:	bf38      	it	cc
 800c4c0:	461d      	movcc	r5, r3
 800c4c2:	0553      	lsls	r3, r2, #21
 800c4c4:	d527      	bpl.n	800c516 <__ssputs_r+0x8c>
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7ff fa98 	bl	800b9fc <_malloc_r>
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b360      	cbz	r0, 800c52a <__ssputs_r+0xa0>
 800c4d0:	464a      	mov	r2, r9
 800c4d2:	6921      	ldr	r1, [r4, #16]
 800c4d4:	f7fe f846 	bl	800a564 <memcpy>
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e2:	81a3      	strh	r3, [r4, #12]
 800c4e4:	6126      	str	r6, [r4, #16]
 800c4e6:	444e      	add	r6, r9
 800c4e8:	6026      	str	r6, [r4, #0]
 800c4ea:	463e      	mov	r6, r7
 800c4ec:	6165      	str	r5, [r4, #20]
 800c4ee:	eba5 0509 	sub.w	r5, r5, r9
 800c4f2:	60a5      	str	r5, [r4, #8]
 800c4f4:	42be      	cmp	r6, r7
 800c4f6:	d900      	bls.n	800c4fa <__ssputs_r+0x70>
 800c4f8:	463e      	mov	r6, r7
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	4641      	mov	r1, r8
 800c4fe:	6820      	ldr	r0, [r4, #0]
 800c500:	f000 f9c6 	bl	800c890 <memmove>
 800c504:	2000      	movs	r0, #0
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	1b9b      	subs	r3, r3, r6
 800c50a:	60a3      	str	r3, [r4, #8]
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	4433      	add	r3, r6
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c516:	462a      	mov	r2, r5
 800c518:	f000 fa16 	bl	800c948 <_realloc_r>
 800c51c:	4606      	mov	r6, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d1e0      	bne.n	800c4e4 <__ssputs_r+0x5a>
 800c522:	4650      	mov	r0, sl
 800c524:	6921      	ldr	r1, [r4, #16]
 800c526:	f7fe fe9f 	bl	800b268 <_free_r>
 800c52a:	230c      	movs	r3, #12
 800c52c:	f8ca 3000 	str.w	r3, [sl]
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f04f 30ff 	mov.w	r0, #4294967295
 800c536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	e7e9      	b.n	800c512 <__ssputs_r+0x88>
	...

0800c540 <_svfiprintf_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	4698      	mov	r8, r3
 800c546:	898b      	ldrh	r3, [r1, #12]
 800c548:	4607      	mov	r7, r0
 800c54a:	061b      	lsls	r3, r3, #24
 800c54c:	460d      	mov	r5, r1
 800c54e:	4614      	mov	r4, r2
 800c550:	b09d      	sub	sp, #116	; 0x74
 800c552:	d50e      	bpl.n	800c572 <_svfiprintf_r+0x32>
 800c554:	690b      	ldr	r3, [r1, #16]
 800c556:	b963      	cbnz	r3, 800c572 <_svfiprintf_r+0x32>
 800c558:	2140      	movs	r1, #64	; 0x40
 800c55a:	f7ff fa4f 	bl	800b9fc <_malloc_r>
 800c55e:	6028      	str	r0, [r5, #0]
 800c560:	6128      	str	r0, [r5, #16]
 800c562:	b920      	cbnz	r0, 800c56e <_svfiprintf_r+0x2e>
 800c564:	230c      	movs	r3, #12
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	f04f 30ff 	mov.w	r0, #4294967295
 800c56c:	e0d0      	b.n	800c710 <_svfiprintf_r+0x1d0>
 800c56e:	2340      	movs	r3, #64	; 0x40
 800c570:	616b      	str	r3, [r5, #20]
 800c572:	2300      	movs	r3, #0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	2320      	movs	r3, #32
 800c578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57c:	2330      	movs	r3, #48	; 0x30
 800c57e:	f04f 0901 	mov.w	r9, #1
 800c582:	f8cd 800c 	str.w	r8, [sp, #12]
 800c586:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c728 <_svfiprintf_r+0x1e8>
 800c58a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58e:	4623      	mov	r3, r4
 800c590:	469a      	mov	sl, r3
 800c592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c596:	b10a      	cbz	r2, 800c59c <_svfiprintf_r+0x5c>
 800c598:	2a25      	cmp	r2, #37	; 0x25
 800c59a:	d1f9      	bne.n	800c590 <_svfiprintf_r+0x50>
 800c59c:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a0:	d00b      	beq.n	800c5ba <_svfiprintf_r+0x7a>
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff6e 	bl	800c48a <__ssputs_r>
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f000 80a9 	beq.w	800c706 <_svfiprintf_r+0x1c6>
 800c5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b6:	445a      	add	r2, fp
 800c5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 80a1 	beq.w	800c706 <_svfiprintf_r+0x1c6>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ce:	f10a 0a01 	add.w	sl, sl, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	9307      	str	r3, [sp, #28]
 800c5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5da:	931a      	str	r3, [sp, #104]	; 0x68
 800c5dc:	4654      	mov	r4, sl
 800c5de:	2205      	movs	r2, #5
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	4850      	ldr	r0, [pc, #320]	; (800c728 <_svfiprintf_r+0x1e8>)
 800c5e6:	f7fd ffaf 	bl	800a548 <memchr>
 800c5ea:	9a04      	ldr	r2, [sp, #16]
 800c5ec:	b9d8      	cbnz	r0, 800c626 <_svfiprintf_r+0xe6>
 800c5ee:	06d0      	lsls	r0, r2, #27
 800c5f0:	bf44      	itt	mi
 800c5f2:	2320      	movmi	r3, #32
 800c5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f8:	0711      	lsls	r1, r2, #28
 800c5fa:	bf44      	itt	mi
 800c5fc:	232b      	movmi	r3, #43	; 0x2b
 800c5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c602:	f89a 3000 	ldrb.w	r3, [sl]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d015      	beq.n	800c636 <_svfiprintf_r+0xf6>
 800c60a:	4654      	mov	r4, sl
 800c60c:	2000      	movs	r0, #0
 800c60e:	f04f 0c0a 	mov.w	ip, #10
 800c612:	9a07      	ldr	r2, [sp, #28]
 800c614:	4621      	mov	r1, r4
 800c616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c61a:	3b30      	subs	r3, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d94d      	bls.n	800c6bc <_svfiprintf_r+0x17c>
 800c620:	b1b0      	cbz	r0, 800c650 <_svfiprintf_r+0x110>
 800c622:	9207      	str	r2, [sp, #28]
 800c624:	e014      	b.n	800c650 <_svfiprintf_r+0x110>
 800c626:	eba0 0308 	sub.w	r3, r0, r8
 800c62a:	fa09 f303 	lsl.w	r3, r9, r3
 800c62e:	4313      	orrs	r3, r2
 800c630:	46a2      	mov	sl, r4
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	e7d2      	b.n	800c5dc <_svfiprintf_r+0x9c>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9103      	str	r1, [sp, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbb      	ittet	lt
 800c642:	425b      	neglt	r3, r3
 800c644:	f042 0202 	orrlt.w	r2, r2, #2
 800c648:	9307      	strge	r3, [sp, #28]
 800c64a:	9307      	strlt	r3, [sp, #28]
 800c64c:	bfb8      	it	lt
 800c64e:	9204      	strlt	r2, [sp, #16]
 800c650:	7823      	ldrb	r3, [r4, #0]
 800c652:	2b2e      	cmp	r3, #46	; 0x2e
 800c654:	d10c      	bne.n	800c670 <_svfiprintf_r+0x130>
 800c656:	7863      	ldrb	r3, [r4, #1]
 800c658:	2b2a      	cmp	r3, #42	; 0x2a
 800c65a:	d134      	bne.n	800c6c6 <_svfiprintf_r+0x186>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	3402      	adds	r4, #2
 800c660:	1d1a      	adds	r2, r3, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	9203      	str	r2, [sp, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	bfb8      	it	lt
 800c66a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c72c <_svfiprintf_r+0x1ec>
 800c674:	2203      	movs	r2, #3
 800c676:	4650      	mov	r0, sl
 800c678:	7821      	ldrb	r1, [r4, #0]
 800c67a:	f7fd ff65 	bl	800a548 <memchr>
 800c67e:	b138      	cbz	r0, 800c690 <_svfiprintf_r+0x150>
 800c680:	2240      	movs	r2, #64	; 0x40
 800c682:	9b04      	ldr	r3, [sp, #16]
 800c684:	eba0 000a 	sub.w	r0, r0, sl
 800c688:	4082      	lsls	r2, r0
 800c68a:	4313      	orrs	r3, r2
 800c68c:	3401      	adds	r4, #1
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c694:	2206      	movs	r2, #6
 800c696:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f0>)
 800c698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69c:	f7fd ff54 	bl	800a548 <memchr>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d038      	beq.n	800c716 <_svfiprintf_r+0x1d6>
 800c6a4:	4b23      	ldr	r3, [pc, #140]	; (800c734 <_svfiprintf_r+0x1f4>)
 800c6a6:	bb1b      	cbnz	r3, 800c6f0 <_svfiprintf_r+0x1b0>
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	3307      	adds	r3, #7
 800c6ac:	f023 0307 	bic.w	r3, r3, #7
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b6:	4433      	add	r3, r6
 800c6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ba:	e768      	b.n	800c58e <_svfiprintf_r+0x4e>
 800c6bc:	460c      	mov	r4, r1
 800c6be:	2001      	movs	r0, #1
 800c6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c4:	e7a6      	b.n	800c614 <_svfiprintf_r+0xd4>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f04f 0c0a 	mov.w	ip, #10
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	3401      	adds	r4, #1
 800c6d0:	9305      	str	r3, [sp, #20]
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d8:	3a30      	subs	r2, #48	; 0x30
 800c6da:	2a09      	cmp	r2, #9
 800c6dc:	d903      	bls.n	800c6e6 <_svfiprintf_r+0x1a6>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0c6      	beq.n	800c670 <_svfiprintf_r+0x130>
 800c6e2:	9105      	str	r1, [sp, #20]
 800c6e4:	e7c4      	b.n	800c670 <_svfiprintf_r+0x130>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ee:	e7f0      	b.n	800c6d2 <_svfiprintf_r+0x192>
 800c6f0:	ab03      	add	r3, sp, #12
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	462a      	mov	r2, r5
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	f7fd f968 	bl	80099d0 <_printf_float>
 800c700:	1c42      	adds	r2, r0, #1
 800c702:	4606      	mov	r6, r0
 800c704:	d1d6      	bne.n	800c6b4 <_svfiprintf_r+0x174>
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	065b      	lsls	r3, r3, #25
 800c70a:	f53f af2d 	bmi.w	800c568 <_svfiprintf_r+0x28>
 800c70e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c710:	b01d      	add	sp, #116	; 0x74
 800c712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c716:	ab03      	add	r3, sp, #12
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	462a      	mov	r2, r5
 800c71c:	4638      	mov	r0, r7
 800c71e:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	f7fd fbf5 	bl	8009f10 <_printf_i>
 800c726:	e7eb      	b.n	800c700 <_svfiprintf_r+0x1c0>
 800c728:	0800d4ed 	.word	0x0800d4ed
 800c72c:	0800d4f3 	.word	0x0800d4f3
 800c730:	0800d4f7 	.word	0x0800d4f7
 800c734:	080099d1 	.word	0x080099d1
 800c738:	0800c48b 	.word	0x0800c48b

0800c73c <__sflush_r>:
 800c73c:	898a      	ldrh	r2, [r1, #12]
 800c73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c740:	4605      	mov	r5, r0
 800c742:	0710      	lsls	r0, r2, #28
 800c744:	460c      	mov	r4, r1
 800c746:	d457      	bmi.n	800c7f8 <__sflush_r+0xbc>
 800c748:	684b      	ldr	r3, [r1, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	dc04      	bgt.n	800c758 <__sflush_r+0x1c>
 800c74e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c750:	2b00      	cmp	r3, #0
 800c752:	dc01      	bgt.n	800c758 <__sflush_r+0x1c>
 800c754:	2000      	movs	r0, #0
 800c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d0fa      	beq.n	800c754 <__sflush_r+0x18>
 800c75e:	2300      	movs	r3, #0
 800c760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c764:	682f      	ldr	r7, [r5, #0]
 800c766:	6a21      	ldr	r1, [r4, #32]
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	d032      	beq.n	800c7d2 <__sflush_r+0x96>
 800c76c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	075a      	lsls	r2, r3, #29
 800c772:	d505      	bpl.n	800c780 <__sflush_r+0x44>
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	1ac0      	subs	r0, r0, r3
 800c778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c77a:	b10b      	cbz	r3, 800c780 <__sflush_r+0x44>
 800c77c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c77e:	1ac0      	subs	r0, r0, r3
 800c780:	2300      	movs	r3, #0
 800c782:	4602      	mov	r2, r0
 800c784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c786:	4628      	mov	r0, r5
 800c788:	6a21      	ldr	r1, [r4, #32]
 800c78a:	47b0      	blx	r6
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	d106      	bne.n	800c7a0 <__sflush_r+0x64>
 800c792:	6829      	ldr	r1, [r5, #0]
 800c794:	291d      	cmp	r1, #29
 800c796:	d82b      	bhi.n	800c7f0 <__sflush_r+0xb4>
 800c798:	4a28      	ldr	r2, [pc, #160]	; (800c83c <__sflush_r+0x100>)
 800c79a:	410a      	asrs	r2, r1
 800c79c:	07d6      	lsls	r6, r2, #31
 800c79e:	d427      	bmi.n	800c7f0 <__sflush_r+0xb4>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	6062      	str	r2, [r4, #4]
 800c7a4:	6922      	ldr	r2, [r4, #16]
 800c7a6:	04d9      	lsls	r1, r3, #19
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	d504      	bpl.n	800c7b6 <__sflush_r+0x7a>
 800c7ac:	1c42      	adds	r2, r0, #1
 800c7ae:	d101      	bne.n	800c7b4 <__sflush_r+0x78>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	b903      	cbnz	r3, 800c7b6 <__sflush_r+0x7a>
 800c7b4:	6560      	str	r0, [r4, #84]	; 0x54
 800c7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b8:	602f      	str	r7, [r5, #0]
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	d0ca      	beq.n	800c754 <__sflush_r+0x18>
 800c7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c2:	4299      	cmp	r1, r3
 800c7c4:	d002      	beq.n	800c7cc <__sflush_r+0x90>
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f7fe fd4e 	bl	800b268 <_free_r>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d0:	e7c1      	b.n	800c756 <__sflush_r+0x1a>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b0      	blx	r6
 800c7d8:	1c41      	adds	r1, r0, #1
 800c7da:	d1c8      	bne.n	800c76e <__sflush_r+0x32>
 800c7dc:	682b      	ldr	r3, [r5, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0c5      	beq.n	800c76e <__sflush_r+0x32>
 800c7e2:	2b1d      	cmp	r3, #29
 800c7e4:	d001      	beq.n	800c7ea <__sflush_r+0xae>
 800c7e6:	2b16      	cmp	r3, #22
 800c7e8:	d101      	bne.n	800c7ee <__sflush_r+0xb2>
 800c7ea:	602f      	str	r7, [r5, #0]
 800c7ec:	e7b2      	b.n	800c754 <__sflush_r+0x18>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f4:	81a3      	strh	r3, [r4, #12]
 800c7f6:	e7ae      	b.n	800c756 <__sflush_r+0x1a>
 800c7f8:	690f      	ldr	r7, [r1, #16]
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	d0aa      	beq.n	800c754 <__sflush_r+0x18>
 800c7fe:	0793      	lsls	r3, r2, #30
 800c800:	bf18      	it	ne
 800c802:	2300      	movne	r3, #0
 800c804:	680e      	ldr	r6, [r1, #0]
 800c806:	bf08      	it	eq
 800c808:	694b      	ldreq	r3, [r1, #20]
 800c80a:	1bf6      	subs	r6, r6, r7
 800c80c:	600f      	str	r7, [r1, #0]
 800c80e:	608b      	str	r3, [r1, #8]
 800c810:	2e00      	cmp	r6, #0
 800c812:	dd9f      	ble.n	800c754 <__sflush_r+0x18>
 800c814:	4633      	mov	r3, r6
 800c816:	463a      	mov	r2, r7
 800c818:	4628      	mov	r0, r5
 800c81a:	6a21      	ldr	r1, [r4, #32]
 800c81c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c820:	47e0      	blx	ip
 800c822:	2800      	cmp	r0, #0
 800c824:	dc06      	bgt.n	800c834 <__sflush_r+0xf8>
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f04f 30ff 	mov.w	r0, #4294967295
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e790      	b.n	800c756 <__sflush_r+0x1a>
 800c834:	4407      	add	r7, r0
 800c836:	1a36      	subs	r6, r6, r0
 800c838:	e7ea      	b.n	800c810 <__sflush_r+0xd4>
 800c83a:	bf00      	nop
 800c83c:	dfbffffe 	.word	0xdfbffffe

0800c840 <_fflush_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	690b      	ldr	r3, [r1, #16]
 800c844:	4605      	mov	r5, r0
 800c846:	460c      	mov	r4, r1
 800c848:	b913      	cbnz	r3, 800c850 <_fflush_r+0x10>
 800c84a:	2500      	movs	r5, #0
 800c84c:	4628      	mov	r0, r5
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	b118      	cbz	r0, 800c85a <_fflush_r+0x1a>
 800c852:	6a03      	ldr	r3, [r0, #32]
 800c854:	b90b      	cbnz	r3, 800c85a <_fflush_r+0x1a>
 800c856:	f7fd fcf7 	bl	800a248 <__sinit>
 800c85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f3      	beq.n	800c84a <_fflush_r+0xa>
 800c862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c864:	07d0      	lsls	r0, r2, #31
 800c866:	d404      	bmi.n	800c872 <_fflush_r+0x32>
 800c868:	0599      	lsls	r1, r3, #22
 800c86a:	d402      	bmi.n	800c872 <_fflush_r+0x32>
 800c86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c86e:	f7fd fe69 	bl	800a544 <__retarget_lock_acquire_recursive>
 800c872:	4628      	mov	r0, r5
 800c874:	4621      	mov	r1, r4
 800c876:	f7ff ff61 	bl	800c73c <__sflush_r>
 800c87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c87c:	4605      	mov	r5, r0
 800c87e:	07da      	lsls	r2, r3, #31
 800c880:	d4e4      	bmi.n	800c84c <_fflush_r+0xc>
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	059b      	lsls	r3, r3, #22
 800c886:	d4e1      	bmi.n	800c84c <_fflush_r+0xc>
 800c888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c88a:	f7fd fe5c 	bl	800a546 <__retarget_lock_release_recursive>
 800c88e:	e7dd      	b.n	800c84c <_fflush_r+0xc>

0800c890 <memmove>:
 800c890:	4288      	cmp	r0, r1
 800c892:	b510      	push	{r4, lr}
 800c894:	eb01 0402 	add.w	r4, r1, r2
 800c898:	d902      	bls.n	800c8a0 <memmove+0x10>
 800c89a:	4284      	cmp	r4, r0
 800c89c:	4623      	mov	r3, r4
 800c89e:	d807      	bhi.n	800c8b0 <memmove+0x20>
 800c8a0:	1e43      	subs	r3, r0, #1
 800c8a2:	42a1      	cmp	r1, r4
 800c8a4:	d008      	beq.n	800c8b8 <memmove+0x28>
 800c8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ae:	e7f8      	b.n	800c8a2 <memmove+0x12>
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	4402      	add	r2, r0
 800c8b4:	428a      	cmp	r2, r1
 800c8b6:	d100      	bne.n	800c8ba <memmove+0x2a>
 800c8b8:	bd10      	pop	{r4, pc}
 800c8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8c2:	e7f7      	b.n	800c8b4 <memmove+0x24>

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4d05      	ldr	r5, [pc, #20]	; (800c8e0 <_sbrk_r+0x1c>)
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f5 ff4e 	bl	8002770 <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20003d7c 	.word	0x20003d7c

0800c8e4 <__assert_func>:
 800c8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8e6:	4614      	mov	r4, r2
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4b09      	ldr	r3, [pc, #36]	; (800c910 <__assert_func+0x2c>)
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68d8      	ldr	r0, [r3, #12]
 800c8f2:	b14c      	cbz	r4, 800c908 <__assert_func+0x24>
 800c8f4:	4b07      	ldr	r3, [pc, #28]	; (800c914 <__assert_func+0x30>)
 800c8f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8fa:	9100      	str	r1, [sp, #0]
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	4906      	ldr	r1, [pc, #24]	; (800c918 <__assert_func+0x34>)
 800c900:	f000 f852 	bl	800c9a8 <fiprintf>
 800c904:	f000 f862 	bl	800c9cc <abort>
 800c908:	4b04      	ldr	r3, [pc, #16]	; (800c91c <__assert_func+0x38>)
 800c90a:	461c      	mov	r4, r3
 800c90c:	e7f3      	b.n	800c8f6 <__assert_func+0x12>
 800c90e:	bf00      	nop
 800c910:	200001d4 	.word	0x200001d4
 800c914:	0800d4fe 	.word	0x0800d4fe
 800c918:	0800d50b 	.word	0x0800d50b
 800c91c:	0800d539 	.word	0x0800d539

0800c920 <_calloc_r>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	fba1 5402 	umull	r5, r4, r1, r2
 800c926:	b934      	cbnz	r4, 800c936 <_calloc_r+0x16>
 800c928:	4629      	mov	r1, r5
 800c92a:	f7ff f867 	bl	800b9fc <_malloc_r>
 800c92e:	4606      	mov	r6, r0
 800c930:	b928      	cbnz	r0, 800c93e <_calloc_r+0x1e>
 800c932:	4630      	mov	r0, r6
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	220c      	movs	r2, #12
 800c938:	2600      	movs	r6, #0
 800c93a:	6002      	str	r2, [r0, #0]
 800c93c:	e7f9      	b.n	800c932 <_calloc_r+0x12>
 800c93e:	462a      	mov	r2, r5
 800c940:	4621      	mov	r1, r4
 800c942:	f7fd fd1a 	bl	800a37a <memset>
 800c946:	e7f4      	b.n	800c932 <_calloc_r+0x12>

0800c948 <_realloc_r>:
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94c:	4680      	mov	r8, r0
 800c94e:	4614      	mov	r4, r2
 800c950:	460e      	mov	r6, r1
 800c952:	b921      	cbnz	r1, 800c95e <_realloc_r+0x16>
 800c954:	4611      	mov	r1, r2
 800c956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c95a:	f7ff b84f 	b.w	800b9fc <_malloc_r>
 800c95e:	b92a      	cbnz	r2, 800c96c <_realloc_r+0x24>
 800c960:	f7fe fc82 	bl	800b268 <_free_r>
 800c964:	4625      	mov	r5, r4
 800c966:	4628      	mov	r0, r5
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	f000 f835 	bl	800c9da <_malloc_usable_size_r>
 800c970:	4284      	cmp	r4, r0
 800c972:	4607      	mov	r7, r0
 800c974:	d802      	bhi.n	800c97c <_realloc_r+0x34>
 800c976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c97a:	d812      	bhi.n	800c9a2 <_realloc_r+0x5a>
 800c97c:	4621      	mov	r1, r4
 800c97e:	4640      	mov	r0, r8
 800c980:	f7ff f83c 	bl	800b9fc <_malloc_r>
 800c984:	4605      	mov	r5, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	d0ed      	beq.n	800c966 <_realloc_r+0x1e>
 800c98a:	42bc      	cmp	r4, r7
 800c98c:	4622      	mov	r2, r4
 800c98e:	4631      	mov	r1, r6
 800c990:	bf28      	it	cs
 800c992:	463a      	movcs	r2, r7
 800c994:	f7fd fde6 	bl	800a564 <memcpy>
 800c998:	4631      	mov	r1, r6
 800c99a:	4640      	mov	r0, r8
 800c99c:	f7fe fc64 	bl	800b268 <_free_r>
 800c9a0:	e7e1      	b.n	800c966 <_realloc_r+0x1e>
 800c9a2:	4635      	mov	r5, r6
 800c9a4:	e7df      	b.n	800c966 <_realloc_r+0x1e>
	...

0800c9a8 <fiprintf>:
 800c9a8:	b40e      	push	{r1, r2, r3}
 800c9aa:	b503      	push	{r0, r1, lr}
 800c9ac:	4601      	mov	r1, r0
 800c9ae:	ab03      	add	r3, sp, #12
 800c9b0:	4805      	ldr	r0, [pc, #20]	; (800c9c8 <fiprintf+0x20>)
 800c9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b6:	6800      	ldr	r0, [r0, #0]
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	f000 f83d 	bl	800ca38 <_vfiprintf_r>
 800c9be:	b002      	add	sp, #8
 800c9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9c4:	b003      	add	sp, #12
 800c9c6:	4770      	bx	lr
 800c9c8:	200001d4 	.word	0x200001d4

0800c9cc <abort>:
 800c9cc:	2006      	movs	r0, #6
 800c9ce:	b508      	push	{r3, lr}
 800c9d0:	f000 fa0a 	bl	800cde8 <raise>
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	f7f5 fe58 	bl	800268a <_exit>

0800c9da <_malloc_usable_size_r>:
 800c9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9de:	1f18      	subs	r0, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	bfbc      	itt	lt
 800c9e4:	580b      	ldrlt	r3, [r1, r0]
 800c9e6:	18c0      	addlt	r0, r0, r3
 800c9e8:	4770      	bx	lr

0800c9ea <__sfputc_r>:
 800c9ea:	6893      	ldr	r3, [r2, #8]
 800c9ec:	b410      	push	{r4}
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	6093      	str	r3, [r2, #8]
 800c9f4:	da07      	bge.n	800ca06 <__sfputc_r+0x1c>
 800c9f6:	6994      	ldr	r4, [r2, #24]
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	db01      	blt.n	800ca00 <__sfputc_r+0x16>
 800c9fc:	290a      	cmp	r1, #10
 800c9fe:	d102      	bne.n	800ca06 <__sfputc_r+0x1c>
 800ca00:	bc10      	pop	{r4}
 800ca02:	f000 b933 	b.w	800cc6c <__swbuf_r>
 800ca06:	6813      	ldr	r3, [r2, #0]
 800ca08:	1c58      	adds	r0, r3, #1
 800ca0a:	6010      	str	r0, [r2, #0]
 800ca0c:	7019      	strb	r1, [r3, #0]
 800ca0e:	4608      	mov	r0, r1
 800ca10:	bc10      	pop	{r4}
 800ca12:	4770      	bx	lr

0800ca14 <__sfputs_r>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	4606      	mov	r6, r0
 800ca18:	460f      	mov	r7, r1
 800ca1a:	4614      	mov	r4, r2
 800ca1c:	18d5      	adds	r5, r2, r3
 800ca1e:	42ac      	cmp	r4, r5
 800ca20:	d101      	bne.n	800ca26 <__sfputs_r+0x12>
 800ca22:	2000      	movs	r0, #0
 800ca24:	e007      	b.n	800ca36 <__sfputs_r+0x22>
 800ca26:	463a      	mov	r2, r7
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2e:	f7ff ffdc 	bl	800c9ea <__sfputc_r>
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	d1f3      	bne.n	800ca1e <__sfputs_r+0xa>
 800ca36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca38 <_vfiprintf_r>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	4614      	mov	r4, r2
 800ca40:	4698      	mov	r8, r3
 800ca42:	4606      	mov	r6, r0
 800ca44:	b09d      	sub	sp, #116	; 0x74
 800ca46:	b118      	cbz	r0, 800ca50 <_vfiprintf_r+0x18>
 800ca48:	6a03      	ldr	r3, [r0, #32]
 800ca4a:	b90b      	cbnz	r3, 800ca50 <_vfiprintf_r+0x18>
 800ca4c:	f7fd fbfc 	bl	800a248 <__sinit>
 800ca50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca52:	07d9      	lsls	r1, r3, #31
 800ca54:	d405      	bmi.n	800ca62 <_vfiprintf_r+0x2a>
 800ca56:	89ab      	ldrh	r3, [r5, #12]
 800ca58:	059a      	lsls	r2, r3, #22
 800ca5a:	d402      	bmi.n	800ca62 <_vfiprintf_r+0x2a>
 800ca5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca5e:	f7fd fd71 	bl	800a544 <__retarget_lock_acquire_recursive>
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	071b      	lsls	r3, r3, #28
 800ca66:	d501      	bpl.n	800ca6c <_vfiprintf_r+0x34>
 800ca68:	692b      	ldr	r3, [r5, #16]
 800ca6a:	b99b      	cbnz	r3, 800ca94 <_vfiprintf_r+0x5c>
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f000 f93a 	bl	800cce8 <__swsetup_r>
 800ca74:	b170      	cbz	r0, 800ca94 <_vfiprintf_r+0x5c>
 800ca76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca78:	07dc      	lsls	r4, r3, #31
 800ca7a:	d504      	bpl.n	800ca86 <_vfiprintf_r+0x4e>
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	b01d      	add	sp, #116	; 0x74
 800ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	0598      	lsls	r0, r3, #22
 800ca8a:	d4f7      	bmi.n	800ca7c <_vfiprintf_r+0x44>
 800ca8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8e:	f7fd fd5a 	bl	800a546 <__retarget_lock_release_recursive>
 800ca92:	e7f3      	b.n	800ca7c <_vfiprintf_r+0x44>
 800ca94:	2300      	movs	r3, #0
 800ca96:	9309      	str	r3, [sp, #36]	; 0x24
 800ca98:	2320      	movs	r3, #32
 800ca9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca9e:	2330      	movs	r3, #48	; 0x30
 800caa0:	f04f 0901 	mov.w	r9, #1
 800caa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800caa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cc58 <_vfiprintf_r+0x220>
 800caac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cab0:	4623      	mov	r3, r4
 800cab2:	469a      	mov	sl, r3
 800cab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab8:	b10a      	cbz	r2, 800cabe <_vfiprintf_r+0x86>
 800caba:	2a25      	cmp	r2, #37	; 0x25
 800cabc:	d1f9      	bne.n	800cab2 <_vfiprintf_r+0x7a>
 800cabe:	ebba 0b04 	subs.w	fp, sl, r4
 800cac2:	d00b      	beq.n	800cadc <_vfiprintf_r+0xa4>
 800cac4:	465b      	mov	r3, fp
 800cac6:	4622      	mov	r2, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff ffa2 	bl	800ca14 <__sfputs_r>
 800cad0:	3001      	adds	r0, #1
 800cad2:	f000 80a9 	beq.w	800cc28 <_vfiprintf_r+0x1f0>
 800cad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad8:	445a      	add	r2, fp
 800cada:	9209      	str	r2, [sp, #36]	; 0x24
 800cadc:	f89a 3000 	ldrb.w	r3, [sl]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 80a1 	beq.w	800cc28 <_vfiprintf_r+0x1f0>
 800cae6:	2300      	movs	r3, #0
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295
 800caec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf0:	f10a 0a01 	add.w	sl, sl, #1
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	9307      	str	r3, [sp, #28]
 800caf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cafc:	931a      	str	r3, [sp, #104]	; 0x68
 800cafe:	4654      	mov	r4, sl
 800cb00:	2205      	movs	r2, #5
 800cb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb06:	4854      	ldr	r0, [pc, #336]	; (800cc58 <_vfiprintf_r+0x220>)
 800cb08:	f7fd fd1e 	bl	800a548 <memchr>
 800cb0c:	9a04      	ldr	r2, [sp, #16]
 800cb0e:	b9d8      	cbnz	r0, 800cb48 <_vfiprintf_r+0x110>
 800cb10:	06d1      	lsls	r1, r2, #27
 800cb12:	bf44      	itt	mi
 800cb14:	2320      	movmi	r3, #32
 800cb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1a:	0713      	lsls	r3, r2, #28
 800cb1c:	bf44      	itt	mi
 800cb1e:	232b      	movmi	r3, #43	; 0x2b
 800cb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb24:	f89a 3000 	ldrb.w	r3, [sl]
 800cb28:	2b2a      	cmp	r3, #42	; 0x2a
 800cb2a:	d015      	beq.n	800cb58 <_vfiprintf_r+0x120>
 800cb2c:	4654      	mov	r4, sl
 800cb2e:	2000      	movs	r0, #0
 800cb30:	f04f 0c0a 	mov.w	ip, #10
 800cb34:	9a07      	ldr	r2, [sp, #28]
 800cb36:	4621      	mov	r1, r4
 800cb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb3c:	3b30      	subs	r3, #48	; 0x30
 800cb3e:	2b09      	cmp	r3, #9
 800cb40:	d94d      	bls.n	800cbde <_vfiprintf_r+0x1a6>
 800cb42:	b1b0      	cbz	r0, 800cb72 <_vfiprintf_r+0x13a>
 800cb44:	9207      	str	r2, [sp, #28]
 800cb46:	e014      	b.n	800cb72 <_vfiprintf_r+0x13a>
 800cb48:	eba0 0308 	sub.w	r3, r0, r8
 800cb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb50:	4313      	orrs	r3, r2
 800cb52:	46a2      	mov	sl, r4
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	e7d2      	b.n	800cafe <_vfiprintf_r+0xc6>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	1d19      	adds	r1, r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	9103      	str	r1, [sp, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfbb      	ittet	lt
 800cb64:	425b      	neglt	r3, r3
 800cb66:	f042 0202 	orrlt.w	r2, r2, #2
 800cb6a:	9307      	strge	r3, [sp, #28]
 800cb6c:	9307      	strlt	r3, [sp, #28]
 800cb6e:	bfb8      	it	lt
 800cb70:	9204      	strlt	r2, [sp, #16]
 800cb72:	7823      	ldrb	r3, [r4, #0]
 800cb74:	2b2e      	cmp	r3, #46	; 0x2e
 800cb76:	d10c      	bne.n	800cb92 <_vfiprintf_r+0x15a>
 800cb78:	7863      	ldrb	r3, [r4, #1]
 800cb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7c:	d134      	bne.n	800cbe8 <_vfiprintf_r+0x1b0>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	3402      	adds	r4, #2
 800cb82:	1d1a      	adds	r2, r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	9203      	str	r2, [sp, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfb8      	it	lt
 800cb8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc5c <_vfiprintf_r+0x224>
 800cb96:	2203      	movs	r2, #3
 800cb98:	4650      	mov	r0, sl
 800cb9a:	7821      	ldrb	r1, [r4, #0]
 800cb9c:	f7fd fcd4 	bl	800a548 <memchr>
 800cba0:	b138      	cbz	r0, 800cbb2 <_vfiprintf_r+0x17a>
 800cba2:	2240      	movs	r2, #64	; 0x40
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	eba0 000a 	sub.w	r0, r0, sl
 800cbaa:	4082      	lsls	r2, r0
 800cbac:	4313      	orrs	r3, r2
 800cbae:	3401      	adds	r4, #1
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	4829      	ldr	r0, [pc, #164]	; (800cc60 <_vfiprintf_r+0x228>)
 800cbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbbe:	f7fd fcc3 	bl	800a548 <memchr>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d03f      	beq.n	800cc46 <_vfiprintf_r+0x20e>
 800cbc6:	4b27      	ldr	r3, [pc, #156]	; (800cc64 <_vfiprintf_r+0x22c>)
 800cbc8:	bb1b      	cbnz	r3, 800cc12 <_vfiprintf_r+0x1da>
 800cbca:	9b03      	ldr	r3, [sp, #12]
 800cbcc:	3307      	adds	r3, #7
 800cbce:	f023 0307 	bic.w	r3, r3, #7
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	9303      	str	r3, [sp, #12]
 800cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd8:	443b      	add	r3, r7
 800cbda:	9309      	str	r3, [sp, #36]	; 0x24
 800cbdc:	e768      	b.n	800cab0 <_vfiprintf_r+0x78>
 800cbde:	460c      	mov	r4, r1
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe6:	e7a6      	b.n	800cb36 <_vfiprintf_r+0xfe>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f04f 0c0a 	mov.w	ip, #10
 800cbee:	4619      	mov	r1, r3
 800cbf0:	3401      	adds	r4, #1
 800cbf2:	9305      	str	r3, [sp, #20]
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfa:	3a30      	subs	r2, #48	; 0x30
 800cbfc:	2a09      	cmp	r2, #9
 800cbfe:	d903      	bls.n	800cc08 <_vfiprintf_r+0x1d0>
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0c6      	beq.n	800cb92 <_vfiprintf_r+0x15a>
 800cc04:	9105      	str	r1, [sp, #20]
 800cc06:	e7c4      	b.n	800cb92 <_vfiprintf_r+0x15a>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc10:	e7f0      	b.n	800cbf4 <_vfiprintf_r+0x1bc>
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	462a      	mov	r2, r5
 800cc18:	4630      	mov	r0, r6
 800cc1a:	4b13      	ldr	r3, [pc, #76]	; (800cc68 <_vfiprintf_r+0x230>)
 800cc1c:	a904      	add	r1, sp, #16
 800cc1e:	f7fc fed7 	bl	80099d0 <_printf_float>
 800cc22:	4607      	mov	r7, r0
 800cc24:	1c78      	adds	r0, r7, #1
 800cc26:	d1d6      	bne.n	800cbd6 <_vfiprintf_r+0x19e>
 800cc28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc2a:	07d9      	lsls	r1, r3, #31
 800cc2c:	d405      	bmi.n	800cc3a <_vfiprintf_r+0x202>
 800cc2e:	89ab      	ldrh	r3, [r5, #12]
 800cc30:	059a      	lsls	r2, r3, #22
 800cc32:	d402      	bmi.n	800cc3a <_vfiprintf_r+0x202>
 800cc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc36:	f7fd fc86 	bl	800a546 <__retarget_lock_release_recursive>
 800cc3a:	89ab      	ldrh	r3, [r5, #12]
 800cc3c:	065b      	lsls	r3, r3, #25
 800cc3e:	f53f af1d 	bmi.w	800ca7c <_vfiprintf_r+0x44>
 800cc42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc44:	e71c      	b.n	800ca80 <_vfiprintf_r+0x48>
 800cc46:	ab03      	add	r3, sp, #12
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <_vfiprintf_r+0x230>)
 800cc50:	a904      	add	r1, sp, #16
 800cc52:	f7fd f95d 	bl	8009f10 <_printf_i>
 800cc56:	e7e4      	b.n	800cc22 <_vfiprintf_r+0x1ea>
 800cc58:	0800d4ed 	.word	0x0800d4ed
 800cc5c:	0800d4f3 	.word	0x0800d4f3
 800cc60:	0800d4f7 	.word	0x0800d4f7
 800cc64:	080099d1 	.word	0x080099d1
 800cc68:	0800ca15 	.word	0x0800ca15

0800cc6c <__swbuf_r>:
 800cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6e:	460e      	mov	r6, r1
 800cc70:	4614      	mov	r4, r2
 800cc72:	4605      	mov	r5, r0
 800cc74:	b118      	cbz	r0, 800cc7e <__swbuf_r+0x12>
 800cc76:	6a03      	ldr	r3, [r0, #32]
 800cc78:	b90b      	cbnz	r3, 800cc7e <__swbuf_r+0x12>
 800cc7a:	f7fd fae5 	bl	800a248 <__sinit>
 800cc7e:	69a3      	ldr	r3, [r4, #24]
 800cc80:	60a3      	str	r3, [r4, #8]
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	071a      	lsls	r2, r3, #28
 800cc86:	d525      	bpl.n	800ccd4 <__swbuf_r+0x68>
 800cc88:	6923      	ldr	r3, [r4, #16]
 800cc8a:	b31b      	cbz	r3, 800ccd4 <__swbuf_r+0x68>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	6922      	ldr	r2, [r4, #16]
 800cc90:	b2f6      	uxtb	r6, r6
 800cc92:	1a98      	subs	r0, r3, r2
 800cc94:	6963      	ldr	r3, [r4, #20]
 800cc96:	4637      	mov	r7, r6
 800cc98:	4283      	cmp	r3, r0
 800cc9a:	dc04      	bgt.n	800cca6 <__swbuf_r+0x3a>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f7ff fdce 	bl	800c840 <_fflush_r>
 800cca4:	b9e0      	cbnz	r0, 800cce0 <__swbuf_r+0x74>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	60a3      	str	r3, [r4, #8]
 800ccac:	6823      	ldr	r3, [r4, #0]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	6022      	str	r2, [r4, #0]
 800ccb2:	701e      	strb	r6, [r3, #0]
 800ccb4:	6962      	ldr	r2, [r4, #20]
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d004      	beq.n	800ccc6 <__swbuf_r+0x5a>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	07db      	lsls	r3, r3, #31
 800ccc0:	d506      	bpl.n	800ccd0 <__swbuf_r+0x64>
 800ccc2:	2e0a      	cmp	r6, #10
 800ccc4:	d104      	bne.n	800ccd0 <__swbuf_r+0x64>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f7ff fdb9 	bl	800c840 <_fflush_r>
 800ccce:	b938      	cbnz	r0, 800cce0 <__swbuf_r+0x74>
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f000 f806 	bl	800cce8 <__swsetup_r>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d0d5      	beq.n	800cc8c <__swbuf_r+0x20>
 800cce0:	f04f 37ff 	mov.w	r7, #4294967295
 800cce4:	e7f4      	b.n	800ccd0 <__swbuf_r+0x64>
	...

0800cce8 <__swsetup_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4b2a      	ldr	r3, [pc, #168]	; (800cd94 <__swsetup_r+0xac>)
 800ccec:	4605      	mov	r5, r0
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	b118      	cbz	r0, 800ccfc <__swsetup_r+0x14>
 800ccf4:	6a03      	ldr	r3, [r0, #32]
 800ccf6:	b90b      	cbnz	r3, 800ccfc <__swsetup_r+0x14>
 800ccf8:	f7fd faa6 	bl	800a248 <__sinit>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd02:	0718      	lsls	r0, r3, #28
 800cd04:	d422      	bmi.n	800cd4c <__swsetup_r+0x64>
 800cd06:	06d9      	lsls	r1, r3, #27
 800cd08:	d407      	bmi.n	800cd1a <__swsetup_r+0x32>
 800cd0a:	2309      	movs	r3, #9
 800cd0c:	602b      	str	r3, [r5, #0]
 800cd0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	81a3      	strh	r3, [r4, #12]
 800cd18:	e034      	b.n	800cd84 <__swsetup_r+0x9c>
 800cd1a:	0758      	lsls	r0, r3, #29
 800cd1c:	d512      	bpl.n	800cd44 <__swsetup_r+0x5c>
 800cd1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd20:	b141      	cbz	r1, 800cd34 <__swsetup_r+0x4c>
 800cd22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd26:	4299      	cmp	r1, r3
 800cd28:	d002      	beq.n	800cd30 <__swsetup_r+0x48>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7fe fa9c 	bl	800b268 <_free_r>
 800cd30:	2300      	movs	r3, #0
 800cd32:	6363      	str	r3, [r4, #52]	; 0x34
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6063      	str	r3, [r4, #4]
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f043 0308 	orr.w	r3, r3, #8
 800cd4a:	81a3      	strh	r3, [r4, #12]
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	b94b      	cbnz	r3, 800cd64 <__swsetup_r+0x7c>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd5a:	d003      	beq.n	800cd64 <__swsetup_r+0x7c>
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 f883 	bl	800ce6a <__smakebuf_r>
 800cd64:	89a0      	ldrh	r0, [r4, #12]
 800cd66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd6a:	f010 0301 	ands.w	r3, r0, #1
 800cd6e:	d00a      	beq.n	800cd86 <__swsetup_r+0x9e>
 800cd70:	2300      	movs	r3, #0
 800cd72:	60a3      	str	r3, [r4, #8]
 800cd74:	6963      	ldr	r3, [r4, #20]
 800cd76:	425b      	negs	r3, r3
 800cd78:	61a3      	str	r3, [r4, #24]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	b943      	cbnz	r3, 800cd90 <__swsetup_r+0xa8>
 800cd7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd82:	d1c4      	bne.n	800cd0e <__swsetup_r+0x26>
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	0781      	lsls	r1, r0, #30
 800cd88:	bf58      	it	pl
 800cd8a:	6963      	ldrpl	r3, [r4, #20]
 800cd8c:	60a3      	str	r3, [r4, #8]
 800cd8e:	e7f4      	b.n	800cd7a <__swsetup_r+0x92>
 800cd90:	2000      	movs	r0, #0
 800cd92:	e7f7      	b.n	800cd84 <__swsetup_r+0x9c>
 800cd94:	200001d4 	.word	0x200001d4

0800cd98 <_raise_r>:
 800cd98:	291f      	cmp	r1, #31
 800cd9a:	b538      	push	{r3, r4, r5, lr}
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	d904      	bls.n	800cdac <_raise_r+0x14>
 800cda2:	2316      	movs	r3, #22
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cdae:	b112      	cbz	r2, 800cdb6 <_raise_r+0x1e>
 800cdb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdb4:	b94b      	cbnz	r3, 800cdca <_raise_r+0x32>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f000 f830 	bl	800ce1c <_getpid_r>
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc6:	f000 b817 	b.w	800cdf8 <_kill_r>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d00a      	beq.n	800cde4 <_raise_r+0x4c>
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	d103      	bne.n	800cdda <_raise_r+0x42>
 800cdd2:	2316      	movs	r3, #22
 800cdd4:	6003      	str	r3, [r0, #0]
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7e7      	b.n	800cdaa <_raise_r+0x12>
 800cdda:	2400      	movs	r4, #0
 800cddc:	4628      	mov	r0, r5
 800cdde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cde2:	4798      	blx	r3
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7e0      	b.n	800cdaa <_raise_r+0x12>

0800cde8 <raise>:
 800cde8:	4b02      	ldr	r3, [pc, #8]	; (800cdf4 <raise+0xc>)
 800cdea:	4601      	mov	r1, r0
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	f7ff bfd3 	b.w	800cd98 <_raise_r>
 800cdf2:	bf00      	nop
 800cdf4:	200001d4 	.word	0x200001d4

0800cdf8 <_kill_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4d06      	ldr	r5, [pc, #24]	; (800ce18 <_kill_r+0x20>)
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	4611      	mov	r1, r2
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	f7f5 fc30 	bl	800266a <_kill>
 800ce0a:	1c43      	adds	r3, r0, #1
 800ce0c:	d102      	bne.n	800ce14 <_kill_r+0x1c>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	b103      	cbz	r3, 800ce14 <_kill_r+0x1c>
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	bd38      	pop	{r3, r4, r5, pc}
 800ce16:	bf00      	nop
 800ce18:	20003d7c 	.word	0x20003d7c

0800ce1c <_getpid_r>:
 800ce1c:	f7f5 bc1e 	b.w	800265c <_getpid>

0800ce20 <__swhatbuf_r>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	460c      	mov	r4, r1
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	4615      	mov	r5, r2
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	461e      	mov	r6, r3
 800ce2e:	b096      	sub	sp, #88	; 0x58
 800ce30:	da0c      	bge.n	800ce4c <__swhatbuf_r+0x2c>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	2100      	movs	r1, #0
 800ce36:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce3a:	bf0c      	ite	eq
 800ce3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce40:	2340      	movne	r3, #64	; 0x40
 800ce42:	2000      	movs	r0, #0
 800ce44:	6031      	str	r1, [r6, #0]
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	b016      	add	sp, #88	; 0x58
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	466a      	mov	r2, sp
 800ce4e:	f000 f849 	bl	800cee4 <_fstat_r>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	dbed      	blt.n	800ce32 <__swhatbuf_r+0x12>
 800ce56:	9901      	ldr	r1, [sp, #4]
 800ce58:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce5c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce60:	4259      	negs	r1, r3
 800ce62:	4159      	adcs	r1, r3
 800ce64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce68:	e7eb      	b.n	800ce42 <__swhatbuf_r+0x22>

0800ce6a <__smakebuf_r>:
 800ce6a:	898b      	ldrh	r3, [r1, #12]
 800ce6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce6e:	079d      	lsls	r5, r3, #30
 800ce70:	4606      	mov	r6, r0
 800ce72:	460c      	mov	r4, r1
 800ce74:	d507      	bpl.n	800ce86 <__smakebuf_r+0x1c>
 800ce76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	6123      	str	r3, [r4, #16]
 800ce7e:	2301      	movs	r3, #1
 800ce80:	6163      	str	r3, [r4, #20]
 800ce82:	b002      	add	sp, #8
 800ce84:	bd70      	pop	{r4, r5, r6, pc}
 800ce86:	466a      	mov	r2, sp
 800ce88:	ab01      	add	r3, sp, #4
 800ce8a:	f7ff ffc9 	bl	800ce20 <__swhatbuf_r>
 800ce8e:	9900      	ldr	r1, [sp, #0]
 800ce90:	4605      	mov	r5, r0
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7fe fdb2 	bl	800b9fc <_malloc_r>
 800ce98:	b948      	cbnz	r0, 800ceae <__smakebuf_r+0x44>
 800ce9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9e:	059a      	lsls	r2, r3, #22
 800cea0:	d4ef      	bmi.n	800ce82 <__smakebuf_r+0x18>
 800cea2:	f023 0303 	bic.w	r3, r3, #3
 800cea6:	f043 0302 	orr.w	r3, r3, #2
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	e7e3      	b.n	800ce76 <__smakebuf_r+0xc>
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	6020      	str	r0, [r4, #0]
 800ceb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	9b00      	ldr	r3, [sp, #0]
 800ceba:	6120      	str	r0, [r4, #16]
 800cebc:	6163      	str	r3, [r4, #20]
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	b15b      	cbz	r3, 800ceda <__smakebuf_r+0x70>
 800cec2:	4630      	mov	r0, r6
 800cec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec8:	f000 f81e 	bl	800cf08 <_isatty_r>
 800cecc:	b128      	cbz	r0, 800ceda <__smakebuf_r+0x70>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	f043 0301 	orr.w	r3, r3, #1
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	431d      	orrs	r5, r3
 800cede:	81a5      	strh	r5, [r4, #12]
 800cee0:	e7cf      	b.n	800ce82 <__smakebuf_r+0x18>
	...

0800cee4 <_fstat_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	2300      	movs	r3, #0
 800cee8:	4d06      	ldr	r5, [pc, #24]	; (800cf04 <_fstat_r+0x20>)
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	4611      	mov	r1, r2
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	f7f5 fc18 	bl	8002726 <_fstat>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	d102      	bne.n	800cf00 <_fstat_r+0x1c>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	b103      	cbz	r3, 800cf00 <_fstat_r+0x1c>
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	bd38      	pop	{r3, r4, r5, pc}
 800cf02:	bf00      	nop
 800cf04:	20003d7c 	.word	0x20003d7c

0800cf08 <_isatty_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	4d05      	ldr	r5, [pc, #20]	; (800cf24 <_isatty_r+0x1c>)
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	f7f5 fc16 	bl	8002744 <_isatty>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_isatty_r+0x1a>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_isatty_r+0x1a>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	20003d7c 	.word	0x20003d7c

0800cf28 <_init>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr

0800cf34 <_fini>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr
