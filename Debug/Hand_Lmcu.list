
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800d8d8  0800d8d8  0001d8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd8c  0800dd8c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd94  0800dd94  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd94  0800dd94  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd98  0800dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800dd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d4  0800df70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800df70  00020820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b3cb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c84  00000000  00000000  0003b612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d1  00000000  00000000  000409a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9be  00000000  00000000  00041b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d66f  00000000  00000000  0006d52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b93f  00000000  00000000  0008ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074c0  00000000  00000000  001964e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0019d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8c0 	.word	0x0800d8c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d8c0 	.word	0x0800d8c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	if(strstr(uartRecieveBuffer,"{S"))
 8000ff6:	4946      	ldr	r1, [pc, #280]	; (8001110 <ProcessUartData+0x120>)
 8000ff8:	4846      	ldr	r0, [pc, #280]	; (8001114 <ProcessUartData+0x124>)
 8000ffa:	f009 fec8 	bl	800ad8e <strstr>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <ProcessUartData+0x1c>
		control_mode=speed_mode;
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <ProcessUartData+0x128>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <ProcessUartData+0x22>
	else
		control_mode=position_mode;
 800100c:	4b42      	ldr	r3, [pc, #264]	; (8001118 <ProcessUartData+0x128>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
	char* result;
	result= memchr(uartRecieveBuffer, 'P', strlen(uartRecieveBuffer));
 8001012:	4840      	ldr	r0, [pc, #256]	; (8001114 <ProcessUartData+0x124>)
 8001014:	f7ff f92c 	bl	8000270 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	2150      	movs	r1, #80	; 0x50
 800101e:	483d      	ldr	r0, [pc, #244]	; (8001114 <ProcessUartData+0x124>)
 8001020:	f7ff f8d6 	bl	80001d0 <memchr>
 8001024:	6078      	str	r0, [r7, #4]
	Fingers_Status.Pinky.SetPoint = atof(result+2);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3302      	adds	r3, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f008 fafe 	bl	800962c <atof>
 8001030:	ec53 2b10 	vmov	r2, r3, d0
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdd6 	bl	8000be8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <ProcessUartData+0x12c>)
 8001040:	6513      	str	r3, [r2, #80]	; 0x50
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 8001042:	4834      	ldr	r0, [pc, #208]	; (8001114 <ProcessUartData+0x124>)
 8001044:	f7ff f914 	bl	8000270 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	2152      	movs	r1, #82	; 0x52
 800104e:	4831      	ldr	r0, [pc, #196]	; (8001114 <ProcessUartData+0x124>)
 8001050:	f7ff f8be 	bl	80001d0 <memchr>
 8001054:	6078      	str	r0, [r7, #4]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3302      	adds	r3, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f008 fae6 	bl	800962c <atof>
 8001060:	ec53 2b10 	vmov	r2, r3, d0
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fdbe 	bl	8000be8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	4a2b      	ldr	r2, [pc, #172]	; (800111c <ProcessUartData+0x12c>)
 8001070:	63d3      	str	r3, [r2, #60]	; 0x3c
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <ProcessUartData+0x124>)
 8001074:	f7ff f8fc 	bl	8000270 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	214d      	movs	r1, #77	; 0x4d
 800107e:	4825      	ldr	r0, [pc, #148]	; (8001114 <ProcessUartData+0x124>)
 8001080:	f7ff f8a6 	bl	80001d0 <memchr>
 8001084:	6078      	str	r0, [r7, #4]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3302      	adds	r3, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f008 face 	bl	800962c <atof>
 8001090:	ec53 2b10 	vmov	r2, r3, d0
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fda6 	bl	8000be8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <ProcessUartData+0x12c>)
 80010a0:	6293      	str	r3, [r2, #40]	; 0x28
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 80010a2:	481c      	ldr	r0, [pc, #112]	; (8001114 <ProcessUartData+0x124>)
 80010a4:	f7ff f8e4 	bl	8000270 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	2149      	movs	r1, #73	; 0x49
 80010ae:	4819      	ldr	r0, [pc, #100]	; (8001114 <ProcessUartData+0x124>)
 80010b0:	f7ff f88e 	bl	80001d0 <memchr>
 80010b4:	6078      	str	r0, [r7, #4]
	Fingers_Status.Index.SetPoint= atof(result+2);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3302      	adds	r3, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fab6 	bl	800962c <atof>
 80010c0:	ec53 2b10 	vmov	r2, r3, d0
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd8e 	bl	8000be8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <ProcessUartData+0x12c>)
 80010d0:	6153      	str	r3, [r2, #20]
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <ProcessUartData+0x124>)
 80010d4:	f7ff f8cc 	bl	8000270 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	2154      	movs	r1, #84	; 0x54
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <ProcessUartData+0x124>)
 80010e0:	f7ff f876 	bl	80001d0 <memchr>
 80010e4:	6078      	str	r0, [r7, #4]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3302      	adds	r3, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f008 fa9e 	bl	800962c <atof>
 80010f0:	ec53 2b10 	vmov	r2, r3, d0
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd76 	bl	8000be8 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <ProcessUartData+0x12c>)
 8001100:	6013      	str	r3, [r2, #0]
	send_data_UART=1;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <ProcessUartData+0x130>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800d8d8 	.word	0x0800d8d8
 8001114:	200001f4 	.word	0x200001f4
 8001118:	2000028d 	.word	0x2000028d
 800111c:	20000608 	.word	0x20000608
 8001120:	2000028c 	.word	0x2000028c

08001124 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_UART_RxCpltCallback+0x9c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d140      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x94>
		uartRecieveBuffer[uartCounter]=RXuart;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_UART_RxCpltCallback+0xa4>)
 800113e:	7819      	ldrb	r1, [r3, #0]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001142:	5499      	strb	r1, [r3, r2]
		if(uartCounter>1)
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d92a      	bls.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
		{
			if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d123      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	2b0d      	cmp	r3, #13
 8001166:	d11c      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3b02      	subs	r3, #2
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	2b7d      	cmp	r3, #125	; 0x7d
 8001174:	d115      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
				ProcessUartData();
 8001176:	f7ff ff3b 	bl	8000ff0 <ProcessUartData>
				ManualControl=1;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_RxCpltCallback+0xac>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
				uartCounter=-1;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	801a      	strh	r2, [r3, #0]

				for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001188:	2300      	movs	r3, #0
 800118a:	81fb      	strh	r3, [r7, #14]
 800118c:	e006      	b.n	800119c <HAL_UART_RxCpltCallback+0x78>
					uartRecieveBuffer[cleanCounter]=0;
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001192:	2100      	movs	r1, #0
 8001194:	54d1      	strb	r1, [r2, r3]
				for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	3301      	adds	r3, #1
 800119a:	81fb      	strh	r3, [r7, #14]
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	2b95      	cmp	r3, #149	; 0x95
 80011a0:	d9f5      	bls.n	800118e <HAL_UART_RxCpltCallback+0x6a>
			}
		}
		uartCounter++;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 80011ac:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4905      	ldr	r1, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0xa4>)
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <HAL_UART_RxCpltCallback+0xb0>)
 80011b4:	f006 ff54 	bl	8008060 <HAL_UART_Receive_IT>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004c00 	.word	0x40004c00
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	2000028a 	.word	0x2000028a
 80011cc:	200001f4 	.word	0x200001f4
 80011d0:	200006bc 	.word	0x200006bc
 80011d4:	20000580 	.word	0x20000580

080011d8 <HAL_UART_TxCpltCallback>:
/*
 * Function2--------------------------
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_UART_TxCpltCallback+0x24>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d102      	bne.n	80011f0 <HAL_UART_TxCpltCallback+0x18>
	{
		TX_State=idel;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_UART_TxCpltCallback+0x28>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	}
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40013800 	.word	0x40013800
 8001200:	2000028b 	.word	0x2000028b

08001204 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <MX_ADC1_Init+0x154>)
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <MX_ADC1_Init+0x158>)
 800122a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800122c:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <MX_ADC1_Init+0x154>)
 800122e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001232:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001234:	4b48      	ldr	r3, [pc, #288]	; (8001358 <MX_ADC1_Init+0x154>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <MX_ADC1_Init+0x154>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <MX_ADC1_Init+0x154>)
 8001242:	2201      	movs	r2, #1
 8001244:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <MX_ADC1_Init+0x154>)
 8001248:	2204      	movs	r2, #4
 800124a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <MX_ADC1_Init+0x154>)
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <MX_ADC1_Init+0x154>)
 8001254:	2201      	movs	r2, #1
 8001256:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001258:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <MX_ADC1_Init+0x154>)
 800125a:	2205      	movs	r2, #5
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <MX_ADC1_Init+0x154>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001266:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <MX_ADC1_Init+0x154>)
 8001268:	2200      	movs	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126c:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <MX_ADC1_Init+0x154>)
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <MX_ADC1_Init+0x154>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <MX_ADC1_Init+0x154>)
 800127c:	2200      	movs	r2, #0
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <MX_ADC1_Init+0x154>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001288:	4833      	ldr	r0, [pc, #204]	; (8001358 <MX_ADC1_Init+0x154>)
 800128a:	f002 fd61 	bl	8003d50 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001294:	f001 f90a 	bl	80024ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	482d      	ldr	r0, [pc, #180]	; (8001358 <MX_ADC1_Init+0x154>)
 80012a4:	f003 fcb0 	bl	8004c08 <HAL_ADCEx_MultiModeConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012ae:	f001 f8fd 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_ADC1_Init+0x15c>)
 80012b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b6:	2306      	movs	r3, #6
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012ba:	2307      	movs	r3, #7
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012be:	237f      	movs	r3, #127	; 0x7f
 80012c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c2:	2304      	movs	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_ADC1_Init+0x154>)
 80012d0:	f002 ff68 	bl	80041a4 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80012da:	f001 f8e7 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_ADC1_Init+0x160>)
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012e2:	230c      	movs	r3, #12
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <MX_ADC1_Init+0x154>)
 80012ec:	f002 ff5a 	bl	80041a4 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80012f6:	f001 f8d9 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_ADC1_Init+0x164>)
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012fe:	2312      	movs	r3, #18
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_ADC1_Init+0x154>)
 8001308:	f002 ff4c 	bl	80041a4 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001312:	f001 f8cb 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_ADC1_Init+0x168>)
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800131a:	2318      	movs	r3, #24
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_ADC1_Init+0x154>)
 8001324:	f002 ff3e 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800132e:	f001 f8bd 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_ADC1_Init+0x16c>)
 8001334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_ADC1_Init+0x154>)
 8001342:	f002 ff2f 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 800134c:	f001 f8ae 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000290 	.word	0x20000290
 800135c:	50040000 	.word	0x50040000
 8001360:	2a000400 	.word	0x2a000400
 8001364:	25b00200 	.word	0x25b00200
 8001368:	1d500080 	.word	0x1d500080
 800136c:	0c900008 	.word	0x0c900008
 8001370:	10c00010 	.word	0x10c00010

08001374 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <MX_ADC2_Init+0x14c>)
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <MX_ADC2_Init+0x150>)
 800138e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_ADC2_Init+0x14c>)
 8001392:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001396:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <MX_ADC2_Init+0x14c>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013aa:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 6;
 80013bc:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013be:	2206      	movs	r2, #6
 80013c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d0:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013ec:	4834      	ldr	r0, [pc, #208]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80013ee:	f002 fcaf 	bl	8003d50 <HAL_ADC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80013f8:	f001 f858 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_ADC2_Init+0x154>)
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001400:	2306      	movs	r3, #6
 8001402:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001404:	2307      	movs	r3, #7
 8001406:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001408:	237f      	movs	r3, #127	; 0x7f
 800140a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140c:	2304      	movs	r3, #4
 800140e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4829      	ldr	r0, [pc, #164]	; (80014c0 <MX_ADC2_Init+0x14c>)
 800141a:	f002 fec3 	bl	80041a4 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001424:	f001 f842 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_ADC2_Init+0x158>)
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800142c:	230c      	movs	r3, #12
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4822      	ldr	r0, [pc, #136]	; (80014c0 <MX_ADC2_Init+0x14c>)
 8001436:	f002 feb5 	bl	80041a4 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8001440:	f001 f834 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MX_ADC2_Init+0x15c>)
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001448:	2312      	movs	r3, #18
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	481b      	ldr	r0, [pc, #108]	; (80014c0 <MX_ADC2_Init+0x14c>)
 8001452:	f002 fea7 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 800145c:	f001 f826 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC2_Init+0x160>)
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001464:	2318      	movs	r3, #24
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_ADC2_Init+0x14c>)
 800146e:	f002 fe99 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC2_Init+0x108>
  {
    Error_Handler();
 8001478:	f001 f818 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_ADC2_Init+0x164>)
 800147e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_ADC2_Init+0x14c>)
 800148c:	f002 fe8a 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8001496:	f001 f809 	bl	80024ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_ADC2_Init+0x168>)
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800149e:	f44f 7383 	mov.w	r3, #262	; 0x106
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_ADC2_Init+0x14c>)
 80014aa:	f002 fe7b 	bl	80041a4 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC2_Init+0x144>
  {
    Error_Handler();
 80014b4:	f000 fffa 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002f4 	.word	0x200002f4
 80014c4:	50040100 	.word	0x50040100
 80014c8:	04300002 	.word	0x04300002
 80014cc:	08600004 	.word	0x08600004
 80014d0:	19200040 	.word	0x19200040
 80014d4:	21800100 	.word	0x21800100
 80014d8:	2e300800 	.word	0x2e300800
 80014dc:	32601000 	.word	0x32601000

080014e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a61      	ldr	r2, [pc, #388]	; (8001684 <HAL_ADC_MspInit+0x1a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d146      	bne.n	8001590 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001502:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 800150a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10b      	bne.n	800152c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	4a5c      	ldr	r2, [pc, #368]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 800151a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800151e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001520:	4b5a      	ldr	r3, [pc, #360]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	4b57      	ldr	r3, [pc, #348]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	4a56      	ldr	r2, [pc, #344]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001538:	4b54      	ldr	r3, [pc, #336]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001548:	4a50      	ldr	r2, [pc, #320]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 800155c:	230c      	movs	r3, #12
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001560:	230b      	movs	r3, #11
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4848      	ldr	r0, [pc, #288]	; (8001690 <HAL_ADC_MspInit+0x1b0>)
 8001570:	f004 f87e 	bl	8005670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 8001574:	2334      	movs	r3, #52	; 0x34
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001578:	230b      	movs	r3, #11
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f004 f871 	bl	8005670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800158e:	e075      	b.n	800167c <HAL_ADC_MspInit+0x19c>
  else if(adcHandle->Instance==ADC2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <HAL_ADC_MspInit+0x1b4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d170      	bne.n	800167c <HAL_ADC_MspInit+0x19c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a39      	ldr	r2, [pc, #228]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 80015a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_ADC_MspInit+0x1a8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a36      	ldr	r2, [pc, #216]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_ADC_MspInit+0x1ac>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 80015f4:	2303      	movs	r3, #3
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f8:	230b      	movs	r3, #11
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4822      	ldr	r0, [pc, #136]	; (8001690 <HAL_ADC_MspInit+0x1b0>)
 8001608:	f004 f832 	bl	8005670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 800160c:	23ca      	movs	r3, #202	; 0xca
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001610:	230b      	movs	r3, #11
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f004 f825 	bl	8005670 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001628:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_ADC_MspInit+0x1bc>)
 800162a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 800164e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001652:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001656:	2220      	movs	r2, #32
 8001658:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001662:	f003 fd8f 	bl	8005184 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_ADC_MspInit+0x190>
      Error_Handler();
 800166c:	f000 ff1e 	bl	80024ac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001674:	64da      	str	r2, [r3, #76]	; 0x4c
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_ADC_MspInit+0x1b8>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800167c:	bf00      	nop
 800167e:	3738      	adds	r7, #56	; 0x38
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	50040000 	.word	0x50040000
 8001688:	200003a0 	.word	0x200003a0
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800
 8001694:	50040100 	.word	0x50040100
 8001698:	20000358 	.word	0x20000358
 800169c:	4002001c 	.word	0x4002001c

080016a0 <ADC_ReadCurrent_Pinky>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Pinky()
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*ADCData[Pinky]))/1.01;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 80016a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <ADC_ReadCurrent_Pinky+0xb4>)
 80016b6:	891b      	ldrh	r3, [r3, #8]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff32 	bl	8000524 <__aeabi_i2d>
 80016c0:	a31f      	add	r3, pc, #124	; (adr r3, 8001740 <ADC_ReadCurrent_Pinky+0xa0>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff97 	bl	80005f8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fddb 	bl	800028c <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	a31a      	add	r3, pc, #104	; (adr r3, 8001748 <ADC_ReadCurrent_Pinky+0xa8>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7ff f8b2 	bl	800084c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa5a 	bl	8000ba8 <__aeabi_d2uiz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 80016fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Current_motor[1]=Fingers_Status.Pinky.Current;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 8001700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001704:	461a      	mov	r2, r3
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <ADC_ReadCurrent_Pinky+0xb8>)
 8001708:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>Max_Current_Close_Pinky || Fingers_Status.Pinky.Current<Min_Current_Open_Pinky)
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 800170c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001710:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001714:	d805      	bhi.n	8001722 <ADC_ReadCurrent_Pinky+0x82>
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 8001718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800171c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001720:	d204      	bcs.n	800172c <ADC_ReadCurrent_Pinky+0x8c>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 8001724:	2201      	movs	r2, #1
 8001726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800172a:	e004      	b.n	8001736 <ADC_ReadCurrent_Pinky+0x96>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <ADC_ReadCurrent_Pinky+0xb0>)
 800172e:	2200      	movs	r2, #0
 8001730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	47ae147b 	.word	0x47ae147b
 8001744:	3f847ae1 	.word	0x3f847ae1
 8001748:	c28f5c29 	.word	0xc28f5c29
 800174c:	3ff028f5 	.word	0x3ff028f5
 8001750:	20000608 	.word	0x20000608
 8001754:	200006c0 	.word	0x200006c0
 8001758:	2000066c 	.word	0x2000066c
 800175c:	00000000 	.word	0x00000000

08001760 <ADC_ReadCurrent_Ring>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Ring()
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	af00      	add	r7, sp, #0
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*ADCData[Ring]))/1.01;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 8001766:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feda 	bl	8000524 <__aeabi_i2d>
 8001770:	4604      	mov	r4, r0
 8001772:	460d      	mov	r5, r1
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <ADC_ReadCurrent_Ring+0xac>)
 8001776:	88db      	ldrh	r3, [r3, #6]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a31d      	add	r3, pc, #116	; (adr r3, 80017f8 <ADC_ReadCurrent_Ring+0x98>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd7b 	bl	800028c <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	a318      	add	r3, pc, #96	; (adr r3, 8001800 <ADC_ReadCurrent_Ring+0xa0>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f852 	bl	800084c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f9fa 	bl	8000ba8 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 80017ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	if(Fingers_Status.Ring.Current>Max_Current_Close_Ring || Fingers_Status.Ring.Current<Min_Current_Open_Ring)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 80017c0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80017c4:	f240 729e 	movw	r2, #1950	; 0x79e
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d806      	bhi.n	80017da <ADC_ReadCurrent_Ring+0x7a>
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 80017ce:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80017d2:	f240 620d 	movw	r2, #1549	; 0x60d
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d804      	bhi.n	80017e4 <ADC_ReadCurrent_Ring+0x84>
		Fingers_Status.Ring.Stuck_Finger=1;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80017e2:	e004      	b.n	80017ee <ADC_ReadCurrent_Ring+0x8e>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <ADC_ReadCurrent_Ring+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	bdb0      	pop	{r4, r5, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	f3af 8000 	nop.w
 80017f8:	47ae147b 	.word	0x47ae147b
 80017fc:	3f847ae1 	.word	0x3f847ae1
 8001800:	c28f5c29 	.word	0xc28f5c29
 8001804:	3ff028f5 	.word	0x3ff028f5
 8001808:	20000608 	.word	0x20000608
 800180c:	200006c0 	.word	0x200006c0

08001810 <ADC_ReadCurrent_Middle>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Middle()
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	af00      	add	r7, sp, #0
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*ADCData[Middle]))/1.01;
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 8001816:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe83 	bl	8000524 <__aeabi_i2d>
 800181e:	4604      	mov	r4, r0
 8001820:	460d      	mov	r5, r1
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <ADC_ReadCurrent_Middle+0x9c>)
 8001824:	889b      	ldrh	r3, [r3, #4]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe7b 	bl	8000524 <__aeabi_i2d>
 800182e:	a31a      	add	r3, pc, #104	; (adr r3, 8001898 <ADC_ReadCurrent_Middle+0x88>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fee0 	bl	80005f8 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4620      	mov	r0, r4
 800183e:	4629      	mov	r1, r5
 8001840:	f7fe fd24 	bl	800028c <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a314      	add	r3, pc, #80	; (adr r3, 80018a0 <ADC_ReadCurrent_Middle+0x90>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fffb 	bl	800084c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9a3 	bl	8000ba8 <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 8001868:	871a      	strh	r2, [r3, #56]	; 0x38
	if(Fingers_Status.Middle.Current>Max_Current_Close_Middle || Fingers_Status.Middle.Current<Min_Current_Open_Middle)
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 800186c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800186e:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8001872:	4293      	cmp	r3, r2
 8001874:	d804      	bhi.n	8001880 <ADC_ReadCurrent_Middle+0x70>
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 8001878:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800187a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800187e:	d204      	bcs.n	800188a <ADC_ReadCurrent_Middle+0x7a>
		Fingers_Status.Middle.Stuck_Finger=1;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001888:	e004      	b.n	8001894 <ADC_ReadCurrent_Middle+0x84>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <ADC_ReadCurrent_Middle+0x98>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	47ae147b 	.word	0x47ae147b
 800189c:	3f847ae1 	.word	0x3f847ae1
 80018a0:	c28f5c29 	.word	0xc28f5c29
 80018a4:	3ff028f5 	.word	0x3ff028f5
 80018a8:	20000608 	.word	0x20000608
 80018ac:	200006c0 	.word	0x200006c0

080018b0 <ADC_ReadCurrent_Index>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Index()
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*ADCData[Index]))/1.01;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 80018b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe33 	bl	8000524 <__aeabi_i2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <ADC_ReadCurrent_Index+0xa4>)
 80018c4:	885b      	ldrh	r3, [r3, #2]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe2b 	bl	8000524 <__aeabi_i2d>
 80018ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001940 <ADC_ReadCurrent_Index+0x90>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fcd4 	bl	800028c <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a316      	add	r3, pc, #88	; (adr r3, 8001948 <ADC_ReadCurrent_Index+0x98>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe ffab 	bl	800084c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f953 	bl	8000ba8 <__aeabi_d2uiz>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 8001908:	849a      	strh	r2, [r3, #36]	; 0x24
	if(Fingers_Status.Index.Current>Max_Current_Close_Index || Fingers_Status.Index.Current<Min_Current_Open_Index)
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 800190c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190e:	f240 729e 	movw	r2, #1950	; 0x79e
 8001912:	4293      	cmp	r3, r2
 8001914:	d805      	bhi.n	8001922 <ADC_ReadCurrent_Index+0x72>
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 8001918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800191a:	f240 52db 	movw	r2, #1499	; 0x5db
 800191e:	4293      	cmp	r3, r2
 8001920:	d804      	bhi.n	800192c <ADC_ReadCurrent_Index+0x7c>
		Fingers_Status.Index.Stuck_Finger=1;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800192a:	e004      	b.n	8001936 <ADC_ReadCurrent_Index+0x86>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <ADC_ReadCurrent_Index+0xa0>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	47ae147b 	.word	0x47ae147b
 8001944:	3f847ae1 	.word	0x3f847ae1
 8001948:	c28f5c29 	.word	0xc28f5c29
 800194c:	3ff028f5 	.word	0x3ff028f5
 8001950:	20000608 	.word	0x20000608
 8001954:	200006c0 	.word	0x200006c0

08001958 <ADC_ReadCurrent_Thumb>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Thumb()
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	af00      	add	r7, sp, #0
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*ADCData[Thumb]))/1.01;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 800195e:	8a1b      	ldrh	r3, [r3, #16]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fddf 	bl	8000524 <__aeabi_i2d>
 8001966:	4604      	mov	r4, r0
 8001968:	460d      	mov	r5, r1
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <ADC_ReadCurrent_Thumb+0x94>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdd7 	bl	8000524 <__aeabi_i2d>
 8001976:	a318      	add	r3, pc, #96	; (adr r3, 80019d8 <ADC_ReadCurrent_Thumb+0x80>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe3c 	bl	80005f8 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fc80 	bl	800028c <__adddf3>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	a312      	add	r3, pc, #72	; (adr r3, 80019e0 <ADC_ReadCurrent_Thumb+0x88>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe ff57 	bl	800084c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f8ff 	bl	8000ba8 <__aeabi_d2uiz>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 80019b0:	821a      	strh	r2, [r3, #16]
	if(Fingers_Status.Thumb.Current>Max_Current_Close_Thumb || Fingers_Status.Thumb.Current<Min_Current_Open_Thumb)
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 80019b4:	8a1b      	ldrh	r3, [r3, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d803      	bhi.n	80019c2 <ADC_ReadCurrent_Thumb+0x6a>
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 80019bc:	8a1b      	ldrh	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <ADC_ReadCurrent_Thumb+0x72>
		Fingers_Status.Thumb.Stuck_Finger=1;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	735a      	strb	r2, [r3, #13]
 80019c8:	e003      	b.n	80019d2 <ADC_ReadCurrent_Thumb+0x7a>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <ADC_ReadCurrent_Thumb+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	735a      	strb	r2, [r3, #13]
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	bdb0      	pop	{r4, r5, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	47ae147b 	.word	0x47ae147b
 80019dc:	3f847ae1 	.word	0x3f847ae1
 80019e0:	c28f5c29 	.word	0xc28f5c29
 80019e4:	3ff028f5 	.word	0x3ff028f5
 80019e8:	20000608 	.word	0x20000608
 80019ec:	200006c0 	.word	0x200006c0

080019f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_CAN1_Init+0x64>)
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <MX_CAN1_Init+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_CAN1_Init+0x64>)
 80019fc:	2210      	movs	r2, #16
 80019fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_CAN1_Init+0x64>)
 8001a40:	f003 f992 	bl	8004d68 <HAL_CAN_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a4a:	f000 fd2f 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200003a4 	.word	0x200003a4
 8001a58:	40006400 	.word	0x40006400

08001a5c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_CAN_MspInit+0x80>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d129      	bne.n	8001ad2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_CAN_MspInit+0x84>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001aae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f003 fdcf 	bl	8005670 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40006400 	.word	0x40006400
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_DMA_Init+0x38>)
 8001aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <MX_DMA_Init+0x38>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6493      	str	r3, [r2, #72]	; 0x48
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_DMA_Init+0x38>)
 8001af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	200c      	movs	r0, #12
 8001b08:	f003 fb05 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b0c:	200c      	movs	r0, #12
 8001b0e:	f003 fb1e 	bl	800514e <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a50      	ldr	r2, [pc, #320]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a4a      	ldr	r2, [pc, #296]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a44      	ldr	r2, [pc, #272]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	4a3e      	ldr	r2, [pc, #248]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <MX_GPIO_Init+0x15c>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b9c:	4838      	ldr	r0, [pc, #224]	; (8001c80 <MX_GPIO_Init+0x160>)
 8001b9e:	f003 ff29 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001ba2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4831      	ldr	r0, [pc, #196]	; (8001c80 <MX_GPIO_Init+0x160>)
 8001bbc:	f003 fd58 	bl	8005670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001bc0:	2330      	movs	r3, #48	; 0x30
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482a      	ldr	r0, [pc, #168]	; (8001c80 <MX_GPIO_Init+0x160>)
 8001bd6:	f003 fd4b 	bl	8005670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001bda:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001bde:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4824      	ldr	r0, [pc, #144]	; (8001c84 <MX_GPIO_Init+0x164>)
 8001bf2:	f003 fd3d 	bl	8005670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f003 fd2e 	bl	8005670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2101      	movs	r1, #1
 8001c18:	2006      	movs	r0, #6
 8001c1a:	f003 fa7c 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c1e:	2006      	movs	r0, #6
 8001c20:	f003 fa95 	bl	800514e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	2007      	movs	r0, #7
 8001c2a:	f003 fa74 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c2e:	2007      	movs	r0, #7
 8001c30:	f003 fa8d 	bl	800514e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	2008      	movs	r0, #8
 8001c3a:	f003 fa6c 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f003 fa85 	bl	800514e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2101      	movs	r1, #1
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f003 fa64 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f003 fa7d 	bl	800514e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	2017      	movs	r0, #23
 8001c5a:	f003 fa5c 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c5e:	2017      	movs	r0, #23
 8001c60:	f003 fa75 	bl	800514e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2101      	movs	r1, #1
 8001c68:	2028      	movs	r0, #40	; 0x28
 8001c6a:	f003 fa54 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c6e:	2028      	movs	r0, #40	; 0x28
 8001c70:	f003 fa6d 	bl	800514e <HAL_NVIC_EnableIRQ>

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	48000400 	.word	0x48000400

08001c88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c98:	f000 811b 	beq.w	8001ed2 <HAL_GPIO_EXTI_Callback+0x24a>
 8001c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca0:	f300 825c 	bgt.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca8:	f000 80d9 	beq.w	8001e5e <HAL_GPIO_EXTI_Callback+0x1d6>
 8001cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cb0:	f300 8254 	bgt.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb8:	d05d      	beq.n	8001d76 <HAL_GPIO_EXTI_Callback+0xee>
 8001cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbe:	f300 824d 	bgt.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc6:	f000 8090 	beq.w	8001dea <HAL_GPIO_EXTI_Callback+0x162>
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	f300 8245 	bgt.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	dc4a      	bgt.n	8001d6c <HAL_GPIO_EXTI_Callback+0xe4>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f340 8240 	ble.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	2b1f      	cmp	r3, #31
 8001ce0:	f200 823c 	bhi.w	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
 8001ce4:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <HAL_GPIO_EXTI_Callback+0x64>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08002011 	.word	0x08002011
 8001cf0:	08002071 	.word	0x08002071
 8001cf4:	0800215d 	.word	0x0800215d
 8001cf8:	080020d1 	.word	0x080020d1
 8001cfc:	0800215d 	.word	0x0800215d
 8001d00:	0800215d 	.word	0x0800215d
 8001d04:	0800215d 	.word	0x0800215d
 8001d08:	0800215d 	.word	0x0800215d
 8001d0c:	0800215d 	.word	0x0800215d
 8001d10:	0800215d 	.word	0x0800215d
 8001d14:	0800215d 	.word	0x0800215d
 8001d18:	0800215d 	.word	0x0800215d
 8001d1c:	0800215d 	.word	0x0800215d
 8001d20:	0800215d 	.word	0x0800215d
 8001d24:	0800215d 	.word	0x0800215d
 8001d28:	08001fa9 	.word	0x08001fa9
 8001d2c:	0800215d 	.word	0x0800215d
 8001d30:	0800215d 	.word	0x0800215d
 8001d34:	0800215d 	.word	0x0800215d
 8001d38:	0800215d 	.word	0x0800215d
 8001d3c:	0800215d 	.word	0x0800215d
 8001d40:	0800215d 	.word	0x0800215d
 8001d44:	0800215d 	.word	0x0800215d
 8001d48:	0800215d 	.word	0x0800215d
 8001d4c:	0800215d 	.word	0x0800215d
 8001d50:	0800215d 	.word	0x0800215d
 8001d54:	0800215d 	.word	0x0800215d
 8001d58:	0800215d 	.word	0x0800215d
 8001d5c:	0800215d 	.word	0x0800215d
 8001d60:	0800215d 	.word	0x0800215d
 8001d64:	0800215d 	.word	0x0800215d
 8001d68:	08001f47 	.word	0x08001f47
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	f000 81d1 	beq.w	8002116 <HAL_GPIO_EXTI_Callback+0x48e>
				default:
					break;
			}
			break;
		default:
			break;
 8001d74:	e1f2      	b.n	800215c <HAL_GPIO_EXTI_Callback+0x4d4>
			switch (Fingers_Status.Pinky.Direction) {
 8001d76:	4ba4      	ldr	r3, [pc, #656]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001d78:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_EXTI_Callback+0xfe>
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d015      	beq.n	8001db0 <HAL_GPIO_EXTI_Callback+0x128>
					break;
 8001d84:	e030      	b.n	8001de8 <HAL_GPIO_EXTI_Callback+0x160>
					Fingers_Status.Pinky.Encoder++;
 8001d86:	4ba0      	ldr	r3, [pc, #640]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b9d      	ldr	r3, [pc, #628]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001d92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001d96:	4b9c      	ldr	r3, [pc, #624]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001d98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001d9c:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d91e      	bls.n	8001de2 <HAL_GPIO_EXTI_Callback+0x15a>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001da4:	4b98      	ldr	r3, [pc, #608]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001da6:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001daa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001dae:	e018      	b.n	8001de2 <HAL_GPIO_EXTI_Callback+0x15a>
					Fingers_Status.Pinky.Encoder--;
 8001db0:	4b95      	ldr	r3, [pc, #596]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8001dc0:	4b91      	ldr	r3, [pc, #580]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001dc6:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d804      	bhi.n	8001dd8 <HAL_GPIO_EXTI_Callback+0x150>
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001dd4:	2b63      	cmp	r3, #99	; 0x63
 8001dd6:	d806      	bhi.n	8001de6 <HAL_GPIO_EXTI_Callback+0x15e>
						Fingers_Status.Pinky.Encoder=0;
 8001dd8:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_EXTI_Callback+0x15e>
					break;
 8001de2:	bf00      	nop
 8001de4:	e1bb      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 8001de6:	bf00      	nop
			break;
 8001de8:	e1b9      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Pinky.Direction) {
 8001dea:	4b87      	ldr	r3, [pc, #540]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dec:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d002      	beq.n	8001dfa <HAL_GPIO_EXTI_Callback+0x172>
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d015      	beq.n	8001e24 <HAL_GPIO_EXTI_Callback+0x19c>
					break;
 8001df8:	e030      	b.n	8001e5c <HAL_GPIO_EXTI_Callback+0x1d4>
					Fingers_Status.Pinky.Encoder++;
 8001dfa:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001dfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e00:	3301      	adds	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e10:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d91e      	bls.n	8001e56 <HAL_GPIO_EXTI_Callback+0x1ce>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001e18:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e1a:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001e22:	e018      	b.n	8001e56 <HAL_GPIO_EXTI_Callback+0x1ce>
					Fingers_Status.Pinky.Encoder--;
 8001e24:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<100)
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e3a:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d804      	bhi.n	8001e4c <HAL_GPIO_EXTI_Callback+0x1c4>
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001e48:	2b63      	cmp	r3, #99	; 0x63
 8001e4a:	d806      	bhi.n	8001e5a <HAL_GPIO_EXTI_Callback+0x1d2>
						Fingers_Status.Pinky.Encoder=0;
 8001e4c:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					break;
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_EXTI_Callback+0x1d2>
					break;
 8001e56:	bf00      	nop
 8001e58:	e181      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 8001e5a:	bf00      	nop
			break;
 8001e5c:	e17f      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Ring.Direction) {
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d002      	beq.n	8001e6e <HAL_GPIO_EXTI_Callback+0x1e6>
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d015      	beq.n	8001e98 <HAL_GPIO_EXTI_Callback+0x210>
					break;
 8001e6c:	e030      	b.n	8001ed0 <HAL_GPIO_EXTI_Callback+0x248>
					Fingers_Status.Ring.Encoder++;
 8001e6e:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e74:	3301      	adds	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001e7e:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d91e      	bls.n	8001eca <HAL_GPIO_EXTI_Callback+0x242>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e8e:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8001e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 8001e96:	e018      	b.n	8001eca <HAL_GPIO_EXTI_Callback+0x242>
					Fingers_Status.Ring.Encoder--;
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eae:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d804      	bhi.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x238>
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	2b63      	cmp	r3, #99	; 0x63
 8001ebe:	d806      	bhi.n	8001ece <HAL_GPIO_EXTI_Callback+0x246>
						Fingers_Status.Ring.Encoder=0;
 8001ec0:	4b51      	ldr	r3, [pc, #324]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_EXTI_Callback+0x246>
					break;
 8001eca:	bf00      	nop
 8001ecc:	e147      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 8001ece:	bf00      	nop
			break;
 8001ed0:	e145      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Ring.Direction) {
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ed4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d002      	beq.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x25a>
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d015      	beq.n	8001f0c <HAL_GPIO_EXTI_Callback+0x284>
					break;
 8001ee0:	e030      	b.n	8001f44 <HAL_GPIO_EXTI_Callback+0x2bc>
					Fingers_Status.Ring.Encoder++;
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef8:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d91e      	bls.n	8001f3e <HAL_GPIO_EXTI_Callback+0x2b6>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f02:	f646 32d0 	movw	r2, #27600	; 0x6bd0
 8001f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 8001f0a:	e018      	b.n	8001f3e <HAL_GPIO_EXTI_Callback+0x2b6>
					Fingers_Status.Ring.Encoder--;
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<100)
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f22:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d804      	bhi.n	8001f34 <HAL_GPIO_EXTI_Callback+0x2ac>
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f30:	2b63      	cmp	r3, #99	; 0x63
 8001f32:	d806      	bhi.n	8001f42 <HAL_GPIO_EXTI_Callback+0x2ba>
						Fingers_Status.Ring.Encoder=0;
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
					break;
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x2ba>
					break;
 8001f3e:	bf00      	nop
 8001f40:	e10d      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 8001f42:	bf00      	nop
			break;
 8001f44:	e10b      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Middle.Direction) {
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <HAL_GPIO_EXTI_Callback+0x2ce>
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d011      	beq.n	8001f78 <HAL_GPIO_EXTI_Callback+0x2f0>
					break;
 8001f54:	e027      	b.n	8001fa6 <HAL_GPIO_EXTI_Callback+0x31e>
					Fingers_Status.Middle.Encoder++;
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f60:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f64:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f66:	f247 021c 	movw	r2, #28700	; 0x701c
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d918      	bls.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x318>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f70:	f247 021c 	movw	r2, #28700	; 0x701c
 8001f74:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 8001f76:	e013      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x318>
					Fingers_Status.Middle.Encoder--;
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f7a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f82:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f88:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d803      	bhi.n	8001f98 <HAL_GPIO_EXTI_Callback+0x310>
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f92:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f94:	2b63      	cmp	r3, #99	; 0x63
 8001f96:	d805      	bhi.n	8001fa4 <HAL_GPIO_EXTI_Callback+0x31c>
					Fingers_Status.Middle.Encoder=0;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 8001f9e:	e001      	b.n	8001fa4 <HAL_GPIO_EXTI_Callback+0x31c>
					break;
 8001fa0:	bf00      	nop
 8001fa2:	e0dc      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 8001fa4:	bf00      	nop
			break;
 8001fa6:	e0da      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Middle.Direction) {
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001faa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d002      	beq.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x330>
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d011      	beq.n	8001fda <HAL_GPIO_EXTI_Callback+0x352>
					break;
 8001fb6:	e02a      	b.n	800200e <HAL_GPIO_EXTI_Callback+0x386>
					Fingers_Status.Middle.Encoder++;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fc2:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fc8:	f247 021c 	movw	r2, #28700	; 0x701c
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d918      	bls.n	8002002 <HAL_GPIO_EXTI_Callback+0x37a>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fd2:	f247 021c 	movw	r2, #28700	; 0x701c
 8001fd6:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 8001fd8:	e013      	b.n	8002002 <HAL_GPIO_EXTI_Callback+0x37a>
					Fingers_Status.Middle.Encoder--;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fdc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fe4:	861a      	strh	r2, [r3, #48]	; 0x30
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<100)
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001fe8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fea:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d803      	bhi.n	8001ffa <HAL_GPIO_EXTI_Callback+0x372>
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ff4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ff6:	2b63      	cmp	r3, #99	; 0x63
 8001ff8:	d808      	bhi.n	800200c <HAL_GPIO_EXTI_Callback+0x384>
					Fingers_Status.Middle.Encoder=0;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GPIO_EXTI_Callback+0x380>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 8002000:	e004      	b.n	800200c <HAL_GPIO_EXTI_Callback+0x384>
					break;
 8002002:	bf00      	nop
 8002004:	e0ab      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
 8002006:	bf00      	nop
 8002008:	20000608 	.word	0x20000608
					break;
 800200c:	bf00      	nop
			break;
 800200e:	e0a6      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Index.Direction) {
 8002010:	4b56      	ldr	r3, [pc, #344]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002012:	7f9b      	ldrb	r3, [r3, #30]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d002      	beq.n	800201e <HAL_GPIO_EXTI_Callback+0x396>
 8002018:	2b02      	cmp	r3, #2
 800201a:	d011      	beq.n	8002040 <HAL_GPIO_EXTI_Callback+0x3b8>
					break;
 800201c:	e027      	b.n	800206e <HAL_GPIO_EXTI_Callback+0x3e6>
					Fingers_Status.Index.Encoder++;
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002020:	8b9b      	ldrh	r3, [r3, #28]
 8002022:	3301      	adds	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002028:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800202c:	8b9b      	ldrh	r3, [r3, #28]
 800202e:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002032:	4293      	cmp	r3, r2
 8002034:	d918      	bls.n	8002068 <HAL_GPIO_EXTI_Callback+0x3e0>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002038:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 800203c:	839a      	strh	r2, [r3, #28]
					break;
 800203e:	e013      	b.n	8002068 <HAL_GPIO_EXTI_Callback+0x3e0>
					Fingers_Status.Index.Encoder--;
 8002040:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002042:	8b9b      	ldrh	r3, [r3, #28]
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800204a:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 800204c:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800204e:	8b9b      	ldrh	r3, [r3, #28]
 8002050:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002054:	4293      	cmp	r3, r2
 8002056:	d803      	bhi.n	8002060 <HAL_GPIO_EXTI_Callback+0x3d8>
 8002058:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800205a:	8b9b      	ldrh	r3, [r3, #28]
 800205c:	2b63      	cmp	r3, #99	; 0x63
 800205e:	d805      	bhi.n	800206c <HAL_GPIO_EXTI_Callback+0x3e4>
					Fingers_Status.Index.Encoder=0;
 8002060:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002062:	2200      	movs	r2, #0
 8002064:	839a      	strh	r2, [r3, #28]
					break;
 8002066:	e001      	b.n	800206c <HAL_GPIO_EXTI_Callback+0x3e4>
					break;
 8002068:	bf00      	nop
 800206a:	e078      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 800206c:	bf00      	nop
			break;
 800206e:	e076      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Index.Direction) {
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002072:	7f9b      	ldrb	r3, [r3, #30]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d002      	beq.n	800207e <HAL_GPIO_EXTI_Callback+0x3f6>
 8002078:	2b02      	cmp	r3, #2
 800207a:	d011      	beq.n	80020a0 <HAL_GPIO_EXTI_Callback+0x418>
					break;
 800207c:	e027      	b.n	80020ce <HAL_GPIO_EXTI_Callback+0x446>
					Fingers_Status.Index.Encoder++;
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002080:	8b9b      	ldrh	r3, [r3, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002088:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800208c:	8b9b      	ldrh	r3, [r3, #28]
 800208e:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 8002092:	4293      	cmp	r3, r2
 8002094:	d918      	bls.n	80020c8 <HAL_GPIO_EXTI_Callback+0x440>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002096:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002098:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 800209c:	839a      	strh	r2, [r3, #28]
					break;
 800209e:	e013      	b.n	80020c8 <HAL_GPIO_EXTI_Callback+0x440>
					Fingers_Status.Index.Encoder--;
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020a2:	8b9b      	ldrh	r3, [r3, #28]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020aa:	839a      	strh	r2, [r3, #28]
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<100)
 80020ac:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020ae:	8b9b      	ldrh	r3, [r3, #28]
 80020b0:	f64f 7278 	movw	r2, #65400	; 0xff78
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d803      	bhi.n	80020c0 <HAL_GPIO_EXTI_Callback+0x438>
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020ba:	8b9b      	ldrh	r3, [r3, #28]
 80020bc:	2b63      	cmp	r3, #99	; 0x63
 80020be:	d805      	bhi.n	80020cc <HAL_GPIO_EXTI_Callback+0x444>
					Fingers_Status.Index.Encoder=0;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	839a      	strh	r2, [r3, #28]
					break;
 80020c6:	e001      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x444>
					break;
 80020c8:	bf00      	nop
 80020ca:	e048      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
					break;
 80020cc:	bf00      	nop
			break;
 80020ce:	e046      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Thumb.Direction) {
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020d2:	7a9b      	ldrb	r3, [r3, #10]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_EXTI_Callback+0x456>
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_EXTI_Callback+0x464>
					break;
 80020dc:	e01a      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0x48c>
					Fingers_Status.Thumb.Encoder++;
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020e0:	891b      	ldrh	r3, [r3, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020e8:	811a      	strh	r2, [r3, #8]
					break;
 80020ea:	e013      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0x48c>
					Fingers_Status.Thumb.Encoder--;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020ee:	891b      	ldrh	r3, [r3, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020f6:	811a      	strh	r2, [r3, #8]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<100)
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80020fa:	891b      	ldrh	r3, [r3, #8]
 80020fc:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002100:	4293      	cmp	r3, r2
 8002102:	d803      	bhi.n	800210c <HAL_GPIO_EXTI_Callback+0x484>
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002106:	891b      	ldrh	r3, [r3, #8]
 8002108:	2b63      	cmp	r3, #99	; 0x63
 800210a:	d802      	bhi.n	8002112 <HAL_GPIO_EXTI_Callback+0x48a>
					Fingers_Status.Thumb.Encoder=0;
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800210e:	2200      	movs	r2, #0
 8002110:	811a      	strh	r2, [r3, #8]
					break;
 8002112:	bf00      	nop
			break;
 8002114:	e023      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			switch (Fingers_Status.Thumb.Direction) {
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002118:	7a9b      	ldrb	r3, [r3, #10]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d002      	beq.n	8002124 <HAL_GPIO_EXTI_Callback+0x49c>
 800211e:	2b02      	cmp	r3, #2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_EXTI_Callback+0x4aa>
					break;
 8002122:	e01a      	b.n	800215a <HAL_GPIO_EXTI_Callback+0x4d2>
					Fingers_Status.Thumb.Encoder++;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002126:	891b      	ldrh	r3, [r3, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800212e:	811a      	strh	r2, [r3, #8]
					break;
 8002130:	e013      	b.n	800215a <HAL_GPIO_EXTI_Callback+0x4d2>
					Fingers_Status.Thumb.Encoder--;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002134:	891b      	ldrh	r3, [r3, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800213c:	811a      	strh	r2, [r3, #8]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<100)
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002140:	891b      	ldrh	r3, [r3, #8]
 8002142:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002146:	4293      	cmp	r3, r2
 8002148:	d803      	bhi.n	8002152 <HAL_GPIO_EXTI_Callback+0x4ca>
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 800214c:	891b      	ldrh	r3, [r3, #8]
 800214e:	2b63      	cmp	r3, #99	; 0x63
 8002150:	d802      	bhi.n	8002158 <HAL_GPIO_EXTI_Callback+0x4d0>
					Fingers_Status.Thumb.Encoder=0;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002154:	2200      	movs	r2, #0
 8002156:	811a      	strh	r2, [r3, #8]
					break;
 8002158:	bf00      	nop
			break;
 800215a:	e000      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x4d6>
			break;
 800215c:	bf00      	nop
	}
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000608 	.word	0x20000608

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b085      	sub	sp, #20
 8002174:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002176:	f001 fb7c 	bl	8003872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217a:	f000 f911 	bl	80023a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800217e:	f000 f95e 	bl	800243e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f7ff fccd 	bl	8001b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002186:	f7ff fcad 	bl	8001ae4 <MX_DMA_Init>
  MX_ADC1_Init();
 800218a:	f7ff f83b 	bl	8001204 <MX_ADC1_Init>
  MX_ADC2_Init();
 800218e:	f7ff f8f1 	bl	8001374 <MX_ADC2_Init>
  MX_CAN1_Init();
 8002192:	f7ff fc2d 	bl	80019f0 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002196:	f000 fb0f 	bl	80027b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800219a:	f000 fba7 	bl	80028ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800219e:	f000 fc09 	bl	80029b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021a2:	f000 fc6b 	bl	8002a7c <MX_TIM4_Init>
  MX_TIM8_Init();
 80021a6:	f000 fccd 	bl	8002b44 <MX_TIM8_Init>
  MX_UART4_Init();
 80021aa:	f000 fe9d 	bl	8002ee8 <MX_UART4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80021ae:	f000 f971 	bl	8002494 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_MspInit(&hadc1);
 80021b2:	486c      	ldr	r0, [pc, #432]	; (8002364 <main+0x1f4>)
 80021b4:	f7ff f994 	bl	80014e0 <HAL_ADC_MspInit>
  init_motor_controller();
 80021b8:	f001 f98e 	bl	80034d8 <init_motor_controller>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t *) ADCData, 6);
 80021bc:	2206      	movs	r2, #6
 80021be:	496a      	ldr	r1, [pc, #424]	; (8002368 <main+0x1f8>)
 80021c0:	486a      	ldr	r0, [pc, #424]	; (800236c <main+0x1fc>)
 80021c2:	f001 ff15 	bl	8003ff0 <HAL_ADC_Start_DMA>

  Fingers_Calibration();
 80021c6:	f001 fa11 	bl	80035ec <Fingers_Calibration>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d0:	4867      	ldr	r0, [pc, #412]	; (8002370 <main+0x200>)
 80021d2:	f003 fc0f 	bl	80059f4 <HAL_GPIO_WritePin>
  {

	  //------------------------------| Thumb finger |----------------------------------------
		////if(Fingers_Status.Thumb.Stuck_Finger)
//			Fingers_Status.Thumb.Direction=Stop;
		SetMotor(Thumb, &Fingers_Status.Thumb);
 80021d6:	4967      	ldr	r1, [pc, #412]	; (8002374 <main+0x204>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f001 f83f 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Thumb();
 80021de:	f7ff fbbb 	bl	8001958 <ADC_ReadCurrent_Thumb>
		if(Fingers_Status.Thumb.Direction==Stop)
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <main+0x204>)
 80021e4:	7a9b      	ldrb	r3, [r3, #10]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <main+0x82>
			Read_Encoder(&Fingers_Status.Thumb,Thumb);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4861      	ldr	r0, [pc, #388]	; (8002374 <main+0x204>)
 80021ee:	f000 ff27 	bl	8003040 <Read_Encoder>
	  //------------------------------| Index finger |----------------------------------------
		////if(Fingers_Status.Index.Stuck_Finger)
//			Fingers_Status.Index.Direction=Stop;
		SetMotor(Index, &Fingers_Status.Index);
 80021f2:	4961      	ldr	r1, [pc, #388]	; (8002378 <main+0x208>)
 80021f4:	2001      	movs	r0, #1
 80021f6:	f001 f831 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Index();
 80021fa:	f7ff fb59 	bl	80018b0 <ADC_ReadCurrent_Index>
		if(Fingers_Status.Thumb.Direction==Stop)
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <main+0x204>)
 8002200:	7a9b      	ldrb	r3, [r3, #10]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <main+0x9e>
			Read_Encoder(&Fingers_Status.Index,Index);
 8002206:	2101      	movs	r1, #1
 8002208:	485b      	ldr	r0, [pc, #364]	; (8002378 <main+0x208>)
 800220a:	f000 ff19 	bl	8003040 <Read_Encoder>
	  //------------------------------| Middle finger |----------------------------------------
		////if(Fingers_Status.Middle.Stuck_Finger)
//			Fingers_Status.Middle.Direction=Stop;
		SetMotor(Middle, &Fingers_Status.Middle);
 800220e:	495b      	ldr	r1, [pc, #364]	; (800237c <main+0x20c>)
 8002210:	2002      	movs	r0, #2
 8002212:	f001 f823 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Middle();
 8002216:	f7ff fafb 	bl	8001810 <ADC_ReadCurrent_Middle>
		if(Fingers_Status.Thumb.Direction==Stop)
 800221a:	4b56      	ldr	r3, [pc, #344]	; (8002374 <main+0x204>)
 800221c:	7a9b      	ldrb	r3, [r3, #10]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <main+0xba>
			Read_Encoder(&Fingers_Status.Middle,Middle);
 8002222:	2102      	movs	r1, #2
 8002224:	4855      	ldr	r0, [pc, #340]	; (800237c <main+0x20c>)
 8002226:	f000 ff0b 	bl	8003040 <Read_Encoder>
	  //------------------------------| Ring finger |----------------------------------------
		////if(Fingers_Status.Ring.Stuck_Finger)
//			Fingers_Status.Ring.Direction=Stop;
		SetMotor(Ring, &Fingers_Status.Ring);
 800222a:	4955      	ldr	r1, [pc, #340]	; (8002380 <main+0x210>)
 800222c:	2003      	movs	r0, #3
 800222e:	f001 f815 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Ring();
 8002232:	f7ff fa95 	bl	8001760 <ADC_ReadCurrent_Ring>
		if(Fingers_Status.Thumb.Direction==Stop)
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <main+0x204>)
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <main+0xd6>
			Read_Encoder(&Fingers_Status.Ring,Ring);
 800223e:	2103      	movs	r1, #3
 8002240:	484f      	ldr	r0, [pc, #316]	; (8002380 <main+0x210>)
 8002242:	f000 fefd 	bl	8003040 <Read_Encoder>
	  //------------------------------| Pinky finger |----------------------------------------
		////if(Fingers_Status.Pinky.Stuck_Finger)
//			Fingers_Status.Pinky.Direction=Stop;
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8002246:	494f      	ldr	r1, [pc, #316]	; (8002384 <main+0x214>)
 8002248:	2004      	movs	r0, #4
 800224a:	f001 f807 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Pinky();
 800224e:	f7ff fa27 	bl	80016a0 <ADC_ReadCurrent_Pinky>
		if(Fingers_Status.Thumb.Direction==Stop)
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <main+0x204>)
 8002254:	7a9b      	ldrb	r3, [r3, #10]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <main+0xf2>
			Read_Encoder(&Fingers_Status.Pinky,Pinky);
 800225a:	2104      	movs	r1, #4
 800225c:	4849      	ldr	r0, [pc, #292]	; (8002384 <main+0x214>)
 800225e:	f000 feef 	bl	8003040 <Read_Encoder>
	  //------------------------------| Communication |----------------------------------------
		if(send_data_UART)
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <main+0x218>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0b5      	beq.n	80021d6 <main+0x66>
		{
			send_data_UART=0;
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <main+0x218>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
			sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8002270:	4b40      	ldr	r3, [pc, #256]	; (8002374 <main+0x204>)
 8002272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002276:	4618      	mov	r0, r3
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <main+0x204>)
 800227a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800227e:	461c      	mov	r4, r3
 8002280:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <main+0x204>)
 8002282:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002284:	461a      	mov	r2, r3
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <main+0x204>)
 8002288:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <main+0x204>)
 800228e:	8a1b      	ldrh	r3, [r3, #16]
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	9101      	str	r1, [sp, #4]
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	4623      	mov	r3, r4
 8002298:	4602      	mov	r2, r0
 800229a:	493c      	ldr	r1, [pc, #240]	; (800238c <main+0x21c>)
 800229c:	483c      	ldr	r0, [pc, #240]	; (8002390 <main+0x220>)
 800229e:	f008 fcf9 	bl	800ac94 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 80022a2:	483b      	ldr	r0, [pc, #236]	; (8002390 <main+0x220>)
 80022a4:	f7fd ffe4 	bl	8000270 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2305      	movs	r3, #5
 80022ae:	4938      	ldr	r1, [pc, #224]	; (8002390 <main+0x220>)
 80022b0:	4838      	ldr	r0, [pc, #224]	; (8002394 <main+0x224>)
 80022b2:	f005 fe4b 	bl	8007f4c <HAL_UART_Transmit>
			HAL_Delay(1);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f001 fb50 	bl	800395c <HAL_Delay>
			sprintf(uartTX,"{PP:%dPR:%dPM:%dPI:%dPT:%d}\n",((uint16_t)(Fingers_Status.Pinky.position*100)),((uint16_t)(Fingers_Status.Ring.position*100)),((uint16_t)(Fingers_Status.Middle.position*100)),((uint16_t)(Fingers_Status.Index.position*100)),((uint16_t)(Fingers_Status.Thumb.position*100)));
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <main+0x204>)
 80022be:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80022c2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002398 <main+0x228>
 80022c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ce:	ee17 3a90 	vmov	r3, s15
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <main+0x204>)
 80022d8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80022dc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002398 <main+0x228>
 80022e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e8:	ee17 3a90 	vmov	r3, s15
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461c      	mov	r4, r3
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <main+0x204>)
 80022f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022f6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002398 <main+0x228>
 80022fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002302:	ee17 3a90 	vmov	r3, s15
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <main+0x204>)
 800230c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002310:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002398 <main+0x228>
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	ee17 3a90 	vmov	r3, s15
 8002320:	b29b      	uxth	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <main+0x204>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002398 <main+0x228>
 800232e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002336:	ee17 3a90 	vmov	r3, s15
 800233a:	b29b      	uxth	r3, r3
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	9101      	str	r1, [sp, #4]
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	4623      	mov	r3, r4
 8002344:	4602      	mov	r2, r0
 8002346:	4915      	ldr	r1, [pc, #84]	; (800239c <main+0x22c>)
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <main+0x220>)
 800234a:	f008 fca3 	bl	800ac94 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 800234e:	4810      	ldr	r0, [pc, #64]	; (8002390 <main+0x220>)
 8002350:	f7fd ff8e 	bl	8000270 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	b29a      	uxth	r2, r3
 8002358:	2305      	movs	r3, #5
 800235a:	490d      	ldr	r1, [pc, #52]	; (8002390 <main+0x220>)
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <main+0x224>)
 800235e:	f005 fdf5 	bl	8007f4c <HAL_UART_Transmit>
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8002362:	e738      	b.n	80021d6 <main+0x66>
 8002364:	20000290 	.word	0x20000290
 8002368:	200006c0 	.word	0x200006c0
 800236c:	200002f4 	.word	0x200002f4
 8002370:	48000800 	.word	0x48000800
 8002374:	20000608 	.word	0x20000608
 8002378:	2000061c 	.word	0x2000061c
 800237c:	20000630 	.word	0x20000630
 8002380:	20000644 	.word	0x20000644
 8002384:	20000658 	.word	0x20000658
 8002388:	2000028c 	.word	0x2000028c
 800238c:	0800d8dc 	.word	0x0800d8dc
 8002390:	200003cc 	.word	0x200003cc
 8002394:	20000580 	.word	0x20000580
 8002398:	42c80000 	.word	0x42c80000
 800239c:	0800d8fc 	.word	0x0800d8fc

080023a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b096      	sub	sp, #88	; 0x58
 80023a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	2244      	movs	r2, #68	; 0x44
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f008 fcd3 	bl	800ad5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023c6:	f003 fb53 	bl	8005a70 <HAL_PWREx_ControlVoltageScaling>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023d0:	f000 f86c 	bl	80024ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80023dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023de:	2302      	movs	r3, #2
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e2:	2303      	movs	r3, #3
 80023e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80023ea:	2314      	movs	r3, #20
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023ee:	2307      	movs	r3, #7
 80023f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023f2:	2302      	movs	r3, #2
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023f6:	2302      	movs	r3, #2
 80023f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fb8c 	bl	8005b1c <HAL_RCC_OscConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800240a:	f000 f84f 	bl	80024ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240e:	230f      	movs	r3, #15
 8002410:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002412:	2303      	movs	r3, #3
 8002414:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	2104      	movs	r1, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f003 ff54 	bl	80062d4 <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002432:	f000 f83b 	bl	80024ac <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3758      	adds	r7, #88	; 0x58
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b0a2      	sub	sp, #136	; 0x88
 8002442:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002444:	463b      	mov	r3, r7
 8002446:	2288      	movs	r2, #136	; 0x88
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f008 fc85 	bl	800ad5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002454:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800245a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800245c:	2303      	movs	r3, #3
 800245e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002464:	2308      	movs	r3, #8
 8002466:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002468:	2307      	movs	r3, #7
 800246a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800246c:	2302      	movs	r3, #2
 800246e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002470:	2308      	movs	r3, #8
 8002472:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002478:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	4618      	mov	r0, r3
 800247e:	f004 f94d 	bl	800671c <HAL_RCCEx_PeriphCLKConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002488:	f000 f810 	bl	80024ac <Error_Handler>
  }
}
 800248c:	bf00      	nop
 800248e:	3788      	adds	r7, #136	; 0x88
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2034      	movs	r0, #52	; 0x34
 800249e:	f002 fe3a 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024a2:	2034      	movs	r0, #52	; 0x34
 80024a4:	f002 fe53 	bl	800514e <HAL_NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <Error_Handler+0x8>
	...

080024b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_MspInit+0x44>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <HAL_MspInit+0x44>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_MspInit+0x44>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_MspInit+0x44>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_MspInit+0x44>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_MspInit+0x44>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80024ee:	2004      	movs	r0, #4
 80024f0:	f002 fe06 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f001 f9e6 	bl	800391c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  calibration_counter++;
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SysTick_Handler+0x1c>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b02      	ldr	r3, [pc, #8]	; (8002564 <SysTick_Handler+0x1c>)
 800255c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200006cc 	.word	0x200006cc

08002568 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder1_Pin);
 800256c:	2001      	movs	r0, #1
 800256e:	f003 fa59 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}

08002576 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder2_Pin);
 800257a:	2002      	movs	r0, #2
 800257c:	f003 fa52 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder1_Pin);
 8002588:	2004      	movs	r0, #4
 800258a:	f003 fa4b 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}

08002592 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder2_Pin);
 8002596:	2010      	movs	r0, #16
 8002598:	f003 fa44 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA1_Channel2_IRQHandler+0x10>)
 80025a6:	f002 ff84 	bl	80054b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000358 	.word	0x20000358

080025b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder1_Pin);
 80025b8:	2020      	movs	r0, #32
 80025ba:	f003 fa33 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder2_Pin);
 80025c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025ca:	f003 fa2b 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder2_Pin);
 80025ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025d2:	f003 fa27 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder1_Pin);
 80025d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025da:	f003 fa23 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder1_Pin);
 80025de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025e2:	f003 fa1f 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder2_Pin);
 80025e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025ea:	f003 fa1b 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <UART4_IRQHandler+0x10>)
 80025fa:	f005 fd7d 	bl	80080f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000580 	.word	0x20000580

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
	return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002622:	f008 fc15 	bl	800ae50 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
	return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
	while (1) {}		/* Make sure we hang here */
 800264a:	e7fe      	b.n	800264a <_exit+0x12>

0800264c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e00a      	b.n	8002674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800265e:	f3af 8000 	nop.w
 8002662:	4601      	mov	r1, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbf0      	blt.n	800265e <_read+0x12>
	}

return len;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e009      	b.n	80026ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbf1      	blt.n	8002698 <_write+0x12>
	}
	return len;
 80026b4:	687b      	ldr	r3, [r7, #4]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_close>:

int _close(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	return -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e6:	605a      	str	r2, [r3, #4]
	return 0;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <_isatty>:

int _isatty(int file)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
	return 1;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f008 fb7a 	bl	800ae50 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20018000 	.word	0x20018000
 8002788:	00000400 	.word	0x00000400
 800278c:	20000400 	.word	0x20000400
 8002790:	20000820 	.word	0x20000820

08002794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b096      	sub	sp, #88	; 0x58
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	615a      	str	r2, [r3, #20]
 80027dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	222c      	movs	r2, #44	; 0x2c
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f008 fab8 	bl	800ad5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80027ec:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <MX_TIM1_Init+0x130>)
 80027ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80027f0:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80027f2:	2218      	movs	r2, #24
 80027f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80027fe:	2263      	movs	r2, #99	; 0x63
 8002800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <MX_TIM1_Init+0x12c>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <MX_TIM1_Init+0x12c>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <MX_TIM1_Init+0x12c>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002814:	4833      	ldr	r0, [pc, #204]	; (80028e4 <MX_TIM1_Init+0x12c>)
 8002816:	f004 fc3d 	bl	8007094 <HAL_TIM_PWM_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002820:	f7ff fe44 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002830:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002834:	4619      	mov	r1, r3
 8002836:	482b      	ldr	r0, [pc, #172]	; (80028e4 <MX_TIM1_Init+0x12c>)
 8002838:	f005 fa34 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002842:	f7ff fe33 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002846:	2360      	movs	r3, #96	; 0x60
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800284e:	2300      	movs	r3, #0
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002852:	2300      	movs	r3, #0
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002856:	2304      	movs	r3, #4
 8002858:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002866:	2200      	movs	r2, #0
 8002868:	4619      	mov	r1, r3
 800286a:	481e      	ldr	r0, [pc, #120]	; (80028e4 <MX_TIM1_Init+0x12c>)
 800286c:	f004 fd70 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002876:	f7ff fe19 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800287a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287e:	2204      	movs	r2, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4818      	ldr	r0, [pc, #96]	; (80028e4 <MX_TIM1_Init+0x12c>)
 8002884:	f004 fd64 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800288e:	f7ff fe0d 	bl	80024ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80028c8:	f005 fa74 	bl	8007db4 <HAL_TIMEx_ConfigBreakDeadTime>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80028d2:	f7ff fdeb 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028d6:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_TIM1_Init+0x12c>)
 80028d8:	f000 fa3c 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 80028dc:	bf00      	nop
 80028de:	3758      	adds	r7, #88	; 0x58
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000404 	.word	0x20000404
 80028e8:	40012c00 	.word	0x40012c00

080028ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fe:	463b      	mov	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	615a      	str	r2, [r3, #20]
 800290e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <MX_TIM2_Init+0xc4>)
 800291a:	2218      	movs	r2, #24
 800291c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002926:	2263      	movs	r2, #99	; 0x63
 8002928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_TIM2_Init+0xc4>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002936:	481e      	ldr	r0, [pc, #120]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002938:	f004 fbac 	bl	8007094 <HAL_TIM_PWM_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002942:	f7ff fdb3 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4816      	ldr	r0, [pc, #88]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002956:	f005 f9a5 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002960:	f7ff fda4 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002964:	2360      	movs	r3, #96	; 0x60
 8002966:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002970:	2304      	movs	r3, #4
 8002972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	2208      	movs	r2, #8
 8002978:	4619      	mov	r1, r3
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_TIM2_Init+0xc4>)
 800297c:	f004 fce8 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002986:	f7ff fd91 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800298a:	463b      	mov	r3, r7
 800298c:	220c      	movs	r2, #12
 800298e:	4619      	mov	r1, r3
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM2_Init+0xc4>)
 8002992:	f004 fcdd 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800299c:	f7ff fd86 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM2_Init+0xc4>)
 80029a2:	f000 f9d7 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000450 	.word	0x20000450

080029b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029da:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <MX_TIM3_Init+0xc4>)
 80029dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029e0:	2218      	movs	r2, #24
 80029e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029ec:	2263      	movs	r2, #99	; 0x63
 80029ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029fc:	481d      	ldr	r0, [pc, #116]	; (8002a74 <MX_TIM3_Init+0xc0>)
 80029fe:	f004 fb49 	bl	8007094 <HAL_TIM_PWM_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a08:	f7ff fd50 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4816      	ldr	r0, [pc, #88]	; (8002a74 <MX_TIM3_Init+0xc0>)
 8002a1c:	f005 f942 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a26:	f7ff fd41 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2a:	2360      	movs	r3, #96	; 0x60
 8002a2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a36:	2304      	movs	r3, #4
 8002a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_TIM3_Init+0xc0>)
 8002a42:	f004 fc85 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a4c:	f7ff fd2e 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	2204      	movs	r2, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <MX_TIM3_Init+0xc0>)
 8002a58:	f004 fc7a 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a62:	f7ff fd23 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a66:	4803      	ldr	r0, [pc, #12]	; (8002a74 <MX_TIM3_Init+0xc0>)
 8002a68:	f000 f974 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 8002a6c:	bf00      	nop
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000049c 	.word	0x2000049c
 8002a78:	40000400 	.word	0x40000400

08002a7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8e:	463b      	mov	r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002aa2:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <MX_TIM4_Init+0xc4>)
 8002aa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002ab4:	2263      	movs	r2, #99	; 0x63
 8002ab6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ac4:	481d      	ldr	r0, [pc, #116]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002ac6:	f004 fae5 	bl	8007094 <HAL_TIM_PWM_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002ad0:	f7ff fcec 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4816      	ldr	r0, [pc, #88]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002ae4:	f005 f8de 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002aee:	f7ff fcdd 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af2:	2360      	movs	r3, #96	; 0x60
 8002af4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002afe:	2304      	movs	r3, #4
 8002b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b02:	463b      	mov	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	4619      	mov	r1, r3
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002b0a:	f004 fc21 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002b14:	f7ff fcca 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4807      	ldr	r0, [pc, #28]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002b20:	f004 fc16 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002b2a:	f7ff fcbf 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b2e:	4803      	ldr	r0, [pc, #12]	; (8002b3c <MX_TIM4_Init+0xc0>)
 8002b30:	f000 f910 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 8002b34:	bf00      	nop
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200004e8 	.word	0x200004e8
 8002b40:	40000800 	.word	0x40000800

08002b44 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b096      	sub	sp, #88	; 0x58
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	222c      	movs	r2, #44	; 0x2c
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f008 f8f2 	bl	800ad5a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b78:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <MX_TIM8_Init+0x130>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b7e:	2218      	movs	r2, #24
 8002b80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b8a:	2263      	movs	r2, #99	; 0x63
 8002b8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ba0:	4833      	ldr	r0, [pc, #204]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002ba2:	f004 fa77 	bl	8007094 <HAL_TIM_PWM_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002bac:	f7ff fc7e 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482b      	ldr	r0, [pc, #172]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002bc4:	f005 f86e 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002bce:	f7ff fc6d 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd2:	2360      	movs	r3, #96	; 0x60
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002be2:	2304      	movs	r3, #4
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	481e      	ldr	r0, [pc, #120]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002bf8:	f004 fbaa 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002c02:	f7ff fc53 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4818      	ldr	r0, [pc, #96]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002c10:	f004 fb9e 	bl	8007350 <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002c1a:	f7ff fc47 	bl	80024ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4807      	ldr	r0, [pc, #28]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002c54:	f005 f8ae 	bl	8007db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002c5e:	f7ff fc25 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c62:	4803      	ldr	r0, [pc, #12]	; (8002c70 <MX_TIM8_Init+0x12c>)
 8002c64:	f000 f876 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 8002c68:	bf00      	nop
 8002c6a:	3758      	adds	r7, #88	; 0x58
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000534 	.word	0x20000534
 8002c74:	40013400 	.word	0x40013400

08002c78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_TIM_PWM_MspInit+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c94:	6613      	str	r3, [r2, #96]	; 0x60
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002ca2:	e046      	b.n	8002d32 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
}
 8002cc6:	e034      	b.n	8002d32 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_TIM_PWM_MspInit+0xd0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
}
 8002cea:	e022      	b.n	8002d32 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_TIM_PWM_MspInit+0xd4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10c      	bne.n	8002d10 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6593      	str	r3, [r2, #88]	; 0x58
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
}
 8002d0e:	e010      	b.n	8002d32 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_TIM_PWM_MspInit+0xd8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10b      	bne.n	8002d32 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d24:	6613      	str	r3, [r2, #96]	; 0x60
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	bf00      	nop
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40013400 	.word	0x40013400

08002d54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d11e      	bne.n	8002db4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 8002d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dae:	f002 fc5f 	bl	8005670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002db2:	e087      	b.n	8002ec4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d11d      	bne.n	8002dfa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	4b44      	ldr	r3, [pc, #272]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 8002dd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	4619      	mov	r1, r3
 8002df2:	4838      	ldr	r0, [pc, #224]	; (8002ed4 <HAL_TIM_MspPostInit+0x180>)
 8002df4:	f002 fc3c 	bl	8005670 <HAL_GPIO_Init>
}
 8002df8:	e064      	b.n	8002ec4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	; (8002ed8 <HAL_TIM_MspPostInit+0x184>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d11c      	bne.n	8002e3e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e08:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 8002e1c:	2330      	movs	r3, #48	; 0x30
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	4827      	ldr	r0, [pc, #156]	; (8002ed4 <HAL_TIM_MspPostInit+0x180>)
 8002e38:	f002 fc1a 	bl	8005670 <HAL_GPIO_Init>
}
 8002e3c:	e042      	b.n	8002ec4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_TIM_MspPostInit+0x188>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d11c      	bne.n	8002e82 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 8002e60:	23c0      	movs	r3, #192	; 0xc0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e70:	2302      	movs	r3, #2
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4816      	ldr	r0, [pc, #88]	; (8002ed4 <HAL_TIM_MspPostInit+0x180>)
 8002e7c:	f002 fbf8 	bl	8005670 <HAL_GPIO_Init>
}
 8002e80:	e020      	b.n	8002ec4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_TIM_MspPostInit+0x18c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8002ea4:	23c0      	movs	r3, #192	; 0xc0
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <HAL_TIM_MspPostInit+0x190>)
 8002ec0:	f002 fbd6 	bl	8005670 <HAL_GPIO_Init>
}
 8002ec4:	bf00      	nop
 8002ec6:	3730      	adds	r7, #48	; 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40013400 	.word	0x40013400
 8002ee4:	48000800 	.word	0x48000800

08002ee8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <MX_UART4_Init+0x58>)
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <MX_UART4_Init+0x5c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_UART4_Init+0x58>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_UART4_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f2c:	f004 ffc0 	bl	8007eb0 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002f36:	f7ff fab9 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000580 	.word	0x20000580
 8002f44:	40004c00 	.word	0x40004c00

08002f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ac      	sub	sp, #176	; 0xb0
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2288      	movs	r2, #136	; 0x88
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f007 fef6 	bl	800ad5a <memset>
  if(uartHandle->Instance==UART4)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_UART_MspInit+0xb0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d13b      	bne.n	8002ff0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fbc9 	bl	800671c <HAL_RCCEx_PeriphCLKConfig>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f90:	f7ff fa8c 	bl	80024ac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_UART_MspInit+0xb4>)
 8002fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_TX_ESP_RX_Pin|MCU_RX_ESP_TX_Pin;
 8002fc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002fde:	2308      	movs	r3, #8
 8002fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <HAL_UART_MspInit+0xb8>)
 8002fec:	f002 fb40 	bl	8005670 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	37b0      	adds	r7, #176	; 0xb0
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40004c00 	.word	0x40004c00
 8002ffc:	40021000 	.word	0x40021000
 8003000:	48000800 	.word	0x48000800

08003004 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Finger_Struct* FingerStruct,Fingers_Name_Enum FingerName)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
	//	_Bool Signal_A;
	//	_Bool Signal_B;
	switch (FingerName) {
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b04      	cmp	r3, #4
 8003050:	f200 8091 	bhi.w	8003176 <Read_Encoder+0x136>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <Read_Encoder+0x1c>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	08003071 	.word	0x08003071
 8003060:	080030a7 	.word	0x080030a7
 8003064:	080030d9 	.word	0x080030d9
 8003068:	0800310b 	.word	0x0800310b
 800306c:	08003141 	.word	0x08003141
	case Thumb:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8003070:	2104      	movs	r1, #4
 8003072:	4878      	ldr	r0, [pc, #480]	; (8003254 <Read_Encoder+0x214>)
 8003074:	f002 fca6 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2da      	uxtb	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	749a      	strb	r2, [r3, #18]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 8003088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800308c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003090:	f002 fc98 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	74da      	strb	r2, [r3, #19]

		break;
 80030a4:	e068      	b.n	8003178 <Read_Encoder+0x138>
	case Index:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 80030a6:	2101      	movs	r1, #1
 80030a8:	486a      	ldr	r0, [pc, #424]	; (8003254 <Read_Encoder+0x214>)
 80030aa:	f002 fc8b 	bl	80059c4 <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	749a      	strb	r2, [r3, #18]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 80030be:	2102      	movs	r1, #2
 80030c0:	4864      	ldr	r0, [pc, #400]	; (8003254 <Read_Encoder+0x214>)
 80030c2:	f002 fc7f 	bl	80059c4 <HAL_GPIO_ReadPin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	74da      	strb	r2, [r3, #19]
		break;
 80030d6:	e04f      	b.n	8003178 <Read_Encoder+0x138>
	case Middle:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 80030d8:	2120      	movs	r1, #32
 80030da:	485f      	ldr	r0, [pc, #380]	; (8003258 <Read_Encoder+0x218>)
 80030dc:	f002 fc72 	bl	80059c4 <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	749a      	strb	r2, [r3, #18]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 80030f0:	2110      	movs	r1, #16
 80030f2:	4859      	ldr	r0, [pc, #356]	; (8003258 <Read_Encoder+0x218>)
 80030f4:	f002 fc66 	bl	80059c4 <HAL_GPIO_ReadPin>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	74da      	strb	r2, [r3, #19]
		break;
 8003108:	e036      	b.n	8003178 <Read_Encoder+0x138>
	case Ring:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 800310a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800310e:	4851      	ldr	r0, [pc, #324]	; (8003254 <Read_Encoder+0x214>)
 8003110:	f002 fc58 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2da      	uxtb	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	749a      	strb	r2, [r3, #18]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8003124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003128:	484a      	ldr	r0, [pc, #296]	; (8003254 <Read_Encoder+0x214>)
 800312a:	f002 fc4b 	bl	80059c4 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	74da      	strb	r2, [r3, #19]
		break;
 800313e:	e01b      	b.n	8003178 <Read_Encoder+0x138>
	case Pinky:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 8003140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003144:	4843      	ldr	r0, [pc, #268]	; (8003254 <Read_Encoder+0x214>)
 8003146:	f002 fc3d 	bl	80059c4 <HAL_GPIO_ReadPin>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2da      	uxtb	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	749a      	strb	r2, [r3, #18]
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 800315a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800315e:	483d      	ldr	r0, [pc, #244]	; (8003254 <Read_Encoder+0x214>)
 8003160:	f002 fc30 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2da      	uxtb	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	74da      	strb	r2, [r3, #19]
		break;
 8003174:	e000      	b.n	8003178 <Read_Encoder+0x138>
	default:
		break;
 8003176:	bf00      	nop
	}
	if(FingerStruct->SignalA && FingerStruct->SignalB)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7c9b      	ldrb	r3, [r3, #18]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <Read_Encoder+0x154>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7cdb      	ldrb	r3, [r3, #19]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <Read_Encoder+0x154>
		FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	72da      	strb	r2, [r3, #11]
 8003192:	e024      	b.n	80031de <Read_Encoder+0x19e>
	else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7c9b      	ldrb	r3, [r3, #18]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <Read_Encoder+0x176>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7cdb      	ldrb	r3, [r3, #19]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f083 0301 	eor.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <Read_Encoder+0x176>
		FingerStruct->current_Encoder_State=Ahigh_Blow;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	72da      	strb	r2, [r3, #11]
 80031b4:	e013      	b.n	80031de <Read_Encoder+0x19e>
	else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7c9b      	ldrb	r3, [r3, #18]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <Read_Encoder+0x198>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7cdb      	ldrb	r3, [r3, #19]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <Read_Encoder+0x198>
		FingerStruct->current_Encoder_State=Alow_Bhigh;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	72da      	strb	r2, [r3, #11]
 80031d6:	e002      	b.n	80031de <Read_Encoder+0x19e>
	else
		FingerStruct->current_Encoder_State=Alow_Blow;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	72da      	strb	r2, [r3, #11]
	if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7ada      	ldrb	r2, [r3, #11]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7b1b      	ldrb	r3, [r3, #12]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d02f      	beq.n	800324a <Read_Encoder+0x20a>
	{
		//if(FingerStruct->Direction==Open)
		//	FingerStruct->Encoder++;
		//else if(FingerStruct->Direction==Close)
		//	FingerStruct->Encoder--;
		if(FingerStruct->Pre_Encoder_State==Ahigh_Blow && FingerStruct->current_Encoder_State==Alow_Blow)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7b1b      	ldrb	r3, [r3, #12]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d10a      	bne.n	8003208 <Read_Encoder+0x1c8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7adb      	ldrb	r3, [r3, #11]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <Read_Encoder+0x1c8>
			FingerStruct->Encoder++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	891b      	ldrh	r3, [r3, #8]
 80031fe:	3301      	adds	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	811a      	strh	r2, [r3, #8]
 8003206:	e01c      	b.n	8003242 <Read_Encoder+0x202>
		else if(FingerStruct->Pre_Encoder_State==Alow_Blow && FingerStruct->current_Encoder_State==Ahigh_Blow)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7b1b      	ldrb	r3, [r3, #12]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10a      	bne.n	8003226 <Read_Encoder+0x1e6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7adb      	ldrb	r3, [r3, #11]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d106      	bne.n	8003226 <Read_Encoder+0x1e6>
			FingerStruct->Encoder--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	891b      	ldrh	r3, [r3, #8]
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	811a      	strh	r2, [r3, #8]
 8003224:	e00d      	b.n	8003242 <Read_Encoder+0x202>
		else
			FingerStruct->Encoder+=FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	891a      	ldrh	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7b1b      	ldrb	r3, [r3, #12]
 800322e:	b299      	uxth	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7adb      	ldrb	r3, [r3, #11]
 8003234:	b29b      	uxth	r3, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	4413      	add	r3, r2
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	811a      	strh	r2, [r3, #8]
		FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7ada      	ldrb	r2, [r3, #11]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	731a      	strb	r2, [r3, #12]
	}
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	48000400 	.word	0x48000400
 8003258:	48000800 	.word	0x48000800

0800325c <SetMotor>:
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
	//	Read_Encoder(FingerStruct, name);
	switch (name) {
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	2b04      	cmp	r3, #4
 800326c:	f200 8118 	bhi.w	80034a0 <SetMotor+0x244>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <SetMotor+0x1c>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	0800328d 	.word	0x0800328d
 800327c:	080032f1 	.word	0x080032f1
 8003280:	0800335d 	.word	0x0800335d
 8003284:	080033c9 	.word	0x080033c9
 8003288:	08003435 	.word	0x08003435
	case Thumb :
		if ( FingerStruct->Direction== Close) {
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	7a9b      	ldrb	r3, [r3, #10]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d109      	bne.n	80032a8 <SetMotor+0x4c>
			htim3.Instance->CCR1 = FingerStruct->speed;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	7b9a      	ldrb	r2, [r3, #14]
 8003298:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <SetMotor+0x254>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 800329e:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <SetMotor+0x254>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e015      	b.n	80032d4 <SetMotor+0x78>
		} else if (FingerStruct->Direction == Open) {
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	7a9b      	ldrb	r3, [r3, #10]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d109      	bne.n	80032c4 <SetMotor+0x68>
			htim3.Instance->CCR2 = FingerStruct->speed;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	7b9a      	ldrb	r2, [r3, #14]
 80032b4:	4b7e      	ldr	r3, [pc, #504]	; (80034b0 <SetMotor+0x254>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 80032ba:	4b7d      	ldr	r3, [pc, #500]	; (80034b0 <SetMotor+0x254>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
 80032c2:	e007      	b.n	80032d4 <SetMotor+0x78>
		} else {
			htim3.Instance->CCR1 =100;
 80032c4:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <SetMotor+0x254>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2264      	movs	r2, #100	; 0x64
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =100;
 80032cc:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <SetMotor+0x254>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2264      	movs	r2, #100	; 0x64
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	891b      	ldrh	r3, [r3, #8]
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80034b4 <SetMotor+0x258>
 80032e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 80032ee:	e0d8      	b.n	80034a2 <SetMotor+0x246>
	case Index :
		if ( FingerStruct->Direction== Close) {
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	7a9b      	ldrb	r3, [r3, #10]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d109      	bne.n	800330c <SetMotor+0xb0>
			htim4.Instance->CCR1 = FingerStruct->speed;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	7b9a      	ldrb	r2, [r3, #14]
 80032fc:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <SetMotor+0x25c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <SetMotor+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
 800330a:	e015      	b.n	8003338 <SetMotor+0xdc>
		} else if (FingerStruct->Direction == Open) {
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7a9b      	ldrb	r3, [r3, #10]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d109      	bne.n	8003328 <SetMotor+0xcc>
			htim4.Instance->CCR2 = FingerStruct->speed;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7b9a      	ldrb	r2, [r3, #14]
 8003318:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <SetMotor+0x25c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <SetMotor+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	e007      	b.n	8003338 <SetMotor+0xdc>
		} else {
			htim4.Instance->CCR1 =100;
 8003328:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <SetMotor+0x25c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2264      	movs	r2, #100	; 0x64
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =100;
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <SetMotor+0x25c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2264      	movs	r2, #100	; 0x64
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	891b      	ldrh	r3, [r3, #8]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003344:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80034bc <SetMotor+0x260>
 8003348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800334c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80034b4 <SetMotor+0x258>
 8003350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 800335a:	e0a2      	b.n	80034a2 <SetMotor+0x246>
	case Middle :
		if ( FingerStruct->Direction== Close) {
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	7a9b      	ldrb	r3, [r3, #10]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d109      	bne.n	8003378 <SetMotor+0x11c>
			htim2.Instance->CCR4 = FingerStruct->speed;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	7b9a      	ldrb	r2, [r3, #14]
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <SetMotor+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <SetMotor+0x264>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c
 8003376:	e015      	b.n	80033a4 <SetMotor+0x148>
		} else if (FingerStruct->Direction == Open) {
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	7a9b      	ldrb	r3, [r3, #10]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d109      	bne.n	8003394 <SetMotor+0x138>
			htim2.Instance->CCR3 = FingerStruct->speed;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	7b9a      	ldrb	r2, [r3, #14]
 8003384:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <SetMotor+0x264>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <SetMotor+0x264>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
 8003392:	e007      	b.n	80033a4 <SetMotor+0x148>
		} else {
			htim2.Instance->CCR3 =100;
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <SetMotor+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2264      	movs	r2, #100	; 0x64
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =100;
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <SetMotor+0x264>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2264      	movs	r2, #100	; 0x64
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	891b      	ldrh	r3, [r3, #8]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80034c4 <SetMotor+0x268>
 80033b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80034b4 <SetMotor+0x258>
 80033bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 80033c6:	e06c      	b.n	80034a2 <SetMotor+0x246>
	case Ring :
		if ( FingerStruct->Direction== Close) {
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	7a9b      	ldrb	r3, [r3, #10]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d109      	bne.n	80033e4 <SetMotor+0x188>
			htim8.Instance->CCR1 = FingerStruct->speed;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	7b9a      	ldrb	r2, [r3, #14]
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <SetMotor+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <SetMotor+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
 80033e2:	e015      	b.n	8003410 <SetMotor+0x1b4>
		} else if (FingerStruct->Direction == Open) {
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7a9b      	ldrb	r3, [r3, #10]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d109      	bne.n	8003400 <SetMotor+0x1a4>
			htim8.Instance->CCR2 = FingerStruct->speed;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	7b9a      	ldrb	r2, [r3, #14]
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <SetMotor+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <SetMotor+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34
 80033fe:	e007      	b.n	8003410 <SetMotor+0x1b4>
		} else {
			htim8.Instance->CCR1 =100;
 8003400:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <SetMotor+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2264      	movs	r2, #100	; 0x64
 8003406:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =100;
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <SetMotor+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2264      	movs	r2, #100	; 0x64
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	891b      	ldrh	r3, [r3, #8]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800341c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80034cc <SetMotor+0x270>
 8003420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003424:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80034b4 <SetMotor+0x258>
 8003428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8003432:	e036      	b.n	80034a2 <SetMotor+0x246>
	case Pinky :
		if ( FingerStruct->Direction== Close) {
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	7a9b      	ldrb	r3, [r3, #10]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d109      	bne.n	8003450 <SetMotor+0x1f4>
			htim1.Instance->CCR1 = FingerStruct->speed;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	7b9a      	ldrb	r2, [r3, #14]
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <SetMotor+0x274>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <SetMotor+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
 800344e:	e015      	b.n	800347c <SetMotor+0x220>
		} else if (FingerStruct->Direction == Open) {
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	7a9b      	ldrb	r3, [r3, #10]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d109      	bne.n	800346c <SetMotor+0x210>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	7b9a      	ldrb	r2, [r3, #14]
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <SetMotor+0x274>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <SetMotor+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	635a      	str	r2, [r3, #52]	; 0x34
 800346a:	e007      	b.n	800347c <SetMotor+0x220>
		} else {
			htim1.Instance->CCR1 =100;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <SetMotor+0x274>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2264      	movs	r2, #100	; 0x64
 8003472:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =100;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <SetMotor+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2264      	movs	r2, #100	; 0x64
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	891b      	ldrh	r3, [r3, #8]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003488:	eddf 6a12 	vldr	s13, [pc, #72]	; 80034d4 <SetMotor+0x278>
 800348c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003490:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80034b4 <SetMotor+0x258>
 8003494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 800349e:	e000      	b.n	80034a2 <SetMotor+0x246>

	default:

		break;
 80034a0:	bf00      	nop
	}
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2000049c 	.word	0x2000049c
 80034b4:	42c80000 	.word	0x42c80000
 80034b8:	200004e8 	.word	0x200004e8
 80034bc:	46d54800 	.word	0x46d54800
 80034c0:	20000450 	.word	0x20000450
 80034c4:	46e03800 	.word	0x46e03800
 80034c8:	20000534 	.word	0x20000534
 80034cc:	46d7a000 	.word	0x46d7a000
 80034d0:	20000404 	.word	0x20000404
 80034d4:	46cbe800 	.word	0x46cbe800

080034d8 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
	//start read data from ADC
	//motor5->thumb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80034dc:	2100      	movs	r1, #0
 80034de:	4835      	ldr	r0, [pc, #212]	; (80035b4 <init_motor_controller+0xdc>)
 80034e0:	f003 fe30 	bl	8007144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80034e4:	2104      	movs	r1, #4
 80034e6:	4833      	ldr	r0, [pc, #204]	; (80035b4 <init_motor_controller+0xdc>)
 80034e8:	f003 fe2c 	bl	8007144 <HAL_TIM_PWM_Start>
	//motor4->index
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80034ec:	2100      	movs	r1, #0
 80034ee:	4832      	ldr	r0, [pc, #200]	; (80035b8 <init_motor_controller+0xe0>)
 80034f0:	f003 fe28 	bl	8007144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80034f4:	2104      	movs	r1, #4
 80034f6:	4830      	ldr	r0, [pc, #192]	; (80035b8 <init_motor_controller+0xe0>)
 80034f8:	f003 fe24 	bl	8007144 <HAL_TIM_PWM_Start>
	//motor3->middle
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80034fc:	2108      	movs	r1, #8
 80034fe:	482f      	ldr	r0, [pc, #188]	; (80035bc <init_motor_controller+0xe4>)
 8003500:	f003 fe20 	bl	8007144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003504:	210c      	movs	r1, #12
 8003506:	482d      	ldr	r0, [pc, #180]	; (80035bc <init_motor_controller+0xe4>)
 8003508:	f003 fe1c 	bl	8007144 <HAL_TIM_PWM_Start>
	//motor2->ring
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800350c:	2100      	movs	r1, #0
 800350e:	482c      	ldr	r0, [pc, #176]	; (80035c0 <init_motor_controller+0xe8>)
 8003510:	f003 fe18 	bl	8007144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003514:	2104      	movs	r1, #4
 8003516:	482a      	ldr	r0, [pc, #168]	; (80035c0 <init_motor_controller+0xe8>)
 8003518:	f003 fe14 	bl	8007144 <HAL_TIM_PWM_Start>
	//motor1->pinky
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800351c:	2100      	movs	r1, #0
 800351e:	4829      	ldr	r0, [pc, #164]	; (80035c4 <init_motor_controller+0xec>)
 8003520:	f003 fe10 	bl	8007144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003524:	2104      	movs	r1, #4
 8003526:	4827      	ldr	r0, [pc, #156]	; (80035c4 <init_motor_controller+0xec>)
 8003528:	f003 fe0c 	bl	8007144 <HAL_TIM_PWM_Start>
	//initialization
	HAL_ADC_MspInit(&hadc1);
 800352c:	4826      	ldr	r0, [pc, #152]	; (80035c8 <init_motor_controller+0xf0>)
 800352e:	f7fd ffd7 	bl	80014e0 <HAL_ADC_MspInit>
	HAL_ADC_MspInit(&hadc2);
 8003532:	4826      	ldr	r0, [pc, #152]	; (80035cc <init_motor_controller+0xf4>)
 8003534:	f7fd ffd4 	bl	80014e0 <HAL_ADC_MspInit>
	HAL_UART_MspInit(&huart4);
 8003538:	4825      	ldr	r0, [pc, #148]	; (80035d0 <init_motor_controller+0xf8>)
 800353a:	f7ff fd05 	bl	8002f48 <HAL_UART_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 800353e:	2201      	movs	r2, #1
 8003540:	4924      	ldr	r1, [pc, #144]	; (80035d4 <init_motor_controller+0xfc>)
 8003542:	4823      	ldr	r0, [pc, #140]	; (80035d0 <init_motor_controller+0xf8>)
 8003544:	f004 fd8c 	bl	8008060 <HAL_UART_Receive_IT>
	HAL_UART_MspInit(&huart4);
 8003548:	4821      	ldr	r0, [pc, #132]	; (80035d0 <init_motor_controller+0xf8>)
 800354a:	f7ff fcfd 	bl	8002f48 <HAL_UART_MspInit>





	TX_State=idel;
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <init_motor_controller+0x100>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
	// Configure settings
	controller.AntiWindup = ENABLED;
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <init_motor_controller+0x104>)
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <init_motor_controller+0x104>)
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <init_motor_controller+0x104>)
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <init_motor_controller+0x108>)
 8003568:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <init_motor_controller+0x104>)
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <init_motor_controller+0x10c>)
 800356e:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <init_motor_controller+0x104>)
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <init_motor_controller+0x110>)
 8003574:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <init_motor_controller+0x104>)
 8003578:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800357c:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <init_motor_controller+0x104>)
 8003580:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003584:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 8003586:	4815      	ldr	r0, [pc, #84]	; (80035dc <init_motor_controller+0x104>)
 8003588:	f7ff fd3c 	bl	8003004 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <init_motor_controller+0x104>)
 800358e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003592:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <init_motor_controller+0x104>)
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <init_motor_controller+0x108>)
 8003598:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <init_motor_controller+0x104>)
 800359c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035a0:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <init_motor_controller+0x104>)
 80035a4:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <init_motor_controller+0x110>)
 80035a6:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <init_motor_controller+0x104>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	2000049c 	.word	0x2000049c
 80035b8:	200004e8 	.word	0x200004e8
 80035bc:	20000450 	.word	0x20000450
 80035c0:	20000534 	.word	0x20000534
 80035c4:	20000404 	.word	0x20000404
 80035c8:	20000290 	.word	0x20000290
 80035cc:	200002f4 	.word	0x200002f4
 80035d0:	20000580 	.word	0x20000580
 80035d4:	2000028a 	.word	0x2000028a
 80035d8:	2000028b 	.word	0x2000028b
 80035dc:	20000684 	.word	0x20000684
 80035e0:	42480000 	.word	0x42480000
 80035e4:	c2480000 	.word	0xc2480000
 80035e8:	40400000 	.word	0x40400000

080035ec <Fingers_Calibration>:

void Fingers_Calibration(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	//read current until stable
	while(calibration_counter<500)
 80035f0:	e009      	b.n	8003606 <Fingers_Calibration+0x1a>
	{
		ADC_ReadCurrent_Thumb();
 80035f2:	f7fe f9b1 	bl	8001958 <ADC_ReadCurrent_Thumb>
		ADC_ReadCurrent_Index();
 80035f6:	f7fe f95b 	bl	80018b0 <ADC_ReadCurrent_Index>
		ADC_ReadCurrent_Middle();
 80035fa:	f7fe f909 	bl	8001810 <ADC_ReadCurrent_Middle>
		ADC_ReadCurrent_Ring();
 80035fe:	f7fe f8af 	bl	8001760 <ADC_ReadCurrent_Ring>
		ADC_ReadCurrent_Pinky();
 8003602:	f7fe f84d 	bl	80016a0 <ADC_ReadCurrent_Pinky>
	while(calibration_counter<500)
 8003606:	4b80      	ldr	r3, [pc, #512]	; (8003808 <Fingers_Calibration+0x21c>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003610:	d3ef      	bcc.n	80035f2 <Fingers_Calibration+0x6>
	}
	//------------------------------| Thumb finger |----------------------------------------
	Fingers_Status.Thumb.Direction=Open;
 8003612:	4b7e      	ldr	r3, [pc, #504]	; (800380c <Fingers_Calibration+0x220>)
 8003614:	2201      	movs	r2, #1
 8003616:	729a      	strb	r2, [r3, #10]
	Fingers_Status.Thumb.speed=60;
 8003618:	4b7c      	ldr	r3, [pc, #496]	; (800380c <Fingers_Calibration+0x220>)
 800361a:	223c      	movs	r2, #60	; 0x3c
 800361c:	739a      	strb	r2, [r3, #14]
	calibration_counter=0;
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <Fingers_Calibration+0x21c>)
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Thumb.Stuck_Finger==0 || calibration_counter<40)
 8003624:	e005      	b.n	8003632 <Fingers_Calibration+0x46>
	{
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8003626:	4979      	ldr	r1, [pc, #484]	; (800380c <Fingers_Calibration+0x220>)
 8003628:	2000      	movs	r0, #0
 800362a:	f7ff fe17 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Thumb();
 800362e:	f7fe f993 	bl	8001958 <ADC_ReadCurrent_Thumb>
	while(Fingers_Status.Thumb.Stuck_Finger==0 || calibration_counter<40)
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <Fingers_Calibration+0x220>)
 8003634:	7b5b      	ldrb	r3, [r3, #13]
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f2      	bne.n	8003626 <Fingers_Calibration+0x3a>
 8003640:	4b71      	ldr	r3, [pc, #452]	; (8003808 <Fingers_Calibration+0x21c>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b27      	cmp	r3, #39	; 0x27
 8003648:	d9ed      	bls.n	8003626 <Fingers_Calibration+0x3a>
	}
	Fingers_Status.Thumb.Direction=Stop;
 800364a:	4b70      	ldr	r3, [pc, #448]	; (800380c <Fingers_Calibration+0x220>)
 800364c:	2200      	movs	r2, #0
 800364e:	729a      	strb	r2, [r3, #10]
	Fingers_Status.Thumb.speed=0;
 8003650:	4b6e      	ldr	r3, [pc, #440]	; (800380c <Fingers_Calibration+0x220>)
 8003652:	2200      	movs	r2, #0
 8003654:	739a      	strb	r2, [r3, #14]
	SetMotor(Thumb, &Fingers_Status.Thumb);
 8003656:	496d      	ldr	r1, [pc, #436]	; (800380c <Fingers_Calibration+0x220>)
 8003658:	2000      	movs	r0, #0
 800365a:	f7ff fdff 	bl	800325c <SetMotor>
	Fingers_Status.Thumb.Stuck_Finger=0;
 800365e:	4b6b      	ldr	r3, [pc, #428]	; (800380c <Fingers_Calibration+0x220>)
 8003660:	2200      	movs	r2, #0
 8003662:	735a      	strb	r2, [r3, #13]
	Fingers_Status.Thumb.Encoder=Max_Encoder_Thumb;
 8003664:	4b69      	ldr	r3, [pc, #420]	; (800380c <Fingers_Calibration+0x220>)
 8003666:	2201      	movs	r2, #1
 8003668:	811a      	strh	r2, [r3, #8]
	//------------------------------| Index finger |----------------------------------------
	Fingers_Status.Index.Direction=Open;
 800366a:	4b68      	ldr	r3, [pc, #416]	; (800380c <Fingers_Calibration+0x220>)
 800366c:	2201      	movs	r2, #1
 800366e:	779a      	strb	r2, [r3, #30]
	Fingers_Status.Index.speed=60;
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <Fingers_Calibration+0x220>)
 8003672:	223c      	movs	r2, #60	; 0x3c
 8003674:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	calibration_counter=0;
 8003678:	4b63      	ldr	r3, [pc, #396]	; (8003808 <Fingers_Calibration+0x21c>)
 800367a:	2200      	movs	r2, #0
 800367c:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<50)
 800367e:	e005      	b.n	800368c <Fingers_Calibration+0xa0>
	{
		SetMotor(Index, &Fingers_Status.Index);
 8003680:	4963      	ldr	r1, [pc, #396]	; (8003810 <Fingers_Calibration+0x224>)
 8003682:	2001      	movs	r0, #1
 8003684:	f7ff fdea 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Index();
 8003688:	f7fe f912 	bl	80018b0 <ADC_ReadCurrent_Index>
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<50)
 800368c:	4b5f      	ldr	r3, [pc, #380]	; (800380c <Fingers_Calibration+0x220>)
 800368e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003692:	f083 0301 	eor.w	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f1      	bne.n	8003680 <Fingers_Calibration+0x94>
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <Fingers_Calibration+0x21c>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b31      	cmp	r3, #49	; 0x31
 80036a4:	d9ec      	bls.n	8003680 <Fingers_Calibration+0x94>
	}
	Fingers_Status.Index.Direction=Stop;
 80036a6:	4b59      	ldr	r3, [pc, #356]	; (800380c <Fingers_Calibration+0x220>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	779a      	strb	r2, [r3, #30]
	Fingers_Status.Index.speed=0;
 80036ac:	4b57      	ldr	r3, [pc, #348]	; (800380c <Fingers_Calibration+0x220>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	SetMotor(Index, &Fingers_Status.Index);
 80036b4:	4956      	ldr	r1, [pc, #344]	; (8003810 <Fingers_Calibration+0x224>)
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7ff fdd0 	bl	800325c <SetMotor>
	Fingers_Status.Index.Stuck_Finger=0;
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <Fingers_Calibration+0x220>)
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Fingers_Status.Index.Encoder=Max_Encoder_Index;
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <Fingers_Calibration+0x220>)
 80036c6:	f646 22a4 	movw	r2, #27300	; 0x6aa4
 80036ca:	839a      	strh	r2, [r3, #28]
	//------------------------------| Middle finger |----------------------------------------
	Fingers_Status.Middle.Direction=Open;
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <Fingers_Calibration+0x220>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Fingers_Status.Middle.speed=60;
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <Fingers_Calibration+0x220>)
 80036d6:	223c      	movs	r2, #60	; 0x3c
 80036d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	calibration_counter=0;
 80036dc:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <Fingers_Calibration+0x21c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<40)
 80036e2:	e005      	b.n	80036f0 <Fingers_Calibration+0x104>
	{
		SetMotor(Middle, &Fingers_Status.Middle);
 80036e4:	494b      	ldr	r1, [pc, #300]	; (8003814 <Fingers_Calibration+0x228>)
 80036e6:	2002      	movs	r0, #2
 80036e8:	f7ff fdb8 	bl	800325c <SetMotor>
		ADC_ReadCurrent_Middle();
 80036ec:	f7fe f890 	bl	8001810 <ADC_ReadCurrent_Middle>
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<40)
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <Fingers_Calibration+0x220>)
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f1      	bne.n	80036e4 <Fingers_Calibration+0xf8>
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <Fingers_Calibration+0x21c>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b27      	cmp	r3, #39	; 0x27
 8003708:	d9ec      	bls.n	80036e4 <Fingers_Calibration+0xf8>
	}
	Fingers_Status.Middle.Direction=Stop;
 800370a:	4b40      	ldr	r3, [pc, #256]	; (800380c <Fingers_Calibration+0x220>)
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Fingers_Status.Middle.speed=0;
 8003712:	4b3e      	ldr	r3, [pc, #248]	; (800380c <Fingers_Calibration+0x220>)
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	SetMotor(Middle, &Fingers_Status.Middle);
 800371a:	493e      	ldr	r1, [pc, #248]	; (8003814 <Fingers_Calibration+0x228>)
 800371c:	2002      	movs	r0, #2
 800371e:	f7ff fd9d 	bl	800325c <SetMotor>
	Fingers_Status.Middle.Stuck_Finger=0;
 8003722:	4b3a      	ldr	r3, [pc, #232]	; (800380c <Fingers_Calibration+0x220>)
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 800372a:	4b38      	ldr	r3, [pc, #224]	; (800380c <Fingers_Calibration+0x220>)
 800372c:	f247 021c 	movw	r2, #28700	; 0x701c
 8003730:	861a      	strh	r2, [r3, #48]	; 0x30
	//------------------------------| Ring finger |----------------------------------------
	Fingers_Status.Ring.Direction=Open;
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <Fingers_Calibration+0x220>)
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Fingers_Status.Ring.speed=60;
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <Fingers_Calibration+0x220>)
 800373c:	223c      	movs	r2, #60	; 0x3c
 800373e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	calibration_counter=0;
 8003742:	4b31      	ldr	r3, [pc, #196]	; (8003808 <Fingers_Calibration+0x21c>)
 8003744:	2200      	movs	r2, #0
 8003746:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<40)
 8003748:	e005      	b.n	8003756 <Fingers_Calibration+0x16a>
	{
	SetMotor(Ring, &Fingers_Status.Ring);
 800374a:	4933      	ldr	r1, [pc, #204]	; (8003818 <Fingers_Calibration+0x22c>)
 800374c:	2003      	movs	r0, #3
 800374e:	f7ff fd85 	bl	800325c <SetMotor>
	ADC_ReadCurrent_Ring();
 8003752:	f7fe f805 	bl	8001760 <ADC_ReadCurrent_Ring>
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<40)
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <Fingers_Calibration+0x220>)
 8003758:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800375c:	f083 0301 	eor.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f1      	bne.n	800374a <Fingers_Calibration+0x15e>
 8003766:	4b28      	ldr	r3, [pc, #160]	; (8003808 <Fingers_Calibration+0x21c>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b27      	cmp	r3, #39	; 0x27
 800376e:	d9ec      	bls.n	800374a <Fingers_Calibration+0x15e>
	}
	Fingers_Status.Ring.Direction=Stop;
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <Fingers_Calibration+0x220>)
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Fingers_Status.Ring.speed=0;
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <Fingers_Calibration+0x220>)
 800377a:	2200      	movs	r2, #0
 800377c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	SetMotor(Ring, &Fingers_Status.Ring);
 8003780:	4925      	ldr	r1, [pc, #148]	; (8003818 <Fingers_Calibration+0x22c>)
 8003782:	2003      	movs	r0, #3
 8003784:	f7ff fd6a 	bl	800325c <SetMotor>
	Fingers_Status.Ring.Stuck_Finger=0;
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <Fingers_Calibration+0x220>)
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Fingers_Status.Ring.Encoder=Max_Encoder_Middle;
 8003790:	4b1e      	ldr	r3, [pc, #120]	; (800380c <Fingers_Calibration+0x220>)
 8003792:	f247 021c 	movw	r2, #28700	; 0x701c
 8003796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	//------------------------------| Pinky finger |----------------------------------------
	Fingers_Status.Pinky.Direction=Open;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <Fingers_Calibration+0x220>)
 800379c:	2201      	movs	r2, #1
 800379e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Fingers_Status.Pinky.speed=60;
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <Fingers_Calibration+0x220>)
 80037a4:	223c      	movs	r2, #60	; 0x3c
 80037a6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	calibration_counter=0;
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <Fingers_Calibration+0x21c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<40)
 80037b0:	e005      	b.n	80037be <Fingers_Calibration+0x1d2>
	{
	SetMotor(Pinky, &Fingers_Status.Pinky);
 80037b2:	491a      	ldr	r1, [pc, #104]	; (800381c <Fingers_Calibration+0x230>)
 80037b4:	2004      	movs	r0, #4
 80037b6:	f7ff fd51 	bl	800325c <SetMotor>
	ADC_ReadCurrent_Pinky();
 80037ba:	f7fd ff71 	bl	80016a0 <ADC_ReadCurrent_Pinky>
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<40)
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <Fingers_Calibration+0x220>)
 80037c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f1      	bne.n	80037b2 <Fingers_Calibration+0x1c6>
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <Fingers_Calibration+0x21c>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b27      	cmp	r3, #39	; 0x27
 80037d6:	d9ec      	bls.n	80037b2 <Fingers_Calibration+0x1c6>
	}
	Fingers_Status.Pinky.Direction=Stop;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <Fingers_Calibration+0x220>)
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Fingers_Status.Pinky.speed=0;
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <Fingers_Calibration+0x220>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	SetMotor(Pinky, &Fingers_Status.Pinky);
 80037e8:	490c      	ldr	r1, [pc, #48]	; (800381c <Fingers_Calibration+0x230>)
 80037ea:	2004      	movs	r0, #4
 80037ec:	f7ff fd36 	bl	800325c <SetMotor>
	Fingers_Status.Pinky.Stuck_Finger=0;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <Fingers_Calibration+0x220>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Fingers_Status.Pinky.Encoder=Max_Encoder_Middle;
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <Fingers_Calibration+0x220>)
 80037fa:	f247 021c 	movw	r2, #28700	; 0x701c
 80037fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200006cc 	.word	0x200006cc
 800380c:	20000608 	.word	0x20000608
 8003810:	2000061c 	.word	0x2000061c
 8003814:	20000630 	.word	0x20000630
 8003818:	20000644 	.word	0x20000644
 800381c:	20000658 	.word	0x20000658

08003820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003824:	f7fe ffb6 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <LoopForever+0x6>)
  ldr r1, =_edata
 800382a:	490d      	ldr	r1, [pc, #52]	; (8003860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <LoopForever+0xe>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <LoopForever+0x16>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384e:	f007 fb05 	bl	800ae5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003852:	f7fe fc8d 	bl	8002170 <main>

08003856 <LoopForever>:

LoopForever:
    b LoopForever
 8003856:	e7fe      	b.n	8003856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003858:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800385c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003860:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003864:	0800dd9c 	.word	0x0800dd9c
  ldr r2, =_sbss
 8003868:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800386c:	20000820 	.word	0x20000820

08003870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC1_2_IRQHandler>

08003872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800387c:	2003      	movs	r0, #3
 800387e:	f001 fc3f 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003882:	2002      	movs	r0, #2
 8003884:	f000 f80e 	bl	80038a4 <HAL_InitTick>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	71fb      	strb	r3, [r7, #7]
 8003892:	e001      	b.n	8003898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003894:	f7fe fe10 	bl	80024b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003898:	79fb      	ldrb	r3, [r7, #7]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <HAL_InitTick+0x6c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <HAL_InitTick+0x70>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_InitTick+0x6c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fc4b 	bl	800516a <HAL_SYSTICK_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d809      	bhi.n	80038f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e0:	2200      	movs	r2, #0
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f001 fc15 	bl	8005116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_InitTick+0x74>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e007      	b.n	8003904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e004      	b.n	8003904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	e001      	b.n	8003904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000008 	.word	0x20000008
 8003914:	20000000 	.word	0x20000000
 8003918:	20000004 	.word	0x20000004

0800391c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x20>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_IncTick+0x24>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4413      	add	r3, r2
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_IncTick+0x24>)
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000008 	.word	0x20000008
 8003940:	200006d0 	.word	0x200006d0

08003944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return uwTick;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_GetTick+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200006d0 	.word	0x200006d0

0800395c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7ff ffee 	bl	8003944 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d005      	beq.n	8003982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_Delay+0x44>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003982:	bf00      	nop
 8003984:	f7ff ffde 	bl	8003944 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	429a      	cmp	r2, r3
 8003992:	d8f7      	bhi.n	8003984 <HAL_Delay+0x28>
  {
  }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000008 	.word	0x20000008

080039a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	; 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <LL_ADC_SetOffset+0x44>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	03fff000 	.word	0x03fff000

08003a54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3360      	adds	r3, #96	; 0x60
 8003a62:	461a      	mov	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3360      	adds	r3, #96	; 0x60
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3330      	adds	r3, #48	; 0x30
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	4413      	add	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	211f      	movs	r1, #31
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 011f 	and.w	r1, r3, #31
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3314      	adds	r3, #20
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0e5b      	lsrs	r3, r3, #25
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	0d1b      	lsrs	r3, r3, #20
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2107      	movs	r1, #7
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0d1b      	lsrs	r3, r3, #20
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0318 	and.w	r3, r3, #24
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bb0:	40d9      	lsrs	r1, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	0007ffff 	.word	0x0007ffff

08003bd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 031f 	and.w	r3, r3, #31
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6093      	str	r3, [r2, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d101      	bne.n	8003c2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c78:	d101      	bne.n	8003c7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <LL_ADC_IsEnabled+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_ADC_IsEnabled+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cee:	f043 0204 	orr.w	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d101      	bne.n	8003d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d101      	bne.n	8003d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b089      	sub	sp, #36	; 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e130      	b.n	8003fcc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd fbb1 	bl	80014e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff3f 	bl	8003c14 <LL_ADC_IsDeepPowerDownEnabled>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff25 	bl	8003bf0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff5a 	bl	8003c64 <LL_ADC_IsInternalRegulatorEnabled>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d115      	bne.n	8003de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff3e 	bl	8003c3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc0:	4b84      	ldr	r3, [pc, #528]	; (8003fd4 <HAL_ADC_Init+0x284>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	4a84      	ldr	r2, [pc, #528]	; (8003fd8 <HAL_ADC_Init+0x288>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	3301      	adds	r3, #1
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dd4:	e002      	b.n	8003ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f9      	bne.n	8003dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff3c 	bl	8003c64 <LL_ADC_IsInternalRegulatorEnabled>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ff75 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 80c9 	bne.w	8003fba <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80c5 	bne.w	8003fba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e38:	f043 0202 	orr.w	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff35 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d115      	bne.n	8003e7c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e50:	4862      	ldr	r0, [pc, #392]	; (8003fdc <HAL_ADC_Init+0x28c>)
 8003e52:	f7ff ff2f 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003e56:	4604      	mov	r4, r0
 8003e58:	4861      	ldr	r0, [pc, #388]	; (8003fe0 <HAL_ADC_Init+0x290>)
 8003e5a:	f7ff ff2b 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	431c      	orrs	r4, r3
 8003e62:	4860      	ldr	r0, [pc, #384]	; (8003fe4 <HAL_ADC_Init+0x294>)
 8003e64:	f7ff ff26 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	485c      	ldr	r0, [pc, #368]	; (8003fe8 <HAL_ADC_Init+0x298>)
 8003e78:	f7ff fd94 	bl	80039a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7e5b      	ldrb	r3, [r3, #25]
 8003e80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d106      	bne.n	8003eb8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	045b      	lsls	r3, r3, #17
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	4b44      	ldr	r3, [pc, #272]	; (8003fec <HAL_ADC_Init+0x29c>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	69b9      	ldr	r1, [r7, #24]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff1b 	bl	8003d28 <LL_ADC_INJ_IsConversionOngoing>
 8003ef2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13d      	bne.n	8003f76 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d13a      	bne.n	8003f76 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f04:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f0c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1c:	f023 0302 	bic.w	r3, r3, #2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d118      	bne.n	8003f66 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f56:	430a      	orrs	r2, r1
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	e007      	b.n	8003f76 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10c      	bne.n	8003f98 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f023 010f 	bic.w	r1, r3, #15
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
 8003f96:	e007      	b.n	8003fa8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020f 	bic.w	r2, r2, #15
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	f043 0201 	orr.w	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003fb8:	e007      	b.n	8003fca <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f043 0210 	orr.w	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3724      	adds	r7, #36	; 0x24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	053e2d63 	.word	0x053e2d63
 8003fdc:	50040000 	.word	0x50040000
 8003fe0:	50040100 	.word	0x50040100
 8003fe4:	50040200 	.word	0x50040200
 8003fe8:	50040300 	.word	0x50040300
 8003fec:	fff0c007 	.word	0xfff0c007

08003ff0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ffc:	4853      	ldr	r0, [pc, #332]	; (800414c <HAL_ADC_Start_DMA+0x15c>)
 8003ffe:	f7ff fde9 	bl	8003bd4 <LL_ADC_GetMultimode>
 8004002:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe7a 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8093 	bne.w	800413c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_ADC_Start_DMA+0x34>
 8004020:	2302      	movs	r3, #2
 8004022:	e08e      	b.n	8004142 <HAL_ADC_Start_DMA+0x152>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a47      	ldr	r2, [pc, #284]	; (8004150 <HAL_ADC_Start_DMA+0x160>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d008      	beq.n	8004048 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b05      	cmp	r3, #5
 8004040:	d002      	beq.n	8004048 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b09      	cmp	r3, #9
 8004046:	d172      	bne.n	800412e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fc9d 	bl	8004988 <ADC_Enable>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d165      	bne.n	8004124 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a38      	ldr	r2, [pc, #224]	; (8004154 <HAL_ADC_Start_DMA+0x164>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d002      	beq.n	800407c <HAL_ADC_Start_DMA+0x8c>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	e000      	b.n	800407e <HAL_ADC_Start_DMA+0x8e>
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_ADC_Start_DMA+0x168>)
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4293      	cmp	r3, r2
 8004084:	d002      	beq.n	800408c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f023 0206 	bic.w	r2, r3, #6
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
 80040b0:	e002      	b.n	80040b8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <HAL_ADC_Start_DMA+0x16c>)
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <HAL_ADC_Start_DMA+0x170>)
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	4a25      	ldr	r2, [pc, #148]	; (8004164 <HAL_ADC_Start_DMA+0x174>)
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	221c      	movs	r2, #28
 80040d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0210 	orr.w	r2, r2, #16
 80040ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3340      	adds	r3, #64	; 0x40
 800410a:	4619      	mov	r1, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f001 f8f0 	bl	80052f4 <HAL_DMA_Start_IT>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fddc 	bl	8003cda <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004122:	e00d      	b.n	8004140 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800412c:	e008      	b.n	8004140 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800413a:	e001      	b.n	8004140 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800413c:	2302      	movs	r3, #2
 800413e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	50040300 	.word	0x50040300
 8004150:	50040200 	.word	0x50040200
 8004154:	50040100 	.word	0x50040100
 8004158:	50040000 	.word	0x50040000
 800415c:	08004a95 	.word	0x08004a95
 8004160:	08004b6d 	.word	0x08004b6d
 8004164:	08004b89 	.word	0x08004b89

08004168 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b0b6      	sub	sp, #216	; 0xd8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x22>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e3c9      	b.n	800495a <HAL_ADC_ConfigChannel+0x7b6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fd95 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 83aa 	bne.w	8004934 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d824      	bhi.n	800423a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	3b02      	subs	r3, #2
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d81b      	bhi.n	8004232 <HAL_ADC_ConfigChannel+0x8e>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_ADC_ConfigChannel+0x5c>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004211 	.word	0x08004211
 8004204:	08004219 	.word	0x08004219
 8004208:	08004221 	.word	0x08004221
 800420c:	08004229 	.word	0x08004229
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004210:	230c      	movs	r3, #12
 8004212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004216:	e010      	b.n	800423a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004218:	2312      	movs	r3, #18
 800421a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800421e:	e00c      	b.n	800423a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004220:	2318      	movs	r3, #24
 8004222:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004226:	e008      	b.n	800423a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800422c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004230:	e003      	b.n	800423a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004232:	2306      	movs	r3, #6
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004238:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004248:	f7ff fc48 	bl	8003adc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fd56 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8004256:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fd62 	bl	8003d28 <LL_ADC_INJ_IsConversionOngoing>
 8004264:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 81a4 	bne.w	80045ba <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 819f 	bne.w	80045ba <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	461a      	mov	r2, r3
 800428a:	f7ff fc53 	bl	8003b34 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00a      	beq.n	80042c6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6919      	ldr	r1, [r3, #16]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042c0:	f7ff fba4 	bl	8003a0c <LL_ADC_SetOffset>
 80042c4:	e179      	b.n	80045ba <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fbc1 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x14e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fbb6 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80042e8:	4603      	mov	r3, r0
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	e01e      	b.n	8004330 <HAL_ADC_ConfigChannel+0x18c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fbab 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80042fe:	4603      	mov	r3, r0
 8004300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e004      	b.n	800432e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004328:	fab3 f383 	clz	r3, r3
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x1a4>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0e9b      	lsrs	r3, r3, #26
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	e018      	b.n	800437a <HAL_ADC_ConfigChannel+0x1d6>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800435c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	e004      	b.n	800437a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800437a:	429a      	cmp	r2, r3
 800437c:	d106      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fb7a 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fb5e 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x214>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fb53 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	f003 021f 	and.w	r2, r3, #31
 80043b6:	e01e      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x252>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fb48 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80043d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80043de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80043e6:	2320      	movs	r3, #32
 80043e8:	e004      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80043ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d105      	bne.n	800440e <HAL_ADC_ConfigChannel+0x26a>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0e9b      	lsrs	r3, r3, #26
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	e018      	b.n	8004440 <HAL_ADC_ConfigChannel+0x29c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004426:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800442a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e004      	b.n	8004440 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004440:	429a      	cmp	r2, r3
 8004442:	d106      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2200      	movs	r2, #0
 800444a:	2101      	movs	r1, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fb17 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fafb 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_ADC_ConfigChannel+0x2da>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2102      	movs	r1, #2
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff faf0 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	0e9b      	lsrs	r3, r3, #26
 8004478:	f003 021f 	and.w	r2, r3, #31
 800447c:	e01e      	b.n	80044bc <HAL_ADC_ConfigChannel+0x318>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fae5 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800449c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80044a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80044ac:	2320      	movs	r3, #32
 80044ae:	e004      	b.n	80044ba <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80044b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x330>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	e014      	b.n	80044fe <HAL_ADC_ConfigChannel+0x35a>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80044e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80044e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80044f0:	2320      	movs	r3, #32
 80044f2:	e004      	b.n	80044fe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80044f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044fe:	429a      	cmp	r2, r3
 8004500:	d106      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fab8 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2103      	movs	r1, #3
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fa9c 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <HAL_ADC_ConfigChannel+0x398>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2103      	movs	r1, #3
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fa91 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004532:	4603      	mov	r3, r0
 8004534:	0e9b      	lsrs	r3, r3, #26
 8004536:	f003 021f 	and.w	r2, r3, #31
 800453a:	e017      	b.n	800456c <HAL_ADC_ConfigChannel+0x3c8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2103      	movs	r1, #3
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fa86 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e003      	b.n	800456a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x3e0>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0e9b      	lsrs	r3, r3, #26
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	e011      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x404>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004594:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80045a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d106      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2103      	movs	r1, #3
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fa63 	bl	8003a80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fb78 	bl	8003cb4 <LL_ADC_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f040 8140 	bne.w	800484c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	461a      	mov	r2, r3
 80045da:	f7ff fad7 	bl	8003b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4a8f      	ldr	r2, [pc, #572]	; (8004820 <HAL_ADC_ConfigChannel+0x67c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f040 8131 	bne.w	800484c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x46e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	3301      	adds	r3, #1
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2b09      	cmp	r3, #9
 8004608:	bf94      	ite	ls
 800460a:	2301      	movls	r3, #1
 800460c:	2300      	movhi	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e019      	b.n	8004646 <HAL_ADC_ConfigChannel+0x4a2>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004622:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800462a:	2320      	movs	r3, #32
 800462c:	e003      	b.n	8004636 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2b09      	cmp	r3, #9
 800463e:	bf94      	ite	ls
 8004640:	2301      	movls	r3, #1
 8004642:	2300      	movhi	r3, #0
 8004644:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004646:	2b00      	cmp	r3, #0
 8004648:	d079      	beq.n	800473e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x4c2>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	3301      	adds	r3, #1
 800465e:	069b      	lsls	r3, r3, #26
 8004660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004664:	e015      	b.n	8004692 <HAL_ADC_ConfigChannel+0x4ee>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004676:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800467e:	2320      	movs	r3, #32
 8004680:	e003      	b.n	800468a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	3301      	adds	r3, #1
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x50e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	0e9b      	lsrs	r3, r3, #26
 80046a4:	3301      	adds	r3, #1
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	e017      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x53e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80046ca:	2320      	movs	r3, #32
 80046cc:	e003      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	ea42 0103 	orr.w	r1, r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x564>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0e9b      	lsrs	r3, r3, #26
 80046f8:	3301      	adds	r3, #1
 80046fa:	f003 021f 	and.w	r2, r3, #31
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	051b      	lsls	r3, r3, #20
 8004706:	e018      	b.n	800473a <HAL_ADC_ConfigChannel+0x596>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e003      	b.n	800472c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3301      	adds	r3, #1
 800472e:	f003 021f 	and.w	r2, r3, #31
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800473a:	430b      	orrs	r3, r1
 800473c:	e081      	b.n	8004842 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <HAL_ADC_ConfigChannel+0x5b6>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	0e9b      	lsrs	r3, r3, #26
 8004750:	3301      	adds	r3, #1
 8004752:	069b      	lsls	r3, r3, #26
 8004754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004758:	e015      	b.n	8004786 <HAL_ADC_ConfigChannel+0x5e2>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e003      	b.n	800477e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	3301      	adds	r3, #1
 8004780:	069b      	lsls	r3, r3, #26
 8004782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x602>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	0e9b      	lsrs	r3, r3, #26
 8004798:	3301      	adds	r3, #1
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	e017      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x632>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	61bb      	str	r3, [r7, #24]
  return result;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e003      	b.n	80047ca <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	ea42 0103 	orr.w	r1, r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x65e>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	0e9b      	lsrs	r3, r3, #26
 80047ec:	3301      	adds	r3, #1
 80047ee:	f003 021f 	and.w	r2, r3, #31
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	3b1e      	subs	r3, #30
 80047fa:	051b      	lsls	r3, r3, #20
 80047fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004800:	e01e      	b.n	8004840 <HAL_ADC_ConfigChannel+0x69c>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	60fb      	str	r3, [r7, #12]
  return result;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e006      	b.n	800482c <HAL_ADC_ConfigChannel+0x688>
 800481e:	bf00      	nop
 8004820:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	3301      	adds	r3, #1
 800482e:	f003 021f 	and.w	r2, r3, #31
 8004832:	4613      	mov	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4413      	add	r3, r2
 8004838:	3b1e      	subs	r3, #30
 800483a:	051b      	lsls	r3, r3, #20
 800483c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004840:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004846:	4619      	mov	r1, r3
 8004848:	f7ff f974 	bl	8003b34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b44      	ldr	r3, [pc, #272]	; (8004964 <HAL_ADC_ConfigChannel+0x7c0>)
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d07a      	beq.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004858:	4843      	ldr	r0, [pc, #268]	; (8004968 <HAL_ADC_ConfigChannel+0x7c4>)
 800485a:	f7ff f8c9 	bl	80039f0 <LL_ADC_GetCommonPathInternalCh>
 800485e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a41      	ldr	r2, [pc, #260]	; (800496c <HAL_ADC_ConfigChannel+0x7c8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d12c      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800486c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d126      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3c      	ldr	r2, [pc, #240]	; (8004970 <HAL_ADC_ConfigChannel+0x7cc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_ADC_ConfigChannel+0x6e8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <HAL_ADC_ConfigChannel+0x7d0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d15d      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800488c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004894:	4619      	mov	r1, r3
 8004896:	4834      	ldr	r0, [pc, #208]	; (8004968 <HAL_ADC_ConfigChannel+0x7c4>)
 8004898:	f7ff f897 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800489c:	4b36      	ldr	r3, [pc, #216]	; (8004978 <HAL_ADC_ConfigChannel+0x7d4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	4a36      	ldr	r2, [pc, #216]	; (800497c <HAL_ADC_ConfigChannel+0x7d8>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80048b6:	e002      	b.n	80048be <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f9      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048c4:	e040      	b.n	8004948 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2d      	ldr	r2, [pc, #180]	; (8004980 <HAL_ADC_ConfigChannel+0x7dc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d118      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d112      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_ADC_ConfigChannel+0x7cc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x74c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_ADC_ConfigChannel+0x7d0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d12d      	bne.n	800494c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f8:	4619      	mov	r1, r3
 80048fa:	481b      	ldr	r0, [pc, #108]	; (8004968 <HAL_ADC_ConfigChannel+0x7c4>)
 80048fc:	f7ff f865 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004900:	e024      	b.n	800494c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <HAL_ADC_ConfigChannel+0x7e0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d120      	bne.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800490c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11a      	bne.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_ADC_ConfigChannel+0x7cc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d115      	bne.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800492a:	4619      	mov	r1, r3
 800492c:	480e      	ldr	r0, [pc, #56]	; (8004968 <HAL_ADC_ConfigChannel+0x7c4>)
 800492e:	f7ff f84c 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
 8004932:	e00c      	b.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004946:	e002      	b.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800494c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004956:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800495a:	4618      	mov	r0, r3
 800495c:	37d8      	adds	r7, #216	; 0xd8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	80080000 	.word	0x80080000
 8004968:	50040300 	.word	0x50040300
 800496c:	c7520000 	.word	0xc7520000
 8004970:	50040000 	.word	0x50040000
 8004974:	50040200 	.word	0x50040200
 8004978:	20000000 	.word	0x20000000
 800497c:	053e2d63 	.word	0x053e2d63
 8004980:	cb840000 	.word	0xcb840000
 8004984:	80000001 	.word	0x80000001

08004988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f98b 	bl	8003cb4 <LL_ADC_IsEnabled>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d169      	bne.n	8004a78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <ADC_Enable+0xfc>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f043 0210 	orr.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e055      	b.n	8004a7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f95a 	bl	8003c8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049d8:	482b      	ldr	r0, [pc, #172]	; (8004a88 <ADC_Enable+0x100>)
 80049da:	f7ff f809 	bl	80039f0 <LL_ADC_GetCommonPathInternalCh>
 80049de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80049e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <ADC_Enable+0x104>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <ADC_Enable+0x108>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a02:	e002      	b.n	8004a0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f9      	bne.n	8004a04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a10:	f7fe ff98 	bl	8003944 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a16:	e028      	b.n	8004a6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f949 	bl	8003cb4 <LL_ADC_IsEnabled>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f92d 	bl	8003c8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a32:	f7fe ff87 	bl	8003944 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d914      	bls.n	8004a6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d00d      	beq.n	8004a6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	f043 0210 	orr.w	r2, r3, #16
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e007      	b.n	8004a7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d1cf      	bne.n	8004a18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	8000003f 	.word	0x8000003f
 8004a88:	50040300 	.word	0x50040300
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	053e2d63 	.word	0x053e2d63

08004a94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d14b      	bne.n	8004b46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d021      	beq.n	8004b0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fff2 	bl	8003ab6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d032      	beq.n	8004b3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d12b      	bne.n	8004b3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11f      	bne.n	8004b3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
 8004b0a:	e018      	b.n	8004b3e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d111      	bne.n	8004b3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fb12 	bl	8004168 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b44:	e00e      	b.n	8004b64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff fb1c 	bl	8004190 <HAL_ADC_ErrorCallback>
}
 8004b58:	e004      	b.n	8004b64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fafe 	bl	800417c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff faee 	bl	8004190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <LL_ADC_IsEnabled>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <LL_ADC_IsEnabled+0x18>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <LL_ADC_IsEnabled+0x1a>
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d101      	bne.n	8004bfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b09f      	sub	sp, #124	; 0x7c
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e093      	b.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c32:	2300      	movs	r3, #0
 8004c34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d102      	bne.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c40:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	e001      	b.n	8004c4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e072      	b.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ffb9 	bl	8004be2 <LL_ADC_REG_IsConversionOngoing>
 8004c70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ffb3 	bl	8004be2 <LL_ADC_REG_IsConversionOngoing>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d154      	bne.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d151      	bne.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c88:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02c      	beq.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca6:	035b      	lsls	r3, r3, #13
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	431a      	orrs	r2, r3
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb0:	4829      	ldr	r0, [pc, #164]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004cb2:	f7ff ff83 	bl	8004bbc <LL_ADC_IsEnabled>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4828      	ldr	r0, [pc, #160]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004cba:	f7ff ff7f 	bl	8004bbc <LL_ADC_IsEnabled>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	431c      	orrs	r4, r3
 8004cc2:	4828      	ldr	r0, [pc, #160]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004cc4:	f7ff ff7a 	bl	8004bbc <LL_ADC_IsEnabled>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4323      	orrs	r3, r4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d137      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	6811      	ldr	r1, [r2, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cec:	e028      	b.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cfa:	4817      	ldr	r0, [pc, #92]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004cfc:	f7ff ff5e 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d00:	4604      	mov	r4, r0
 8004d02:	4816      	ldr	r0, [pc, #88]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d04:	f7ff ff5a 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	431c      	orrs	r4, r3
 8004d0c:	4815      	ldr	r0, [pc, #84]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004d0e:	f7ff ff55 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4323      	orrs	r3, r4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d112      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004d22:	f023 030f 	bic.w	r3, r3, #15
 8004d26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d2a:	e009      	b.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004d3e:	e000      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	377c      	adds	r7, #124	; 0x7c
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}
 8004d56:	bf00      	nop
 8004d58:	50040000 	.word	0x50040000
 8004d5c:	50040100 	.word	0x50040100
 8004d60:	50040300 	.word	0x50040300
 8004d64:	50040200 	.word	0x50040200

08004d68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0ed      	b.n	8004f56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fe68 	bl	8001a5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d9c:	f7fe fdd2 	bl	8003944 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004da2:	e012      	b.n	8004dca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004da4:	f7fe fdce 	bl	8003944 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b0a      	cmp	r3, #10
 8004db0:	d90b      	bls.n	8004dca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0c5      	b.n	8004f56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0e5      	beq.n	8004da4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0202 	bic.w	r2, r2, #2
 8004de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de8:	f7fe fdac 	bl	8003944 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dee:	e012      	b.n	8004e16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004df0:	f7fe fda8 	bl	8003944 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b0a      	cmp	r3, #10
 8004dfc:	d90b      	bls.n	8004e16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e09f      	b.n	8004f56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7e1b      	ldrb	r3, [r3, #24]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d108      	bne.n	8004e3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e007      	b.n	8004e4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7e5b      	ldrb	r3, [r3, #25]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d108      	bne.n	8004e68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	7e9b      	ldrb	r3, [r3, #26]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0220 	orr.w	r2, r2, #32
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e007      	b.n	8004ea2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0220 	bic.w	r2, r2, #32
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7edb      	ldrb	r3, [r3, #27]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0210 	bic.w	r2, r2, #16
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0210 	orr.w	r2, r2, #16
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7f1b      	ldrb	r3, [r3, #28]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d108      	bne.n	8004ee6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e007      	b.n	8004ef6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0208 	bic.w	r2, r2, #8
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7f5b      	ldrb	r3, [r3, #29]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d108      	bne.n	8004f10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0204 	orr.w	r2, r2, #4
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e007      	b.n	8004f20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f92:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	60d3      	str	r3, [r2, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000ed00 	.word	0xe000ed00

08004fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0307 	and.w	r3, r3, #7
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0b      	blt.n	8004fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <__NVIC_EnableIRQ+0x38>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0a      	blt.n	800502a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <__NVIC_SetPriority+0x4c>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005028:	e00a      	b.n	8005040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <__NVIC_SetPriority+0x50>)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	3b04      	subs	r3, #4
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	440b      	add	r3, r1
 800503e:	761a      	strb	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf28      	it	cs
 8005072:	2304      	movcs	r3, #4
 8005074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	2b06      	cmp	r3, #6
 800507c:	d902      	bls.n	8005084 <NVIC_EncodePriority+0x30>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3b03      	subs	r3, #3
 8005082:	e000      	b.n	8005086 <NVIC_EncodePriority+0x32>
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	401a      	ands	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800509c:	f04f 31ff 	mov.w	r1, #4294967295
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43d9      	mvns	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	4313      	orrs	r3, r2
         );
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050cc:	d301      	bcc.n	80050d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00f      	b.n	80050f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <SysTick_Config+0x40>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050da:	210f      	movs	r1, #15
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	f7ff ff8e 	bl	8005000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Config+0x40>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SysTick_Config+0x40>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010

08005100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff29 	bl	8004f60 <__NVIC_SetPriorityGrouping>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005128:	f7ff ff3e 	bl	8004fa8 <__NVIC_GetPriorityGrouping>
 800512c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff ff8e 	bl	8005054 <NVIC_EncodePriority>
 8005138:	4602      	mov	r2, r0
 800513a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff5d 	bl	8005000 <__NVIC_SetPriority>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff31 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ffa2 	bl	80050bc <SysTick_Config>
 8005178:	4603      	mov	r3, r0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e098      	b.n	80052c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <HAL_DMA_Init+0x150>)
 800519e:	429a      	cmp	r2, r3
 80051a0:	d80f      	bhi.n	80051c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <HAL_DMA_Init+0x154>)
 80051aa:	4413      	add	r3, r2
 80051ac:	4a4b      	ldr	r2, [pc, #300]	; (80052dc <HAL_DMA_Init+0x158>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	009a      	lsls	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a48      	ldr	r2, [pc, #288]	; (80052e0 <HAL_DMA_Init+0x15c>)
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
 80051c0:	e00e      	b.n	80051e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <HAL_DMA_Init+0x160>)
 80051ca:	4413      	add	r3, r2
 80051cc:	4a43      	ldr	r2, [pc, #268]	; (80052dc <HAL_DMA_Init+0x158>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	009a      	lsls	r2, r3, #2
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <HAL_DMA_Init+0x164>)
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523a:	d039      	beq.n	80052b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <HAL_DMA_Init+0x15c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d11a      	bne.n	800527c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005246:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_DMA_Init+0x168>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f003 031c 	and.w	r3, r3, #28
 8005252:	210f      	movs	r1, #15
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	4924      	ldr	r1, [pc, #144]	; (80052ec <HAL_DMA_Init+0x168>)
 800525c:	4013      	ands	r3, r2
 800525e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005260:	4b22      	ldr	r3, [pc, #136]	; (80052ec <HAL_DMA_Init+0x168>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f003 031c 	and.w	r3, r3, #28
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	491d      	ldr	r1, [pc, #116]	; (80052ec <HAL_DMA_Init+0x168>)
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]
 800527a:	e019      	b.n	80052b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_DMA_Init+0x16c>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f003 031c 	and.w	r3, r3, #28
 8005288:	210f      	movs	r1, #15
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	4917      	ldr	r1, [pc, #92]	; (80052f0 <HAL_DMA_Init+0x16c>)
 8005292:	4013      	ands	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005296:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <HAL_DMA_Init+0x16c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f003 031c 	and.w	r3, r3, #28
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	4911      	ldr	r1, [pc, #68]	; (80052f0 <HAL_DMA_Init+0x16c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40020407 	.word	0x40020407
 80052d8:	bffdfff8 	.word	0xbffdfff8
 80052dc:	cccccccd 	.word	0xcccccccd
 80052e0:	40020000 	.word	0x40020000
 80052e4:	bffdfbf8 	.word	0xbffdfbf8
 80052e8:	40020400 	.word	0x40020400
 80052ec:	400200a8 	.word	0x400200a8
 80052f0:	400204a8 	.word	0x400204a8

080052f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_DMA_Start_IT+0x20>
 8005310:	2302      	movs	r3, #2
 8005312:	e04b      	b.n	80053ac <HAL_DMA_Start_IT+0xb8>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d13a      	bne.n	800539e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f95f 	bl	8005610 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 020e 	orr.w	r2, r2, #14
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e00f      	b.n	800538c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0204 	bic.w	r2, r2, #4
 800537a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 020a 	orr.w	r2, r2, #10
 800538a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e005      	b.n	80053aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
 80053a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d008      	beq.n	80053de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e022      	b.n	8005424 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 020e 	bic.w	r2, r2, #14
 80053ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	f003 021c 	and.w	r2, r3, #28
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2101      	movs	r1, #1
 800540c:	fa01 f202 	lsl.w	r2, r1, r2
 8005410:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d005      	beq.n	8005454 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2204      	movs	r2, #4
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
 8005452:	e029      	b.n	80054a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 020e 	bic.w	r2, r2, #14
 8005462:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005478:	f003 021c 	and.w	r2, r3, #28
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f202 	lsl.w	r2, r1, r2
 8005486:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
    }
  }
  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f003 031c 	and.w	r3, r3, #28
 80054d2:	2204      	movs	r2, #4
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d026      	beq.n	800552c <HAL_DMA_IRQHandler+0x7a>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d021      	beq.n	800552c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0204 	bic.w	r2, r2, #4
 8005504:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	f003 021c 	and.w	r2, r3, #28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2104      	movs	r1, #4
 8005514:	fa01 f202 	lsl.w	r2, r1, r2
 8005518:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	2b00      	cmp	r3, #0
 8005520:	d071      	beq.n	8005606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800552a:	e06c      	b.n	8005606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f003 031c 	and.w	r3, r3, #28
 8005534:	2202      	movs	r2, #2
 8005536:	409a      	lsls	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02e      	beq.n	800559e <HAL_DMA_IRQHandler+0xec>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d029      	beq.n	800559e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 020a 	bic.w	r2, r2, #10
 8005566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f003 021c 	and.w	r2, r3, #28
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	2102      	movs	r1, #2
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d038      	beq.n	8005606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800559c:	e033      	b.n	8005606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f003 031c 	and.w	r3, r3, #28
 80055a6:	2208      	movs	r2, #8
 80055a8:	409a      	lsls	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02a      	beq.n	8005608 <HAL_DMA_IRQHandler+0x156>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d025      	beq.n	8005608 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 020e 	bic.w	r2, r2, #14
 80055ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	f003 021c 	and.w	r2, r3, #28
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f202 	lsl.w	r2, r1, r2
 80055de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005606:	bf00      	nop
 8005608:	bf00      	nop
}
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	f003 021c 	and.w	r2, r3, #28
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2101      	movs	r1, #1
 800562c:	fa01 f202 	lsl.w	r2, r1, r2
 8005630:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b10      	cmp	r3, #16
 8005640:	d108      	bne.n	8005654 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005652:	e007      	b.n	8005664 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	60da      	str	r2, [r3, #12]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800567e:	e17f      	b.n	8005980 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8171 	beq.w	800597a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d005      	beq.n	80056b0 <HAL_GPIO_Init+0x40>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d130      	bne.n	8005712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	2203      	movs	r2, #3
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4013      	ands	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056e6:	2201      	movs	r2, #1
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4013      	ands	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 0201 	and.w	r2, r3, #1
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d118      	bne.n	8005750 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005724:	2201      	movs	r2, #1
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	f003 0201 	and.w	r2, r3, #1
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b03      	cmp	r3, #3
 800575a:	d017      	beq.n	800578c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d123      	bne.n	80057e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	08da      	lsrs	r2, r3, #3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3208      	adds	r2, #8
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	08da      	lsrs	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3208      	adds	r2, #8
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	2203      	movs	r2, #3
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 0203 	and.w	r2, r3, #3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80ac 	beq.w	800597a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	4b5f      	ldr	r3, [pc, #380]	; (80059a0 <HAL_GPIO_Init+0x330>)
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	4a5e      	ldr	r2, [pc, #376]	; (80059a0 <HAL_GPIO_Init+0x330>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6613      	str	r3, [r2, #96]	; 0x60
 800582e:	4b5c      	ldr	r3, [pc, #368]	; (80059a0 <HAL_GPIO_Init+0x330>)
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800583a:	4a5a      	ldr	r2, [pc, #360]	; (80059a4 <HAL_GPIO_Init+0x334>)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	220f      	movs	r2, #15
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005864:	d025      	beq.n	80058b2 <HAL_GPIO_Init+0x242>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a4f      	ldr	r2, [pc, #316]	; (80059a8 <HAL_GPIO_Init+0x338>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01f      	beq.n	80058ae <HAL_GPIO_Init+0x23e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a4e      	ldr	r2, [pc, #312]	; (80059ac <HAL_GPIO_Init+0x33c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d019      	beq.n	80058aa <HAL_GPIO_Init+0x23a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a4d      	ldr	r2, [pc, #308]	; (80059b0 <HAL_GPIO_Init+0x340>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_GPIO_Init+0x236>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a4c      	ldr	r2, [pc, #304]	; (80059b4 <HAL_GPIO_Init+0x344>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00d      	beq.n	80058a2 <HAL_GPIO_Init+0x232>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a4b      	ldr	r2, [pc, #300]	; (80059b8 <HAL_GPIO_Init+0x348>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <HAL_GPIO_Init+0x22e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_GPIO_Init+0x34c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_GPIO_Init+0x22a>
 8005896:	2306      	movs	r3, #6
 8005898:	e00c      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 800589a:	2307      	movs	r3, #7
 800589c:	e00a      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 800589e:	2305      	movs	r3, #5
 80058a0:	e008      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 80058a2:	2304      	movs	r3, #4
 80058a4:	e006      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 80058a6:	2303      	movs	r3, #3
 80058a8:	e004      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e002      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_GPIO_Init+0x244>
 80058b2:	2300      	movs	r3, #0
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	f002 0203 	and.w	r2, r2, #3
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	4093      	lsls	r3, r2
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058c4:	4937      	ldr	r1, [pc, #220]	; (80059a4 <HAL_GPIO_Init+0x334>)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	3302      	adds	r3, #2
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_GPIO_Init+0x350>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	43db      	mvns	r3, r3
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058f6:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <HAL_GPIO_Init+0x350>)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_GPIO_Init+0x350>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	43db      	mvns	r3, r3
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4013      	ands	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_GPIO_Init+0x350>)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <HAL_GPIO_Init+0x350>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	43db      	mvns	r3, r3
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4013      	ands	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800594a:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_GPIO_Init+0x350>)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_GPIO_Init+0x350>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	43db      	mvns	r3, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005974:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <HAL_GPIO_Init+0x350>)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	3301      	adds	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f47f ae78 	bne.w	8005680 <HAL_GPIO_Init+0x10>
  }
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40010000 	.word	0x40010000
 80059a8:	48000400 	.word	0x48000400
 80059ac:	48000800 	.word	0x48000800
 80059b0:	48000c00 	.word	0x48000c00
 80059b4:	48001000 	.word	0x48001000
 80059b8:	48001400 	.word	0x48001400
 80059bc:	48001800 	.word	0x48001800
 80059c0:	40010400 	.word	0x40010400

080059c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	887b      	ldrh	r3, [r7, #2]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
 80059e0:	e001      	b.n	80059e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	807b      	strh	r3, [r7, #2]
 8005a00:	4613      	mov	r3, r2
 8005a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a10:	e002      	b.n	8005a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc f920 	bl	8001c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40010400 	.word	0x40010400

08005a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40007000 	.word	0x40007000

08005a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7e:	d130      	bne.n	8005ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8c:	d038      	beq.n	8005b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a96:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2232      	movs	r2, #50	; 0x32
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0c9b      	lsrs	r3, r3, #18
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab4:	e002      	b.n	8005abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac8:	d102      	bne.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f2      	bne.n	8005ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d110      	bne.n	8005b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00f      	b.n	8005b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aee:	d007      	beq.n	8005b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40007000 	.word	0x40007000
 8005b14:	20000000 	.word	0x20000000
 8005b18:	431bde83 	.word	0x431bde83

08005b1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e3ca      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2e:	4b97      	ldr	r3, [pc, #604]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b38:	4b94      	ldr	r3, [pc, #592]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80e4 	beq.w	8005d18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d007      	beq.n	8005b66 <HAL_RCC_OscConfig+0x4a>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b0c      	cmp	r3, #12
 8005b5a:	f040 808b 	bne.w	8005c74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 8087 	bne.w	8005c74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b66:	4b89      	ldr	r3, [pc, #548]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x62>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e3a2      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	4b82      	ldr	r3, [pc, #520]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <HAL_RCC_OscConfig+0x7c>
 8005b8e:	4b7f      	ldr	r3, [pc, #508]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b96:	e005      	b.n	8005ba4 <HAL_RCC_OscConfig+0x88>
 8005b98:	4b7c      	ldr	r3, [pc, #496]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d223      	bcs.n	8005bf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fd55 	bl	800665c <RCC_SetFlashLatencyFromMSIRange>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e383      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bbc:	4b73      	ldr	r3, [pc, #460]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a72      	ldr	r2, [pc, #456]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	4b70      	ldr	r3, [pc, #448]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	496d      	ldr	r1, [pc, #436]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bda:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	4968      	ldr	r1, [pc, #416]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]
 8005bee:	e025      	b.n	8005c3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bf0:	4b66      	ldr	r3, [pc, #408]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a65      	ldr	r2, [pc, #404]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bf6:	f043 0308 	orr.w	r3, r3, #8
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4b63      	ldr	r3, [pc, #396]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	4960      	ldr	r1, [pc, #384]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	495b      	ldr	r1, [pc, #364]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fd15 	bl	800665c <RCC_SetFlashLatencyFromMSIRange>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e343      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c3c:	f000 fc4a 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b52      	ldr	r3, [pc, #328]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	4950      	ldr	r1, [pc, #320]	; (8005d90 <HAL_RCC_OscConfig+0x274>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
 8005c58:	4a4e      	ldr	r2, [pc, #312]	; (8005d94 <HAL_RCC_OscConfig+0x278>)
 8005c5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c5c:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <HAL_RCC_OscConfig+0x27c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fd fe1f 	bl	80038a4 <HAL_InitTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d052      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	e327      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d032      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c7c:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c88:	f7fd fe5c 	bl	8003944 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c90:	f7fd fe58 	bl	8003944 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e310      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ca2:	4b3a      	ldr	r3, [pc, #232]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a36      	ldr	r2, [pc, #216]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	4931      	ldr	r1, [pc, #196]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	492c      	ldr	r1, [pc, #176]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]
 8005ce0:	e01a      	b.n	8005d18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cee:	f7fd fe29 	bl	8003944 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cf6:	f7fd fe25 	bl	8003944 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e2dd      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d08:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f0      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x1da>
 8005d14:	e000      	b.n	8005d18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d074      	beq.n	8005e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d005      	beq.n	8005d36 <HAL_RCC_OscConfig+0x21a>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d10e      	bne.n	8005d4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d10b      	bne.n	8005d4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d064      	beq.n	8005e0c <HAL_RCC_OscConfig+0x2f0>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d160      	bne.n	8005e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e2ba      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d56:	d106      	bne.n	8005d66 <HAL_RCC_OscConfig+0x24a>
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	e026      	b.n	8005db4 <HAL_RCC_OscConfig+0x298>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d6e:	d115      	bne.n	8005d9c <HAL_RCC_OscConfig+0x280>
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a02      	ldr	r2, [pc, #8]	; (8005d8c <HAL_RCC_OscConfig+0x270>)
 8005d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e014      	b.n	8005db4 <HAL_RCC_OscConfig+0x298>
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	0800d91c 	.word	0x0800d91c
 8005d94:	20000000 	.word	0x20000000
 8005d98:	20000004 	.word	0x20000004
 8005d9c:	4ba0      	ldr	r3, [pc, #640]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a9f      	ldr	r2, [pc, #636]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4b9d      	ldr	r3, [pc, #628]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a9c      	ldr	r2, [pc, #624]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fd fdc2 	bl	8003944 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7fd fdbe 	bl	8003944 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e276      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd6:	4b92      	ldr	r3, [pc, #584]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x2a8>
 8005de2:	e014      	b.n	8005e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fd fdae 	bl	8003944 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dec:	f7fd fdaa 	bl	8003944 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b64      	cmp	r3, #100	; 0x64
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e262      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dfe:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x2d0>
 8005e0a:	e000      	b.n	8005e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d060      	beq.n	8005edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d005      	beq.n	8005e2c <HAL_RCC_OscConfig+0x310>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d119      	bne.n	8005e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d116      	bne.n	8005e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e2c:	4b7c      	ldr	r3, [pc, #496]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_OscConfig+0x328>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e23f      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e44:	4b76      	ldr	r3, [pc, #472]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	4973      	ldr	r1, [pc, #460]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e58:	e040      	b.n	8005edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d023      	beq.n	8005eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6e      	ldr	r2, [pc, #440]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6e:	f7fd fd69 	bl	8003944 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e76:	f7fd fd65 	bl	8003944 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e21d      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e88:	4b65      	ldr	r3, [pc, #404]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e94:	4b62      	ldr	r3, [pc, #392]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	061b      	lsls	r3, r3, #24
 8005ea2:	495f      	ldr	r1, [pc, #380]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
 8005ea8:	e018      	b.n	8005edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eaa:	4b5d      	ldr	r3, [pc, #372]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5c      	ldr	r2, [pc, #368]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb6:	f7fd fd45 	bl	8003944 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ebe:	f7fd fd41 	bl	8003944 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e1f9      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ed0:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f0      	bne.n	8005ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03c      	beq.n	8005f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01c      	beq.n	8005f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef6:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fd fd20 	bl	8003944 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fd fd1c 	bl	8003944 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e1d4      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f1a:	4b41      	ldr	r3, [pc, #260]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0ef      	beq.n	8005f08 <HAL_RCC_OscConfig+0x3ec>
 8005f28:	e01b      	b.n	8005f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f30:	4a3b      	ldr	r2, [pc, #236]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3a:	f7fd fd03 	bl	8003944 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f42:	f7fd fcff 	bl	8003944 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e1b7      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ef      	bne.n	8005f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80a6 	beq.w	80060bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f80:	4b27      	ldr	r3, [pc, #156]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f8c:	4b24      	ldr	r3, [pc, #144]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <HAL_RCC_OscConfig+0x508>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d118      	bne.n	8005fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <HAL_RCC_OscConfig+0x508>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <HAL_RCC_OscConfig+0x508>)
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb4:	f7fd fcc6 	bl	8003944 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbc:	f7fd fcc2 	bl	8003944 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e17a      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <HAL_RCC_OscConfig+0x508>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d108      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x4d8>
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ff2:	e029      	b.n	8006048 <HAL_RCC_OscConfig+0x52c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b05      	cmp	r3, #5
 8005ffa:	d115      	bne.n	8006028 <HAL_RCC_OscConfig+0x50c>
 8005ffc:	4b08      	ldr	r3, [pc, #32]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	4a07      	ldr	r2, [pc, #28]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8006004:	f043 0304 	orr.w	r3, r3, #4
 8006008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a03      	ldr	r2, [pc, #12]	; (8006020 <HAL_RCC_OscConfig+0x504>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800601c:	e014      	b.n	8006048 <HAL_RCC_OscConfig+0x52c>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	40007000 	.word	0x40007000
 8006028:	4b9c      	ldr	r3, [pc, #624]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	4a9b      	ldr	r2, [pc, #620]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006038:	4b98      	ldr	r3, [pc, #608]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	4a97      	ldr	r2, [pc, #604]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d016      	beq.n	800607e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fd fc78 	bl	8003944 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006056:	e00a      	b.n	800606e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fd fc74 	bl	8003944 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e12a      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800606e:	4b8b      	ldr	r3, [pc, #556]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ed      	beq.n	8006058 <HAL_RCC_OscConfig+0x53c>
 800607c:	e015      	b.n	80060aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fd fc61 	bl	8003944 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006084:	e00a      	b.n	800609c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006086:	f7fd fc5d 	bl	8003944 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e113      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800609c:	4b7f      	ldr	r3, [pc, #508]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ed      	bne.n	8006086 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060aa:	7ffb      	ldrb	r3, [r7, #31]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b7a      	ldr	r3, [pc, #488]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	4a79      	ldr	r2, [pc, #484]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80fe 	beq.w	80062c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	f040 80d0 	bne.w	8006270 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060d0:	4b72      	ldr	r3, [pc, #456]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 0203 	and.w	r2, r3, #3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d130      	bne.n	8006146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	3b01      	subs	r3, #1
 80060f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d127      	bne.n	8006146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d11f      	bne.n	8006146 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006110:	2a07      	cmp	r2, #7
 8006112:	bf14      	ite	ne
 8006114:	2201      	movne	r2, #1
 8006116:	2200      	moveq	r2, #0
 8006118:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800611a:	4293      	cmp	r3, r2
 800611c:	d113      	bne.n	8006146 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	3b01      	subs	r3, #1
 800612c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d109      	bne.n	8006146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	3b01      	subs	r3, #1
 8006140:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006142:	429a      	cmp	r2, r3
 8006144:	d06e      	beq.n	8006224 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b0c      	cmp	r3, #12
 800614a:	d069      	beq.n	8006220 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800614c:	4b53      	ldr	r3, [pc, #332]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006158:	4b50      	ldr	r3, [pc, #320]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0ad      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006168:	4b4c      	ldr	r3, [pc, #304]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4b      	ldr	r2, [pc, #300]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006172:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006174:	f7fd fbe6 	bl	8003944 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fd fbe2 	bl	8003944 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e09a      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800618e:	4b43      	ldr	r3, [pc, #268]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800619a:	4b40      	ldr	r3, [pc, #256]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <HAL_RCC_OscConfig+0x784>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061aa:	3a01      	subs	r2, #1
 80061ac:	0112      	lsls	r2, r2, #4
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061b4:	0212      	lsls	r2, r2, #8
 80061b6:	4311      	orrs	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061bc:	0852      	lsrs	r2, r2, #1
 80061be:	3a01      	subs	r2, #1
 80061c0:	0552      	lsls	r2, r2, #21
 80061c2:	4311      	orrs	r1, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061c8:	0852      	lsrs	r2, r2, #1
 80061ca:	3a01      	subs	r2, #1
 80061cc:	0652      	lsls	r2, r2, #25
 80061ce:	4311      	orrs	r1, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061d4:	0912      	lsrs	r2, r2, #4
 80061d6:	0452      	lsls	r2, r2, #17
 80061d8:	430a      	orrs	r2, r1
 80061da:	4930      	ldr	r1, [pc, #192]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061e0:	4b2e      	ldr	r3, [pc, #184]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2d      	ldr	r2, [pc, #180]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80061e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a2a      	ldr	r2, [pc, #168]	; (800629c <HAL_RCC_OscConfig+0x780>)
 80061f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061f8:	f7fd fba4 	bl	8003944 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006200:	f7fd fba0 	bl	8003944 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e058      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800621e:	e050      	b.n	80062c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e04f      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d148      	bne.n	80062c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a19      	ldr	r2, [pc, #100]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800623a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800623c:	4b17      	ldr	r3, [pc, #92]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4a16      	ldr	r2, [pc, #88]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006246:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006248:	f7fd fb7c 	bl	8003944 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd fb78 	bl	8003944 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e030      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x734>
 800626e:	e028      	b.n	80062c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d023      	beq.n	80062be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <HAL_RCC_OscConfig+0x780>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <HAL_RCC_OscConfig+0x780>)
 800627c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fd fb5f 	bl	8003944 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006288:	e00c      	b.n	80062a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628a:	f7fd fb5b 	bl	8003944 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d905      	bls.n	80062a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e013      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
 800629c:	40021000 	.word	0x40021000
 80062a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a4:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_RCC_OscConfig+0x7b0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ec      	bne.n	800628a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_OscConfig+0x7b0>)
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	4905      	ldr	r1, [pc, #20]	; (80062cc <HAL_RCC_OscConfig+0x7b0>)
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCC_OscConfig+0x7b4>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60cb      	str	r3, [r1, #12]
 80062bc:	e001      	b.n	80062c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40021000 	.word	0x40021000
 80062d0:	feeefffc 	.word	0xfeeefffc

080062d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0e7      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e8:	4b75      	ldr	r3, [pc, #468]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d910      	bls.n	8006318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f6:	4b72      	ldr	r3, [pc, #456]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 0207 	bic.w	r2, r3, #7
 80062fe:	4970      	ldr	r1, [pc, #448]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006306:	4b6e      	ldr	r3, [pc, #440]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e0cf      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006330:	429a      	cmp	r2, r3
 8006332:	d908      	bls.n	8006346 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b63      	ldr	r3, [pc, #396]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4960      	ldr	r1, [pc, #384]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d04c      	beq.n	80063ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800635a:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d121      	bne.n	80063aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0a6      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006372:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d115      	bne.n	80063aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e09a      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800638a:	4b4e      	ldr	r3, [pc, #312]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e08e      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800639a:	4b4a      	ldr	r3, [pc, #296]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e086      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063aa:	4b46      	ldr	r3, [pc, #280]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0203 	bic.w	r2, r3, #3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4943      	ldr	r1, [pc, #268]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063bc:	f7fd fac2 	bl	8003944 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	e00a      	b.n	80063da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c4:	f7fd fabe 	bl	8003944 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e06e      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 020c 	and.w	r2, r3, #12
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d1eb      	bne.n	80063c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006404:	429a      	cmp	r2, r3
 8006406:	d208      	bcs.n	800641a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006408:	4b2e      	ldr	r3, [pc, #184]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	492b      	ldr	r1, [pc, #172]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641a:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d210      	bcs.n	800644a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 0207 	bic.w	r2, r3, #7
 8006430:	4923      	ldr	r1, [pc, #140]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <HAL_RCC_ClockConfig+0x1ec>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e036      	b.n	80064b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d008      	beq.n	8006468 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4918      	ldr	r1, [pc, #96]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006464:	4313      	orrs	r3, r2
 8006466:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d009      	beq.n	8006488 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4910      	ldr	r1, [pc, #64]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006488:	f000 f824 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 800648c:	4602      	mov	r2, r0
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	490b      	ldr	r1, [pc, #44]	; (80064c8 <HAL_RCC_ClockConfig+0x1f4>)
 800649a:	5ccb      	ldrb	r3, [r1, r3]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
 80064a4:	4a09      	ldr	r2, [pc, #36]	; (80064cc <HAL_RCC_ClockConfig+0x1f8>)
 80064a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_RCC_ClockConfig+0x1fc>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fd f9f9 	bl	80038a4 <HAL_InitTick>
 80064b2:	4603      	mov	r3, r0
 80064b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40022000 	.word	0x40022000
 80064c4:	40021000 	.word	0x40021000
 80064c8:	0800d91c 	.word	0x0800d91c
 80064cc:	20000000 	.word	0x20000000
 80064d0:	20000004 	.word	0x20000004

080064d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064e2:	4b3e      	ldr	r3, [pc, #248]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064ec:	4b3b      	ldr	r3, [pc, #236]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x34>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0c      	cmp	r3, #12
 8006500:	d121      	bne.n	8006546 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d11e      	bne.n	8006546 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006508:	4b34      	ldr	r3, [pc, #208]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d107      	bne.n	8006524 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006514:	4b31      	ldr	r3, [pc, #196]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e005      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006524:	4b2d      	ldr	r3, [pc, #180]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	091b      	lsrs	r3, r3, #4
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006538:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10d      	bne.n	800655c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006544:	e00a      	b.n	800655c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b04      	cmp	r3, #4
 800654a:	d102      	bne.n	8006552 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	e004      	b.n	800655c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d101      	bne.n	800655c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006558:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800655a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b0c      	cmp	r3, #12
 8006560:	d134      	bne.n	80065cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d003      	beq.n	800657a <HAL_RCC_GetSysClockFreq+0xa6>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d003      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0xac>
 8006578:	e005      	b.n	8006586 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800657a:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800657c:	617b      	str	r3, [r7, #20]
      break;
 800657e:	e005      	b.n	800658c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006582:	617b      	str	r3, [r7, #20]
      break;
 8006584:	e002      	b.n	800658c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	617b      	str	r3, [r7, #20]
      break;
 800658a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800658c:	4b13      	ldr	r3, [pc, #76]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	3301      	adds	r3, #1
 8006598:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	fb03 f202 	mul.w	r2, r3, r2
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <HAL_RCC_GetSysClockFreq+0x108>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	0e5b      	lsrs	r3, r3, #25
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	3301      	adds	r3, #1
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065cc:	69bb      	ldr	r3, [r7, #24]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3724      	adds	r7, #36	; 0x24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40021000 	.word	0x40021000
 80065e0:	0800d934 	.word	0x0800d934
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	007a1200 	.word	0x007a1200

080065ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000000 	.word	0x20000000

08006604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006608:	f7ff fff0 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4904      	ldr	r1, [pc, #16]	; (800662c <HAL_RCC_GetPCLK1Freq+0x28>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40021000 	.word	0x40021000
 800662c:	0800d92c 	.word	0x0800d92c

08006630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006634:	f7ff ffda 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0adb      	lsrs	r3, r3, #11
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4904      	ldr	r1, [pc, #16]	; (8006658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006650:	4618      	mov	r0, r3
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40021000 	.word	0x40021000
 8006658:	0800d92c 	.word	0x0800d92c

0800665c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006668:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006674:	f7ff f9ee 	bl	8005a54 <HAL_PWREx_GetVoltageRange>
 8006678:	6178      	str	r0, [r7, #20]
 800667a:	e014      	b.n	80066a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800667c:	4b25      	ldr	r3, [pc, #148]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006686:	6593      	str	r3, [r2, #88]	; 0x58
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006694:	f7ff f9de 	bl	8005a54 <HAL_PWREx_GetVoltageRange>
 8006698:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800669a:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ac:	d10b      	bne.n	80066c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d919      	bls.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2ba0      	cmp	r3, #160	; 0xa0
 80066b8:	d902      	bls.n	80066c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066ba:	2302      	movs	r3, #2
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	e013      	b.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066c0:	2301      	movs	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	e010      	b.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d902      	bls.n	80066d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066cc:	2303      	movs	r3, #3
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e00a      	b.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d102      	bne.n	80066de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066d8:	2302      	movs	r3, #2
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	e004      	b.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b70      	cmp	r3, #112	; 0x70
 80066e2:	d101      	bne.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066e4:	2301      	movs	r3, #1
 80066e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 0207 	bic.w	r2, r3, #7
 80066f0:	4909      	ldr	r1, [pc, #36]	; (8006718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	429a      	cmp	r2, r3
 8006704:	d001      	beq.n	800670a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40021000 	.word	0x40021000
 8006718:	40022000 	.word	0x40022000

0800671c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006724:	2300      	movs	r3, #0
 8006726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006728:	2300      	movs	r3, #0
 800672a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006734:	2b00      	cmp	r3, #0
 8006736:	d041      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006740:	d02a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006742:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006746:	d824      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800674c:	d008      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800674e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006752:	d81e      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800675c:	d010      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800675e:	e018      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006760:	4b86      	ldr	r3, [pc, #536]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a85      	ldr	r2, [pc, #532]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800676c:	e015      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fabb 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800677e:	e00c      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3320      	adds	r3, #32
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fba6 	bl	8006ed8 <RCCEx_PLLSAI2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	74fb      	strb	r3, [r7, #19]
      break;
 8006796:	e000      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679a:	7cfb      	ldrb	r3, [r7, #19]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067a0:	4b76      	ldr	r3, [pc, #472]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ae:	4973      	ldr	r1, [pc, #460]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80067b6:	e001      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d041      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d0:	d02a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d6:	d824      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067dc:	d008      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e2:	d81e      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80067e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ec:	d010      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067ee:	e018      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067f0:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4a61      	ldr	r2, [pc, #388]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067fc:	e015      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fa73 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800680e:	e00c      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3320      	adds	r3, #32
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fb5e 	bl	8006ed8 <RCCEx_PLLSAI2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	74fb      	strb	r3, [r7, #19]
      break;
 8006826:	e000      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800682a:	7cfb      	ldrb	r3, [r7, #19]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10b      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006830:	4b52      	ldr	r3, [pc, #328]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683e:	494f      	ldr	r1, [pc, #316]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006846:	e001      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80a0 	beq.w	800699a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800685e:	4b47      	ldr	r3, [pc, #284]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006874:	4b41      	ldr	r3, [pc, #260]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006878:	4a40      	ldr	r2, [pc, #256]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800687a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687e:	6593      	str	r3, [r2, #88]	; 0x58
 8006880:	4b3e      	ldr	r3, [pc, #248]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688c:	2301      	movs	r3, #1
 800688e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006890:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a3a      	ldr	r2, [pc, #232]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800689c:	f7fd f852 	bl	8003944 <HAL_GetTick>
 80068a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068a2:	e009      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a4:	f7fd f84e 	bl	8003944 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d902      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	74fb      	strb	r3, [r7, #19]
        break;
 80068b6:	e005      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0ef      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80068c4:	7cfb      	ldrb	r3, [r7, #19]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d15c      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068ca:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01f      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d019      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068f4:	4b21      	ldr	r3, [pc, #132]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	4a20      	ldr	r2, [pc, #128]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800690c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006914:	4a19      	ldr	r2, [pc, #100]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fd f80d 	bl	8003944 <HAL_GetTick>
 800692a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692c:	e00b      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fd f809 	bl	8003944 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	f241 3288 	movw	r2, #5000	; 0x1388
 800693c:	4293      	cmp	r3, r2
 800693e:	d902      	bls.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	74fb      	strb	r3, [r7, #19]
            break;
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ec      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	4904      	ldr	r1, [pc, #16]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006972:	e009      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	74bb      	strb	r3, [r7, #18]
 8006978:	e006      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	7cfb      	ldrb	r3, [r7, #19]
 8006986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006988:	7c7b      	ldrb	r3, [r7, #17]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d105      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800698e:	4b9e      	ldr	r3, [pc, #632]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	4a9d      	ldr	r2, [pc, #628]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006998:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069a6:	4b98      	ldr	r3, [pc, #608]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f023 0203 	bic.w	r2, r3, #3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	4994      	ldr	r1, [pc, #592]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069c8:	4b8f      	ldr	r3, [pc, #572]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ce:	f023 020c 	bic.w	r2, r3, #12
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	498c      	ldr	r1, [pc, #560]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069ea:	4b87      	ldr	r3, [pc, #540]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	4983      	ldr	r1, [pc, #524]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a0c:	4b7e      	ldr	r3, [pc, #504]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	497b      	ldr	r1, [pc, #492]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a2e:	4b76      	ldr	r3, [pc, #472]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	4972      	ldr	r1, [pc, #456]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a50:	4b6d      	ldr	r3, [pc, #436]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	496a      	ldr	r1, [pc, #424]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a72:	4b65      	ldr	r3, [pc, #404]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	4961      	ldr	r1, [pc, #388]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a94:	4b5c      	ldr	r3, [pc, #368]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa2:	4959      	ldr	r1, [pc, #356]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ab6:	4b54      	ldr	r3, [pc, #336]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	4950      	ldr	r1, [pc, #320]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ad8:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ade:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	4948      	ldr	r1, [pc, #288]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	493f      	ldr	r1, [pc, #252]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d028      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b1c:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2a:	4937      	ldr	r1, [pc, #220]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b3c:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a31      	ldr	r2, [pc, #196]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b46:	60d3      	str	r3, [r2, #12]
 8006b48:	e011      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b52:	d10c      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f8c8 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b64:	7cfb      	ldrb	r3, [r7, #19]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d028      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b7a:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	491f      	ldr	r1, [pc, #124]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ba4:	60d3      	str	r3, [r2, #12]
 8006ba6:	e011      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bb0:	d10c      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f899 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bc2:	7cfb      	ldrb	r3, [r7, #19]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006bc8:	7cfb      	ldrb	r3, [r7, #19]
 8006bca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02b      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be6:	4908      	ldr	r1, [pc, #32]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf6:	d109      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bf8:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a02      	ldr	r2, [pc, #8]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c02:	60d3      	str	r3, [r2, #12]
 8006c04:	e014      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 f867 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c26:	7cfb      	ldrb	r3, [r7, #19]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c2c:	7cfb      	ldrb	r3, [r7, #19]
 8006c2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d02f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4a:	4928      	ldr	r1, [pc, #160]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5a:	d10d      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	2102      	movs	r1, #2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 f844 	bl	8006cf0 <RCCEx_PLLSAI1_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d014      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	74bb      	strb	r3, [r7, #18]
 8006c76:	e011      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3320      	adds	r3, #32
 8006c86:	2102      	movs	r1, #2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f925 	bl	8006ed8 <RCCEx_PLLSAI2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c98:	7cfb      	ldrb	r3, [r7, #19]
 8006c9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb6:	490d      	ldr	r1, [pc, #52]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cca:	4b08      	ldr	r3, [pc, #32]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cda:	4904      	ldr	r1, [pc, #16]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ce2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40021000 	.word	0x40021000

08006cf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cfe:	4b75      	ldr	r3, [pc, #468]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d018      	beq.n	8006d3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d0a:	4b72      	ldr	r3, [pc, #456]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0203 	and.w	r2, r3, #3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d10d      	bne.n	8006d36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d22:	4b6c      	ldr	r3, [pc, #432]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
       ||
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d047      	beq.n	8006dc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	e044      	b.n	8006dc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d018      	beq.n	8006d76 <RCCEx_PLLSAI1_Config+0x86>
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d825      	bhi.n	8006d94 <RCCEx_PLLSAI1_Config+0xa4>
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d002      	beq.n	8006d52 <RCCEx_PLLSAI1_Config+0x62>
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d009      	beq.n	8006d64 <RCCEx_PLLSAI1_Config+0x74>
 8006d50:	e020      	b.n	8006d94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d52:	4b60      	ldr	r3, [pc, #384]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d11d      	bne.n	8006d9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d62:	e01a      	b.n	8006d9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d64:	4b5b      	ldr	r3, [pc, #364]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d116      	bne.n	8006d9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d74:	e013      	b.n	8006d9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d76:	4b57      	ldr	r3, [pc, #348]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d82:	4b54      	ldr	r3, [pc, #336]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d92:	e006      	b.n	8006da2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
      break;
 8006d98:	e004      	b.n	8006da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006daa:	4b4a      	ldr	r3, [pc, #296]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6819      	ldr	r1, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	4944      	ldr	r1, [pc, #272]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d17d      	bne.n	8006ec8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006dcc:	4b41      	ldr	r3, [pc, #260]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a40      	ldr	r2, [pc, #256]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd8:	f7fc fdb4 	bl	8003944 <HAL_GetTick>
 8006ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dde:	e009      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006de0:	f7fc fdb0 	bl	8003944 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d902      	bls.n	8006df4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	73fb      	strb	r3, [r7, #15]
        break;
 8006df2:	e005      	b.n	8006e00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006df4:	4b37      	ldr	r3, [pc, #220]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ef      	bne.n	8006de0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d160      	bne.n	8006ec8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d111      	bne.n	8006e30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e0c:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6892      	ldr	r2, [r2, #8]
 8006e1c:	0211      	lsls	r1, r2, #8
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68d2      	ldr	r2, [r2, #12]
 8006e22:	0912      	lsrs	r2, r2, #4
 8006e24:	0452      	lsls	r2, r2, #17
 8006e26:	430a      	orrs	r2, r1
 8006e28:	492a      	ldr	r1, [pc, #168]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	610b      	str	r3, [r1, #16]
 8006e2e:	e027      	b.n	8006e80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d112      	bne.n	8006e5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6892      	ldr	r2, [r2, #8]
 8006e46:	0211      	lsls	r1, r2, #8
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6912      	ldr	r2, [r2, #16]
 8006e4c:	0852      	lsrs	r2, r2, #1
 8006e4e:	3a01      	subs	r2, #1
 8006e50:	0552      	lsls	r2, r2, #21
 8006e52:	430a      	orrs	r2, r1
 8006e54:	491f      	ldr	r1, [pc, #124]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	610b      	str	r3, [r1, #16]
 8006e5a:	e011      	b.n	8006e80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e5c:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6892      	ldr	r2, [r2, #8]
 8006e6c:	0211      	lsls	r1, r2, #8
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6952      	ldr	r2, [r2, #20]
 8006e72:	0852      	lsrs	r2, r2, #1
 8006e74:	3a01      	subs	r2, #1
 8006e76:	0652      	lsls	r2, r2, #25
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	4916      	ldr	r1, [pc, #88]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e80:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8c:	f7fc fd5a 	bl	8003944 <HAL_GetTick>
 8006e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e92:	e009      	b.n	8006ea8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e94:	f7fc fd56 	bl	8003944 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d902      	bls.n	8006ea8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8006ea6:	e005      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ef      	beq.n	8006e94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	4904      	ldr	r1, [pc, #16]	; (8006ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ee6:	4b6a      	ldr	r3, [pc, #424]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006ef2:	4b67      	ldr	r3, [pc, #412]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0203 	and.w	r2, r3, #3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d10d      	bne.n	8006f1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
       ||
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f0a:	4b61      	ldr	r3, [pc, #388]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	091b      	lsrs	r3, r3, #4
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
       ||
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d047      	beq.n	8006fae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e044      	b.n	8006fae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d018      	beq.n	8006f5e <RCCEx_PLLSAI2_Config+0x86>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d825      	bhi.n	8006f7c <RCCEx_PLLSAI2_Config+0xa4>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d002      	beq.n	8006f3a <RCCEx_PLLSAI2_Config+0x62>
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d009      	beq.n	8006f4c <RCCEx_PLLSAI2_Config+0x74>
 8006f38:	e020      	b.n	8006f7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f3a:	4b55      	ldr	r3, [pc, #340]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d11d      	bne.n	8006f82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4a:	e01a      	b.n	8006f82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f4c:	4b50      	ldr	r3, [pc, #320]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d116      	bne.n	8006f86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f5c:	e013      	b.n	8006f86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f5e:	4b4c      	ldr	r3, [pc, #304]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f6a:	4b49      	ldr	r3, [pc, #292]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f7a:	e006      	b.n	8006f8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e004      	b.n	8006f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f82:	bf00      	nop
 8006f84:	e002      	b.n	8006f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10d      	bne.n	8006fae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f92:	4b3f      	ldr	r3, [pc, #252]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6819      	ldr	r1, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	4939      	ldr	r1, [pc, #228]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d167      	bne.n	8007084 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fb4:	4b36      	ldr	r3, [pc, #216]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a35      	ldr	r2, [pc, #212]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc0:	f7fc fcc0 	bl	8003944 <HAL_GetTick>
 8006fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fc6:	e009      	b.n	8006fdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fc8:	f7fc fcbc 	bl	8003944 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d902      	bls.n	8006fdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006fda:	e005      	b.n	8006fe8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fdc:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ef      	bne.n	8006fc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d14a      	bne.n	8007084 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d111      	bne.n	8007018 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ff4:	4b26      	ldr	r3, [pc, #152]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6892      	ldr	r2, [r2, #8]
 8007004:	0211      	lsls	r1, r2, #8
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	68d2      	ldr	r2, [r2, #12]
 800700a:	0912      	lsrs	r2, r2, #4
 800700c:	0452      	lsls	r2, r2, #17
 800700e:	430a      	orrs	r2, r1
 8007010:	491f      	ldr	r1, [pc, #124]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007012:	4313      	orrs	r3, r2
 8007014:	614b      	str	r3, [r1, #20]
 8007016:	e011      	b.n	800703c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007018:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007020:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	0211      	lsls	r1, r2, #8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6912      	ldr	r2, [r2, #16]
 800702e:	0852      	lsrs	r2, r2, #1
 8007030:	3a01      	subs	r2, #1
 8007032:	0652      	lsls	r2, r2, #25
 8007034:	430a      	orrs	r2, r1
 8007036:	4916      	ldr	r1, [pc, #88]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007038:	4313      	orrs	r3, r2
 800703a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800703c:	4b14      	ldr	r3, [pc, #80]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a13      	ldr	r2, [pc, #76]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007048:	f7fc fc7c 	bl	8003944 <HAL_GetTick>
 800704c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800704e:	e009      	b.n	8007064 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007050:	f7fc fc78 	bl	8003944 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d902      	bls.n	8007064 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
          break;
 8007062:	e005      	b.n	8007070 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0ef      	beq.n	8007050 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007078:	695a      	ldr	r2, [r3, #20]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	4904      	ldr	r1, [pc, #16]	; (8007090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007080:	4313      	orrs	r3, r2
 8007082:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000

08007094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e049      	b.n	800713a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fb fddc 	bl	8002c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f000 fa50 	bl	8007578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <HAL_TIM_PWM_Start+0x24>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e03c      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b04      	cmp	r3, #4
 800716c:	d109      	bne.n	8007182 <HAL_TIM_PWM_Start+0x3e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	e02f      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d109      	bne.n	800719c <HAL_TIM_PWM_Start+0x58>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	bf14      	ite	ne
 8007194:	2301      	movne	r3, #1
 8007196:	2300      	moveq	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e022      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d109      	bne.n	80071b6 <HAL_TIM_PWM_Start+0x72>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	e015      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d109      	bne.n	80071d0 <HAL_TIM_PWM_Start+0x8c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	bf14      	ite	ne
 80071c8:	2301      	movne	r3, #1
 80071ca:	2300      	moveq	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e008      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e09c      	b.n	8007324 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Start+0xb6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f8:	e023      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Start+0xc6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	e01b      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d104      	bne.n	800721a <HAL_TIM_PWM_Start+0xd6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007218:	e013      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d104      	bne.n	800722a <HAL_TIM_PWM_Start+0xe6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007228:	e00b      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b10      	cmp	r3, #16
 800722e:	d104      	bne.n	800723a <HAL_TIM_PWM_Start+0xf6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007238:	e003      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2201      	movs	r2, #1
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fd04 	bl	8007c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a35      	ldr	r2, [pc, #212]	; (800732c <HAL_TIM_PWM_Start+0x1e8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a34      	ldr	r2, [pc, #208]	; (8007330 <HAL_TIM_PWM_Start+0x1ec>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a32      	ldr	r2, [pc, #200]	; (8007334 <HAL_TIM_PWM_Start+0x1f0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a31      	ldr	r2, [pc, #196]	; (8007338 <HAL_TIM_PWM_Start+0x1f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2f      	ldr	r2, [pc, #188]	; (800733c <HAL_TIM_PWM_Start+0x1f8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <HAL_TIM_PWM_Start+0x142>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_TIM_PWM_Start+0x144>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800729a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a22      	ldr	r2, [pc, #136]	; (800732c <HAL_TIM_PWM_Start+0x1e8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ae:	d018      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a22      	ldr	r2, [pc, #136]	; (8007340 <HAL_TIM_PWM_Start+0x1fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a21      	ldr	r2, [pc, #132]	; (8007344 <HAL_TIM_PWM_Start+0x200>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <HAL_TIM_PWM_Start+0x204>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a17      	ldr	r2, [pc, #92]	; (8007330 <HAL_TIM_PWM_Start+0x1ec>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a15      	ldr	r2, [pc, #84]	; (8007334 <HAL_TIM_PWM_Start+0x1f0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d115      	bne.n	800730e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	4b18      	ldr	r3, [pc, #96]	; (800734c <HAL_TIM_PWM_Start+0x208>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	d015      	beq.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fa:	d011      	beq.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730c:	e008      	b.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e000      	b.n	8007322 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400
 800733c:	40014800 	.word	0x40014800
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	00010007 	.word	0x00010007

08007350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800736a:	2302      	movs	r3, #2
 800736c:	e0ff      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b14      	cmp	r3, #20
 800737a:	f200 80f0 	bhi.w	800755e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073d9 	.word	0x080073d9
 8007388:	0800755f 	.word	0x0800755f
 800738c:	0800755f 	.word	0x0800755f
 8007390:	0800755f 	.word	0x0800755f
 8007394:	08007419 	.word	0x08007419
 8007398:	0800755f 	.word	0x0800755f
 800739c:	0800755f 	.word	0x0800755f
 80073a0:	0800755f 	.word	0x0800755f
 80073a4:	0800745b 	.word	0x0800745b
 80073a8:	0800755f 	.word	0x0800755f
 80073ac:	0800755f 	.word	0x0800755f
 80073b0:	0800755f 	.word	0x0800755f
 80073b4:	0800749b 	.word	0x0800749b
 80073b8:	0800755f 	.word	0x0800755f
 80073bc:	0800755f 	.word	0x0800755f
 80073c0:	0800755f 	.word	0x0800755f
 80073c4:	080074dd 	.word	0x080074dd
 80073c8:	0800755f 	.word	0x0800755f
 80073cc:	0800755f 	.word	0x0800755f
 80073d0:	0800755f 	.word	0x0800755f
 80073d4:	0800751d 	.word	0x0800751d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f964 	bl	80076ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0208 	orr.w	r2, r2, #8
 80073f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0204 	bic.w	r2, r2, #4
 8007402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6999      	ldr	r1, [r3, #24]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	619a      	str	r2, [r3, #24]
      break;
 8007416:	e0a5      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f9d4 	bl	80077cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6999      	ldr	r1, [r3, #24]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	021a      	lsls	r2, r3, #8
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	619a      	str	r2, [r3, #24]
      break;
 8007458:	e084      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fa3d 	bl	80078e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0208 	orr.w	r2, r2, #8
 8007474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0204 	bic.w	r2, r2, #4
 8007484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69d9      	ldr	r1, [r3, #28]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	61da      	str	r2, [r3, #28]
      break;
 8007498:	e064      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 faa5 	bl	80079f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69d9      	ldr	r1, [r3, #28]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	021a      	lsls	r2, r3, #8
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	61da      	str	r2, [r3, #28]
      break;
 80074da:	e043      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 faee 	bl	8007ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0208 	orr.w	r2, r2, #8
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800751a:	e023      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fb32 	bl	8007b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800755c:	e002      	b.n	8007564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
      break;
 8007562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop

08007578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a40      	ldr	r2, [pc, #256]	; (800768c <TIM_Base_SetConfig+0x114>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d00f      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a3d      	ldr	r2, [pc, #244]	; (8007690 <TIM_Base_SetConfig+0x118>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00b      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a3c      	ldr	r2, [pc, #240]	; (8007694 <TIM_Base_SetConfig+0x11c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a3b      	ldr	r2, [pc, #236]	; (8007698 <TIM_Base_SetConfig+0x120>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a3a      	ldr	r2, [pc, #232]	; (800769c <TIM_Base_SetConfig+0x124>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d108      	bne.n	80075ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2f      	ldr	r2, [pc, #188]	; (800768c <TIM_Base_SetConfig+0x114>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01f      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d01b      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <TIM_Base_SetConfig+0x118>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d017      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2b      	ldr	r2, [pc, #172]	; (8007694 <TIM_Base_SetConfig+0x11c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <TIM_Base_SetConfig+0x120>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a29      	ldr	r2, [pc, #164]	; (800769c <TIM_Base_SetConfig+0x124>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <TIM_Base_SetConfig+0x128>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a27      	ldr	r2, [pc, #156]	; (80076a4 <TIM_Base_SetConfig+0x12c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <TIM_Base_SetConfig+0x130>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d108      	bne.n	8007624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <TIM_Base_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a12      	ldr	r2, [pc, #72]	; (800769c <TIM_Base_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a11      	ldr	r2, [pc, #68]	; (80076a0 <TIM_Base_SetConfig+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a10      	ldr	r2, [pc, #64]	; (80076a4 <TIM_Base_SetConfig+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a0f      	ldr	r2, [pc, #60]	; (80076a8 <TIM_Base_SetConfig+0x130>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	615a      	str	r2, [r3, #20]
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40012c00 	.word	0x40012c00
 8007690:	40000400 	.word	0x40000400
 8007694:	40000800 	.word	0x40000800
 8007698:	40000c00 	.word	0x40000c00
 800769c:	40013400 	.word	0x40013400
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800

080076ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	f023 0201 	bic.w	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f023 0302 	bic.w	r3, r3, #2
 80076f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <TIM_OC1_SetConfig+0x10c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_OC1_SetConfig+0x80>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <TIM_OC1_SetConfig+0x110>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_OC1_SetConfig+0x80>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a2a      	ldr	r2, [pc, #168]	; (80077c0 <TIM_OC1_SetConfig+0x114>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_OC1_SetConfig+0x80>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <TIM_OC1_SetConfig+0x118>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC1_SetConfig+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <TIM_OC1_SetConfig+0x11c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10c      	bne.n	8007746 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0308 	bic.w	r3, r3, #8
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f023 0304 	bic.w	r3, r3, #4
 8007744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <TIM_OC1_SetConfig+0x10c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00f      	beq.n	800776e <TIM_OC1_SetConfig+0xc2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <TIM_OC1_SetConfig+0x110>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00b      	beq.n	800776e <TIM_OC1_SetConfig+0xc2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <TIM_OC1_SetConfig+0x114>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <TIM_OC1_SetConfig+0xc2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <TIM_OC1_SetConfig+0x118>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d003      	beq.n	800776e <TIM_OC1_SetConfig+0xc2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <TIM_OC1_SetConfig+0x11c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d111      	bne.n	8007792 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800777c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	621a      	str	r2, [r3, #32]
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400
 80077c8:	40014800 	.word	0x40014800

080077cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	f023 0210 	bic.w	r2, r3, #16
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0320 	bic.w	r3, r3, #32
 800781a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a28      	ldr	r2, [pc, #160]	; (80078cc <TIM_OC2_SetConfig+0x100>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC2_SetConfig+0x6c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <TIM_OC2_SetConfig+0x104>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d10d      	bne.n	8007854 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800783e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <TIM_OC2_SetConfig+0x100>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00f      	beq.n	800787c <TIM_OC2_SetConfig+0xb0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <TIM_OC2_SetConfig+0x104>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00b      	beq.n	800787c <TIM_OC2_SetConfig+0xb0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <TIM_OC2_SetConfig+0x108>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d007      	beq.n	800787c <TIM_OC2_SetConfig+0xb0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <TIM_OC2_SetConfig+0x10c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_OC2_SetConfig+0xb0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a19      	ldr	r2, [pc, #100]	; (80078dc <TIM_OC2_SetConfig+0x110>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d113      	bne.n	80078a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800788a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40013400 	.word	0x40013400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800792c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a27      	ldr	r2, [pc, #156]	; (80079dc <TIM_OC3_SetConfig+0xfc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_OC3_SetConfig+0x6a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <TIM_OC3_SetConfig+0x100>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d10d      	bne.n	8007966 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <TIM_OC3_SetConfig+0xfc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00f      	beq.n	800798e <TIM_OC3_SetConfig+0xae>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <TIM_OC3_SetConfig+0x100>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00b      	beq.n	800798e <TIM_OC3_SetConfig+0xae>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <TIM_OC3_SetConfig+0x104>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <TIM_OC3_SetConfig+0xae>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <TIM_OC3_SetConfig+0x108>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d003      	beq.n	800798e <TIM_OC3_SetConfig+0xae>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <TIM_OC3_SetConfig+0x10c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d113      	bne.n	80079b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40013400 	.word	0x40013400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <TIM_OC4_SetConfig+0xc0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00f      	beq.n	8007a74 <TIM_OC4_SetConfig+0x84>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <TIM_OC4_SetConfig+0xc4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00b      	beq.n	8007a74 <TIM_OC4_SetConfig+0x84>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	; (8007ab8 <TIM_OC4_SetConfig+0xc8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d007      	beq.n	8007a74 <TIM_OC4_SetConfig+0x84>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	; (8007abc <TIM_OC4_SetConfig+0xcc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC4_SetConfig+0x84>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <TIM_OC4_SetConfig+0xd0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d109      	bne.n	8007a88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	019b      	lsls	r3, r3, #6
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40014400 	.word	0x40014400
 8007ac0:	40014800 	.word	0x40014800

08007ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	041b      	lsls	r3, r3, #16
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <TIM_OC5_SetConfig+0xb4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <TIM_OC5_SetConfig+0x7a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a16      	ldr	r2, [pc, #88]	; (8007b7c <TIM_OC5_SetConfig+0xb8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_OC5_SetConfig+0x7a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <TIM_OC5_SetConfig+0xbc>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <TIM_OC5_SetConfig+0x7a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <TIM_OC5_SetConfig+0xc0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_OC5_SetConfig+0x7a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a13      	ldr	r2, [pc, #76]	; (8007b88 <TIM_OC5_SetConfig+0xc4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d109      	bne.n	8007b52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	621a      	str	r2, [r3, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40013400 	.word	0x40013400
 8007b80:	40014000 	.word	0x40014000
 8007b84:	40014400 	.word	0x40014400
 8007b88:	40014800 	.word	0x40014800

08007b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	051b      	lsls	r3, r3, #20
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <TIM_OC6_SetConfig+0xb8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00f      	beq.n	8007c08 <TIM_OC6_SetConfig+0x7c>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <TIM_OC6_SetConfig+0xbc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <TIM_OC6_SetConfig+0x7c>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a16      	ldr	r2, [pc, #88]	; (8007c4c <TIM_OC6_SetConfig+0xc0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d007      	beq.n	8007c08 <TIM_OC6_SetConfig+0x7c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <TIM_OC6_SetConfig+0xc4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC6_SetConfig+0x7c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a14      	ldr	r2, [pc, #80]	; (8007c54 <TIM_OC6_SetConfig+0xc8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d109      	bne.n	8007c1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	029b      	lsls	r3, r3, #10
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40013400 	.word	0x40013400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800

08007c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	401a      	ands	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1a      	ldr	r2, [r3, #32]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e068      	b.n	8007d8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a2e      	ldr	r2, [pc, #184]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d108      	bne.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01d      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2e:	d018      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1b      	ldr	r2, [pc, #108]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1a      	ldr	r2, [pc, #104]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00e      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a18      	ldr	r2, [pc, #96]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d10c      	bne.n	8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40013400 	.word	0x40013400
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40000800 	.word	0x40000800
 8007dac:	40000c00 	.word	0x40000c00
 8007db0:	40014000 	.word	0x40014000

08007db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e065      	b.n	8007e9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d115      	bne.n	8007e8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	051b      	lsls	r3, r3, #20
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40013400 	.word	0x40013400

08007eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e040      	b.n	8007f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fb f838 	bl	8002f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 feb6 	bl	8008c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fbfb 	bl	80086f8 <UART_SetConfig>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e01b      	b.n	8007f44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 ff35 	bl	8008dac <UART_CheckIdleState>
 8007f42:	4603      	mov	r3, r0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d178      	bne.n	8008056 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <HAL_UART_Transmit+0x24>
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e071      	b.n	8008058 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2221      	movs	r2, #33	; 0x21
 8007f80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f82:	f7fb fcdf 	bl	8003944 <HAL_GetTick>
 8007f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	88fa      	ldrh	r2, [r7, #6]
 8007f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa0:	d108      	bne.n	8007fb4 <HAL_UART_Transmit+0x68>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	e003      	b.n	8007fbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fbc:	e030      	b.n	8008020 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2180      	movs	r1, #128	; 0x80
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 ff97 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e03c      	b.n	8008058 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	881a      	ldrh	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	e008      	b.n	800800e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	b292      	uxth	r2, r2
 8008006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1c8      	bne.n	8007fbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2200      	movs	r2, #0
 8008034:	2140      	movs	r1, #64	; 0x40
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 ff60 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e005      	b.n	8008058 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008074:	2b20      	cmp	r3, #32
 8008076:	d137      	bne.n	80080e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_UART_Receive_IT+0x24>
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e030      	b.n	80080ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <HAL_UART_Receive_IT+0x94>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d01f      	beq.n	80080d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d018      	beq.n	80080d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	613b      	str	r3, [r7, #16]
   return(result);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	69f9      	ldr	r1, [r7, #28]
 80080ca:	6a3a      	ldr	r2, [r7, #32]
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e6      	bne.n	80080a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	461a      	mov	r2, r3
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 ff74 	bl	8008fcc <UART_Start_Receive_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	e000      	b.n	80080ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3728      	adds	r7, #40	; 0x28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40008000 	.word	0x40008000

080080f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b0ba      	sub	sp, #232	; 0xe8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800811e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008122:	f640 030f 	movw	r3, #2063	; 0x80f
 8008126:	4013      	ands	r3, r2
 8008128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800812c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d115      	bne.n	8008160 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 82ae 	beq.w	80086b2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
      }
      return;
 800815e:	e2a8      	b.n	80086b2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8117 	beq.w	8008398 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800816a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800817a:	4b85      	ldr	r3, [pc, #532]	; (8008390 <HAL_UART_IRQHandler+0x298>)
 800817c:	4013      	ands	r3, r2
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 810a 	beq.w	8008398 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d011      	beq.n	80081b4 <HAL_UART_IRQHandler+0xbc>
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2201      	movs	r2, #1
 80081a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081aa:	f043 0201 	orr.w	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d011      	beq.n	80081e4 <HAL_UART_IRQHandler+0xec>
 80081c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2202      	movs	r2, #2
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081da:	f043 0204 	orr.w	r2, r3, #4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d011      	beq.n	8008214 <HAL_UART_IRQHandler+0x11c>
 80081f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2204      	movs	r2, #4
 8008202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800820a:	f043 0202 	orr.w	r2, r3, #2
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d017      	beq.n	8008250 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d105      	bne.n	8008238 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800822c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2208      	movs	r2, #8
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008246:	f043 0208 	orr.w	r2, r3, #8
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008258:	2b00      	cmp	r3, #0
 800825a:	d012      	beq.n	8008282 <HAL_UART_IRQHandler+0x18a>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00c      	beq.n	8008282 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008278:	f043 0220 	orr.w	r2, r3, #32
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8214 	beq.w	80086b6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800829a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d04f      	beq.n	800837a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 ff3c 	bl	8009158 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ea:	2b40      	cmp	r3, #64	; 0x40
 80082ec:	d141      	bne.n	8008372 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800831a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800831e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1d9      	bne.n	80082ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	4a13      	ldr	r2, [pc, #76]	; (8008394 <HAL_UART_IRQHandler+0x29c>)
 8008348:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd f86e 	bl	8005430 <HAL_DMA_Abort_IT>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d017      	beq.n	800838a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	e00f      	b.n	800838a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f9ae 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	e00b      	b.n	800838a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9aa 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008378:	e007      	b.n	800838a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f9a6 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008388:	e195      	b.n	80086b6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838a:	bf00      	nop
    return;
 800838c:	e193      	b.n	80086b6 <HAL_UART_IRQHandler+0x5be>
 800838e:	bf00      	nop
 8008390:	04000120 	.word	0x04000120
 8008394:	08009221 	.word	0x08009221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839c:	2b01      	cmp	r3, #1
 800839e:	f040 814e 	bne.w	800863e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8147 	beq.w	800863e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8140 	beq.w	800863e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2210      	movs	r2, #16
 80083c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d0:	2b40      	cmp	r3, #64	; 0x40
 80083d2:	f040 80b8 	bne.w	8008546 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8167 	beq.w	80086ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f6:	429a      	cmp	r2, r3
 80083f8:	f080 815f 	bcs.w	80086ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	f040 8086 	bne.w	8008524 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800842c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008446:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800844e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800845a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1da      	bne.n	8008418 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800848a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800848e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e1      	bne.n	8008462 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3308      	adds	r3, #8
 80084a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e3      	bne.n	800849e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f4:	f023 0310 	bic.w	r3, r3, #16
 80084f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008506:	65bb      	str	r3, [r7, #88]	; 0x58
 8008508:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800850c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e4      	bne.n	80084e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	4618      	mov	r0, r3
 8008520:	f7fc ff48 	bl	80053b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008536:	b29b      	uxth	r3, r3
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	b29b      	uxth	r3, r3
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8ce 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008544:	e0b9      	b.n	80086ba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008552:	b29b      	uxth	r3, r3
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80ab 	beq.w	80086be <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a6 	beq.w	80086be <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
 8008596:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800859a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e4      	bne.n	8008572 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	623b      	str	r3, [r7, #32]
   return(result);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085cc:	633a      	str	r2, [r7, #48]	; 0x30
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e3      	bne.n	80085a8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	60fb      	str	r3, [r7, #12]
   return(result);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 0310 	bic.w	r3, r3, #16
 8008608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	69b9      	ldr	r1, [r7, #24]
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	617b      	str	r3, [r7, #20]
   return(result);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e4      	bne.n	80085f4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f852 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800863c:	e03f      	b.n	80086be <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00e      	beq.n	8008668 <HAL_UART_IRQHandler+0x570>
 800864a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800865e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 ffd9 	bl	8009618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008666:	e02d      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00e      	beq.n	8008692 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01c      	beq.n	80086c2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
    }
    return;
 8008690:	e017      	b.n	80086c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d012      	beq.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
 800869e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00c      	beq.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fdce 	bl	800924c <UART_EndTransmit_IT>
    return;
 80086b0:	e008      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80086b2:	bf00      	nop
 80086b4:	e006      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80086b6:	bf00      	nop
 80086b8:	e004      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80086ba:	bf00      	nop
 80086bc:	e002      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80086c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80086c4:	37e8      	adds	r7, #232	; 0xe8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086fc:	b08a      	sub	sp, #40	; 0x28
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	431a      	orrs	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	4313      	orrs	r3, r2
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	4ba4      	ldr	r3, [pc, #656]	; (80089b8 <UART_SetConfig+0x2c0>)
 8008728:	4013      	ands	r3, r2
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008730:	430b      	orrs	r3, r1
 8008732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a99      	ldr	r2, [pc, #612]	; (80089bc <UART_SetConfig+0x2c4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008760:	4313      	orrs	r3, r2
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008774:	430a      	orrs	r2, r1
 8008776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a90      	ldr	r2, [pc, #576]	; (80089c0 <UART_SetConfig+0x2c8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d126      	bne.n	80087d0 <UART_SetConfig+0xd8>
 8008782:	4b90      	ldr	r3, [pc, #576]	; (80089c4 <UART_SetConfig+0x2cc>)
 8008784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	2b03      	cmp	r3, #3
 800878e:	d81b      	bhi.n	80087c8 <UART_SetConfig+0xd0>
 8008790:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <UART_SetConfig+0xa0>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	080087c1 	.word	0x080087c1
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ae:	e116      	b.n	80089de <UART_SetConfig+0x2e6>
 80087b0:	2302      	movs	r3, #2
 80087b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b6:	e112      	b.n	80089de <UART_SetConfig+0x2e6>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087be:	e10e      	b.n	80089de <UART_SetConfig+0x2e6>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c6:	e10a      	b.n	80089de <UART_SetConfig+0x2e6>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ce:	e106      	b.n	80089de <UART_SetConfig+0x2e6>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a7c      	ldr	r2, [pc, #496]	; (80089c8 <UART_SetConfig+0x2d0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d138      	bne.n	800884c <UART_SetConfig+0x154>
 80087da:	4b7a      	ldr	r3, [pc, #488]	; (80089c4 <UART_SetConfig+0x2cc>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e0:	f003 030c 	and.w	r3, r3, #12
 80087e4:	2b0c      	cmp	r3, #12
 80087e6:	d82d      	bhi.n	8008844 <UART_SetConfig+0x14c>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0xf8>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008825 	.word	0x08008825
 80087f4:	08008845 	.word	0x08008845
 80087f8:	08008845 	.word	0x08008845
 80087fc:	08008845 	.word	0x08008845
 8008800:	08008835 	.word	0x08008835
 8008804:	08008845 	.word	0x08008845
 8008808:	08008845 	.word	0x08008845
 800880c:	08008845 	.word	0x08008845
 8008810:	0800882d 	.word	0x0800882d
 8008814:	08008845 	.word	0x08008845
 8008818:	08008845 	.word	0x08008845
 800881c:	08008845 	.word	0x08008845
 8008820:	0800883d 	.word	0x0800883d
 8008824:	2300      	movs	r3, #0
 8008826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882a:	e0d8      	b.n	80089de <UART_SetConfig+0x2e6>
 800882c:	2302      	movs	r3, #2
 800882e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008832:	e0d4      	b.n	80089de <UART_SetConfig+0x2e6>
 8008834:	2304      	movs	r3, #4
 8008836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883a:	e0d0      	b.n	80089de <UART_SetConfig+0x2e6>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008842:	e0cc      	b.n	80089de <UART_SetConfig+0x2e6>
 8008844:	2310      	movs	r3, #16
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e0c8      	b.n	80089de <UART_SetConfig+0x2e6>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a5e      	ldr	r2, [pc, #376]	; (80089cc <UART_SetConfig+0x2d4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d125      	bne.n	80088a2 <UART_SetConfig+0x1aa>
 8008856:	4b5b      	ldr	r3, [pc, #364]	; (80089c4 <UART_SetConfig+0x2cc>)
 8008858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008860:	2b30      	cmp	r3, #48	; 0x30
 8008862:	d016      	beq.n	8008892 <UART_SetConfig+0x19a>
 8008864:	2b30      	cmp	r3, #48	; 0x30
 8008866:	d818      	bhi.n	800889a <UART_SetConfig+0x1a2>
 8008868:	2b20      	cmp	r3, #32
 800886a:	d00a      	beq.n	8008882 <UART_SetConfig+0x18a>
 800886c:	2b20      	cmp	r3, #32
 800886e:	d814      	bhi.n	800889a <UART_SetConfig+0x1a2>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <UART_SetConfig+0x182>
 8008874:	2b10      	cmp	r3, #16
 8008876:	d008      	beq.n	800888a <UART_SetConfig+0x192>
 8008878:	e00f      	b.n	800889a <UART_SetConfig+0x1a2>
 800887a:	2300      	movs	r3, #0
 800887c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008880:	e0ad      	b.n	80089de <UART_SetConfig+0x2e6>
 8008882:	2302      	movs	r3, #2
 8008884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008888:	e0a9      	b.n	80089de <UART_SetConfig+0x2e6>
 800888a:	2304      	movs	r3, #4
 800888c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008890:	e0a5      	b.n	80089de <UART_SetConfig+0x2e6>
 8008892:	2308      	movs	r3, #8
 8008894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008898:	e0a1      	b.n	80089de <UART_SetConfig+0x2e6>
 800889a:	2310      	movs	r3, #16
 800889c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a0:	e09d      	b.n	80089de <UART_SetConfig+0x2e6>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a4a      	ldr	r2, [pc, #296]	; (80089d0 <UART_SetConfig+0x2d8>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d125      	bne.n	80088f8 <UART_SetConfig+0x200>
 80088ac:	4b45      	ldr	r3, [pc, #276]	; (80089c4 <UART_SetConfig+0x2cc>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088b6:	2bc0      	cmp	r3, #192	; 0xc0
 80088b8:	d016      	beq.n	80088e8 <UART_SetConfig+0x1f0>
 80088ba:	2bc0      	cmp	r3, #192	; 0xc0
 80088bc:	d818      	bhi.n	80088f0 <UART_SetConfig+0x1f8>
 80088be:	2b80      	cmp	r3, #128	; 0x80
 80088c0:	d00a      	beq.n	80088d8 <UART_SetConfig+0x1e0>
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d814      	bhi.n	80088f0 <UART_SetConfig+0x1f8>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <UART_SetConfig+0x1d8>
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d008      	beq.n	80088e0 <UART_SetConfig+0x1e8>
 80088ce:	e00f      	b.n	80088f0 <UART_SetConfig+0x1f8>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d6:	e082      	b.n	80089de <UART_SetConfig+0x2e6>
 80088d8:	2302      	movs	r3, #2
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088de:	e07e      	b.n	80089de <UART_SetConfig+0x2e6>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e6:	e07a      	b.n	80089de <UART_SetConfig+0x2e6>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ee:	e076      	b.n	80089de <UART_SetConfig+0x2e6>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e072      	b.n	80089de <UART_SetConfig+0x2e6>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a35      	ldr	r2, [pc, #212]	; (80089d4 <UART_SetConfig+0x2dc>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d12a      	bne.n	8008958 <UART_SetConfig+0x260>
 8008902:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <UART_SetConfig+0x2cc>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008910:	d01a      	beq.n	8008948 <UART_SetConfig+0x250>
 8008912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008916:	d81b      	bhi.n	8008950 <UART_SetConfig+0x258>
 8008918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891c:	d00c      	beq.n	8008938 <UART_SetConfig+0x240>
 800891e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008922:	d815      	bhi.n	8008950 <UART_SetConfig+0x258>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <UART_SetConfig+0x238>
 8008928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800892c:	d008      	beq.n	8008940 <UART_SetConfig+0x248>
 800892e:	e00f      	b.n	8008950 <UART_SetConfig+0x258>
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008936:	e052      	b.n	80089de <UART_SetConfig+0x2e6>
 8008938:	2302      	movs	r3, #2
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893e:	e04e      	b.n	80089de <UART_SetConfig+0x2e6>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008946:	e04a      	b.n	80089de <UART_SetConfig+0x2e6>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894e:	e046      	b.n	80089de <UART_SetConfig+0x2e6>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008956:	e042      	b.n	80089de <UART_SetConfig+0x2e6>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a17      	ldr	r2, [pc, #92]	; (80089bc <UART_SetConfig+0x2c4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d13a      	bne.n	80089d8 <UART_SetConfig+0x2e0>
 8008962:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <UART_SetConfig+0x2cc>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800896c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008970:	d01a      	beq.n	80089a8 <UART_SetConfig+0x2b0>
 8008972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008976:	d81b      	bhi.n	80089b0 <UART_SetConfig+0x2b8>
 8008978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897c:	d00c      	beq.n	8008998 <UART_SetConfig+0x2a0>
 800897e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008982:	d815      	bhi.n	80089b0 <UART_SetConfig+0x2b8>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <UART_SetConfig+0x298>
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d008      	beq.n	80089a0 <UART_SetConfig+0x2a8>
 800898e:	e00f      	b.n	80089b0 <UART_SetConfig+0x2b8>
 8008990:	2300      	movs	r3, #0
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008996:	e022      	b.n	80089de <UART_SetConfig+0x2e6>
 8008998:	2302      	movs	r3, #2
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899e:	e01e      	b.n	80089de <UART_SetConfig+0x2e6>
 80089a0:	2304      	movs	r3, #4
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e01a      	b.n	80089de <UART_SetConfig+0x2e6>
 80089a8:	2308      	movs	r3, #8
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e016      	b.n	80089de <UART_SetConfig+0x2e6>
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e012      	b.n	80089de <UART_SetConfig+0x2e6>
 80089b8:	efff69f3 	.word	0xefff69f3
 80089bc:	40008000 	.word	0x40008000
 80089c0:	40013800 	.word	0x40013800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40004400 	.word	0x40004400
 80089cc:	40004800 	.word	0x40004800
 80089d0:	40004c00 	.word	0x40004c00
 80089d4:	40005000 	.word	0x40005000
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a9f      	ldr	r2, [pc, #636]	; (8008c60 <UART_SetConfig+0x568>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d17a      	bne.n	8008ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d824      	bhi.n	8008a3a <UART_SetConfig+0x342>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x300>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a3b 	.word	0x08008a3b
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a3b 	.word	0x08008a3b
 8008a08:	08008a2b 	.word	0x08008a2b
 8008a0c:	08008a3b 	.word	0x08008a3b
 8008a10:	08008a3b 	.word	0x08008a3b
 8008a14:	08008a3b 	.word	0x08008a3b
 8008a18:	08008a33 	.word	0x08008a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a1c:	f7fd fdf2 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8008a20:	61f8      	str	r0, [r7, #28]
        break;
 8008a22:	e010      	b.n	8008a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a24:	4b8f      	ldr	r3, [pc, #572]	; (8008c64 <UART_SetConfig+0x56c>)
 8008a26:	61fb      	str	r3, [r7, #28]
        break;
 8008a28:	e00d      	b.n	8008a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a2a:	f7fd fd53 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8008a2e:	61f8      	str	r0, [r7, #28]
        break;
 8008a30:	e009      	b.n	8008a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a36:	61fb      	str	r3, [r7, #28]
        break;
 8008a38:	e005      	b.n	8008a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80fb 	beq.w	8008c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	4413      	add	r3, r2
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d305      	bcc.n	8008a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d903      	bls.n	8008a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a70:	e0e8      	b.n	8008c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2200      	movs	r2, #0
 8008a76:	461c      	mov	r4, r3
 8008a78:	4615      	mov	r5, r2
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	022b      	lsls	r3, r5, #8
 8008a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a88:	0222      	lsls	r2, r4, #8
 8008a8a:	68f9      	ldr	r1, [r7, #12]
 8008a8c:	6849      	ldr	r1, [r1, #4]
 8008a8e:	0849      	lsrs	r1, r1, #1
 8008a90:	2000      	movs	r0, #0
 8008a92:	4688      	mov	r8, r1
 8008a94:	4681      	mov	r9, r0
 8008a96:	eb12 0a08 	adds.w	sl, r2, r8
 8008a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	603b      	str	r3, [r7, #0]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f8 f8ea 	bl	8000c88 <__aeabi_uldivmod>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4613      	mov	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac2:	d308      	bcc.n	8008ad6 <UART_SetConfig+0x3de>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aca:	d204      	bcs.n	8008ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	60da      	str	r2, [r3, #12]
 8008ad4:	e0b6      	b.n	8008c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008adc:	e0b2      	b.n	8008c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae6:	d15e      	bne.n	8008ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d828      	bhi.n	8008b42 <UART_SetConfig+0x44a>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <UART_SetConfig+0x400>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b1d 	.word	0x08008b1d
 8008afc:	08008b25 	.word	0x08008b25
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	08008b43 	.word	0x08008b43
 8008b08:	08008b33 	.word	0x08008b33
 8008b0c:	08008b43 	.word	0x08008b43
 8008b10:	08008b43 	.word	0x08008b43
 8008b14:	08008b43 	.word	0x08008b43
 8008b18:	08008b3b 	.word	0x08008b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b1c:	f7fd fd72 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8008b20:	61f8      	str	r0, [r7, #28]
        break;
 8008b22:	e014      	b.n	8008b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b24:	f7fd fd84 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 8008b28:	61f8      	str	r0, [r7, #28]
        break;
 8008b2a:	e010      	b.n	8008b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b2c:	4b4d      	ldr	r3, [pc, #308]	; (8008c64 <UART_SetConfig+0x56c>)
 8008b2e:	61fb      	str	r3, [r7, #28]
        break;
 8008b30:	e00d      	b.n	8008b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b32:	f7fd fccf 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8008b36:	61f8      	str	r0, [r7, #28]
        break;
 8008b38:	e009      	b.n	8008b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3e:	61fb      	str	r3, [r7, #28]
        break;
 8008b40:	e005      	b.n	8008b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d077      	beq.n	8008c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	005a      	lsls	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	441a      	add	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b0f      	cmp	r3, #15
 8008b6e:	d916      	bls.n	8008b9e <UART_SetConfig+0x4a6>
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b76:	d212      	bcs.n	8008b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f023 030f 	bic.w	r3, r3, #15
 8008b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	8afb      	ldrh	r3, [r7, #22]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	8afa      	ldrh	r2, [r7, #22]
 8008b9a:	60da      	str	r2, [r3, #12]
 8008b9c:	e052      	b.n	8008c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ba4:	e04e      	b.n	8008c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d827      	bhi.n	8008bfe <UART_SetConfig+0x506>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x4bc>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	08008bff 	.word	0x08008bff
 8008bc4:	08008bef 	.word	0x08008bef
 8008bc8:	08008bff 	.word	0x08008bff
 8008bcc:	08008bff 	.word	0x08008bff
 8008bd0:	08008bff 	.word	0x08008bff
 8008bd4:	08008bf7 	.word	0x08008bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd8:	f7fd fd14 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8008bdc:	61f8      	str	r0, [r7, #28]
        break;
 8008bde:	e014      	b.n	8008c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008be0:	f7fd fd26 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 8008be4:	61f8      	str	r0, [r7, #28]
        break;
 8008be6:	e010      	b.n	8008c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <UART_SetConfig+0x56c>)
 8008bea:	61fb      	str	r3, [r7, #28]
        break;
 8008bec:	e00d      	b.n	8008c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bee:	f7fd fc71 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8008bf2:	61f8      	str	r0, [r7, #28]
        break;
 8008bf4:	e009      	b.n	8008c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfa:	61fb      	str	r3, [r7, #28]
        break;
 8008bfc:	e005      	b.n	8008c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c08:	bf00      	nop
    }

    if (pclk != 0U)
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d019      	beq.n	8008c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	085a      	lsrs	r2, r3, #1
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	441a      	add	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	2b0f      	cmp	r3, #15
 8008c28:	d909      	bls.n	8008c3e <UART_SetConfig+0x546>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c30:	d205      	bcs.n	8008c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60da      	str	r2, [r3, #12]
 8008c3c:	e002      	b.n	8008c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3728      	adds	r7, #40	; 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c5e:	bf00      	nop
 8008c60:	40008000 	.word	0x40008000
 8008c64:	00f42400 	.word	0x00f42400

08008c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01a      	beq.n	8008d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d66:	d10a      	bne.n	8008d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b098      	sub	sp, #96	; 0x60
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dbc:	f7fa fdc2 	bl	8003944 <HAL_GetTick>
 8008dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d12e      	bne.n	8008e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f88c 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d021      	beq.n	8008e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e08:	647b      	str	r3, [r7, #68]	; 0x44
 8008e0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e6      	bne.n	8008dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e062      	b.n	8008ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d149      	bne.n	8008ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e44:	2200      	movs	r2, #0
 8008e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f856 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d03c      	beq.n	8008ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	623b      	str	r3, [r7, #32]
   return(result);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e74:	633b      	str	r3, [r7, #48]	; 0x30
 8008e76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0301 	bic.w	r3, r3, #1
 8008e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea8:	61fa      	str	r2, [r7, #28]
 8008eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	69b9      	ldr	r1, [r7, #24]
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e5      	bne.n	8008e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e011      	b.n	8008ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3758      	adds	r7, #88	; 0x58
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0c:	e049      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d045      	beq.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f16:	f7fa fd15 	bl	8003944 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d302      	bcc.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e048      	b.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d031      	beq.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d110      	bne.n	8008f6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2208      	movs	r2, #8
 8008f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f8ff 	bl	8009158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2208      	movs	r2, #8
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e029      	b.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f7c:	d111      	bne.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f8e5 	bl	8009158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e00f      	b.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4013      	ands	r3, r2
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	bf0c      	ite	eq
 8008fb2:	2301      	moveq	r3, #1
 8008fb4:	2300      	movne	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d0a6      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b097      	sub	sp, #92	; 0x5c
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	88fa      	ldrh	r2, [r7, #6]
 8008fe4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	88fa      	ldrh	r2, [r7, #6]
 8008fec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffe:	d10e      	bne.n	800901e <UART_Start_Receive_IT+0x52>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <UART_Start_Receive_IT+0x48>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800900e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009012:	e02d      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	22ff      	movs	r2, #255	; 0xff
 8009018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800901c:	e028      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <UART_Start_Receive_IT+0x76>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d104      	bne.n	8009038 <UART_Start_Receive_IT+0x6c>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	22ff      	movs	r2, #255	; 0xff
 8009032:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009036:	e01b      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	227f      	movs	r2, #127	; 0x7f
 800903c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009040:	e016      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800904a:	d10d      	bne.n	8009068 <UART_Start_Receive_IT+0x9c>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <UART_Start_Receive_IT+0x92>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	227f      	movs	r2, #127	; 0x7f
 8009058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800905c:	e008      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	223f      	movs	r2, #63	; 0x3f
 8009062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009066:	e003      	b.n	8009070 <UART_Start_Receive_IT+0xa4>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2222      	movs	r2, #34	; 0x22
 800907c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	657b      	str	r3, [r7, #84]	; 0x54
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80090a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090bc:	d107      	bne.n	80090ce <UART_Start_Receive_IT+0x102>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4a21      	ldr	r2, [pc, #132]	; (8009150 <UART_Start_Receive_IT+0x184>)
 80090ca:	669a      	str	r2, [r3, #104]	; 0x68
 80090cc:	e002      	b.n	80090d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4a20      	ldr	r2, [pc, #128]	; (8009154 <UART_Start_Receive_IT+0x188>)
 80090d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d019      	beq.n	8009110 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
 80090fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e6      	bne.n	80090dc <UART_Start_Receive_IT+0x110>
 800910e:	e018      	b.n	8009142 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	613b      	str	r3, [r7, #16]
   return(result);
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f043 0320 	orr.w	r3, r3, #32
 8009124:	653b      	str	r3, [r7, #80]	; 0x50
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912e:	623b      	str	r3, [r7, #32]
 8009130:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	69f9      	ldr	r1, [r7, #28]
 8009134:	6a3a      	ldr	r2, [r7, #32]
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	61bb      	str	r3, [r7, #24]
   return(result);
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e6      	bne.n	8009110 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	375c      	adds	r7, #92	; 0x5c
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	0800945d 	.word	0x0800945d
 8009154:	080092a1 	.word	0x080092a1

08009158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b095      	sub	sp, #84	; 0x54
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917e:	643b      	str	r3, [r7, #64]	; 0x40
 8009180:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e6      	bne.n	8009160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e5      	bne.n	8009192 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d118      	bne.n	8009200 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	60bb      	str	r3, [r7, #8]
   return(result);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f023 0310 	bic.w	r3, r3, #16
 80091e2:	647b      	str	r3, [r7, #68]	; 0x44
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	613b      	str	r3, [r7, #16]
   return(result);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e6      	bne.n	80091ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009214:	bf00      	nop
 8009216:	3754      	adds	r7, #84	; 0x54
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff fa44 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	60bb      	str	r3, [r7, #8]
   return(result);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6979      	ldr	r1, [r7, #20]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	613b      	str	r3, [r7, #16]
   return(result);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e6      	bne.n	8009254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f7 ffa0 	bl	80011d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009298:	bf00      	nop
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b09c      	sub	sp, #112	; 0x70
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b8:	2b22      	cmp	r3, #34	; 0x22
 80092ba:	f040 80be 	bne.w	800943a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80092c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80092cc:	b2d9      	uxtb	r1, r3
 80092ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d8:	400a      	ands	r2, r1
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 80a3 	bne.w	800944e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800931c:	66bb      	str	r3, [r7, #104]	; 0x68
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009326:	65bb      	str	r3, [r7, #88]	; 0x58
 8009328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800932c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e6      	bne.n	8009308 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	667b      	str	r3, [r7, #100]	; 0x64
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800935a:	647a      	str	r2, [r7, #68]	; 0x44
 800935c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a34      	ldr	r2, [pc, #208]	; (8009458 <UART_RxISR_8BIT+0x1b8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d01f      	beq.n	80093cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d018      	beq.n	80093cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	623b      	str	r3, [r7, #32]
   return(result);
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093ae:	663b      	str	r3, [r7, #96]	; 0x60
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30
 80093ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d12e      	bne.n	8009432 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0310 	bic.w	r3, r3, #16
 80093ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	69b9      	ldr	r1, [r7, #24]
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	617b      	str	r3, [r7, #20]
   return(result);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d103      	bne.n	8009422 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff f958 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009430:	e00d      	b.n	800944e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f7 fe76 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 8009438:	e009      	b.n	800944e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	8b1b      	ldrh	r3, [r3, #24]
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0208 	orr.w	r2, r2, #8
 800944a:	b292      	uxth	r2, r2
 800944c:	831a      	strh	r2, [r3, #24]
}
 800944e:	bf00      	nop
 8009450:	3770      	adds	r7, #112	; 0x70
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40008000 	.word	0x40008000

0800945c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b09c      	sub	sp, #112	; 0x70
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800946a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009474:	2b22      	cmp	r3, #34	; 0x22
 8009476:	f040 80be 	bne.w	80095f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009480:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800948a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800948e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009492:	4013      	ands	r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009498:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	1c9a      	adds	r2, r3, #2
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 80a3 	bne.w	800960a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80094d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e2:	657b      	str	r3, [r7, #84]	; 0x54
 80094e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e6      	bne.n	80094c4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	663b      	str	r3, [r7, #96]	; 0x60
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009516:	643a      	str	r2, [r7, #64]	; 0x40
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800951c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e5      	bne.n	80094f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a34      	ldr	r2, [pc, #208]	; (8009614 <UART_RxISR_16BIT+0x1b8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d01f      	beq.n	8009588 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d018      	beq.n	8009588 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	61fb      	str	r3, [r7, #28]
   return(result);
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800956a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009576:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800957a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e6      	bne.n	8009556 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800958c:	2b01      	cmp	r3, #1
 800958e:	d12e      	bne.n	80095ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f023 0310 	bic.w	r3, r3, #16
 80095aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095b4:	61bb      	str	r3, [r7, #24]
 80095b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	613b      	str	r3, [r7, #16]
   return(result);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e6      	bne.n	8009596 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f003 0310 	and.w	r3, r3, #16
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d103      	bne.n	80095de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2210      	movs	r2, #16
 80095dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff f87a 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ec:	e00d      	b.n	800960a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f7 fd98 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 80095f4:	e009      	b.n	800960a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	8b1b      	ldrh	r3, [r3, #24]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0208 	orr.w	r2, r2, #8
 8009606:	b292      	uxth	r2, r2
 8009608:	831a      	strh	r2, [r3, #24]
}
 800960a:	bf00      	nop
 800960c:	3770      	adds	r7, #112	; 0x70
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40008000 	.word	0x40008000

08009618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <atof>:
 800962c:	2100      	movs	r1, #0
 800962e:	f000 be0f 	b.w	800a250 <strtod>

08009632 <sulp>:
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	460d      	mov	r5, r1
 8009638:	ec45 4b10 	vmov	d0, r4, r5
 800963c:	4616      	mov	r6, r2
 800963e:	f003 fa9b 	bl	800cb78 <__ulp>
 8009642:	ec51 0b10 	vmov	r0, r1, d0
 8009646:	b17e      	cbz	r6, 8009668 <sulp+0x36>
 8009648:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800964c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009650:	2b00      	cmp	r3, #0
 8009652:	dd09      	ble.n	8009668 <sulp+0x36>
 8009654:	051b      	lsls	r3, r3, #20
 8009656:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800965a:	2400      	movs	r4, #0
 800965c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	0000      	movs	r0, r0
 800966c:	0000      	movs	r0, r0
	...

08009670 <_strtod_l>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	ed2d 8b02 	vpush	{d8}
 8009678:	b09b      	sub	sp, #108	; 0x6c
 800967a:	4604      	mov	r4, r0
 800967c:	9213      	str	r2, [sp, #76]	; 0x4c
 800967e:	2200      	movs	r2, #0
 8009680:	9216      	str	r2, [sp, #88]	; 0x58
 8009682:	460d      	mov	r5, r1
 8009684:	f04f 0800 	mov.w	r8, #0
 8009688:	f04f 0900 	mov.w	r9, #0
 800968c:	460a      	mov	r2, r1
 800968e:	9215      	str	r2, [sp, #84]	; 0x54
 8009690:	7811      	ldrb	r1, [r2, #0]
 8009692:	292b      	cmp	r1, #43	; 0x2b
 8009694:	d04c      	beq.n	8009730 <_strtod_l+0xc0>
 8009696:	d83a      	bhi.n	800970e <_strtod_l+0x9e>
 8009698:	290d      	cmp	r1, #13
 800969a:	d834      	bhi.n	8009706 <_strtod_l+0x96>
 800969c:	2908      	cmp	r1, #8
 800969e:	d834      	bhi.n	800970a <_strtod_l+0x9a>
 80096a0:	2900      	cmp	r1, #0
 80096a2:	d03d      	beq.n	8009720 <_strtod_l+0xb0>
 80096a4:	2200      	movs	r2, #0
 80096a6:	920a      	str	r2, [sp, #40]	; 0x28
 80096a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80096aa:	7832      	ldrb	r2, [r6, #0]
 80096ac:	2a30      	cmp	r2, #48	; 0x30
 80096ae:	f040 80b4 	bne.w	800981a <_strtod_l+0x1aa>
 80096b2:	7872      	ldrb	r2, [r6, #1]
 80096b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80096b8:	2a58      	cmp	r2, #88	; 0x58
 80096ba:	d170      	bne.n	800979e <_strtod_l+0x12e>
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	ab16      	add	r3, sp, #88	; 0x58
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	4a8e      	ldr	r2, [pc, #568]	; (8009900 <_strtod_l+0x290>)
 80096c8:	ab17      	add	r3, sp, #92	; 0x5c
 80096ca:	a915      	add	r1, sp, #84	; 0x54
 80096cc:	4620      	mov	r0, r4
 80096ce:	f002 fb31 	bl	800bd34 <__gethex>
 80096d2:	f010 070f 	ands.w	r7, r0, #15
 80096d6:	4605      	mov	r5, r0
 80096d8:	d005      	beq.n	80096e6 <_strtod_l+0x76>
 80096da:	2f06      	cmp	r7, #6
 80096dc:	d12a      	bne.n	8009734 <_strtod_l+0xc4>
 80096de:	3601      	adds	r6, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	9615      	str	r6, [sp, #84]	; 0x54
 80096e4:	930a      	str	r3, [sp, #40]	; 0x28
 80096e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f040 857f 	bne.w	800a1ec <_strtod_l+0xb7c>
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	b1db      	cbz	r3, 800972a <_strtod_l+0xba>
 80096f2:	4642      	mov	r2, r8
 80096f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096f8:	ec43 2b10 	vmov	d0, r2, r3
 80096fc:	b01b      	add	sp, #108	; 0x6c
 80096fe:	ecbd 8b02 	vpop	{d8}
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	2920      	cmp	r1, #32
 8009708:	d1cc      	bne.n	80096a4 <_strtod_l+0x34>
 800970a:	3201      	adds	r2, #1
 800970c:	e7bf      	b.n	800968e <_strtod_l+0x1e>
 800970e:	292d      	cmp	r1, #45	; 0x2d
 8009710:	d1c8      	bne.n	80096a4 <_strtod_l+0x34>
 8009712:	2101      	movs	r1, #1
 8009714:	910a      	str	r1, [sp, #40]	; 0x28
 8009716:	1c51      	adds	r1, r2, #1
 8009718:	9115      	str	r1, [sp, #84]	; 0x54
 800971a:	7852      	ldrb	r2, [r2, #1]
 800971c:	2a00      	cmp	r2, #0
 800971e:	d1c3      	bne.n	80096a8 <_strtod_l+0x38>
 8009720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009722:	9515      	str	r5, [sp, #84]	; 0x54
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 855f 	bne.w	800a1e8 <_strtod_l+0xb78>
 800972a:	4642      	mov	r2, r8
 800972c:	464b      	mov	r3, r9
 800972e:	e7e3      	b.n	80096f8 <_strtod_l+0x88>
 8009730:	2100      	movs	r1, #0
 8009732:	e7ef      	b.n	8009714 <_strtod_l+0xa4>
 8009734:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009736:	b13a      	cbz	r2, 8009748 <_strtod_l+0xd8>
 8009738:	2135      	movs	r1, #53	; 0x35
 800973a:	a818      	add	r0, sp, #96	; 0x60
 800973c:	f003 fb19 	bl	800cd72 <__copybits>
 8009740:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009742:	4620      	mov	r0, r4
 8009744:	f002 feec 	bl	800c520 <_Bfree>
 8009748:	3f01      	subs	r7, #1
 800974a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800974c:	2f04      	cmp	r7, #4
 800974e:	d806      	bhi.n	800975e <_strtod_l+0xee>
 8009750:	e8df f007 	tbb	[pc, r7]
 8009754:	201d0314 	.word	0x201d0314
 8009758:	14          	.byte	0x14
 8009759:	00          	.byte	0x00
 800975a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800975e:	05e9      	lsls	r1, r5, #23
 8009760:	bf48      	it	mi
 8009762:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800976a:	0d1b      	lsrs	r3, r3, #20
 800976c:	051b      	lsls	r3, r3, #20
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1b9      	bne.n	80096e6 <_strtod_l+0x76>
 8009772:	f001 fb6d 	bl	800ae50 <__errno>
 8009776:	2322      	movs	r3, #34	; 0x22
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	e7b4      	b.n	80096e6 <_strtod_l+0x76>
 800977c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009780:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009784:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009788:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800978c:	e7e7      	b.n	800975e <_strtod_l+0xee>
 800978e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009908 <_strtod_l+0x298>
 8009792:	e7e4      	b.n	800975e <_strtod_l+0xee>
 8009794:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009798:	f04f 38ff 	mov.w	r8, #4294967295
 800979c:	e7df      	b.n	800975e <_strtod_l+0xee>
 800979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	9215      	str	r2, [sp, #84]	; 0x54
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b30      	cmp	r3, #48	; 0x30
 80097a8:	d0f9      	beq.n	800979e <_strtod_l+0x12e>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d09b      	beq.n	80096e6 <_strtod_l+0x76>
 80097ae:	2301      	movs	r3, #1
 80097b0:	f04f 0a00 	mov.w	sl, #0
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80097be:	46d3      	mov	fp, sl
 80097c0:	220a      	movs	r2, #10
 80097c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80097c4:	7806      	ldrb	r6, [r0, #0]
 80097c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80097ca:	b2d9      	uxtb	r1, r3
 80097cc:	2909      	cmp	r1, #9
 80097ce:	d926      	bls.n	800981e <_strtod_l+0x1ae>
 80097d0:	494c      	ldr	r1, [pc, #304]	; (8009904 <_strtod_l+0x294>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	f001 fac9 	bl	800ad6a <strncmp>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d030      	beq.n	800983e <_strtod_l+0x1ce>
 80097dc:	2000      	movs	r0, #0
 80097de:	4632      	mov	r2, r6
 80097e0:	9005      	str	r0, [sp, #20]
 80097e2:	465e      	mov	r6, fp
 80097e4:	4603      	mov	r3, r0
 80097e6:	2a65      	cmp	r2, #101	; 0x65
 80097e8:	d001      	beq.n	80097ee <_strtod_l+0x17e>
 80097ea:	2a45      	cmp	r2, #69	; 0x45
 80097ec:	d113      	bne.n	8009816 <_strtod_l+0x1a6>
 80097ee:	b91e      	cbnz	r6, 80097f8 <_strtod_l+0x188>
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	4302      	orrs	r2, r0
 80097f4:	d094      	beq.n	8009720 <_strtod_l+0xb0>
 80097f6:	2600      	movs	r6, #0
 80097f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80097fa:	1c6a      	adds	r2, r5, #1
 80097fc:	9215      	str	r2, [sp, #84]	; 0x54
 80097fe:	786a      	ldrb	r2, [r5, #1]
 8009800:	2a2b      	cmp	r2, #43	; 0x2b
 8009802:	d074      	beq.n	80098ee <_strtod_l+0x27e>
 8009804:	2a2d      	cmp	r2, #45	; 0x2d
 8009806:	d078      	beq.n	80098fa <_strtod_l+0x28a>
 8009808:	f04f 0c00 	mov.w	ip, #0
 800980c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009810:	2909      	cmp	r1, #9
 8009812:	d97f      	bls.n	8009914 <_strtod_l+0x2a4>
 8009814:	9515      	str	r5, [sp, #84]	; 0x54
 8009816:	2700      	movs	r7, #0
 8009818:	e09e      	b.n	8009958 <_strtod_l+0x2e8>
 800981a:	2300      	movs	r3, #0
 800981c:	e7c8      	b.n	80097b0 <_strtod_l+0x140>
 800981e:	f1bb 0f08 	cmp.w	fp, #8
 8009822:	bfd8      	it	le
 8009824:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009826:	f100 0001 	add.w	r0, r0, #1
 800982a:	bfda      	itte	le
 800982c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009830:	9309      	strle	r3, [sp, #36]	; 0x24
 8009832:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009836:	f10b 0b01 	add.w	fp, fp, #1
 800983a:	9015      	str	r0, [sp, #84]	; 0x54
 800983c:	e7c1      	b.n	80097c2 <_strtod_l+0x152>
 800983e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	9215      	str	r2, [sp, #84]	; 0x54
 8009844:	785a      	ldrb	r2, [r3, #1]
 8009846:	f1bb 0f00 	cmp.w	fp, #0
 800984a:	d037      	beq.n	80098bc <_strtod_l+0x24c>
 800984c:	9005      	str	r0, [sp, #20]
 800984e:	465e      	mov	r6, fp
 8009850:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009854:	2b09      	cmp	r3, #9
 8009856:	d912      	bls.n	800987e <_strtod_l+0x20e>
 8009858:	2301      	movs	r3, #1
 800985a:	e7c4      	b.n	80097e6 <_strtod_l+0x176>
 800985c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	9215      	str	r2, [sp, #84]	; 0x54
 8009862:	785a      	ldrb	r2, [r3, #1]
 8009864:	3001      	adds	r0, #1
 8009866:	2a30      	cmp	r2, #48	; 0x30
 8009868:	d0f8      	beq.n	800985c <_strtod_l+0x1ec>
 800986a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800986e:	2b08      	cmp	r3, #8
 8009870:	f200 84c1 	bhi.w	800a1f6 <_strtod_l+0xb86>
 8009874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009876:	9005      	str	r0, [sp, #20]
 8009878:	2000      	movs	r0, #0
 800987a:	930b      	str	r3, [sp, #44]	; 0x2c
 800987c:	4606      	mov	r6, r0
 800987e:	3a30      	subs	r2, #48	; 0x30
 8009880:	f100 0301 	add.w	r3, r0, #1
 8009884:	d014      	beq.n	80098b0 <_strtod_l+0x240>
 8009886:	9905      	ldr	r1, [sp, #20]
 8009888:	4419      	add	r1, r3
 800988a:	9105      	str	r1, [sp, #20]
 800988c:	4633      	mov	r3, r6
 800988e:	eb00 0c06 	add.w	ip, r0, r6
 8009892:	210a      	movs	r1, #10
 8009894:	4563      	cmp	r3, ip
 8009896:	d113      	bne.n	80098c0 <_strtod_l+0x250>
 8009898:	1833      	adds	r3, r6, r0
 800989a:	2b08      	cmp	r3, #8
 800989c:	f106 0601 	add.w	r6, r6, #1
 80098a0:	4406      	add	r6, r0
 80098a2:	dc1a      	bgt.n	80098da <_strtod_l+0x26a>
 80098a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098a6:	230a      	movs	r3, #10
 80098a8:	fb03 2301 	mla	r3, r3, r1, r2
 80098ac:	9309      	str	r3, [sp, #36]	; 0x24
 80098ae:	2300      	movs	r3, #0
 80098b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098b2:	1c51      	adds	r1, r2, #1
 80098b4:	9115      	str	r1, [sp, #84]	; 0x54
 80098b6:	7852      	ldrb	r2, [r2, #1]
 80098b8:	4618      	mov	r0, r3
 80098ba:	e7c9      	b.n	8009850 <_strtod_l+0x1e0>
 80098bc:	4658      	mov	r0, fp
 80098be:	e7d2      	b.n	8009866 <_strtod_l+0x1f6>
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	f103 0301 	add.w	r3, r3, #1
 80098c6:	dc03      	bgt.n	80098d0 <_strtod_l+0x260>
 80098c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80098ca:	434f      	muls	r7, r1
 80098cc:	9709      	str	r7, [sp, #36]	; 0x24
 80098ce:	e7e1      	b.n	8009894 <_strtod_l+0x224>
 80098d0:	2b10      	cmp	r3, #16
 80098d2:	bfd8      	it	le
 80098d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80098d8:	e7dc      	b.n	8009894 <_strtod_l+0x224>
 80098da:	2e10      	cmp	r6, #16
 80098dc:	bfdc      	itt	le
 80098de:	230a      	movle	r3, #10
 80098e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80098e4:	e7e3      	b.n	80098ae <_strtod_l+0x23e>
 80098e6:	2300      	movs	r3, #0
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	2301      	movs	r3, #1
 80098ec:	e780      	b.n	80097f0 <_strtod_l+0x180>
 80098ee:	f04f 0c00 	mov.w	ip, #0
 80098f2:	1caa      	adds	r2, r5, #2
 80098f4:	9215      	str	r2, [sp, #84]	; 0x54
 80098f6:	78aa      	ldrb	r2, [r5, #2]
 80098f8:	e788      	b.n	800980c <_strtod_l+0x19c>
 80098fa:	f04f 0c01 	mov.w	ip, #1
 80098fe:	e7f8      	b.n	80098f2 <_strtod_l+0x282>
 8009900:	0800d968 	.word	0x0800d968
 8009904:	0800d964 	.word	0x0800d964
 8009908:	7ff00000 	.word	0x7ff00000
 800990c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800990e:	1c51      	adds	r1, r2, #1
 8009910:	9115      	str	r1, [sp, #84]	; 0x54
 8009912:	7852      	ldrb	r2, [r2, #1]
 8009914:	2a30      	cmp	r2, #48	; 0x30
 8009916:	d0f9      	beq.n	800990c <_strtod_l+0x29c>
 8009918:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800991c:	2908      	cmp	r1, #8
 800991e:	f63f af7a 	bhi.w	8009816 <_strtod_l+0x1a6>
 8009922:	3a30      	subs	r2, #48	; 0x30
 8009924:	9208      	str	r2, [sp, #32]
 8009926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009928:	920c      	str	r2, [sp, #48]	; 0x30
 800992a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800992c:	1c57      	adds	r7, r2, #1
 800992e:	9715      	str	r7, [sp, #84]	; 0x54
 8009930:	7852      	ldrb	r2, [r2, #1]
 8009932:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009936:	f1be 0f09 	cmp.w	lr, #9
 800993a:	d938      	bls.n	80099ae <_strtod_l+0x33e>
 800993c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800993e:	1a7f      	subs	r7, r7, r1
 8009940:	2f08      	cmp	r7, #8
 8009942:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009946:	dc03      	bgt.n	8009950 <_strtod_l+0x2e0>
 8009948:	9908      	ldr	r1, [sp, #32]
 800994a:	428f      	cmp	r7, r1
 800994c:	bfa8      	it	ge
 800994e:	460f      	movge	r7, r1
 8009950:	f1bc 0f00 	cmp.w	ip, #0
 8009954:	d000      	beq.n	8009958 <_strtod_l+0x2e8>
 8009956:	427f      	negs	r7, r7
 8009958:	2e00      	cmp	r6, #0
 800995a:	d14f      	bne.n	80099fc <_strtod_l+0x38c>
 800995c:	9904      	ldr	r1, [sp, #16]
 800995e:	4301      	orrs	r1, r0
 8009960:	f47f aec1 	bne.w	80096e6 <_strtod_l+0x76>
 8009964:	2b00      	cmp	r3, #0
 8009966:	f47f aedb 	bne.w	8009720 <_strtod_l+0xb0>
 800996a:	2a69      	cmp	r2, #105	; 0x69
 800996c:	d029      	beq.n	80099c2 <_strtod_l+0x352>
 800996e:	dc26      	bgt.n	80099be <_strtod_l+0x34e>
 8009970:	2a49      	cmp	r2, #73	; 0x49
 8009972:	d026      	beq.n	80099c2 <_strtod_l+0x352>
 8009974:	2a4e      	cmp	r2, #78	; 0x4e
 8009976:	f47f aed3 	bne.w	8009720 <_strtod_l+0xb0>
 800997a:	499b      	ldr	r1, [pc, #620]	; (8009be8 <_strtod_l+0x578>)
 800997c:	a815      	add	r0, sp, #84	; 0x54
 800997e:	f002 fc19 	bl	800c1b4 <__match>
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f aecc 	beq.w	8009720 <_strtod_l+0xb0>
 8009988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b28      	cmp	r3, #40	; 0x28
 800998e:	d12f      	bne.n	80099f0 <_strtod_l+0x380>
 8009990:	4996      	ldr	r1, [pc, #600]	; (8009bec <_strtod_l+0x57c>)
 8009992:	aa18      	add	r2, sp, #96	; 0x60
 8009994:	a815      	add	r0, sp, #84	; 0x54
 8009996:	f002 fc21 	bl	800c1dc <__hexnan>
 800999a:	2805      	cmp	r0, #5
 800999c:	d128      	bne.n	80099f0 <_strtod_l+0x380>
 800999e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80099a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80099ac:	e69b      	b.n	80096e6 <_strtod_l+0x76>
 80099ae:	9f08      	ldr	r7, [sp, #32]
 80099b0:	210a      	movs	r1, #10
 80099b2:	fb01 2107 	mla	r1, r1, r7, r2
 80099b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80099ba:	9208      	str	r2, [sp, #32]
 80099bc:	e7b5      	b.n	800992a <_strtod_l+0x2ba>
 80099be:	2a6e      	cmp	r2, #110	; 0x6e
 80099c0:	e7d9      	b.n	8009976 <_strtod_l+0x306>
 80099c2:	498b      	ldr	r1, [pc, #556]	; (8009bf0 <_strtod_l+0x580>)
 80099c4:	a815      	add	r0, sp, #84	; 0x54
 80099c6:	f002 fbf5 	bl	800c1b4 <__match>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f43f aea8 	beq.w	8009720 <_strtod_l+0xb0>
 80099d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099d2:	4988      	ldr	r1, [pc, #544]	; (8009bf4 <_strtod_l+0x584>)
 80099d4:	3b01      	subs	r3, #1
 80099d6:	a815      	add	r0, sp, #84	; 0x54
 80099d8:	9315      	str	r3, [sp, #84]	; 0x54
 80099da:	f002 fbeb 	bl	800c1b4 <__match>
 80099de:	b910      	cbnz	r0, 80099e6 <_strtod_l+0x376>
 80099e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099e2:	3301      	adds	r3, #1
 80099e4:	9315      	str	r3, [sp, #84]	; 0x54
 80099e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009c04 <_strtod_l+0x594>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	e67a      	b.n	80096e6 <_strtod_l+0x76>
 80099f0:	4881      	ldr	r0, [pc, #516]	; (8009bf8 <_strtod_l+0x588>)
 80099f2:	f001 fa69 	bl	800aec8 <nan>
 80099f6:	ec59 8b10 	vmov	r8, r9, d0
 80099fa:	e674      	b.n	80096e6 <_strtod_l+0x76>
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a00:	1afb      	subs	r3, r7, r3
 8009a02:	f1bb 0f00 	cmp.w	fp, #0
 8009a06:	bf08      	it	eq
 8009a08:	46b3      	moveq	fp, r6
 8009a0a:	2e10      	cmp	r6, #16
 8009a0c:	9308      	str	r3, [sp, #32]
 8009a0e:	4635      	mov	r5, r6
 8009a10:	bfa8      	it	ge
 8009a12:	2510      	movge	r5, #16
 8009a14:	f7f6 fd76 	bl	8000504 <__aeabi_ui2d>
 8009a18:	2e09      	cmp	r6, #9
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	dd13      	ble.n	8009a48 <_strtod_l+0x3d8>
 8009a20:	4b76      	ldr	r3, [pc, #472]	; (8009bfc <_strtod_l+0x58c>)
 8009a22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009a26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4650      	mov	r0, sl
 8009a32:	4689      	mov	r9, r1
 8009a34:	f7f6 fd66 	bl	8000504 <__aeabi_ui2d>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f6 fc24 	bl	800028c <__adddf3>
 8009a44:	4680      	mov	r8, r0
 8009a46:	4689      	mov	r9, r1
 8009a48:	2e0f      	cmp	r6, #15
 8009a4a:	dc38      	bgt.n	8009abe <_strtod_l+0x44e>
 8009a4c:	9b08      	ldr	r3, [sp, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f43f ae49 	beq.w	80096e6 <_strtod_l+0x76>
 8009a54:	dd24      	ble.n	8009aa0 <_strtod_l+0x430>
 8009a56:	2b16      	cmp	r3, #22
 8009a58:	dc0b      	bgt.n	8009a72 <_strtod_l+0x402>
 8009a5a:	4968      	ldr	r1, [pc, #416]	; (8009bfc <_strtod_l+0x58c>)
 8009a5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a64:	4642      	mov	r2, r8
 8009a66:	464b      	mov	r3, r9
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	4689      	mov	r9, r1
 8009a70:	e639      	b.n	80096e6 <_strtod_l+0x76>
 8009a72:	9a08      	ldr	r2, [sp, #32]
 8009a74:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	db20      	blt.n	8009abe <_strtod_l+0x44e>
 8009a7c:	4c5f      	ldr	r4, [pc, #380]	; (8009bfc <_strtod_l+0x58c>)
 8009a7e:	f1c6 060f 	rsb	r6, r6, #15
 8009a82:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009a86:	4642      	mov	r2, r8
 8009a88:	464b      	mov	r3, r9
 8009a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a8e:	f7f6 fdb3 	bl	80005f8 <__aeabi_dmul>
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	1b9e      	subs	r6, r3, r6
 8009a96:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009a9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a9e:	e7e3      	b.n	8009a68 <_strtod_l+0x3f8>
 8009aa0:	9b08      	ldr	r3, [sp, #32]
 8009aa2:	3316      	adds	r3, #22
 8009aa4:	db0b      	blt.n	8009abe <_strtod_l+0x44e>
 8009aa6:	9b05      	ldr	r3, [sp, #20]
 8009aa8:	1bdf      	subs	r7, r3, r7
 8009aaa:	4b54      	ldr	r3, [pc, #336]	; (8009bfc <_strtod_l+0x58c>)
 8009aac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f6 fec8 	bl	800084c <__aeabi_ddiv>
 8009abc:	e7d6      	b.n	8009a6c <_strtod_l+0x3fc>
 8009abe:	9b08      	ldr	r3, [sp, #32]
 8009ac0:	1b75      	subs	r5, r6, r5
 8009ac2:	441d      	add	r5, r3
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	dd70      	ble.n	8009baa <_strtod_l+0x53a>
 8009ac8:	f015 030f 	ands.w	r3, r5, #15
 8009acc:	d00a      	beq.n	8009ae4 <_strtod_l+0x474>
 8009ace:	494b      	ldr	r1, [pc, #300]	; (8009bfc <_strtod_l+0x58c>)
 8009ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	4689      	mov	r9, r1
 8009ae4:	f035 050f 	bics.w	r5, r5, #15
 8009ae8:	d04d      	beq.n	8009b86 <_strtod_l+0x516>
 8009aea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009aee:	dd22      	ble.n	8009b36 <_strtod_l+0x4c6>
 8009af0:	2500      	movs	r5, #0
 8009af2:	46ab      	mov	fp, r5
 8009af4:	9509      	str	r5, [sp, #36]	; 0x24
 8009af6:	9505      	str	r5, [sp, #20]
 8009af8:	2322      	movs	r3, #34	; 0x22
 8009afa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009c04 <_strtod_l+0x594>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	f04f 0800 	mov.w	r8, #0
 8009b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f43f aded 	beq.w	80096e6 <_strtod_l+0x76>
 8009b0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f002 fd06 	bl	800c520 <_Bfree>
 8009b14:	9905      	ldr	r1, [sp, #20]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f002 fd02 	bl	800c520 <_Bfree>
 8009b1c:	4659      	mov	r1, fp
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f002 fcfe 	bl	800c520 <_Bfree>
 8009b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b26:	4620      	mov	r0, r4
 8009b28:	f002 fcfa 	bl	800c520 <_Bfree>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f002 fcf6 	bl	800c520 <_Bfree>
 8009b34:	e5d7      	b.n	80096e6 <_strtod_l+0x76>
 8009b36:	4b32      	ldr	r3, [pc, #200]	; (8009c00 <_strtod_l+0x590>)
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	112d      	asrs	r5, r5, #4
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4649      	mov	r1, r9
 8009b42:	469a      	mov	sl, r3
 8009b44:	2d01      	cmp	r5, #1
 8009b46:	dc21      	bgt.n	8009b8c <_strtod_l+0x51c>
 8009b48:	b10b      	cbz	r3, 8009b4e <_strtod_l+0x4de>
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	4689      	mov	r9, r1
 8009b4e:	492c      	ldr	r1, [pc, #176]	; (8009c00 <_strtod_l+0x590>)
 8009b50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009b58:	4642      	mov	r2, r8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	4b27      	ldr	r3, [pc, #156]	; (8009c04 <_strtod_l+0x594>)
 8009b66:	460a      	mov	r2, r1
 8009b68:	400b      	ands	r3, r1
 8009b6a:	4927      	ldr	r1, [pc, #156]	; (8009c08 <_strtod_l+0x598>)
 8009b6c:	428b      	cmp	r3, r1
 8009b6e:	4680      	mov	r8, r0
 8009b70:	d8be      	bhi.n	8009af0 <_strtod_l+0x480>
 8009b72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b76:	428b      	cmp	r3, r1
 8009b78:	bf86      	itte	hi
 8009b7a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009c0c <_strtod_l+0x59c>
 8009b7e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b86:	2300      	movs	r3, #0
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	e07b      	b.n	8009c84 <_strtod_l+0x614>
 8009b8c:	07ea      	lsls	r2, r5, #31
 8009b8e:	d505      	bpl.n	8009b9c <_strtod_l+0x52c>
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9a04      	ldr	r2, [sp, #16]
 8009b9e:	3208      	adds	r2, #8
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	106d      	asrs	r5, r5, #1
 8009ba6:	9204      	str	r2, [sp, #16]
 8009ba8:	e7cc      	b.n	8009b44 <_strtod_l+0x4d4>
 8009baa:	d0ec      	beq.n	8009b86 <_strtod_l+0x516>
 8009bac:	426d      	negs	r5, r5
 8009bae:	f015 020f 	ands.w	r2, r5, #15
 8009bb2:	d00a      	beq.n	8009bca <_strtod_l+0x55a>
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <_strtod_l+0x58c>)
 8009bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f7f6 fe43 	bl	800084c <__aeabi_ddiv>
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	112d      	asrs	r5, r5, #4
 8009bcc:	d0db      	beq.n	8009b86 <_strtod_l+0x516>
 8009bce:	2d1f      	cmp	r5, #31
 8009bd0:	dd1e      	ble.n	8009c10 <_strtod_l+0x5a0>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	46ab      	mov	fp, r5
 8009bd6:	9509      	str	r5, [sp, #36]	; 0x24
 8009bd8:	9505      	str	r5, [sp, #20]
 8009bda:	2322      	movs	r3, #34	; 0x22
 8009bdc:	f04f 0800 	mov.w	r8, #0
 8009be0:	f04f 0900 	mov.w	r9, #0
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	e78d      	b.n	8009b04 <_strtod_l+0x494>
 8009be8:	0800d9c5 	.word	0x0800d9c5
 8009bec:	0800d97c 	.word	0x0800d97c
 8009bf0:	0800d9bd 	.word	0x0800d9bd
 8009bf4:	0800d9f7 	.word	0x0800d9f7
 8009bf8:	0800dd89 	.word	0x0800dd89
 8009bfc:	0800db68 	.word	0x0800db68
 8009c00:	0800db40 	.word	0x0800db40
 8009c04:	7ff00000 	.word	0x7ff00000
 8009c08:	7ca00000 	.word	0x7ca00000
 8009c0c:	7fefffff 	.word	0x7fefffff
 8009c10:	f015 0310 	ands.w	r3, r5, #16
 8009c14:	bf18      	it	ne
 8009c16:	236a      	movne	r3, #106	; 0x6a
 8009c18:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009fbc <_strtod_l+0x94c>
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	2300      	movs	r3, #0
 8009c24:	07ea      	lsls	r2, r5, #31
 8009c26:	d504      	bpl.n	8009c32 <_strtod_l+0x5c2>
 8009c28:	e9da 2300 	ldrd	r2, r3, [sl]
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	2301      	movs	r3, #1
 8009c32:	106d      	asrs	r5, r5, #1
 8009c34:	f10a 0a08 	add.w	sl, sl, #8
 8009c38:	d1f4      	bne.n	8009c24 <_strtod_l+0x5b4>
 8009c3a:	b10b      	cbz	r3, 8009c40 <_strtod_l+0x5d0>
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4689      	mov	r9, r1
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	b1bb      	cbz	r3, 8009c74 <_strtod_l+0x604>
 8009c44:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009c48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	4649      	mov	r1, r9
 8009c50:	dd10      	ble.n	8009c74 <_strtod_l+0x604>
 8009c52:	2b1f      	cmp	r3, #31
 8009c54:	f340 811e 	ble.w	8009e94 <_strtod_l+0x824>
 8009c58:	2b34      	cmp	r3, #52	; 0x34
 8009c5a:	bfde      	ittt	le
 8009c5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009c60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009c64:	4093      	lslle	r3, r2
 8009c66:	f04f 0800 	mov.w	r8, #0
 8009c6a:	bfcc      	ite	gt
 8009c6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c70:	ea03 0901 	andle.w	r9, r3, r1
 8009c74:	2200      	movs	r2, #0
 8009c76:	2300      	movs	r3, #0
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 ff24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1a6      	bne.n	8009bd2 <_strtod_l+0x562>
 8009c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c8a:	4633      	mov	r3, r6
 8009c8c:	465a      	mov	r2, fp
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f002 fcae 	bl	800c5f0 <__s2b>
 8009c94:	9009      	str	r0, [sp, #36]	; 0x24
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f af2a 	beq.w	8009af0 <_strtod_l+0x480>
 8009c9c:	9a08      	ldr	r2, [sp, #32]
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	eba3 0307 	sub.w	r3, r3, r7
 8009ca6:	bfa8      	it	ge
 8009ca8:	2300      	movge	r3, #0
 8009caa:	930c      	str	r3, [sp, #48]	; 0x30
 8009cac:	2500      	movs	r5, #0
 8009cae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009cb2:	9312      	str	r3, [sp, #72]	; 0x48
 8009cb4:	46ab      	mov	fp, r5
 8009cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb8:	4620      	mov	r0, r4
 8009cba:	6859      	ldr	r1, [r3, #4]
 8009cbc:	f002 fbf0 	bl	800c4a0 <_Balloc>
 8009cc0:	9005      	str	r0, [sp, #20]
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f43f af18 	beq.w	8009af8 <_strtod_l+0x488>
 8009cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	3202      	adds	r2, #2
 8009cce:	f103 010c 	add.w	r1, r3, #12
 8009cd2:	0092      	lsls	r2, r2, #2
 8009cd4:	300c      	adds	r0, #12
 8009cd6:	f001 f8e7 	bl	800aea8 <memcpy>
 8009cda:	ec49 8b10 	vmov	d0, r8, r9
 8009cde:	aa18      	add	r2, sp, #96	; 0x60
 8009ce0:	a917      	add	r1, sp, #92	; 0x5c
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f002 ffb8 	bl	800cc58 <__d2b>
 8009ce8:	ec49 8b18 	vmov	d8, r8, r9
 8009cec:	9016      	str	r0, [sp, #88]	; 0x58
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f af02 	beq.w	8009af8 <_strtod_l+0x488>
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f002 fd12 	bl	800c720 <__i2b>
 8009cfc:	4683      	mov	fp, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f aefa 	beq.w	8009af8 <_strtod_l+0x488>
 8009d04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009d06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d08:	2e00      	cmp	r6, #0
 8009d0a:	bfab      	itete	ge
 8009d0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009d0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009d10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009d16:	bfac      	ite	ge
 8009d18:	eb06 0a03 	addge.w	sl, r6, r3
 8009d1c:	1b9f      	sublt	r7, r3, r6
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	1af6      	subs	r6, r6, r3
 8009d22:	4416      	add	r6, r2
 8009d24:	4ba0      	ldr	r3, [pc, #640]	; (8009fa8 <_strtod_l+0x938>)
 8009d26:	3e01      	subs	r6, #1
 8009d28:	429e      	cmp	r6, r3
 8009d2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d2e:	f280 80c4 	bge.w	8009eba <_strtod_l+0x84a>
 8009d32:	1b9b      	subs	r3, r3, r6
 8009d34:	2b1f      	cmp	r3, #31
 8009d36:	eba2 0203 	sub.w	r2, r2, r3
 8009d3a:	f04f 0101 	mov.w	r1, #1
 8009d3e:	f300 80b0 	bgt.w	8009ea2 <_strtod_l+0x832>
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	930e      	str	r3, [sp, #56]	; 0x38
 8009d48:	2300      	movs	r3, #0
 8009d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d4c:	eb0a 0602 	add.w	r6, sl, r2
 8009d50:	9b04      	ldr	r3, [sp, #16]
 8009d52:	45b2      	cmp	sl, r6
 8009d54:	4417      	add	r7, r2
 8009d56:	441f      	add	r7, r3
 8009d58:	4653      	mov	r3, sl
 8009d5a:	bfa8      	it	ge
 8009d5c:	4633      	movge	r3, r6
 8009d5e:	42bb      	cmp	r3, r7
 8009d60:	bfa8      	it	ge
 8009d62:	463b      	movge	r3, r7
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfc2      	ittt	gt
 8009d68:	1af6      	subgt	r6, r6, r3
 8009d6a:	1aff      	subgt	r7, r7, r3
 8009d6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dd17      	ble.n	8009da6 <_strtod_l+0x736>
 8009d76:	4659      	mov	r1, fp
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f002 fd90 	bl	800c8a0 <__pow5mult>
 8009d80:	4683      	mov	fp, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f aeb8 	beq.w	8009af8 <_strtod_l+0x488>
 8009d88:	4601      	mov	r1, r0
 8009d8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f002 fcdd 	bl	800c74c <__multiply>
 8009d92:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f aeaf 	beq.w	8009af8 <_strtod_l+0x488>
 8009d9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f002 fbbf 	bl	800c520 <_Bfree>
 8009da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da4:	9316      	str	r3, [sp, #88]	; 0x58
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	f300 808c 	bgt.w	8009ec4 <_strtod_l+0x854>
 8009dac:	9b08      	ldr	r3, [sp, #32]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	dd08      	ble.n	8009dc4 <_strtod_l+0x754>
 8009db2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009db4:	9905      	ldr	r1, [sp, #20]
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 fd72 	bl	800c8a0 <__pow5mult>
 8009dbc:	9005      	str	r0, [sp, #20]
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f ae9a 	beq.w	8009af8 <_strtod_l+0x488>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	dd08      	ble.n	8009dda <_strtod_l+0x76a>
 8009dc8:	9905      	ldr	r1, [sp, #20]
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f002 fdc1 	bl	800c954 <__lshift>
 8009dd2:	9005      	str	r0, [sp, #20]
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f ae8f 	beq.w	8009af8 <_strtod_l+0x488>
 8009dda:	f1ba 0f00 	cmp.w	sl, #0
 8009dde:	dd08      	ble.n	8009df2 <_strtod_l+0x782>
 8009de0:	4659      	mov	r1, fp
 8009de2:	4652      	mov	r2, sl
 8009de4:	4620      	mov	r0, r4
 8009de6:	f002 fdb5 	bl	800c954 <__lshift>
 8009dea:	4683      	mov	fp, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f ae83 	beq.w	8009af8 <_strtod_l+0x488>
 8009df2:	9a05      	ldr	r2, [sp, #20]
 8009df4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009df6:	4620      	mov	r0, r4
 8009df8:	f002 fe34 	bl	800ca64 <__mdiff>
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f ae7a 	beq.w	8009af8 <_strtod_l+0x488>
 8009e04:	68c3      	ldr	r3, [r0, #12]
 8009e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60c3      	str	r3, [r0, #12]
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	f002 fe0d 	bl	800ca2c <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	da60      	bge.n	8009ed8 <_strtod_l+0x868>
 8009e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e18:	ea53 0308 	orrs.w	r3, r3, r8
 8009e1c:	f040 8084 	bne.w	8009f28 <_strtod_l+0x8b8>
 8009e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d17f      	bne.n	8009f28 <_strtod_l+0x8b8>
 8009e28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e2c:	0d1b      	lsrs	r3, r3, #20
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e34:	d978      	bls.n	8009f28 <_strtod_l+0x8b8>
 8009e36:	696b      	ldr	r3, [r5, #20]
 8009e38:	b913      	cbnz	r3, 8009e40 <_strtod_l+0x7d0>
 8009e3a:	692b      	ldr	r3, [r5, #16]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	dd73      	ble.n	8009f28 <_strtod_l+0x8b8>
 8009e40:	4629      	mov	r1, r5
 8009e42:	2201      	movs	r2, #1
 8009e44:	4620      	mov	r0, r4
 8009e46:	f002 fd85 	bl	800c954 <__lshift>
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	f002 fded 	bl	800ca2c <__mcmp>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	dd68      	ble.n	8009f28 <_strtod_l+0x8b8>
 8009e56:	9904      	ldr	r1, [sp, #16]
 8009e58:	4a54      	ldr	r2, [pc, #336]	; (8009fac <_strtod_l+0x93c>)
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	f000 8084 	beq.w	8009f6a <_strtod_l+0x8fa>
 8009e62:	ea02 0109 	and.w	r1, r2, r9
 8009e66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e6a:	dc7e      	bgt.n	8009f6a <_strtod_l+0x8fa>
 8009e6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e70:	f77f aeb3 	ble.w	8009bda <_strtod_l+0x56a>
 8009e74:	4b4e      	ldr	r3, [pc, #312]	; (8009fb0 <_strtod_l+0x940>)
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <_strtod_l+0x93c>)
 8009e82:	400b      	ands	r3, r1
 8009e84:	4680      	mov	r8, r0
 8009e86:	4689      	mov	r9, r1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f47f ae3f 	bne.w	8009b0c <_strtod_l+0x49c>
 8009e8e:	2322      	movs	r3, #34	; 0x22
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	e63b      	b.n	8009b0c <_strtod_l+0x49c>
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	ea03 0808 	and.w	r8, r3, r8
 8009ea0:	e6e8      	b.n	8009c74 <_strtod_l+0x604>
 8009ea2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ea6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009eaa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009eae:	36e2      	adds	r6, #226	; 0xe2
 8009eb0:	fa01 f306 	lsl.w	r3, r1, r6
 8009eb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009eb8:	e748      	b.n	8009d4c <_strtod_l+0x6dc>
 8009eba:	2100      	movs	r1, #0
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009ec2:	e743      	b.n	8009d4c <_strtod_l+0x6dc>
 8009ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f002 fd43 	bl	800c954 <__lshift>
 8009ece:	9016      	str	r0, [sp, #88]	; 0x58
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f47f af6b 	bne.w	8009dac <_strtod_l+0x73c>
 8009ed6:	e60f      	b.n	8009af8 <_strtod_l+0x488>
 8009ed8:	46ca      	mov	sl, r9
 8009eda:	d171      	bne.n	8009fc0 <_strtod_l+0x950>
 8009edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ede:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ee2:	b352      	cbz	r2, 8009f3a <_strtod_l+0x8ca>
 8009ee4:	4a33      	ldr	r2, [pc, #204]	; (8009fb4 <_strtod_l+0x944>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d12a      	bne.n	8009f40 <_strtod_l+0x8d0>
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	4641      	mov	r1, r8
 8009eee:	b1fb      	cbz	r3, 8009f30 <_strtod_l+0x8c0>
 8009ef0:	4b2e      	ldr	r3, [pc, #184]	; (8009fac <_strtod_l+0x93c>)
 8009ef2:	ea09 0303 	and.w	r3, r9, r3
 8009ef6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	d81a      	bhi.n	8009f36 <_strtod_l+0x8c6>
 8009f00:	0d1b      	lsrs	r3, r3, #20
 8009f02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d118      	bne.n	8009f40 <_strtod_l+0x8d0>
 8009f0e:	4b2a      	ldr	r3, [pc, #168]	; (8009fb8 <_strtod_l+0x948>)
 8009f10:	459a      	cmp	sl, r3
 8009f12:	d102      	bne.n	8009f1a <_strtod_l+0x8aa>
 8009f14:	3101      	adds	r1, #1
 8009f16:	f43f adef 	beq.w	8009af8 <_strtod_l+0x488>
 8009f1a:	4b24      	ldr	r3, [pc, #144]	; (8009fac <_strtod_l+0x93c>)
 8009f1c:	ea0a 0303 	and.w	r3, sl, r3
 8009f20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009f24:	f04f 0800 	mov.w	r8, #0
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1a2      	bne.n	8009e74 <_strtod_l+0x804>
 8009f2e:	e5ed      	b.n	8009b0c <_strtod_l+0x49c>
 8009f30:	f04f 33ff 	mov.w	r3, #4294967295
 8009f34:	e7e9      	b.n	8009f0a <_strtod_l+0x89a>
 8009f36:	4613      	mov	r3, r2
 8009f38:	e7e7      	b.n	8009f0a <_strtod_l+0x89a>
 8009f3a:	ea53 0308 	orrs.w	r3, r3, r8
 8009f3e:	d08a      	beq.n	8009e56 <_strtod_l+0x7e6>
 8009f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f42:	b1e3      	cbz	r3, 8009f7e <_strtod_l+0x90e>
 8009f44:	ea13 0f0a 	tst.w	r3, sl
 8009f48:	d0ee      	beq.n	8009f28 <_strtod_l+0x8b8>
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4c:	9a04      	ldr	r2, [sp, #16]
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	b1c3      	cbz	r3, 8009f86 <_strtod_l+0x916>
 8009f54:	f7ff fb6d 	bl	8009632 <sulp>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	ec51 0b18 	vmov	r0, r1, d8
 8009f60:	f7f6 f994 	bl	800028c <__adddf3>
 8009f64:	4680      	mov	r8, r0
 8009f66:	4689      	mov	r9, r1
 8009f68:	e7de      	b.n	8009f28 <_strtod_l+0x8b8>
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f78:	f04f 38ff 	mov.w	r8, #4294967295
 8009f7c:	e7d4      	b.n	8009f28 <_strtod_l+0x8b8>
 8009f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f80:	ea13 0f08 	tst.w	r3, r8
 8009f84:	e7e0      	b.n	8009f48 <_strtod_l+0x8d8>
 8009f86:	f7ff fb54 	bl	8009632 <sulp>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	ec51 0b18 	vmov	r0, r1, d8
 8009f92:	f7f6 f979 	bl	8000288 <__aeabi_dsub>
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	4689      	mov	r9, r1
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d0c0      	beq.n	8009f28 <_strtod_l+0x8b8>
 8009fa6:	e618      	b.n	8009bda <_strtod_l+0x56a>
 8009fa8:	fffffc02 	.word	0xfffffc02
 8009fac:	7ff00000 	.word	0x7ff00000
 8009fb0:	39500000 	.word	0x39500000
 8009fb4:	000fffff 	.word	0x000fffff
 8009fb8:	7fefffff 	.word	0x7fefffff
 8009fbc:	0800d990 	.word	0x0800d990
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f002 fea2 	bl	800cd0c <__ratio>
 8009fc8:	ec57 6b10 	vmov	r6, r7, d0
 8009fcc:	ee10 0a10 	vmov	r0, s0
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 fd8a 	bl	8000af0 <__aeabi_dcmple>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d071      	beq.n	800a0c4 <_strtod_l+0xa54>
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d17c      	bne.n	800a0e0 <_strtod_l+0xa70>
 8009fe6:	f1b8 0f00 	cmp.w	r8, #0
 8009fea:	d15a      	bne.n	800a0a2 <_strtod_l+0xa32>
 8009fec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d15d      	bne.n	800a0b0 <_strtod_l+0xa40>
 8009ff4:	4b90      	ldr	r3, [pc, #576]	; (800a238 <_strtod_l+0xbc8>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800a000:	2800      	cmp	r0, #0
 800a002:	d15c      	bne.n	800a0be <_strtod_l+0xa4e>
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	4b8c      	ldr	r3, [pc, #560]	; (800a23c <_strtod_l+0xbcc>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a018:	9606      	str	r6, [sp, #24]
 800a01a:	9307      	str	r3, [sp, #28]
 800a01c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a020:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a024:	4b86      	ldr	r3, [pc, #536]	; (800a240 <_strtod_l+0xbd0>)
 800a026:	ea0a 0303 	and.w	r3, sl, r3
 800a02a:	930d      	str	r3, [sp, #52]	; 0x34
 800a02c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a02e:	4b85      	ldr	r3, [pc, #532]	; (800a244 <_strtod_l+0xbd4>)
 800a030:	429a      	cmp	r2, r3
 800a032:	f040 8090 	bne.w	800a156 <_strtod_l+0xae6>
 800a036:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a03a:	ec49 8b10 	vmov	d0, r8, r9
 800a03e:	f002 fd9b 	bl	800cb78 <__ulp>
 800a042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a046:	ec51 0b10 	vmov	r0, r1, d0
 800a04a:	f7f6 fad5 	bl	80005f8 <__aeabi_dmul>
 800a04e:	4642      	mov	r2, r8
 800a050:	464b      	mov	r3, r9
 800a052:	f7f6 f91b 	bl	800028c <__adddf3>
 800a056:	460b      	mov	r3, r1
 800a058:	4979      	ldr	r1, [pc, #484]	; (800a240 <_strtod_l+0xbd0>)
 800a05a:	4a7b      	ldr	r2, [pc, #492]	; (800a248 <_strtod_l+0xbd8>)
 800a05c:	4019      	ands	r1, r3
 800a05e:	4291      	cmp	r1, r2
 800a060:	4680      	mov	r8, r0
 800a062:	d944      	bls.n	800a0ee <_strtod_l+0xa7e>
 800a064:	ee18 2a90 	vmov	r2, s17
 800a068:	4b78      	ldr	r3, [pc, #480]	; (800a24c <_strtod_l+0xbdc>)
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d104      	bne.n	800a078 <_strtod_l+0xa08>
 800a06e:	ee18 3a10 	vmov	r3, s16
 800a072:	3301      	adds	r3, #1
 800a074:	f43f ad40 	beq.w	8009af8 <_strtod_l+0x488>
 800a078:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a24c <_strtod_l+0xbdc>
 800a07c:	f04f 38ff 	mov.w	r8, #4294967295
 800a080:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a082:	4620      	mov	r0, r4
 800a084:	f002 fa4c 	bl	800c520 <_Bfree>
 800a088:	9905      	ldr	r1, [sp, #20]
 800a08a:	4620      	mov	r0, r4
 800a08c:	f002 fa48 	bl	800c520 <_Bfree>
 800a090:	4659      	mov	r1, fp
 800a092:	4620      	mov	r0, r4
 800a094:	f002 fa44 	bl	800c520 <_Bfree>
 800a098:	4629      	mov	r1, r5
 800a09a:	4620      	mov	r0, r4
 800a09c:	f002 fa40 	bl	800c520 <_Bfree>
 800a0a0:	e609      	b.n	8009cb6 <_strtod_l+0x646>
 800a0a2:	f1b8 0f01 	cmp.w	r8, #1
 800a0a6:	d103      	bne.n	800a0b0 <_strtod_l+0xa40>
 800a0a8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ac:	f43f ad95 	beq.w	8009bda <_strtod_l+0x56a>
 800a0b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a208 <_strtod_l+0xb98>
 800a0b4:	4f60      	ldr	r7, [pc, #384]	; (800a238 <_strtod_l+0xbc8>)
 800a0b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	e7ae      	b.n	800a01c <_strtod_l+0x9ac>
 800a0be:	4f5f      	ldr	r7, [pc, #380]	; (800a23c <_strtod_l+0xbcc>)
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	e7a7      	b.n	800a014 <_strtod_l+0x9a4>
 800a0c4:	4b5d      	ldr	r3, [pc, #372]	; (800a23c <_strtod_l+0xbcc>)
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f7f6 fa94 	bl	80005f8 <__aeabi_dmul>
 800a0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d09c      	beq.n	800a014 <_strtod_l+0x9a4>
 800a0da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a0de:	e79d      	b.n	800a01c <_strtod_l+0x9ac>
 800a0e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a210 <_strtod_l+0xba0>
 800a0e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0e8:	ec57 6b17 	vmov	r6, r7, d7
 800a0ec:	e796      	b.n	800a01c <_strtod_l+0x9ac>
 800a0ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	46ca      	mov	sl, r9
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1c2      	bne.n	800a080 <_strtod_l+0xa10>
 800a0fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a100:	0d1b      	lsrs	r3, r3, #20
 800a102:	051b      	lsls	r3, r3, #20
 800a104:	429a      	cmp	r2, r3
 800a106:	d1bb      	bne.n	800a080 <_strtod_l+0xa10>
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fdd4 	bl	8000cb8 <__aeabi_d2lz>
 800a110:	f7f6 fa44 	bl	800059c <__aeabi_l2d>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4630      	mov	r0, r6
 800a11a:	4639      	mov	r1, r7
 800a11c:	f7f6 f8b4 	bl	8000288 <__aeabi_dsub>
 800a120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a122:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a126:	ea43 0308 	orr.w	r3, r3, r8
 800a12a:	4313      	orrs	r3, r2
 800a12c:	4606      	mov	r6, r0
 800a12e:	460f      	mov	r7, r1
 800a130:	d054      	beq.n	800a1dc <_strtod_l+0xb6c>
 800a132:	a339      	add	r3, pc, #228	; (adr r3, 800a218 <_strtod_l+0xba8>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f47f ace5 	bne.w	8009b0c <_strtod_l+0x49c>
 800a142:	a337      	add	r3, pc, #220	; (adr r3, 800a220 <_strtod_l+0xbb0>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 fce4 	bl	8000b18 <__aeabi_dcmpgt>
 800a150:	2800      	cmp	r0, #0
 800a152:	d095      	beq.n	800a080 <_strtod_l+0xa10>
 800a154:	e4da      	b.n	8009b0c <_strtod_l+0x49c>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	b333      	cbz	r3, 800a1a8 <_strtod_l+0xb38>
 800a15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a160:	d822      	bhi.n	800a1a8 <_strtod_l+0xb38>
 800a162:	a331      	add	r3, pc, #196	; (adr r3, 800a228 <_strtod_l+0xbb8>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 fcc0 	bl	8000af0 <__aeabi_dcmple>
 800a170:	b1a0      	cbz	r0, 800a19c <_strtod_l+0xb2c>
 800a172:	4639      	mov	r1, r7
 800a174:	4630      	mov	r0, r6
 800a176:	f7f6 fd17 	bl	8000ba8 <__aeabi_d2uiz>
 800a17a:	2801      	cmp	r0, #1
 800a17c:	bf38      	it	cc
 800a17e:	2001      	movcc	r0, #1
 800a180:	f7f6 f9c0 	bl	8000504 <__aeabi_ui2d>
 800a184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	bb23      	cbnz	r3, 800a1d6 <_strtod_l+0xb66>
 800a18c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a190:	9010      	str	r0, [sp, #64]	; 0x40
 800a192:	9311      	str	r3, [sp, #68]	; 0x44
 800a194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a198:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a19c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a19e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a1b0:	eef0 0a68 	vmov.f32	s1, s17
 800a1b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a1b8:	f002 fcde 	bl	800cb78 <__ulp>
 800a1bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1c0:	ec53 2b10 	vmov	r2, r3, d0
 800a1c4:	f7f6 fa18 	bl	80005f8 <__aeabi_dmul>
 800a1c8:	ec53 2b18 	vmov	r2, r3, d8
 800a1cc:	f7f6 f85e 	bl	800028c <__adddf3>
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	e78d      	b.n	800a0f2 <_strtod_l+0xa82>
 800a1d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a1da:	e7db      	b.n	800a194 <_strtod_l+0xb24>
 800a1dc:	a314      	add	r3, pc, #80	; (adr r3, 800a230 <_strtod_l+0xbc0>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800a1e6:	e7b3      	b.n	800a150 <_strtod_l+0xae0>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	f7ff ba7c 	b.w	80096ee <_strtod_l+0x7e>
 800a1f6:	2a65      	cmp	r2, #101	; 0x65
 800a1f8:	f43f ab75 	beq.w	80098e6 <_strtod_l+0x276>
 800a1fc:	2a45      	cmp	r2, #69	; 0x45
 800a1fe:	f43f ab72 	beq.w	80098e6 <_strtod_l+0x276>
 800a202:	2301      	movs	r3, #1
 800a204:	f7ff bbaa 	b.w	800995c <_strtod_l+0x2ec>
 800a208:	00000000 	.word	0x00000000
 800a20c:	bff00000 	.word	0xbff00000
 800a210:	00000000 	.word	0x00000000
 800a214:	3ff00000 	.word	0x3ff00000
 800a218:	94a03595 	.word	0x94a03595
 800a21c:	3fdfffff 	.word	0x3fdfffff
 800a220:	35afe535 	.word	0x35afe535
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	ffc00000 	.word	0xffc00000
 800a22c:	41dfffff 	.word	0x41dfffff
 800a230:	94a03595 	.word	0x94a03595
 800a234:	3fcfffff 	.word	0x3fcfffff
 800a238:	3ff00000 	.word	0x3ff00000
 800a23c:	3fe00000 	.word	0x3fe00000
 800a240:	7ff00000 	.word	0x7ff00000
 800a244:	7fe00000 	.word	0x7fe00000
 800a248:	7c9fffff 	.word	0x7c9fffff
 800a24c:	7fefffff 	.word	0x7fefffff

0800a250 <strtod>:
 800a250:	460a      	mov	r2, r1
 800a252:	4601      	mov	r1, r0
 800a254:	4802      	ldr	r0, [pc, #8]	; (800a260 <strtod+0x10>)
 800a256:	4b03      	ldr	r3, [pc, #12]	; (800a264 <strtod+0x14>)
 800a258:	6800      	ldr	r0, [r0, #0]
 800a25a:	f7ff ba09 	b.w	8009670 <_strtod_l>
 800a25e:	bf00      	nop
 800a260:	200001d0 	.word	0x200001d0
 800a264:	20000018 	.word	0x20000018

0800a268 <__cvt>:
 800a268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a26c:	ec55 4b10 	vmov	r4, r5, d0
 800a270:	2d00      	cmp	r5, #0
 800a272:	460e      	mov	r6, r1
 800a274:	4619      	mov	r1, r3
 800a276:	462b      	mov	r3, r5
 800a278:	bfbb      	ittet	lt
 800a27a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a27e:	461d      	movlt	r5, r3
 800a280:	2300      	movge	r3, #0
 800a282:	232d      	movlt	r3, #45	; 0x2d
 800a284:	700b      	strb	r3, [r1, #0]
 800a286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a28c:	4691      	mov	r9, r2
 800a28e:	f023 0820 	bic.w	r8, r3, #32
 800a292:	bfbc      	itt	lt
 800a294:	4622      	movlt	r2, r4
 800a296:	4614      	movlt	r4, r2
 800a298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a29c:	d005      	beq.n	800a2aa <__cvt+0x42>
 800a29e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2a2:	d100      	bne.n	800a2a6 <__cvt+0x3e>
 800a2a4:	3601      	adds	r6, #1
 800a2a6:	2102      	movs	r1, #2
 800a2a8:	e000      	b.n	800a2ac <__cvt+0x44>
 800a2aa:	2103      	movs	r1, #3
 800a2ac:	ab03      	add	r3, sp, #12
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	ab02      	add	r3, sp, #8
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	ec45 4b10 	vmov	d0, r4, r5
 800a2b8:	4653      	mov	r3, sl
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	f000 fe94 	bl	800afe8 <_dtoa_r>
 800a2c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	d102      	bne.n	800a2ce <__cvt+0x66>
 800a2c8:	f019 0f01 	tst.w	r9, #1
 800a2cc:	d022      	beq.n	800a314 <__cvt+0xac>
 800a2ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2d2:	eb07 0906 	add.w	r9, r7, r6
 800a2d6:	d110      	bne.n	800a2fa <__cvt+0x92>
 800a2d8:	783b      	ldrb	r3, [r7, #0]
 800a2da:	2b30      	cmp	r3, #48	; 0x30
 800a2dc:	d10a      	bne.n	800a2f4 <__cvt+0x8c>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7f6 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ea:	b918      	cbnz	r0, 800a2f4 <__cvt+0x8c>
 800a2ec:	f1c6 0601 	rsb	r6, r6, #1
 800a2f0:	f8ca 6000 	str.w	r6, [sl]
 800a2f4:	f8da 3000 	ldr.w	r3, [sl]
 800a2f8:	4499      	add	r9, r3
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	f7f6 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a306:	b108      	cbz	r0, 800a30c <__cvt+0xa4>
 800a308:	f8cd 900c 	str.w	r9, [sp, #12]
 800a30c:	2230      	movs	r2, #48	; 0x30
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	454b      	cmp	r3, r9
 800a312:	d307      	bcc.n	800a324 <__cvt+0xbc>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a318:	1bdb      	subs	r3, r3, r7
 800a31a:	4638      	mov	r0, r7
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	b004      	add	sp, #16
 800a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a324:	1c59      	adds	r1, r3, #1
 800a326:	9103      	str	r1, [sp, #12]
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	e7f0      	b.n	800a30e <__cvt+0xa6>

0800a32c <__exponent>:
 800a32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a32e:	4603      	mov	r3, r0
 800a330:	2900      	cmp	r1, #0
 800a332:	bfb8      	it	lt
 800a334:	4249      	neglt	r1, r1
 800a336:	f803 2b02 	strb.w	r2, [r3], #2
 800a33a:	bfb4      	ite	lt
 800a33c:	222d      	movlt	r2, #45	; 0x2d
 800a33e:	222b      	movge	r2, #43	; 0x2b
 800a340:	2909      	cmp	r1, #9
 800a342:	7042      	strb	r2, [r0, #1]
 800a344:	dd2a      	ble.n	800a39c <__exponent+0x70>
 800a346:	f10d 0207 	add.w	r2, sp, #7
 800a34a:	4617      	mov	r7, r2
 800a34c:	260a      	movs	r6, #10
 800a34e:	4694      	mov	ip, r2
 800a350:	fb91 f5f6 	sdiv	r5, r1, r6
 800a354:	fb06 1415 	mls	r4, r6, r5, r1
 800a358:	3430      	adds	r4, #48	; 0x30
 800a35a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a35e:	460c      	mov	r4, r1
 800a360:	2c63      	cmp	r4, #99	; 0x63
 800a362:	f102 32ff 	add.w	r2, r2, #4294967295
 800a366:	4629      	mov	r1, r5
 800a368:	dcf1      	bgt.n	800a34e <__exponent+0x22>
 800a36a:	3130      	adds	r1, #48	; 0x30
 800a36c:	f1ac 0402 	sub.w	r4, ip, #2
 800a370:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a374:	1c41      	adds	r1, r0, #1
 800a376:	4622      	mov	r2, r4
 800a378:	42ba      	cmp	r2, r7
 800a37a:	d30a      	bcc.n	800a392 <__exponent+0x66>
 800a37c:	f10d 0209 	add.w	r2, sp, #9
 800a380:	eba2 020c 	sub.w	r2, r2, ip
 800a384:	42bc      	cmp	r4, r7
 800a386:	bf88      	it	hi
 800a388:	2200      	movhi	r2, #0
 800a38a:	4413      	add	r3, r2
 800a38c:	1a18      	subs	r0, r3, r0
 800a38e:	b003      	add	sp, #12
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a396:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a39a:	e7ed      	b.n	800a378 <__exponent+0x4c>
 800a39c:	2330      	movs	r3, #48	; 0x30
 800a39e:	3130      	adds	r1, #48	; 0x30
 800a3a0:	7083      	strb	r3, [r0, #2]
 800a3a2:	70c1      	strb	r1, [r0, #3]
 800a3a4:	1d03      	adds	r3, r0, #4
 800a3a6:	e7f1      	b.n	800a38c <__exponent+0x60>

0800a3a8 <_printf_float>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b02 	vpush	{d8}
 800a3b0:	b08d      	sub	sp, #52	; 0x34
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	461f      	mov	r7, r3
 800a3bc:	4605      	mov	r5, r0
 800a3be:	f000 fcfd 	bl	800adbc <_localeconv_r>
 800a3c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	f7f5 ff52 	bl	8000270 <strlen>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3dc:	3307      	adds	r3, #7
 800a3de:	f023 0307 	bic.w	r3, r3, #7
 800a3e2:	f103 0208 	add.w	r2, r3, #8
 800a3e6:	f8c8 2000 	str.w	r2, [r8]
 800a3ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3f8:	ee08 0a10 	vmov	s16, r0
 800a3fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a404:	4b9e      	ldr	r3, [pc, #632]	; (800a680 <_printf_float+0x2d8>)
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	f7f6 fb8f 	bl	8000b2c <__aeabi_dcmpun>
 800a40e:	bb88      	cbnz	r0, 800a474 <_printf_float+0xcc>
 800a410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a414:	4b9a      	ldr	r3, [pc, #616]	; (800a680 <_printf_float+0x2d8>)
 800a416:	f04f 32ff 	mov.w	r2, #4294967295
 800a41a:	f7f6 fb69 	bl	8000af0 <__aeabi_dcmple>
 800a41e:	bb48      	cbnz	r0, 800a474 <_printf_float+0xcc>
 800a420:	2200      	movs	r2, #0
 800a422:	2300      	movs	r3, #0
 800a424:	4640      	mov	r0, r8
 800a426:	4649      	mov	r1, r9
 800a428:	f7f6 fb58 	bl	8000adc <__aeabi_dcmplt>
 800a42c:	b110      	cbz	r0, 800a434 <_printf_float+0x8c>
 800a42e:	232d      	movs	r3, #45	; 0x2d
 800a430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a434:	4a93      	ldr	r2, [pc, #588]	; (800a684 <_printf_float+0x2dc>)
 800a436:	4b94      	ldr	r3, [pc, #592]	; (800a688 <_printf_float+0x2e0>)
 800a438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a43c:	bf94      	ite	ls
 800a43e:	4690      	movls	r8, r2
 800a440:	4698      	movhi	r8, r3
 800a442:	2303      	movs	r3, #3
 800a444:	6123      	str	r3, [r4, #16]
 800a446:	9b05      	ldr	r3, [sp, #20]
 800a448:	f023 0304 	bic.w	r3, r3, #4
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	f04f 0900 	mov.w	r9, #0
 800a452:	9700      	str	r7, [sp, #0]
 800a454:	4633      	mov	r3, r6
 800a456:	aa0b      	add	r2, sp, #44	; 0x2c
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f9da 	bl	800a814 <_printf_common>
 800a460:	3001      	adds	r0, #1
 800a462:	f040 8090 	bne.w	800a586 <_printf_float+0x1de>
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	b00d      	add	sp, #52	; 0x34
 800a46c:	ecbd 8b02 	vpop	{d8}
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a474:	4642      	mov	r2, r8
 800a476:	464b      	mov	r3, r9
 800a478:	4640      	mov	r0, r8
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f6 fb56 	bl	8000b2c <__aeabi_dcmpun>
 800a480:	b140      	cbz	r0, 800a494 <_printf_float+0xec>
 800a482:	464b      	mov	r3, r9
 800a484:	2b00      	cmp	r3, #0
 800a486:	bfbc      	itt	lt
 800a488:	232d      	movlt	r3, #45	; 0x2d
 800a48a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a48e:	4a7f      	ldr	r2, [pc, #508]	; (800a68c <_printf_float+0x2e4>)
 800a490:	4b7f      	ldr	r3, [pc, #508]	; (800a690 <_printf_float+0x2e8>)
 800a492:	e7d1      	b.n	800a438 <_printf_float+0x90>
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a49a:	9206      	str	r2, [sp, #24]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	d13f      	bne.n	800a520 <_printf_float+0x178>
 800a4a0:	2306      	movs	r3, #6
 800a4a2:	6063      	str	r3, [r4, #4]
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	6861      	ldr	r1, [r4, #4]
 800a4a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9303      	str	r3, [sp, #12]
 800a4b0:	ab0a      	add	r3, sp, #40	; 0x28
 800a4b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a4b6:	ab09      	add	r3, sp, #36	; 0x24
 800a4b8:	ec49 8b10 	vmov	d0, r8, r9
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	6022      	str	r2, [r4, #0]
 800a4c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f7ff fecf 	bl	800a268 <__cvt>
 800a4ca:	9b06      	ldr	r3, [sp, #24]
 800a4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4ce:	2b47      	cmp	r3, #71	; 0x47
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	d108      	bne.n	800a4e6 <_printf_float+0x13e>
 800a4d4:	1cc8      	adds	r0, r1, #3
 800a4d6:	db02      	blt.n	800a4de <_printf_float+0x136>
 800a4d8:	6863      	ldr	r3, [r4, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	dd41      	ble.n	800a562 <_printf_float+0x1ba>
 800a4de:	f1ab 0302 	sub.w	r3, fp, #2
 800a4e2:	fa5f fb83 	uxtb.w	fp, r3
 800a4e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4ea:	d820      	bhi.n	800a52e <_printf_float+0x186>
 800a4ec:	3901      	subs	r1, #1
 800a4ee:	465a      	mov	r2, fp
 800a4f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4f4:	9109      	str	r1, [sp, #36]	; 0x24
 800a4f6:	f7ff ff19 	bl	800a32c <__exponent>
 800a4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4fc:	1813      	adds	r3, r2, r0
 800a4fe:	2a01      	cmp	r2, #1
 800a500:	4681      	mov	r9, r0
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	dc02      	bgt.n	800a50c <_printf_float+0x164>
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	07d2      	lsls	r2, r2, #31
 800a50a:	d501      	bpl.n	800a510 <_printf_float+0x168>
 800a50c:	3301      	adds	r3, #1
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a514:	2b00      	cmp	r3, #0
 800a516:	d09c      	beq.n	800a452 <_printf_float+0xaa>
 800a518:	232d      	movs	r3, #45	; 0x2d
 800a51a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a51e:	e798      	b.n	800a452 <_printf_float+0xaa>
 800a520:	9a06      	ldr	r2, [sp, #24]
 800a522:	2a47      	cmp	r2, #71	; 0x47
 800a524:	d1be      	bne.n	800a4a4 <_printf_float+0xfc>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1bc      	bne.n	800a4a4 <_printf_float+0xfc>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7b9      	b.n	800a4a2 <_printf_float+0xfa>
 800a52e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a532:	d118      	bne.n	800a566 <_printf_float+0x1be>
 800a534:	2900      	cmp	r1, #0
 800a536:	6863      	ldr	r3, [r4, #4]
 800a538:	dd0b      	ble.n	800a552 <_printf_float+0x1aa>
 800a53a:	6121      	str	r1, [r4, #16]
 800a53c:	b913      	cbnz	r3, 800a544 <_printf_float+0x19c>
 800a53e:	6822      	ldr	r2, [r4, #0]
 800a540:	07d0      	lsls	r0, r2, #31
 800a542:	d502      	bpl.n	800a54a <_printf_float+0x1a2>
 800a544:	3301      	adds	r3, #1
 800a546:	440b      	add	r3, r1
 800a548:	6123      	str	r3, [r4, #16]
 800a54a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a54c:	f04f 0900 	mov.w	r9, #0
 800a550:	e7de      	b.n	800a510 <_printf_float+0x168>
 800a552:	b913      	cbnz	r3, 800a55a <_printf_float+0x1b2>
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	07d2      	lsls	r2, r2, #31
 800a558:	d501      	bpl.n	800a55e <_printf_float+0x1b6>
 800a55a:	3302      	adds	r3, #2
 800a55c:	e7f4      	b.n	800a548 <_printf_float+0x1a0>
 800a55e:	2301      	movs	r3, #1
 800a560:	e7f2      	b.n	800a548 <_printf_float+0x1a0>
 800a562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a568:	4299      	cmp	r1, r3
 800a56a:	db05      	blt.n	800a578 <_printf_float+0x1d0>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	6121      	str	r1, [r4, #16]
 800a570:	07d8      	lsls	r0, r3, #31
 800a572:	d5ea      	bpl.n	800a54a <_printf_float+0x1a2>
 800a574:	1c4b      	adds	r3, r1, #1
 800a576:	e7e7      	b.n	800a548 <_printf_float+0x1a0>
 800a578:	2900      	cmp	r1, #0
 800a57a:	bfd4      	ite	le
 800a57c:	f1c1 0202 	rsble	r2, r1, #2
 800a580:	2201      	movgt	r2, #1
 800a582:	4413      	add	r3, r2
 800a584:	e7e0      	b.n	800a548 <_printf_float+0x1a0>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	055a      	lsls	r2, r3, #21
 800a58a:	d407      	bmi.n	800a59c <_printf_float+0x1f4>
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	4642      	mov	r2, r8
 800a590:	4631      	mov	r1, r6
 800a592:	4628      	mov	r0, r5
 800a594:	47b8      	blx	r7
 800a596:	3001      	adds	r0, #1
 800a598:	d12c      	bne.n	800a5f4 <_printf_float+0x24c>
 800a59a:	e764      	b.n	800a466 <_printf_float+0xbe>
 800a59c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5a0:	f240 80e0 	bls.w	800a764 <_printf_float+0x3bc>
 800a5a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f7f6 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d034      	beq.n	800a61e <_printf_float+0x276>
 800a5b4:	4a37      	ldr	r2, [pc, #220]	; (800a694 <_printf_float+0x2ec>)
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f43f af51 	beq.w	800a466 <_printf_float+0xbe>
 800a5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	db02      	blt.n	800a5d2 <_printf_float+0x22a>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	07d8      	lsls	r0, r3, #31
 800a5d0:	d510      	bpl.n	800a5f4 <_printf_float+0x24c>
 800a5d2:	ee18 3a10 	vmov	r3, s16
 800a5d6:	4652      	mov	r2, sl
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f af41 	beq.w	800a466 <_printf_float+0xbe>
 800a5e4:	f04f 0800 	mov.w	r8, #0
 800a5e8:	f104 091a 	add.w	r9, r4, #26
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	4543      	cmp	r3, r8
 800a5f2:	dc09      	bgt.n	800a608 <_printf_float+0x260>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	079b      	lsls	r3, r3, #30
 800a5f8:	f100 8107 	bmi.w	800a80a <_printf_float+0x462>
 800a5fc:	68e0      	ldr	r0, [r4, #12]
 800a5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a600:	4298      	cmp	r0, r3
 800a602:	bfb8      	it	lt
 800a604:	4618      	movlt	r0, r3
 800a606:	e730      	b.n	800a46a <_printf_float+0xc2>
 800a608:	2301      	movs	r3, #1
 800a60a:	464a      	mov	r2, r9
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f af27 	beq.w	800a466 <_printf_float+0xbe>
 800a618:	f108 0801 	add.w	r8, r8, #1
 800a61c:	e7e6      	b.n	800a5ec <_printf_float+0x244>
 800a61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	dc39      	bgt.n	800a698 <_printf_float+0x2f0>
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <_printf_float+0x2ec>)
 800a626:	2301      	movs	r3, #1
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af19 	beq.w	800a466 <_printf_float+0xbe>
 800a634:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a638:	4313      	orrs	r3, r2
 800a63a:	d102      	bne.n	800a642 <_printf_float+0x29a>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07d9      	lsls	r1, r3, #31
 800a640:	d5d8      	bpl.n	800a5f4 <_printf_float+0x24c>
 800a642:	ee18 3a10 	vmov	r3, s16
 800a646:	4652      	mov	r2, sl
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af09 	beq.w	800a466 <_printf_float+0xbe>
 800a654:	f04f 0900 	mov.w	r9, #0
 800a658:	f104 0a1a 	add.w	sl, r4, #26
 800a65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65e:	425b      	negs	r3, r3
 800a660:	454b      	cmp	r3, r9
 800a662:	dc01      	bgt.n	800a668 <_printf_float+0x2c0>
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	e792      	b.n	800a58e <_printf_float+0x1e6>
 800a668:	2301      	movs	r3, #1
 800a66a:	4652      	mov	r2, sl
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	f43f aef7 	beq.w	800a466 <_printf_float+0xbe>
 800a678:	f109 0901 	add.w	r9, r9, #1
 800a67c:	e7ee      	b.n	800a65c <_printf_float+0x2b4>
 800a67e:	bf00      	nop
 800a680:	7fefffff 	.word	0x7fefffff
 800a684:	0800d9b8 	.word	0x0800d9b8
 800a688:	0800d9bc 	.word	0x0800d9bc
 800a68c:	0800d9c0 	.word	0x0800d9c0
 800a690:	0800d9c4 	.word	0x0800d9c4
 800a694:	0800d9c8 	.word	0x0800d9c8
 800a698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a69a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfa8      	it	ge
 800a6a0:	461a      	movge	r2, r3
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	4691      	mov	r9, r2
 800a6a6:	dc37      	bgt.n	800a718 <_printf_float+0x370>
 800a6a8:	f04f 0b00 	mov.w	fp, #0
 800a6ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b0:	f104 021a 	add.w	r2, r4, #26
 800a6b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	eba3 0309 	sub.w	r3, r3, r9
 800a6bc:	455b      	cmp	r3, fp
 800a6be:	dc33      	bgt.n	800a728 <_printf_float+0x380>
 800a6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	db3b      	blt.n	800a740 <_printf_float+0x398>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	07da      	lsls	r2, r3, #31
 800a6cc:	d438      	bmi.n	800a740 <_printf_float+0x398>
 800a6ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a6d2:	eba2 0903 	sub.w	r9, r2, r3
 800a6d6:	9b05      	ldr	r3, [sp, #20]
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	4591      	cmp	r9, r2
 800a6dc:	bfa8      	it	ge
 800a6de:	4691      	movge	r9, r2
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	dc35      	bgt.n	800a752 <_printf_float+0x3aa>
 800a6e6:	f04f 0800 	mov.w	r8, #0
 800a6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6ee:	f104 0a1a 	add.w	sl, r4, #26
 800a6f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	eba3 0309 	sub.w	r3, r3, r9
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	f77f af79 	ble.w	800a5f4 <_printf_float+0x24c>
 800a702:	2301      	movs	r3, #1
 800a704:	4652      	mov	r2, sl
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f aeaa 	beq.w	800a466 <_printf_float+0xbe>
 800a712:	f108 0801 	add.w	r8, r8, #1
 800a716:	e7ec      	b.n	800a6f2 <_printf_float+0x34a>
 800a718:	4613      	mov	r3, r2
 800a71a:	4631      	mov	r1, r6
 800a71c:	4642      	mov	r2, r8
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	d1c0      	bne.n	800a6a8 <_printf_float+0x300>
 800a726:	e69e      	b.n	800a466 <_printf_float+0xbe>
 800a728:	2301      	movs	r3, #1
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	9205      	str	r2, [sp, #20]
 800a730:	47b8      	blx	r7
 800a732:	3001      	adds	r0, #1
 800a734:	f43f ae97 	beq.w	800a466 <_printf_float+0xbe>
 800a738:	9a05      	ldr	r2, [sp, #20]
 800a73a:	f10b 0b01 	add.w	fp, fp, #1
 800a73e:	e7b9      	b.n	800a6b4 <_printf_float+0x30c>
 800a740:	ee18 3a10 	vmov	r3, s16
 800a744:	4652      	mov	r2, sl
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	d1be      	bne.n	800a6ce <_printf_float+0x326>
 800a750:	e689      	b.n	800a466 <_printf_float+0xbe>
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	464b      	mov	r3, r9
 800a756:	4442      	add	r2, r8
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	d1c1      	bne.n	800a6e6 <_printf_float+0x33e>
 800a762:	e680      	b.n	800a466 <_printf_float+0xbe>
 800a764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a766:	2a01      	cmp	r2, #1
 800a768:	dc01      	bgt.n	800a76e <_printf_float+0x3c6>
 800a76a:	07db      	lsls	r3, r3, #31
 800a76c:	d53a      	bpl.n	800a7e4 <_printf_float+0x43c>
 800a76e:	2301      	movs	r3, #1
 800a770:	4642      	mov	r2, r8
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f ae74 	beq.w	800a466 <_printf_float+0xbe>
 800a77e:	ee18 3a10 	vmov	r3, s16
 800a782:	4652      	mov	r2, sl
 800a784:	4631      	mov	r1, r6
 800a786:	4628      	mov	r0, r5
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f ae6b 	beq.w	800a466 <_printf_float+0xbe>
 800a790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a794:	2200      	movs	r2, #0
 800a796:	2300      	movs	r3, #0
 800a798:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a79c:	f7f6 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a0:	b9d8      	cbnz	r0, 800a7da <_printf_float+0x432>
 800a7a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7a6:	f108 0201 	add.w	r2, r8, #1
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d10e      	bne.n	800a7d2 <_printf_float+0x42a>
 800a7b4:	e657      	b.n	800a466 <_printf_float+0xbe>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f ae50 	beq.w	800a466 <_printf_float+0xbe>
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	4543      	cmp	r3, r8
 800a7d0:	dcf1      	bgt.n	800a7b6 <_printf_float+0x40e>
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7d8:	e6da      	b.n	800a590 <_printf_float+0x1e8>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	f104 0a1a 	add.w	sl, r4, #26
 800a7e2:	e7f2      	b.n	800a7ca <_printf_float+0x422>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	e7df      	b.n	800a7aa <_printf_float+0x402>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	464a      	mov	r2, r9
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	47b8      	blx	r7
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	f43f ae36 	beq.w	800a466 <_printf_float+0xbe>
 800a7fa:	f108 0801 	add.w	r8, r8, #1
 800a7fe:	68e3      	ldr	r3, [r4, #12]
 800a800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a802:	1a5b      	subs	r3, r3, r1
 800a804:	4543      	cmp	r3, r8
 800a806:	dcf0      	bgt.n	800a7ea <_printf_float+0x442>
 800a808:	e6f8      	b.n	800a5fc <_printf_float+0x254>
 800a80a:	f04f 0800 	mov.w	r8, #0
 800a80e:	f104 0919 	add.w	r9, r4, #25
 800a812:	e7f4      	b.n	800a7fe <_printf_float+0x456>

0800a814 <_printf_common>:
 800a814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	4616      	mov	r6, r2
 800a81a:	4699      	mov	r9, r3
 800a81c:	688a      	ldr	r2, [r1, #8]
 800a81e:	690b      	ldr	r3, [r1, #16]
 800a820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a824:	4293      	cmp	r3, r2
 800a826:	bfb8      	it	lt
 800a828:	4613      	movlt	r3, r2
 800a82a:	6033      	str	r3, [r6, #0]
 800a82c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a830:	4607      	mov	r7, r0
 800a832:	460c      	mov	r4, r1
 800a834:	b10a      	cbz	r2, 800a83a <_printf_common+0x26>
 800a836:	3301      	adds	r3, #1
 800a838:	6033      	str	r3, [r6, #0]
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	0699      	lsls	r1, r3, #26
 800a83e:	bf42      	ittt	mi
 800a840:	6833      	ldrmi	r3, [r6, #0]
 800a842:	3302      	addmi	r3, #2
 800a844:	6033      	strmi	r3, [r6, #0]
 800a846:	6825      	ldr	r5, [r4, #0]
 800a848:	f015 0506 	ands.w	r5, r5, #6
 800a84c:	d106      	bne.n	800a85c <_printf_common+0x48>
 800a84e:	f104 0a19 	add.w	sl, r4, #25
 800a852:	68e3      	ldr	r3, [r4, #12]
 800a854:	6832      	ldr	r2, [r6, #0]
 800a856:	1a9b      	subs	r3, r3, r2
 800a858:	42ab      	cmp	r3, r5
 800a85a:	dc26      	bgt.n	800a8aa <_printf_common+0x96>
 800a85c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a860:	1e13      	subs	r3, r2, #0
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	bf18      	it	ne
 800a866:	2301      	movne	r3, #1
 800a868:	0692      	lsls	r2, r2, #26
 800a86a:	d42b      	bmi.n	800a8c4 <_printf_common+0xb0>
 800a86c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a870:	4649      	mov	r1, r9
 800a872:	4638      	mov	r0, r7
 800a874:	47c0      	blx	r8
 800a876:	3001      	adds	r0, #1
 800a878:	d01e      	beq.n	800a8b8 <_printf_common+0xa4>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	f003 0306 	and.w	r3, r3, #6
 800a882:	2b04      	cmp	r3, #4
 800a884:	bf02      	ittt	eq
 800a886:	68e5      	ldreq	r5, [r4, #12]
 800a888:	6833      	ldreq	r3, [r6, #0]
 800a88a:	1aed      	subeq	r5, r5, r3
 800a88c:	68a3      	ldr	r3, [r4, #8]
 800a88e:	bf0c      	ite	eq
 800a890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a894:	2500      	movne	r5, #0
 800a896:	4293      	cmp	r3, r2
 800a898:	bfc4      	itt	gt
 800a89a:	1a9b      	subgt	r3, r3, r2
 800a89c:	18ed      	addgt	r5, r5, r3
 800a89e:	2600      	movs	r6, #0
 800a8a0:	341a      	adds	r4, #26
 800a8a2:	42b5      	cmp	r5, r6
 800a8a4:	d11a      	bne.n	800a8dc <_printf_common+0xc8>
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e008      	b.n	800a8bc <_printf_common+0xa8>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4652      	mov	r2, sl
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	47c0      	blx	r8
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d103      	bne.n	800a8c0 <_printf_common+0xac>
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	e7c6      	b.n	800a852 <_printf_common+0x3e>
 800a8c4:	18e1      	adds	r1, r4, r3
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	2030      	movs	r0, #48	; 0x30
 800a8ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ce:	4422      	add	r2, r4
 800a8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8d8:	3302      	adds	r3, #2
 800a8da:	e7c7      	b.n	800a86c <_printf_common+0x58>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4622      	mov	r2, r4
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	47c0      	blx	r8
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d0e6      	beq.n	800a8b8 <_printf_common+0xa4>
 800a8ea:	3601      	adds	r6, #1
 800a8ec:	e7d9      	b.n	800a8a2 <_printf_common+0x8e>
	...

0800a8f0 <_printf_i>:
 800a8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	7e0f      	ldrb	r7, [r1, #24]
 800a8f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f8:	2f78      	cmp	r7, #120	; 0x78
 800a8fa:	4691      	mov	r9, r2
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	469a      	mov	sl, r3
 800a902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a906:	d807      	bhi.n	800a918 <_printf_i+0x28>
 800a908:	2f62      	cmp	r7, #98	; 0x62
 800a90a:	d80a      	bhi.n	800a922 <_printf_i+0x32>
 800a90c:	2f00      	cmp	r7, #0
 800a90e:	f000 80d4 	beq.w	800aaba <_printf_i+0x1ca>
 800a912:	2f58      	cmp	r7, #88	; 0x58
 800a914:	f000 80c0 	beq.w	800aa98 <_printf_i+0x1a8>
 800a918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a91c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a920:	e03a      	b.n	800a998 <_printf_i+0xa8>
 800a922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a926:	2b15      	cmp	r3, #21
 800a928:	d8f6      	bhi.n	800a918 <_printf_i+0x28>
 800a92a:	a101      	add	r1, pc, #4	; (adr r1, 800a930 <_printf_i+0x40>)
 800a92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a930:	0800a989 	.word	0x0800a989
 800a934:	0800a99d 	.word	0x0800a99d
 800a938:	0800a919 	.word	0x0800a919
 800a93c:	0800a919 	.word	0x0800a919
 800a940:	0800a919 	.word	0x0800a919
 800a944:	0800a919 	.word	0x0800a919
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a919 	.word	0x0800a919
 800a950:	0800a919 	.word	0x0800a919
 800a954:	0800a919 	.word	0x0800a919
 800a958:	0800a919 	.word	0x0800a919
 800a95c:	0800aaa1 	.word	0x0800aaa1
 800a960:	0800a9c9 	.word	0x0800a9c9
 800a964:	0800aa5b 	.word	0x0800aa5b
 800a968:	0800a919 	.word	0x0800a919
 800a96c:	0800a919 	.word	0x0800a919
 800a970:	0800aac3 	.word	0x0800aac3
 800a974:	0800a919 	.word	0x0800a919
 800a978:	0800a9c9 	.word	0x0800a9c9
 800a97c:	0800a919 	.word	0x0800a919
 800a980:	0800a919 	.word	0x0800a919
 800a984:	0800aa63 	.word	0x0800aa63
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	1d1a      	adds	r2, r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	602a      	str	r2, [r5, #0]
 800a990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a998:	2301      	movs	r3, #1
 800a99a:	e09f      	b.n	800aadc <_printf_i+0x1ec>
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	0607      	lsls	r7, r0, #24
 800a9a2:	f103 0104 	add.w	r1, r3, #4
 800a9a6:	6029      	str	r1, [r5, #0]
 800a9a8:	d501      	bpl.n	800a9ae <_printf_i+0xbe>
 800a9aa:	681e      	ldr	r6, [r3, #0]
 800a9ac:	e003      	b.n	800a9b6 <_printf_i+0xc6>
 800a9ae:	0646      	lsls	r6, r0, #25
 800a9b0:	d5fb      	bpl.n	800a9aa <_printf_i+0xba>
 800a9b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	da03      	bge.n	800a9c2 <_printf_i+0xd2>
 800a9ba:	232d      	movs	r3, #45	; 0x2d
 800a9bc:	4276      	negs	r6, r6
 800a9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c2:	485a      	ldr	r0, [pc, #360]	; (800ab2c <_printf_i+0x23c>)
 800a9c4:	230a      	movs	r3, #10
 800a9c6:	e012      	b.n	800a9ee <_printf_i+0xfe>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	6820      	ldr	r0, [r4, #0]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	6029      	str	r1, [r5, #0]
 800a9d0:	0605      	lsls	r5, r0, #24
 800a9d2:	d501      	bpl.n	800a9d8 <_printf_i+0xe8>
 800a9d4:	681e      	ldr	r6, [r3, #0]
 800a9d6:	e002      	b.n	800a9de <_printf_i+0xee>
 800a9d8:	0641      	lsls	r1, r0, #25
 800a9da:	d5fb      	bpl.n	800a9d4 <_printf_i+0xe4>
 800a9dc:	881e      	ldrh	r6, [r3, #0]
 800a9de:	4853      	ldr	r0, [pc, #332]	; (800ab2c <_printf_i+0x23c>)
 800a9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a9e2:	bf0c      	ite	eq
 800a9e4:	2308      	moveq	r3, #8
 800a9e6:	230a      	movne	r3, #10
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ee:	6865      	ldr	r5, [r4, #4]
 800a9f0:	60a5      	str	r5, [r4, #8]
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	bfa2      	ittt	ge
 800a9f6:	6821      	ldrge	r1, [r4, #0]
 800a9f8:	f021 0104 	bicge.w	r1, r1, #4
 800a9fc:	6021      	strge	r1, [r4, #0]
 800a9fe:	b90e      	cbnz	r6, 800aa04 <_printf_i+0x114>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d04b      	beq.n	800aa9c <_printf_i+0x1ac>
 800aa04:	4615      	mov	r5, r2
 800aa06:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa0a:	fb03 6711 	mls	r7, r3, r1, r6
 800aa0e:	5dc7      	ldrb	r7, [r0, r7]
 800aa10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa14:	4637      	mov	r7, r6
 800aa16:	42bb      	cmp	r3, r7
 800aa18:	460e      	mov	r6, r1
 800aa1a:	d9f4      	bls.n	800aa06 <_printf_i+0x116>
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d10b      	bne.n	800aa38 <_printf_i+0x148>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	07de      	lsls	r6, r3, #31
 800aa24:	d508      	bpl.n	800aa38 <_printf_i+0x148>
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	6861      	ldr	r1, [r4, #4]
 800aa2a:	4299      	cmp	r1, r3
 800aa2c:	bfde      	ittt	le
 800aa2e:	2330      	movle	r3, #48	; 0x30
 800aa30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	6122      	str	r2, [r4, #16]
 800aa3c:	f8cd a000 	str.w	sl, [sp]
 800aa40:	464b      	mov	r3, r9
 800aa42:	aa03      	add	r2, sp, #12
 800aa44:	4621      	mov	r1, r4
 800aa46:	4640      	mov	r0, r8
 800aa48:	f7ff fee4 	bl	800a814 <_printf_common>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d14a      	bne.n	800aae6 <_printf_i+0x1f6>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	b004      	add	sp, #16
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f043 0320 	orr.w	r3, r3, #32
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	4833      	ldr	r0, [pc, #204]	; (800ab30 <_printf_i+0x240>)
 800aa64:	2778      	movs	r7, #120	; 0x78
 800aa66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	061f      	lsls	r7, r3, #24
 800aa70:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa74:	d402      	bmi.n	800aa7c <_printf_i+0x18c>
 800aa76:	065f      	lsls	r7, r3, #25
 800aa78:	bf48      	it	mi
 800aa7a:	b2b6      	uxthmi	r6, r6
 800aa7c:	07df      	lsls	r7, r3, #31
 800aa7e:	bf48      	it	mi
 800aa80:	f043 0320 	orrmi.w	r3, r3, #32
 800aa84:	6029      	str	r1, [r5, #0]
 800aa86:	bf48      	it	mi
 800aa88:	6023      	strmi	r3, [r4, #0]
 800aa8a:	b91e      	cbnz	r6, 800aa94 <_printf_i+0x1a4>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	f023 0320 	bic.w	r3, r3, #32
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	2310      	movs	r3, #16
 800aa96:	e7a7      	b.n	800a9e8 <_printf_i+0xf8>
 800aa98:	4824      	ldr	r0, [pc, #144]	; (800ab2c <_printf_i+0x23c>)
 800aa9a:	e7e4      	b.n	800aa66 <_printf_i+0x176>
 800aa9c:	4615      	mov	r5, r2
 800aa9e:	e7bd      	b.n	800aa1c <_printf_i+0x12c>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	6826      	ldr	r6, [r4, #0]
 800aaa4:	6961      	ldr	r1, [r4, #20]
 800aaa6:	1d18      	adds	r0, r3, #4
 800aaa8:	6028      	str	r0, [r5, #0]
 800aaaa:	0635      	lsls	r5, r6, #24
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	d501      	bpl.n	800aab4 <_printf_i+0x1c4>
 800aab0:	6019      	str	r1, [r3, #0]
 800aab2:	e002      	b.n	800aaba <_printf_i+0x1ca>
 800aab4:	0670      	lsls	r0, r6, #25
 800aab6:	d5fb      	bpl.n	800aab0 <_printf_i+0x1c0>
 800aab8:	8019      	strh	r1, [r3, #0]
 800aaba:	2300      	movs	r3, #0
 800aabc:	6123      	str	r3, [r4, #16]
 800aabe:	4615      	mov	r5, r2
 800aac0:	e7bc      	b.n	800aa3c <_printf_i+0x14c>
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	1d1a      	adds	r2, r3, #4
 800aac6:	602a      	str	r2, [r5, #0]
 800aac8:	681d      	ldr	r5, [r3, #0]
 800aaca:	6862      	ldr	r2, [r4, #4]
 800aacc:	2100      	movs	r1, #0
 800aace:	4628      	mov	r0, r5
 800aad0:	f7f5 fb7e 	bl	80001d0 <memchr>
 800aad4:	b108      	cbz	r0, 800aada <_printf_i+0x1ea>
 800aad6:	1b40      	subs	r0, r0, r5
 800aad8:	6060      	str	r0, [r4, #4]
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	6123      	str	r3, [r4, #16]
 800aade:	2300      	movs	r3, #0
 800aae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae4:	e7aa      	b.n	800aa3c <_printf_i+0x14c>
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	462a      	mov	r2, r5
 800aaea:	4649      	mov	r1, r9
 800aaec:	4640      	mov	r0, r8
 800aaee:	47d0      	blx	sl
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d0ad      	beq.n	800aa50 <_printf_i+0x160>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	079b      	lsls	r3, r3, #30
 800aaf8:	d413      	bmi.n	800ab22 <_printf_i+0x232>
 800aafa:	68e0      	ldr	r0, [r4, #12]
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	4298      	cmp	r0, r3
 800ab00:	bfb8      	it	lt
 800ab02:	4618      	movlt	r0, r3
 800ab04:	e7a6      	b.n	800aa54 <_printf_i+0x164>
 800ab06:	2301      	movs	r3, #1
 800ab08:	4632      	mov	r2, r6
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	47d0      	blx	sl
 800ab10:	3001      	adds	r0, #1
 800ab12:	d09d      	beq.n	800aa50 <_printf_i+0x160>
 800ab14:	3501      	adds	r5, #1
 800ab16:	68e3      	ldr	r3, [r4, #12]
 800ab18:	9903      	ldr	r1, [sp, #12]
 800ab1a:	1a5b      	subs	r3, r3, r1
 800ab1c:	42ab      	cmp	r3, r5
 800ab1e:	dcf2      	bgt.n	800ab06 <_printf_i+0x216>
 800ab20:	e7eb      	b.n	800aafa <_printf_i+0x20a>
 800ab22:	2500      	movs	r5, #0
 800ab24:	f104 0619 	add.w	r6, r4, #25
 800ab28:	e7f5      	b.n	800ab16 <_printf_i+0x226>
 800ab2a:	bf00      	nop
 800ab2c:	0800d9ca 	.word	0x0800d9ca
 800ab30:	0800d9db 	.word	0x0800d9db

0800ab34 <std>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab42:	6083      	str	r3, [r0, #8]
 800ab44:	8181      	strh	r1, [r0, #12]
 800ab46:	6643      	str	r3, [r0, #100]	; 0x64
 800ab48:	81c2      	strh	r2, [r0, #14]
 800ab4a:	6183      	str	r3, [r0, #24]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	2208      	movs	r2, #8
 800ab50:	305c      	adds	r0, #92	; 0x5c
 800ab52:	f000 f902 	bl	800ad5a <memset>
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <std+0x38>)
 800ab58:	6263      	str	r3, [r4, #36]	; 0x24
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x3c>)
 800ab5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x40>)
 800ab60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x44>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0800acd5 	.word	0x0800acd5
 800ab70:	0800acf7 	.word	0x0800acf7
 800ab74:	0800ad2f 	.word	0x0800ad2f
 800ab78:	0800ad53 	.word	0x0800ad53

0800ab7c <stdio_exit_handler>:
 800ab7c:	4a02      	ldr	r2, [pc, #8]	; (800ab88 <stdio_exit_handler+0xc>)
 800ab7e:	4903      	ldr	r1, [pc, #12]	; (800ab8c <stdio_exit_handler+0x10>)
 800ab80:	4803      	ldr	r0, [pc, #12]	; (800ab90 <stdio_exit_handler+0x14>)
 800ab82:	f000 b869 	b.w	800ac58 <_fwalk_sglue>
 800ab86:	bf00      	nop
 800ab88:	2000000c 	.word	0x2000000c
 800ab8c:	0800d1d1 	.word	0x0800d1d1
 800ab90:	20000184 	.word	0x20000184

0800ab94 <cleanup_stdio>:
 800ab94:	6841      	ldr	r1, [r0, #4]
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <cleanup_stdio+0x34>)
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	d001      	beq.n	800aba4 <cleanup_stdio+0x10>
 800aba0:	f002 fb16 	bl	800d1d0 <_fflush_r>
 800aba4:	68a1      	ldr	r1, [r4, #8]
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <cleanup_stdio+0x38>)
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <cleanup_stdio+0x1e>
 800abac:	4620      	mov	r0, r4
 800abae:	f002 fb0f 	bl	800d1d0 <_fflush_r>
 800abb2:	68e1      	ldr	r1, [r4, #12]
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <cleanup_stdio+0x3c>)
 800abb6:	4299      	cmp	r1, r3
 800abb8:	d004      	beq.n	800abc4 <cleanup_stdio+0x30>
 800abba:	4620      	mov	r0, r4
 800abbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc0:	f002 bb06 	b.w	800d1d0 <_fflush_r>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	200006d4 	.word	0x200006d4
 800abcc:	2000073c 	.word	0x2000073c
 800abd0:	200007a4 	.word	0x200007a4

0800abd4 <global_stdio_init.part.0>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <global_stdio_init.part.0+0x30>)
 800abd8:	4c0b      	ldr	r4, [pc, #44]	; (800ac08 <global_stdio_init.part.0+0x34>)
 800abda:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <global_stdio_init.part.0+0x38>)
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	4620      	mov	r0, r4
 800abe0:	2200      	movs	r2, #0
 800abe2:	2104      	movs	r1, #4
 800abe4:	f7ff ffa6 	bl	800ab34 <std>
 800abe8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800abec:	2201      	movs	r2, #1
 800abee:	2109      	movs	r1, #9
 800abf0:	f7ff ffa0 	bl	800ab34 <std>
 800abf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800abf8:	2202      	movs	r2, #2
 800abfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfe:	2112      	movs	r1, #18
 800ac00:	f7ff bf98 	b.w	800ab34 <std>
 800ac04:	2000080c 	.word	0x2000080c
 800ac08:	200006d4 	.word	0x200006d4
 800ac0c:	0800ab7d 	.word	0x0800ab7d

0800ac10 <__sfp_lock_acquire>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__sfp_lock_acquire+0x8>)
 800ac12:	f000 b947 	b.w	800aea4 <__retarget_lock_acquire_recursive>
 800ac16:	bf00      	nop
 800ac18:	20000815 	.word	0x20000815

0800ac1c <__sfp_lock_release>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	; (800ac24 <__sfp_lock_release+0x8>)
 800ac1e:	f000 b942 	b.w	800aea6 <__retarget_lock_release_recursive>
 800ac22:	bf00      	nop
 800ac24:	20000815 	.word	0x20000815

0800ac28 <__sinit>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	f7ff fff0 	bl	800ac10 <__sfp_lock_acquire>
 800ac30:	6a23      	ldr	r3, [r4, #32]
 800ac32:	b11b      	cbz	r3, 800ac3c <__sinit+0x14>
 800ac34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac38:	f7ff bff0 	b.w	800ac1c <__sfp_lock_release>
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <__sinit+0x28>)
 800ac3e:	6223      	str	r3, [r4, #32]
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <__sinit+0x2c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1f5      	bne.n	800ac34 <__sinit+0xc>
 800ac48:	f7ff ffc4 	bl	800abd4 <global_stdio_init.part.0>
 800ac4c:	e7f2      	b.n	800ac34 <__sinit+0xc>
 800ac4e:	bf00      	nop
 800ac50:	0800ab95 	.word	0x0800ab95
 800ac54:	2000080c 	.word	0x2000080c

0800ac58 <_fwalk_sglue>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	4688      	mov	r8, r1
 800ac60:	4614      	mov	r4, r2
 800ac62:	2600      	movs	r6, #0
 800ac64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac68:	f1b9 0901 	subs.w	r9, r9, #1
 800ac6c:	d505      	bpl.n	800ac7a <_fwalk_sglue+0x22>
 800ac6e:	6824      	ldr	r4, [r4, #0]
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d1f7      	bne.n	800ac64 <_fwalk_sglue+0xc>
 800ac74:	4630      	mov	r0, r6
 800ac76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d907      	bls.n	800ac90 <_fwalk_sglue+0x38>
 800ac80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac84:	3301      	adds	r3, #1
 800ac86:	d003      	beq.n	800ac90 <_fwalk_sglue+0x38>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	47c0      	blx	r8
 800ac8e:	4306      	orrs	r6, r0
 800ac90:	3568      	adds	r5, #104	; 0x68
 800ac92:	e7e9      	b.n	800ac68 <_fwalk_sglue+0x10>

0800ac94 <siprintf>:
 800ac94:	b40e      	push	{r1, r2, r3}
 800ac96:	b500      	push	{lr}
 800ac98:	b09c      	sub	sp, #112	; 0x70
 800ac9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac9c:	9002      	str	r0, [sp, #8]
 800ac9e:	9006      	str	r0, [sp, #24]
 800aca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aca4:	4809      	ldr	r0, [pc, #36]	; (800accc <siprintf+0x38>)
 800aca6:	9107      	str	r1, [sp, #28]
 800aca8:	9104      	str	r1, [sp, #16]
 800acaa:	4909      	ldr	r1, [pc, #36]	; (800acd0 <siprintf+0x3c>)
 800acac:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	6800      	ldr	r0, [r0, #0]
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	a902      	add	r1, sp, #8
 800acb8:	f002 f906 	bl	800cec8 <_svfiprintf_r>
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	b01c      	add	sp, #112	; 0x70
 800acc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc8:	b003      	add	sp, #12
 800acca:	4770      	bx	lr
 800accc:	200001d0 	.word	0x200001d0
 800acd0:	ffff0208 	.word	0xffff0208

0800acd4 <__sread>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	460c      	mov	r4, r1
 800acd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acdc:	f000 f894 	bl	800ae08 <_read_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	bfab      	itete	ge
 800ace4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ace6:	89a3      	ldrhlt	r3, [r4, #12]
 800ace8:	181b      	addge	r3, r3, r0
 800acea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acee:	bfac      	ite	ge
 800acf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800acf2:	81a3      	strhlt	r3, [r4, #12]
 800acf4:	bd10      	pop	{r4, pc}

0800acf6 <__swrite>:
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	461f      	mov	r7, r3
 800acfc:	898b      	ldrh	r3, [r1, #12]
 800acfe:	05db      	lsls	r3, r3, #23
 800ad00:	4605      	mov	r5, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	4616      	mov	r6, r2
 800ad06:	d505      	bpl.n	800ad14 <__swrite+0x1e>
 800ad08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f000 f868 	bl	800ade4 <_lseek_r>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	4628      	mov	r0, r5
 800ad26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	f000 b87f 	b.w	800ae2c <_write_r>

0800ad2e <__sseek>:
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	460c      	mov	r4, r1
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	f000 f855 	bl	800ade4 <_lseek_r>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	bf15      	itete	ne
 800ad40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad4a:	81a3      	strheq	r3, [r4, #12]
 800ad4c:	bf18      	it	ne
 800ad4e:	81a3      	strhne	r3, [r4, #12]
 800ad50:	bd10      	pop	{r4, pc}

0800ad52 <__sclose>:
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	f000 b835 	b.w	800adc4 <_close_r>

0800ad5a <memset>:
 800ad5a:	4402      	add	r2, r0
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d100      	bne.n	800ad64 <memset+0xa>
 800ad62:	4770      	bx	lr
 800ad64:	f803 1b01 	strb.w	r1, [r3], #1
 800ad68:	e7f9      	b.n	800ad5e <memset+0x4>

0800ad6a <strncmp>:
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	b16a      	cbz	r2, 800ad8a <strncmp+0x20>
 800ad6e:	3901      	subs	r1, #1
 800ad70:	1884      	adds	r4, r0, r2
 800ad72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d103      	bne.n	800ad86 <strncmp+0x1c>
 800ad7e:	42a0      	cmp	r0, r4
 800ad80:	d001      	beq.n	800ad86 <strncmp+0x1c>
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	d1f5      	bne.n	800ad72 <strncmp+0x8>
 800ad86:	1ad0      	subs	r0, r2, r3
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	e7fc      	b.n	800ad88 <strncmp+0x1e>

0800ad8e <strstr>:
 800ad8e:	780a      	ldrb	r2, [r1, #0]
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	b96a      	cbnz	r2, 800adb0 <strstr+0x22>
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d109      	bne.n	800adae <strstr+0x20>
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f6      	beq.n	800ad94 <strstr+0x6>
 800ada6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800adaa:	429e      	cmp	r6, r3
 800adac:	d0f7      	beq.n	800ad9e <strstr+0x10>
 800adae:	3001      	adds	r0, #1
 800adb0:	7803      	ldrb	r3, [r0, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1ef      	bne.n	800ad96 <strstr+0x8>
 800adb6:	4618      	mov	r0, r3
 800adb8:	e7ec      	b.n	800ad94 <strstr+0x6>
	...

0800adbc <_localeconv_r>:
 800adbc:	4800      	ldr	r0, [pc, #0]	; (800adc0 <_localeconv_r+0x4>)
 800adbe:	4770      	bx	lr
 800adc0:	20000108 	.word	0x20000108

0800adc4 <_close_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d06      	ldr	r5, [pc, #24]	; (800ade0 <_close_r+0x1c>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	f7f7 fc75 	bl	80026be <_close>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_close_r+0x1a>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_close_r+0x1a>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20000810 	.word	0x20000810

0800ade4 <_lseek_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	; (800ae04 <_lseek_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f7 fc8a 	bl	800270c <_lseek>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_lseek_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_lseek_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20000810 	.word	0x20000810

0800ae08 <_read_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	; (800ae28 <_read_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f7 fc18 	bl	800264c <_read>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_read_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_read_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20000810 	.word	0x20000810

0800ae2c <_write_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d07      	ldr	r5, [pc, #28]	; (800ae4c <_write_r+0x20>)
 800ae30:	4604      	mov	r4, r0
 800ae32:	4608      	mov	r0, r1
 800ae34:	4611      	mov	r1, r2
 800ae36:	2200      	movs	r2, #0
 800ae38:	602a      	str	r2, [r5, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f7f7 fc23 	bl	8002686 <_write>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_write_r+0x1e>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_write_r+0x1e>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	20000810 	.word	0x20000810

0800ae50 <__errno>:
 800ae50:	4b01      	ldr	r3, [pc, #4]	; (800ae58 <__errno+0x8>)
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	200001d0 	.word	0x200001d0

0800ae5c <__libc_init_array>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4d0d      	ldr	r5, [pc, #52]	; (800ae94 <__libc_init_array+0x38>)
 800ae60:	4c0d      	ldr	r4, [pc, #52]	; (800ae98 <__libc_init_array+0x3c>)
 800ae62:	1b64      	subs	r4, r4, r5
 800ae64:	10a4      	asrs	r4, r4, #2
 800ae66:	2600      	movs	r6, #0
 800ae68:	42a6      	cmp	r6, r4
 800ae6a:	d109      	bne.n	800ae80 <__libc_init_array+0x24>
 800ae6c:	4d0b      	ldr	r5, [pc, #44]	; (800ae9c <__libc_init_array+0x40>)
 800ae6e:	4c0c      	ldr	r4, [pc, #48]	; (800aea0 <__libc_init_array+0x44>)
 800ae70:	f002 fd26 	bl	800d8c0 <_init>
 800ae74:	1b64      	subs	r4, r4, r5
 800ae76:	10a4      	asrs	r4, r4, #2
 800ae78:	2600      	movs	r6, #0
 800ae7a:	42a6      	cmp	r6, r4
 800ae7c:	d105      	bne.n	800ae8a <__libc_init_array+0x2e>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae84:	4798      	blx	r3
 800ae86:	3601      	adds	r6, #1
 800ae88:	e7ee      	b.n	800ae68 <__libc_init_array+0xc>
 800ae8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8e:	4798      	blx	r3
 800ae90:	3601      	adds	r6, #1
 800ae92:	e7f2      	b.n	800ae7a <__libc_init_array+0x1e>
 800ae94:	0800dd94 	.word	0x0800dd94
 800ae98:	0800dd94 	.word	0x0800dd94
 800ae9c:	0800dd94 	.word	0x0800dd94
 800aea0:	0800dd98 	.word	0x0800dd98

0800aea4 <__retarget_lock_acquire_recursive>:
 800aea4:	4770      	bx	lr

0800aea6 <__retarget_lock_release_recursive>:
 800aea6:	4770      	bx	lr

0800aea8 <memcpy>:
 800aea8:	440a      	add	r2, r1
 800aeaa:	4291      	cmp	r1, r2
 800aeac:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeb0:	d100      	bne.n	800aeb4 <memcpy+0xc>
 800aeb2:	4770      	bx	lr
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aebe:	4291      	cmp	r1, r2
 800aec0:	d1f9      	bne.n	800aeb6 <memcpy+0xe>
 800aec2:	bd10      	pop	{r4, pc}
 800aec4:	0000      	movs	r0, r0
	...

0800aec8 <nan>:
 800aec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aed0 <nan+0x8>
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	00000000 	.word	0x00000000
 800aed4:	7ff80000 	.word	0x7ff80000

0800aed8 <quorem>:
 800aed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	6903      	ldr	r3, [r0, #16]
 800aede:	690c      	ldr	r4, [r1, #16]
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	4607      	mov	r7, r0
 800aee4:	db7e      	blt.n	800afe4 <quorem+0x10c>
 800aee6:	3c01      	subs	r4, #1
 800aee8:	f101 0814 	add.w	r8, r1, #20
 800aeec:	f100 0514 	add.w	r5, r0, #20
 800aef0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aefa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aefe:	3301      	adds	r3, #1
 800af00:	429a      	cmp	r2, r3
 800af02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800af0e:	d331      	bcc.n	800af74 <quorem+0x9c>
 800af10:	f04f 0e00 	mov.w	lr, #0
 800af14:	4640      	mov	r0, r8
 800af16:	46ac      	mov	ip, r5
 800af18:	46f2      	mov	sl, lr
 800af1a:	f850 2b04 	ldr.w	r2, [r0], #4
 800af1e:	b293      	uxth	r3, r2
 800af20:	fb06 e303 	mla	r3, r6, r3, lr
 800af24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af28:	0c1a      	lsrs	r2, r3, #16
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	ebaa 0303 	sub.w	r3, sl, r3
 800af30:	f8dc a000 	ldr.w	sl, [ip]
 800af34:	fa13 f38a 	uxtah	r3, r3, sl
 800af38:	fb06 220e 	mla	r2, r6, lr, r2
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	9b00      	ldr	r3, [sp, #0]
 800af40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af44:	b292      	uxth	r2, r2
 800af46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af4e:	f8bd 3000 	ldrh.w	r3, [sp]
 800af52:	4581      	cmp	r9, r0
 800af54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af58:	f84c 3b04 	str.w	r3, [ip], #4
 800af5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af60:	d2db      	bcs.n	800af1a <quorem+0x42>
 800af62:	f855 300b 	ldr.w	r3, [r5, fp]
 800af66:	b92b      	cbnz	r3, 800af74 <quorem+0x9c>
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	3b04      	subs	r3, #4
 800af6c:	429d      	cmp	r5, r3
 800af6e:	461a      	mov	r2, r3
 800af70:	d32c      	bcc.n	800afcc <quorem+0xf4>
 800af72:	613c      	str	r4, [r7, #16]
 800af74:	4638      	mov	r0, r7
 800af76:	f001 fd59 	bl	800ca2c <__mcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	db22      	blt.n	800afc4 <quorem+0xec>
 800af7e:	3601      	adds	r6, #1
 800af80:	4629      	mov	r1, r5
 800af82:	2000      	movs	r0, #0
 800af84:	f858 2b04 	ldr.w	r2, [r8], #4
 800af88:	f8d1 c000 	ldr.w	ip, [r1]
 800af8c:	b293      	uxth	r3, r2
 800af8e:	1ac3      	subs	r3, r0, r3
 800af90:	0c12      	lsrs	r2, r2, #16
 800af92:	fa13 f38c 	uxtah	r3, r3, ip
 800af96:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800af9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa4:	45c1      	cmp	r9, r8
 800afa6:	f841 3b04 	str.w	r3, [r1], #4
 800afaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afae:	d2e9      	bcs.n	800af84 <quorem+0xac>
 800afb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afb8:	b922      	cbnz	r2, 800afc4 <quorem+0xec>
 800afba:	3b04      	subs	r3, #4
 800afbc:	429d      	cmp	r5, r3
 800afbe:	461a      	mov	r2, r3
 800afc0:	d30a      	bcc.n	800afd8 <quorem+0x100>
 800afc2:	613c      	str	r4, [r7, #16]
 800afc4:	4630      	mov	r0, r6
 800afc6:	b003      	add	sp, #12
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	3b04      	subs	r3, #4
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d1ce      	bne.n	800af72 <quorem+0x9a>
 800afd4:	3c01      	subs	r4, #1
 800afd6:	e7c9      	b.n	800af6c <quorem+0x94>
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	3b04      	subs	r3, #4
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d1f0      	bne.n	800afc2 <quorem+0xea>
 800afe0:	3c01      	subs	r4, #1
 800afe2:	e7eb      	b.n	800afbc <quorem+0xe4>
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7ee      	b.n	800afc6 <quorem+0xee>

0800afe8 <_dtoa_r>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	ed2d 8b04 	vpush	{d8-d9}
 800aff0:	69c5      	ldr	r5, [r0, #28]
 800aff2:	b093      	sub	sp, #76	; 0x4c
 800aff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aff8:	ec57 6b10 	vmov	r6, r7, d0
 800affc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b000:	9107      	str	r1, [sp, #28]
 800b002:	4604      	mov	r4, r0
 800b004:	920a      	str	r2, [sp, #40]	; 0x28
 800b006:	930d      	str	r3, [sp, #52]	; 0x34
 800b008:	b975      	cbnz	r5, 800b028 <_dtoa_r+0x40>
 800b00a:	2010      	movs	r0, #16
 800b00c:	f001 f982 	bl	800c314 <malloc>
 800b010:	4602      	mov	r2, r0
 800b012:	61e0      	str	r0, [r4, #28]
 800b014:	b920      	cbnz	r0, 800b020 <_dtoa_r+0x38>
 800b016:	4bae      	ldr	r3, [pc, #696]	; (800b2d0 <_dtoa_r+0x2e8>)
 800b018:	21ef      	movs	r1, #239	; 0xef
 800b01a:	48ae      	ldr	r0, [pc, #696]	; (800b2d4 <_dtoa_r+0x2ec>)
 800b01c:	f002 f92a 	bl	800d274 <__assert_func>
 800b020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b024:	6005      	str	r5, [r0, #0]
 800b026:	60c5      	str	r5, [r0, #12]
 800b028:	69e3      	ldr	r3, [r4, #28]
 800b02a:	6819      	ldr	r1, [r3, #0]
 800b02c:	b151      	cbz	r1, 800b044 <_dtoa_r+0x5c>
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	604a      	str	r2, [r1, #4]
 800b032:	2301      	movs	r3, #1
 800b034:	4093      	lsls	r3, r2
 800b036:	608b      	str	r3, [r1, #8]
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 fa71 	bl	800c520 <_Bfree>
 800b03e:	69e3      	ldr	r3, [r4, #28]
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	1e3b      	subs	r3, r7, #0
 800b046:	bfbb      	ittet	lt
 800b048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b04c:	9303      	strlt	r3, [sp, #12]
 800b04e:	2300      	movge	r3, #0
 800b050:	2201      	movlt	r2, #1
 800b052:	bfac      	ite	ge
 800b054:	f8c8 3000 	strge.w	r3, [r8]
 800b058:	f8c8 2000 	strlt.w	r2, [r8]
 800b05c:	4b9e      	ldr	r3, [pc, #632]	; (800b2d8 <_dtoa_r+0x2f0>)
 800b05e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b062:	ea33 0308 	bics.w	r3, r3, r8
 800b066:	d11b      	bne.n	800b0a0 <_dtoa_r+0xb8>
 800b068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b06a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b074:	4333      	orrs	r3, r6
 800b076:	f000 8593 	beq.w	800bba0 <_dtoa_r+0xbb8>
 800b07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b07c:	b963      	cbnz	r3, 800b098 <_dtoa_r+0xb0>
 800b07e:	4b97      	ldr	r3, [pc, #604]	; (800b2dc <_dtoa_r+0x2f4>)
 800b080:	e027      	b.n	800b0d2 <_dtoa_r+0xea>
 800b082:	4b97      	ldr	r3, [pc, #604]	; (800b2e0 <_dtoa_r+0x2f8>)
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	3308      	adds	r3, #8
 800b088:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	9800      	ldr	r0, [sp, #0]
 800b08e:	b013      	add	sp, #76	; 0x4c
 800b090:	ecbd 8b04 	vpop	{d8-d9}
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	4b90      	ldr	r3, [pc, #576]	; (800b2dc <_dtoa_r+0x2f4>)
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	3303      	adds	r3, #3
 800b09e:	e7f3      	b.n	800b088 <_dtoa_r+0xa0>
 800b0a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	ec51 0b17 	vmov	r0, r1, d7
 800b0aa:	eeb0 8a47 	vmov.f32	s16, s14
 800b0ae:	eef0 8a67 	vmov.f32	s17, s15
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f7f5 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b8:	4681      	mov	r9, r0
 800b0ba:	b160      	cbz	r0, 800b0d6 <_dtoa_r+0xee>
 800b0bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0be:	2301      	movs	r3, #1
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 8568 	beq.w	800bb9a <_dtoa_r+0xbb2>
 800b0ca:	4b86      	ldr	r3, [pc, #536]	; (800b2e4 <_dtoa_r+0x2fc>)
 800b0cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	e7da      	b.n	800b08c <_dtoa_r+0xa4>
 800b0d6:	aa10      	add	r2, sp, #64	; 0x40
 800b0d8:	a911      	add	r1, sp, #68	; 0x44
 800b0da:	4620      	mov	r0, r4
 800b0dc:	eeb0 0a48 	vmov.f32	s0, s16
 800b0e0:	eef0 0a68 	vmov.f32	s1, s17
 800b0e4:	f001 fdb8 	bl	800cc58 <__d2b>
 800b0e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	d07f      	beq.n	800b1f2 <_dtoa_r+0x20a>
 800b0f2:	ee18 3a90 	vmov	r3, s17
 800b0f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b0fe:	ec51 0b18 	vmov	r0, r1, d8
 800b102:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b10a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b10e:	4619      	mov	r1, r3
 800b110:	2200      	movs	r2, #0
 800b112:	4b75      	ldr	r3, [pc, #468]	; (800b2e8 <_dtoa_r+0x300>)
 800b114:	f7f5 f8b8 	bl	8000288 <__aeabi_dsub>
 800b118:	a367      	add	r3, pc, #412	; (adr r3, 800b2b8 <_dtoa_r+0x2d0>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 fa6b 	bl	80005f8 <__aeabi_dmul>
 800b122:	a367      	add	r3, pc, #412	; (adr r3, 800b2c0 <_dtoa_r+0x2d8>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 f8b0 	bl	800028c <__adddf3>
 800b12c:	4606      	mov	r6, r0
 800b12e:	4628      	mov	r0, r5
 800b130:	460f      	mov	r7, r1
 800b132:	f7f5 f9f7 	bl	8000524 <__aeabi_i2d>
 800b136:	a364      	add	r3, pc, #400	; (adr r3, 800b2c8 <_dtoa_r+0x2e0>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f7f5 fa5c 	bl	80005f8 <__aeabi_dmul>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	f7f5 f8a0 	bl	800028c <__adddf3>
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	f7f5 fd02 	bl	8000b58 <__aeabi_d2iz>
 800b154:	2200      	movs	r2, #0
 800b156:	4683      	mov	fp, r0
 800b158:	2300      	movs	r3, #0
 800b15a:	4630      	mov	r0, r6
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 fcbd 	bl	8000adc <__aeabi_dcmplt>
 800b162:	b148      	cbz	r0, 800b178 <_dtoa_r+0x190>
 800b164:	4658      	mov	r0, fp
 800b166:	f7f5 f9dd 	bl	8000524 <__aeabi_i2d>
 800b16a:	4632      	mov	r2, r6
 800b16c:	463b      	mov	r3, r7
 800b16e:	f7f5 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b172:	b908      	cbnz	r0, 800b178 <_dtoa_r+0x190>
 800b174:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b178:	f1bb 0f16 	cmp.w	fp, #22
 800b17c:	d857      	bhi.n	800b22e <_dtoa_r+0x246>
 800b17e:	4b5b      	ldr	r3, [pc, #364]	; (800b2ec <_dtoa_r+0x304>)
 800b180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	ec51 0b18 	vmov	r0, r1, d8
 800b18c:	f7f5 fca6 	bl	8000adc <__aeabi_dcmplt>
 800b190:	2800      	cmp	r0, #0
 800b192:	d04e      	beq.n	800b232 <_dtoa_r+0x24a>
 800b194:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b198:	2300      	movs	r3, #0
 800b19a:	930c      	str	r3, [sp, #48]	; 0x30
 800b19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19e:	1b5b      	subs	r3, r3, r5
 800b1a0:	1e5a      	subs	r2, r3, #1
 800b1a2:	bf45      	ittet	mi
 800b1a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1a8:	9305      	strmi	r3, [sp, #20]
 800b1aa:	2300      	movpl	r3, #0
 800b1ac:	2300      	movmi	r3, #0
 800b1ae:	9206      	str	r2, [sp, #24]
 800b1b0:	bf54      	ite	pl
 800b1b2:	9305      	strpl	r3, [sp, #20]
 800b1b4:	9306      	strmi	r3, [sp, #24]
 800b1b6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ba:	db3c      	blt.n	800b236 <_dtoa_r+0x24e>
 800b1bc:	9b06      	ldr	r3, [sp, #24]
 800b1be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b1c2:	445b      	add	r3, fp
 800b1c4:	9306      	str	r3, [sp, #24]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	9b07      	ldr	r3, [sp, #28]
 800b1cc:	2b09      	cmp	r3, #9
 800b1ce:	d868      	bhi.n	800b2a2 <_dtoa_r+0x2ba>
 800b1d0:	2b05      	cmp	r3, #5
 800b1d2:	bfc4      	itt	gt
 800b1d4:	3b04      	subgt	r3, #4
 800b1d6:	9307      	strgt	r3, [sp, #28]
 800b1d8:	9b07      	ldr	r3, [sp, #28]
 800b1da:	f1a3 0302 	sub.w	r3, r3, #2
 800b1de:	bfcc      	ite	gt
 800b1e0:	2500      	movgt	r5, #0
 800b1e2:	2501      	movle	r5, #1
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	f200 8085 	bhi.w	800b2f4 <_dtoa_r+0x30c>
 800b1ea:	e8df f003 	tbb	[pc, r3]
 800b1ee:	3b2e      	.short	0x3b2e
 800b1f0:	5839      	.short	0x5839
 800b1f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1f6:	441d      	add	r5, r3
 800b1f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	bfc1      	itttt	gt
 800b200:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b204:	fa08 f803 	lslgt.w	r8, r8, r3
 800b208:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b20c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b210:	bfd6      	itet	le
 800b212:	f1c3 0320 	rsble	r3, r3, #32
 800b216:	ea48 0003 	orrgt.w	r0, r8, r3
 800b21a:	fa06 f003 	lslle.w	r0, r6, r3
 800b21e:	f7f5 f971 	bl	8000504 <__aeabi_ui2d>
 800b222:	2201      	movs	r2, #1
 800b224:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b228:	3d01      	subs	r5, #1
 800b22a:	920e      	str	r2, [sp, #56]	; 0x38
 800b22c:	e76f      	b.n	800b10e <_dtoa_r+0x126>
 800b22e:	2301      	movs	r3, #1
 800b230:	e7b3      	b.n	800b19a <_dtoa_r+0x1b2>
 800b232:	900c      	str	r0, [sp, #48]	; 0x30
 800b234:	e7b2      	b.n	800b19c <_dtoa_r+0x1b4>
 800b236:	9b05      	ldr	r3, [sp, #20]
 800b238:	eba3 030b 	sub.w	r3, r3, fp
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	f1cb 0300 	rsb	r3, fp, #0
 800b242:	9308      	str	r3, [sp, #32]
 800b244:	2300      	movs	r3, #0
 800b246:	930b      	str	r3, [sp, #44]	; 0x2c
 800b248:	e7bf      	b.n	800b1ca <_dtoa_r+0x1e2>
 800b24a:	2300      	movs	r3, #0
 800b24c:	9309      	str	r3, [sp, #36]	; 0x24
 800b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc52      	bgt.n	800b2fa <_dtoa_r+0x312>
 800b254:	2301      	movs	r3, #1
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	461a      	mov	r2, r3
 800b25c:	920a      	str	r2, [sp, #40]	; 0x28
 800b25e:	e00b      	b.n	800b278 <_dtoa_r+0x290>
 800b260:	2301      	movs	r3, #1
 800b262:	e7f3      	b.n	800b24c <_dtoa_r+0x264>
 800b264:	2300      	movs	r3, #0
 800b266:	9309      	str	r3, [sp, #36]	; 0x24
 800b268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26a:	445b      	add	r3, fp
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	3301      	adds	r3, #1
 800b270:	2b01      	cmp	r3, #1
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	bfb8      	it	lt
 800b276:	2301      	movlt	r3, #1
 800b278:	69e0      	ldr	r0, [r4, #28]
 800b27a:	2100      	movs	r1, #0
 800b27c:	2204      	movs	r2, #4
 800b27e:	f102 0614 	add.w	r6, r2, #20
 800b282:	429e      	cmp	r6, r3
 800b284:	d93d      	bls.n	800b302 <_dtoa_r+0x31a>
 800b286:	6041      	str	r1, [r0, #4]
 800b288:	4620      	mov	r0, r4
 800b28a:	f001 f909 	bl	800c4a0 <_Balloc>
 800b28e:	9000      	str	r0, [sp, #0]
 800b290:	2800      	cmp	r0, #0
 800b292:	d139      	bne.n	800b308 <_dtoa_r+0x320>
 800b294:	4b16      	ldr	r3, [pc, #88]	; (800b2f0 <_dtoa_r+0x308>)
 800b296:	4602      	mov	r2, r0
 800b298:	f240 11af 	movw	r1, #431	; 0x1af
 800b29c:	e6bd      	b.n	800b01a <_dtoa_r+0x32>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e7e1      	b.n	800b266 <_dtoa_r+0x27e>
 800b2a2:	2501      	movs	r5, #1
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9307      	str	r3, [sp, #28]
 800b2a8:	9509      	str	r5, [sp, #36]	; 0x24
 800b2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2312      	movs	r3, #18
 800b2b6:	e7d1      	b.n	800b25c <_dtoa_r+0x274>
 800b2b8:	636f4361 	.word	0x636f4361
 800b2bc:	3fd287a7 	.word	0x3fd287a7
 800b2c0:	8b60c8b3 	.word	0x8b60c8b3
 800b2c4:	3fc68a28 	.word	0x3fc68a28
 800b2c8:	509f79fb 	.word	0x509f79fb
 800b2cc:	3fd34413 	.word	0x3fd34413
 800b2d0:	0800da01 	.word	0x0800da01
 800b2d4:	0800da18 	.word	0x0800da18
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	0800d9fd 	.word	0x0800d9fd
 800b2e0:	0800d9f4 	.word	0x0800d9f4
 800b2e4:	0800d9c9 	.word	0x0800d9c9
 800b2e8:	3ff80000 	.word	0x3ff80000
 800b2ec:	0800db68 	.word	0x0800db68
 800b2f0:	0800da70 	.word	0x0800da70
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f8:	e7d7      	b.n	800b2aa <_dtoa_r+0x2c2>
 800b2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	9304      	str	r3, [sp, #16]
 800b300:	e7ba      	b.n	800b278 <_dtoa_r+0x290>
 800b302:	3101      	adds	r1, #1
 800b304:	0052      	lsls	r2, r2, #1
 800b306:	e7ba      	b.n	800b27e <_dtoa_r+0x296>
 800b308:	69e3      	ldr	r3, [r4, #28]
 800b30a:	9a00      	ldr	r2, [sp, #0]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	2b0e      	cmp	r3, #14
 800b312:	f200 80a8 	bhi.w	800b466 <_dtoa_r+0x47e>
 800b316:	2d00      	cmp	r5, #0
 800b318:	f000 80a5 	beq.w	800b466 <_dtoa_r+0x47e>
 800b31c:	f1bb 0f00 	cmp.w	fp, #0
 800b320:	dd38      	ble.n	800b394 <_dtoa_r+0x3ac>
 800b322:	4bc0      	ldr	r3, [pc, #768]	; (800b624 <_dtoa_r+0x63c>)
 800b324:	f00b 020f 	and.w	r2, fp, #15
 800b328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b32c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b330:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b334:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b338:	d019      	beq.n	800b36e <_dtoa_r+0x386>
 800b33a:	4bbb      	ldr	r3, [pc, #748]	; (800b628 <_dtoa_r+0x640>)
 800b33c:	ec51 0b18 	vmov	r0, r1, d8
 800b340:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b344:	f7f5 fa82 	bl	800084c <__aeabi_ddiv>
 800b348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34c:	f008 080f 	and.w	r8, r8, #15
 800b350:	2503      	movs	r5, #3
 800b352:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b628 <_dtoa_r+0x640>
 800b356:	f1b8 0f00 	cmp.w	r8, #0
 800b35a:	d10a      	bne.n	800b372 <_dtoa_r+0x38a>
 800b35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b360:	4632      	mov	r2, r6
 800b362:	463b      	mov	r3, r7
 800b364:	f7f5 fa72 	bl	800084c <__aeabi_ddiv>
 800b368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36c:	e02b      	b.n	800b3c6 <_dtoa_r+0x3de>
 800b36e:	2502      	movs	r5, #2
 800b370:	e7ef      	b.n	800b352 <_dtoa_r+0x36a>
 800b372:	f018 0f01 	tst.w	r8, #1
 800b376:	d008      	beq.n	800b38a <_dtoa_r+0x3a2>
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	3501      	adds	r5, #1
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b38e:	f109 0908 	add.w	r9, r9, #8
 800b392:	e7e0      	b.n	800b356 <_dtoa_r+0x36e>
 800b394:	f000 809f 	beq.w	800b4d6 <_dtoa_r+0x4ee>
 800b398:	f1cb 0600 	rsb	r6, fp, #0
 800b39c:	4ba1      	ldr	r3, [pc, #644]	; (800b624 <_dtoa_r+0x63c>)
 800b39e:	4fa2      	ldr	r7, [pc, #648]	; (800b628 <_dtoa_r+0x640>)
 800b3a0:	f006 020f 	and.w	r2, r6, #15
 800b3a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	ec51 0b18 	vmov	r0, r1, d8
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3b8:	1136      	asrs	r6, r6, #4
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2502      	movs	r5, #2
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	d17e      	bne.n	800b4c0 <_dtoa_r+0x4d8>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1d0      	bne.n	800b368 <_dtoa_r+0x380>
 800b3c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8084 	beq.w	800b4da <_dtoa_r+0x4f2>
 800b3d2:	4b96      	ldr	r3, [pc, #600]	; (800b62c <_dtoa_r+0x644>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	4649      	mov	r1, r9
 800b3da:	f7f5 fb7f 	bl	8000adc <__aeabi_dcmplt>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d07b      	beq.n	800b4da <_dtoa_r+0x4f2>
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d078      	beq.n	800b4da <_dtoa_r+0x4f2>
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	dd39      	ble.n	800b462 <_dtoa_r+0x47a>
 800b3ee:	4b90      	ldr	r3, [pc, #576]	; (800b630 <_dtoa_r+0x648>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f5 f8ff 	bl	80005f8 <__aeabi_dmul>
 800b3fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3fe:	9e01      	ldr	r6, [sp, #4]
 800b400:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b404:	3501      	adds	r5, #1
 800b406:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b40a:	4628      	mov	r0, r5
 800b40c:	f7f5 f88a 	bl	8000524 <__aeabi_i2d>
 800b410:	4642      	mov	r2, r8
 800b412:	464b      	mov	r3, r9
 800b414:	f7f5 f8f0 	bl	80005f8 <__aeabi_dmul>
 800b418:	4b86      	ldr	r3, [pc, #536]	; (800b634 <_dtoa_r+0x64c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f4 ff36 	bl	800028c <__adddf3>
 800b420:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b428:	9303      	str	r3, [sp, #12]
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	d158      	bne.n	800b4e0 <_dtoa_r+0x4f8>
 800b42e:	4b82      	ldr	r3, [pc, #520]	; (800b638 <_dtoa_r+0x650>)
 800b430:	2200      	movs	r2, #0
 800b432:	4640      	mov	r0, r8
 800b434:	4649      	mov	r1, r9
 800b436:	f7f4 ff27 	bl	8000288 <__aeabi_dsub>
 800b43a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b43e:	4680      	mov	r8, r0
 800b440:	4689      	mov	r9, r1
 800b442:	f7f5 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 800b446:	2800      	cmp	r0, #0
 800b448:	f040 8296 	bne.w	800b978 <_dtoa_r+0x990>
 800b44c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b450:	4640      	mov	r0, r8
 800b452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b456:	4649      	mov	r1, r9
 800b458:	f7f5 fb40 	bl	8000adc <__aeabi_dcmplt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f040 8289 	bne.w	800b974 <_dtoa_r+0x98c>
 800b462:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f2c0 814e 	blt.w	800b70a <_dtoa_r+0x722>
 800b46e:	f1bb 0f0e 	cmp.w	fp, #14
 800b472:	f300 814a 	bgt.w	800b70a <_dtoa_r+0x722>
 800b476:	4b6b      	ldr	r3, [pc, #428]	; (800b624 <_dtoa_r+0x63c>)
 800b478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b482:	2b00      	cmp	r3, #0
 800b484:	f280 80dc 	bge.w	800b640 <_dtoa_r+0x658>
 800b488:	9b04      	ldr	r3, [sp, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f300 80d8 	bgt.w	800b640 <_dtoa_r+0x658>
 800b490:	f040 826f 	bne.w	800b972 <_dtoa_r+0x98a>
 800b494:	4b68      	ldr	r3, [pc, #416]	; (800b638 <_dtoa_r+0x650>)
 800b496:	2200      	movs	r2, #0
 800b498:	4640      	mov	r0, r8
 800b49a:	4649      	mov	r1, r9
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4a4:	f7f5 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 800b4a8:	9e04      	ldr	r6, [sp, #16]
 800b4aa:	4637      	mov	r7, r6
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f040 8245 	bne.w	800b93c <_dtoa_r+0x954>
 800b4b2:	9d00      	ldr	r5, [sp, #0]
 800b4b4:	2331      	movs	r3, #49	; 0x31
 800b4b6:	f805 3b01 	strb.w	r3, [r5], #1
 800b4ba:	f10b 0b01 	add.w	fp, fp, #1
 800b4be:	e241      	b.n	800b944 <_dtoa_r+0x95c>
 800b4c0:	07f2      	lsls	r2, r6, #31
 800b4c2:	d505      	bpl.n	800b4d0 <_dtoa_r+0x4e8>
 800b4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c8:	f7f5 f896 	bl	80005f8 <__aeabi_dmul>
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	1076      	asrs	r6, r6, #1
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	e773      	b.n	800b3be <_dtoa_r+0x3d6>
 800b4d6:	2502      	movs	r5, #2
 800b4d8:	e775      	b.n	800b3c6 <_dtoa_r+0x3de>
 800b4da:	9e04      	ldr	r6, [sp, #16]
 800b4dc:	465f      	mov	r7, fp
 800b4de:	e792      	b.n	800b406 <_dtoa_r+0x41e>
 800b4e0:	9900      	ldr	r1, [sp, #0]
 800b4e2:	4b50      	ldr	r3, [pc, #320]	; (800b624 <_dtoa_r+0x63c>)
 800b4e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4e8:	4431      	add	r1, r6
 800b4ea:	9102      	str	r1, [sp, #8]
 800b4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ee:	eeb0 9a47 	vmov.f32	s18, s14
 800b4f2:	eef0 9a67 	vmov.f32	s19, s15
 800b4f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4fe:	2900      	cmp	r1, #0
 800b500:	d044      	beq.n	800b58c <_dtoa_r+0x5a4>
 800b502:	494e      	ldr	r1, [pc, #312]	; (800b63c <_dtoa_r+0x654>)
 800b504:	2000      	movs	r0, #0
 800b506:	f7f5 f9a1 	bl	800084c <__aeabi_ddiv>
 800b50a:	ec53 2b19 	vmov	r2, r3, d9
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	9d00      	ldr	r5, [sp, #0]
 800b514:	ec41 0b19 	vmov	d9, r0, r1
 800b518:	4649      	mov	r1, r9
 800b51a:	4640      	mov	r0, r8
 800b51c:	f7f5 fb1c 	bl	8000b58 <__aeabi_d2iz>
 800b520:	4606      	mov	r6, r0
 800b522:	f7f4 ffff 	bl	8000524 <__aeabi_i2d>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4640      	mov	r0, r8
 800b52c:	4649      	mov	r1, r9
 800b52e:	f7f4 feab 	bl	8000288 <__aeabi_dsub>
 800b532:	3630      	adds	r6, #48	; 0x30
 800b534:	f805 6b01 	strb.w	r6, [r5], #1
 800b538:	ec53 2b19 	vmov	r2, r3, d9
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	2800      	cmp	r0, #0
 800b546:	d164      	bne.n	800b612 <_dtoa_r+0x62a>
 800b548:	4642      	mov	r2, r8
 800b54a:	464b      	mov	r3, r9
 800b54c:	4937      	ldr	r1, [pc, #220]	; (800b62c <_dtoa_r+0x644>)
 800b54e:	2000      	movs	r0, #0
 800b550:	f7f4 fe9a 	bl	8000288 <__aeabi_dsub>
 800b554:	ec53 2b19 	vmov	r2, r3, d9
 800b558:	f7f5 fac0 	bl	8000adc <__aeabi_dcmplt>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	f040 80b6 	bne.w	800b6ce <_dtoa_r+0x6e6>
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	429d      	cmp	r5, r3
 800b566:	f43f af7c 	beq.w	800b462 <_dtoa_r+0x47a>
 800b56a:	4b31      	ldr	r3, [pc, #196]	; (800b630 <_dtoa_r+0x648>)
 800b56c:	ec51 0b19 	vmov	r0, r1, d9
 800b570:	2200      	movs	r2, #0
 800b572:	f7f5 f841 	bl	80005f8 <__aeabi_dmul>
 800b576:	4b2e      	ldr	r3, [pc, #184]	; (800b630 <_dtoa_r+0x648>)
 800b578:	ec41 0b19 	vmov	d9, r0, r1
 800b57c:	2200      	movs	r2, #0
 800b57e:	4640      	mov	r0, r8
 800b580:	4649      	mov	r1, r9
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	4680      	mov	r8, r0
 800b588:	4689      	mov	r9, r1
 800b58a:	e7c5      	b.n	800b518 <_dtoa_r+0x530>
 800b58c:	ec51 0b17 	vmov	r0, r1, d7
 800b590:	f7f5 f832 	bl	80005f8 <__aeabi_dmul>
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	9d00      	ldr	r5, [sp, #0]
 800b598:	930f      	str	r3, [sp, #60]	; 0x3c
 800b59a:	ec41 0b19 	vmov	d9, r0, r1
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	f7f5 fad9 	bl	8000b58 <__aeabi_d2iz>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	f7f4 ffbc 	bl	8000524 <__aeabi_i2d>
 800b5ac:	3630      	adds	r6, #48	; 0x30
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f4 fe67 	bl	8000288 <__aeabi_dsub>
 800b5ba:	f805 6b01 	strb.w	r6, [r5], #1
 800b5be:	9b02      	ldr	r3, [sp, #8]
 800b5c0:	429d      	cmp	r5, r3
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	4689      	mov	r9, r1
 800b5c6:	f04f 0200 	mov.w	r2, #0
 800b5ca:	d124      	bne.n	800b616 <_dtoa_r+0x62e>
 800b5cc:	4b1b      	ldr	r3, [pc, #108]	; (800b63c <_dtoa_r+0x654>)
 800b5ce:	ec51 0b19 	vmov	r0, r1, d9
 800b5d2:	f7f4 fe5b 	bl	800028c <__adddf3>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f5 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d173      	bne.n	800b6ce <_dtoa_r+0x6e6>
 800b5e6:	ec53 2b19 	vmov	r2, r3, d9
 800b5ea:	4914      	ldr	r1, [pc, #80]	; (800b63c <_dtoa_r+0x654>)
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f7f4 fe4b 	bl	8000288 <__aeabi_dsub>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f5 fa6f 	bl	8000adc <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f43f af2f 	beq.w	800b462 <_dtoa_r+0x47a>
 800b604:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b606:	1e6b      	subs	r3, r5, #1
 800b608:	930f      	str	r3, [sp, #60]	; 0x3c
 800b60a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b60e:	2b30      	cmp	r3, #48	; 0x30
 800b610:	d0f8      	beq.n	800b604 <_dtoa_r+0x61c>
 800b612:	46bb      	mov	fp, r7
 800b614:	e04a      	b.n	800b6ac <_dtoa_r+0x6c4>
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <_dtoa_r+0x648>)
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	4680      	mov	r8, r0
 800b61e:	4689      	mov	r9, r1
 800b620:	e7bd      	b.n	800b59e <_dtoa_r+0x5b6>
 800b622:	bf00      	nop
 800b624:	0800db68 	.word	0x0800db68
 800b628:	0800db40 	.word	0x0800db40
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	40240000 	.word	0x40240000
 800b634:	401c0000 	.word	0x401c0000
 800b638:	40140000 	.word	0x40140000
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b644:	9d00      	ldr	r5, [sp, #0]
 800b646:	4642      	mov	r2, r8
 800b648:	464b      	mov	r3, r9
 800b64a:	4630      	mov	r0, r6
 800b64c:	4639      	mov	r1, r7
 800b64e:	f7f5 f8fd 	bl	800084c <__aeabi_ddiv>
 800b652:	f7f5 fa81 	bl	8000b58 <__aeabi_d2iz>
 800b656:	9001      	str	r0, [sp, #4]
 800b658:	f7f4 ff64 	bl	8000524 <__aeabi_i2d>
 800b65c:	4642      	mov	r2, r8
 800b65e:	464b      	mov	r3, r9
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f4 fe0c 	bl	8000288 <__aeabi_dsub>
 800b670:	9e01      	ldr	r6, [sp, #4]
 800b672:	9f04      	ldr	r7, [sp, #16]
 800b674:	3630      	adds	r6, #48	; 0x30
 800b676:	f805 6b01 	strb.w	r6, [r5], #1
 800b67a:	9e00      	ldr	r6, [sp, #0]
 800b67c:	1bae      	subs	r6, r5, r6
 800b67e:	42b7      	cmp	r7, r6
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	d134      	bne.n	800b6f0 <_dtoa_r+0x708>
 800b686:	f7f4 fe01 	bl	800028c <__adddf3>
 800b68a:	4642      	mov	r2, r8
 800b68c:	464b      	mov	r3, r9
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	f7f5 fa41 	bl	8000b18 <__aeabi_dcmpgt>
 800b696:	b9c8      	cbnz	r0, 800b6cc <_dtoa_r+0x6e4>
 800b698:	4642      	mov	r2, r8
 800b69a:	464b      	mov	r3, r9
 800b69c:	4630      	mov	r0, r6
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f5 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a4:	b110      	cbz	r0, 800b6ac <_dtoa_r+0x6c4>
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	07db      	lsls	r3, r3, #31
 800b6aa:	d40f      	bmi.n	800b6cc <_dtoa_r+0x6e4>
 800b6ac:	4651      	mov	r1, sl
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 ff36 	bl	800c520 <_Bfree>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6b8:	702b      	strb	r3, [r5, #0]
 800b6ba:	f10b 0301 	add.w	r3, fp, #1
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f43f ace2 	beq.w	800b08c <_dtoa_r+0xa4>
 800b6c8:	601d      	str	r5, [r3, #0]
 800b6ca:	e4df      	b.n	800b08c <_dtoa_r+0xa4>
 800b6cc:	465f      	mov	r7, fp
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	461d      	mov	r5, r3
 800b6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d6:	2a39      	cmp	r2, #57	; 0x39
 800b6d8:	d106      	bne.n	800b6e8 <_dtoa_r+0x700>
 800b6da:	9a00      	ldr	r2, [sp, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d1f7      	bne.n	800b6d0 <_dtoa_r+0x6e8>
 800b6e0:	9900      	ldr	r1, [sp, #0]
 800b6e2:	2230      	movs	r2, #48	; 0x30
 800b6e4:	3701      	adds	r7, #1
 800b6e6:	700a      	strb	r2, [r1, #0]
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	e790      	b.n	800b612 <_dtoa_r+0x62a>
 800b6f0:	4ba3      	ldr	r3, [pc, #652]	; (800b980 <_dtoa_r+0x998>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f7f4 ff80 	bl	80005f8 <__aeabi_dmul>
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	f7f5 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b704:	2800      	cmp	r0, #0
 800b706:	d09e      	beq.n	800b646 <_dtoa_r+0x65e>
 800b708:	e7d0      	b.n	800b6ac <_dtoa_r+0x6c4>
 800b70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	f000 80ca 	beq.w	800b8a6 <_dtoa_r+0x8be>
 800b712:	9a07      	ldr	r2, [sp, #28]
 800b714:	2a01      	cmp	r2, #1
 800b716:	f300 80ad 	bgt.w	800b874 <_dtoa_r+0x88c>
 800b71a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	f000 80a5 	beq.w	800b86c <_dtoa_r+0x884>
 800b722:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b726:	9e08      	ldr	r6, [sp, #32]
 800b728:	9d05      	ldr	r5, [sp, #20]
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	441a      	add	r2, r3
 800b72e:	9205      	str	r2, [sp, #20]
 800b730:	9a06      	ldr	r2, [sp, #24]
 800b732:	2101      	movs	r1, #1
 800b734:	441a      	add	r2, r3
 800b736:	4620      	mov	r0, r4
 800b738:	9206      	str	r2, [sp, #24]
 800b73a:	f000 fff1 	bl	800c720 <__i2b>
 800b73e:	4607      	mov	r7, r0
 800b740:	b165      	cbz	r5, 800b75c <_dtoa_r+0x774>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	dd09      	ble.n	800b75c <_dtoa_r+0x774>
 800b748:	42ab      	cmp	r3, r5
 800b74a:	9a05      	ldr	r2, [sp, #20]
 800b74c:	bfa8      	it	ge
 800b74e:	462b      	movge	r3, r5
 800b750:	1ad2      	subs	r2, r2, r3
 800b752:	9205      	str	r2, [sp, #20]
 800b754:	9a06      	ldr	r2, [sp, #24]
 800b756:	1aed      	subs	r5, r5, r3
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	9306      	str	r3, [sp, #24]
 800b75c:	9b08      	ldr	r3, [sp, #32]
 800b75e:	b1f3      	cbz	r3, 800b79e <_dtoa_r+0x7b6>
 800b760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 80a3 	beq.w	800b8ae <_dtoa_r+0x8c6>
 800b768:	2e00      	cmp	r6, #0
 800b76a:	dd10      	ble.n	800b78e <_dtoa_r+0x7a6>
 800b76c:	4639      	mov	r1, r7
 800b76e:	4632      	mov	r2, r6
 800b770:	4620      	mov	r0, r4
 800b772:	f001 f895 	bl	800c8a0 <__pow5mult>
 800b776:	4652      	mov	r2, sl
 800b778:	4601      	mov	r1, r0
 800b77a:	4607      	mov	r7, r0
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 ffe5 	bl	800c74c <__multiply>
 800b782:	4651      	mov	r1, sl
 800b784:	4680      	mov	r8, r0
 800b786:	4620      	mov	r0, r4
 800b788:	f000 feca 	bl	800c520 <_Bfree>
 800b78c:	46c2      	mov	sl, r8
 800b78e:	9b08      	ldr	r3, [sp, #32]
 800b790:	1b9a      	subs	r2, r3, r6
 800b792:	d004      	beq.n	800b79e <_dtoa_r+0x7b6>
 800b794:	4651      	mov	r1, sl
 800b796:	4620      	mov	r0, r4
 800b798:	f001 f882 	bl	800c8a0 <__pow5mult>
 800b79c:	4682      	mov	sl, r0
 800b79e:	2101      	movs	r1, #1
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 ffbd 	bl	800c720 <__i2b>
 800b7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	f340 8081 	ble.w	800b8b2 <_dtoa_r+0x8ca>
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f001 f873 	bl	800c8a0 <__pow5mult>
 800b7ba:	9b07      	ldr	r3, [sp, #28]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	4606      	mov	r6, r0
 800b7c0:	dd7a      	ble.n	800b8b8 <_dtoa_r+0x8d0>
 800b7c2:	f04f 0800 	mov.w	r8, #0
 800b7c6:	6933      	ldr	r3, [r6, #16]
 800b7c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7cc:	6918      	ldr	r0, [r3, #16]
 800b7ce:	f000 ff59 	bl	800c684 <__hi0bits>
 800b7d2:	f1c0 0020 	rsb	r0, r0, #32
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	4418      	add	r0, r3
 800b7da:	f010 001f 	ands.w	r0, r0, #31
 800b7de:	f000 8094 	beq.w	800b90a <_dtoa_r+0x922>
 800b7e2:	f1c0 0320 	rsb	r3, r0, #32
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	f340 8085 	ble.w	800b8f6 <_dtoa_r+0x90e>
 800b7ec:	9b05      	ldr	r3, [sp, #20]
 800b7ee:	f1c0 001c 	rsb	r0, r0, #28
 800b7f2:	4403      	add	r3, r0
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	4403      	add	r3, r0
 800b7fa:	4405      	add	r5, r0
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	9b05      	ldr	r3, [sp, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	dd05      	ble.n	800b810 <_dtoa_r+0x828>
 800b804:	4651      	mov	r1, sl
 800b806:	461a      	mov	r2, r3
 800b808:	4620      	mov	r0, r4
 800b80a:	f001 f8a3 	bl	800c954 <__lshift>
 800b80e:	4682      	mov	sl, r0
 800b810:	9b06      	ldr	r3, [sp, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	dd05      	ble.n	800b822 <_dtoa_r+0x83a>
 800b816:	4631      	mov	r1, r6
 800b818:	461a      	mov	r2, r3
 800b81a:	4620      	mov	r0, r4
 800b81c:	f001 f89a 	bl	800c954 <__lshift>
 800b820:	4606      	mov	r6, r0
 800b822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b824:	2b00      	cmp	r3, #0
 800b826:	d072      	beq.n	800b90e <_dtoa_r+0x926>
 800b828:	4631      	mov	r1, r6
 800b82a:	4650      	mov	r0, sl
 800b82c:	f001 f8fe 	bl	800ca2c <__mcmp>
 800b830:	2800      	cmp	r0, #0
 800b832:	da6c      	bge.n	800b90e <_dtoa_r+0x926>
 800b834:	2300      	movs	r3, #0
 800b836:	4651      	mov	r1, sl
 800b838:	220a      	movs	r2, #10
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fe92 	bl	800c564 <__multadd>
 800b840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b842:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b846:	4682      	mov	sl, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 81b0 	beq.w	800bbae <_dtoa_r+0xbc6>
 800b84e:	2300      	movs	r3, #0
 800b850:	4639      	mov	r1, r7
 800b852:	220a      	movs	r2, #10
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fe85 	bl	800c564 <__multadd>
 800b85a:	9b01      	ldr	r3, [sp, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	4607      	mov	r7, r0
 800b860:	f300 8096 	bgt.w	800b990 <_dtoa_r+0x9a8>
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	2b02      	cmp	r3, #2
 800b868:	dc59      	bgt.n	800b91e <_dtoa_r+0x936>
 800b86a:	e091      	b.n	800b990 <_dtoa_r+0x9a8>
 800b86c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b86e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b872:	e758      	b.n	800b726 <_dtoa_r+0x73e>
 800b874:	9b04      	ldr	r3, [sp, #16]
 800b876:	1e5e      	subs	r6, r3, #1
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	42b3      	cmp	r3, r6
 800b87c:	bfbf      	itttt	lt
 800b87e:	9b08      	ldrlt	r3, [sp, #32]
 800b880:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b882:	9608      	strlt	r6, [sp, #32]
 800b884:	1af3      	sublt	r3, r6, r3
 800b886:	bfb4      	ite	lt
 800b888:	18d2      	addlt	r2, r2, r3
 800b88a:	1b9e      	subge	r6, r3, r6
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	bfbc      	itt	lt
 800b890:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b892:	2600      	movlt	r6, #0
 800b894:	2b00      	cmp	r3, #0
 800b896:	bfb7      	itett	lt
 800b898:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b89c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b8a0:	1a9d      	sublt	r5, r3, r2
 800b8a2:	2300      	movlt	r3, #0
 800b8a4:	e741      	b.n	800b72a <_dtoa_r+0x742>
 800b8a6:	9e08      	ldr	r6, [sp, #32]
 800b8a8:	9d05      	ldr	r5, [sp, #20]
 800b8aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8ac:	e748      	b.n	800b740 <_dtoa_r+0x758>
 800b8ae:	9a08      	ldr	r2, [sp, #32]
 800b8b0:	e770      	b.n	800b794 <_dtoa_r+0x7ac>
 800b8b2:	9b07      	ldr	r3, [sp, #28]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	dc19      	bgt.n	800b8ec <_dtoa_r+0x904>
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	b9bb      	cbnz	r3, 800b8ec <_dtoa_r+0x904>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8c2:	b99b      	cbnz	r3, 800b8ec <_dtoa_r+0x904>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8ca:	0d1b      	lsrs	r3, r3, #20
 800b8cc:	051b      	lsls	r3, r3, #20
 800b8ce:	b183      	cbz	r3, 800b8f2 <_dtoa_r+0x90a>
 800b8d0:	9b05      	ldr	r3, [sp, #20]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	9b06      	ldr	r3, [sp, #24]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	9306      	str	r3, [sp, #24]
 800b8dc:	f04f 0801 	mov.w	r8, #1
 800b8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f47f af6f 	bne.w	800b7c6 <_dtoa_r+0x7de>
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	e774      	b.n	800b7d6 <_dtoa_r+0x7ee>
 800b8ec:	f04f 0800 	mov.w	r8, #0
 800b8f0:	e7f6      	b.n	800b8e0 <_dtoa_r+0x8f8>
 800b8f2:	4698      	mov	r8, r3
 800b8f4:	e7f4      	b.n	800b8e0 <_dtoa_r+0x8f8>
 800b8f6:	d082      	beq.n	800b7fe <_dtoa_r+0x816>
 800b8f8:	9a05      	ldr	r2, [sp, #20]
 800b8fa:	331c      	adds	r3, #28
 800b8fc:	441a      	add	r2, r3
 800b8fe:	9205      	str	r2, [sp, #20]
 800b900:	9a06      	ldr	r2, [sp, #24]
 800b902:	441a      	add	r2, r3
 800b904:	441d      	add	r5, r3
 800b906:	9206      	str	r2, [sp, #24]
 800b908:	e779      	b.n	800b7fe <_dtoa_r+0x816>
 800b90a:	4603      	mov	r3, r0
 800b90c:	e7f4      	b.n	800b8f8 <_dtoa_r+0x910>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	dc37      	bgt.n	800b984 <_dtoa_r+0x99c>
 800b914:	9b07      	ldr	r3, [sp, #28]
 800b916:	2b02      	cmp	r3, #2
 800b918:	dd34      	ble.n	800b984 <_dtoa_r+0x99c>
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	b963      	cbnz	r3, 800b93c <_dtoa_r+0x954>
 800b922:	4631      	mov	r1, r6
 800b924:	2205      	movs	r2, #5
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fe1c 	bl	800c564 <__multadd>
 800b92c:	4601      	mov	r1, r0
 800b92e:	4606      	mov	r6, r0
 800b930:	4650      	mov	r0, sl
 800b932:	f001 f87b 	bl	800ca2c <__mcmp>
 800b936:	2800      	cmp	r0, #0
 800b938:	f73f adbb 	bgt.w	800b4b2 <_dtoa_r+0x4ca>
 800b93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b93e:	9d00      	ldr	r5, [sp, #0]
 800b940:	ea6f 0b03 	mvn.w	fp, r3
 800b944:	f04f 0800 	mov.w	r8, #0
 800b948:	4631      	mov	r1, r6
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 fde8 	bl	800c520 <_Bfree>
 800b950:	2f00      	cmp	r7, #0
 800b952:	f43f aeab 	beq.w	800b6ac <_dtoa_r+0x6c4>
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	d005      	beq.n	800b968 <_dtoa_r+0x980>
 800b95c:	45b8      	cmp	r8, r7
 800b95e:	d003      	beq.n	800b968 <_dtoa_r+0x980>
 800b960:	4641      	mov	r1, r8
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fddc 	bl	800c520 <_Bfree>
 800b968:	4639      	mov	r1, r7
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fdd8 	bl	800c520 <_Bfree>
 800b970:	e69c      	b.n	800b6ac <_dtoa_r+0x6c4>
 800b972:	2600      	movs	r6, #0
 800b974:	4637      	mov	r7, r6
 800b976:	e7e1      	b.n	800b93c <_dtoa_r+0x954>
 800b978:	46bb      	mov	fp, r7
 800b97a:	4637      	mov	r7, r6
 800b97c:	e599      	b.n	800b4b2 <_dtoa_r+0x4ca>
 800b97e:	bf00      	nop
 800b980:	40240000 	.word	0x40240000
 800b984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b986:	2b00      	cmp	r3, #0
 800b988:	f000 80c8 	beq.w	800bb1c <_dtoa_r+0xb34>
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	2d00      	cmp	r5, #0
 800b992:	dd05      	ble.n	800b9a0 <_dtoa_r+0x9b8>
 800b994:	4639      	mov	r1, r7
 800b996:	462a      	mov	r2, r5
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 ffdb 	bl	800c954 <__lshift>
 800b99e:	4607      	mov	r7, r0
 800b9a0:	f1b8 0f00 	cmp.w	r8, #0
 800b9a4:	d05b      	beq.n	800ba5e <_dtoa_r+0xa76>
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 fd79 	bl	800c4a0 <_Balloc>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <_dtoa_r+0x9d6>
 800b9b2:	4b83      	ldr	r3, [pc, #524]	; (800bbc0 <_dtoa_r+0xbd8>)
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b9ba:	f7ff bb2e 	b.w	800b01a <_dtoa_r+0x32>
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	0092      	lsls	r2, r2, #2
 800b9c4:	f107 010c 	add.w	r1, r7, #12
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7ff fa6d 	bl	800aea8 <memcpy>
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 ffbe 	bl	800c954 <__lshift>
 800b9d8:	9b00      	ldr	r3, [sp, #0]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	9308      	str	r3, [sp, #32]
 800b9e6:	9b02      	ldr	r3, [sp, #8]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	46b8      	mov	r8, r7
 800b9ee:	9306      	str	r3, [sp, #24]
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	9b04      	ldr	r3, [sp, #16]
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	f7ff fa6c 	bl	800aed8 <quorem>
 800ba00:	4641      	mov	r1, r8
 800ba02:	9002      	str	r0, [sp, #8]
 800ba04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba08:	4650      	mov	r0, sl
 800ba0a:	f001 f80f 	bl	800ca2c <__mcmp>
 800ba0e:	463a      	mov	r2, r7
 800ba10:	9005      	str	r0, [sp, #20]
 800ba12:	4631      	mov	r1, r6
 800ba14:	4620      	mov	r0, r4
 800ba16:	f001 f825 	bl	800ca64 <__mdiff>
 800ba1a:	68c2      	ldr	r2, [r0, #12]
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	bb02      	cbnz	r2, 800ba62 <_dtoa_r+0xa7a>
 800ba20:	4601      	mov	r1, r0
 800ba22:	4650      	mov	r0, sl
 800ba24:	f001 f802 	bl	800ca2c <__mcmp>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba30:	f000 fd76 	bl	800c520 <_Bfree>
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba38:	9d04      	ldr	r5, [sp, #16]
 800ba3a:	ea43 0102 	orr.w	r1, r3, r2
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	4319      	orrs	r1, r3
 800ba42:	d110      	bne.n	800ba66 <_dtoa_r+0xa7e>
 800ba44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba48:	d029      	beq.n	800ba9e <_dtoa_r+0xab6>
 800ba4a:	9b05      	ldr	r3, [sp, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dd02      	ble.n	800ba56 <_dtoa_r+0xa6e>
 800ba50:	9b02      	ldr	r3, [sp, #8]
 800ba52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	f883 9000 	strb.w	r9, [r3]
 800ba5c:	e774      	b.n	800b948 <_dtoa_r+0x960>
 800ba5e:	4638      	mov	r0, r7
 800ba60:	e7ba      	b.n	800b9d8 <_dtoa_r+0x9f0>
 800ba62:	2201      	movs	r2, #1
 800ba64:	e7e1      	b.n	800ba2a <_dtoa_r+0xa42>
 800ba66:	9b05      	ldr	r3, [sp, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	db04      	blt.n	800ba76 <_dtoa_r+0xa8e>
 800ba6c:	9907      	ldr	r1, [sp, #28]
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	9906      	ldr	r1, [sp, #24]
 800ba72:	430b      	orrs	r3, r1
 800ba74:	d120      	bne.n	800bab8 <_dtoa_r+0xad0>
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	dded      	ble.n	800ba56 <_dtoa_r+0xa6e>
 800ba7a:	4651      	mov	r1, sl
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 ff68 	bl	800c954 <__lshift>
 800ba84:	4631      	mov	r1, r6
 800ba86:	4682      	mov	sl, r0
 800ba88:	f000 ffd0 	bl	800ca2c <__mcmp>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	dc03      	bgt.n	800ba98 <_dtoa_r+0xab0>
 800ba90:	d1e1      	bne.n	800ba56 <_dtoa_r+0xa6e>
 800ba92:	f019 0f01 	tst.w	r9, #1
 800ba96:	d0de      	beq.n	800ba56 <_dtoa_r+0xa6e>
 800ba98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba9c:	d1d8      	bne.n	800ba50 <_dtoa_r+0xa68>
 800ba9e:	9a01      	ldr	r2, [sp, #4]
 800baa0:	2339      	movs	r3, #57	; 0x39
 800baa2:	7013      	strb	r3, [r2, #0]
 800baa4:	462b      	mov	r3, r5
 800baa6:	461d      	mov	r5, r3
 800baa8:	3b01      	subs	r3, #1
 800baaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800baae:	2a39      	cmp	r2, #57	; 0x39
 800bab0:	d06c      	beq.n	800bb8c <_dtoa_r+0xba4>
 800bab2:	3201      	adds	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	e747      	b.n	800b948 <_dtoa_r+0x960>
 800bab8:	2a00      	cmp	r2, #0
 800baba:	dd07      	ble.n	800bacc <_dtoa_r+0xae4>
 800babc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bac0:	d0ed      	beq.n	800ba9e <_dtoa_r+0xab6>
 800bac2:	9a01      	ldr	r2, [sp, #4]
 800bac4:	f109 0301 	add.w	r3, r9, #1
 800bac8:	7013      	strb	r3, [r2, #0]
 800baca:	e73d      	b.n	800b948 <_dtoa_r+0x960>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	9a08      	ldr	r2, [sp, #32]
 800bad0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d043      	beq.n	800bb60 <_dtoa_r+0xb78>
 800bad8:	4651      	mov	r1, sl
 800bada:	2300      	movs	r3, #0
 800badc:	220a      	movs	r2, #10
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 fd40 	bl	800c564 <__multadd>
 800bae4:	45b8      	cmp	r8, r7
 800bae6:	4682      	mov	sl, r0
 800bae8:	f04f 0300 	mov.w	r3, #0
 800baec:	f04f 020a 	mov.w	r2, #10
 800baf0:	4641      	mov	r1, r8
 800baf2:	4620      	mov	r0, r4
 800baf4:	d107      	bne.n	800bb06 <_dtoa_r+0xb1e>
 800baf6:	f000 fd35 	bl	800c564 <__multadd>
 800bafa:	4680      	mov	r8, r0
 800bafc:	4607      	mov	r7, r0
 800bafe:	9b04      	ldr	r3, [sp, #16]
 800bb00:	3301      	adds	r3, #1
 800bb02:	9304      	str	r3, [sp, #16]
 800bb04:	e775      	b.n	800b9f2 <_dtoa_r+0xa0a>
 800bb06:	f000 fd2d 	bl	800c564 <__multadd>
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 fd26 	bl	800c564 <__multadd>
 800bb18:	4607      	mov	r7, r0
 800bb1a:	e7f0      	b.n	800bafe <_dtoa_r+0xb16>
 800bb1c:	9b04      	ldr	r3, [sp, #16]
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	9d00      	ldr	r5, [sp, #0]
 800bb22:	4631      	mov	r1, r6
 800bb24:	4650      	mov	r0, sl
 800bb26:	f7ff f9d7 	bl	800aed8 <quorem>
 800bb2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb2e:	9b00      	ldr	r3, [sp, #0]
 800bb30:	f805 9b01 	strb.w	r9, [r5], #1
 800bb34:	1aea      	subs	r2, r5, r3
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	dd07      	ble.n	800bb4c <_dtoa_r+0xb64>
 800bb3c:	4651      	mov	r1, sl
 800bb3e:	2300      	movs	r3, #0
 800bb40:	220a      	movs	r2, #10
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 fd0e 	bl	800c564 <__multadd>
 800bb48:	4682      	mov	sl, r0
 800bb4a:	e7ea      	b.n	800bb22 <_dtoa_r+0xb3a>
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfc8      	it	gt
 800bb52:	461d      	movgt	r5, r3
 800bb54:	9b00      	ldr	r3, [sp, #0]
 800bb56:	bfd8      	it	le
 800bb58:	2501      	movle	r5, #1
 800bb5a:	441d      	add	r5, r3
 800bb5c:	f04f 0800 	mov.w	r8, #0
 800bb60:	4651      	mov	r1, sl
 800bb62:	2201      	movs	r2, #1
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fef5 	bl	800c954 <__lshift>
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	f000 ff5d 	bl	800ca2c <__mcmp>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	dc96      	bgt.n	800baa4 <_dtoa_r+0xabc>
 800bb76:	d102      	bne.n	800bb7e <_dtoa_r+0xb96>
 800bb78:	f019 0f01 	tst.w	r9, #1
 800bb7c:	d192      	bne.n	800baa4 <_dtoa_r+0xabc>
 800bb7e:	462b      	mov	r3, r5
 800bb80:	461d      	mov	r5, r3
 800bb82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb86:	2a30      	cmp	r2, #48	; 0x30
 800bb88:	d0fa      	beq.n	800bb80 <_dtoa_r+0xb98>
 800bb8a:	e6dd      	b.n	800b948 <_dtoa_r+0x960>
 800bb8c:	9a00      	ldr	r2, [sp, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d189      	bne.n	800baa6 <_dtoa_r+0xabe>
 800bb92:	f10b 0b01 	add.w	fp, fp, #1
 800bb96:	2331      	movs	r3, #49	; 0x31
 800bb98:	e796      	b.n	800bac8 <_dtoa_r+0xae0>
 800bb9a:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <_dtoa_r+0xbdc>)
 800bb9c:	f7ff ba99 	b.w	800b0d2 <_dtoa_r+0xea>
 800bba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f47f aa6d 	bne.w	800b082 <_dtoa_r+0x9a>
 800bba8:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <_dtoa_r+0xbe0>)
 800bbaa:	f7ff ba92 	b.w	800b0d2 <_dtoa_r+0xea>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dcb5      	bgt.n	800bb20 <_dtoa_r+0xb38>
 800bbb4:	9b07      	ldr	r3, [sp, #28]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	f73f aeb1 	bgt.w	800b91e <_dtoa_r+0x936>
 800bbbc:	e7b0      	b.n	800bb20 <_dtoa_r+0xb38>
 800bbbe:	bf00      	nop
 800bbc0:	0800da70 	.word	0x0800da70
 800bbc4:	0800d9c8 	.word	0x0800d9c8
 800bbc8:	0800d9f4 	.word	0x0800d9f4

0800bbcc <_free_r>:
 800bbcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d044      	beq.n	800bc5c <_free_r+0x90>
 800bbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd6:	9001      	str	r0, [sp, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f1a1 0404 	sub.w	r4, r1, #4
 800bbde:	bfb8      	it	lt
 800bbe0:	18e4      	addlt	r4, r4, r3
 800bbe2:	f000 fc51 	bl	800c488 <__malloc_lock>
 800bbe6:	4a1e      	ldr	r2, [pc, #120]	; (800bc60 <_free_r+0x94>)
 800bbe8:	9801      	ldr	r0, [sp, #4]
 800bbea:	6813      	ldr	r3, [r2, #0]
 800bbec:	b933      	cbnz	r3, 800bbfc <_free_r+0x30>
 800bbee:	6063      	str	r3, [r4, #4]
 800bbf0:	6014      	str	r4, [r2, #0]
 800bbf2:	b003      	add	sp, #12
 800bbf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbf8:	f000 bc4c 	b.w	800c494 <__malloc_unlock>
 800bbfc:	42a3      	cmp	r3, r4
 800bbfe:	d908      	bls.n	800bc12 <_free_r+0x46>
 800bc00:	6825      	ldr	r5, [r4, #0]
 800bc02:	1961      	adds	r1, r4, r5
 800bc04:	428b      	cmp	r3, r1
 800bc06:	bf01      	itttt	eq
 800bc08:	6819      	ldreq	r1, [r3, #0]
 800bc0a:	685b      	ldreq	r3, [r3, #4]
 800bc0c:	1949      	addeq	r1, r1, r5
 800bc0e:	6021      	streq	r1, [r4, #0]
 800bc10:	e7ed      	b.n	800bbee <_free_r+0x22>
 800bc12:	461a      	mov	r2, r3
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	b10b      	cbz	r3, 800bc1c <_free_r+0x50>
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	d9fa      	bls.n	800bc12 <_free_r+0x46>
 800bc1c:	6811      	ldr	r1, [r2, #0]
 800bc1e:	1855      	adds	r5, r2, r1
 800bc20:	42a5      	cmp	r5, r4
 800bc22:	d10b      	bne.n	800bc3c <_free_r+0x70>
 800bc24:	6824      	ldr	r4, [r4, #0]
 800bc26:	4421      	add	r1, r4
 800bc28:	1854      	adds	r4, r2, r1
 800bc2a:	42a3      	cmp	r3, r4
 800bc2c:	6011      	str	r1, [r2, #0]
 800bc2e:	d1e0      	bne.n	800bbf2 <_free_r+0x26>
 800bc30:	681c      	ldr	r4, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	6053      	str	r3, [r2, #4]
 800bc36:	440c      	add	r4, r1
 800bc38:	6014      	str	r4, [r2, #0]
 800bc3a:	e7da      	b.n	800bbf2 <_free_r+0x26>
 800bc3c:	d902      	bls.n	800bc44 <_free_r+0x78>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	6003      	str	r3, [r0, #0]
 800bc42:	e7d6      	b.n	800bbf2 <_free_r+0x26>
 800bc44:	6825      	ldr	r5, [r4, #0]
 800bc46:	1961      	adds	r1, r4, r5
 800bc48:	428b      	cmp	r3, r1
 800bc4a:	bf04      	itt	eq
 800bc4c:	6819      	ldreq	r1, [r3, #0]
 800bc4e:	685b      	ldreq	r3, [r3, #4]
 800bc50:	6063      	str	r3, [r4, #4]
 800bc52:	bf04      	itt	eq
 800bc54:	1949      	addeq	r1, r1, r5
 800bc56:	6021      	streq	r1, [r4, #0]
 800bc58:	6054      	str	r4, [r2, #4]
 800bc5a:	e7ca      	b.n	800bbf2 <_free_r+0x26>
 800bc5c:	b003      	add	sp, #12
 800bc5e:	bd30      	pop	{r4, r5, pc}
 800bc60:	20000818 	.word	0x20000818

0800bc64 <rshift>:
 800bc64:	6903      	ldr	r3, [r0, #16]
 800bc66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc72:	f100 0414 	add.w	r4, r0, #20
 800bc76:	dd45      	ble.n	800bd04 <rshift+0xa0>
 800bc78:	f011 011f 	ands.w	r1, r1, #31
 800bc7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc84:	d10c      	bne.n	800bca0 <rshift+0x3c>
 800bc86:	f100 0710 	add.w	r7, r0, #16
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	42b1      	cmp	r1, r6
 800bc8e:	d334      	bcc.n	800bcfa <rshift+0x96>
 800bc90:	1a9b      	subs	r3, r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	1eea      	subs	r2, r5, #3
 800bc96:	4296      	cmp	r6, r2
 800bc98:	bf38      	it	cc
 800bc9a:	2300      	movcc	r3, #0
 800bc9c:	4423      	add	r3, r4
 800bc9e:	e015      	b.n	800bccc <rshift+0x68>
 800bca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bca4:	f1c1 0820 	rsb	r8, r1, #32
 800bca8:	40cf      	lsrs	r7, r1
 800bcaa:	f105 0e04 	add.w	lr, r5, #4
 800bcae:	46a1      	mov	r9, r4
 800bcb0:	4576      	cmp	r6, lr
 800bcb2:	46f4      	mov	ip, lr
 800bcb4:	d815      	bhi.n	800bce2 <rshift+0x7e>
 800bcb6:	1a9a      	subs	r2, r3, r2
 800bcb8:	0092      	lsls	r2, r2, #2
 800bcba:	3a04      	subs	r2, #4
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	42ae      	cmp	r6, r5
 800bcc0:	bf38      	it	cc
 800bcc2:	2200      	movcc	r2, #0
 800bcc4:	18a3      	adds	r3, r4, r2
 800bcc6:	50a7      	str	r7, [r4, r2]
 800bcc8:	b107      	cbz	r7, 800bccc <rshift+0x68>
 800bcca:	3304      	adds	r3, #4
 800bccc:	1b1a      	subs	r2, r3, r4
 800bcce:	42a3      	cmp	r3, r4
 800bcd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bcd4:	bf08      	it	eq
 800bcd6:	2300      	moveq	r3, #0
 800bcd8:	6102      	str	r2, [r0, #16]
 800bcda:	bf08      	it	eq
 800bcdc:	6143      	streq	r3, [r0, #20]
 800bcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bce2:	f8dc c000 	ldr.w	ip, [ip]
 800bce6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcea:	ea4c 0707 	orr.w	r7, ip, r7
 800bcee:	f849 7b04 	str.w	r7, [r9], #4
 800bcf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcf6:	40cf      	lsrs	r7, r1
 800bcf8:	e7da      	b.n	800bcb0 <rshift+0x4c>
 800bcfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800bcfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd02:	e7c3      	b.n	800bc8c <rshift+0x28>
 800bd04:	4623      	mov	r3, r4
 800bd06:	e7e1      	b.n	800bccc <rshift+0x68>

0800bd08 <__hexdig_fun>:
 800bd08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd0c:	2b09      	cmp	r3, #9
 800bd0e:	d802      	bhi.n	800bd16 <__hexdig_fun+0xe>
 800bd10:	3820      	subs	r0, #32
 800bd12:	b2c0      	uxtb	r0, r0
 800bd14:	4770      	bx	lr
 800bd16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d801      	bhi.n	800bd22 <__hexdig_fun+0x1a>
 800bd1e:	3847      	subs	r0, #71	; 0x47
 800bd20:	e7f7      	b.n	800bd12 <__hexdig_fun+0xa>
 800bd22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d801      	bhi.n	800bd2e <__hexdig_fun+0x26>
 800bd2a:	3827      	subs	r0, #39	; 0x27
 800bd2c:	e7f1      	b.n	800bd12 <__hexdig_fun+0xa>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	4770      	bx	lr
	...

0800bd34 <__gethex>:
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	4617      	mov	r7, r2
 800bd3a:	680a      	ldr	r2, [r1, #0]
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	f102 0b02 	add.w	fp, r2, #2
 800bd42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd4a:	4681      	mov	r9, r0
 800bd4c:	468a      	mov	sl, r1
 800bd4e:	9302      	str	r3, [sp, #8]
 800bd50:	32fe      	adds	r2, #254	; 0xfe
 800bd52:	eb02 030b 	add.w	r3, r2, fp
 800bd56:	46d8      	mov	r8, fp
 800bd58:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	2830      	cmp	r0, #48	; 0x30
 800bd60:	d0f7      	beq.n	800bd52 <__gethex+0x1e>
 800bd62:	f7ff ffd1 	bl	800bd08 <__hexdig_fun>
 800bd66:	4604      	mov	r4, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d138      	bne.n	800bdde <__gethex+0xaa>
 800bd6c:	49a7      	ldr	r1, [pc, #668]	; (800c00c <__gethex+0x2d8>)
 800bd6e:	2201      	movs	r2, #1
 800bd70:	4640      	mov	r0, r8
 800bd72:	f7fe fffa 	bl	800ad6a <strncmp>
 800bd76:	4606      	mov	r6, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d169      	bne.n	800be50 <__gethex+0x11c>
 800bd7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bd80:	465d      	mov	r5, fp
 800bd82:	f7ff ffc1 	bl	800bd08 <__hexdig_fun>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d064      	beq.n	800be54 <__gethex+0x120>
 800bd8a:	465a      	mov	r2, fp
 800bd8c:	7810      	ldrb	r0, [r2, #0]
 800bd8e:	2830      	cmp	r0, #48	; 0x30
 800bd90:	4690      	mov	r8, r2
 800bd92:	f102 0201 	add.w	r2, r2, #1
 800bd96:	d0f9      	beq.n	800bd8c <__gethex+0x58>
 800bd98:	f7ff ffb6 	bl	800bd08 <__hexdig_fun>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	fab0 f480 	clz	r4, r0
 800bda2:	0964      	lsrs	r4, r4, #5
 800bda4:	465e      	mov	r6, fp
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	4642      	mov	r2, r8
 800bdaa:	4615      	mov	r5, r2
 800bdac:	3201      	adds	r2, #1
 800bdae:	7828      	ldrb	r0, [r5, #0]
 800bdb0:	f7ff ffaa 	bl	800bd08 <__hexdig_fun>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d1f8      	bne.n	800bdaa <__gethex+0x76>
 800bdb8:	4994      	ldr	r1, [pc, #592]	; (800c00c <__gethex+0x2d8>)
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f7fe ffd4 	bl	800ad6a <strncmp>
 800bdc2:	b978      	cbnz	r0, 800bde4 <__gethex+0xb0>
 800bdc4:	b946      	cbnz	r6, 800bdd8 <__gethex+0xa4>
 800bdc6:	1c6e      	adds	r6, r5, #1
 800bdc8:	4632      	mov	r2, r6
 800bdca:	4615      	mov	r5, r2
 800bdcc:	3201      	adds	r2, #1
 800bdce:	7828      	ldrb	r0, [r5, #0]
 800bdd0:	f7ff ff9a 	bl	800bd08 <__hexdig_fun>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1f8      	bne.n	800bdca <__gethex+0x96>
 800bdd8:	1b73      	subs	r3, r6, r5
 800bdda:	009e      	lsls	r6, r3, #2
 800bddc:	e004      	b.n	800bde8 <__gethex+0xb4>
 800bdde:	2400      	movs	r4, #0
 800bde0:	4626      	mov	r6, r4
 800bde2:	e7e1      	b.n	800bda8 <__gethex+0x74>
 800bde4:	2e00      	cmp	r6, #0
 800bde6:	d1f7      	bne.n	800bdd8 <__gethex+0xa4>
 800bde8:	782b      	ldrb	r3, [r5, #0]
 800bdea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdee:	2b50      	cmp	r3, #80	; 0x50
 800bdf0:	d13d      	bne.n	800be6e <__gethex+0x13a>
 800bdf2:	786b      	ldrb	r3, [r5, #1]
 800bdf4:	2b2b      	cmp	r3, #43	; 0x2b
 800bdf6:	d02f      	beq.n	800be58 <__gethex+0x124>
 800bdf8:	2b2d      	cmp	r3, #45	; 0x2d
 800bdfa:	d031      	beq.n	800be60 <__gethex+0x12c>
 800bdfc:	1c69      	adds	r1, r5, #1
 800bdfe:	f04f 0b00 	mov.w	fp, #0
 800be02:	7808      	ldrb	r0, [r1, #0]
 800be04:	f7ff ff80 	bl	800bd08 <__hexdig_fun>
 800be08:	1e42      	subs	r2, r0, #1
 800be0a:	b2d2      	uxtb	r2, r2
 800be0c:	2a18      	cmp	r2, #24
 800be0e:	d82e      	bhi.n	800be6e <__gethex+0x13a>
 800be10:	f1a0 0210 	sub.w	r2, r0, #16
 800be14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be18:	f7ff ff76 	bl	800bd08 <__hexdig_fun>
 800be1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800be20:	fa5f fc8c 	uxtb.w	ip, ip
 800be24:	f1bc 0f18 	cmp.w	ip, #24
 800be28:	d91d      	bls.n	800be66 <__gethex+0x132>
 800be2a:	f1bb 0f00 	cmp.w	fp, #0
 800be2e:	d000      	beq.n	800be32 <__gethex+0xfe>
 800be30:	4252      	negs	r2, r2
 800be32:	4416      	add	r6, r2
 800be34:	f8ca 1000 	str.w	r1, [sl]
 800be38:	b1dc      	cbz	r4, 800be72 <__gethex+0x13e>
 800be3a:	9b01      	ldr	r3, [sp, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bf14      	ite	ne
 800be40:	f04f 0800 	movne.w	r8, #0
 800be44:	f04f 0806 	moveq.w	r8, #6
 800be48:	4640      	mov	r0, r8
 800be4a:	b005      	add	sp, #20
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be50:	4645      	mov	r5, r8
 800be52:	4626      	mov	r6, r4
 800be54:	2401      	movs	r4, #1
 800be56:	e7c7      	b.n	800bde8 <__gethex+0xb4>
 800be58:	f04f 0b00 	mov.w	fp, #0
 800be5c:	1ca9      	adds	r1, r5, #2
 800be5e:	e7d0      	b.n	800be02 <__gethex+0xce>
 800be60:	f04f 0b01 	mov.w	fp, #1
 800be64:	e7fa      	b.n	800be5c <__gethex+0x128>
 800be66:	230a      	movs	r3, #10
 800be68:	fb03 0002 	mla	r0, r3, r2, r0
 800be6c:	e7d0      	b.n	800be10 <__gethex+0xdc>
 800be6e:	4629      	mov	r1, r5
 800be70:	e7e0      	b.n	800be34 <__gethex+0x100>
 800be72:	eba5 0308 	sub.w	r3, r5, r8
 800be76:	3b01      	subs	r3, #1
 800be78:	4621      	mov	r1, r4
 800be7a:	2b07      	cmp	r3, #7
 800be7c:	dc0a      	bgt.n	800be94 <__gethex+0x160>
 800be7e:	4648      	mov	r0, r9
 800be80:	f000 fb0e 	bl	800c4a0 <_Balloc>
 800be84:	4604      	mov	r4, r0
 800be86:	b940      	cbnz	r0, 800be9a <__gethex+0x166>
 800be88:	4b61      	ldr	r3, [pc, #388]	; (800c010 <__gethex+0x2dc>)
 800be8a:	4602      	mov	r2, r0
 800be8c:	21e4      	movs	r1, #228	; 0xe4
 800be8e:	4861      	ldr	r0, [pc, #388]	; (800c014 <__gethex+0x2e0>)
 800be90:	f001 f9f0 	bl	800d274 <__assert_func>
 800be94:	3101      	adds	r1, #1
 800be96:	105b      	asrs	r3, r3, #1
 800be98:	e7ef      	b.n	800be7a <__gethex+0x146>
 800be9a:	f100 0a14 	add.w	sl, r0, #20
 800be9e:	2300      	movs	r3, #0
 800bea0:	495a      	ldr	r1, [pc, #360]	; (800c00c <__gethex+0x2d8>)
 800bea2:	f8cd a004 	str.w	sl, [sp, #4]
 800bea6:	469b      	mov	fp, r3
 800bea8:	45a8      	cmp	r8, r5
 800beaa:	d342      	bcc.n	800bf32 <__gethex+0x1fe>
 800beac:	9801      	ldr	r0, [sp, #4]
 800beae:	f840 bb04 	str.w	fp, [r0], #4
 800beb2:	eba0 000a 	sub.w	r0, r0, sl
 800beb6:	1080      	asrs	r0, r0, #2
 800beb8:	6120      	str	r0, [r4, #16]
 800beba:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bebe:	4658      	mov	r0, fp
 800bec0:	f000 fbe0 	bl	800c684 <__hi0bits>
 800bec4:	683d      	ldr	r5, [r7, #0]
 800bec6:	eba8 0000 	sub.w	r0, r8, r0
 800beca:	42a8      	cmp	r0, r5
 800becc:	dd59      	ble.n	800bf82 <__gethex+0x24e>
 800bece:	eba0 0805 	sub.w	r8, r0, r5
 800bed2:	4641      	mov	r1, r8
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 ff6f 	bl	800cdb8 <__any_on>
 800beda:	4683      	mov	fp, r0
 800bedc:	b1b8      	cbz	r0, 800bf0e <__gethex+0x1da>
 800bede:	f108 33ff 	add.w	r3, r8, #4294967295
 800bee2:	1159      	asrs	r1, r3, #5
 800bee4:	f003 021f 	and.w	r2, r3, #31
 800bee8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800beec:	f04f 0b01 	mov.w	fp, #1
 800bef0:	fa0b f202 	lsl.w	r2, fp, r2
 800bef4:	420a      	tst	r2, r1
 800bef6:	d00a      	beq.n	800bf0e <__gethex+0x1da>
 800bef8:	455b      	cmp	r3, fp
 800befa:	dd06      	ble.n	800bf0a <__gethex+0x1d6>
 800befc:	f1a8 0102 	sub.w	r1, r8, #2
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 ff59 	bl	800cdb8 <__any_on>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d138      	bne.n	800bf7c <__gethex+0x248>
 800bf0a:	f04f 0b02 	mov.w	fp, #2
 800bf0e:	4641      	mov	r1, r8
 800bf10:	4620      	mov	r0, r4
 800bf12:	f7ff fea7 	bl	800bc64 <rshift>
 800bf16:	4446      	add	r6, r8
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	42b3      	cmp	r3, r6
 800bf1c:	da41      	bge.n	800bfa2 <__gethex+0x26e>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4648      	mov	r0, r9
 800bf22:	f000 fafd 	bl	800c520 <_Bfree>
 800bf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf28:	2300      	movs	r3, #0
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bf30:	e78a      	b.n	800be48 <__gethex+0x114>
 800bf32:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bf36:	2a2e      	cmp	r2, #46	; 0x2e
 800bf38:	d014      	beq.n	800bf64 <__gethex+0x230>
 800bf3a:	2b20      	cmp	r3, #32
 800bf3c:	d106      	bne.n	800bf4c <__gethex+0x218>
 800bf3e:	9b01      	ldr	r3, [sp, #4]
 800bf40:	f843 bb04 	str.w	fp, [r3], #4
 800bf44:	f04f 0b00 	mov.w	fp, #0
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	465b      	mov	r3, fp
 800bf4c:	7828      	ldrb	r0, [r5, #0]
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	f7ff feda 	bl	800bd08 <__hexdig_fun>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	f000 000f 	and.w	r0, r0, #15
 800bf5a:	4098      	lsls	r0, r3
 800bf5c:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf60:	3304      	adds	r3, #4
 800bf62:	e7a1      	b.n	800bea8 <__gethex+0x174>
 800bf64:	45a8      	cmp	r8, r5
 800bf66:	d8e8      	bhi.n	800bf3a <__gethex+0x206>
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	9303      	str	r3, [sp, #12]
 800bf6e:	f7fe fefc 	bl	800ad6a <strncmp>
 800bf72:	4926      	ldr	r1, [pc, #152]	; (800c00c <__gethex+0x2d8>)
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d1df      	bne.n	800bf3a <__gethex+0x206>
 800bf7a:	e795      	b.n	800bea8 <__gethex+0x174>
 800bf7c:	f04f 0b03 	mov.w	fp, #3
 800bf80:	e7c5      	b.n	800bf0e <__gethex+0x1da>
 800bf82:	da0b      	bge.n	800bf9c <__gethex+0x268>
 800bf84:	eba5 0800 	sub.w	r8, r5, r0
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4642      	mov	r2, r8
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f000 fce1 	bl	800c954 <__lshift>
 800bf92:	eba6 0608 	sub.w	r6, r6, r8
 800bf96:	4604      	mov	r4, r0
 800bf98:	f100 0a14 	add.w	sl, r0, #20
 800bf9c:	f04f 0b00 	mov.w	fp, #0
 800bfa0:	e7ba      	b.n	800bf18 <__gethex+0x1e4>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	42b3      	cmp	r3, r6
 800bfa6:	dd73      	ble.n	800c090 <__gethex+0x35c>
 800bfa8:	1b9e      	subs	r6, r3, r6
 800bfaa:	42b5      	cmp	r5, r6
 800bfac:	dc34      	bgt.n	800c018 <__gethex+0x2e4>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d023      	beq.n	800bffc <__gethex+0x2c8>
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d025      	beq.n	800c004 <__gethex+0x2d0>
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d115      	bne.n	800bfe8 <__gethex+0x2b4>
 800bfbc:	42b5      	cmp	r5, r6
 800bfbe:	d113      	bne.n	800bfe8 <__gethex+0x2b4>
 800bfc0:	2d01      	cmp	r5, #1
 800bfc2:	d10b      	bne.n	800bfdc <__gethex+0x2a8>
 800bfc4:	9a02      	ldr	r2, [sp, #8]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	2301      	movs	r3, #1
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	f8ca 3000 	str.w	r3, [sl]
 800bfd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfd4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bfd8:	601c      	str	r4, [r3, #0]
 800bfda:	e735      	b.n	800be48 <__gethex+0x114>
 800bfdc:	1e69      	subs	r1, r5, #1
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f000 feea 	bl	800cdb8 <__any_on>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d1ed      	bne.n	800bfc4 <__gethex+0x290>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4648      	mov	r0, r9
 800bfec:	f000 fa98 	bl	800c520 <_Bfree>
 800bff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bff2:	2300      	movs	r3, #0
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bffa:	e725      	b.n	800be48 <__gethex+0x114>
 800bffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f2      	bne.n	800bfe8 <__gethex+0x2b4>
 800c002:	e7df      	b.n	800bfc4 <__gethex+0x290>
 800c004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1dc      	bne.n	800bfc4 <__gethex+0x290>
 800c00a:	e7ed      	b.n	800bfe8 <__gethex+0x2b4>
 800c00c:	0800d964 	.word	0x0800d964
 800c010:	0800da70 	.word	0x0800da70
 800c014:	0800da81 	.word	0x0800da81
 800c018:	f106 38ff 	add.w	r8, r6, #4294967295
 800c01c:	f1bb 0f00 	cmp.w	fp, #0
 800c020:	d133      	bne.n	800c08a <__gethex+0x356>
 800c022:	f1b8 0f00 	cmp.w	r8, #0
 800c026:	d004      	beq.n	800c032 <__gethex+0x2fe>
 800c028:	4641      	mov	r1, r8
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fec4 	bl	800cdb8 <__any_on>
 800c030:	4683      	mov	fp, r0
 800c032:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c036:	2301      	movs	r3, #1
 800c038:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c03c:	f008 081f 	and.w	r8, r8, #31
 800c040:	fa03 f308 	lsl.w	r3, r3, r8
 800c044:	4213      	tst	r3, r2
 800c046:	4631      	mov	r1, r6
 800c048:	4620      	mov	r0, r4
 800c04a:	bf18      	it	ne
 800c04c:	f04b 0b02 	orrne.w	fp, fp, #2
 800c050:	1bad      	subs	r5, r5, r6
 800c052:	f7ff fe07 	bl	800bc64 <rshift>
 800c056:	687e      	ldr	r6, [r7, #4]
 800c058:	f04f 0802 	mov.w	r8, #2
 800c05c:	f1bb 0f00 	cmp.w	fp, #0
 800c060:	d04a      	beq.n	800c0f8 <__gethex+0x3c4>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b02      	cmp	r3, #2
 800c066:	d016      	beq.n	800c096 <__gethex+0x362>
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d018      	beq.n	800c09e <__gethex+0x36a>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d109      	bne.n	800c084 <__gethex+0x350>
 800c070:	f01b 0f02 	tst.w	fp, #2
 800c074:	d006      	beq.n	800c084 <__gethex+0x350>
 800c076:	f8da 3000 	ldr.w	r3, [sl]
 800c07a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c07e:	f01b 0f01 	tst.w	fp, #1
 800c082:	d10f      	bne.n	800c0a4 <__gethex+0x370>
 800c084:	f048 0810 	orr.w	r8, r8, #16
 800c088:	e036      	b.n	800c0f8 <__gethex+0x3c4>
 800c08a:	f04f 0b01 	mov.w	fp, #1
 800c08e:	e7d0      	b.n	800c032 <__gethex+0x2fe>
 800c090:	f04f 0801 	mov.w	r8, #1
 800c094:	e7e2      	b.n	800c05c <__gethex+0x328>
 800c096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c098:	f1c3 0301 	rsb	r3, r3, #1
 800c09c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0ef      	beq.n	800c084 <__gethex+0x350>
 800c0a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0a8:	f104 0214 	add.w	r2, r4, #20
 800c0ac:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4694      	mov	ip, r2
 800c0ba:	f852 1b04 	ldr.w	r1, [r2], #4
 800c0be:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c0c2:	d01e      	beq.n	800c102 <__gethex+0x3ce>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	f8cc 1000 	str.w	r1, [ip]
 800c0ca:	f1b8 0f02 	cmp.w	r8, #2
 800c0ce:	f104 0214 	add.w	r2, r4, #20
 800c0d2:	d13d      	bne.n	800c150 <__gethex+0x41c>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	d10b      	bne.n	800c0f4 <__gethex+0x3c0>
 800c0dc:	1169      	asrs	r1, r5, #5
 800c0de:	2301      	movs	r3, #1
 800c0e0:	f005 051f 	and.w	r5, r5, #31
 800c0e4:	fa03 f505 	lsl.w	r5, r3, r5
 800c0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0ec:	421d      	tst	r5, r3
 800c0ee:	bf18      	it	ne
 800c0f0:	f04f 0801 	movne.w	r8, #1
 800c0f4:	f048 0820 	orr.w	r8, r8, #32
 800c0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0fa:	601c      	str	r4, [r3, #0]
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	601e      	str	r6, [r3, #0]
 800c100:	e6a2      	b.n	800be48 <__gethex+0x114>
 800c102:	4290      	cmp	r0, r2
 800c104:	f842 3c04 	str.w	r3, [r2, #-4]
 800c108:	d8d6      	bhi.n	800c0b8 <__gethex+0x384>
 800c10a:	68a2      	ldr	r2, [r4, #8]
 800c10c:	4593      	cmp	fp, r2
 800c10e:	db17      	blt.n	800c140 <__gethex+0x40c>
 800c110:	6861      	ldr	r1, [r4, #4]
 800c112:	4648      	mov	r0, r9
 800c114:	3101      	adds	r1, #1
 800c116:	f000 f9c3 	bl	800c4a0 <_Balloc>
 800c11a:	4682      	mov	sl, r0
 800c11c:	b918      	cbnz	r0, 800c126 <__gethex+0x3f2>
 800c11e:	4b1b      	ldr	r3, [pc, #108]	; (800c18c <__gethex+0x458>)
 800c120:	4602      	mov	r2, r0
 800c122:	2184      	movs	r1, #132	; 0x84
 800c124:	e6b3      	b.n	800be8e <__gethex+0x15a>
 800c126:	6922      	ldr	r2, [r4, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	f104 010c 	add.w	r1, r4, #12
 800c12e:	0092      	lsls	r2, r2, #2
 800c130:	300c      	adds	r0, #12
 800c132:	f7fe feb9 	bl	800aea8 <memcpy>
 800c136:	4621      	mov	r1, r4
 800c138:	4648      	mov	r0, r9
 800c13a:	f000 f9f1 	bl	800c520 <_Bfree>
 800c13e:	4654      	mov	r4, sl
 800c140:	6922      	ldr	r2, [r4, #16]
 800c142:	1c51      	adds	r1, r2, #1
 800c144:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c148:	6121      	str	r1, [r4, #16]
 800c14a:	2101      	movs	r1, #1
 800c14c:	6151      	str	r1, [r2, #20]
 800c14e:	e7bc      	b.n	800c0ca <__gethex+0x396>
 800c150:	6921      	ldr	r1, [r4, #16]
 800c152:	4559      	cmp	r1, fp
 800c154:	dd0b      	ble.n	800c16e <__gethex+0x43a>
 800c156:	2101      	movs	r1, #1
 800c158:	4620      	mov	r0, r4
 800c15a:	f7ff fd83 	bl	800bc64 <rshift>
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	3601      	adds	r6, #1
 800c162:	42b3      	cmp	r3, r6
 800c164:	f6ff aedb 	blt.w	800bf1e <__gethex+0x1ea>
 800c168:	f04f 0801 	mov.w	r8, #1
 800c16c:	e7c2      	b.n	800c0f4 <__gethex+0x3c0>
 800c16e:	f015 051f 	ands.w	r5, r5, #31
 800c172:	d0f9      	beq.n	800c168 <__gethex+0x434>
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	441a      	add	r2, r3
 800c178:	f1c5 0520 	rsb	r5, r5, #32
 800c17c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c180:	f000 fa80 	bl	800c684 <__hi0bits>
 800c184:	42a8      	cmp	r0, r5
 800c186:	dbe6      	blt.n	800c156 <__gethex+0x422>
 800c188:	e7ee      	b.n	800c168 <__gethex+0x434>
 800c18a:	bf00      	nop
 800c18c:	0800da70 	.word	0x0800da70

0800c190 <L_shift>:
 800c190:	f1c2 0208 	rsb	r2, r2, #8
 800c194:	0092      	lsls	r2, r2, #2
 800c196:	b570      	push	{r4, r5, r6, lr}
 800c198:	f1c2 0620 	rsb	r6, r2, #32
 800c19c:	6843      	ldr	r3, [r0, #4]
 800c19e:	6804      	ldr	r4, [r0, #0]
 800c1a0:	fa03 f506 	lsl.w	r5, r3, r6
 800c1a4:	432c      	orrs	r4, r5
 800c1a6:	40d3      	lsrs	r3, r2
 800c1a8:	6004      	str	r4, [r0, #0]
 800c1aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1ae:	4288      	cmp	r0, r1
 800c1b0:	d3f4      	bcc.n	800c19c <L_shift+0xc>
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}

0800c1b4 <__match>:
 800c1b4:	b530      	push	{r4, r5, lr}
 800c1b6:	6803      	ldr	r3, [r0, #0]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1be:	b914      	cbnz	r4, 800c1c6 <__match+0x12>
 800c1c0:	6003      	str	r3, [r0, #0]
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	bd30      	pop	{r4, r5, pc}
 800c1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1ce:	2d19      	cmp	r5, #25
 800c1d0:	bf98      	it	ls
 800c1d2:	3220      	addls	r2, #32
 800c1d4:	42a2      	cmp	r2, r4
 800c1d6:	d0f0      	beq.n	800c1ba <__match+0x6>
 800c1d8:	2000      	movs	r0, #0
 800c1da:	e7f3      	b.n	800c1c4 <__match+0x10>

0800c1dc <__hexnan>:
 800c1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e0:	680b      	ldr	r3, [r1, #0]
 800c1e2:	6801      	ldr	r1, [r0, #0]
 800c1e4:	115e      	asrs	r6, r3, #5
 800c1e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1ea:	f013 031f 	ands.w	r3, r3, #31
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	bf18      	it	ne
 800c1f2:	3604      	addne	r6, #4
 800c1f4:	2500      	movs	r5, #0
 800c1f6:	1f37      	subs	r7, r6, #4
 800c1f8:	4682      	mov	sl, r0
 800c1fa:	4690      	mov	r8, r2
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800c202:	46b9      	mov	r9, r7
 800c204:	463c      	mov	r4, r7
 800c206:	9502      	str	r5, [sp, #8]
 800c208:	46ab      	mov	fp, r5
 800c20a:	784a      	ldrb	r2, [r1, #1]
 800c20c:	1c4b      	adds	r3, r1, #1
 800c20e:	9303      	str	r3, [sp, #12]
 800c210:	b342      	cbz	r2, 800c264 <__hexnan+0x88>
 800c212:	4610      	mov	r0, r2
 800c214:	9105      	str	r1, [sp, #20]
 800c216:	9204      	str	r2, [sp, #16]
 800c218:	f7ff fd76 	bl	800bd08 <__hexdig_fun>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d14f      	bne.n	800c2c0 <__hexnan+0xe4>
 800c220:	9a04      	ldr	r2, [sp, #16]
 800c222:	9905      	ldr	r1, [sp, #20]
 800c224:	2a20      	cmp	r2, #32
 800c226:	d818      	bhi.n	800c25a <__hexnan+0x7e>
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	459b      	cmp	fp, r3
 800c22c:	dd13      	ble.n	800c256 <__hexnan+0x7a>
 800c22e:	454c      	cmp	r4, r9
 800c230:	d206      	bcs.n	800c240 <__hexnan+0x64>
 800c232:	2d07      	cmp	r5, #7
 800c234:	dc04      	bgt.n	800c240 <__hexnan+0x64>
 800c236:	462a      	mov	r2, r5
 800c238:	4649      	mov	r1, r9
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7ff ffa8 	bl	800c190 <L_shift>
 800c240:	4544      	cmp	r4, r8
 800c242:	d950      	bls.n	800c2e6 <__hexnan+0x10a>
 800c244:	2300      	movs	r3, #0
 800c246:	f1a4 0904 	sub.w	r9, r4, #4
 800c24a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c24e:	f8cd b008 	str.w	fp, [sp, #8]
 800c252:	464c      	mov	r4, r9
 800c254:	461d      	mov	r5, r3
 800c256:	9903      	ldr	r1, [sp, #12]
 800c258:	e7d7      	b.n	800c20a <__hexnan+0x2e>
 800c25a:	2a29      	cmp	r2, #41	; 0x29
 800c25c:	d155      	bne.n	800c30a <__hexnan+0x12e>
 800c25e:	3102      	adds	r1, #2
 800c260:	f8ca 1000 	str.w	r1, [sl]
 800c264:	f1bb 0f00 	cmp.w	fp, #0
 800c268:	d04f      	beq.n	800c30a <__hexnan+0x12e>
 800c26a:	454c      	cmp	r4, r9
 800c26c:	d206      	bcs.n	800c27c <__hexnan+0xa0>
 800c26e:	2d07      	cmp	r5, #7
 800c270:	dc04      	bgt.n	800c27c <__hexnan+0xa0>
 800c272:	462a      	mov	r2, r5
 800c274:	4649      	mov	r1, r9
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff ff8a 	bl	800c190 <L_shift>
 800c27c:	4544      	cmp	r4, r8
 800c27e:	d934      	bls.n	800c2ea <__hexnan+0x10e>
 800c280:	f1a8 0204 	sub.w	r2, r8, #4
 800c284:	4623      	mov	r3, r4
 800c286:	f853 1b04 	ldr.w	r1, [r3], #4
 800c28a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c28e:	429f      	cmp	r7, r3
 800c290:	d2f9      	bcs.n	800c286 <__hexnan+0xaa>
 800c292:	1b3b      	subs	r3, r7, r4
 800c294:	f023 0303 	bic.w	r3, r3, #3
 800c298:	3304      	adds	r3, #4
 800c29a:	3e03      	subs	r6, #3
 800c29c:	3401      	adds	r4, #1
 800c29e:	42a6      	cmp	r6, r4
 800c2a0:	bf38      	it	cc
 800c2a2:	2304      	movcc	r3, #4
 800c2a4:	4443      	add	r3, r8
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f843 2b04 	str.w	r2, [r3], #4
 800c2ac:	429f      	cmp	r7, r3
 800c2ae:	d2fb      	bcs.n	800c2a8 <__hexnan+0xcc>
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	b91b      	cbnz	r3, 800c2bc <__hexnan+0xe0>
 800c2b4:	4547      	cmp	r7, r8
 800c2b6:	d126      	bne.n	800c306 <__hexnan+0x12a>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	603b      	str	r3, [r7, #0]
 800c2bc:	2005      	movs	r0, #5
 800c2be:	e025      	b.n	800c30c <__hexnan+0x130>
 800c2c0:	3501      	adds	r5, #1
 800c2c2:	2d08      	cmp	r5, #8
 800c2c4:	f10b 0b01 	add.w	fp, fp, #1
 800c2c8:	dd06      	ble.n	800c2d8 <__hexnan+0xfc>
 800c2ca:	4544      	cmp	r4, r8
 800c2cc:	d9c3      	bls.n	800c256 <__hexnan+0x7a>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2d4:	2501      	movs	r5, #1
 800c2d6:	3c04      	subs	r4, #4
 800c2d8:	6822      	ldr	r2, [r4, #0]
 800c2da:	f000 000f 	and.w	r0, r0, #15
 800c2de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c2e2:	6020      	str	r0, [r4, #0]
 800c2e4:	e7b7      	b.n	800c256 <__hexnan+0x7a>
 800c2e6:	2508      	movs	r5, #8
 800c2e8:	e7b5      	b.n	800c256 <__hexnan+0x7a>
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0df      	beq.n	800c2b0 <__hexnan+0xd4>
 800c2f0:	f1c3 0320 	rsb	r3, r3, #32
 800c2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f8:	40da      	lsrs	r2, r3
 800c2fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c2fe:	4013      	ands	r3, r2
 800c300:	f846 3c04 	str.w	r3, [r6, #-4]
 800c304:	e7d4      	b.n	800c2b0 <__hexnan+0xd4>
 800c306:	3f04      	subs	r7, #4
 800c308:	e7d2      	b.n	800c2b0 <__hexnan+0xd4>
 800c30a:	2004      	movs	r0, #4
 800c30c:	b007      	add	sp, #28
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c314 <malloc>:
 800c314:	4b02      	ldr	r3, [pc, #8]	; (800c320 <malloc+0xc>)
 800c316:	4601      	mov	r1, r0
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f000 b823 	b.w	800c364 <_malloc_r>
 800c31e:	bf00      	nop
 800c320:	200001d0 	.word	0x200001d0

0800c324 <sbrk_aligned>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	4e0e      	ldr	r6, [pc, #56]	; (800c360 <sbrk_aligned+0x3c>)
 800c328:	460c      	mov	r4, r1
 800c32a:	6831      	ldr	r1, [r6, #0]
 800c32c:	4605      	mov	r5, r0
 800c32e:	b911      	cbnz	r1, 800c336 <sbrk_aligned+0x12>
 800c330:	f000 ff90 	bl	800d254 <_sbrk_r>
 800c334:	6030      	str	r0, [r6, #0]
 800c336:	4621      	mov	r1, r4
 800c338:	4628      	mov	r0, r5
 800c33a:	f000 ff8b 	bl	800d254 <_sbrk_r>
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	d00a      	beq.n	800c358 <sbrk_aligned+0x34>
 800c342:	1cc4      	adds	r4, r0, #3
 800c344:	f024 0403 	bic.w	r4, r4, #3
 800c348:	42a0      	cmp	r0, r4
 800c34a:	d007      	beq.n	800c35c <sbrk_aligned+0x38>
 800c34c:	1a21      	subs	r1, r4, r0
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 ff80 	bl	800d254 <_sbrk_r>
 800c354:	3001      	adds	r0, #1
 800c356:	d101      	bne.n	800c35c <sbrk_aligned+0x38>
 800c358:	f04f 34ff 	mov.w	r4, #4294967295
 800c35c:	4620      	mov	r0, r4
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	2000081c 	.word	0x2000081c

0800c364 <_malloc_r>:
 800c364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c368:	1ccd      	adds	r5, r1, #3
 800c36a:	f025 0503 	bic.w	r5, r5, #3
 800c36e:	3508      	adds	r5, #8
 800c370:	2d0c      	cmp	r5, #12
 800c372:	bf38      	it	cc
 800c374:	250c      	movcc	r5, #12
 800c376:	2d00      	cmp	r5, #0
 800c378:	4607      	mov	r7, r0
 800c37a:	db01      	blt.n	800c380 <_malloc_r+0x1c>
 800c37c:	42a9      	cmp	r1, r5
 800c37e:	d905      	bls.n	800c38c <_malloc_r+0x28>
 800c380:	230c      	movs	r3, #12
 800c382:	603b      	str	r3, [r7, #0]
 800c384:	2600      	movs	r6, #0
 800c386:	4630      	mov	r0, r6
 800c388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c460 <_malloc_r+0xfc>
 800c390:	f000 f87a 	bl	800c488 <__malloc_lock>
 800c394:	f8d8 3000 	ldr.w	r3, [r8]
 800c398:	461c      	mov	r4, r3
 800c39a:	bb5c      	cbnz	r4, 800c3f4 <_malloc_r+0x90>
 800c39c:	4629      	mov	r1, r5
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7ff ffc0 	bl	800c324 <sbrk_aligned>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	d155      	bne.n	800c456 <_malloc_r+0xf2>
 800c3aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c3ae:	4626      	mov	r6, r4
 800c3b0:	2e00      	cmp	r6, #0
 800c3b2:	d145      	bne.n	800c440 <_malloc_r+0xdc>
 800c3b4:	2c00      	cmp	r4, #0
 800c3b6:	d048      	beq.n	800c44a <_malloc_r+0xe6>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4638      	mov	r0, r7
 800c3be:	eb04 0903 	add.w	r9, r4, r3
 800c3c2:	f000 ff47 	bl	800d254 <_sbrk_r>
 800c3c6:	4581      	cmp	r9, r0
 800c3c8:	d13f      	bne.n	800c44a <_malloc_r+0xe6>
 800c3ca:	6821      	ldr	r1, [r4, #0]
 800c3cc:	1a6d      	subs	r5, r5, r1
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ffa7 	bl	800c324 <sbrk_aligned>
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d037      	beq.n	800c44a <_malloc_r+0xe6>
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	442b      	add	r3, r5
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d038      	beq.n	800c45a <_malloc_r+0xf6>
 800c3e8:	685a      	ldr	r2, [r3, #4]
 800c3ea:	42a2      	cmp	r2, r4
 800c3ec:	d12b      	bne.n	800c446 <_malloc_r+0xe2>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	605a      	str	r2, [r3, #4]
 800c3f2:	e00f      	b.n	800c414 <_malloc_r+0xb0>
 800c3f4:	6822      	ldr	r2, [r4, #0]
 800c3f6:	1b52      	subs	r2, r2, r5
 800c3f8:	d41f      	bmi.n	800c43a <_malloc_r+0xd6>
 800c3fa:	2a0b      	cmp	r2, #11
 800c3fc:	d917      	bls.n	800c42e <_malloc_r+0xca>
 800c3fe:	1961      	adds	r1, r4, r5
 800c400:	42a3      	cmp	r3, r4
 800c402:	6025      	str	r5, [r4, #0]
 800c404:	bf18      	it	ne
 800c406:	6059      	strne	r1, [r3, #4]
 800c408:	6863      	ldr	r3, [r4, #4]
 800c40a:	bf08      	it	eq
 800c40c:	f8c8 1000 	streq.w	r1, [r8]
 800c410:	5162      	str	r2, [r4, r5]
 800c412:	604b      	str	r3, [r1, #4]
 800c414:	4638      	mov	r0, r7
 800c416:	f104 060b 	add.w	r6, r4, #11
 800c41a:	f000 f83b 	bl	800c494 <__malloc_unlock>
 800c41e:	f026 0607 	bic.w	r6, r6, #7
 800c422:	1d23      	adds	r3, r4, #4
 800c424:	1af2      	subs	r2, r6, r3
 800c426:	d0ae      	beq.n	800c386 <_malloc_r+0x22>
 800c428:	1b9b      	subs	r3, r3, r6
 800c42a:	50a3      	str	r3, [r4, r2]
 800c42c:	e7ab      	b.n	800c386 <_malloc_r+0x22>
 800c42e:	42a3      	cmp	r3, r4
 800c430:	6862      	ldr	r2, [r4, #4]
 800c432:	d1dd      	bne.n	800c3f0 <_malloc_r+0x8c>
 800c434:	f8c8 2000 	str.w	r2, [r8]
 800c438:	e7ec      	b.n	800c414 <_malloc_r+0xb0>
 800c43a:	4623      	mov	r3, r4
 800c43c:	6864      	ldr	r4, [r4, #4]
 800c43e:	e7ac      	b.n	800c39a <_malloc_r+0x36>
 800c440:	4634      	mov	r4, r6
 800c442:	6876      	ldr	r6, [r6, #4]
 800c444:	e7b4      	b.n	800c3b0 <_malloc_r+0x4c>
 800c446:	4613      	mov	r3, r2
 800c448:	e7cc      	b.n	800c3e4 <_malloc_r+0x80>
 800c44a:	230c      	movs	r3, #12
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	4638      	mov	r0, r7
 800c450:	f000 f820 	bl	800c494 <__malloc_unlock>
 800c454:	e797      	b.n	800c386 <_malloc_r+0x22>
 800c456:	6025      	str	r5, [r4, #0]
 800c458:	e7dc      	b.n	800c414 <_malloc_r+0xb0>
 800c45a:	605b      	str	r3, [r3, #4]
 800c45c:	deff      	udf	#255	; 0xff
 800c45e:	bf00      	nop
 800c460:	20000818 	.word	0x20000818

0800c464 <__ascii_mbtowc>:
 800c464:	b082      	sub	sp, #8
 800c466:	b901      	cbnz	r1, 800c46a <__ascii_mbtowc+0x6>
 800c468:	a901      	add	r1, sp, #4
 800c46a:	b142      	cbz	r2, 800c47e <__ascii_mbtowc+0x1a>
 800c46c:	b14b      	cbz	r3, 800c482 <__ascii_mbtowc+0x1e>
 800c46e:	7813      	ldrb	r3, [r2, #0]
 800c470:	600b      	str	r3, [r1, #0]
 800c472:	7812      	ldrb	r2, [r2, #0]
 800c474:	1e10      	subs	r0, r2, #0
 800c476:	bf18      	it	ne
 800c478:	2001      	movne	r0, #1
 800c47a:	b002      	add	sp, #8
 800c47c:	4770      	bx	lr
 800c47e:	4610      	mov	r0, r2
 800c480:	e7fb      	b.n	800c47a <__ascii_mbtowc+0x16>
 800c482:	f06f 0001 	mvn.w	r0, #1
 800c486:	e7f8      	b.n	800c47a <__ascii_mbtowc+0x16>

0800c488 <__malloc_lock>:
 800c488:	4801      	ldr	r0, [pc, #4]	; (800c490 <__malloc_lock+0x8>)
 800c48a:	f7fe bd0b 	b.w	800aea4 <__retarget_lock_acquire_recursive>
 800c48e:	bf00      	nop
 800c490:	20000814 	.word	0x20000814

0800c494 <__malloc_unlock>:
 800c494:	4801      	ldr	r0, [pc, #4]	; (800c49c <__malloc_unlock+0x8>)
 800c496:	f7fe bd06 	b.w	800aea6 <__retarget_lock_release_recursive>
 800c49a:	bf00      	nop
 800c49c:	20000814 	.word	0x20000814

0800c4a0 <_Balloc>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	69c6      	ldr	r6, [r0, #28]
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	b976      	cbnz	r6, 800c4c8 <_Balloc+0x28>
 800c4aa:	2010      	movs	r0, #16
 800c4ac:	f7ff ff32 	bl	800c314 <malloc>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	61e0      	str	r0, [r4, #28]
 800c4b4:	b920      	cbnz	r0, 800c4c0 <_Balloc+0x20>
 800c4b6:	4b18      	ldr	r3, [pc, #96]	; (800c518 <_Balloc+0x78>)
 800c4b8:	4818      	ldr	r0, [pc, #96]	; (800c51c <_Balloc+0x7c>)
 800c4ba:	216b      	movs	r1, #107	; 0x6b
 800c4bc:	f000 feda 	bl	800d274 <__assert_func>
 800c4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c4:	6006      	str	r6, [r0, #0]
 800c4c6:	60c6      	str	r6, [r0, #12]
 800c4c8:	69e6      	ldr	r6, [r4, #28]
 800c4ca:	68f3      	ldr	r3, [r6, #12]
 800c4cc:	b183      	cbz	r3, 800c4f0 <_Balloc+0x50>
 800c4ce:	69e3      	ldr	r3, [r4, #28]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4d6:	b9b8      	cbnz	r0, 800c508 <_Balloc+0x68>
 800c4d8:	2101      	movs	r1, #1
 800c4da:	fa01 f605 	lsl.w	r6, r1, r5
 800c4de:	1d72      	adds	r2, r6, #5
 800c4e0:	0092      	lsls	r2, r2, #2
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fee4 	bl	800d2b0 <_calloc_r>
 800c4e8:	b160      	cbz	r0, 800c504 <_Balloc+0x64>
 800c4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4ee:	e00e      	b.n	800c50e <_Balloc+0x6e>
 800c4f0:	2221      	movs	r2, #33	; 0x21
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fedb 	bl	800d2b0 <_calloc_r>
 800c4fa:	69e3      	ldr	r3, [r4, #28]
 800c4fc:	60f0      	str	r0, [r6, #12]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e4      	bne.n	800c4ce <_Balloc+0x2e>
 800c504:	2000      	movs	r0, #0
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	6802      	ldr	r2, [r0, #0]
 800c50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c50e:	2300      	movs	r3, #0
 800c510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c514:	e7f7      	b.n	800c506 <_Balloc+0x66>
 800c516:	bf00      	nop
 800c518:	0800da01 	.word	0x0800da01
 800c51c:	0800dae1 	.word	0x0800dae1

0800c520 <_Bfree>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	69c6      	ldr	r6, [r0, #28]
 800c524:	4605      	mov	r5, r0
 800c526:	460c      	mov	r4, r1
 800c528:	b976      	cbnz	r6, 800c548 <_Bfree+0x28>
 800c52a:	2010      	movs	r0, #16
 800c52c:	f7ff fef2 	bl	800c314 <malloc>
 800c530:	4602      	mov	r2, r0
 800c532:	61e8      	str	r0, [r5, #28]
 800c534:	b920      	cbnz	r0, 800c540 <_Bfree+0x20>
 800c536:	4b09      	ldr	r3, [pc, #36]	; (800c55c <_Bfree+0x3c>)
 800c538:	4809      	ldr	r0, [pc, #36]	; (800c560 <_Bfree+0x40>)
 800c53a:	218f      	movs	r1, #143	; 0x8f
 800c53c:	f000 fe9a 	bl	800d274 <__assert_func>
 800c540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c544:	6006      	str	r6, [r0, #0]
 800c546:	60c6      	str	r6, [r0, #12]
 800c548:	b13c      	cbz	r4, 800c55a <_Bfree+0x3a>
 800c54a:	69eb      	ldr	r3, [r5, #28]
 800c54c:	6862      	ldr	r2, [r4, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c554:	6021      	str	r1, [r4, #0]
 800c556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	0800da01 	.word	0x0800da01
 800c560:	0800dae1 	.word	0x0800dae1

0800c564 <__multadd>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	690d      	ldr	r5, [r1, #16]
 800c56a:	4607      	mov	r7, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	461e      	mov	r6, r3
 800c570:	f101 0c14 	add.w	ip, r1, #20
 800c574:	2000      	movs	r0, #0
 800c576:	f8dc 3000 	ldr.w	r3, [ip]
 800c57a:	b299      	uxth	r1, r3
 800c57c:	fb02 6101 	mla	r1, r2, r1, r6
 800c580:	0c1e      	lsrs	r6, r3, #16
 800c582:	0c0b      	lsrs	r3, r1, #16
 800c584:	fb02 3306 	mla	r3, r2, r6, r3
 800c588:	b289      	uxth	r1, r1
 800c58a:	3001      	adds	r0, #1
 800c58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c590:	4285      	cmp	r5, r0
 800c592:	f84c 1b04 	str.w	r1, [ip], #4
 800c596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c59a:	dcec      	bgt.n	800c576 <__multadd+0x12>
 800c59c:	b30e      	cbz	r6, 800c5e2 <__multadd+0x7e>
 800c59e:	68a3      	ldr	r3, [r4, #8]
 800c5a0:	42ab      	cmp	r3, r5
 800c5a2:	dc19      	bgt.n	800c5d8 <__multadd+0x74>
 800c5a4:	6861      	ldr	r1, [r4, #4]
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	3101      	adds	r1, #1
 800c5aa:	f7ff ff79 	bl	800c4a0 <_Balloc>
 800c5ae:	4680      	mov	r8, r0
 800c5b0:	b928      	cbnz	r0, 800c5be <__multadd+0x5a>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <__multadd+0x84>)
 800c5b6:	480d      	ldr	r0, [pc, #52]	; (800c5ec <__multadd+0x88>)
 800c5b8:	21ba      	movs	r1, #186	; 0xba
 800c5ba:	f000 fe5b 	bl	800d274 <__assert_func>
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	3202      	adds	r2, #2
 800c5c2:	f104 010c 	add.w	r1, r4, #12
 800c5c6:	0092      	lsls	r2, r2, #2
 800c5c8:	300c      	adds	r0, #12
 800c5ca:	f7fe fc6d 	bl	800aea8 <memcpy>
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff ffa5 	bl	800c520 <_Bfree>
 800c5d6:	4644      	mov	r4, r8
 800c5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5dc:	3501      	adds	r5, #1
 800c5de:	615e      	str	r6, [r3, #20]
 800c5e0:	6125      	str	r5, [r4, #16]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	0800da70 	.word	0x0800da70
 800c5ec:	0800dae1 	.word	0x0800dae1

0800c5f0 <__s2b>:
 800c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	4615      	mov	r5, r2
 800c5f8:	461f      	mov	r7, r3
 800c5fa:	2209      	movs	r2, #9
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	4606      	mov	r6, r0
 800c600:	fb93 f3f2 	sdiv	r3, r3, r2
 800c604:	2100      	movs	r1, #0
 800c606:	2201      	movs	r2, #1
 800c608:	429a      	cmp	r2, r3
 800c60a:	db09      	blt.n	800c620 <__s2b+0x30>
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff ff47 	bl	800c4a0 <_Balloc>
 800c612:	b940      	cbnz	r0, 800c626 <__s2b+0x36>
 800c614:	4602      	mov	r2, r0
 800c616:	4b19      	ldr	r3, [pc, #100]	; (800c67c <__s2b+0x8c>)
 800c618:	4819      	ldr	r0, [pc, #100]	; (800c680 <__s2b+0x90>)
 800c61a:	21d3      	movs	r1, #211	; 0xd3
 800c61c:	f000 fe2a 	bl	800d274 <__assert_func>
 800c620:	0052      	lsls	r2, r2, #1
 800c622:	3101      	adds	r1, #1
 800c624:	e7f0      	b.n	800c608 <__s2b+0x18>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	6143      	str	r3, [r0, #20]
 800c62a:	2d09      	cmp	r5, #9
 800c62c:	f04f 0301 	mov.w	r3, #1
 800c630:	6103      	str	r3, [r0, #16]
 800c632:	dd16      	ble.n	800c662 <__s2b+0x72>
 800c634:	f104 0909 	add.w	r9, r4, #9
 800c638:	46c8      	mov	r8, r9
 800c63a:	442c      	add	r4, r5
 800c63c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c640:	4601      	mov	r1, r0
 800c642:	3b30      	subs	r3, #48	; 0x30
 800c644:	220a      	movs	r2, #10
 800c646:	4630      	mov	r0, r6
 800c648:	f7ff ff8c 	bl	800c564 <__multadd>
 800c64c:	45a0      	cmp	r8, r4
 800c64e:	d1f5      	bne.n	800c63c <__s2b+0x4c>
 800c650:	f1a5 0408 	sub.w	r4, r5, #8
 800c654:	444c      	add	r4, r9
 800c656:	1b2d      	subs	r5, r5, r4
 800c658:	1963      	adds	r3, r4, r5
 800c65a:	42bb      	cmp	r3, r7
 800c65c:	db04      	blt.n	800c668 <__s2b+0x78>
 800c65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c662:	340a      	adds	r4, #10
 800c664:	2509      	movs	r5, #9
 800c666:	e7f6      	b.n	800c656 <__s2b+0x66>
 800c668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c66c:	4601      	mov	r1, r0
 800c66e:	3b30      	subs	r3, #48	; 0x30
 800c670:	220a      	movs	r2, #10
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff ff76 	bl	800c564 <__multadd>
 800c678:	e7ee      	b.n	800c658 <__s2b+0x68>
 800c67a:	bf00      	nop
 800c67c:	0800da70 	.word	0x0800da70
 800c680:	0800dae1 	.word	0x0800dae1

0800c684 <__hi0bits>:
 800c684:	0c03      	lsrs	r3, r0, #16
 800c686:	041b      	lsls	r3, r3, #16
 800c688:	b9d3      	cbnz	r3, 800c6c0 <__hi0bits+0x3c>
 800c68a:	0400      	lsls	r0, r0, #16
 800c68c:	2310      	movs	r3, #16
 800c68e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c692:	bf04      	itt	eq
 800c694:	0200      	lsleq	r0, r0, #8
 800c696:	3308      	addeq	r3, #8
 800c698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c69c:	bf04      	itt	eq
 800c69e:	0100      	lsleq	r0, r0, #4
 800c6a0:	3304      	addeq	r3, #4
 800c6a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6a6:	bf04      	itt	eq
 800c6a8:	0080      	lsleq	r0, r0, #2
 800c6aa:	3302      	addeq	r3, #2
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	db05      	blt.n	800c6bc <__hi0bits+0x38>
 800c6b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6b4:	f103 0301 	add.w	r3, r3, #1
 800c6b8:	bf08      	it	eq
 800c6ba:	2320      	moveq	r3, #32
 800c6bc:	4618      	mov	r0, r3
 800c6be:	4770      	bx	lr
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e7e4      	b.n	800c68e <__hi0bits+0xa>

0800c6c4 <__lo0bits>:
 800c6c4:	6803      	ldr	r3, [r0, #0]
 800c6c6:	f013 0207 	ands.w	r2, r3, #7
 800c6ca:	d00c      	beq.n	800c6e6 <__lo0bits+0x22>
 800c6cc:	07d9      	lsls	r1, r3, #31
 800c6ce:	d422      	bmi.n	800c716 <__lo0bits+0x52>
 800c6d0:	079a      	lsls	r2, r3, #30
 800c6d2:	bf49      	itett	mi
 800c6d4:	085b      	lsrmi	r3, r3, #1
 800c6d6:	089b      	lsrpl	r3, r3, #2
 800c6d8:	6003      	strmi	r3, [r0, #0]
 800c6da:	2201      	movmi	r2, #1
 800c6dc:	bf5c      	itt	pl
 800c6de:	6003      	strpl	r3, [r0, #0]
 800c6e0:	2202      	movpl	r2, #2
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	4770      	bx	lr
 800c6e6:	b299      	uxth	r1, r3
 800c6e8:	b909      	cbnz	r1, 800c6ee <__lo0bits+0x2a>
 800c6ea:	0c1b      	lsrs	r3, r3, #16
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	b2d9      	uxtb	r1, r3
 800c6f0:	b909      	cbnz	r1, 800c6f6 <__lo0bits+0x32>
 800c6f2:	3208      	adds	r2, #8
 800c6f4:	0a1b      	lsrs	r3, r3, #8
 800c6f6:	0719      	lsls	r1, r3, #28
 800c6f8:	bf04      	itt	eq
 800c6fa:	091b      	lsreq	r3, r3, #4
 800c6fc:	3204      	addeq	r2, #4
 800c6fe:	0799      	lsls	r1, r3, #30
 800c700:	bf04      	itt	eq
 800c702:	089b      	lsreq	r3, r3, #2
 800c704:	3202      	addeq	r2, #2
 800c706:	07d9      	lsls	r1, r3, #31
 800c708:	d403      	bmi.n	800c712 <__lo0bits+0x4e>
 800c70a:	085b      	lsrs	r3, r3, #1
 800c70c:	f102 0201 	add.w	r2, r2, #1
 800c710:	d003      	beq.n	800c71a <__lo0bits+0x56>
 800c712:	6003      	str	r3, [r0, #0]
 800c714:	e7e5      	b.n	800c6e2 <__lo0bits+0x1e>
 800c716:	2200      	movs	r2, #0
 800c718:	e7e3      	b.n	800c6e2 <__lo0bits+0x1e>
 800c71a:	2220      	movs	r2, #32
 800c71c:	e7e1      	b.n	800c6e2 <__lo0bits+0x1e>
	...

0800c720 <__i2b>:
 800c720:	b510      	push	{r4, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	2101      	movs	r1, #1
 800c726:	f7ff febb 	bl	800c4a0 <_Balloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	b928      	cbnz	r0, 800c73a <__i2b+0x1a>
 800c72e:	4b05      	ldr	r3, [pc, #20]	; (800c744 <__i2b+0x24>)
 800c730:	4805      	ldr	r0, [pc, #20]	; (800c748 <__i2b+0x28>)
 800c732:	f240 1145 	movw	r1, #325	; 0x145
 800c736:	f000 fd9d 	bl	800d274 <__assert_func>
 800c73a:	2301      	movs	r3, #1
 800c73c:	6144      	str	r4, [r0, #20]
 800c73e:	6103      	str	r3, [r0, #16]
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	0800da70 	.word	0x0800da70
 800c748:	0800dae1 	.word	0x0800dae1

0800c74c <__multiply>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4691      	mov	r9, r2
 800c752:	690a      	ldr	r2, [r1, #16]
 800c754:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c758:	429a      	cmp	r2, r3
 800c75a:	bfb8      	it	lt
 800c75c:	460b      	movlt	r3, r1
 800c75e:	460c      	mov	r4, r1
 800c760:	bfbc      	itt	lt
 800c762:	464c      	movlt	r4, r9
 800c764:	4699      	movlt	r9, r3
 800c766:	6927      	ldr	r7, [r4, #16]
 800c768:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	6861      	ldr	r1, [r4, #4]
 800c770:	eb07 060a 	add.w	r6, r7, sl
 800c774:	42b3      	cmp	r3, r6
 800c776:	b085      	sub	sp, #20
 800c778:	bfb8      	it	lt
 800c77a:	3101      	addlt	r1, #1
 800c77c:	f7ff fe90 	bl	800c4a0 <_Balloc>
 800c780:	b930      	cbnz	r0, 800c790 <__multiply+0x44>
 800c782:	4602      	mov	r2, r0
 800c784:	4b44      	ldr	r3, [pc, #272]	; (800c898 <__multiply+0x14c>)
 800c786:	4845      	ldr	r0, [pc, #276]	; (800c89c <__multiply+0x150>)
 800c788:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c78c:	f000 fd72 	bl	800d274 <__assert_func>
 800c790:	f100 0514 	add.w	r5, r0, #20
 800c794:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c798:	462b      	mov	r3, r5
 800c79a:	2200      	movs	r2, #0
 800c79c:	4543      	cmp	r3, r8
 800c79e:	d321      	bcc.n	800c7e4 <__multiply+0x98>
 800c7a0:	f104 0314 	add.w	r3, r4, #20
 800c7a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7a8:	f109 0314 	add.w	r3, r9, #20
 800c7ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7b0:	9202      	str	r2, [sp, #8]
 800c7b2:	1b3a      	subs	r2, r7, r4
 800c7b4:	3a15      	subs	r2, #21
 800c7b6:	f022 0203 	bic.w	r2, r2, #3
 800c7ba:	3204      	adds	r2, #4
 800c7bc:	f104 0115 	add.w	r1, r4, #21
 800c7c0:	428f      	cmp	r7, r1
 800c7c2:	bf38      	it	cc
 800c7c4:	2204      	movcc	r2, #4
 800c7c6:	9201      	str	r2, [sp, #4]
 800c7c8:	9a02      	ldr	r2, [sp, #8]
 800c7ca:	9303      	str	r3, [sp, #12]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d80c      	bhi.n	800c7ea <__multiply+0x9e>
 800c7d0:	2e00      	cmp	r6, #0
 800c7d2:	dd03      	ble.n	800c7dc <__multiply+0x90>
 800c7d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d05b      	beq.n	800c894 <__multiply+0x148>
 800c7dc:	6106      	str	r6, [r0, #16]
 800c7de:	b005      	add	sp, #20
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	f843 2b04 	str.w	r2, [r3], #4
 800c7e8:	e7d8      	b.n	800c79c <__multiply+0x50>
 800c7ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7ee:	f1ba 0f00 	cmp.w	sl, #0
 800c7f2:	d024      	beq.n	800c83e <__multiply+0xf2>
 800c7f4:	f104 0e14 	add.w	lr, r4, #20
 800c7f8:	46a9      	mov	r9, r5
 800c7fa:	f04f 0c00 	mov.w	ip, #0
 800c7fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c802:	f8d9 1000 	ldr.w	r1, [r9]
 800c806:	fa1f fb82 	uxth.w	fp, r2
 800c80a:	b289      	uxth	r1, r1
 800c80c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c810:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c814:	f8d9 2000 	ldr.w	r2, [r9]
 800c818:	4461      	add	r1, ip
 800c81a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c81e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c822:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c826:	b289      	uxth	r1, r1
 800c828:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c82c:	4577      	cmp	r7, lr
 800c82e:	f849 1b04 	str.w	r1, [r9], #4
 800c832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c836:	d8e2      	bhi.n	800c7fe <__multiply+0xb2>
 800c838:	9a01      	ldr	r2, [sp, #4]
 800c83a:	f845 c002 	str.w	ip, [r5, r2]
 800c83e:	9a03      	ldr	r2, [sp, #12]
 800c840:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c844:	3304      	adds	r3, #4
 800c846:	f1b9 0f00 	cmp.w	r9, #0
 800c84a:	d021      	beq.n	800c890 <__multiply+0x144>
 800c84c:	6829      	ldr	r1, [r5, #0]
 800c84e:	f104 0c14 	add.w	ip, r4, #20
 800c852:	46ae      	mov	lr, r5
 800c854:	f04f 0a00 	mov.w	sl, #0
 800c858:	f8bc b000 	ldrh.w	fp, [ip]
 800c85c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c860:	fb09 220b 	mla	r2, r9, fp, r2
 800c864:	4452      	add	r2, sl
 800c866:	b289      	uxth	r1, r1
 800c868:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c86c:	f84e 1b04 	str.w	r1, [lr], #4
 800c870:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c874:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c878:	f8be 1000 	ldrh.w	r1, [lr]
 800c87c:	fb09 110a 	mla	r1, r9, sl, r1
 800c880:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c884:	4567      	cmp	r7, ip
 800c886:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c88a:	d8e5      	bhi.n	800c858 <__multiply+0x10c>
 800c88c:	9a01      	ldr	r2, [sp, #4]
 800c88e:	50a9      	str	r1, [r5, r2]
 800c890:	3504      	adds	r5, #4
 800c892:	e799      	b.n	800c7c8 <__multiply+0x7c>
 800c894:	3e01      	subs	r6, #1
 800c896:	e79b      	b.n	800c7d0 <__multiply+0x84>
 800c898:	0800da70 	.word	0x0800da70
 800c89c:	0800dae1 	.word	0x0800dae1

0800c8a0 <__pow5mult>:
 800c8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a4:	4615      	mov	r5, r2
 800c8a6:	f012 0203 	ands.w	r2, r2, #3
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460f      	mov	r7, r1
 800c8ae:	d007      	beq.n	800c8c0 <__pow5mult+0x20>
 800c8b0:	4c25      	ldr	r4, [pc, #148]	; (800c948 <__pow5mult+0xa8>)
 800c8b2:	3a01      	subs	r2, #1
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ba:	f7ff fe53 	bl	800c564 <__multadd>
 800c8be:	4607      	mov	r7, r0
 800c8c0:	10ad      	asrs	r5, r5, #2
 800c8c2:	d03d      	beq.n	800c940 <__pow5mult+0xa0>
 800c8c4:	69f4      	ldr	r4, [r6, #28]
 800c8c6:	b97c      	cbnz	r4, 800c8e8 <__pow5mult+0x48>
 800c8c8:	2010      	movs	r0, #16
 800c8ca:	f7ff fd23 	bl	800c314 <malloc>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	61f0      	str	r0, [r6, #28]
 800c8d2:	b928      	cbnz	r0, 800c8e0 <__pow5mult+0x40>
 800c8d4:	4b1d      	ldr	r3, [pc, #116]	; (800c94c <__pow5mult+0xac>)
 800c8d6:	481e      	ldr	r0, [pc, #120]	; (800c950 <__pow5mult+0xb0>)
 800c8d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8dc:	f000 fcca 	bl	800d274 <__assert_func>
 800c8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8e4:	6004      	str	r4, [r0, #0]
 800c8e6:	60c4      	str	r4, [r0, #12]
 800c8e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8f0:	b94c      	cbnz	r4, 800c906 <__pow5mult+0x66>
 800c8f2:	f240 2171 	movw	r1, #625	; 0x271
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7ff ff12 	bl	800c720 <__i2b>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c902:	4604      	mov	r4, r0
 800c904:	6003      	str	r3, [r0, #0]
 800c906:	f04f 0900 	mov.w	r9, #0
 800c90a:	07eb      	lsls	r3, r5, #31
 800c90c:	d50a      	bpl.n	800c924 <__pow5mult+0x84>
 800c90e:	4639      	mov	r1, r7
 800c910:	4622      	mov	r2, r4
 800c912:	4630      	mov	r0, r6
 800c914:	f7ff ff1a 	bl	800c74c <__multiply>
 800c918:	4639      	mov	r1, r7
 800c91a:	4680      	mov	r8, r0
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7ff fdff 	bl	800c520 <_Bfree>
 800c922:	4647      	mov	r7, r8
 800c924:	106d      	asrs	r5, r5, #1
 800c926:	d00b      	beq.n	800c940 <__pow5mult+0xa0>
 800c928:	6820      	ldr	r0, [r4, #0]
 800c92a:	b938      	cbnz	r0, 800c93c <__pow5mult+0x9c>
 800c92c:	4622      	mov	r2, r4
 800c92e:	4621      	mov	r1, r4
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff ff0b 	bl	800c74c <__multiply>
 800c936:	6020      	str	r0, [r4, #0]
 800c938:	f8c0 9000 	str.w	r9, [r0]
 800c93c:	4604      	mov	r4, r0
 800c93e:	e7e4      	b.n	800c90a <__pow5mult+0x6a>
 800c940:	4638      	mov	r0, r7
 800c942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c946:	bf00      	nop
 800c948:	0800dc30 	.word	0x0800dc30
 800c94c:	0800da01 	.word	0x0800da01
 800c950:	0800dae1 	.word	0x0800dae1

0800c954 <__lshift>:
 800c954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	460c      	mov	r4, r1
 800c95a:	6849      	ldr	r1, [r1, #4]
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c962:	68a3      	ldr	r3, [r4, #8]
 800c964:	4607      	mov	r7, r0
 800c966:	4691      	mov	r9, r2
 800c968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c96c:	f108 0601 	add.w	r6, r8, #1
 800c970:	42b3      	cmp	r3, r6
 800c972:	db0b      	blt.n	800c98c <__lshift+0x38>
 800c974:	4638      	mov	r0, r7
 800c976:	f7ff fd93 	bl	800c4a0 <_Balloc>
 800c97a:	4605      	mov	r5, r0
 800c97c:	b948      	cbnz	r0, 800c992 <__lshift+0x3e>
 800c97e:	4602      	mov	r2, r0
 800c980:	4b28      	ldr	r3, [pc, #160]	; (800ca24 <__lshift+0xd0>)
 800c982:	4829      	ldr	r0, [pc, #164]	; (800ca28 <__lshift+0xd4>)
 800c984:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c988:	f000 fc74 	bl	800d274 <__assert_func>
 800c98c:	3101      	adds	r1, #1
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	e7ee      	b.n	800c970 <__lshift+0x1c>
 800c992:	2300      	movs	r3, #0
 800c994:	f100 0114 	add.w	r1, r0, #20
 800c998:	f100 0210 	add.w	r2, r0, #16
 800c99c:	4618      	mov	r0, r3
 800c99e:	4553      	cmp	r3, sl
 800c9a0:	db33      	blt.n	800ca0a <__lshift+0xb6>
 800c9a2:	6920      	ldr	r0, [r4, #16]
 800c9a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9a8:	f104 0314 	add.w	r3, r4, #20
 800c9ac:	f019 091f 	ands.w	r9, r9, #31
 800c9b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9b8:	d02b      	beq.n	800ca12 <__lshift+0xbe>
 800c9ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c9be:	468a      	mov	sl, r1
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	6818      	ldr	r0, [r3, #0]
 800c9c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c9c8:	4310      	orrs	r0, r2
 800c9ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d2:	459c      	cmp	ip, r3
 800c9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9d8:	d8f3      	bhi.n	800c9c2 <__lshift+0x6e>
 800c9da:	ebac 0304 	sub.w	r3, ip, r4
 800c9de:	3b15      	subs	r3, #21
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	f104 0015 	add.w	r0, r4, #21
 800c9ea:	4584      	cmp	ip, r0
 800c9ec:	bf38      	it	cc
 800c9ee:	2304      	movcc	r3, #4
 800c9f0:	50ca      	str	r2, [r1, r3]
 800c9f2:	b10a      	cbz	r2, 800c9f8 <__lshift+0xa4>
 800c9f4:	f108 0602 	add.w	r6, r8, #2
 800c9f8:	3e01      	subs	r6, #1
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	612e      	str	r6, [r5, #16]
 800c9fe:	4621      	mov	r1, r4
 800ca00:	f7ff fd8e 	bl	800c520 <_Bfree>
 800ca04:	4628      	mov	r0, r5
 800ca06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca0e:	3301      	adds	r3, #1
 800ca10:	e7c5      	b.n	800c99e <__lshift+0x4a>
 800ca12:	3904      	subs	r1, #4
 800ca14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca1c:	459c      	cmp	ip, r3
 800ca1e:	d8f9      	bhi.n	800ca14 <__lshift+0xc0>
 800ca20:	e7ea      	b.n	800c9f8 <__lshift+0xa4>
 800ca22:	bf00      	nop
 800ca24:	0800da70 	.word	0x0800da70
 800ca28:	0800dae1 	.word	0x0800dae1

0800ca2c <__mcmp>:
 800ca2c:	b530      	push	{r4, r5, lr}
 800ca2e:	6902      	ldr	r2, [r0, #16]
 800ca30:	690c      	ldr	r4, [r1, #16]
 800ca32:	1b12      	subs	r2, r2, r4
 800ca34:	d10e      	bne.n	800ca54 <__mcmp+0x28>
 800ca36:	f100 0314 	add.w	r3, r0, #20
 800ca3a:	3114      	adds	r1, #20
 800ca3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca4c:	42a5      	cmp	r5, r4
 800ca4e:	d003      	beq.n	800ca58 <__mcmp+0x2c>
 800ca50:	d305      	bcc.n	800ca5e <__mcmp+0x32>
 800ca52:	2201      	movs	r2, #1
 800ca54:	4610      	mov	r0, r2
 800ca56:	bd30      	pop	{r4, r5, pc}
 800ca58:	4283      	cmp	r3, r0
 800ca5a:	d3f3      	bcc.n	800ca44 <__mcmp+0x18>
 800ca5c:	e7fa      	b.n	800ca54 <__mcmp+0x28>
 800ca5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca62:	e7f7      	b.n	800ca54 <__mcmp+0x28>

0800ca64 <__mdiff>:
 800ca64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca68:	460c      	mov	r4, r1
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4690      	mov	r8, r2
 800ca72:	f7ff ffdb 	bl	800ca2c <__mcmp>
 800ca76:	1e05      	subs	r5, r0, #0
 800ca78:	d110      	bne.n	800ca9c <__mdiff+0x38>
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7ff fd0f 	bl	800c4a0 <_Balloc>
 800ca82:	b930      	cbnz	r0, 800ca92 <__mdiff+0x2e>
 800ca84:	4b3a      	ldr	r3, [pc, #232]	; (800cb70 <__mdiff+0x10c>)
 800ca86:	4602      	mov	r2, r0
 800ca88:	f240 2137 	movw	r1, #567	; 0x237
 800ca8c:	4839      	ldr	r0, [pc, #228]	; (800cb74 <__mdiff+0x110>)
 800ca8e:	f000 fbf1 	bl	800d274 <__assert_func>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9c:	bfa4      	itt	ge
 800ca9e:	4643      	movge	r3, r8
 800caa0:	46a0      	movge	r8, r4
 800caa2:	4630      	mov	r0, r6
 800caa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800caa8:	bfa6      	itte	ge
 800caaa:	461c      	movge	r4, r3
 800caac:	2500      	movge	r5, #0
 800caae:	2501      	movlt	r5, #1
 800cab0:	f7ff fcf6 	bl	800c4a0 <_Balloc>
 800cab4:	b920      	cbnz	r0, 800cac0 <__mdiff+0x5c>
 800cab6:	4b2e      	ldr	r3, [pc, #184]	; (800cb70 <__mdiff+0x10c>)
 800cab8:	4602      	mov	r2, r0
 800caba:	f240 2145 	movw	r1, #581	; 0x245
 800cabe:	e7e5      	b.n	800ca8c <__mdiff+0x28>
 800cac0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cac4:	6926      	ldr	r6, [r4, #16]
 800cac6:	60c5      	str	r5, [r0, #12]
 800cac8:	f104 0914 	add.w	r9, r4, #20
 800cacc:	f108 0514 	add.w	r5, r8, #20
 800cad0:	f100 0e14 	add.w	lr, r0, #20
 800cad4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cad8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cadc:	f108 0210 	add.w	r2, r8, #16
 800cae0:	46f2      	mov	sl, lr
 800cae2:	2100      	movs	r1, #0
 800cae4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cae8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800caec:	fa11 f88b 	uxtah	r8, r1, fp
 800caf0:	b299      	uxth	r1, r3
 800caf2:	0c1b      	lsrs	r3, r3, #16
 800caf4:	eba8 0801 	sub.w	r8, r8, r1
 800caf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cafc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb00:	fa1f f888 	uxth.w	r8, r8
 800cb04:	1419      	asrs	r1, r3, #16
 800cb06:	454e      	cmp	r6, r9
 800cb08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb0c:	f84a 3b04 	str.w	r3, [sl], #4
 800cb10:	d8e8      	bhi.n	800cae4 <__mdiff+0x80>
 800cb12:	1b33      	subs	r3, r6, r4
 800cb14:	3b15      	subs	r3, #21
 800cb16:	f023 0303 	bic.w	r3, r3, #3
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	3415      	adds	r4, #21
 800cb1e:	42a6      	cmp	r6, r4
 800cb20:	bf38      	it	cc
 800cb22:	2304      	movcc	r3, #4
 800cb24:	441d      	add	r5, r3
 800cb26:	4473      	add	r3, lr
 800cb28:	469e      	mov	lr, r3
 800cb2a:	462e      	mov	r6, r5
 800cb2c:	4566      	cmp	r6, ip
 800cb2e:	d30e      	bcc.n	800cb4e <__mdiff+0xea>
 800cb30:	f10c 0203 	add.w	r2, ip, #3
 800cb34:	1b52      	subs	r2, r2, r5
 800cb36:	f022 0203 	bic.w	r2, r2, #3
 800cb3a:	3d03      	subs	r5, #3
 800cb3c:	45ac      	cmp	ip, r5
 800cb3e:	bf38      	it	cc
 800cb40:	2200      	movcc	r2, #0
 800cb42:	4413      	add	r3, r2
 800cb44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb48:	b17a      	cbz	r2, 800cb6a <__mdiff+0x106>
 800cb4a:	6107      	str	r7, [r0, #16]
 800cb4c:	e7a4      	b.n	800ca98 <__mdiff+0x34>
 800cb4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb52:	fa11 f288 	uxtah	r2, r1, r8
 800cb56:	1414      	asrs	r4, r2, #16
 800cb58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb5c:	b292      	uxth	r2, r2
 800cb5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb62:	f84e 2b04 	str.w	r2, [lr], #4
 800cb66:	1421      	asrs	r1, r4, #16
 800cb68:	e7e0      	b.n	800cb2c <__mdiff+0xc8>
 800cb6a:	3f01      	subs	r7, #1
 800cb6c:	e7ea      	b.n	800cb44 <__mdiff+0xe0>
 800cb6e:	bf00      	nop
 800cb70:	0800da70 	.word	0x0800da70
 800cb74:	0800dae1 	.word	0x0800dae1

0800cb78 <__ulp>:
 800cb78:	b082      	sub	sp, #8
 800cb7a:	ed8d 0b00 	vstr	d0, [sp]
 800cb7e:	9a01      	ldr	r2, [sp, #4]
 800cb80:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <__ulp+0x48>)
 800cb82:	4013      	ands	r3, r2
 800cb84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dc08      	bgt.n	800cb9e <__ulp+0x26>
 800cb8c:	425b      	negs	r3, r3
 800cb8e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb96:	da04      	bge.n	800cba2 <__ulp+0x2a>
 800cb98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb9c:	4113      	asrs	r3, r2
 800cb9e:	2200      	movs	r2, #0
 800cba0:	e008      	b.n	800cbb4 <__ulp+0x3c>
 800cba2:	f1a2 0314 	sub.w	r3, r2, #20
 800cba6:	2b1e      	cmp	r3, #30
 800cba8:	bfda      	itte	le
 800cbaa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cbae:	40da      	lsrle	r2, r3
 800cbb0:	2201      	movgt	r2, #1
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	ec41 0b10 	vmov	d0, r0, r1
 800cbbc:	b002      	add	sp, #8
 800cbbe:	4770      	bx	lr
 800cbc0:	7ff00000 	.word	0x7ff00000

0800cbc4 <__b2d>:
 800cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	6906      	ldr	r6, [r0, #16]
 800cbca:	f100 0814 	add.w	r8, r0, #20
 800cbce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbd2:	1f37      	subs	r7, r6, #4
 800cbd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7ff fd53 	bl	800c684 <__hi0bits>
 800cbde:	f1c0 0320 	rsb	r3, r0, #32
 800cbe2:	280a      	cmp	r0, #10
 800cbe4:	600b      	str	r3, [r1, #0]
 800cbe6:	491b      	ldr	r1, [pc, #108]	; (800cc54 <__b2d+0x90>)
 800cbe8:	dc15      	bgt.n	800cc16 <__b2d+0x52>
 800cbea:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbee:	fa22 f30c 	lsr.w	r3, r2, ip
 800cbf2:	45b8      	cmp	r8, r7
 800cbf4:	ea43 0501 	orr.w	r5, r3, r1
 800cbf8:	bf34      	ite	cc
 800cbfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbfe:	2300      	movcs	r3, #0
 800cc00:	3015      	adds	r0, #21
 800cc02:	fa02 f000 	lsl.w	r0, r2, r0
 800cc06:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc0a:	4303      	orrs	r3, r0
 800cc0c:	461c      	mov	r4, r3
 800cc0e:	ec45 4b10 	vmov	d0, r4, r5
 800cc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc16:	45b8      	cmp	r8, r7
 800cc18:	bf3a      	itte	cc
 800cc1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc1e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc22:	2300      	movcs	r3, #0
 800cc24:	380b      	subs	r0, #11
 800cc26:	d012      	beq.n	800cc4e <__b2d+0x8a>
 800cc28:	f1c0 0120 	rsb	r1, r0, #32
 800cc2c:	fa23 f401 	lsr.w	r4, r3, r1
 800cc30:	4082      	lsls	r2, r0
 800cc32:	4322      	orrs	r2, r4
 800cc34:	4547      	cmp	r7, r8
 800cc36:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cc3a:	bf8c      	ite	hi
 800cc3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc40:	2200      	movls	r2, #0
 800cc42:	4083      	lsls	r3, r0
 800cc44:	40ca      	lsrs	r2, r1
 800cc46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	e7de      	b.n	800cc0c <__b2d+0x48>
 800cc4e:	ea42 0501 	orr.w	r5, r2, r1
 800cc52:	e7db      	b.n	800cc0c <__b2d+0x48>
 800cc54:	3ff00000 	.word	0x3ff00000

0800cc58 <__d2b>:
 800cc58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	2101      	movs	r1, #1
 800cc60:	ec59 8b10 	vmov	r8, r9, d0
 800cc64:	4616      	mov	r6, r2
 800cc66:	f7ff fc1b 	bl	800c4a0 <_Balloc>
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	b930      	cbnz	r0, 800cc7c <__d2b+0x24>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	4b24      	ldr	r3, [pc, #144]	; (800cd04 <__d2b+0xac>)
 800cc72:	4825      	ldr	r0, [pc, #148]	; (800cd08 <__d2b+0xb0>)
 800cc74:	f240 310f 	movw	r1, #783	; 0x30f
 800cc78:	f000 fafc 	bl	800d274 <__assert_func>
 800cc7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc84:	bb2d      	cbnz	r5, 800ccd2 <__d2b+0x7a>
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	f1b8 0300 	subs.w	r3, r8, #0
 800cc8c:	d026      	beq.n	800ccdc <__d2b+0x84>
 800cc8e:	4668      	mov	r0, sp
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	f7ff fd17 	bl	800c6c4 <__lo0bits>
 800cc96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc9a:	b1e8      	cbz	r0, 800ccd8 <__d2b+0x80>
 800cc9c:	f1c0 0320 	rsb	r3, r0, #32
 800cca0:	fa02 f303 	lsl.w	r3, r2, r3
 800cca4:	430b      	orrs	r3, r1
 800cca6:	40c2      	lsrs	r2, r0
 800cca8:	6163      	str	r3, [r4, #20]
 800ccaa:	9201      	str	r2, [sp, #4]
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	61a3      	str	r3, [r4, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	bf14      	ite	ne
 800ccb4:	2202      	movne	r2, #2
 800ccb6:	2201      	moveq	r2, #1
 800ccb8:	6122      	str	r2, [r4, #16]
 800ccba:	b1bd      	cbz	r5, 800ccec <__d2b+0x94>
 800ccbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccc0:	4405      	add	r5, r0
 800ccc2:	603d      	str	r5, [r7, #0]
 800ccc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccc8:	6030      	str	r0, [r6, #0]
 800ccca:	4620      	mov	r0, r4
 800cccc:	b003      	add	sp, #12
 800ccce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccd6:	e7d6      	b.n	800cc86 <__d2b+0x2e>
 800ccd8:	6161      	str	r1, [r4, #20]
 800ccda:	e7e7      	b.n	800ccac <__d2b+0x54>
 800ccdc:	a801      	add	r0, sp, #4
 800ccde:	f7ff fcf1 	bl	800c6c4 <__lo0bits>
 800cce2:	9b01      	ldr	r3, [sp, #4]
 800cce4:	6163      	str	r3, [r4, #20]
 800cce6:	3020      	adds	r0, #32
 800cce8:	2201      	movs	r2, #1
 800ccea:	e7e5      	b.n	800ccb8 <__d2b+0x60>
 800ccec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccf4:	6038      	str	r0, [r7, #0]
 800ccf6:	6918      	ldr	r0, [r3, #16]
 800ccf8:	f7ff fcc4 	bl	800c684 <__hi0bits>
 800ccfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd00:	e7e2      	b.n	800ccc8 <__d2b+0x70>
 800cd02:	bf00      	nop
 800cd04:	0800da70 	.word	0x0800da70
 800cd08:	0800dae1 	.word	0x0800dae1

0800cd0c <__ratio>:
 800cd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	4688      	mov	r8, r1
 800cd12:	4669      	mov	r1, sp
 800cd14:	4681      	mov	r9, r0
 800cd16:	f7ff ff55 	bl	800cbc4 <__b2d>
 800cd1a:	a901      	add	r1, sp, #4
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	ec55 4b10 	vmov	r4, r5, d0
 800cd22:	f7ff ff4f 	bl	800cbc4 <__b2d>
 800cd26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd2e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd36:	1a9b      	subs	r3, r3, r2
 800cd38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd3c:	ec51 0b10 	vmov	r0, r1, d0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	bfd6      	itet	le
 800cd44:	460a      	movle	r2, r1
 800cd46:	462a      	movgt	r2, r5
 800cd48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd4c:	468b      	mov	fp, r1
 800cd4e:	462f      	mov	r7, r5
 800cd50:	bfd4      	ite	le
 800cd52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	ee10 2a10 	vmov	r2, s0
 800cd60:	465b      	mov	r3, fp
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fd72 	bl	800084c <__aeabi_ddiv>
 800cd68:	ec41 0b10 	vmov	d0, r0, r1
 800cd6c:	b003      	add	sp, #12
 800cd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd72 <__copybits>:
 800cd72:	3901      	subs	r1, #1
 800cd74:	b570      	push	{r4, r5, r6, lr}
 800cd76:	1149      	asrs	r1, r1, #5
 800cd78:	6914      	ldr	r4, [r2, #16]
 800cd7a:	3101      	adds	r1, #1
 800cd7c:	f102 0314 	add.w	r3, r2, #20
 800cd80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd88:	1f05      	subs	r5, r0, #4
 800cd8a:	42a3      	cmp	r3, r4
 800cd8c:	d30c      	bcc.n	800cda8 <__copybits+0x36>
 800cd8e:	1aa3      	subs	r3, r4, r2
 800cd90:	3b11      	subs	r3, #17
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	3211      	adds	r2, #17
 800cd98:	42a2      	cmp	r2, r4
 800cd9a:	bf88      	it	hi
 800cd9c:	2300      	movhi	r3, #0
 800cd9e:	4418      	add	r0, r3
 800cda0:	2300      	movs	r3, #0
 800cda2:	4288      	cmp	r0, r1
 800cda4:	d305      	bcc.n	800cdb2 <__copybits+0x40>
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdac:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdb0:	e7eb      	b.n	800cd8a <__copybits+0x18>
 800cdb2:	f840 3b04 	str.w	r3, [r0], #4
 800cdb6:	e7f4      	b.n	800cda2 <__copybits+0x30>

0800cdb8 <__any_on>:
 800cdb8:	f100 0214 	add.w	r2, r0, #20
 800cdbc:	6900      	ldr	r0, [r0, #16]
 800cdbe:	114b      	asrs	r3, r1, #5
 800cdc0:	4298      	cmp	r0, r3
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	db11      	blt.n	800cdea <__any_on+0x32>
 800cdc6:	dd0a      	ble.n	800cdde <__any_on+0x26>
 800cdc8:	f011 011f 	ands.w	r1, r1, #31
 800cdcc:	d007      	beq.n	800cdde <__any_on+0x26>
 800cdce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdd2:	fa24 f001 	lsr.w	r0, r4, r1
 800cdd6:	fa00 f101 	lsl.w	r1, r0, r1
 800cdda:	428c      	cmp	r4, r1
 800cddc:	d10b      	bne.n	800cdf6 <__any_on+0x3e>
 800cdde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d803      	bhi.n	800cdee <__any_on+0x36>
 800cde6:	2000      	movs	r0, #0
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	4603      	mov	r3, r0
 800cdec:	e7f7      	b.n	800cdde <__any_on+0x26>
 800cdee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdf2:	2900      	cmp	r1, #0
 800cdf4:	d0f5      	beq.n	800cde2 <__any_on+0x2a>
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	e7f6      	b.n	800cde8 <__any_on+0x30>

0800cdfa <__ascii_wctomb>:
 800cdfa:	b149      	cbz	r1, 800ce10 <__ascii_wctomb+0x16>
 800cdfc:	2aff      	cmp	r2, #255	; 0xff
 800cdfe:	bf85      	ittet	hi
 800ce00:	238a      	movhi	r3, #138	; 0x8a
 800ce02:	6003      	strhi	r3, [r0, #0]
 800ce04:	700a      	strbls	r2, [r1, #0]
 800ce06:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce0a:	bf98      	it	ls
 800ce0c:	2001      	movls	r0, #1
 800ce0e:	4770      	bx	lr
 800ce10:	4608      	mov	r0, r1
 800ce12:	4770      	bx	lr

0800ce14 <__ssputs_r>:
 800ce14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	688e      	ldr	r6, [r1, #8]
 800ce1a:	461f      	mov	r7, r3
 800ce1c:	42be      	cmp	r6, r7
 800ce1e:	680b      	ldr	r3, [r1, #0]
 800ce20:	4682      	mov	sl, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	4690      	mov	r8, r2
 800ce26:	d82c      	bhi.n	800ce82 <__ssputs_r+0x6e>
 800ce28:	898a      	ldrh	r2, [r1, #12]
 800ce2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce2e:	d026      	beq.n	800ce7e <__ssputs_r+0x6a>
 800ce30:	6965      	ldr	r5, [r4, #20]
 800ce32:	6909      	ldr	r1, [r1, #16]
 800ce34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce38:	eba3 0901 	sub.w	r9, r3, r1
 800ce3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce40:	1c7b      	adds	r3, r7, #1
 800ce42:	444b      	add	r3, r9
 800ce44:	106d      	asrs	r5, r5, #1
 800ce46:	429d      	cmp	r5, r3
 800ce48:	bf38      	it	cc
 800ce4a:	461d      	movcc	r5, r3
 800ce4c:	0553      	lsls	r3, r2, #21
 800ce4e:	d527      	bpl.n	800cea0 <__ssputs_r+0x8c>
 800ce50:	4629      	mov	r1, r5
 800ce52:	f7ff fa87 	bl	800c364 <_malloc_r>
 800ce56:	4606      	mov	r6, r0
 800ce58:	b360      	cbz	r0, 800ceb4 <__ssputs_r+0xa0>
 800ce5a:	6921      	ldr	r1, [r4, #16]
 800ce5c:	464a      	mov	r2, r9
 800ce5e:	f7fe f823 	bl	800aea8 <memcpy>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	6126      	str	r6, [r4, #16]
 800ce70:	6165      	str	r5, [r4, #20]
 800ce72:	444e      	add	r6, r9
 800ce74:	eba5 0509 	sub.w	r5, r5, r9
 800ce78:	6026      	str	r6, [r4, #0]
 800ce7a:	60a5      	str	r5, [r4, #8]
 800ce7c:	463e      	mov	r6, r7
 800ce7e:	42be      	cmp	r6, r7
 800ce80:	d900      	bls.n	800ce84 <__ssputs_r+0x70>
 800ce82:	463e      	mov	r6, r7
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	4632      	mov	r2, r6
 800ce88:	4641      	mov	r1, r8
 800ce8a:	f000 f9c9 	bl	800d220 <memmove>
 800ce8e:	68a3      	ldr	r3, [r4, #8]
 800ce90:	1b9b      	subs	r3, r3, r6
 800ce92:	60a3      	str	r3, [r4, #8]
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	4433      	add	r3, r6
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea0:	462a      	mov	r2, r5
 800cea2:	f000 fa1b 	bl	800d2dc <_realloc_r>
 800cea6:	4606      	mov	r6, r0
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d1e0      	bne.n	800ce6e <__ssputs_r+0x5a>
 800ceac:	6921      	ldr	r1, [r4, #16]
 800ceae:	4650      	mov	r0, sl
 800ceb0:	f7fe fe8c 	bl	800bbcc <_free_r>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	f8ca 3000 	str.w	r3, [sl]
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	f04f 30ff 	mov.w	r0, #4294967295
 800cec6:	e7e9      	b.n	800ce9c <__ssputs_r+0x88>

0800cec8 <_svfiprintf_r>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	4698      	mov	r8, r3
 800cece:	898b      	ldrh	r3, [r1, #12]
 800ced0:	061b      	lsls	r3, r3, #24
 800ced2:	b09d      	sub	sp, #116	; 0x74
 800ced4:	4607      	mov	r7, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	4614      	mov	r4, r2
 800ceda:	d50e      	bpl.n	800cefa <_svfiprintf_r+0x32>
 800cedc:	690b      	ldr	r3, [r1, #16]
 800cede:	b963      	cbnz	r3, 800cefa <_svfiprintf_r+0x32>
 800cee0:	2140      	movs	r1, #64	; 0x40
 800cee2:	f7ff fa3f 	bl	800c364 <_malloc_r>
 800cee6:	6028      	str	r0, [r5, #0]
 800cee8:	6128      	str	r0, [r5, #16]
 800ceea:	b920      	cbnz	r0, 800cef6 <_svfiprintf_r+0x2e>
 800ceec:	230c      	movs	r3, #12
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295
 800cef4:	e0d0      	b.n	800d098 <_svfiprintf_r+0x1d0>
 800cef6:	2340      	movs	r3, #64	; 0x40
 800cef8:	616b      	str	r3, [r5, #20]
 800cefa:	2300      	movs	r3, #0
 800cefc:	9309      	str	r3, [sp, #36]	; 0x24
 800cefe:	2320      	movs	r3, #32
 800cf00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf04:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf08:	2330      	movs	r3, #48	; 0x30
 800cf0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0b0 <_svfiprintf_r+0x1e8>
 800cf0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf12:	f04f 0901 	mov.w	r9, #1
 800cf16:	4623      	mov	r3, r4
 800cf18:	469a      	mov	sl, r3
 800cf1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf1e:	b10a      	cbz	r2, 800cf24 <_svfiprintf_r+0x5c>
 800cf20:	2a25      	cmp	r2, #37	; 0x25
 800cf22:	d1f9      	bne.n	800cf18 <_svfiprintf_r+0x50>
 800cf24:	ebba 0b04 	subs.w	fp, sl, r4
 800cf28:	d00b      	beq.n	800cf42 <_svfiprintf_r+0x7a>
 800cf2a:	465b      	mov	r3, fp
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7ff ff6f 	bl	800ce14 <__ssputs_r>
 800cf36:	3001      	adds	r0, #1
 800cf38:	f000 80a9 	beq.w	800d08e <_svfiprintf_r+0x1c6>
 800cf3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf3e:	445a      	add	r2, fp
 800cf40:	9209      	str	r2, [sp, #36]	; 0x24
 800cf42:	f89a 3000 	ldrb.w	r3, [sl]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80a1 	beq.w	800d08e <_svfiprintf_r+0x1c6>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf56:	f10a 0a01 	add.w	sl, sl, #1
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	9307      	str	r3, [sp, #28]
 800cf5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf62:	931a      	str	r3, [sp, #104]	; 0x68
 800cf64:	4654      	mov	r4, sl
 800cf66:	2205      	movs	r2, #5
 800cf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6c:	4850      	ldr	r0, [pc, #320]	; (800d0b0 <_svfiprintf_r+0x1e8>)
 800cf6e:	f7f3 f92f 	bl	80001d0 <memchr>
 800cf72:	9a04      	ldr	r2, [sp, #16]
 800cf74:	b9d8      	cbnz	r0, 800cfae <_svfiprintf_r+0xe6>
 800cf76:	06d0      	lsls	r0, r2, #27
 800cf78:	bf44      	itt	mi
 800cf7a:	2320      	movmi	r3, #32
 800cf7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf80:	0711      	lsls	r1, r2, #28
 800cf82:	bf44      	itt	mi
 800cf84:	232b      	movmi	r3, #43	; 0x2b
 800cf86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf8e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf90:	d015      	beq.n	800cfbe <_svfiprintf_r+0xf6>
 800cf92:	9a07      	ldr	r2, [sp, #28]
 800cf94:	4654      	mov	r4, sl
 800cf96:	2000      	movs	r0, #0
 800cf98:	f04f 0c0a 	mov.w	ip, #10
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfa2:	3b30      	subs	r3, #48	; 0x30
 800cfa4:	2b09      	cmp	r3, #9
 800cfa6:	d94d      	bls.n	800d044 <_svfiprintf_r+0x17c>
 800cfa8:	b1b0      	cbz	r0, 800cfd8 <_svfiprintf_r+0x110>
 800cfaa:	9207      	str	r2, [sp, #28]
 800cfac:	e014      	b.n	800cfd8 <_svfiprintf_r+0x110>
 800cfae:	eba0 0308 	sub.w	r3, r0, r8
 800cfb2:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	46a2      	mov	sl, r4
 800cfbc:	e7d2      	b.n	800cf64 <_svfiprintf_r+0x9c>
 800cfbe:	9b03      	ldr	r3, [sp, #12]
 800cfc0:	1d19      	adds	r1, r3, #4
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	9103      	str	r1, [sp, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	bfbb      	ittet	lt
 800cfca:	425b      	neglt	r3, r3
 800cfcc:	f042 0202 	orrlt.w	r2, r2, #2
 800cfd0:	9307      	strge	r3, [sp, #28]
 800cfd2:	9307      	strlt	r3, [sp, #28]
 800cfd4:	bfb8      	it	lt
 800cfd6:	9204      	strlt	r2, [sp, #16]
 800cfd8:	7823      	ldrb	r3, [r4, #0]
 800cfda:	2b2e      	cmp	r3, #46	; 0x2e
 800cfdc:	d10c      	bne.n	800cff8 <_svfiprintf_r+0x130>
 800cfde:	7863      	ldrb	r3, [r4, #1]
 800cfe0:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe2:	d134      	bne.n	800d04e <_svfiprintf_r+0x186>
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	1d1a      	adds	r2, r3, #4
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	9203      	str	r2, [sp, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	bfb8      	it	lt
 800cff0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cff4:	3402      	adds	r4, #2
 800cff6:	9305      	str	r3, [sp, #20]
 800cff8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d0c0 <_svfiprintf_r+0x1f8>
 800cffc:	7821      	ldrb	r1, [r4, #0]
 800cffe:	2203      	movs	r2, #3
 800d000:	4650      	mov	r0, sl
 800d002:	f7f3 f8e5 	bl	80001d0 <memchr>
 800d006:	b138      	cbz	r0, 800d018 <_svfiprintf_r+0x150>
 800d008:	9b04      	ldr	r3, [sp, #16]
 800d00a:	eba0 000a 	sub.w	r0, r0, sl
 800d00e:	2240      	movs	r2, #64	; 0x40
 800d010:	4082      	lsls	r2, r0
 800d012:	4313      	orrs	r3, r2
 800d014:	3401      	adds	r4, #1
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01c:	4825      	ldr	r0, [pc, #148]	; (800d0b4 <_svfiprintf_r+0x1ec>)
 800d01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d022:	2206      	movs	r2, #6
 800d024:	f7f3 f8d4 	bl	80001d0 <memchr>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d038      	beq.n	800d09e <_svfiprintf_r+0x1d6>
 800d02c:	4b22      	ldr	r3, [pc, #136]	; (800d0b8 <_svfiprintf_r+0x1f0>)
 800d02e:	bb1b      	cbnz	r3, 800d078 <_svfiprintf_r+0x1b0>
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	3307      	adds	r3, #7
 800d034:	f023 0307 	bic.w	r3, r3, #7
 800d038:	3308      	adds	r3, #8
 800d03a:	9303      	str	r3, [sp, #12]
 800d03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03e:	4433      	add	r3, r6
 800d040:	9309      	str	r3, [sp, #36]	; 0x24
 800d042:	e768      	b.n	800cf16 <_svfiprintf_r+0x4e>
 800d044:	fb0c 3202 	mla	r2, ip, r2, r3
 800d048:	460c      	mov	r4, r1
 800d04a:	2001      	movs	r0, #1
 800d04c:	e7a6      	b.n	800cf9c <_svfiprintf_r+0xd4>
 800d04e:	2300      	movs	r3, #0
 800d050:	3401      	adds	r4, #1
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	4619      	mov	r1, r3
 800d056:	f04f 0c0a 	mov.w	ip, #10
 800d05a:	4620      	mov	r0, r4
 800d05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d060:	3a30      	subs	r2, #48	; 0x30
 800d062:	2a09      	cmp	r2, #9
 800d064:	d903      	bls.n	800d06e <_svfiprintf_r+0x1a6>
 800d066:	2b00      	cmp	r3, #0
 800d068:	d0c6      	beq.n	800cff8 <_svfiprintf_r+0x130>
 800d06a:	9105      	str	r1, [sp, #20]
 800d06c:	e7c4      	b.n	800cff8 <_svfiprintf_r+0x130>
 800d06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d072:	4604      	mov	r4, r0
 800d074:	2301      	movs	r3, #1
 800d076:	e7f0      	b.n	800d05a <_svfiprintf_r+0x192>
 800d078:	ab03      	add	r3, sp, #12
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	462a      	mov	r2, r5
 800d07e:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <_svfiprintf_r+0x1f4>)
 800d080:	a904      	add	r1, sp, #16
 800d082:	4638      	mov	r0, r7
 800d084:	f7fd f990 	bl	800a3a8 <_printf_float>
 800d088:	1c42      	adds	r2, r0, #1
 800d08a:	4606      	mov	r6, r0
 800d08c:	d1d6      	bne.n	800d03c <_svfiprintf_r+0x174>
 800d08e:	89ab      	ldrh	r3, [r5, #12]
 800d090:	065b      	lsls	r3, r3, #25
 800d092:	f53f af2d 	bmi.w	800cef0 <_svfiprintf_r+0x28>
 800d096:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d098:	b01d      	add	sp, #116	; 0x74
 800d09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09e:	ab03      	add	r3, sp, #12
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_svfiprintf_r+0x1f4>)
 800d0a6:	a904      	add	r1, sp, #16
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7fd fc21 	bl	800a8f0 <_printf_i>
 800d0ae:	e7eb      	b.n	800d088 <_svfiprintf_r+0x1c0>
 800d0b0:	0800dd3d 	.word	0x0800dd3d
 800d0b4:	0800dd47 	.word	0x0800dd47
 800d0b8:	0800a3a9 	.word	0x0800a3a9
 800d0bc:	0800ce15 	.word	0x0800ce15
 800d0c0:	0800dd43 	.word	0x0800dd43

0800d0c4 <__sflush_r>:
 800d0c4:	898a      	ldrh	r2, [r1, #12]
 800d0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	0710      	lsls	r0, r2, #28
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	d458      	bmi.n	800d184 <__sflush_r+0xc0>
 800d0d2:	684b      	ldr	r3, [r1, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	dc05      	bgt.n	800d0e4 <__sflush_r+0x20>
 800d0d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	dc02      	bgt.n	800d0e4 <__sflush_r+0x20>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0e6:	2e00      	cmp	r6, #0
 800d0e8:	d0f9      	beq.n	800d0de <__sflush_r+0x1a>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0f0:	682f      	ldr	r7, [r5, #0]
 800d0f2:	6a21      	ldr	r1, [r4, #32]
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	d032      	beq.n	800d15e <__sflush_r+0x9a>
 800d0f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	075a      	lsls	r2, r3, #29
 800d0fe:	d505      	bpl.n	800d10c <__sflush_r+0x48>
 800d100:	6863      	ldr	r3, [r4, #4]
 800d102:	1ac0      	subs	r0, r0, r3
 800d104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d106:	b10b      	cbz	r3, 800d10c <__sflush_r+0x48>
 800d108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d10a:	1ac0      	subs	r0, r0, r3
 800d10c:	2300      	movs	r3, #0
 800d10e:	4602      	mov	r2, r0
 800d110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d112:	6a21      	ldr	r1, [r4, #32]
 800d114:	4628      	mov	r0, r5
 800d116:	47b0      	blx	r6
 800d118:	1c43      	adds	r3, r0, #1
 800d11a:	89a3      	ldrh	r3, [r4, #12]
 800d11c:	d106      	bne.n	800d12c <__sflush_r+0x68>
 800d11e:	6829      	ldr	r1, [r5, #0]
 800d120:	291d      	cmp	r1, #29
 800d122:	d82b      	bhi.n	800d17c <__sflush_r+0xb8>
 800d124:	4a29      	ldr	r2, [pc, #164]	; (800d1cc <__sflush_r+0x108>)
 800d126:	410a      	asrs	r2, r1
 800d128:	07d6      	lsls	r6, r2, #31
 800d12a:	d427      	bmi.n	800d17c <__sflush_r+0xb8>
 800d12c:	2200      	movs	r2, #0
 800d12e:	6062      	str	r2, [r4, #4]
 800d130:	04d9      	lsls	r1, r3, #19
 800d132:	6922      	ldr	r2, [r4, #16]
 800d134:	6022      	str	r2, [r4, #0]
 800d136:	d504      	bpl.n	800d142 <__sflush_r+0x7e>
 800d138:	1c42      	adds	r2, r0, #1
 800d13a:	d101      	bne.n	800d140 <__sflush_r+0x7c>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b903      	cbnz	r3, 800d142 <__sflush_r+0x7e>
 800d140:	6560      	str	r0, [r4, #84]	; 0x54
 800d142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d144:	602f      	str	r7, [r5, #0]
 800d146:	2900      	cmp	r1, #0
 800d148:	d0c9      	beq.n	800d0de <__sflush_r+0x1a>
 800d14a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d14e:	4299      	cmp	r1, r3
 800d150:	d002      	beq.n	800d158 <__sflush_r+0x94>
 800d152:	4628      	mov	r0, r5
 800d154:	f7fe fd3a 	bl	800bbcc <_free_r>
 800d158:	2000      	movs	r0, #0
 800d15a:	6360      	str	r0, [r4, #52]	; 0x34
 800d15c:	e7c0      	b.n	800d0e0 <__sflush_r+0x1c>
 800d15e:	2301      	movs	r3, #1
 800d160:	4628      	mov	r0, r5
 800d162:	47b0      	blx	r6
 800d164:	1c41      	adds	r1, r0, #1
 800d166:	d1c8      	bne.n	800d0fa <__sflush_r+0x36>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0c5      	beq.n	800d0fa <__sflush_r+0x36>
 800d16e:	2b1d      	cmp	r3, #29
 800d170:	d001      	beq.n	800d176 <__sflush_r+0xb2>
 800d172:	2b16      	cmp	r3, #22
 800d174:	d101      	bne.n	800d17a <__sflush_r+0xb6>
 800d176:	602f      	str	r7, [r5, #0]
 800d178:	e7b1      	b.n	800d0de <__sflush_r+0x1a>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	e7ad      	b.n	800d0e0 <__sflush_r+0x1c>
 800d184:	690f      	ldr	r7, [r1, #16]
 800d186:	2f00      	cmp	r7, #0
 800d188:	d0a9      	beq.n	800d0de <__sflush_r+0x1a>
 800d18a:	0793      	lsls	r3, r2, #30
 800d18c:	680e      	ldr	r6, [r1, #0]
 800d18e:	bf08      	it	eq
 800d190:	694b      	ldreq	r3, [r1, #20]
 800d192:	600f      	str	r7, [r1, #0]
 800d194:	bf18      	it	ne
 800d196:	2300      	movne	r3, #0
 800d198:	eba6 0807 	sub.w	r8, r6, r7
 800d19c:	608b      	str	r3, [r1, #8]
 800d19e:	f1b8 0f00 	cmp.w	r8, #0
 800d1a2:	dd9c      	ble.n	800d0de <__sflush_r+0x1a>
 800d1a4:	6a21      	ldr	r1, [r4, #32]
 800d1a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1a8:	4643      	mov	r3, r8
 800d1aa:	463a      	mov	r2, r7
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	47b0      	blx	r6
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	dc06      	bgt.n	800d1c2 <__sflush_r+0xfe>
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ba:	81a3      	strh	r3, [r4, #12]
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e78e      	b.n	800d0e0 <__sflush_r+0x1c>
 800d1c2:	4407      	add	r7, r0
 800d1c4:	eba8 0800 	sub.w	r8, r8, r0
 800d1c8:	e7e9      	b.n	800d19e <__sflush_r+0xda>
 800d1ca:	bf00      	nop
 800d1cc:	dfbffffe 	.word	0xdfbffffe

0800d1d0 <_fflush_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	690b      	ldr	r3, [r1, #16]
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	b913      	cbnz	r3, 800d1e0 <_fflush_r+0x10>
 800d1da:	2500      	movs	r5, #0
 800d1dc:	4628      	mov	r0, r5
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	b118      	cbz	r0, 800d1ea <_fflush_r+0x1a>
 800d1e2:	6a03      	ldr	r3, [r0, #32]
 800d1e4:	b90b      	cbnz	r3, 800d1ea <_fflush_r+0x1a>
 800d1e6:	f7fd fd1f 	bl	800ac28 <__sinit>
 800d1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0f3      	beq.n	800d1da <_fflush_r+0xa>
 800d1f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1f4:	07d0      	lsls	r0, r2, #31
 800d1f6:	d404      	bmi.n	800d202 <_fflush_r+0x32>
 800d1f8:	0599      	lsls	r1, r3, #22
 800d1fa:	d402      	bmi.n	800d202 <_fflush_r+0x32>
 800d1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1fe:	f7fd fe51 	bl	800aea4 <__retarget_lock_acquire_recursive>
 800d202:	4628      	mov	r0, r5
 800d204:	4621      	mov	r1, r4
 800d206:	f7ff ff5d 	bl	800d0c4 <__sflush_r>
 800d20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d20c:	07da      	lsls	r2, r3, #31
 800d20e:	4605      	mov	r5, r0
 800d210:	d4e4      	bmi.n	800d1dc <_fflush_r+0xc>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	059b      	lsls	r3, r3, #22
 800d216:	d4e1      	bmi.n	800d1dc <_fflush_r+0xc>
 800d218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d21a:	f7fd fe44 	bl	800aea6 <__retarget_lock_release_recursive>
 800d21e:	e7dd      	b.n	800d1dc <_fflush_r+0xc>

0800d220 <memmove>:
 800d220:	4288      	cmp	r0, r1
 800d222:	b510      	push	{r4, lr}
 800d224:	eb01 0402 	add.w	r4, r1, r2
 800d228:	d902      	bls.n	800d230 <memmove+0x10>
 800d22a:	4284      	cmp	r4, r0
 800d22c:	4623      	mov	r3, r4
 800d22e:	d807      	bhi.n	800d240 <memmove+0x20>
 800d230:	1e43      	subs	r3, r0, #1
 800d232:	42a1      	cmp	r1, r4
 800d234:	d008      	beq.n	800d248 <memmove+0x28>
 800d236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d23e:	e7f8      	b.n	800d232 <memmove+0x12>
 800d240:	4402      	add	r2, r0
 800d242:	4601      	mov	r1, r0
 800d244:	428a      	cmp	r2, r1
 800d246:	d100      	bne.n	800d24a <memmove+0x2a>
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d252:	e7f7      	b.n	800d244 <memmove+0x24>

0800d254 <_sbrk_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4d06      	ldr	r5, [pc, #24]	; (800d270 <_sbrk_r+0x1c>)
 800d258:	2300      	movs	r3, #0
 800d25a:	4604      	mov	r4, r0
 800d25c:	4608      	mov	r0, r1
 800d25e:	602b      	str	r3, [r5, #0]
 800d260:	f7f5 fa62 	bl	8002728 <_sbrk>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_sbrk_r+0x1a>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_sbrk_r+0x1a>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	20000810 	.word	0x20000810

0800d274 <__assert_func>:
 800d274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d276:	4614      	mov	r4, r2
 800d278:	461a      	mov	r2, r3
 800d27a:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <__assert_func+0x2c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4605      	mov	r5, r0
 800d280:	68d8      	ldr	r0, [r3, #12]
 800d282:	b14c      	cbz	r4, 800d298 <__assert_func+0x24>
 800d284:	4b07      	ldr	r3, [pc, #28]	; (800d2a4 <__assert_func+0x30>)
 800d286:	9100      	str	r1, [sp, #0]
 800d288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d28c:	4906      	ldr	r1, [pc, #24]	; (800d2a8 <__assert_func+0x34>)
 800d28e:	462b      	mov	r3, r5
 800d290:	f000 f854 	bl	800d33c <fiprintf>
 800d294:	f000 f864 	bl	800d360 <abort>
 800d298:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <__assert_func+0x38>)
 800d29a:	461c      	mov	r4, r3
 800d29c:	e7f3      	b.n	800d286 <__assert_func+0x12>
 800d29e:	bf00      	nop
 800d2a0:	200001d0 	.word	0x200001d0
 800d2a4:	0800dd4e 	.word	0x0800dd4e
 800d2a8:	0800dd5b 	.word	0x0800dd5b
 800d2ac:	0800dd89 	.word	0x0800dd89

0800d2b0 <_calloc_r>:
 800d2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2b2:	fba1 2402 	umull	r2, r4, r1, r2
 800d2b6:	b94c      	cbnz	r4, 800d2cc <_calloc_r+0x1c>
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	9201      	str	r2, [sp, #4]
 800d2bc:	f7ff f852 	bl	800c364 <_malloc_r>
 800d2c0:	9a01      	ldr	r2, [sp, #4]
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	b930      	cbnz	r0, 800d2d4 <_calloc_r+0x24>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	b003      	add	sp, #12
 800d2ca:	bd30      	pop	{r4, r5, pc}
 800d2cc:	220c      	movs	r2, #12
 800d2ce:	6002      	str	r2, [r0, #0]
 800d2d0:	2500      	movs	r5, #0
 800d2d2:	e7f8      	b.n	800d2c6 <_calloc_r+0x16>
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	f7fd fd40 	bl	800ad5a <memset>
 800d2da:	e7f4      	b.n	800d2c6 <_calloc_r+0x16>

0800d2dc <_realloc_r>:
 800d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	4614      	mov	r4, r2
 800d2e4:	460e      	mov	r6, r1
 800d2e6:	b921      	cbnz	r1, 800d2f2 <_realloc_r+0x16>
 800d2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	f7ff b839 	b.w	800c364 <_malloc_r>
 800d2f2:	b92a      	cbnz	r2, 800d300 <_realloc_r+0x24>
 800d2f4:	f7fe fc6a 	bl	800bbcc <_free_r>
 800d2f8:	4625      	mov	r5, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d300:	f000 f835 	bl	800d36e <_malloc_usable_size_r>
 800d304:	4284      	cmp	r4, r0
 800d306:	4607      	mov	r7, r0
 800d308:	d802      	bhi.n	800d310 <_realloc_r+0x34>
 800d30a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d30e:	d812      	bhi.n	800d336 <_realloc_r+0x5a>
 800d310:	4621      	mov	r1, r4
 800d312:	4640      	mov	r0, r8
 800d314:	f7ff f826 	bl	800c364 <_malloc_r>
 800d318:	4605      	mov	r5, r0
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d0ed      	beq.n	800d2fa <_realloc_r+0x1e>
 800d31e:	42bc      	cmp	r4, r7
 800d320:	4622      	mov	r2, r4
 800d322:	4631      	mov	r1, r6
 800d324:	bf28      	it	cs
 800d326:	463a      	movcs	r2, r7
 800d328:	f7fd fdbe 	bl	800aea8 <memcpy>
 800d32c:	4631      	mov	r1, r6
 800d32e:	4640      	mov	r0, r8
 800d330:	f7fe fc4c 	bl	800bbcc <_free_r>
 800d334:	e7e1      	b.n	800d2fa <_realloc_r+0x1e>
 800d336:	4635      	mov	r5, r6
 800d338:	e7df      	b.n	800d2fa <_realloc_r+0x1e>
	...

0800d33c <fiprintf>:
 800d33c:	b40e      	push	{r1, r2, r3}
 800d33e:	b503      	push	{r0, r1, lr}
 800d340:	4601      	mov	r1, r0
 800d342:	ab03      	add	r3, sp, #12
 800d344:	4805      	ldr	r0, [pc, #20]	; (800d35c <fiprintf+0x20>)
 800d346:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	f000 f83f 	bl	800d3d0 <_vfiprintf_r>
 800d352:	b002      	add	sp, #8
 800d354:	f85d eb04 	ldr.w	lr, [sp], #4
 800d358:	b003      	add	sp, #12
 800d35a:	4770      	bx	lr
 800d35c:	200001d0 	.word	0x200001d0

0800d360 <abort>:
 800d360:	b508      	push	{r3, lr}
 800d362:	2006      	movs	r0, #6
 800d364:	f000 fa0c 	bl	800d780 <raise>
 800d368:	2001      	movs	r0, #1
 800d36a:	f7f5 f965 	bl	8002638 <_exit>

0800d36e <_malloc_usable_size_r>:
 800d36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d372:	1f18      	subs	r0, r3, #4
 800d374:	2b00      	cmp	r3, #0
 800d376:	bfbc      	itt	lt
 800d378:	580b      	ldrlt	r3, [r1, r0]
 800d37a:	18c0      	addlt	r0, r0, r3
 800d37c:	4770      	bx	lr

0800d37e <__sfputc_r>:
 800d37e:	6893      	ldr	r3, [r2, #8]
 800d380:	3b01      	subs	r3, #1
 800d382:	2b00      	cmp	r3, #0
 800d384:	b410      	push	{r4}
 800d386:	6093      	str	r3, [r2, #8]
 800d388:	da08      	bge.n	800d39c <__sfputc_r+0x1e>
 800d38a:	6994      	ldr	r4, [r2, #24]
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	db01      	blt.n	800d394 <__sfputc_r+0x16>
 800d390:	290a      	cmp	r1, #10
 800d392:	d103      	bne.n	800d39c <__sfputc_r+0x1e>
 800d394:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d398:	f000 b934 	b.w	800d604 <__swbuf_r>
 800d39c:	6813      	ldr	r3, [r2, #0]
 800d39e:	1c58      	adds	r0, r3, #1
 800d3a0:	6010      	str	r0, [r2, #0]
 800d3a2:	7019      	strb	r1, [r3, #0]
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <__sfputs_r>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	460f      	mov	r7, r1
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	18d5      	adds	r5, r2, r3
 800d3b6:	42ac      	cmp	r4, r5
 800d3b8:	d101      	bne.n	800d3be <__sfputs_r+0x12>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e007      	b.n	800d3ce <__sfputs_r+0x22>
 800d3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c2:	463a      	mov	r2, r7
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f7ff ffda 	bl	800d37e <__sfputc_r>
 800d3ca:	1c43      	adds	r3, r0, #1
 800d3cc:	d1f3      	bne.n	800d3b6 <__sfputs_r+0xa>
 800d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3d0 <_vfiprintf_r>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	b09d      	sub	sp, #116	; 0x74
 800d3d8:	4614      	mov	r4, r2
 800d3da:	4698      	mov	r8, r3
 800d3dc:	4606      	mov	r6, r0
 800d3de:	b118      	cbz	r0, 800d3e8 <_vfiprintf_r+0x18>
 800d3e0:	6a03      	ldr	r3, [r0, #32]
 800d3e2:	b90b      	cbnz	r3, 800d3e8 <_vfiprintf_r+0x18>
 800d3e4:	f7fd fc20 	bl	800ac28 <__sinit>
 800d3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ea:	07d9      	lsls	r1, r3, #31
 800d3ec:	d405      	bmi.n	800d3fa <_vfiprintf_r+0x2a>
 800d3ee:	89ab      	ldrh	r3, [r5, #12]
 800d3f0:	059a      	lsls	r2, r3, #22
 800d3f2:	d402      	bmi.n	800d3fa <_vfiprintf_r+0x2a>
 800d3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3f6:	f7fd fd55 	bl	800aea4 <__retarget_lock_acquire_recursive>
 800d3fa:	89ab      	ldrh	r3, [r5, #12]
 800d3fc:	071b      	lsls	r3, r3, #28
 800d3fe:	d501      	bpl.n	800d404 <_vfiprintf_r+0x34>
 800d400:	692b      	ldr	r3, [r5, #16]
 800d402:	b99b      	cbnz	r3, 800d42c <_vfiprintf_r+0x5c>
 800d404:	4629      	mov	r1, r5
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f93a 	bl	800d680 <__swsetup_r>
 800d40c:	b170      	cbz	r0, 800d42c <_vfiprintf_r+0x5c>
 800d40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d410:	07dc      	lsls	r4, r3, #31
 800d412:	d504      	bpl.n	800d41e <_vfiprintf_r+0x4e>
 800d414:	f04f 30ff 	mov.w	r0, #4294967295
 800d418:	b01d      	add	sp, #116	; 0x74
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41e:	89ab      	ldrh	r3, [r5, #12]
 800d420:	0598      	lsls	r0, r3, #22
 800d422:	d4f7      	bmi.n	800d414 <_vfiprintf_r+0x44>
 800d424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d426:	f7fd fd3e 	bl	800aea6 <__retarget_lock_release_recursive>
 800d42a:	e7f3      	b.n	800d414 <_vfiprintf_r+0x44>
 800d42c:	2300      	movs	r3, #0
 800d42e:	9309      	str	r3, [sp, #36]	; 0x24
 800d430:	2320      	movs	r3, #32
 800d432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d436:	f8cd 800c 	str.w	r8, [sp, #12]
 800d43a:	2330      	movs	r3, #48	; 0x30
 800d43c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d5f0 <_vfiprintf_r+0x220>
 800d440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d444:	f04f 0901 	mov.w	r9, #1
 800d448:	4623      	mov	r3, r4
 800d44a:	469a      	mov	sl, r3
 800d44c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d450:	b10a      	cbz	r2, 800d456 <_vfiprintf_r+0x86>
 800d452:	2a25      	cmp	r2, #37	; 0x25
 800d454:	d1f9      	bne.n	800d44a <_vfiprintf_r+0x7a>
 800d456:	ebba 0b04 	subs.w	fp, sl, r4
 800d45a:	d00b      	beq.n	800d474 <_vfiprintf_r+0xa4>
 800d45c:	465b      	mov	r3, fp
 800d45e:	4622      	mov	r2, r4
 800d460:	4629      	mov	r1, r5
 800d462:	4630      	mov	r0, r6
 800d464:	f7ff ffa2 	bl	800d3ac <__sfputs_r>
 800d468:	3001      	adds	r0, #1
 800d46a:	f000 80a9 	beq.w	800d5c0 <_vfiprintf_r+0x1f0>
 800d46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d470:	445a      	add	r2, fp
 800d472:	9209      	str	r2, [sp, #36]	; 0x24
 800d474:	f89a 3000 	ldrb.w	r3, [sl]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 80a1 	beq.w	800d5c0 <_vfiprintf_r+0x1f0>
 800d47e:	2300      	movs	r3, #0
 800d480:	f04f 32ff 	mov.w	r2, #4294967295
 800d484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d488:	f10a 0a01 	add.w	sl, sl, #1
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	9307      	str	r3, [sp, #28]
 800d490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d494:	931a      	str	r3, [sp, #104]	; 0x68
 800d496:	4654      	mov	r4, sl
 800d498:	2205      	movs	r2, #5
 800d49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d49e:	4854      	ldr	r0, [pc, #336]	; (800d5f0 <_vfiprintf_r+0x220>)
 800d4a0:	f7f2 fe96 	bl	80001d0 <memchr>
 800d4a4:	9a04      	ldr	r2, [sp, #16]
 800d4a6:	b9d8      	cbnz	r0, 800d4e0 <_vfiprintf_r+0x110>
 800d4a8:	06d1      	lsls	r1, r2, #27
 800d4aa:	bf44      	itt	mi
 800d4ac:	2320      	movmi	r3, #32
 800d4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4b2:	0713      	lsls	r3, r2, #28
 800d4b4:	bf44      	itt	mi
 800d4b6:	232b      	movmi	r3, #43	; 0x2b
 800d4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c2:	d015      	beq.n	800d4f0 <_vfiprintf_r+0x120>
 800d4c4:	9a07      	ldr	r2, [sp, #28]
 800d4c6:	4654      	mov	r4, sl
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	f04f 0c0a 	mov.w	ip, #10
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4d4:	3b30      	subs	r3, #48	; 0x30
 800d4d6:	2b09      	cmp	r3, #9
 800d4d8:	d94d      	bls.n	800d576 <_vfiprintf_r+0x1a6>
 800d4da:	b1b0      	cbz	r0, 800d50a <_vfiprintf_r+0x13a>
 800d4dc:	9207      	str	r2, [sp, #28]
 800d4de:	e014      	b.n	800d50a <_vfiprintf_r+0x13a>
 800d4e0:	eba0 0308 	sub.w	r3, r0, r8
 800d4e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	9304      	str	r3, [sp, #16]
 800d4ec:	46a2      	mov	sl, r4
 800d4ee:	e7d2      	b.n	800d496 <_vfiprintf_r+0xc6>
 800d4f0:	9b03      	ldr	r3, [sp, #12]
 800d4f2:	1d19      	adds	r1, r3, #4
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	9103      	str	r1, [sp, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	bfbb      	ittet	lt
 800d4fc:	425b      	neglt	r3, r3
 800d4fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d502:	9307      	strge	r3, [sp, #28]
 800d504:	9307      	strlt	r3, [sp, #28]
 800d506:	bfb8      	it	lt
 800d508:	9204      	strlt	r2, [sp, #16]
 800d50a:	7823      	ldrb	r3, [r4, #0]
 800d50c:	2b2e      	cmp	r3, #46	; 0x2e
 800d50e:	d10c      	bne.n	800d52a <_vfiprintf_r+0x15a>
 800d510:	7863      	ldrb	r3, [r4, #1]
 800d512:	2b2a      	cmp	r3, #42	; 0x2a
 800d514:	d134      	bne.n	800d580 <_vfiprintf_r+0x1b0>
 800d516:	9b03      	ldr	r3, [sp, #12]
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	9203      	str	r2, [sp, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfb8      	it	lt
 800d522:	f04f 33ff 	movlt.w	r3, #4294967295
 800d526:	3402      	adds	r4, #2
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d600 <_vfiprintf_r+0x230>
 800d52e:	7821      	ldrb	r1, [r4, #0]
 800d530:	2203      	movs	r2, #3
 800d532:	4650      	mov	r0, sl
 800d534:	f7f2 fe4c 	bl	80001d0 <memchr>
 800d538:	b138      	cbz	r0, 800d54a <_vfiprintf_r+0x17a>
 800d53a:	9b04      	ldr	r3, [sp, #16]
 800d53c:	eba0 000a 	sub.w	r0, r0, sl
 800d540:	2240      	movs	r2, #64	; 0x40
 800d542:	4082      	lsls	r2, r0
 800d544:	4313      	orrs	r3, r2
 800d546:	3401      	adds	r4, #1
 800d548:	9304      	str	r3, [sp, #16]
 800d54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54e:	4829      	ldr	r0, [pc, #164]	; (800d5f4 <_vfiprintf_r+0x224>)
 800d550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d554:	2206      	movs	r2, #6
 800d556:	f7f2 fe3b 	bl	80001d0 <memchr>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d03f      	beq.n	800d5de <_vfiprintf_r+0x20e>
 800d55e:	4b26      	ldr	r3, [pc, #152]	; (800d5f8 <_vfiprintf_r+0x228>)
 800d560:	bb1b      	cbnz	r3, 800d5aa <_vfiprintf_r+0x1da>
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	3307      	adds	r3, #7
 800d566:	f023 0307 	bic.w	r3, r3, #7
 800d56a:	3308      	adds	r3, #8
 800d56c:	9303      	str	r3, [sp, #12]
 800d56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d570:	443b      	add	r3, r7
 800d572:	9309      	str	r3, [sp, #36]	; 0x24
 800d574:	e768      	b.n	800d448 <_vfiprintf_r+0x78>
 800d576:	fb0c 3202 	mla	r2, ip, r2, r3
 800d57a:	460c      	mov	r4, r1
 800d57c:	2001      	movs	r0, #1
 800d57e:	e7a6      	b.n	800d4ce <_vfiprintf_r+0xfe>
 800d580:	2300      	movs	r3, #0
 800d582:	3401      	adds	r4, #1
 800d584:	9305      	str	r3, [sp, #20]
 800d586:	4619      	mov	r1, r3
 800d588:	f04f 0c0a 	mov.w	ip, #10
 800d58c:	4620      	mov	r0, r4
 800d58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d592:	3a30      	subs	r2, #48	; 0x30
 800d594:	2a09      	cmp	r2, #9
 800d596:	d903      	bls.n	800d5a0 <_vfiprintf_r+0x1d0>
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0c6      	beq.n	800d52a <_vfiprintf_r+0x15a>
 800d59c:	9105      	str	r1, [sp, #20]
 800d59e:	e7c4      	b.n	800d52a <_vfiprintf_r+0x15a>
 800d5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e7f0      	b.n	800d58c <_vfiprintf_r+0x1bc>
 800d5aa:	ab03      	add	r3, sp, #12
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	462a      	mov	r2, r5
 800d5b0:	4b12      	ldr	r3, [pc, #72]	; (800d5fc <_vfiprintf_r+0x22c>)
 800d5b2:	a904      	add	r1, sp, #16
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7fc fef7 	bl	800a3a8 <_printf_float>
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	1c78      	adds	r0, r7, #1
 800d5be:	d1d6      	bne.n	800d56e <_vfiprintf_r+0x19e>
 800d5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5c2:	07d9      	lsls	r1, r3, #31
 800d5c4:	d405      	bmi.n	800d5d2 <_vfiprintf_r+0x202>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	059a      	lsls	r2, r3, #22
 800d5ca:	d402      	bmi.n	800d5d2 <_vfiprintf_r+0x202>
 800d5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ce:	f7fd fc6a 	bl	800aea6 <__retarget_lock_release_recursive>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	065b      	lsls	r3, r3, #25
 800d5d6:	f53f af1d 	bmi.w	800d414 <_vfiprintf_r+0x44>
 800d5da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5dc:	e71c      	b.n	800d418 <_vfiprintf_r+0x48>
 800d5de:	ab03      	add	r3, sp, #12
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	4b05      	ldr	r3, [pc, #20]	; (800d5fc <_vfiprintf_r+0x22c>)
 800d5e6:	a904      	add	r1, sp, #16
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7fd f981 	bl	800a8f0 <_printf_i>
 800d5ee:	e7e4      	b.n	800d5ba <_vfiprintf_r+0x1ea>
 800d5f0:	0800dd3d 	.word	0x0800dd3d
 800d5f4:	0800dd47 	.word	0x0800dd47
 800d5f8:	0800a3a9 	.word	0x0800a3a9
 800d5fc:	0800d3ad 	.word	0x0800d3ad
 800d600:	0800dd43 	.word	0x0800dd43

0800d604 <__swbuf_r>:
 800d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d606:	460e      	mov	r6, r1
 800d608:	4614      	mov	r4, r2
 800d60a:	4605      	mov	r5, r0
 800d60c:	b118      	cbz	r0, 800d616 <__swbuf_r+0x12>
 800d60e:	6a03      	ldr	r3, [r0, #32]
 800d610:	b90b      	cbnz	r3, 800d616 <__swbuf_r+0x12>
 800d612:	f7fd fb09 	bl	800ac28 <__sinit>
 800d616:	69a3      	ldr	r3, [r4, #24]
 800d618:	60a3      	str	r3, [r4, #8]
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	071a      	lsls	r2, r3, #28
 800d61e:	d525      	bpl.n	800d66c <__swbuf_r+0x68>
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	b31b      	cbz	r3, 800d66c <__swbuf_r+0x68>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	6922      	ldr	r2, [r4, #16]
 800d628:	1a98      	subs	r0, r3, r2
 800d62a:	6963      	ldr	r3, [r4, #20]
 800d62c:	b2f6      	uxtb	r6, r6
 800d62e:	4283      	cmp	r3, r0
 800d630:	4637      	mov	r7, r6
 800d632:	dc04      	bgt.n	800d63e <__swbuf_r+0x3a>
 800d634:	4621      	mov	r1, r4
 800d636:	4628      	mov	r0, r5
 800d638:	f7ff fdca 	bl	800d1d0 <_fflush_r>
 800d63c:	b9e0      	cbnz	r0, 800d678 <__swbuf_r+0x74>
 800d63e:	68a3      	ldr	r3, [r4, #8]
 800d640:	3b01      	subs	r3, #1
 800d642:	60a3      	str	r3, [r4, #8]
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	6022      	str	r2, [r4, #0]
 800d64a:	701e      	strb	r6, [r3, #0]
 800d64c:	6962      	ldr	r2, [r4, #20]
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	429a      	cmp	r2, r3
 800d652:	d004      	beq.n	800d65e <__swbuf_r+0x5a>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	07db      	lsls	r3, r3, #31
 800d658:	d506      	bpl.n	800d668 <__swbuf_r+0x64>
 800d65a:	2e0a      	cmp	r6, #10
 800d65c:	d104      	bne.n	800d668 <__swbuf_r+0x64>
 800d65e:	4621      	mov	r1, r4
 800d660:	4628      	mov	r0, r5
 800d662:	f7ff fdb5 	bl	800d1d0 <_fflush_r>
 800d666:	b938      	cbnz	r0, 800d678 <__swbuf_r+0x74>
 800d668:	4638      	mov	r0, r7
 800d66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66c:	4621      	mov	r1, r4
 800d66e:	4628      	mov	r0, r5
 800d670:	f000 f806 	bl	800d680 <__swsetup_r>
 800d674:	2800      	cmp	r0, #0
 800d676:	d0d5      	beq.n	800d624 <__swbuf_r+0x20>
 800d678:	f04f 37ff 	mov.w	r7, #4294967295
 800d67c:	e7f4      	b.n	800d668 <__swbuf_r+0x64>
	...

0800d680 <__swsetup_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4b2a      	ldr	r3, [pc, #168]	; (800d72c <__swsetup_r+0xac>)
 800d684:	4605      	mov	r5, r0
 800d686:	6818      	ldr	r0, [r3, #0]
 800d688:	460c      	mov	r4, r1
 800d68a:	b118      	cbz	r0, 800d694 <__swsetup_r+0x14>
 800d68c:	6a03      	ldr	r3, [r0, #32]
 800d68e:	b90b      	cbnz	r3, 800d694 <__swsetup_r+0x14>
 800d690:	f7fd faca 	bl	800ac28 <__sinit>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d69a:	0718      	lsls	r0, r3, #28
 800d69c:	d422      	bmi.n	800d6e4 <__swsetup_r+0x64>
 800d69e:	06d9      	lsls	r1, r3, #27
 800d6a0:	d407      	bmi.n	800d6b2 <__swsetup_r+0x32>
 800d6a2:	2309      	movs	r3, #9
 800d6a4:	602b      	str	r3, [r5, #0]
 800d6a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	e034      	b.n	800d71c <__swsetup_r+0x9c>
 800d6b2:	0758      	lsls	r0, r3, #29
 800d6b4:	d512      	bpl.n	800d6dc <__swsetup_r+0x5c>
 800d6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6b8:	b141      	cbz	r1, 800d6cc <__swsetup_r+0x4c>
 800d6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	d002      	beq.n	800d6c8 <__swsetup_r+0x48>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f7fe fa82 	bl	800bbcc <_free_r>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6363      	str	r3, [r4, #52]	; 0x34
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6d2:	81a3      	strh	r3, [r4, #12]
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	6063      	str	r3, [r4, #4]
 800d6d8:	6923      	ldr	r3, [r4, #16]
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	f043 0308 	orr.w	r3, r3, #8
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	b94b      	cbnz	r3, 800d6fc <__swsetup_r+0x7c>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6f2:	d003      	beq.n	800d6fc <__swsetup_r+0x7c>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f000 f884 	bl	800d804 <__smakebuf_r>
 800d6fc:	89a0      	ldrh	r0, [r4, #12]
 800d6fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d702:	f010 0301 	ands.w	r3, r0, #1
 800d706:	d00a      	beq.n	800d71e <__swsetup_r+0x9e>
 800d708:	2300      	movs	r3, #0
 800d70a:	60a3      	str	r3, [r4, #8]
 800d70c:	6963      	ldr	r3, [r4, #20]
 800d70e:	425b      	negs	r3, r3
 800d710:	61a3      	str	r3, [r4, #24]
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	b943      	cbnz	r3, 800d728 <__swsetup_r+0xa8>
 800d716:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d71a:	d1c4      	bne.n	800d6a6 <__swsetup_r+0x26>
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	0781      	lsls	r1, r0, #30
 800d720:	bf58      	it	pl
 800d722:	6963      	ldrpl	r3, [r4, #20]
 800d724:	60a3      	str	r3, [r4, #8]
 800d726:	e7f4      	b.n	800d712 <__swsetup_r+0x92>
 800d728:	2000      	movs	r0, #0
 800d72a:	e7f7      	b.n	800d71c <__swsetup_r+0x9c>
 800d72c:	200001d0 	.word	0x200001d0

0800d730 <_raise_r>:
 800d730:	291f      	cmp	r1, #31
 800d732:	b538      	push	{r3, r4, r5, lr}
 800d734:	4604      	mov	r4, r0
 800d736:	460d      	mov	r5, r1
 800d738:	d904      	bls.n	800d744 <_raise_r+0x14>
 800d73a:	2316      	movs	r3, #22
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d746:	b112      	cbz	r2, 800d74e <_raise_r+0x1e>
 800d748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d74c:	b94b      	cbnz	r3, 800d762 <_raise_r+0x32>
 800d74e:	4620      	mov	r0, r4
 800d750:	f000 f830 	bl	800d7b4 <_getpid_r>
 800d754:	462a      	mov	r2, r5
 800d756:	4601      	mov	r1, r0
 800d758:	4620      	mov	r0, r4
 800d75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d75e:	f000 b817 	b.w	800d790 <_kill_r>
 800d762:	2b01      	cmp	r3, #1
 800d764:	d00a      	beq.n	800d77c <_raise_r+0x4c>
 800d766:	1c59      	adds	r1, r3, #1
 800d768:	d103      	bne.n	800d772 <_raise_r+0x42>
 800d76a:	2316      	movs	r3, #22
 800d76c:	6003      	str	r3, [r0, #0]
 800d76e:	2001      	movs	r0, #1
 800d770:	e7e7      	b.n	800d742 <_raise_r+0x12>
 800d772:	2400      	movs	r4, #0
 800d774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d778:	4628      	mov	r0, r5
 800d77a:	4798      	blx	r3
 800d77c:	2000      	movs	r0, #0
 800d77e:	e7e0      	b.n	800d742 <_raise_r+0x12>

0800d780 <raise>:
 800d780:	4b02      	ldr	r3, [pc, #8]	; (800d78c <raise+0xc>)
 800d782:	4601      	mov	r1, r0
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f7ff bfd3 	b.w	800d730 <_raise_r>
 800d78a:	bf00      	nop
 800d78c:	200001d0 	.word	0x200001d0

0800d790 <_kill_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d07      	ldr	r5, [pc, #28]	; (800d7b0 <_kill_r+0x20>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	4611      	mov	r1, r2
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	f7f4 ff3b 	bl	8002618 <_kill>
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	d102      	bne.n	800d7ac <_kill_r+0x1c>
 800d7a6:	682b      	ldr	r3, [r5, #0]
 800d7a8:	b103      	cbz	r3, 800d7ac <_kill_r+0x1c>
 800d7aa:	6023      	str	r3, [r4, #0]
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20000810 	.word	0x20000810

0800d7b4 <_getpid_r>:
 800d7b4:	f7f4 bf28 	b.w	8002608 <_getpid>

0800d7b8 <__swhatbuf_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c0:	2900      	cmp	r1, #0
 800d7c2:	b096      	sub	sp, #88	; 0x58
 800d7c4:	4615      	mov	r5, r2
 800d7c6:	461e      	mov	r6, r3
 800d7c8:	da0d      	bge.n	800d7e6 <__swhatbuf_r+0x2e>
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d7d0:	f04f 0100 	mov.w	r1, #0
 800d7d4:	bf0c      	ite	eq
 800d7d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d7da:	2340      	movne	r3, #64	; 0x40
 800d7dc:	2000      	movs	r0, #0
 800d7de:	6031      	str	r1, [r6, #0]
 800d7e0:	602b      	str	r3, [r5, #0]
 800d7e2:	b016      	add	sp, #88	; 0x58
 800d7e4:	bd70      	pop	{r4, r5, r6, pc}
 800d7e6:	466a      	mov	r2, sp
 800d7e8:	f000 f848 	bl	800d87c <_fstat_r>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	dbec      	blt.n	800d7ca <__swhatbuf_r+0x12>
 800d7f0:	9901      	ldr	r1, [sp, #4]
 800d7f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d7f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d7fa:	4259      	negs	r1, r3
 800d7fc:	4159      	adcs	r1, r3
 800d7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d802:	e7eb      	b.n	800d7dc <__swhatbuf_r+0x24>

0800d804 <__smakebuf_r>:
 800d804:	898b      	ldrh	r3, [r1, #12]
 800d806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d808:	079d      	lsls	r5, r3, #30
 800d80a:	4606      	mov	r6, r0
 800d80c:	460c      	mov	r4, r1
 800d80e:	d507      	bpl.n	800d820 <__smakebuf_r+0x1c>
 800d810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	2301      	movs	r3, #1
 800d81a:	6163      	str	r3, [r4, #20]
 800d81c:	b002      	add	sp, #8
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	ab01      	add	r3, sp, #4
 800d822:	466a      	mov	r2, sp
 800d824:	f7ff ffc8 	bl	800d7b8 <__swhatbuf_r>
 800d828:	9900      	ldr	r1, [sp, #0]
 800d82a:	4605      	mov	r5, r0
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7fe fd99 	bl	800c364 <_malloc_r>
 800d832:	b948      	cbnz	r0, 800d848 <__smakebuf_r+0x44>
 800d834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d838:	059a      	lsls	r2, r3, #22
 800d83a:	d4ef      	bmi.n	800d81c <__smakebuf_r+0x18>
 800d83c:	f023 0303 	bic.w	r3, r3, #3
 800d840:	f043 0302 	orr.w	r3, r3, #2
 800d844:	81a3      	strh	r3, [r4, #12]
 800d846:	e7e3      	b.n	800d810 <__smakebuf_r+0xc>
 800d848:	89a3      	ldrh	r3, [r4, #12]
 800d84a:	6020      	str	r0, [r4, #0]
 800d84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d850:	81a3      	strh	r3, [r4, #12]
 800d852:	9b00      	ldr	r3, [sp, #0]
 800d854:	6163      	str	r3, [r4, #20]
 800d856:	9b01      	ldr	r3, [sp, #4]
 800d858:	6120      	str	r0, [r4, #16]
 800d85a:	b15b      	cbz	r3, 800d874 <__smakebuf_r+0x70>
 800d85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d860:	4630      	mov	r0, r6
 800d862:	f000 f81d 	bl	800d8a0 <_isatty_r>
 800d866:	b128      	cbz	r0, 800d874 <__smakebuf_r+0x70>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	f023 0303 	bic.w	r3, r3, #3
 800d86e:	f043 0301 	orr.w	r3, r3, #1
 800d872:	81a3      	strh	r3, [r4, #12]
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	431d      	orrs	r5, r3
 800d878:	81a5      	strh	r5, [r4, #12]
 800d87a:	e7cf      	b.n	800d81c <__smakebuf_r+0x18>

0800d87c <_fstat_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d07      	ldr	r5, [pc, #28]	; (800d89c <_fstat_r+0x20>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	f7f4 ff24 	bl	80026d6 <_fstat>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d102      	bne.n	800d898 <_fstat_r+0x1c>
 800d892:	682b      	ldr	r3, [r5, #0]
 800d894:	b103      	cbz	r3, 800d898 <_fstat_r+0x1c>
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	bd38      	pop	{r3, r4, r5, pc}
 800d89a:	bf00      	nop
 800d89c:	20000810 	.word	0x20000810

0800d8a0 <_isatty_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	; (800d8bc <_isatty_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f4 ff23 	bl	80026f6 <_isatty>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_isatty_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_isatty_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	20000810 	.word	0x20000810

0800d8c0 <_init>:
 800d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c2:	bf00      	nop
 800d8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c6:	bc08      	pop	{r3}
 800d8c8:	469e      	mov	lr, r3
 800d8ca:	4770      	bx	lr

0800d8cc <_fini>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	bf00      	nop
 800d8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d2:	bc08      	pop	{r3}
 800d8d4:	469e      	mov	lr, r3
 800d8d6:	4770      	bx	lr
