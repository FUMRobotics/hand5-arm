
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e858  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800e9e8  0800e9e8  0001e9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeac  0800eeac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eeac  0800eeac  0001eeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eeb4  0800eeb4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eeb4  0800eeb4  0001eeb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eeb8  0800eeb8  0001eeb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800eebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  200001d8  0800f090  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  0800f090  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c85e  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec2  00000000  00000000  0003caa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00040968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001242  00000000  00000000  00042100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb8b  00000000  00000000  00043342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e3ee  00000000  00000000  0006eecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b287  00000000  00000000  0008d2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007750  00000000  00000000  00198544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0019fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e9d0 	.word	0x0800e9d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e9d0 	.word	0x0800e9d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a6 	b.w	8000f4c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9e08      	ldr	r6, [sp, #32]
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	460f      	mov	r7, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4694      	mov	ip, r2
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0xe2>
 8000c9a:	fab2 f382 	clz	r3, r2
 8000c9e:	b143      	cbz	r3, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	f1c3 0220 	rsb	r2, r3, #32
 8000ca8:	409f      	lsls	r7, r3
 8000caa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb6:	fa1f f58c 	uxth.w	r5, ip
 8000cba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cbe:	0c22      	lsrs	r2, r4, #16
 8000cc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc8:	fb01 f005 	mul.w	r0, r1, r5
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d90a      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd8:	f080 811c 	bcs.w	8000f14 <__udivmoddi4+0x290>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f240 8119 	bls.w	8000f14 <__udivmoddi4+0x290>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	4462      	add	r2, ip
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	b2a4      	uxth	r4, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf6:	fb00 f505 	mul.w	r5, r0, r5
 8000cfa:	42a5      	cmp	r5, r4
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x90>
 8000cfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000d02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x294>
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x294>
 8000d10:	4464      	add	r4, ip
 8000d12:	3802      	subs	r0, #2
 8000d14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11e      	cbz	r6, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40dc      	lsrs	r4, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	e9c6 4300 	strd	r4, r3, [r6]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0xbc>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f000 80ed 	beq.w	8000f0e <__udivmoddi4+0x28a>
 8000d34:	2100      	movs	r1, #0
 8000d36:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	fab3 f183 	clz	r1, r3
 8000d44:	2900      	cmp	r1, #0
 8000d46:	d149      	bne.n	8000ddc <__udivmoddi4+0x158>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0xce>
 8000d4c:	4282      	cmp	r2, r0
 8000d4e:	f200 80f8 	bhi.w	8000f42 <__udivmoddi4+0x2be>
 8000d52:	1a84      	subs	r4, r0, r2
 8000d54:	eb65 0203 	sbc.w	r2, r5, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4617      	mov	r7, r2
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d0e2      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	e9c6 4700 	strd	r4, r7, [r6]
 8000d64:	e7df      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d66:	b902      	cbnz	r2, 8000d6a <__udivmoddi4+0xe6>
 8000d68:	deff      	udf	#255	; 0xff
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8090 	bne.w	8000e94 <__udivmoddi4+0x210>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d84:	fb07 2015 	mls	r0, r7, r5, r2
 8000d88:	0c22      	lsrs	r2, r4, #16
 8000d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d8e:	fb0e f005 	mul.w	r0, lr, r5
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x124>
 8000d96:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x122>
 8000da0:	4290      	cmp	r0, r2
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2b8>
 8000da6:	4645      	mov	r5, r8
 8000da8:	1a12      	subs	r2, r2, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db0:	fb07 2210 	mls	r2, r7, r0, r2
 8000db4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x14e>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x14c>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2c2>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dda:	e79f      	b.n	8000d1c <__udivmoddi4+0x98>
 8000ddc:	f1c1 0720 	rsb	r7, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa05 f401 	lsl.w	r4, r5, r1
 8000dee:	fa20 f307 	lsr.w	r3, r0, r7
 8000df2:	40fd      	lsrs	r5, r7
 8000df4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fb09 5518 	mls	r5, r9, r8, r5
 8000e06:	0c1c      	lsrs	r4, r3, #16
 8000e08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b0>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2b4>
 8000e28:	42a5      	cmp	r5, r4
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2b4>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4464      	add	r4, ip
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	b29d      	uxth	r5, r3
 8000e38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1da>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2ac>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2ac>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fba3 9502 	umull	r9, r5, r3, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46ae      	mov	lr, r5
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x29c>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x298>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x208>
 8000e76:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40ca      	lsrs	r2, r1
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	4317      	orrs	r7, r2
 8000e88:	e9c6 7400 	strd	r7, r4, [r6]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e94:	f1c3 0120 	rsb	r1, r3, #32
 8000e98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea4:	409d      	lsls	r5, r3
 8000ea6:	432a      	orrs	r2, r5
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb8:	0c11      	lsrs	r1, r2, #16
 8000eba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ebe:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec2:	428d      	cmp	r5, r1
 8000ec4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x258>
 8000eca:	eb1c 0101 	adds.w	r1, ip, r1
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed4:	428d      	cmp	r5, r1
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1b49      	subs	r1, r1, r5
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef0:	4291      	cmp	r1, r2
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x282>
 8000ef4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000f02:	3d02      	subs	r5, #2
 8000f04:	4462      	add	r2, ip
 8000f06:	1a52      	subs	r2, r2, r1
 8000f08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0xfc>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000f14:	4639      	mov	r1, r7
 8000f16:	e6e6      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000f18:	4610      	mov	r0, r2
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x90>
 8000f1c:	4548      	cmp	r0, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f0>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f0>
 8000f2c:	4645      	mov	r5, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f30:	462b      	mov	r3, r5
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1da>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x258>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b0>
 8000f3c:	3d02      	subs	r5, #2
 8000f3e:	4462      	add	r2, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x124>
 8000f42:	4608      	mov	r0, r1
 8000f44:	e70a      	b.n	8000d5c <__udivmoddi4+0xd8>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x14e>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	//remove noise in receive packet
	uint16_t counter=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	80fb      	strh	r3, [r7, #6]
	for(counter=uartCounter;counter>0;counter--)
 8000f5a:	4b90      	ldr	r3, [pc, #576]	; (800119c <ProcessUartData+0x24c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
 8000f60:	e034      	b.n	8000fcc <ProcessUartData+0x7c>
	{
		if ((uartRecieveBuffer[counter] == '{'&&uartRecieveBuffer[counter+2] == 'P'&& uartRecieveBuffer[counter+3] == ':')&&(uartRecieveBuffer[counter+1] == 'P'||uartRecieveBuffer[counter+1] == 'S')) {
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4a8e      	ldr	r2, [pc, #568]	; (80011a0 <ProcessUartData+0x250>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b7b      	cmp	r3, #123	; 0x7b
 8000f6a:	d12c      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4a8b      	ldr	r2, [pc, #556]	; (80011a0 <ProcessUartData+0x250>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	2b50      	cmp	r3, #80	; 0x50
 8000f76:	d126      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	3303      	adds	r3, #3
 8000f7c:	4a88      	ldr	r2, [pc, #544]	; (80011a0 <ProcessUartData+0x250>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	2b3a      	cmp	r3, #58	; 0x3a
 8000f82:	d120      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a85      	ldr	r2, [pc, #532]	; (80011a0 <ProcessUartData+0x250>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	2b50      	cmp	r3, #80	; 0x50
 8000f8e:	d005      	beq.n	8000f9c <ProcessUartData+0x4c>
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <ProcessUartData+0x250>)
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	2b53      	cmp	r3, #83	; 0x53
 8000f9a:	d114      	bne.n	8000fc6 <ProcessUartData+0x76>
			for(uint16_t i=0 ; i<uartCounter ; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	80bb      	strh	r3, [r7, #4]
 8000fa0:	e00a      	b.n	8000fb8 <ProcessUartData+0x68>
			{
				uartRecieveBuffer[i]=uartRecieveBuffer[counter+i];
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	497d      	ldr	r1, [pc, #500]	; (80011a0 <ProcessUartData+0x250>)
 8000fac:	5c89      	ldrb	r1, [r1, r2]
 8000fae:	4a7c      	ldr	r2, [pc, #496]	; (80011a0 <ProcessUartData+0x250>)
 8000fb0:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0 ; i<uartCounter ; i++)
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	80bb      	strh	r3, [r7, #4]
 8000fb8:	4b78      	ldr	r3, [pc, #480]	; (800119c <ProcessUartData+0x24c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	88ba      	ldrh	r2, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3ee      	bcc.n	8000fa2 <ProcessUartData+0x52>
			}
			break;
 8000fc4:	e005      	b.n	8000fd2 <ProcessUartData+0x82>
	for(counter=uartCounter;counter>0;counter--)
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1c7      	bne.n	8000f62 <ProcessUartData+0x12>
		}
	}
	if(strstr(uartRecieveBuffer,"{SP:"))
 8000fd2:	4974      	ldr	r1, [pc, #464]	; (80011a4 <ProcessUartData+0x254>)
 8000fd4:	4872      	ldr	r0, [pc, #456]	; (80011a0 <ProcessUartData+0x250>)
 8000fd6:	f00a ff62 	bl	800be9e <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <ProcessUartData+0x98>
	{
		control_mode=speed_mode;
 8000fe0:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <ProcessUartData+0x258>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e009      	b.n	8000ffc <ProcessUartData+0xac>
	}
	else if(strstr(uartRecieveBuffer,"{PP:"))
 8000fe8:	4970      	ldr	r1, [pc, #448]	; (80011ac <ProcessUartData+0x25c>)
 8000fea:	486d      	ldr	r0, [pc, #436]	; (80011a0 <ProcessUartData+0x250>)
 8000fec:	f00a ff57 	bl	800be9e <strstr>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <ProcessUartData+0xac>
	{
		control_mode=position_mode;
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <ProcessUartData+0x258>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
	}
	//parse receive data
	char* result;
	result= memchr(uartRecieveBuffer, ':', strlen(uartRecieveBuffer));
 8000ffc:	4868      	ldr	r0, [pc, #416]	; (80011a0 <ProcessUartData+0x250>)
 8000ffe:	f7ff f937 	bl	8000270 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	213a      	movs	r1, #58	; 0x3a
 8001008:	4865      	ldr	r0, [pc, #404]	; (80011a0 <ProcessUartData+0x250>)
 800100a:	f7ff f8e1 	bl	80001d0 <memchr>
 800100e:	6038      	str	r0, [r7, #0]
	Fingers_Status.Pinky.SetPoint = atof(result+1);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fb91 	bl	800a73c <atof>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <ProcessUartData+0x260>)
 8001024:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
	if(Fingers_Status.Pinky.SetPoint>100)
 8001028:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <ProcessUartData+0x260>)
 800102a:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <ProcessUartData+0x264>)
 8001034:	f7ff fd70 	bl	8000b18 <__aeabi_dcmpgt>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <ProcessUartData+0xfa>
		Fingers_Status.Pinky.SetPoint=100;
 800103e:	495c      	ldr	r1, [pc, #368]	; (80011b0 <ProcessUartData+0x260>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <ProcessUartData+0x264>)
 8001046:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 800104a:	4855      	ldr	r0, [pc, #340]	; (80011a0 <ProcessUartData+0x250>)
 800104c:	f7ff f910 	bl	8000270 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	2152      	movs	r1, #82	; 0x52
 8001056:	4852      	ldr	r0, [pc, #328]	; (80011a0 <ProcessUartData+0x250>)
 8001058:	f7ff f8ba 	bl	80001d0 <memchr>
 800105c:	6038      	str	r0, [r7, #0]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3302      	adds	r3, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f009 fb6a 	bl	800a73c <atof>
 8001068:	eeb0 7a40 	vmov.f32	s14, s0
 800106c:	eef0 7a60 	vmov.f32	s15, s1
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <ProcessUartData+0x260>)
 8001072:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
	if(Fingers_Status.Ring.SetPoint>100)
 8001076:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <ProcessUartData+0x260>)
 8001078:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <ProcessUartData+0x264>)
 8001082:	f7ff fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <ProcessUartData+0x148>
		Fingers_Status.Ring.SetPoint=100;
 800108c:	4948      	ldr	r1, [pc, #288]	; (80011b0 <ProcessUartData+0x260>)
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <ProcessUartData+0x264>)
 8001094:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <ProcessUartData+0x250>)
 800109a:	f7ff f8e9 	bl	8000270 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	214d      	movs	r1, #77	; 0x4d
 80010a4:	483e      	ldr	r0, [pc, #248]	; (80011a0 <ProcessUartData+0x250>)
 80010a6:	f7ff f893 	bl	80001d0 <memchr>
 80010aa:	6038      	str	r0, [r7, #0]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fb43 	bl	800a73c <atof>
 80010b6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ba:	eef0 7a60 	vmov.f32	s15, s1
 80010be:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <ProcessUartData+0x260>)
 80010c0:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
	if(Fingers_Status.Middle.SetPoint>100)
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <ProcessUartData+0x260>)
 80010c6:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <ProcessUartData+0x264>)
 80010d0:	f7ff fd22 	bl	8000b18 <__aeabi_dcmpgt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <ProcessUartData+0x196>
		Fingers_Status.Middle.SetPoint=100;
 80010da:	4935      	ldr	r1, [pc, #212]	; (80011b0 <ProcessUartData+0x260>)
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <ProcessUartData+0x264>)
 80010e2:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 80010e6:	482e      	ldr	r0, [pc, #184]	; (80011a0 <ProcessUartData+0x250>)
 80010e8:	f7ff f8c2 	bl	8000270 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	2149      	movs	r1, #73	; 0x49
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <ProcessUartData+0x250>)
 80010f4:	f7ff f86c 	bl	80001d0 <memchr>
 80010f8:	6038      	str	r0, [r7, #0]
	Fingers_Status.Index.SetPoint= atof(result+2);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3302      	adds	r3, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fb1c 	bl	800a73c <atof>
 8001104:	eeb0 7a40 	vmov.f32	s14, s0
 8001108:	eef0 7a60 	vmov.f32	s15, s1
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <ProcessUartData+0x260>)
 800110e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	if(Fingers_Status.Index.SetPoint>100)
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <ProcessUartData+0x260>)
 8001114:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <ProcessUartData+0x264>)
 800111e:	f7ff fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <ProcessUartData+0x1e4>
		Fingers_Status.Index.SetPoint=100;
 8001128:	4921      	ldr	r1, [pc, #132]	; (80011b0 <ProcessUartData+0x260>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <ProcessUartData+0x264>)
 8001130:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <ProcessUartData+0x250>)
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	2154      	movs	r1, #84	; 0x54
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <ProcessUartData+0x250>)
 8001142:	f7ff f845 	bl	80001d0 <memchr>
 8001146:	6038      	str	r0, [r7, #0]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3302      	adds	r3, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f009 faf5 	bl	800a73c <atof>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	eef0 7a60 	vmov.f32	s15, s1
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <ProcessUartData+0x260>)
 800115c:	ed83 7b00 	vstr	d7, [r3]
	if(Fingers_Status.Thumb.SetPoint>100)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <ProcessUartData+0x260>)
 8001162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <ProcessUartData+0x264>)
 800116c:	f7ff fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <ProcessUartData+0x232>
		Fingers_Status.Thumb.SetPoint=100;
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <ProcessUartData+0x260>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <ProcessUartData+0x264>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]
	send_data_UART=1;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <ProcessUartData+0x268>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <ProcessUartData+0x26c>)
 800118e:	f005 faa7 	bl	80066e0 <HAL_GPIO_TogglePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001f4 	.word	0x200001f4
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	0800e9e8 	.word	0x0800e9e8
 80011a8:	20000327 	.word	0x20000327
 80011ac:	0800e9f0 	.word	0x0800e9f0
 80011b0:	200006f0 	.word	0x200006f0
 80011b4:	40590000 	.word	0x40590000
 80011b8:	20000326 	.word	0x20000326
 80011bc:	48000800 	.word	0x48000800

080011c0 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_UART_RxCpltCallback+0x80>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d132      	bne.n	8001238 <HAL_UART_RxCpltCallback+0x78>
		uartRecieveBuffer[uartCounter]=RXuart;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_RxCpltCallback+0x88>)
 80011da:	7819      	ldrb	r1, [r3, #0]
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011de:	5499      	strb	r1, [r3, r2]
		if(uartCounter>1)
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d91c      	bls.n	8001222 <HAL_UART_RxCpltCallback+0x62>
		{
			if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d115      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	2b0d      	cmp	r3, #13
 8001202:	d10e      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b02      	subs	r3, #2
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	2b7d      	cmp	r3, #125	; 0x7d
 8001210:	d107      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
				ProcessUartData();
 8001212:	f7ff fe9d 	bl	8000f50 <ProcessUartData>
				ManualControl=1;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_UART_RxCpltCallback+0x90>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
				uartCounter=-1;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	701a      	strb	r2, [r3, #0]

//				for(uint16_t cleanCounter=0;cleanCounter<500;cleanCounter++)
//					uartRecieveBuffer[cleanCounter]=0;
			}
		}
		uartCounter++;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 800122c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 800122e:	2201      	movs	r2, #1
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <HAL_UART_RxCpltCallback+0x88>)
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 8001234:	f007 ff9c 	bl	8009170 <HAL_UART_Receive_IT>
	}
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40004c00 	.word	0x40004c00
 8001244:	200001f4 	.word	0x200001f4
 8001248:	20000324 	.word	0x20000324
 800124c:	200001f8 	.word	0x200001f8
 8001250:	20000a00 	.word	0x20000a00
 8001254:	20000664 	.word	0x20000664

08001258 <HAL_UART_TxCpltCallback>:
/*
 * Function2--------------------------
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_UART_TxCpltCallback+0x24>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d102      	bne.n	8001270 <HAL_UART_TxCpltCallback+0x18>
	{
		TX_State=idel;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_UART_TxCpltCallback+0x28>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
	}
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40013800 	.word	0x40013800
 8001280:	20000325 	.word	0x20000325

08001284 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <MX_ADC1_Init+0x158>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80012ac:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012c8:	2204      	movs	r2, #4
 80012ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012da:	2205      	movs	r2, #5
 80012dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001308:	4833      	ldr	r0, [pc, #204]	; (80013d8 <MX_ADC1_Init+0x154>)
 800130a:	f003 fb7f 	bl	8004a0c <HAL_ADC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001314:	f001 f96e 	bl	80025f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001324:	f004 face 	bl	80058c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800132e:	f001 f961 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_ADC1_Init+0x15c>)
 8001334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001336:	2306      	movs	r3, #6
 8001338:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800133a:	2307      	movs	r3, #7
 800133c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800133e:	237f      	movs	r3, #127	; 0x7f
 8001340:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001342:	2304      	movs	r3, #4
 8001344:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001350:	f003 fd86 	bl	8004e60 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800135a:	f001 f94b 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_ADC1_Init+0x160>)
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001362:	230c      	movs	r3, #12
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <MX_ADC1_Init+0x154>)
 800136c:	f003 fd78 	bl	8004e60 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001376:	f001 f93d 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_ADC1_Init+0x164>)
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800137e:	2312      	movs	r3, #18
 8001380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001388:	f003 fd6a 	bl	8004e60 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001392:	f001 f92f 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_ADC1_Init+0x168>)
 8001398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800139a:	2318      	movs	r3, #24
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_ADC1_Init+0x154>)
 80013a4:	f003 fd5c 	bl	8004e60 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80013ae:	f001 f921 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC1_Init+0x16c>)
 80013b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_ADC1_Init+0x154>)
 80013c2:	f003 fd4d 	bl	8004e60 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80013cc:	f001 f912 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000328 	.word	0x20000328
 80013dc:	50040000 	.word	0x50040000
 80013e0:	2a000400 	.word	0x2a000400
 80013e4:	25b00200 	.word	0x25b00200
 80013e8:	1d500080 	.word	0x1d500080
 80013ec:	0c900008 	.word	0x0c900008
 80013f0:	10c00010 	.word	0x10c00010

080013f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <MX_ADC2_Init+0x14c>)
 800140c:	4a4d      	ldr	r2, [pc, #308]	; (8001544 <MX_ADC2_Init+0x150>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001416:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <MX_ADC2_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001426:	2201      	movs	r2, #1
 8001428:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <MX_ADC2_Init+0x14c>)
 800142c:	2204      	movs	r2, #4
 800142e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001432:	2200      	movs	r2, #0
 8001434:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001438:	2201      	movs	r2, #1
 800143a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 6;
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <MX_ADC2_Init+0x14c>)
 800143e:	2206      	movs	r2, #6
 8001440:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_ADC2_Init+0x14c>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800146c:	4834      	ldr	r0, [pc, #208]	; (8001540 <MX_ADC2_Init+0x14c>)
 800146e:	f003 facd 	bl	8004a0c <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001478:	f001 f8bc 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <MX_ADC2_Init+0x154>)
 800147e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2306      	movs	r3, #6
 8001482:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001484:	2307      	movs	r3, #7
 8001486:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001488:	237f      	movs	r3, #127	; 0x7f
 800148a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148c:	2304      	movs	r3, #4
 800148e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <MX_ADC2_Init+0x14c>)
 800149a:	f003 fce1 	bl	8004e60 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80014a4:	f001 f8a6 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_ADC2_Init+0x158>)
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ac:	230c      	movs	r3, #12
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014b6:	f003 fcd3 	bl	8004e60 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80014c0:	f001 f898 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_ADC2_Init+0x15c>)
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014c8:	2312      	movs	r3, #18
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014d2:	f003 fcc5 	bl	8004e60 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 80014dc:	f001 f88a 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_ADC2_Init+0x160>)
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014e4:	2318      	movs	r3, #24
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014ee:	f003 fcb7 	bl	8004e60 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC2_Init+0x108>
  {
    Error_Handler();
 80014f8:	f001 f87c 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_ADC2_Init+0x164>)
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_ADC2_Init+0x14c>)
 800150c:	f003 fca8 	bl	8004e60 <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8001516:	f001 f86d 	bl	80025f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_ADC2_Init+0x168>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800151e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_ADC2_Init+0x14c>)
 800152a:	f003 fc99 	bl	8004e60 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC2_Init+0x144>
  {
    Error_Handler();
 8001534:	f001 f85e 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000038c 	.word	0x2000038c
 8001544:	50040100 	.word	0x50040100
 8001548:	04300002 	.word	0x04300002
 800154c:	08600004 	.word	0x08600004
 8001550:	19200040 	.word	0x19200040
 8001554:	21800100 	.word	0x21800100
 8001558:	2e300800 	.word	0x2e300800
 800155c:	32601000 	.word	0x32601000

08001560 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a61      	ldr	r2, [pc, #388]	; (8001704 <HAL_ADC_MspInit+0x1a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d146      	bne.n	8001610 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800158a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10b      	bne.n	80015ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001594:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800159a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b4e      	ldr	r3, [pc, #312]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 80015dc:	230c      	movs	r3, #12
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e0:	230b      	movs	r3, #11
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4848      	ldr	r0, [pc, #288]	; (8001710 <HAL_ADC_MspInit+0x1b0>)
 80015f0:	f004 fe9c 	bl	800632c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 80015f4:	2334      	movs	r3, #52	; 0x34
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f8:	230b      	movs	r3, #11
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f004 fe8f 	bl	800632c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800160e:	e075      	b.n	80016fc <HAL_ADC_MspInit+0x19c>
  else if(adcHandle->Instance==ADC2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_ADC_MspInit+0x1b4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d170      	bne.n	80016fc <HAL_ADC_MspInit+0x19c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001622:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a36      	ldr	r2, [pc, #216]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 8001674:	2303      	movs	r3, #3
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001678:	230b      	movs	r3, #11
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <HAL_ADC_MspInit+0x1b0>)
 8001688:	f004 fe50 	bl	800632c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 800168c:	23ca      	movs	r3, #202	; 0xca
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001690:	230b      	movs	r3, #11
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f004 fe43 	bl	800632c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_ADC_MspInit+0x1bc>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016d6:	2220      	movs	r2, #32
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016e2:	f004 fbad 	bl	8005e40 <HAL_DMA_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_ADC_MspInit+0x190>
      Error_Handler();
 80016ec:	f000 ff82 	bl	80025f4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	50040000 	.word	0x50040000
 8001708:	20000438 	.word	0x20000438
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800
 8001714:	50040100 	.word	0x50040100
 8001718:	200003f0 	.word	0x200003f0
 800171c:	4002001c 	.word	0x4002001c

08001720 <ADC_ReadCurrent_Pinky>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Pinky()
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	af00      	add	r7, sp, #0
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*ADCData[Pinky]))/1.01;
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 8001726:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fefa 	bl	8000524 <__aeabi_i2d>
 8001730:	4604      	mov	r4, r0
 8001732:	460d      	mov	r5, r1
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <ADC_ReadCurrent_Pinky+0xb4>)
 8001736:	891b      	ldrh	r3, [r3, #8]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fef2 	bl	8000524 <__aeabi_i2d>
 8001740:	a31f      	add	r3, pc, #124	; (adr r3, 80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff57 	bl	80005f8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fd9b 	bl	800028c <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	a31a      	add	r3, pc, #104	; (adr r3, 80017c8 <ADC_ReadCurrent_Pinky+0xa8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f872 	bl	800084c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 800177a:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	Current_motor[1]=Fingers_Status.Pinky.Current;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 8001780:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8001784:	461a      	mov	r2, r3
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <ADC_ReadCurrent_Pinky+0xb8>)
 8001788:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>Max_Current_Close_Pinky || Fingers_Status.Pinky.Current<Min_Current_Open_Pinky)
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 800178c:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8001790:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001794:	d805      	bhi.n	80017a2 <ADC_ReadCurrent_Pinky+0x82>
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 8001798:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800179c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80017a0:	d204      	bcs.n	80017ac <ADC_ReadCurrent_Pinky+0x8c>
		Fingers_Status.Pinky.Stuck_Finger=1;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 80017aa:	e004      	b.n	80017b6 <ADC_ReadCurrent_Pinky+0x96>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <ADC_ReadCurrent_Pinky+0xb0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	3f847ae1 	.word	0x3f847ae1
 80017c8:	c28f5c29 	.word	0xc28f5c29
 80017cc:	3ff028f5 	.word	0x3ff028f5
 80017d0:	200006f0 	.word	0x200006f0
 80017d4:	20000a04 	.word	0x20000a04
 80017d8:	200009e8 	.word	0x200009e8
 80017dc:	00000000 	.word	0x00000000

080017e0 <ADC_ReadCurrent_Ring>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Ring()
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*ADCData[Ring]))/1.01;
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 80017e6:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe9a 	bl	8000524 <__aeabi_i2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <ADC_ReadCurrent_Ring+0xac>)
 80017f6:	88db      	ldrh	r3, [r3, #6]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe92 	bl	8000524 <__aeabi_i2d>
 8001800:	a31d      	add	r3, pc, #116	; (adr r3, 8001878 <ADC_ReadCurrent_Ring+0x98>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fef7 	bl	80005f8 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd3b 	bl	800028c <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	a318      	add	r3, pc, #96	; (adr r3, 8001880 <ADC_ReadCurrent_Ring+0xa0>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7ff f812 	bl	800084c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f9ba 	bl	8000ba8 <__aeabi_d2uiz>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 800183a:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
	if(Fingers_Status.Ring.Current>Max_Current_Close_Ring || Fingers_Status.Ring.Current<Min_Current_Open_Ring)
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 8001840:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8001844:	f240 729e 	movw	r2, #1950	; 0x79e
 8001848:	4293      	cmp	r3, r2
 800184a:	d806      	bhi.n	800185a <ADC_ReadCurrent_Ring+0x7a>
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 800184e:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8001852:	f240 620d 	movw	r2, #1549	; 0x60d
 8001856:	4293      	cmp	r3, r2
 8001858:	d804      	bhi.n	8001864 <ADC_ReadCurrent_Ring+0x84>
		Fingers_Status.Ring.Stuck_Finger=1;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 800185c:	2201      	movs	r2, #1
 800185e:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8001862:	e004      	b.n	800186e <ADC_ReadCurrent_Ring+0x8e>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <ADC_ReadCurrent_Ring+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	47ae147b 	.word	0x47ae147b
 800187c:	3f847ae1 	.word	0x3f847ae1
 8001880:	c28f5c29 	.word	0xc28f5c29
 8001884:	3ff028f5 	.word	0x3ff028f5
 8001888:	200006f0 	.word	0x200006f0
 800188c:	20000a04 	.word	0x20000a04

08001890 <ADC_ReadCurrent_Middle>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Middle()
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	af00      	add	r7, sp, #0
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*ADCData[Middle]))/1.01;
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 8001896:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe42 	bl	8000524 <__aeabi_i2d>
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <ADC_ReadCurrent_Middle+0xa4>)
 80018a6:	889b      	ldrh	r3, [r3, #4]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe3a 	bl	8000524 <__aeabi_i2d>
 80018b0:	a31b      	add	r3, pc, #108	; (adr r3, 8001920 <ADC_ReadCurrent_Middle+0x90>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fce3 	bl	800028c <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	a316      	add	r3, pc, #88	; (adr r3, 8001928 <ADC_ReadCurrent_Middle+0x98>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f962 	bl	8000ba8 <__aeabi_d2uiz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 80018ea:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	if(Fingers_Status.Middle.Current>Max_Current_Close_Middle || Fingers_Status.Middle.Current<Min_Current_Open_Middle)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 80018f0:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80018f4:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d805      	bhi.n	8001908 <ADC_ReadCurrent_Middle+0x78>
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 80018fe:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8001902:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001906:	d204      	bcs.n	8001912 <ADC_ReadCurrent_Middle+0x82>
		Fingers_Status.Middle.Stuck_Finger=1;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8001910:	e004      	b.n	800191c <ADC_ReadCurrent_Middle+0x8c>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <ADC_ReadCurrent_Middle+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	bdb0      	pop	{r4, r5, r7, pc}
 8001920:	47ae147b 	.word	0x47ae147b
 8001924:	3f847ae1 	.word	0x3f847ae1
 8001928:	c28f5c29 	.word	0xc28f5c29
 800192c:	3ff028f5 	.word	0x3ff028f5
 8001930:	200006f0 	.word	0x200006f0
 8001934:	20000a04 	.word	0x20000a04

08001938 <ADC_ReadCurrent_Index>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Index()
{
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	af00      	add	r7, sp, #0
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*ADCData[Index]))/1.01;
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 800193e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <ADC_ReadCurrent_Index+0xac>)
 800194e:	885b      	ldrh	r3, [r3, #2]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fde6 	bl	8000524 <__aeabi_i2d>
 8001958:	a31d      	add	r3, pc, #116	; (adr r3, 80019d0 <ADC_ReadCurrent_Index+0x98>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fc8f 	bl	800028c <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	a318      	add	r3, pc, #96	; (adr r3, 80019d8 <ADC_ReadCurrent_Index+0xa0>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe ff66 	bl	800084c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f90e 	bl	8000ba8 <__aeabi_d2uiz>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 8001992:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	if(Fingers_Status.Index.Current>Max_Current_Close_Index || Fingers_Status.Index.Current<Min_Current_Open_Index)
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 8001998:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800199c:	f240 729e 	movw	r2, #1950	; 0x79e
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d806      	bhi.n	80019b2 <ADC_ReadCurrent_Index+0x7a>
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 80019a6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80019aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d804      	bhi.n	80019bc <ADC_ReadCurrent_Index+0x84>
		Fingers_Status.Index.Stuck_Finger=1;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80019ba:	e004      	b.n	80019c6 <ADC_ReadCurrent_Index+0x8e>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <ADC_ReadCurrent_Index+0xa8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	47ae147b 	.word	0x47ae147b
 80019d4:	3f847ae1 	.word	0x3f847ae1
 80019d8:	c28f5c29 	.word	0xc28f5c29
 80019dc:	3ff028f5 	.word	0x3ff028f5
 80019e0:	200006f0 	.word	0x200006f0
 80019e4:	20000a04 	.word	0x20000a04

080019e8 <ADC_ReadCurrent_Thumb>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Thumb()
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*ADCData[Thumb]))/1.01;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 80019ee:	8c1b      	ldrh	r3, [r3, #32]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd97 	bl	8000524 <__aeabi_i2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <ADC_ReadCurrent_Thumb+0x94>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd8f 	bl	8000524 <__aeabi_i2d>
 8001a06:	a318      	add	r3, pc, #96	; (adr r3, 8001a68 <ADC_ReadCurrent_Thumb+0x80>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fdf4 	bl	80005f8 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fc38 	bl	800028c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	a312      	add	r3, pc, #72	; (adr r3, 8001a70 <ADC_ReadCurrent_Thumb+0x88>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe ff0f 	bl	800084c <__aeabi_ddiv>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f8b7 	bl	8000ba8 <__aeabi_d2uiz>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 8001a40:	841a      	strh	r2, [r3, #32]
	if(Fingers_Status.Thumb.Current>Max_Current_Close_Thumb || Fingers_Status.Thumb.Current<Min_Current_Open_Thumb)
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 8001a44:	8c1b      	ldrh	r3, [r3, #32]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d803      	bhi.n	8001a52 <ADC_ReadCurrent_Thumb+0x6a>
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 8001a4c:	8c1b      	ldrh	r3, [r3, #32]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <ADC_ReadCurrent_Thumb+0x72>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	75da      	strb	r2, [r3, #23]
 8001a58:	e003      	b.n	8001a62 <ADC_ReadCurrent_Thumb+0x7a>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <ADC_ReadCurrent_Thumb+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	75da      	strb	r2, [r3, #23]
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	47ae147b 	.word	0x47ae147b
 8001a6c:	3f847ae1 	.word	0x3f847ae1
 8001a70:	c28f5c29 	.word	0xc28f5c29
 8001a74:	3ff028f5 	.word	0x3ff028f5
 8001a78:	200006f0 	.word	0x200006f0
 8001a7c:	20000a04 	.word	0x20000a04

08001a80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <MX_CAN1_Init+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001aa2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ad0:	f003 ffa8 	bl	8005a24 <HAL_CAN_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001ada:	f000 fd8b 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000043c 	.word	0x2000043c
 8001ae8:	40006400 	.word	0x40006400

08001aec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_CAN_MspInit+0x80>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d129      	bne.n	8001b62 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_CAN_MspInit+0x84>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b50:	2309      	movs	r3, #9
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f004 fbe5 	bl	800632c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40006400 	.word	0x40006400
 8001b70:	40021000 	.word	0x40021000

08001b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_DMA_Init+0x38>)
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <MX_DMA_Init+0x38>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6493      	str	r3, [r2, #72]	; 0x48
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_DMA_Init+0x38>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	200c      	movs	r0, #12
 8001b98:	f004 f91b 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b9c:	200c      	movs	r0, #12
 8001b9e:	f004 f934 	bl	8005e0a <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4a50      	ldr	r2, [pc, #320]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bea:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a3e      	ldr	r2, [pc, #248]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <MX_GPIO_Init+0x15c>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c2c:	4838      	ldr	r0, [pc, #224]	; (8001d10 <MX_GPIO_Init+0x160>)
 8001c2e:	f004 fd3f 	bl	80066b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001c32:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4831      	ldr	r0, [pc, #196]	; (8001d10 <MX_GPIO_Init+0x160>)
 8001c4c:	f004 fb6e 	bl	800632c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001c50:	2330      	movs	r3, #48	; 0x30
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c54:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	482a      	ldr	r0, [pc, #168]	; (8001d10 <MX_GPIO_Init+0x160>)
 8001c66:	f004 fb61 	bl	800632c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001c6a:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001c6e:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c70:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4824      	ldr	r0, [pc, #144]	; (8001d14 <MX_GPIO_Init+0x164>)
 8001c82:	f004 fb53 	bl	800632c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c8c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f004 fb44 	bl	800632c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2006      	movs	r0, #6
 8001caa:	f004 f892 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cae:	2006      	movs	r0, #6
 8001cb0:	f004 f8ab 	bl	8005e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2007      	movs	r0, #7
 8001cba:	f004 f88a 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cbe:	2007      	movs	r0, #7
 8001cc0:	f004 f8a3 	bl	8005e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2008      	movs	r0, #8
 8001cca:	f004 f882 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cce:	2008      	movs	r0, #8
 8001cd0:	f004 f89b 	bl	8005e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f004 f87a 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f004 f893 	bl	8005e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2017      	movs	r0, #23
 8001cea:	f004 f872 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cee:	2017      	movs	r0, #23
 8001cf0:	f004 f88b 	bl	8005e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2028      	movs	r0, #40	; 0x28
 8001cfa:	f004 f86a 	bl	8005dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cfe:	2028      	movs	r0, #40	; 0x28
 8001d00:	f004 f883 	bl	8005e0a <HAL_NVIC_EnableIRQ>

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000800 	.word	0x48000800
 8001d14:	48000400 	.word	0x48000400

08001d18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d28:	f000 811b 	beq.w	8001f62 <HAL_GPIO_EXTI_Callback+0x24a>
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	f300 8282 	bgt.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d38:	f000 80d9 	beq.w	8001eee <HAL_GPIO_EXTI_Callback+0x1d6>
 8001d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d40:	f300 827a 	bgt.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d48:	d05d      	beq.n	8001e06 <HAL_GPIO_EXTI_Callback+0xee>
 8001d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4e:	f300 8273 	bgt.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d56:	f000 8090 	beq.w	8001e7a <HAL_GPIO_EXTI_Callback+0x162>
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	f300 826b 	bgt.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	dc4a      	bgt.n	8001dfc <HAL_GPIO_EXTI_Callback+0xe4>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f340 8266 	ble.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	2b1f      	cmp	r3, #31
 8001d70:	f200 8262 	bhi.w	8002238 <HAL_GPIO_EXTI_Callback+0x520>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_GPIO_EXTI_Callback+0x64>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	080020c5 	.word	0x080020c5
 8001d80:	08002139 	.word	0x08002139
 8001d84:	08002239 	.word	0x08002239
 8001d88:	080021ad 	.word	0x080021ad
 8001d8c:	08002239 	.word	0x08002239
 8001d90:	08002239 	.word	0x08002239
 8001d94:	08002239 	.word	0x08002239
 8001d98:	08002239 	.word	0x08002239
 8001d9c:	08002239 	.word	0x08002239
 8001da0:	08002239 	.word	0x08002239
 8001da4:	08002239 	.word	0x08002239
 8001da8:	08002239 	.word	0x08002239
 8001dac:	08002239 	.word	0x08002239
 8001db0:	08002239 	.word	0x08002239
 8001db4:	08002239 	.word	0x08002239
 8001db8:	0800204b 	.word	0x0800204b
 8001dbc:	08002239 	.word	0x08002239
 8001dc0:	08002239 	.word	0x08002239
 8001dc4:	08002239 	.word	0x08002239
 8001dc8:	08002239 	.word	0x08002239
 8001dcc:	08002239 	.word	0x08002239
 8001dd0:	08002239 	.word	0x08002239
 8001dd4:	08002239 	.word	0x08002239
 8001dd8:	08002239 	.word	0x08002239
 8001ddc:	08002239 	.word	0x08002239
 8001de0:	08002239 	.word	0x08002239
 8001de4:	08002239 	.word	0x08002239
 8001de8:	08002239 	.word	0x08002239
 8001dec:	08002239 	.word	0x08002239
 8001df0:	08002239 	.word	0x08002239
 8001df4:	08002239 	.word	0x08002239
 8001df8:	08001fd7 	.word	0x08001fd7
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	f000 81f7 	beq.w	80021f2 <HAL_GPIO_EXTI_Callback+0x4da>
				default:
					break;
			}
			break;
		default:
			break;
 8001e04:	e218      	b.n	8002238 <HAL_GPIO_EXTI_Callback+0x520>
			switch (Fingers_Status.Pinky.Direction_Encoder) {
 8001e06:	4bad      	ldr	r3, [pc, #692]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e08:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_EXTI_Callback+0xfe>
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d015      	beq.n	8001e40 <HAL_GPIO_EXTI_Callback+0x128>
					break;
 8001e14:	e030      	b.n	8001e78 <HAL_GPIO_EXTI_Callback+0x160>
					Fingers_Status.Pinky.Encoder++;
 8001e16:	4ba9      	ldr	r3, [pc, #676]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e18:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4ba6      	ldr	r3, [pc, #664]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e22:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e28:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e2c:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d91e      	bls.n	8001e72 <HAL_GPIO_EXTI_Callback+0x15a>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001e34:	4ba1      	ldr	r3, [pc, #644]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e36:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e3a:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001e3e:	e018      	b.n	8001e72 <HAL_GPIO_EXTI_Callback+0x15a>
					Fingers_Status.Pinky.Encoder--;
 8001e40:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e42:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b9c      	ldr	r3, [pc, #624]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e4c:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<200)
 8001e50:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e52:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e56:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d804      	bhi.n	8001e68 <HAL_GPIO_EXTI_Callback+0x150>
 8001e5e:	4b97      	ldr	r3, [pc, #604]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e60:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e64:	2bc7      	cmp	r3, #199	; 0xc7
 8001e66:	d806      	bhi.n	8001e76 <HAL_GPIO_EXTI_Callback+0x15e>
						Fingers_Status.Pinky.Encoder=0;
 8001e68:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_EXTI_Callback+0x15e>
					break;
 8001e72:	bf00      	nop
 8001e74:	e1e1      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001e76:	bf00      	nop
			break;
 8001e78:	e1df      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Pinky.Direction_Encoder) {
 8001e7a:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e7c:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d002      	beq.n	8001e8a <HAL_GPIO_EXTI_Callback+0x172>
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d015      	beq.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x19c>
					break;
 8001e88:	e030      	b.n	8001eec <HAL_GPIO_EXTI_Callback+0x1d4>
					Fingers_Status.Pinky.Encoder++;
 8001e8a:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e8c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e90:	3301      	adds	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e96:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001e9a:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e9c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001ea0:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d91e      	bls.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x1ce>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001eaa:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001eae:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001eb2:	e018      	b.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x1ce>
					Fingers_Status.Pinky.Encoder--;
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001eb6:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ec0:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<200)
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ec6:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001eca:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d804      	bhi.n	8001edc <HAL_GPIO_EXTI_Callback+0x1c4>
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ed4:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001ed8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eda:	d806      	bhi.n	8001eea <HAL_GPIO_EXTI_Callback+0x1d2>
						Fingers_Status.Pinky.Encoder=0;
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_EXTI_Callback+0x1d2>
					break;
 8001ee6:	bf00      	nop
 8001ee8:	e1a7      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001eea:	bf00      	nop
			break;
 8001eec:	e1a5      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Ring.Direction_Encoder) {
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ef0:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d002      	beq.n	8001efe <HAL_GPIO_EXTI_Callback+0x1e6>
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d015      	beq.n	8001f28 <HAL_GPIO_EXTI_Callback+0x210>
					break;
 8001efc:	e030      	b.n	8001f60 <HAL_GPIO_EXTI_Callback+0x248>
					Fingers_Status.Ring.Encoder++;
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f00:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f04:	3301      	adds	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f0a:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f10:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f14:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d91e      	bls.n	8001f5a <HAL_GPIO_EXTI_Callback+0x242>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f1e:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f22:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f26:	e018      	b.n	8001f5a <HAL_GPIO_EXTI_Callback+0x242>
					Fingers_Status.Ring.Encoder--;
 8001f28:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f2a:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f34:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<200)
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f3a:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f3e:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d804      	bhi.n	8001f50 <HAL_GPIO_EXTI_Callback+0x238>
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f48:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f4c:	2bc7      	cmp	r3, #199	; 0xc7
 8001f4e:	d806      	bhi.n	8001f5e <HAL_GPIO_EXTI_Callback+0x246>
						Fingers_Status.Ring.Encoder=0;
 8001f50:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_EXTI_Callback+0x246>
					break;
 8001f5a:	bf00      	nop
 8001f5c:	e16d      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001f5e:	bf00      	nop
			break;
 8001f60:	e16b      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Ring.Direction_Encoder) {
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f64:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_EXTI_Callback+0x25a>
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d015      	beq.n	8001f9c <HAL_GPIO_EXTI_Callback+0x284>
					break;
 8001f70:	e030      	b.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x2bc>
					Fingers_Status.Ring.Encoder++;
 8001f72:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f74:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f7e:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001f82:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f84:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f88:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d91e      	bls.n	8001fce <HAL_GPIO_EXTI_Callback+0x2b6>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f92:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f96:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f9a:	e018      	b.n	8001fce <HAL_GPIO_EXTI_Callback+0x2b6>
					Fingers_Status.Ring.Encoder--;
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f9e:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fa8:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<200)
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fae:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001fb2:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d804      	bhi.n	8001fc4 <HAL_GPIO_EXTI_Callback+0x2ac>
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fbc:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001fc0:	2bc7      	cmp	r3, #199	; 0xc7
 8001fc2:	d806      	bhi.n	8001fd2 <HAL_GPIO_EXTI_Callback+0x2ba>
						Fingers_Status.Ring.Encoder=0;
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_EXTI_Callback+0x2ba>
					break;
 8001fce:	bf00      	nop
 8001fd0:	e133      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001fd2:	bf00      	nop
			break;
 8001fd4:	e131      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Middle.Direction_Encoder) {
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fd8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_EXTI_Callback+0x2ce>
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d015      	beq.n	8002010 <HAL_GPIO_EXTI_Callback+0x2f8>
					break;
 8001fe4:	e030      	b.n	8002048 <HAL_GPIO_EXTI_Callback+0x330>
					Fingers_Status.Middle.Encoder++;
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fe8:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ff2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ff8:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8001ffc:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8002000:	4293      	cmp	r3, r2
 8002002:	d91e      	bls.n	8002042 <HAL_GPIO_EXTI_Callback+0x32a>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002006:	f246 42c8 	movw	r2, #25800	; 0x64c8
 800200a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 800200e:	e018      	b.n	8002042 <HAL_GPIO_EXTI_Callback+0x32a>
					Fingers_Status.Middle.Encoder--;
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002012:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800201c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<200)
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002022:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002026:	f64f 7278 	movw	r2, #65400	; 0xff78
 800202a:	4293      	cmp	r3, r2
 800202c:	d804      	bhi.n	8002038 <HAL_GPIO_EXTI_Callback+0x320>
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002030:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002034:	2bc7      	cmp	r3, #199	; 0xc7
 8002036:	d806      	bhi.n	8002046 <HAL_GPIO_EXTI_Callback+0x32e>
					Fingers_Status.Middle.Encoder=0;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800203a:	2200      	movs	r2, #0
 800203c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 8002040:	e001      	b.n	8002046 <HAL_GPIO_EXTI_Callback+0x32e>
					break;
 8002042:	bf00      	nop
 8002044:	e0f9      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8002046:	bf00      	nop
			break;
 8002048:	e0f7      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Middle.Direction_Encoder) {
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800204c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8002050:	2b01      	cmp	r3, #1
 8002052:	d002      	beq.n	800205a <HAL_GPIO_EXTI_Callback+0x342>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d015      	beq.n	8002084 <HAL_GPIO_EXTI_Callback+0x36c>
					break;
 8002058:	e033      	b.n	80020c2 <HAL_GPIO_EXTI_Callback+0x3aa>
					Fingers_Status.Middle.Encoder++;
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800205c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002060:	3301      	adds	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002066:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800206c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002070:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8002074:	4293      	cmp	r3, r2
 8002076:	d91e      	bls.n	80020b6 <HAL_GPIO_EXTI_Callback+0x39e>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 800207a:	f246 42c8 	movw	r2, #25800	; 0x64c8
 800207e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 8002082:	e018      	b.n	80020b6 <HAL_GPIO_EXTI_Callback+0x39e>
					Fingers_Status.Middle.Encoder--;
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002086:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002090:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<200)
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002096:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800209a:	f64f 7278 	movw	r2, #65400	; 0xff78
 800209e:	4293      	cmp	r3, r2
 80020a0:	d804      	bhi.n	80020ac <HAL_GPIO_EXTI_Callback+0x394>
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 80020a4:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80020a8:	2bc7      	cmp	r3, #199	; 0xc7
 80020aa:	d809      	bhi.n	80020c0 <HAL_GPIO_EXTI_Callback+0x3a8>
					Fingers_Status.Middle.Encoder=0;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GPIO_EXTI_Callback+0x3a4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_EXTI_Callback+0x3a8>
					break;
 80020b6:	bf00      	nop
 80020b8:	e0bf      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
 80020ba:	bf00      	nop
 80020bc:	200006f0 	.word	0x200006f0
					break;
 80020c0:	bf00      	nop
			break;
 80020c2:	e0ba      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Index.Direction_Encoder) {
 80020c4:	4b60      	ldr	r3, [pc, #384]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80020c6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d002      	beq.n	80020d4 <HAL_GPIO_EXTI_Callback+0x3bc>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d015      	beq.n	80020fe <HAL_GPIO_EXTI_Callback+0x3e6>
					break;
 80020d2:	e030      	b.n	8002136 <HAL_GPIO_EXTI_Callback+0x41e>
					Fingers_Status.Index.Encoder++;
 80020d4:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80020d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020da:	3301      	adds	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80020e0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80020e6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020ea:	f246 7284 	movw	r2, #26500	; 0x6784
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d91e      	bls.n	8002130 <HAL_GPIO_EXTI_Callback+0x418>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 80020f2:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80020f4:	f246 7284 	movw	r2, #26500	; 0x6784
 80020f8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 80020fc:	e018      	b.n	8002130 <HAL_GPIO_EXTI_Callback+0x418>
					Fingers_Status.Index.Encoder--;
 80020fe:	4b52      	ldr	r3, [pc, #328]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002100:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800210a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<200)
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002110:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002114:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002118:	4293      	cmp	r3, r2
 800211a:	d804      	bhi.n	8002126 <HAL_GPIO_EXTI_Callback+0x40e>
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800211e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002122:	2bc7      	cmp	r3, #199	; 0xc7
 8002124:	d806      	bhi.n	8002134 <HAL_GPIO_EXTI_Callback+0x41c>
					Fingers_Status.Index.Encoder=0;
 8002126:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002128:	2200      	movs	r2, #0
 800212a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 800212e:	e001      	b.n	8002134 <HAL_GPIO_EXTI_Callback+0x41c>
					break;
 8002130:	bf00      	nop
 8002132:	e082      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8002134:	bf00      	nop
			break;
 8002136:	e080      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Index.Direction_Encoder) {
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800213a:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800213e:	2b01      	cmp	r3, #1
 8002140:	d002      	beq.n	8002148 <HAL_GPIO_EXTI_Callback+0x430>
 8002142:	2b02      	cmp	r3, #2
 8002144:	d015      	beq.n	8002172 <HAL_GPIO_EXTI_Callback+0x45a>
					break;
 8002146:	e030      	b.n	80021aa <HAL_GPIO_EXTI_Callback+0x492>
					Fingers_Status.Index.Encoder++;
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800214a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800214e:	3301      	adds	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002154:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800215a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800215e:	f246 7284 	movw	r2, #26500	; 0x6784
 8002162:	4293      	cmp	r3, r2
 8002164:	d91e      	bls.n	80021a4 <HAL_GPIO_EXTI_Callback+0x48c>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002168:	f246 7284 	movw	r2, #26500	; 0x6784
 800216c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 8002170:	e018      	b.n	80021a4 <HAL_GPIO_EXTI_Callback+0x48c>
					Fingers_Status.Index.Encoder--;
 8002172:	4b35      	ldr	r3, [pc, #212]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002174:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800217e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<200)
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002184:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002188:	f64f 7278 	movw	r2, #65400	; 0xff78
 800218c:	4293      	cmp	r3, r2
 800218e:	d804      	bhi.n	800219a <HAL_GPIO_EXTI_Callback+0x482>
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002192:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002196:	2bc7      	cmp	r3, #199	; 0xc7
 8002198:	d806      	bhi.n	80021a8 <HAL_GPIO_EXTI_Callback+0x490>
					Fingers_Status.Index.Encoder=0;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800219c:	2200      	movs	r2, #0
 800219e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 80021a2:	e001      	b.n	80021a8 <HAL_GPIO_EXTI_Callback+0x490>
					break;
 80021a4:	bf00      	nop
 80021a6:	e048      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 80021a8:	bf00      	nop
			break;
 80021aa:	e046      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Thumb.Direction_Encoder) {
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021ae:	7cdb      	ldrb	r3, [r3, #19]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_EXTI_Callback+0x4a2>
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_EXTI_Callback+0x4b0>
					break;
 80021b8:	e01a      	b.n	80021f0 <HAL_GPIO_EXTI_Callback+0x4d8>
					Fingers_Status.Thumb.Encoder++;
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021bc:	8a1b      	ldrh	r3, [r3, #16]
 80021be:	3301      	adds	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021c4:	821a      	strh	r2, [r3, #16]
					break;
 80021c6:	e013      	b.n	80021f0 <HAL_GPIO_EXTI_Callback+0x4d8>
					Fingers_Status.Thumb.Encoder--;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021ca:	8a1b      	ldrh	r3, [r3, #16]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021d2:	821a      	strh	r2, [r3, #16]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<200)
 80021d4:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021d6:	8a1b      	ldrh	r3, [r3, #16]
 80021d8:	f64f 7278 	movw	r2, #65400	; 0xff78
 80021dc:	4293      	cmp	r3, r2
 80021de:	d803      	bhi.n	80021e8 <HAL_GPIO_EXTI_Callback+0x4d0>
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021e2:	8a1b      	ldrh	r3, [r3, #16]
 80021e4:	2bc7      	cmp	r3, #199	; 0xc7
 80021e6:	d802      	bhi.n	80021ee <HAL_GPIO_EXTI_Callback+0x4d6>
					Fingers_Status.Thumb.Encoder=0;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	821a      	strh	r2, [r3, #16]
					break;
 80021ee:	bf00      	nop
			break;
 80021f0:	e023      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Thumb.Direction_Encoder) {
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 80021f4:	7cdb      	ldrb	r3, [r3, #19]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d002      	beq.n	8002200 <HAL_GPIO_EXTI_Callback+0x4e8>
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_EXTI_Callback+0x4f6>
					break;
 80021fe:	e01a      	b.n	8002236 <HAL_GPIO_EXTI_Callback+0x51e>
					Fingers_Status.Thumb.Encoder++;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002202:	8a1b      	ldrh	r3, [r3, #16]
 8002204:	3301      	adds	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800220a:	821a      	strh	r2, [r3, #16]
					break;
 800220c:	e013      	b.n	8002236 <HAL_GPIO_EXTI_Callback+0x51e>
					Fingers_Status.Thumb.Encoder--;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002210:	8a1b      	ldrh	r3, [r3, #16]
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002218:	821a      	strh	r2, [r3, #16]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<200)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 800221c:	8a1b      	ldrh	r3, [r3, #16]
 800221e:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002222:	4293      	cmp	r3, r2
 8002224:	d803      	bhi.n	800222e <HAL_GPIO_EXTI_Callback+0x516>
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002228:	8a1b      	ldrh	r3, [r3, #16]
 800222a:	2bc7      	cmp	r3, #199	; 0xc7
 800222c:	d802      	bhi.n	8002234 <HAL_GPIO_EXTI_Callback+0x51c>
					Fingers_Status.Thumb.Encoder=0;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_GPIO_EXTI_Callback+0x530>)
 8002230:	2200      	movs	r2, #0
 8002232:	821a      	strh	r2, [r3, #16]
					break;
 8002234:	bf00      	nop
			break;
 8002236:	e000      	b.n	800223a <HAL_GPIO_EXTI_Callback+0x522>
			break;
 8002238:	bf00      	nop
	}
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200006f0 	.word	0x200006f0

0800224c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002254:	f002 f96b 	bl	800452e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002258:	f000 f92e 	bl	80024b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800225c:	f000 f97b 	bl	8002556 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002260:	f7ff fca6 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002264:	f7ff fc86 	bl	8001b74 <MX_DMA_Init>
  MX_ADC1_Init();
 8002268:	f7ff f80c 	bl	8001284 <MX_ADC1_Init>
  MX_ADC2_Init();
 800226c:	f7ff f8c2 	bl	80013f4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8002270:	f7ff fc06 	bl	8001a80 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002274:	f000 fb84 	bl	8002980 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002278:	f000 fc1c 	bl	8002ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800227c:	f000 fc7e 	bl	8002b7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002280:	f000 fce0 	bl	8002c44 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002284:	f000 fd7a 	bl	8002d7c <MX_TIM8_Init>
  MX_UART4_Init();
 8002288:	f000 ff70 	bl	800316c <MX_UART4_Init>
  MX_TIM7_Init();
 800228c:	f000 fd3e 	bl	8002d0c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	init_motor_controller();
 8002290:	f001 fe12 	bl	8003eb8 <init_motor_controller>
	//start fingers calibration
	Fingers_Calibration();
 8002294:	f001 ff44 	bl	8004120 <Fingers_Calibration>
	//feedback for end of calibration
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 8002298:	2201      	movs	r2, #1
 800229a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229e:	487a      	ldr	r0, [pc, #488]	; (8002488 <main+0x23c>)
 80022a0:	f004 fa06 	bl	80066b0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		//------------------------------| Thumb finger |----------------------------------------
		SetMotor(Thumb, &Fingers_Status.Thumb);
 80022a4:	4979      	ldr	r1, [pc, #484]	; (800248c <main+0x240>)
 80022a6:	2000      	movs	r0, #0
 80022a8:	f001 fc60 	bl	8003b6c <SetMotor>
//		Control_Motor(Thumb, &Fingers_Status.Thumb);
		ADC_ReadCurrent_Thumb();
 80022ac:	f7ff fb9c 	bl	80019e8 <ADC_ReadCurrent_Thumb>
		if(Fingers_Status.Thumb.Direction_motor==Stop)
 80022b0:	4b76      	ldr	r3, [pc, #472]	; (800248c <main+0x240>)
 80022b2:	7c9b      	ldrb	r3, [r3, #18]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <main+0x74>
			Read_Encoder(Thumb, &Fingers_Status.Thumb);
 80022b8:	4974      	ldr	r1, [pc, #464]	; (800248c <main+0x240>)
 80022ba:	2000      	movs	r0, #0
 80022bc:	f001 fb30 	bl	8003920 <Read_Encoder>
		//------------------------------| Index finger |----------------------------------------
		ADC_ReadCurrent_Index();
 80022c0:	f7ff fb3a 	bl	8001938 <ADC_ReadCurrent_Index>
		Control_Motor(Index,&Fingers_Status.Index);
 80022c4:	4972      	ldr	r1, [pc, #456]	; (8002490 <main+0x244>)
 80022c6:	2001      	movs	r0, #1
 80022c8:	f002 f84e 	bl	8004368 <Control_Motor>
		SetMotor(Index, &Fingers_Status.Index);
 80022cc:	4970      	ldr	r1, [pc, #448]	; (8002490 <main+0x244>)
 80022ce:	2001      	movs	r0, #1
 80022d0:	f001 fc4c 	bl	8003b6c <SetMotor>
		if(Fingers_Status.Index.Direction_motor==Stop)
 80022d4:	4b6d      	ldr	r3, [pc, #436]	; (800248c <main+0x240>)
 80022d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <main+0x9a>
			Read_Encoder(Index, &Fingers_Status.Index);
 80022de:	496c      	ldr	r1, [pc, #432]	; (8002490 <main+0x244>)
 80022e0:	2001      	movs	r0, #1
 80022e2:	f001 fb1d 	bl	8003920 <Read_Encoder>
		//------------------------------| Middle finger |----------------------------------------
		ADC_ReadCurrent_Middle();
 80022e6:	f7ff fad3 	bl	8001890 <ADC_ReadCurrent_Middle>
		Control_Motor(Middle,&Fingers_Status.Middle);
 80022ea:	496a      	ldr	r1, [pc, #424]	; (8002494 <main+0x248>)
 80022ec:	2002      	movs	r0, #2
 80022ee:	f002 f83b 	bl	8004368 <Control_Motor>
		SetMotor(Middle, &Fingers_Status.Middle);
 80022f2:	4968      	ldr	r1, [pc, #416]	; (8002494 <main+0x248>)
 80022f4:	2002      	movs	r0, #2
 80022f6:	f001 fc39 	bl	8003b6c <SetMotor>
		if(Fingers_Status.Middle.Direction_motor==Stop)
 80022fa:	4b64      	ldr	r3, [pc, #400]	; (800248c <main+0x240>)
 80022fc:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <main+0xc0>
			Read_Encoder(Middle, &Fingers_Status.Middle);
 8002304:	4963      	ldr	r1, [pc, #396]	; (8002494 <main+0x248>)
 8002306:	2002      	movs	r0, #2
 8002308:	f001 fb0a 	bl	8003920 <Read_Encoder>
		//------------------------------| Ring finger |----------------------------------------
		SetMotor(Ring, &Fingers_Status.Ring);
 800230c:	4962      	ldr	r1, [pc, #392]	; (8002498 <main+0x24c>)
 800230e:	2003      	movs	r0, #3
 8002310:	f001 fc2c 	bl	8003b6c <SetMotor>
		Control_Motor(Ring,&Fingers_Status.Ring);
 8002314:	4960      	ldr	r1, [pc, #384]	; (8002498 <main+0x24c>)
 8002316:	2003      	movs	r0, #3
 8002318:	f002 f826 	bl	8004368 <Control_Motor>
		ADC_ReadCurrent_Ring();
 800231c:	f7ff fa60 	bl	80017e0 <ADC_ReadCurrent_Ring>
		if(Fingers_Status.Ring.Direction_motor==Stop)
 8002320:	4b5a      	ldr	r3, [pc, #360]	; (800248c <main+0x240>)
 8002322:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <main+0xe6>
			Read_Encoder(Ring, &Fingers_Status.Ring);
 800232a:	495b      	ldr	r1, [pc, #364]	; (8002498 <main+0x24c>)
 800232c:	2003      	movs	r0, #3
 800232e:	f001 faf7 	bl	8003920 <Read_Encoder>
		//------------------------------| Pinky finger |----------------------------------------
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8002332:	495a      	ldr	r1, [pc, #360]	; (800249c <main+0x250>)
 8002334:	2004      	movs	r0, #4
 8002336:	f001 fc19 	bl	8003b6c <SetMotor>
		Control_Motor(Pinky,&Fingers_Status.Pinky);
 800233a:	4958      	ldr	r1, [pc, #352]	; (800249c <main+0x250>)
 800233c:	2004      	movs	r0, #4
 800233e:	f002 f813 	bl	8004368 <Control_Motor>
		ADC_ReadCurrent_Pinky();
 8002342:	f7ff f9ed 	bl	8001720 <ADC_ReadCurrent_Pinky>
		if(Fingers_Status.Pinky.Direction_motor==Stop)
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <main+0x240>)
 8002348:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <main+0x10c>
			Read_Encoder(Pinky, &Fingers_Status.Pinky);
 8002350:	4952      	ldr	r1, [pc, #328]	; (800249c <main+0x250>)
 8002352:	2004      	movs	r0, #4
 8002354:	f001 fae4 	bl	8003920 <Read_Encoder>
		//------------------------------| Communication |----------------------------------------
		if(send_data_UART)
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <main+0x254>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0a1      	beq.n	80022a4 <main+0x58>
		{
			send_data_UART=0;
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <main+0x254>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <main+0x240>)
 8002368:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800236c:	4618      	mov	r0, r3
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <main+0x240>)
 8002370:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8002374:	461c      	mov	r4, r3
 8002376:	4b45      	ldr	r3, [pc, #276]	; (800248c <main+0x240>)
 8002378:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800237c:	461a      	mov	r2, r3
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <main+0x240>)
 8002380:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002384:	4619      	mov	r1, r3
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <main+0x240>)
 8002388:	8c1b      	ldrh	r3, [r3, #32]
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	9101      	str	r1, [sp, #4]
 800238e:	9200      	str	r2, [sp, #0]
 8002390:	4623      	mov	r3, r4
 8002392:	4602      	mov	r2, r0
 8002394:	4943      	ldr	r1, [pc, #268]	; (80024a4 <main+0x258>)
 8002396:	4844      	ldr	r0, [pc, #272]	; (80024a8 <main+0x25c>)
 8002398:	f009 fd04 	bl	800bda4 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 800239c:	4842      	ldr	r0, [pc, #264]	; (80024a8 <main+0x25c>)
 800239e:	f7fd ff67 	bl	8000270 <strlen>
 80023a2:	4603      	mov	r3, r0
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	2305      	movs	r3, #5
 80023a8:	493f      	ldr	r1, [pc, #252]	; (80024a8 <main+0x25c>)
 80023aa:	4840      	ldr	r0, [pc, #256]	; (80024ac <main+0x260>)
 80023ac:	f006 fe56 	bl	800905c <HAL_UART_Transmit>
			HAL_Delay(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f002 f931 	bl	8004618 <HAL_Delay>
			sprintf(uartTX,"{PP:%dPR:%dPM:%dPI:%dPT:%d}\n",((uint16_t)(Fingers_Status.Pinky.position*100)),((uint16_t)(Fingers_Status.Ring.position*100)),((uint16_t)(Fingers_Status.Middle.position*100)),((uint16_t)(Fingers_Status.Index.position*100)),((uint16_t)(Fingers_Status.Thumb.position*100)));
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <main+0x240>)
 80023b8:	e9d3 019a 	ldrd	r0, r1, [r3, #616]	; 0x268
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <main+0x264>)
 80023c2:	f7fe f919 	bl	80005f8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fbeb 	bl	8000ba8 <__aeabi_d2uiz>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461e      	mov	r6, r3
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <main+0x240>)
 80023da:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <main+0x264>)
 80023e4:	f7fe f908 	bl	80005f8 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbda 	bl	8000ba8 <__aeabi_d2uiz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4698      	mov	r8, r3
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <main+0x240>)
 80023fc:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <main+0x264>)
 8002406:	f7fe f8f7 	bl	80005f8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fbc9 	bl	8000ba8 <__aeabi_d2uiz>
 8002416:	4603      	mov	r3, r0
 8002418:	b29b      	uxth	r3, r3
 800241a:	461c      	mov	r4, r3
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <main+0x240>)
 800241e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <main+0x264>)
 8002428:	f7fe f8e6 	bl	80005f8 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbb8 	bl	8000ba8 <__aeabi_d2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	b29b      	uxth	r3, r3
 800243c:	461d      	mov	r5, r3
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <main+0x240>)
 8002440:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <main+0x264>)
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fba7 	bl	8000ba8 <__aeabi_d2uiz>
 800245a:	4603      	mov	r3, r0
 800245c:	b29b      	uxth	r3, r3
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	9501      	str	r5, [sp, #4]
 8002462:	9400      	str	r4, [sp, #0]
 8002464:	4643      	mov	r3, r8
 8002466:	4632      	mov	r2, r6
 8002468:	4912      	ldr	r1, [pc, #72]	; (80024b4 <main+0x268>)
 800246a:	480f      	ldr	r0, [pc, #60]	; (80024a8 <main+0x25c>)
 800246c:	f009 fc9a 	bl	800bda4 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <main+0x25c>)
 8002472:	f7fd fefd 	bl	8000270 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	b29a      	uxth	r2, r3
 800247a:	2305      	movs	r3, #5
 800247c:	490a      	ldr	r1, [pc, #40]	; (80024a8 <main+0x25c>)
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <main+0x260>)
 8002480:	f006 fdec 	bl	800905c <HAL_UART_Transmit>
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8002484:	e70e      	b.n	80022a4 <main+0x58>
 8002486:	bf00      	nop
 8002488:	48000800 	.word	0x48000800
 800248c:	200006f0 	.word	0x200006f0
 8002490:	20000788 	.word	0x20000788
 8002494:	20000820 	.word	0x20000820
 8002498:	200008b8 	.word	0x200008b8
 800249c:	20000950 	.word	0x20000950
 80024a0:	20000326 	.word	0x20000326
 80024a4:	0800e9f8 	.word	0x0800e9f8
 80024a8:	20000464 	.word	0x20000464
 80024ac:	20000664 	.word	0x20000664
 80024b0:	40590000 	.word	0x40590000
 80024b4:	0800ea18 	.word	0x0800ea18

080024b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b096      	sub	sp, #88	; 0x58
 80024bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	2244      	movs	r2, #68	; 0x44
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f009 fccf 	bl	800be6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024de:	f004 f93f 	bl	8006760 <HAL_PWREx_ControlVoltageScaling>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024e8:	f000 f884 	bl	80025f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f6:	2302      	movs	r3, #2
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024fa:	2303      	movs	r3, #3
 80024fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002502:	2314      	movs	r3, #20
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002506:	2307      	movs	r3, #7
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800250a:	2302      	movs	r3, #2
 800250c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800250e:	2302      	movs	r3, #2
 8002510:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f978 	bl	800680c <HAL_RCC_OscConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002522:	f000 f867 	bl	80025f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002526:	230f      	movs	r3, #15
 8002528:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252a:	2303      	movs	r3, #3
 800252c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800253a:	463b      	mov	r3, r7
 800253c:	2104      	movs	r1, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fd40 	bl	8006fc4 <HAL_RCC_ClockConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800254a:	f000 f853 	bl	80025f4 <Error_Handler>
  }
}
 800254e:	bf00      	nop
 8002550:	3758      	adds	r7, #88	; 0x58
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b0a2      	sub	sp, #136	; 0x88
 800255a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2288      	movs	r2, #136	; 0x88
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f009 fc81 	bl	800be6a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800256c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800256e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002572:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002574:	2303      	movs	r3, #3
 8002576:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002578:	2301      	movs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800257c:	2308      	movs	r3, #8
 800257e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002580:	2307      	movs	r3, #7
 8002582:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002584:	2302      	movs	r3, #2
 8002586:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002588:	2308      	movs	r3, #8
 800258a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800258c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002590:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002592:	463b      	mov	r3, r7
 8002594:	4618      	mov	r0, r3
 8002596:	f004 ff39 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80025a0:	f000 f828 	bl	80025f4 <Error_Handler>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3788      	adds	r7, #136	; 0x88
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10b      	bne.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
//		PID_Compute(&Fingers_Status.Thumb.PID_Struct);
		PID_Compute(&Fingers_Status.Index.PID_Struct);
 80025be:	4809      	ldr	r0, [pc, #36]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025c0:	f000 fef2 	bl	80033a8 <PID_Compute>
		PID_Compute(&Fingers_Status.Middle.PID_Struct);
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025c6:	f000 feef 	bl	80033a8 <PID_Compute>
		PID_Compute(&Fingers_Status.Ring.PID_Struct);
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025cc:	f000 feec 	bl	80033a8 <PID_Compute>
		PID_Compute(&Fingers_Status.Pinky.PID_Struct);
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025d2:	f000 fee9 	bl	80033a8 <PID_Compute>
	}
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40001400 	.word	0x40001400
 80025e4:	200007b0 	.word	0x200007b0
 80025e8:	20000848 	.word	0x20000848
 80025ec:	200008e0 	.word	0x200008e0
 80025f0:	20000978 	.word	0x20000978

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80025fc:	e7fe      	b.n	80025fc <Error_Handler+0x8>
	...

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_MspInit+0x44>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_MspInit+0x44>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6613      	str	r3, [r2, #96]	; 0x60
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_MspInit+0x44>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_MspInit+0x44>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_MspInit+0x44>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_MspInit+0x44>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002636:	2004      	movs	r0, #4
 8002638:	f003 fbc0 	bl	8005dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800264c:	e7fe      	b.n	800264c <NMI_Handler+0x4>
	...

08002650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800265a:	4802      	ldr	r0, [pc, #8]	; (8002664 <HardFault_Handler+0x14>)
 800265c:	f004 f828 	bl	80066b0 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <HardFault_Handler+0x10>
 8002662:	bf00      	nop
 8002664:	48000800 	.word	0x48000800

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler+0x4>

0800266e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler+0x4>

0800267a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f001 ff96 	bl	80045d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  calibration_counter++;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <SysTick_Handler+0x70>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <SysTick_Handler+0x70>)
 80026b8:	801a      	strh	r2, [r3, #0]
  Fingers_Status.Index.Current_Counter++;
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <SysTick_Handler+0x74>)
 80026bc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <SysTick_Handler+0x74>)
 80026c8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  Fingers_Status.Middle.Current_Counter++;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <SysTick_Handler+0x74>)
 80026ce:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <SysTick_Handler+0x74>)
 80026da:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  Fingers_Status.Pinky.Current_Counter++;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <SysTick_Handler+0x74>)
 80026e0:	f8b3 3284 	ldrh.w	r3, [r3, #644]	; 0x284
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <SysTick_Handler+0x74>)
 80026ec:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
  Fingers_Status.Ring.Current_Counter++;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <SysTick_Handler+0x74>)
 80026f2:	f8b3 31ec 	ldrh.w	r3, [r3, #492]	; 0x1ec
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <SysTick_Handler+0x74>)
 80026fe:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
  Fingers_Status.Thumb.Current_Counter++;
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Handler+0x74>)
 8002704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002706:	b29b      	uxth	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <SysTick_Handler+0x74>)
 800270e:	849a      	strh	r2, [r3, #36]	; 0x24
  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000a10 	.word	0x20000a10
 8002718:	200006f0 	.word	0x200006f0

0800271c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder1_Pin);
 8002720:	2001      	movs	r0, #1
 8002722:	f003 fff7 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder2_Pin);
 800272e:	2002      	movs	r0, #2
 8002730:	f003 fff0 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder1_Pin);
 800273c:	2004      	movs	r0, #4
 800273e:	f003 ffe9 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}

08002746 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder2_Pin);
 800274a:	2010      	movs	r0, #16
 800274c:	f003 ffe2 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Channel2_IRQHandler+0x10>)
 800275a:	f003 fd08 	bl	800616e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200003f0 	.word	0x200003f0

08002768 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder1_Pin);
 800276c:	2020      	movs	r0, #32
 800276e:	f003 ffd1 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}

08002776 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder2_Pin);
 800277a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800277e:	f003 ffc9 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder2_Pin);
 8002782:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002786:	f003 ffc5 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder1_Pin);
 800278a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800278e:	f003 ffc1 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder1_Pin);
 8002792:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002796:	f003 ffbd 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder2_Pin);
 800279a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800279e:	f003 ffb9 	bl	8006714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <UART4_IRQHandler+0x10>)
 80027ae:	f006 fd2b 	bl	8009208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000664 	.word	0x20000664

080027bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM7_IRQHandler+0x10>)
 80027c2:	f005 fd05 	bl	80081d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200005cc 	.word	0x200005cc

080027d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
	return 1;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_kill>:

int _kill(int pid, int sig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ea:	f009 fbb9 	bl	800bf60 <__errno>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2216      	movs	r2, #22
 80027f2:	601a      	str	r2, [r3, #0]
	return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_exit>:

void _exit (int status)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ffe7 	bl	80027e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002812:	e7fe      	b.n	8002812 <_exit+0x12>

08002814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e00a      	b.n	800283c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002826:	f3af 8000 	nop.w
 800282a:	4601      	mov	r1, r0
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	60ba      	str	r2, [r7, #8]
 8002832:	b2ca      	uxtb	r2, r1
 8002834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	dbf0      	blt.n	8002826 <_read+0x12>
	}

return len;
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e009      	b.n	8002874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf1      	blt.n	8002860 <_write+0x12>
	}
	return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_close>:

int _close(int file)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ae:	605a      	str	r2, [r3, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_isatty>:

int _isatty(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f009 fb1e 	bl	800bf60 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20018000 	.word	0x20018000
 8002950:	00000400 	.word	0x00000400
 8002954:	20000498 	.word	0x20000498
 8002958:	20000b68 	.word	0x20000b68

0800295c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <SystemInit+0x20>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <SystemInit+0x20>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b096      	sub	sp, #88	; 0x58
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	222c      	movs	r2, #44	; 0x2c
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fa5c 	bl	800be6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029b4:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <MX_TIM1_Init+0x130>)
 80029b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029ba:	2218      	movs	r2, #24
 80029bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029c6:	2263      	movs	r2, #99	; 0x63
 80029c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029dc:	4833      	ldr	r0, [pc, #204]	; (8002aac <MX_TIM1_Init+0x12c>)
 80029de:	f005 fa99 	bl	8007f14 <HAL_TIM_PWM_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80029e8:	f7ff fe04 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029fc:	4619      	mov	r1, r3
 80029fe:	482b      	ldr	r0, [pc, #172]	; (8002aac <MX_TIM1_Init+0x12c>)
 8002a00:	f006 f9ba 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002a0a:	f7ff fdf3 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0e:	2360      	movs	r3, #96	; 0x60
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4619      	mov	r1, r3
 8002a32:	481e      	ldr	r0, [pc, #120]	; (8002aac <MX_TIM1_Init+0x12c>)
 8002a34:	f005 fcce 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002a3e:	f7ff fdd9 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a46:	2204      	movs	r2, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4818      	ldr	r0, [pc, #96]	; (8002aac <MX_TIM1_Init+0x12c>)
 8002a4c:	f005 fcc2 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002a56:	f7ff fdcd 	bl	80025f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <MX_TIM1_Init+0x12c>)
 8002a90:	f006 f9fa 	bl	8008e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002a9a:	f7ff fdab 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <MX_TIM1_Init+0x12c>)
 8002aa0:	f000 fa9a 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002aa4:	bf00      	nop
 8002aa6:	3758      	adds	r7, #88	; 0x58
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000049c 	.word	0x2000049c
 8002ab0:	40012c00 	.word	0x40012c00

08002ab4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
 8002ad4:	615a      	str	r2, [r3, #20]
 8002ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002aee:	2263      	movs	r2, #99	; 0x63
 8002af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002afe:	481e      	ldr	r0, [pc, #120]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002b00:	f005 fa08 	bl	8007f14 <HAL_TIM_PWM_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002b0a:	f7ff fd73 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4816      	ldr	r0, [pc, #88]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002b1e:	f006 f92b 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002b28:	f7ff fd64 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2c:	2360      	movs	r3, #96	; 0x60
 8002b2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002b44:	f005 fc46 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002b4e:	f7ff fd51 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b52:	463b      	mov	r3, r7
 8002b54:	220c      	movs	r2, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4807      	ldr	r0, [pc, #28]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002b5a:	f005 fc3b 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002b64:	f7ff fd46 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b68:	4803      	ldr	r0, [pc, #12]	; (8002b78 <MX_TIM2_Init+0xc4>)
 8002b6a:	f000 fa35 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200004e8 	.word	0x200004e8

08002b7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	615a      	str	r2, [r3, #20]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <MX_TIM3_Init+0xc4>)
 8002ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8002ba6:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002ba8:	2218      	movs	r2, #24
 8002baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002bb4:	2263      	movs	r2, #99	; 0x63
 8002bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bc4:	481d      	ldr	r0, [pc, #116]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002bc6:	f005 f9a5 	bl	8007f14 <HAL_TIM_PWM_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002bd0:	f7ff fd10 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	4816      	ldr	r0, [pc, #88]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002be4:	f006 f8c8 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002bee:	f7ff fd01 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf2:	2360      	movs	r3, #96	; 0x60
 8002bf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	4619      	mov	r1, r3
 8002c08:	480c      	ldr	r0, [pc, #48]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002c0a:	f005 fbe3 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002c14:	f7ff fcee 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4807      	ldr	r0, [pc, #28]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002c20:	f005 fbd8 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002c2a:	f7ff fce3 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c2e:	4803      	ldr	r0, [pc, #12]	; (8002c3c <MX_TIM3_Init+0xc0>)
 8002c30:	f000 f9d2 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000534 	.word	0x20000534
 8002c40:	40000400 	.word	0x40000400

08002c44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c56:	463b      	mov	r3, r7
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
 8002c64:	615a      	str	r2, [r3, #20]
 8002c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <MX_TIM4_Init+0xc4>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c70:	2218      	movs	r2, #24
 8002c72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c7c:	2263      	movs	r2, #99	; 0x63
 8002c7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c86:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c8c:	481d      	ldr	r0, [pc, #116]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002c8e:	f005 f941 	bl	8007f14 <HAL_TIM_PWM_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002c98:	f7ff fcac 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4816      	ldr	r0, [pc, #88]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002cac:	f006 f864 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002cb6:	f7ff fc9d 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cba:	2360      	movs	r3, #96	; 0x60
 8002cbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002cd2:	f005 fb7f 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002cdc:	f7ff fc8a 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002ce8:	f005 fb74 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002cf2:	f7ff fc7f 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cf6:	4803      	ldr	r0, [pc, #12]	; (8002d04 <MX_TIM4_Init+0xc0>)
 8002cf8:	f000 f96e 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000580 	.word	0x20000580
 8002d08:	40000800 	.word	0x40000800

08002d0c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d1e:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <MX_TIM7_Init+0x6c>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 800-1;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d24:	f240 321f 	movw	r2, #799	; 0x31f
 8002d28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d3e:	480d      	ldr	r0, [pc, #52]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d40:	f005 f820 	bl	8007d84 <HAL_TIM_Base_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002d4a:	f7ff fc53 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4806      	ldr	r0, [pc, #24]	; (8002d74 <MX_TIM7_Init+0x68>)
 8002d5c:	f006 f80c 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002d66:	f7ff fc45 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200005cc 	.word	0x200005cc
 8002d78:	40001400 	.word	0x40001400

08002d7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b096      	sub	sp, #88	; 0x58
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
 8002d9e:	615a      	str	r2, [r3, #20]
 8002da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	222c      	movs	r2, #44	; 0x2c
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f009 f85e 	bl	800be6a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002db0:	4a3e      	ldr	r2, [pc, #248]	; (8002eac <MX_TIM8_Init+0x130>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 8002db4:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002db6:	2218      	movs	r2, #24
 8002db8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dc2:	2263      	movs	r2, #99	; 0x63
 8002dc4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd2:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002dd8:	4833      	ldr	r0, [pc, #204]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dda:	f005 f89b 	bl	8007f14 <HAL_TIM_PWM_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002de4:	f7ff fc06 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002df4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002df8:	4619      	mov	r1, r3
 8002dfa:	482b      	ldr	r0, [pc, #172]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002dfc:	f005 ffbc 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002e06:	f7ff fbf5 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e0a:	2360      	movs	r3, #96	; 0x60
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e16:	2300      	movs	r3, #0
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	481e      	ldr	r0, [pc, #120]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002e30:	f005 fad0 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002e3a:	f7ff fbdb 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e42:	2204      	movs	r2, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002e48:	f005 fac4 	bl	80083d4 <HAL_TIM_PWM_ConfigChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002e52:	f7ff fbcf 	bl	80025f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002e8c:	f005 fffc 	bl	8008e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002e96:	f7ff fbad 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <MX_TIM8_Init+0x12c>)
 8002e9c:	f000 f89c 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3758      	adds	r7, #88	; 0x58
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000618 	.word	0x20000618
 8002eac:	40013400 	.word	0x40013400

08002eb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2e      	ldr	r2, [pc, #184]	; (8002f78 <HAL_TIM_PWM_MspInit+0xc8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10c      	bne.n	8002edc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	4a2d      	ldr	r2, [pc, #180]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002eda:	e046      	b.n	8002f6a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]
}
 8002efe:	e034      	b.n	8002f6a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_TIM_PWM_MspInit+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10c      	bne.n	8002f24 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	6593      	str	r3, [r2, #88]	; 0x58
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
}
 8002f22:	e022      	b.n	8002f6a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_TIM_PWM_MspInit+0xd4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
}
 8002f46:	e010      	b.n	8002f6a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_TIM_PWM_MspInit+0xd8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10b      	bne.n	8002f6a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_TIM_PWM_MspInit+0xcc>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
}
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40013400 	.word	0x40013400

08002f8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_TIM_Base_MspInit+0x44>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2037      	movs	r0, #55	; 0x37
 8002fbc:	f002 ff09 	bl	8005dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fc0:	2037      	movs	r0, #55	; 0x37
 8002fc2:	f002 ff22 	bl	8005e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40001400 	.word	0x40001400
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_TIM_MspPostInit+0x178>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11e      	bne.n	8003038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 8003012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003024:	2301      	movs	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003032:	f003 f97b 	bl	800632c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003036:	e087      	b.n	8003148 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d11d      	bne.n	800307e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	4a43      	ldr	r2, [pc, #268]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 800305a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800306c:	2301      	movs	r3, #1
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	4619      	mov	r1, r3
 8003076:	4838      	ldr	r0, [pc, #224]	; (8003158 <HAL_TIM_MspPostInit+0x180>)
 8003078:	f003 f958 	bl	800632c <HAL_GPIO_Init>
}
 800307c:	e064      	b.n	8003148 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <HAL_TIM_MspPostInit+0x184>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d11c      	bne.n	80030c2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	4a31      	ldr	r2, [pc, #196]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 80030a0:	2330      	movs	r3, #48	; 0x30
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b0:	2302      	movs	r3, #2
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4619      	mov	r1, r3
 80030ba:	4827      	ldr	r0, [pc, #156]	; (8003158 <HAL_TIM_MspPostInit+0x180>)
 80030bc:	f003 f936 	bl	800632c <HAL_GPIO_Init>
}
 80030c0:	e042      	b.n	8003148 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_TIM_MspPostInit+0x188>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d11c      	bne.n	8003106 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 80030e4:	23c0      	movs	r3, #192	; 0xc0
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4816      	ldr	r0, [pc, #88]	; (8003158 <HAL_TIM_MspPostInit+0x180>)
 8003100:	f003 f914 	bl	800632c <HAL_GPIO_Init>
}
 8003104:	e020      	b.n	8003148 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_TIM_MspPostInit+0x18c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_TIM_MspPostInit+0x17c>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8003128:	23c0      	movs	r3, #192	; 0xc0
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003138:	2303      	movs	r3, #3
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	4809      	ldr	r0, [pc, #36]	; (8003168 <HAL_TIM_MspPostInit+0x190>)
 8003144:	f003 f8f2 	bl	800632c <HAL_GPIO_Init>
}
 8003148:	bf00      	nop
 800314a:	3730      	adds	r7, #48	; 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40021000 	.word	0x40021000
 8003158:	48000400 	.word	0x48000400
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40013400 	.word	0x40013400
 8003168:	48000800 	.word	0x48000800

0800316c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_UART4_Init+0x58>)
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <MX_UART4_Init+0x5c>)
 8003174:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <MX_UART4_Init+0x58>)
 8003178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800317c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_UART4_Init+0x58>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_UART4_Init+0x58>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_UART4_Init+0x58>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_UART4_Init+0x58>)
 8003192:	220c      	movs	r2, #12
 8003194:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_UART4_Init+0x58>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_UART4_Init+0x58>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_UART4_Init+0x58>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_UART4_Init+0x58>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_UART4_Init+0x58>)
 80031b0:	f005 ff06 	bl	8008fc0 <HAL_UART_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80031ba:	f7ff fa1b 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000664 	.word	0x20000664
 80031c8:	40004c00 	.word	0x40004c00

080031cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0ac      	sub	sp, #176	; 0xb0
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2288      	movs	r2, #136	; 0x88
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f008 fe3c 	bl	800be6a <memset>
  if(uartHandle->Instance==UART4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_UART_MspInit+0xc0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d143      	bne.n	8003284 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031fc:	2308      	movs	r3, #8
 80031fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003200:	2300      	movs	r3, #0
 8003202:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4618      	mov	r0, r3
 800320a:	f004 f8ff 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003214:	f7ff f9ee 	bl	80025f4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_UART_MspInit+0xc4>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_UART_MspInit+0xc4>)
 800321e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_UART_MspInit+0xc4>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003230:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_UART_MspInit+0xc4>)
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_UART_MspInit+0xc4>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_UART_MspInit+0xc4>)
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003256:	2301      	movs	r3, #1
 8003258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003262:	2308      	movs	r3, #8
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800326c:	4619      	mov	r1, r3
 800326e:	4809      	ldr	r0, [pc, #36]	; (8003294 <HAL_UART_MspInit+0xc8>)
 8003270:	f003 f85c 	bl	800632c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2034      	movs	r0, #52	; 0x34
 800327a:	f002 fdaa 	bl	8005dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800327e:	2034      	movs	r0, #52	; 0x34
 8003280:	f002 fdc3 	bl	8005e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8003284:	bf00      	nop
 8003286:	37b0      	adds	r7, #176	; 0xb0
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40004c00 	.word	0x40004c00
 8003290:	40021000 	.word	0x40021000
 8003294:	48000800 	.word	0x48000800

08003298 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80032c8:	f7fd fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d006      	beq.n	80032e0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80032de:	e011      	b.n	8003304 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80032ec:	f7fd fbf6 	bl	8000adc <__aeabi_dcmplt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d100      	bne.n	80032f8 <PID_Init+0x60>
}
 80032f6:	e005      	b.n	8003304 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	0000      	movs	r0, r0
	...

08003310 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6278      	str	r0, [r7, #36]	; 0x24
 8003318:	6239      	str	r1, [r7, #32]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003322:	ed87 1b02 	vstr	d1, [r7, #8]
 8003326:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003342:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003398 <PID+0x88>
 8003346:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80033a0 <PID+0x90>
 800334a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800334c:	f000 f956 	bl	80035fc <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	2264      	movs	r2, #100	; 0x64
 8003354:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8003356:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800335a:	4619      	mov	r1, r3
 800335c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800335e:	f000 fa63 	bl	8003828 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003362:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003366:	4619      	mov	r1, r3
 8003368:	ed97 2b00 	vldr	d2, [r7]
 800336c:	ed97 1b02 	vldr	d1, [r7, #8]
 8003370:	ed97 0b04 	vldr	d0, [r7, #16]
 8003374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003376:	f000 f9af 	bl	80036d8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800337a:	f001 f941 	bl	8004600 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	605a      	str	r2, [r3, #4]

}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	f3af 8000 	nop.w
 8003398:	00000000 	.word	0x00000000
 800339c:	406fe000 	.word	0x406fe000
	...

080033a8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <PID_Compute+0x14>
	{
		return _FALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e0f5      	b.n	80035a8 <PID_Compute+0x200>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80033bc:	f001 f920 	bl	8004600 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	f0c0 80e7 	bcc.w	80035a6 <PID_Compute+0x1fe>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f0:	f7fc ff4a 	bl	8000288 <__aeabi_dsub>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003402:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003406:	f7fc ff3f 	bl	8000288 <__aeabi_dsub>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800341e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003422:	f7fd f8e9 	bl	80005f8 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f7fc ff2d 	bl	800028c <__adddf3>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d114      	bne.n	800346e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003454:	f7fd f8d0 	bl	80005f8 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fc ff12 	bl	8000288 <__aeabi_dsub>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800347a:	f7fd fb4d 	bl	8000b18 <__aeabi_dcmpgt>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003490:	e010      	b.n	80034b4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800349e:	f7fd fb1d 	bl	8000adc <__aeabi_dcmplt>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80034c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034c6:	f7fd f897 	bl	80005f8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80034d2:	e005      	b.n	80034e0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	f7fd f882 	bl	80005f8 <__aeabi_dmul>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4620      	mov	r0, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	f7fc fec4 	bl	8000288 <__aeabi_dsub>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003508:	f7fc fec0 	bl	800028c <__adddf3>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800351a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800351e:	f7fd fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800352e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003532:	e00e      	b.n	8003552 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800353a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800353e:	f7fd facd 	bl	8000adc <__aeabi_dcmplt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800354e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		if(error<0.1&&error>-0.1)
 8003552:	a317      	add	r3, pc, #92	; (adr r3, 80035b0 <PID_Compute+0x208>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800355c:	f7fd fabe 	bl	8000adc <__aeabi_dcmplt>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <PID_Compute+0x1de>
 8003566:	a314      	add	r3, pc, #80	; (adr r3, 80035b8 <PID_Compute+0x210>)
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003570:	f7fd fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <PID_Compute+0x1de>
		{
			output=0;
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		*uPID->MyOutput = output;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800358a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800358e:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003598:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <PID_Compute+0x200>

	}
	else
	{
		return _FALSE;
 80035a6:	2300      	movs	r3, #0
	}

}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3730      	adds	r7, #48	; 0x30
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	9999999a 	.word	0x9999999a
 80035b4:	3fb99999 	.word	0x3fb99999
 80035b8:	9999999a 	.word	0x9999999a
 80035bc:	bfb99999 	.word	0xbfb99999

080035c0 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <PID_SetMode+0x2e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fe55 	bl	8003298 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	705a      	strb	r2, [r3, #1]

}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6178      	str	r0, [r7, #20]
 8003604:	ed87 0b02 	vstr	d0, [r7, #8]
 8003608:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800360c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003610:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003614:	f7fd fa76 	bl	8000b04 <__aeabi_dcmpge>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d158      	bne.n	80036d0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800361e:	6979      	ldr	r1, [r7, #20]
 8003620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003624:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800362e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	785b      	ldrb	r3, [r3, #1]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d04b      	beq.n	80036d2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003648:	f7fd fa66 	bl	8000b18 <__aeabi_dcmpgt>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800365c:	e9c1 2300 	strd	r2, r3, [r1]
 8003660:	e012      	b.n	8003688 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003670:	f7fd fa34 	bl	8000adc <__aeabi_dcmplt>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003684:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003694:	f7fd fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80036a4:	6979      	ldr	r1, [r7, #20]
 80036a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80036aa:	e012      	b.n	80036d2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80036b8:	f7fd fa10 	bl	8000adc <__aeabi_dcmplt>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80036ce:	e000      	b.n	80036d2 <PID_SetOutputLimits+0xd6>
		return;
 80036d0:	bf00      	nop
		}
		else { }

	}

}
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	61f8      	str	r0, [r7, #28]
 80036e0:	ed87 0b04 	vstr	d0, [r7, #16]
 80036e4:	ed87 1b02 	vstr	d1, [r7, #8]
 80036e8:	ed87 2b00 	vstr	d2, [r7]
 80036ec:	460b      	mov	r3, r1
 80036ee:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036fc:	f7fd f9ee 	bl	8000adc <__aeabi_dcmplt>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 8089 	bne.w	800381a <PID_SetTunings2+0x142>
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003714:	f7fd f9e2 	bl	8000adc <__aeabi_dcmplt>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d17d      	bne.n	800381a <PID_SetTunings2+0x142>
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800372a:	f7fd f9d7 	bl	8000adc <__aeabi_dcmplt>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d172      	bne.n	800381a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	7efa      	ldrb	r2, [r7, #27]
 8003738:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800373a:	7efb      	ldrb	r3, [r7, #27]
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800374c:	69f9      	ldr	r1, [r7, #28]
 800374e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003752:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003756:	69f9      	ldr	r1, [r7, #28]
 8003758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800375c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003760:	69f9      	ldr	r1, [r7, #28]
 8003762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003766:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fc fec8 	bl	8000504 <__aeabi_ui2d>
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <PID_SetTunings2+0x14c>)
 800377a:	f7fd f867 	bl	800084c <__aeabi_ddiv>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800378c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003790:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003798:	f7fc ff2e 	bl	80005f8 <__aeabi_dmul>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	69f9      	ldr	r1, [r7, #28]
 80037a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80037a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037ae:	f7fd f84d 	bl	800084c <__aeabi_ddiv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d12b      	bne.n	800381c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	f7fc fd59 	bl	8000288 <__aeabi_dsub>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f7fc fd4b 	bl	8000288 <__aeabi_dsub>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	69f9      	ldr	r1, [r7, #28]
 80037f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	f7fc fd3d 	bl	8000288 <__aeabi_dsub>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	69f9      	ldr	r1, [r7, #28]
 8003814:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003818:	e000      	b.n	800381c <PID_SetTunings2+0x144>
		return;
 800381a:	bf00      	nop

	}

}
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	408f4000 	.word	0x408f4000

08003828 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02e      	beq.n	800389a <PID_SetControllerDirection+0x72>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	78db      	ldrb	r3, [r3, #3]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	429a      	cmp	r2, r3
 8003844:	d029      	beq.n	800389a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800384c:	f04f 0000 	mov.w	r0, #0
 8003850:	f04f 0100 	mov.w	r1, #0
 8003854:	f7fc fd18 	bl	8000288 <__aeabi_dsub>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f7fc fd0a 	bl	8000288 <__aeabi_dsub>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	f7fc fcfc 	bl	8000288 <__aeabi_dsub>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	70da      	strb	r2, [r3, #3]

}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dd2e      	ble.n	8003916 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80038b8:	6838      	ldr	r0, [r7, #0]
 80038ba:	f7fc fe33 	bl	8000524 <__aeabi_i2d>
 80038be:	4604      	mov	r4, r0
 80038c0:	460d      	mov	r5, r1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fe1c 	bl	8000504 <__aeabi_ui2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc ffba 	bl	800084c <__aeabi_ddiv>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80038e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ea:	f7fc fe85 	bl	80005f8 <__aeabi_dmul>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80038fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003902:	f7fc ffa3 	bl	800084c <__aeabi_ddiv>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]

	}

}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003920 <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	71fb      	strb	r3, [r7, #7]
	//	_Bool Signal_A;
	//	_Bool Signal_B;
	switch (FingerName) {
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b04      	cmp	r3, #4
 8003930:	f200 809b 	bhi.w	8003a6a <Read_Encoder+0x14a>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <Read_Encoder+0x1c>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003951 	.word	0x08003951
 8003940:	0800398b 	.word	0x0800398b
 8003944:	080039c1 	.word	0x080039c1
 8003948:	080039f7 	.word	0x080039f7
 800394c:	08003a31 	.word	0x08003a31
	case Thumb:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8003950:	2104      	movs	r1, #4
 8003952:	4884      	ldr	r0, [pc, #528]	; (8003b64 <Read_Encoder+0x244>)
 8003954:	f002 fe94 	bl	8006680 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2da      	uxtb	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 800396a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800396e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003972:	f002 fe85 	bl	8006680 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2da      	uxtb	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		break;
 8003988:	e070      	b.n	8003a6c <Read_Encoder+0x14c>
	case Index:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 800398a:	2101      	movs	r1, #1
 800398c:	4875      	ldr	r0, [pc, #468]	; (8003b64 <Read_Encoder+0x244>)
 800398e:	f002 fe77 	bl	8006680 <HAL_GPIO_ReadPin>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2da      	uxtb	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 80039a4:	2102      	movs	r1, #2
 80039a6:	486f      	ldr	r0, [pc, #444]	; (8003b64 <Read_Encoder+0x244>)
 80039a8:	f002 fe6a 	bl	8006680 <HAL_GPIO_ReadPin>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 80039be:	e055      	b.n	8003a6c <Read_Encoder+0x14c>
	case Middle:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 80039c0:	2120      	movs	r1, #32
 80039c2:	4869      	ldr	r0, [pc, #420]	; (8003b68 <Read_Encoder+0x248>)
 80039c4:	f002 fe5c 	bl	8006680 <HAL_GPIO_ReadPin>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 80039da:	2110      	movs	r1, #16
 80039dc:	4862      	ldr	r0, [pc, #392]	; (8003b68 <Read_Encoder+0x248>)
 80039de:	f002 fe4f 	bl	8006680 <HAL_GPIO_ReadPin>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 80039f4:	e03a      	b.n	8003a6c <Read_Encoder+0x14c>
	case Ring:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 80039f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039fa:	485a      	ldr	r0, [pc, #360]	; (8003b64 <Read_Encoder+0x244>)
 80039fc:	f002 fe40 	bl	8006680 <HAL_GPIO_ReadPin>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8003a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a16:	4853      	ldr	r0, [pc, #332]	; (8003b64 <Read_Encoder+0x244>)
 8003a18:	f002 fe32 	bl	8006680 <HAL_GPIO_ReadPin>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003a2e:	e01d      	b.n	8003a6c <Read_Encoder+0x14c>
	case Pinky:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 8003a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a34:	484b      	ldr	r0, [pc, #300]	; (8003b64 <Read_Encoder+0x244>)
 8003a36:	f002 fe23 	bl	8006680 <HAL_GPIO_ReadPin>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 8003a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a50:	4844      	ldr	r0, [pc, #272]	; (8003b64 <Read_Encoder+0x244>)
 8003a52:	f002 fe15 	bl	8006680 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003a68:	e000      	b.n	8003a6c <Read_Encoder+0x14c>
	default:
		break;
 8003a6a:	bf00      	nop
	}
	if(FingerStruct->SignalA && FingerStruct->SignalB)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <Read_Encoder+0x16c>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <Read_Encoder+0x16c>
		FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2203      	movs	r2, #3
 8003a88:	755a      	strb	r2, [r3, #21]
 8003a8a:	e028      	b.n	8003ade <Read_Encoder+0x1be>
	else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <Read_Encoder+0x192>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <Read_Encoder+0x192>
		FingerStruct->current_Encoder_State=Ahigh_Blow;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2204      	movs	r2, #4
 8003aae:	755a      	strb	r2, [r3, #21]
 8003ab0:	e015      	b.n	8003ade <Read_Encoder+0x1be>
	else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <Read_Encoder+0x1b8>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <Read_Encoder+0x1b8>
		FingerStruct->current_Encoder_State=Alow_Bhigh;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	755a      	strb	r2, [r3, #21]
 8003ad6:	e002      	b.n	8003ade <Read_Encoder+0x1be>
	else
		FingerStruct->current_Encoder_State=Alow_Blow;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	755a      	strb	r2, [r3, #21]
	if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	7d5a      	ldrb	r2, [r3, #21]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	7d9b      	ldrb	r3, [r3, #22]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d038      	beq.n	8003b5c <Read_Encoder+0x23c>
	{
		//if(FingerStruct->Direction==Open)
		//	FingerStruct->Encoder++;
		//else if(FingerStruct->Direction==Close)
		//	FingerStruct->Encoder--;
		if(FingerStruct->Pre_Encoder_State==Ahigh_Blow && FingerStruct->current_Encoder_State==Alow_Blow)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7d9b      	ldrb	r3, [r3, #22]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d10a      	bne.n	8003b08 <Read_Encoder+0x1e8>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	7d5b      	ldrb	r3, [r3, #21]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d106      	bne.n	8003b08 <Read_Encoder+0x1e8>
			FingerStruct->Encoder++;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	8a1b      	ldrh	r3, [r3, #16]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	821a      	strh	r2, [r3, #16]
 8003b06:	e01c      	b.n	8003b42 <Read_Encoder+0x222>
		else if(FingerStruct->Pre_Encoder_State==Alow_Blow && FingerStruct->current_Encoder_State==Ahigh_Blow)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	7d9b      	ldrb	r3, [r3, #22]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10a      	bne.n	8003b26 <Read_Encoder+0x206>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	7d5b      	ldrb	r3, [r3, #21]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d106      	bne.n	8003b26 <Read_Encoder+0x206>
			FingerStruct->Encoder--;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	8a1b      	ldrh	r3, [r3, #16]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	821a      	strh	r2, [r3, #16]
 8003b24:	e00d      	b.n	8003b42 <Read_Encoder+0x222>
		else
			FingerStruct->Encoder+=(FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	8a1a      	ldrh	r2, [r3, #16]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7d9b      	ldrb	r3, [r3, #22]
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	7d5b      	ldrb	r3, [r3, #21]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	821a      	strh	r2, [r3, #16]
		FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	7d5a      	ldrb	r2, [r3, #21]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	759a      	strb	r2, [r3, #22]
		if(FingerStruct->Encoder>65000)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	8a1b      	ldrh	r3, [r3, #16]
 8003b4e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d902      	bls.n	8003b5c <Read_Encoder+0x23c>
			FingerStruct->Encoder=0;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	821a      	strh	r2, [r3, #16]
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	48000400 	.word	0x48000400
 8003b68:	48000800 	.word	0x48000800

08003b6c <SetMotor>:
/*
 * set PWM and direction for each finger
 */
void SetMotor(Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
	//	Read_Encoder(FingerStruct, name);
	switch (FingerName) {
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	f200 818f 	bhi.w	8003e9e <SetMotor+0x332>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <SetMotor+0x1c>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003c29 	.word	0x08003c29
 8003b90:	08003cbd 	.word	0x08003cbd
 8003b94:	08003d51 	.word	0x08003d51
 8003b98:	08003de5 	.word	0x08003de5
	case Thumb :
		if ( FingerStruct->Direction_motor== Open) {
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	7c9b      	ldrb	r3, [r3, #18]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <SetMotor+0x5a>
			htim3.Instance->CCR1 = (uint8_t) FingerStruct->speed;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7fc fffb 	bl	8000ba8 <__aeabi_d2uiz>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b96      	ldr	r3, [pc, #600]	; (8003e10 <SetMotor+0x2a4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <SetMotor+0x2a4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc4:	e01c      	b.n	8003c00 <SetMotor+0x94>
		} else if (FingerStruct->Direction_motor == Close) {
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	7c9b      	ldrb	r3, [r3, #18]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d110      	bne.n	8003bf0 <SetMotor+0x84>
			htim3.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f7fc ffe6 	bl	8000ba8 <__aeabi_d2uiz>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b8b      	ldr	r3, [pc, #556]	; (8003e10 <SetMotor+0x2a4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 8003be6:	4b8a      	ldr	r3, [pc, #552]	; (8003e10 <SetMotor+0x2a4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34
 8003bee:	e007      	b.n	8003c00 <SetMotor+0x94>
		} else {
			htim3.Instance->CCR1 =100;
 8003bf0:	4b87      	ldr	r3, [pc, #540]	; (8003e10 <SetMotor+0x2a4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2264      	movs	r2, #100	; 0x64
 8003bf6:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =100;
 8003bf8:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <SetMotor+0x2a4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2264      	movs	r2, #100	; 0x64
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	8a1b      	ldrh	r3, [r3, #16]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003e14 <SetMotor+0x2a8>
 8003c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c14:	ee17 0a90 	vmov	r0, s15
 8003c18:	f7fc fc96 	bl	8000548 <__aeabi_f2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003c26:	e13b      	b.n	8003ea0 <SetMotor+0x334>
	case Index :
		if ( FingerStruct->Direction_motor== Close) {
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	7c9b      	ldrb	r3, [r3, #18]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d110      	bne.n	8003c52 <SetMotor+0xe6>
			htim4.Instance->CCR1 =(uint8_t)  FingerStruct->speed;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f7fc ffb5 	bl	8000ba8 <__aeabi_d2uiz>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <SetMotor+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8003c48:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <SetMotor+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c50:	e01c      	b.n	8003c8c <SetMotor+0x120>
		} else if (FingerStruct->Direction_motor == Open) {
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7c9b      	ldrb	r3, [r3, #18]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d110      	bne.n	8003c7c <SetMotor+0x110>
			htim4.Instance->CCR2 = (uint8_t) FingerStruct->speed;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7fc ffa0 	bl	8000ba8 <__aeabi_d2uiz>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <SetMotor+0x2ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 8003c72:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <SetMotor+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7a:	e007      	b.n	8003c8c <SetMotor+0x120>
		} else {
			htim4.Instance->CCR1 =100;
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <SetMotor+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2264      	movs	r2, #100	; 0x64
 8003c82:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =100;
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <SetMotor+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	8a1b      	ldrh	r3, [r3, #16]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c98:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003e1c <SetMotor+0x2b0>
 8003c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003e14 <SetMotor+0x2a8>
 8003ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca8:	ee17 0a90 	vmov	r0, s15
 8003cac:	f7fc fc4c 	bl	8000548 <__aeabi_f2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003cba:	e0f1      	b.n	8003ea0 <SetMotor+0x334>
	case Middle :
		if ( FingerStruct->Direction_motor== Close) {
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	7c9b      	ldrb	r3, [r3, #18]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d110      	bne.n	8003ce6 <SetMotor+0x17a>
			htim2.Instance->CCR4 =(uint8_t)  FingerStruct->speed;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc ff6b 	bl	8000ba8 <__aeabi_d2uiz>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <SetMotor+0x2b4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 8003cdc:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <SetMotor+0x2b4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ce4:	e01c      	b.n	8003d20 <SetMotor+0x1b4>
		} else if (FingerStruct->Direction_motor == Open) {
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	7c9b      	ldrb	r3, [r3, #18]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d110      	bne.n	8003d10 <SetMotor+0x1a4>
			htim2.Instance->CCR3 = (uint8_t) FingerStruct->speed;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f7fc ff56 	bl	8000ba8 <__aeabi_d2uiz>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <SetMotor+0x2b4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8003d06:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <SetMotor+0x2b4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0e:	e007      	b.n	8003d20 <SetMotor+0x1b4>
		} else {
			htim2.Instance->CCR3 =100;
 8003d10:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <SetMotor+0x2b4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2264      	movs	r2, #100	; 0x64
 8003d16:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =100;
 8003d18:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <SetMotor+0x2b4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2264      	movs	r2, #100	; 0x64
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	8a1b      	ldrh	r3, [r3, #16]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d2c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e24 <SetMotor+0x2b8>
 8003d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d34:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003e14 <SetMotor+0x2a8>
 8003d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d3c:	ee17 0a90 	vmov	r0, s15
 8003d40:	f7fc fc02 	bl	8000548 <__aeabi_f2d>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003d4e:	e0a7      	b.n	8003ea0 <SetMotor+0x334>
	case Ring :
		if ( FingerStruct->Direction_motor== Close) {
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	7c9b      	ldrb	r3, [r3, #18]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d110      	bne.n	8003d7a <SetMotor+0x20e>
			htim8.Instance->CCR1 = (uint8_t) FingerStruct->speed;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fc ff21 	bl	8000ba8 <__aeabi_d2uiz>
 8003d66:	4603      	mov	r3, r0
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <SetMotor+0x2bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <SetMotor+0x2bc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2200      	movs	r2, #0
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
 8003d78:	e01c      	b.n	8003db4 <SetMotor+0x248>
		} else if (FingerStruct->Direction_motor == Open) {
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	7c9b      	ldrb	r3, [r3, #18]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d110      	bne.n	8003da4 <SetMotor+0x238>
			htim8.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7fc ff0c 	bl	8000ba8 <__aeabi_d2uiz>
 8003d90:	4603      	mov	r3, r0
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <SetMotor+0x2bc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <SetMotor+0x2bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34
 8003da2:	e007      	b.n	8003db4 <SetMotor+0x248>
		} else {
			htim8.Instance->CCR1 =100;
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <SetMotor+0x2bc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2264      	movs	r2, #100	; 0x64
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =100;
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <SetMotor+0x2bc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2264      	movs	r2, #100	; 0x64
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	8a1b      	ldrh	r3, [r3, #16]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003e2c <SetMotor+0x2c0>
 8003dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dc8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003e14 <SetMotor+0x2a8>
 8003dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd0:	ee17 0a90 	vmov	r0, s15
 8003dd4:	f7fc fbb8 	bl	8000548 <__aeabi_f2d>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	6839      	ldr	r1, [r7, #0]
 8003dde:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003de2:	e05d      	b.n	8003ea0 <SetMotor+0x334>
	case Pinky :
		if ( FingerStruct->Direction_motor== Close) {
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	7c9b      	ldrb	r3, [r3, #18]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d123      	bne.n	8003e34 <SetMotor+0x2c8>
			htim1.Instance->CCR1 =(uint8_t)  FingerStruct->speed;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc fed7 	bl	8000ba8 <__aeabi_d2uiz>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <SetMotor+0x2c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <SetMotor+0x2c4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e0c:	e02f      	b.n	8003e6e <SetMotor+0x302>
 8003e0e:	bf00      	nop
 8003e10:	20000534 	.word	0x20000534
 8003e14:	42c80000 	.word	0x42c80000
 8003e18:	20000580 	.word	0x20000580
 8003e1c:	46cf0800 	.word	0x46cf0800
 8003e20:	200004e8 	.word	0x200004e8
 8003e24:	46c99000 	.word	0x46c99000
 8003e28:	20000618 	.word	0x20000618
 8003e2c:	46bea000 	.word	0x46bea000
 8003e30:	2000049c 	.word	0x2000049c
		} else if (FingerStruct->Direction_motor == Open) {
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	7c9b      	ldrb	r3, [r3, #18]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d110      	bne.n	8003e5e <SetMotor+0x2f2>
			htim1.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7fc feaf 	bl	8000ba8 <__aeabi_d2uiz>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <SetMotor+0x33c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <SetMotor+0x33c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e5c:	e007      	b.n	8003e6e <SetMotor+0x302>
		} else {
			htim1.Instance->CCR1 =100;
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <SetMotor+0x33c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2264      	movs	r2, #100	; 0x64
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =100;
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <SetMotor+0x33c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2264      	movs	r2, #100	; 0x64
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	8a1b      	ldrh	r3, [r3, #16]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e7a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003eac <SetMotor+0x340>
 8003e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e82:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003eb0 <SetMotor+0x344>
 8003e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e8a:	ee17 0a90 	vmov	r0, s15
 8003e8e:	f7fc fb5b 	bl	8000548 <__aeabi_f2d>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003e9c:	e000      	b.n	8003ea0 <SetMotor+0x334>

	default:

		break;
 8003e9e:	bf00      	nop
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	2000049c 	.word	0x2000049c
 8003eac:	46cbe800 	.word	0x46cbe800
 8003eb0:	42c80000 	.word	0x42c80000
 8003eb4:	00000000 	.word	0x00000000

08003eb8 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af02      	add	r7, sp, #8
	//-----------|start read data from ADC|---------------
	HAL_ADC_Start_DMA(&hadc2,(uint32_t *) ADCData, 6);
 8003ebe:	2206      	movs	r2, #6
 8003ec0:	4977      	ldr	r1, [pc, #476]	; (80040a0 <init_motor_controller+0x1e8>)
 8003ec2:	4878      	ldr	r0, [pc, #480]	; (80040a4 <init_motor_controller+0x1ec>)
 8003ec4:	f000 fef2 	bl	8004cac <HAL_ADC_Start_DMA>
	//---------------|start PWM Timers|-------------------
	//motor5->thumb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4877      	ldr	r0, [pc, #476]	; (80040a8 <init_motor_controller+0x1f0>)
 8003ecc:	f004 f87a 	bl	8007fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	4875      	ldr	r0, [pc, #468]	; (80040a8 <init_motor_controller+0x1f0>)
 8003ed4:	f004 f876 	bl	8007fc4 <HAL_TIM_PWM_Start>
	//motor4->index
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4874      	ldr	r0, [pc, #464]	; (80040ac <init_motor_controller+0x1f4>)
 8003edc:	f004 f872 	bl	8007fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4872      	ldr	r0, [pc, #456]	; (80040ac <init_motor_controller+0x1f4>)
 8003ee4:	f004 f86e 	bl	8007fc4 <HAL_TIM_PWM_Start>
	//motor3->middle
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4871      	ldr	r0, [pc, #452]	; (80040b0 <init_motor_controller+0x1f8>)
 8003eec:	f004 f86a 	bl	8007fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003ef0:	210c      	movs	r1, #12
 8003ef2:	486f      	ldr	r0, [pc, #444]	; (80040b0 <init_motor_controller+0x1f8>)
 8003ef4:	f004 f866 	bl	8007fc4 <HAL_TIM_PWM_Start>
	//motor2->ring
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	486e      	ldr	r0, [pc, #440]	; (80040b4 <init_motor_controller+0x1fc>)
 8003efc:	f004 f862 	bl	8007fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003f00:	2104      	movs	r1, #4
 8003f02:	486c      	ldr	r0, [pc, #432]	; (80040b4 <init_motor_controller+0x1fc>)
 8003f04:	f004 f85e 	bl	8007fc4 <HAL_TIM_PWM_Start>
	//motor1->pinky
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	486b      	ldr	r0, [pc, #428]	; (80040b8 <init_motor_controller+0x200>)
 8003f0c:	f004 f85a 	bl	8007fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003f10:	2104      	movs	r1, #4
 8003f12:	4869      	ldr	r0, [pc, #420]	; (80040b8 <init_motor_controller+0x200>)
 8003f14:	f004 f856 	bl	8007fc4 <HAL_TIM_PWM_Start>
	//---------------|initialization|----------------------
	HAL_ADC_MspInit(&hadc1);
 8003f18:	4868      	ldr	r0, [pc, #416]	; (80040bc <init_motor_controller+0x204>)
 8003f1a:	f7fd fb21 	bl	8001560 <HAL_ADC_MspInit>
	HAL_ADC_MspInit(&hadc2);
 8003f1e:	4861      	ldr	r0, [pc, #388]	; (80040a4 <init_motor_controller+0x1ec>)
 8003f20:	f7fd fb1e 	bl	8001560 <HAL_ADC_MspInit>
	HAL_UART_MspInit(&huart4);
 8003f24:	4866      	ldr	r0, [pc, #408]	; (80040c0 <init_motor_controller+0x208>)
 8003f26:	f7ff f951 	bl	80031cc <HAL_UART_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4965      	ldr	r1, [pc, #404]	; (80040c4 <init_motor_controller+0x20c>)
 8003f2e:	4864      	ldr	r0, [pc, #400]	; (80040c0 <init_motor_controller+0x208>)
 8003f30:	f005 f91e 	bl	8009170 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003f34:	4864      	ldr	r0, [pc, #400]	; (80040c8 <init_motor_controller+0x210>)
 8003f36:	f003 ff7d 	bl	8007e34 <HAL_TIM_Base_Start_IT>
	TX_State=idel;
 8003f3a:	4b64      	ldr	r3, [pc, #400]	; (80040cc <init_motor_controller+0x214>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
	//-------------|Configure PID settings|----------------
	//********THUMB
	PID(&Fingers_Status.Thumb.PID_Struct, &Fingers_Status.Thumb.position, &Fingers_Status.Thumb.speed, &Fingers_Status.Thumb.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8003f40:	2300      	movs	r3, #0
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	2301      	movs	r3, #1
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 8004080 <init_motor_controller+0x1c8>
 8003f4c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8004088 <init_motor_controller+0x1d0>
 8003f50:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8004090 <init_motor_controller+0x1d8>
 8003f54:	4b5e      	ldr	r3, [pc, #376]	; (80040d0 <init_motor_controller+0x218>)
 8003f56:	4a5f      	ldr	r2, [pc, #380]	; (80040d4 <init_motor_controller+0x21c>)
 8003f58:	495f      	ldr	r1, [pc, #380]	; (80040d8 <init_motor_controller+0x220>)
 8003f5a:	4860      	ldr	r0, [pc, #384]	; (80040dc <init_motor_controller+0x224>)
 8003f5c:	f7ff f9d8 	bl	8003310 <PID>
	PID_SetMode(&Fingers_Status.Thumb.PID_Struct, _PID_MODE_AUTOMATIC);
 8003f60:	2101      	movs	r1, #1
 8003f62:	485e      	ldr	r0, [pc, #376]	; (80040dc <init_motor_controller+0x224>)
 8003f64:	f7ff fb2c 	bl	80035c0 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Thumb.PID_Struct, 100);
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	485c      	ldr	r0, [pc, #368]	; (80040dc <init_motor_controller+0x224>)
 8003f6c:	f7ff fc9c 	bl	80038a8 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Thumb.PID_Struct, 0, 100);
 8003f70:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8004098 <init_motor_controller+0x1e0>
 8003f74:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8004080 <init_motor_controller+0x1c8>
 8003f78:	4858      	ldr	r0, [pc, #352]	; (80040dc <init_motor_controller+0x224>)
 8003f7a:	f7ff fb3f 	bl	80035fc <PID_SetOutputLimits>
	//********INDEX
	PID(&Fingers_Status.Index.PID_Struct, &Fingers_Status.Index.position, &Fingers_Status.Index.speed, &Fingers_Status.Index.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2301      	movs	r3, #1
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 8004080 <init_motor_controller+0x1c8>
 8003f8a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8004088 <init_motor_controller+0x1d0>
 8003f8e:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8004090 <init_motor_controller+0x1d8>
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <init_motor_controller+0x228>)
 8003f94:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <init_motor_controller+0x22c>)
 8003f96:	4954      	ldr	r1, [pc, #336]	; (80040e8 <init_motor_controller+0x230>)
 8003f98:	4854      	ldr	r0, [pc, #336]	; (80040ec <init_motor_controller+0x234>)
 8003f9a:	f7ff f9b9 	bl	8003310 <PID>
	PID_SetMode(&Fingers_Status.Index.PID_Struct, _PID_MODE_AUTOMATIC);
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4852      	ldr	r0, [pc, #328]	; (80040ec <init_motor_controller+0x234>)
 8003fa2:	f7ff fb0d 	bl	80035c0 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Index.PID_Struct, 100);
 8003fa6:	2164      	movs	r1, #100	; 0x64
 8003fa8:	4850      	ldr	r0, [pc, #320]	; (80040ec <init_motor_controller+0x234>)
 8003faa:	f7ff fc7d 	bl	80038a8 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Index.PID_Struct, 0, 100);
 8003fae:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8004098 <init_motor_controller+0x1e0>
 8003fb2:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8004080 <init_motor_controller+0x1c8>
 8003fb6:	484d      	ldr	r0, [pc, #308]	; (80040ec <init_motor_controller+0x234>)
 8003fb8:	f7ff fb20 	bl	80035fc <PID_SetOutputLimits>
	//********MIDDLE
	PID(&Fingers_Status.Middle.PID_Struct, &Fingers_Status.Middle.position, &Fingers_Status.Middle.speed, &Fingers_Status.Middle.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	ed9f 2b2e 	vldr	d2, [pc, #184]	; 8004080 <init_motor_controller+0x1c8>
 8003fc8:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8004088 <init_motor_controller+0x1d0>
 8003fcc:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8004090 <init_motor_controller+0x1d8>
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <init_motor_controller+0x238>)
 8003fd2:	4a48      	ldr	r2, [pc, #288]	; (80040f4 <init_motor_controller+0x23c>)
 8003fd4:	4948      	ldr	r1, [pc, #288]	; (80040f8 <init_motor_controller+0x240>)
 8003fd6:	4849      	ldr	r0, [pc, #292]	; (80040fc <init_motor_controller+0x244>)
 8003fd8:	f7ff f99a 	bl	8003310 <PID>
	PID_SetMode(&Fingers_Status.Middle.PID_Struct, _PID_MODE_AUTOMATIC);
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4847      	ldr	r0, [pc, #284]	; (80040fc <init_motor_controller+0x244>)
 8003fe0:	f7ff faee 	bl	80035c0 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Middle.PID_Struct, 100);
 8003fe4:	2164      	movs	r1, #100	; 0x64
 8003fe6:	4845      	ldr	r0, [pc, #276]	; (80040fc <init_motor_controller+0x244>)
 8003fe8:	f7ff fc5e 	bl	80038a8 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Middle.PID_Struct, 0, 100);
 8003fec:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8004098 <init_motor_controller+0x1e0>
 8003ff0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8004080 <init_motor_controller+0x1c8>
 8003ff4:	4841      	ldr	r0, [pc, #260]	; (80040fc <init_motor_controller+0x244>)
 8003ff6:	f7ff fb01 	bl	80035fc <PID_SetOutputLimits>
	//********RING
	PID(&Fingers_Status.Ring.PID_Struct, &Fingers_Status.Ring.position, &Fingers_Status.Ring.speed, &Fingers_Status.Ring.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	2301      	movs	r3, #1
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8004080 <init_motor_controller+0x1c8>
 8004006:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8004088 <init_motor_controller+0x1d0>
 800400a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004090 <init_motor_controller+0x1d8>
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <init_motor_controller+0x248>)
 8004010:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <init_motor_controller+0x24c>)
 8004012:	493d      	ldr	r1, [pc, #244]	; (8004108 <init_motor_controller+0x250>)
 8004014:	483d      	ldr	r0, [pc, #244]	; (800410c <init_motor_controller+0x254>)
 8004016:	f7ff f97b 	bl	8003310 <PID>
	PID_SetMode(&Fingers_Status.Ring.PID_Struct, _PID_MODE_AUTOMATIC);
 800401a:	2101      	movs	r1, #1
 800401c:	483b      	ldr	r0, [pc, #236]	; (800410c <init_motor_controller+0x254>)
 800401e:	f7ff facf 	bl	80035c0 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Ring.PID_Struct, 100);
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	4839      	ldr	r0, [pc, #228]	; (800410c <init_motor_controller+0x254>)
 8004026:	f7ff fc3f 	bl	80038a8 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Ring.PID_Struct, 0, 100);
 800402a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004098 <init_motor_controller+0x1e0>
 800402e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8004080 <init_motor_controller+0x1c8>
 8004032:	4836      	ldr	r0, [pc, #216]	; (800410c <init_motor_controller+0x254>)
 8004034:	f7ff fae2 	bl	80035fc <PID_SetOutputLimits>
	//********PINKY
	PID(&Fingers_Status.Pinky.PID_Struct, &Fingers_Status.Pinky.position, &Fingers_Status.Pinky.speed, &Fingers_Status.Pinky.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8004038:	2300      	movs	r3, #0
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	2301      	movs	r3, #1
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8004080 <init_motor_controller+0x1c8>
 8004044:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004088 <init_motor_controller+0x1d0>
 8004048:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004090 <init_motor_controller+0x1d8>
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <init_motor_controller+0x258>)
 800404e:	4a31      	ldr	r2, [pc, #196]	; (8004114 <init_motor_controller+0x25c>)
 8004050:	4931      	ldr	r1, [pc, #196]	; (8004118 <init_motor_controller+0x260>)
 8004052:	4832      	ldr	r0, [pc, #200]	; (800411c <init_motor_controller+0x264>)
 8004054:	f7ff f95c 	bl	8003310 <PID>
	PID_SetMode(&Fingers_Status.Pinky.PID_Struct, _PID_MODE_AUTOMATIC);
 8004058:	2101      	movs	r1, #1
 800405a:	4830      	ldr	r0, [pc, #192]	; (800411c <init_motor_controller+0x264>)
 800405c:	f7ff fab0 	bl	80035c0 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Pinky.PID_Struct, 100);
 8004060:	2164      	movs	r1, #100	; 0x64
 8004062:	482e      	ldr	r0, [pc, #184]	; (800411c <init_motor_controller+0x264>)
 8004064:	f7ff fc20 	bl	80038a8 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Pinky.PID_Struct, 0, 100);
 8004068:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8004098 <init_motor_controller+0x1e0>
 800406c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8004080 <init_motor_controller+0x1c8>
 8004070:	482a      	ldr	r0, [pc, #168]	; (800411c <init_motor_controller+0x264>)
 8004072:	f7ff fac3 	bl	80035fc <PID_SetOutputLimits>
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	f3af 8000 	nop.w
	...
 800408c:	40080000 	.word	0x40080000
 8004090:	00000000 	.word	0x00000000
 8004094:	3ff00000 	.word	0x3ff00000
 8004098:	00000000 	.word	0x00000000
 800409c:	40590000 	.word	0x40590000
 80040a0:	20000a04 	.word	0x20000a04
 80040a4:	2000038c 	.word	0x2000038c
 80040a8:	20000534 	.word	0x20000534
 80040ac:	20000580 	.word	0x20000580
 80040b0:	200004e8 	.word	0x200004e8
 80040b4:	20000618 	.word	0x20000618
 80040b8:	2000049c 	.word	0x2000049c
 80040bc:	20000328 	.word	0x20000328
 80040c0:	20000664 	.word	0x20000664
 80040c4:	20000324 	.word	0x20000324
 80040c8:	200005cc 	.word	0x200005cc
 80040cc:	20000325 	.word	0x20000325
 80040d0:	200006f0 	.word	0x200006f0
 80040d4:	20000708 	.word	0x20000708
 80040d8:	200006f8 	.word	0x200006f8
 80040dc:	20000718 	.word	0x20000718
 80040e0:	20000788 	.word	0x20000788
 80040e4:	200007a0 	.word	0x200007a0
 80040e8:	20000790 	.word	0x20000790
 80040ec:	200007b0 	.word	0x200007b0
 80040f0:	20000820 	.word	0x20000820
 80040f4:	20000838 	.word	0x20000838
 80040f8:	20000828 	.word	0x20000828
 80040fc:	20000848 	.word	0x20000848
 8004100:	200008b8 	.word	0x200008b8
 8004104:	200008d0 	.word	0x200008d0
 8004108:	200008c0 	.word	0x200008c0
 800410c:	200008e0 	.word	0x200008e0
 8004110:	20000950 	.word	0x20000950
 8004114:	20000968 	.word	0x20000968
 8004118:	20000958 	.word	0x20000958
 800411c:	20000978 	.word	0x20000978

08004120 <Fingers_Calibration>:

void Fingers_Calibration(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	//read current until stable
	while(calibration_counter<500)
 8004124:	e009      	b.n	800413a <Fingers_Calibration+0x1a>
	{
		ADC_ReadCurrent_Thumb();
 8004126:	f7fd fc5f 	bl	80019e8 <ADC_ReadCurrent_Thumb>
		ADC_ReadCurrent_Index();
 800412a:	f7fd fc05 	bl	8001938 <ADC_ReadCurrent_Index>
		ADC_ReadCurrent_Middle();
 800412e:	f7fd fbaf 	bl	8001890 <ADC_ReadCurrent_Middle>
		ADC_ReadCurrent_Ring();
 8004132:	f7fd fb55 	bl	80017e0 <ADC_ReadCurrent_Ring>
		ADC_ReadCurrent_Pinky();
 8004136:	f7fd faf3 	bl	8001720 <ADC_ReadCurrent_Pinky>
	while(calibration_counter<500)
 800413a:	4b82      	ldr	r3, [pc, #520]	; (8004344 <Fingers_Calibration+0x224>)
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004144:	d3ef      	bcc.n	8004126 <Fingers_Calibration+0x6>
//	SetMotor(Thumb, &Fingers_Status.Thumb);
//	Fingers_Status.Thumb.Stuck_Finger=0;
//	Fingers_Status.Thumb.Encoder=Max_Encoder_Thumb;
//	Fingers_Status.Thumb.SetPoint=100;
	//------------------------------| Index finger |----------------------------------------
	Fingers_Status.Index.Direction_motor=Open;
 8004146:	4b80      	ldr	r3, [pc, #512]	; (8004348 <Fingers_Calibration+0x228>)
 8004148:	2201      	movs	r2, #1
 800414a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	calibration_counter=0;
 800414e:	4b7d      	ldr	r3, [pc, #500]	; (8004344 <Fingers_Calibration+0x224>)
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<60)
 8004154:	e00b      	b.n	800416e <Fingers_Calibration+0x4e>
	{
		Fingers_Status.Index.speed=60;
 8004156:	497c      	ldr	r1, [pc, #496]	; (8004348 <Fingers_Calibration+0x228>)
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	4b7b      	ldr	r3, [pc, #492]	; (800434c <Fingers_Calibration+0x22c>)
 800415e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
		SetMotor(Index, &Fingers_Status.Index);
 8004162:	497b      	ldr	r1, [pc, #492]	; (8004350 <Fingers_Calibration+0x230>)
 8004164:	2001      	movs	r0, #1
 8004166:	f7ff fd01 	bl	8003b6c <SetMotor>
		ADC_ReadCurrent_Index();
 800416a:	f7fd fbe5 	bl	8001938 <ADC_ReadCurrent_Index>
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<60)
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <Fingers_Calibration+0x228>)
 8004170:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004174:	f083 0301 	eor.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1eb      	bne.n	8004156 <Fingers_Calibration+0x36>
 800417e:	4b71      	ldr	r3, [pc, #452]	; (8004344 <Fingers_Calibration+0x224>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b3b      	cmp	r3, #59	; 0x3b
 8004186:	d9e6      	bls.n	8004156 <Fingers_Calibration+0x36>
	}
	Fingers_Status.Index.Direction_motor=Stop;
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <Fingers_Calibration+0x228>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	Fingers_Status.Index.speed=0;
 8004190:	496d      	ldr	r1, [pc, #436]	; (8004348 <Fingers_Calibration+0x228>)
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	SetMotor(Index, &Fingers_Status.Index);
 800419e:	496c      	ldr	r1, [pc, #432]	; (8004350 <Fingers_Calibration+0x230>)
 80041a0:	2001      	movs	r0, #1
 80041a2:	f7ff fce3 	bl	8003b6c <SetMotor>
	Fingers_Status.Index.Stuck_Finger=0;
 80041a6:	4b68      	ldr	r3, [pc, #416]	; (8004348 <Fingers_Calibration+0x228>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	Fingers_Status.Index.Encoder=Max_Encoder_Index;
 80041ae:	4b66      	ldr	r3, [pc, #408]	; (8004348 <Fingers_Calibration+0x228>)
 80041b0:	f246 7284 	movw	r2, #26500	; 0x6784
 80041b4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	Fingers_Status.Index.SetPoint=100;
 80041b8:	4963      	ldr	r1, [pc, #396]	; (8004348 <Fingers_Calibration+0x228>)
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4b65      	ldr	r3, [pc, #404]	; (8004354 <Fingers_Calibration+0x234>)
 80041c0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	//------------------------------| Middle finger |----------------------------------------
	Fingers_Status.Middle.Direction_motor=Open;
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <Fingers_Calibration+0x228>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	calibration_counter=0;
 80041cc:	4b5d      	ldr	r3, [pc, #372]	; (8004344 <Fingers_Calibration+0x224>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<60)
 80041d2:	e00b      	b.n	80041ec <Fingers_Calibration+0xcc>
	{
		Fingers_Status.Middle.speed=60;
 80041d4:	495c      	ldr	r1, [pc, #368]	; (8004348 <Fingers_Calibration+0x228>)
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	4b5c      	ldr	r3, [pc, #368]	; (800434c <Fingers_Calibration+0x22c>)
 80041dc:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
		SetMotor(Middle, &Fingers_Status.Middle);
 80041e0:	495d      	ldr	r1, [pc, #372]	; (8004358 <Fingers_Calibration+0x238>)
 80041e2:	2002      	movs	r0, #2
 80041e4:	f7ff fcc2 	bl	8003b6c <SetMotor>
		ADC_ReadCurrent_Middle();
 80041e8:	f7fd fb52 	bl	8001890 <ADC_ReadCurrent_Middle>
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<60)
 80041ec:	4b56      	ldr	r3, [pc, #344]	; (8004348 <Fingers_Calibration+0x228>)
 80041ee:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1eb      	bne.n	80041d4 <Fingers_Calibration+0xb4>
 80041fc:	4b51      	ldr	r3, [pc, #324]	; (8004344 <Fingers_Calibration+0x224>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b3b      	cmp	r3, #59	; 0x3b
 8004204:	d9e6      	bls.n	80041d4 <Fingers_Calibration+0xb4>
	}
	Fingers_Status.Middle.Direction_motor=Stop;
 8004206:	4b50      	ldr	r3, [pc, #320]	; (8004348 <Fingers_Calibration+0x228>)
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	Fingers_Status.Middle.speed=0;
 800420e:	494e      	ldr	r1, [pc, #312]	; (8004348 <Fingers_Calibration+0x228>)
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
	SetMotor(Middle, &Fingers_Status.Middle);
 800421c:	494e      	ldr	r1, [pc, #312]	; (8004358 <Fingers_Calibration+0x238>)
 800421e:	2002      	movs	r0, #2
 8004220:	f7ff fca4 	bl	8003b6c <SetMotor>
	Fingers_Status.Middle.Stuck_Finger=0;
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <Fingers_Calibration+0x228>)
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <Fingers_Calibration+0x228>)
 800422e:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8004232:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	Fingers_Status.Middle.SetPoint=100;
 8004236:	4944      	ldr	r1, [pc, #272]	; (8004348 <Fingers_Calibration+0x228>)
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	4b45      	ldr	r3, [pc, #276]	; (8004354 <Fingers_Calibration+0x234>)
 800423e:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	//------------------------------| Ring finger |----------------------------------------
	Fingers_Status.Ring.Direction_motor=Open;
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <Fingers_Calibration+0x228>)
 8004244:	2201      	movs	r2, #1
 8004246:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	calibration_counter=0;
 800424a:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <Fingers_Calibration+0x224>)
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<60)
 8004250:	e00b      	b.n	800426a <Fingers_Calibration+0x14a>
	{
		Fingers_Status.Ring.speed=60;
 8004252:	493d      	ldr	r1, [pc, #244]	; (8004348 <Fingers_Calibration+0x228>)
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	4b3c      	ldr	r3, [pc, #240]	; (800434c <Fingers_Calibration+0x22c>)
 800425a:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
		SetMotor(Ring, &Fingers_Status.Ring);
 800425e:	493f      	ldr	r1, [pc, #252]	; (800435c <Fingers_Calibration+0x23c>)
 8004260:	2003      	movs	r0, #3
 8004262:	f7ff fc83 	bl	8003b6c <SetMotor>
		ADC_ReadCurrent_Ring();
 8004266:	f7fd fabb 	bl	80017e0 <ADC_ReadCurrent_Ring>
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<60)
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <Fingers_Calibration+0x228>)
 800426c:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 8004270:	f083 0301 	eor.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1eb      	bne.n	8004252 <Fingers_Calibration+0x132>
 800427a:	4b32      	ldr	r3, [pc, #200]	; (8004344 <Fingers_Calibration+0x224>)
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b3b      	cmp	r3, #59	; 0x3b
 8004282:	d9e6      	bls.n	8004252 <Fingers_Calibration+0x132>
	}
	Fingers_Status.Ring.Direction_motor=Stop;
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <Fingers_Calibration+0x228>)
 8004286:	2200      	movs	r2, #0
 8004288:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	Fingers_Status.Ring.speed=0;
 800428c:	492e      	ldr	r1, [pc, #184]	; (8004348 <Fingers_Calibration+0x228>)
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
	SetMotor(Ring, &Fingers_Status.Ring);
 800429a:	4930      	ldr	r1, [pc, #192]	; (800435c <Fingers_Calibration+0x23c>)
 800429c:	2003      	movs	r0, #3
 800429e:	f7ff fc65 	bl	8003b6c <SetMotor>
	Fingers_Status.Ring.Stuck_Finger=0;
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <Fingers_Calibration+0x228>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <Fingers_Calibration+0x228>)
 80042ac:	f645 7250 	movw	r2, #24400	; 0x5f50
 80042b0:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
	Fingers_Status.Ring.SetPoint=100;
 80042b4:	4924      	ldr	r1, [pc, #144]	; (8004348 <Fingers_Calibration+0x228>)
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	4b26      	ldr	r3, [pc, #152]	; (8004354 <Fingers_Calibration+0x234>)
 80042bc:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	//------------------------------| Pinky finger |----------------------------------------
	Fingers_Status.Pinky.Direction_motor=Open;
 80042c0:	4b21      	ldr	r3, [pc, #132]	; (8004348 <Fingers_Calibration+0x228>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
	calibration_counter=0;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <Fingers_Calibration+0x224>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<60)
 80042ce:	e00b      	b.n	80042e8 <Fingers_Calibration+0x1c8>
	{
		Fingers_Status.Pinky.speed=60;
 80042d0:	491d      	ldr	r1, [pc, #116]	; (8004348 <Fingers_Calibration+0x228>)
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <Fingers_Calibration+0x22c>)
 80042d8:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
		SetMotor(Pinky, &Fingers_Status.Pinky);
 80042dc:	4920      	ldr	r1, [pc, #128]	; (8004360 <Fingers_Calibration+0x240>)
 80042de:	2004      	movs	r0, #4
 80042e0:	f7ff fc44 	bl	8003b6c <SetMotor>
		ADC_ReadCurrent_Pinky();
 80042e4:	f7fd fa1c 	bl	8001720 <ADC_ReadCurrent_Pinky>
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<60)
 80042e8:	4b17      	ldr	r3, [pc, #92]	; (8004348 <Fingers_Calibration+0x228>)
 80042ea:	f893 3277 	ldrb.w	r3, [r3, #631]	; 0x277
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1eb      	bne.n	80042d0 <Fingers_Calibration+0x1b0>
 80042f8:	4b12      	ldr	r3, [pc, #72]	; (8004344 <Fingers_Calibration+0x224>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b3b      	cmp	r3, #59	; 0x3b
 8004300:	d9e6      	bls.n	80042d0 <Fingers_Calibration+0x1b0>
	}
	Fingers_Status.Pinky.Direction_motor=Stop;
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <Fingers_Calibration+0x228>)
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
	Fingers_Status.Pinky.speed=0;
 800430a:	490f      	ldr	r1, [pc, #60]	; (8004348 <Fingers_Calibration+0x228>)
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
	SetMotor(Pinky, &Fingers_Status.Pinky);
 8004318:	4911      	ldr	r1, [pc, #68]	; (8004360 <Fingers_Calibration+0x240>)
 800431a:	2004      	movs	r0, #4
 800431c:	f7ff fc26 	bl	8003b6c <SetMotor>
	Fingers_Status.Pinky.Stuck_Finger=0;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <Fingers_Calibration+0x228>)
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
	Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <Fingers_Calibration+0x228>)
 800432a:	f246 52f4 	movw	r2, #26100	; 0x65f4
 800432e:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
	Fingers_Status.Pinky.SetPoint=100;
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <Fingers_Calibration+0x228>)
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <Fingers_Calibration+0x234>)
 800433a:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000a10 	.word	0x20000a10
 8004348:	200006f0 	.word	0x200006f0
 800434c:	404e0000 	.word	0x404e0000
 8004350:	20000788 	.word	0x20000788
 8004354:	40590000 	.word	0x40590000
 8004358:	20000820 	.word	0x20000820
 800435c:	200008b8 	.word	0x200008b8
 8004360:	20000950 	.word	0x20000950
 8004364:	00000000 	.word	0x00000000

08004368 <Control_Motor>:
void Control_Motor(Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
	if(FingerStruct->SetPoint-FingerStruct->position>0.1)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004380:	f7fb ff82 	bl	8000288 <__aeabi_dsub>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	a34f      	add	r3, pc, #316	; (adr r3, 80044cc <Control_Motor+0x164>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fc fbc1 	bl	8000b18 <__aeabi_dcmpgt>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00f      	beq.n	80043bc <Control_Motor+0x54>
	{
		FingerStruct->Direction_motor=Open;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2201      	movs	r2, #1
 80043a0:	749a      	strb	r2, [r3, #18]
		FingerStruct->Direction_Encoder=Open;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	74da      	strb	r2, [r3, #19]
		FingerStruct->ChangeDirection=0;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	751a      	strb	r2, [r3, #20]
		PID_SetControllerDirection(&FingerStruct->PID_Struct, _PID_CD_DIRECT);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	3328      	adds	r3, #40	; 0x28
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fa37 	bl	8003828 <PID_SetControllerDirection>
 80043ba:	e026      	b.n	800440a <Control_Motor+0xa2>
	}
	else if (FingerStruct->SetPoint-FingerStruct->position<-0.1)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043c8:	f7fb ff5e 	bl	8000288 <__aeabi_dsub>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	a33f      	add	r3, pc, #252	; (adr r3, 80044d4 <Control_Motor+0x16c>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fc fb7f 	bl	8000adc <__aeabi_dcmplt>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00f      	beq.n	8004404 <Control_Motor+0x9c>
	{
		FingerStruct->Direction_motor=Close;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	749a      	strb	r2, [r3, #18]
		FingerStruct->Direction_Encoder=Close;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2202      	movs	r2, #2
 80043ee:	74da      	strb	r2, [r3, #19]
		FingerStruct->ChangeDirection=0;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	751a      	strb	r2, [r3, #20]
		PID_SetControllerDirection(&FingerStruct->PID_Struct, _PID_CD_REVERSE);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3328      	adds	r3, #40	; 0x28
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fa13 	bl	8003828 <PID_SetControllerDirection>
 8004402:	e002      	b.n	800440a <Control_Motor+0xa2>
	}
	else
	{
		FingerStruct->Direction_motor=Stop;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	749a      	strb	r2, [r3, #18]
	}
	if(FingerStruct->Stuck_Finger)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	7ddb      	ldrb	r3, [r3, #23]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d051      	beq.n	80044b6 <Control_Motor+0x14e>
	{
		if( FingerStruct->Current_Counter>600)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004416:	b29b      	uxth	r3, r3
 8004418:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800441c:	d94e      	bls.n	80044bc <Control_Motor+0x154>
		{
			if(FingerStruct->Direction_motor==Open)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7c9b      	ldrb	r3, [r3, #18]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d128      	bne.n	8004478 <Control_Motor+0x110>
			{
				switch (FingerName) {
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d838      	bhi.n	800449e <Control_Motor+0x136>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <Control_Motor+0xcc>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004449 	.word	0x08004449
 8004438:	08004451 	.word	0x08004451
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446f 	.word	0x0800446f
				case Thumb:
					FingerStruct->Encoder=Max_Encoder_Thumb;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	821a      	strh	r2, [r3, #16]
					break;
 800444e:	e027      	b.n	80044a0 <Control_Motor+0x138>
				case Index:
					FingerStruct->Encoder=Max_Encoder_Index;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f246 7284 	movw	r2, #26500	; 0x6784
 8004456:	821a      	strh	r2, [r3, #16]
					break;
 8004458:	e022      	b.n	80044a0 <Control_Motor+0x138>
				case Middle:
					FingerStruct->Encoder=Max_Encoder_Middle;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8004460:	821a      	strh	r2, [r3, #16]
					break;
 8004462:	e01d      	b.n	80044a0 <Control_Motor+0x138>
				case Ring:
					FingerStruct->Encoder=Max_Encoder_Ring;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f645 7250 	movw	r2, #24400	; 0x5f50
 800446a:	821a      	strh	r2, [r3, #16]
					break;
 800446c:	e018      	b.n	80044a0 <Control_Motor+0x138>
				case Pinky:
					FingerStruct->Encoder=Max_Encoder_Pinky;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8004474:	821a      	strh	r2, [r3, #16]
					break;
 8004476:	e013      	b.n	80044a0 <Control_Motor+0x138>
				default:
					break;
				}
			}
			else if(FingerStruct->Direction_motor==Close && FingerStruct->position<5 )
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	7c9b      	ldrb	r3, [r3, #18]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d10f      	bne.n	80044a0 <Control_Motor+0x138>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <Control_Motor+0x160>)
 800448c:	f7fc fb26 	bl	8000adc <__aeabi_dcmplt>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <Control_Motor+0x138>
				FingerStruct->Encoder=0;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	821a      	strh	r2, [r3, #16]
 800449c:	e000      	b.n	80044a0 <Control_Motor+0x138>
					break;
 800449e:	bf00      	nop
			FingerStruct->Direction_motor=Stop;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	749a      	strb	r2, [r3, #18]
			FingerStruct->speed=0;
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		}
	}else
		FingerStruct->Current_Counter=0;
}
 80044b4:	e002      	b.n	80044bc <Control_Motor+0x154>
		FingerStruct->Current_Counter=0;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	f3af 8000 	nop.w
 80044c8:	40140000 	.word	0x40140000
 80044cc:	9999999a 	.word	0x9999999a
 80044d0:	3fb99999 	.word	0x3fb99999
 80044d4:	9999999a 	.word	0x9999999a
 80044d8:	bfb99999 	.word	0xbfb99999

080044dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044e0:	f7fe fa3c 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e4:	480c      	ldr	r0, [pc, #48]	; (8004518 <LoopForever+0x6>)
  ldr r1, =_edata
 80044e6:	490d      	ldr	r1, [pc, #52]	; (800451c <LoopForever+0xa>)
  ldr r2, =_sidata
 80044e8:	4a0d      	ldr	r2, [pc, #52]	; (8004520 <LoopForever+0xe>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ec:	e002      	b.n	80044f4 <LoopCopyDataInit>

080044ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f2:	3304      	adds	r3, #4

080044f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f8:	d3f9      	bcc.n	80044ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044fc:	4c0a      	ldr	r4, [pc, #40]	; (8004528 <LoopForever+0x16>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004500:	e001      	b.n	8004506 <LoopFillZerobss>

08004502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004504:	3204      	adds	r2, #4

08004506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004508:	d3fb      	bcc.n	8004502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800450a:	f007 fd2f 	bl	800bf6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800450e:	f7fd fe9d 	bl	800224c <main>

08004512 <LoopForever>:

LoopForever:
    b LoopForever
 8004512:	e7fe      	b.n	8004512 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004520:	0800eebc 	.word	0x0800eebc
  ldr r2, =_sbss
 8004524:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004528:	20000b64 	.word	0x20000b64

0800452c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC1_2_IRQHandler>

0800452e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004538:	2003      	movs	r0, #3
 800453a:	f001 fc3f 	bl	8005dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800453e:	2002      	movs	r0, #2
 8004540:	f000 f80e 	bl	8004560 <HAL_InitTick>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	71fb      	strb	r3, [r7, #7]
 800454e:	e001      	b.n	8004554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004550:	f7fe f856 	bl	8002600 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004554:	79fb      	ldrb	r3, [r7, #7]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_InitTick+0x6c>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d023      	beq.n	80045bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_InitTick+0x70>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_InitTick+0x6c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004582:	fbb3 f3f1 	udiv	r3, r3, r1
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fc4b 	bl	8005e26 <HAL_SYSTICK_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0f      	cmp	r3, #15
 800459a:	d809      	bhi.n	80045b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800459c:	2200      	movs	r2, #0
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	f001 fc15 	bl	8005dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_InitTick+0x74>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e007      	b.n	80045c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	e004      	b.n	80045c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e001      	b.n	80045c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000008 	.word	0x20000008
 80045d0:	20000000 	.word	0x20000000
 80045d4:	20000004 	.word	0x20000004

080045d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_IncTick+0x20>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_IncTick+0x24>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_IncTick+0x24>)
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000008 	.word	0x20000008
 80045fc:	20000a14 	.word	0x20000a14

08004600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return uwTick;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_GetTick+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000a14 	.word	0x20000a14

08004618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff ffee 	bl	8004600 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d005      	beq.n	800463e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_Delay+0x44>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800463e:	bf00      	nop
 8004640:	f7ff ffde 	bl	8004600 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	d8f7      	bhi.n	8004640 <HAL_Delay+0x28>
  {
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000008 	.word	0x20000008

08004660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3360      	adds	r3, #96	; 0x60
 80046da:	461a      	mov	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b08      	ldr	r3, [pc, #32]	; (800470c <LL_ADC_SetOffset+0x44>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	03fff000 	.word	0x03fff000

08004710 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3360      	adds	r3, #96	; 0x60
 800471e:	461a      	mov	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3360      	adds	r3, #96	; 0x60
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	431a      	orrs	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3330      	adds	r3, #48	; 0x30
 80047a8:	461a      	mov	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	4413      	add	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	211f      	movs	r1, #31
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0e9b      	lsrs	r3, r3, #26
 80047d0:	f003 011f 	and.w	r1, r3, #31
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	431a      	orrs	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3314      	adds	r3, #20
 8004800:	461a      	mov	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	0e5b      	lsrs	r3, r3, #25
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	4413      	add	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	0d1b      	lsrs	r3, r3, #20
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2107      	movs	r1, #7
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	401a      	ands	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0d1b      	lsrs	r3, r3, #20
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	431a      	orrs	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0318 	and.w	r3, r3, #24
 800486a:	4908      	ldr	r1, [pc, #32]	; (800488c <LL_ADC_SetChannelSingleDiff+0x44>)
 800486c:	40d9      	lsrs	r1, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	400b      	ands	r3, r1
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	431a      	orrs	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	0007ffff 	.word	0x0007ffff

08004890 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 031f 	and.w	r3, r3, #31
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80048bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6093      	str	r3, [r2, #8]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e4:	d101      	bne.n	80048ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800490c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004934:	d101      	bne.n	800493a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <LL_ADC_IsEnabled+0x18>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <LL_ADC_IsEnabled+0x1a>
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049aa:	f043 0204 	orr.w	r2, r3, #4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d101      	bne.n	80049d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d101      	bne.n	80049fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e130      	b.n	8004c88 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fc fd93 	bl	8001560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff3f 	bl	80048d0 <LL_ADC_IsDeepPowerDownEnabled>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff25 	bl	80048ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff5a 	bl	8004920 <LL_ADC_IsInternalRegulatorEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d115      	bne.n	8004a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff3e 	bl	80048f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a7c:	4b84      	ldr	r3, [pc, #528]	; (8004c90 <HAL_ADC_Init+0x284>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	4a84      	ldr	r2, [pc, #528]	; (8004c94 <HAL_ADC_Init+0x288>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a90:	e002      	b.n	8004a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f9      	bne.n	8004a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ff3c 	bl	8004920 <LL_ADC_IsInternalRegulatorEnabled>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff ff75 	bl	80049be <LL_ADC_REG_IsConversionOngoing>
 8004ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 80c9 	bne.w	8004c76 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80c5 	bne.w	8004c76 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004af4:	f043 0202 	orr.w	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff35 	bl	8004970 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b0c:	4862      	ldr	r0, [pc, #392]	; (8004c98 <HAL_ADC_Init+0x28c>)
 8004b0e:	f7ff ff2f 	bl	8004970 <LL_ADC_IsEnabled>
 8004b12:	4604      	mov	r4, r0
 8004b14:	4861      	ldr	r0, [pc, #388]	; (8004c9c <HAL_ADC_Init+0x290>)
 8004b16:	f7ff ff2b 	bl	8004970 <LL_ADC_IsEnabled>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	431c      	orrs	r4, r3
 8004b1e:	4860      	ldr	r0, [pc, #384]	; (8004ca0 <HAL_ADC_Init+0x294>)
 8004b20:	f7ff ff26 	bl	8004970 <LL_ADC_IsEnabled>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4323      	orrs	r3, r4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4619      	mov	r1, r3
 8004b32:	485c      	ldr	r0, [pc, #368]	; (8004ca4 <HAL_ADC_Init+0x298>)
 8004b34:	f7ff fd94 	bl	8004660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7e5b      	ldrb	r3, [r3, #25]
 8004b3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d106      	bne.n	8004b74 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	045b      	lsls	r3, r3, #17
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	4b44      	ldr	r3, [pc, #272]	; (8004ca8 <HAL_ADC_Init+0x29c>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff1b 	bl	80049e4 <LL_ADC_INJ_IsConversionOngoing>
 8004bae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d13d      	bne.n	8004c32 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d13a      	bne.n	8004c32 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bc0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bc8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd8:	f023 0302 	bic.w	r3, r3, #2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	430b      	orrs	r3, r1
 8004be4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d118      	bne.n	8004c22 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bfa:	f023 0304 	bic.w	r3, r3, #4
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c12:	430a      	orrs	r2, r1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	611a      	str	r2, [r3, #16]
 8004c20:	e007      	b.n	8004c32 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10c      	bne.n	8004c54 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f023 010f 	bic.w	r1, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
 8004c52:	e007      	b.n	8004c64 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 020f 	bic.w	r2, r2, #15
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f023 0303 	bic.w	r3, r3, #3
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
 8004c74:	e007      	b.n	8004c86 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3724      	adds	r7, #36	; 0x24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}
 8004c90:	20000000 	.word	0x20000000
 8004c94:	053e2d63 	.word	0x053e2d63
 8004c98:	50040000 	.word	0x50040000
 8004c9c:	50040100 	.word	0x50040100
 8004ca0:	50040200 	.word	0x50040200
 8004ca4:	50040300 	.word	0x50040300
 8004ca8:	fff0c007 	.word	0xfff0c007

08004cac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cb8:	4853      	ldr	r0, [pc, #332]	; (8004e08 <HAL_ADC_Start_DMA+0x15c>)
 8004cba:	f7ff fde9 	bl	8004890 <LL_ADC_GetMultimode>
 8004cbe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fe7a 	bl	80049be <LL_ADC_REG_IsConversionOngoing>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8093 	bne.w	8004df8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_Start_DMA+0x34>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e08e      	b.n	8004dfe <HAL_ADC_Start_DMA+0x152>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a47      	ldr	r2, [pc, #284]	; (8004e0c <HAL_ADC_Start_DMA+0x160>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d008      	beq.n	8004d04 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d002      	beq.n	8004d04 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b09      	cmp	r3, #9
 8004d02:	d172      	bne.n	8004dea <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fc9d 	bl	8005644 <ADC_Enable>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d165      	bne.n	8004de0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_ADC_Start_DMA+0x164>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d002      	beq.n	8004d38 <HAL_ADC_Start_DMA+0x8c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <HAL_ADC_Start_DMA+0x8e>
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <HAL_ADC_Start_DMA+0x168>)
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d002      	beq.n	8004d48 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	f023 0206 	bic.w	r2, r3, #6
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d6c:	e002      	b.n	8004d74 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <HAL_ADC_Start_DMA+0x16c>)
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <HAL_ADC_Start_DMA+0x170>)
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <HAL_ADC_Start_DMA+0x174>)
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	221c      	movs	r2, #28
 8004d92:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0210 	orr.w	r2, r2, #16
 8004daa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3340      	adds	r3, #64	; 0x40
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f001 f8f0 	bl	8005fb0 <HAL_DMA_Start_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fddc 	bl	8004996 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004dde:	e00d      	b.n	8004dfc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004de8:	e008      	b.n	8004dfc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004df6:	e001      	b.n	8004dfc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	50040300 	.word	0x50040300
 8004e0c:	50040200 	.word	0x50040200
 8004e10:	50040100 	.word	0x50040100
 8004e14:	50040000 	.word	0x50040000
 8004e18:	08005751 	.word	0x08005751
 8004e1c:	08005829 	.word	0x08005829
 8004e20:	08005845 	.word	0x08005845

08004e24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b0b6      	sub	sp, #216	; 0xd8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x22>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e3c9      	b.n	8005616 <HAL_ADC_ConfigChannel+0x7b6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd95 	bl	80049be <LL_ADC_REG_IsConversionOngoing>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 83aa 	bne.w	80055f0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d824      	bhi.n	8004ef6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	3b02      	subs	r3, #2
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d81b      	bhi.n	8004eee <HAL_ADC_ConfigChannel+0x8e>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_ADC_ConfigChannel+0x5c>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee5 	.word	0x08004ee5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004ecc:	230c      	movs	r3, #12
 8004ece:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ed2:	e010      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004ed4:	2312      	movs	r3, #18
 8004ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004eda:	e00c      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004edc:	2318      	movs	r3, #24
 8004ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ee2:	e008      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004eec:	e003      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004eee:	2306      	movs	r3, #6
 8004ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ef4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004f04:	f7ff fc48 	bl	8004798 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fd56 	bl	80049be <LL_ADC_REG_IsConversionOngoing>
 8004f12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd62 	bl	80049e4 <LL_ADC_INJ_IsConversionOngoing>
 8004f20:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 81a4 	bne.w	8005276 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 819f 	bne.w	8005276 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	461a      	mov	r2, r3
 8004f46:	f7ff fc53 	bl	80047f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d00a      	beq.n	8004f82 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6919      	ldr	r1, [r3, #16]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f7c:	f7ff fba4 	bl	80046c8 <LL_ADC_SetOffset>
 8004f80:	e179      	b.n	8005276 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fbc1 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x14e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fbb6 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	e01e      	b.n	8004fec <HAL_ADC_ConfigChannel+0x18c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fbab 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	e004      	b.n	8004fea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x1a4>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	e018      	b.n	8005036 <HAL_ADC_ConfigChannel+0x1d6>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800501c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e004      	b.n	8005036 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800502c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005036:	429a      	cmp	r2, r3
 8005038:	d106      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fb7a 	bl	800473c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2101      	movs	r1, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fb5e 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8005054:	4603      	mov	r3, r0
 8005056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x214>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fb53 	bl	8004710 <LL_ADC_GetOffsetChannel>
 800506a:	4603      	mov	r3, r0
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	f003 021f 	and.w	r2, r3, #31
 8005072:	e01e      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x252>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fb48 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8005080:	4603      	mov	r3, r0
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800509a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e004      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80050a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_ADC_ConfigChannel+0x26a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0e9b      	lsrs	r3, r3, #26
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	e018      	b.n	80050fc <HAL_ADC_ConfigChannel+0x29c>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80050de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80050e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80050ee:	2320      	movs	r3, #32
 80050f0:	e004      	b.n	80050fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80050f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d106      	bne.n	800510e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2200      	movs	r2, #0
 8005106:	2101      	movs	r1, #1
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fb17 	bl	800473c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fafb 	bl	8004710 <LL_ADC_GetOffsetChannel>
 800511a:	4603      	mov	r3, r0
 800511c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_ADC_ConfigChannel+0x2da>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff faf0 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8005130:	4603      	mov	r3, r0
 8005132:	0e9b      	lsrs	r3, r3, #26
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	e01e      	b.n	8005178 <HAL_ADC_ConfigChannel+0x318>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fae5 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8005146:	4603      	mov	r3, r0
 8005148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800515c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005168:	2320      	movs	r3, #32
 800516a:	e004      	b.n	8005176 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800516c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x330>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	0e9b      	lsrs	r3, r3, #26
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	e014      	b.n	80051ba <HAL_ADC_ConfigChannel+0x35a>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005198:	fa93 f3a3 	rbit	r3, r3
 800519c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800519e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80051a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80051ac:	2320      	movs	r3, #32
 80051ae:	e004      	b.n	80051ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80051b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d106      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fab8 	bl	800473c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2103      	movs	r1, #3
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fa9c 	bl	8004710 <LL_ADC_GetOffsetChannel>
 80051d8:	4603      	mov	r3, r0
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x398>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2103      	movs	r1, #3
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fa91 	bl	8004710 <LL_ADC_GetOffsetChannel>
 80051ee:	4603      	mov	r3, r0
 80051f0:	0e9b      	lsrs	r3, r3, #26
 80051f2:	f003 021f 	and.w	r2, r3, #31
 80051f6:	e017      	b.n	8005228 <HAL_ADC_ConfigChannel+0x3c8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2103      	movs	r1, #3
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fa86 	bl	8004710 <LL_ADC_GetOffsetChannel>
 8005204:	4603      	mov	r3, r0
 8005206:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800521a:	2320      	movs	r3, #32
 800521c:	e003      	b.n	8005226 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x3e0>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	0e9b      	lsrs	r3, r3, #26
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	e011      	b.n	8005264 <HAL_ADC_ConfigChannel+0x404>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005248:	fa93 f3a3 	rbit	r3, r3
 800524c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800524e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005250:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005258:	2320      	movs	r3, #32
 800525a:	e003      	b.n	8005264 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800525c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005264:	429a      	cmp	r2, r3
 8005266:	d106      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2200      	movs	r2, #0
 800526e:	2103      	movs	r1, #3
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fa63 	bl	800473c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fb78 	bl	8004970 <LL_ADC_IsEnabled>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 8140 	bne.w	8005508 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	461a      	mov	r2, r3
 8005296:	f7ff fad7 	bl	8004848 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	4a8f      	ldr	r2, [pc, #572]	; (80054dc <HAL_ADC_ConfigChannel+0x67c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	f040 8131 	bne.w	8005508 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x46e>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	0e9b      	lsrs	r3, r3, #26
 80052bc:	3301      	adds	r3, #1
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	bf94      	ite	ls
 80052c6:	2301      	movls	r3, #1
 80052c8:	2300      	movhi	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e019      	b.n	8005302 <HAL_ADC_ConfigChannel+0x4a2>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d6:	fa93 f3a3 	rbit	r3, r3
 80052da:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80052e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80052e6:	2320      	movs	r3, #32
 80052e8:	e003      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80052ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ec:	fab3 f383 	clz	r3, r3
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	3301      	adds	r3, #1
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005302:	2b00      	cmp	r3, #0
 8005304:	d079      	beq.n	80053fa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x4c2>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	3301      	adds	r3, #1
 800531a:	069b      	lsls	r3, r3, #26
 800531c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005320:	e015      	b.n	800534e <HAL_ADC_ConfigChannel+0x4ee>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800533a:	2320      	movs	r3, #32
 800533c:	e003      	b.n	8005346 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	b2db      	uxtb	r3, r3
 8005346:	3301      	adds	r3, #1
 8005348:	069b      	lsls	r3, r3, #26
 800534a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_ADC_ConfigChannel+0x50e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0e9b      	lsrs	r3, r3, #26
 8005360:	3301      	adds	r3, #1
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	e017      	b.n	800539e <HAL_ADC_ConfigChannel+0x53e>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005386:	2320      	movs	r3, #32
 8005388:	e003      	b.n	8005392 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800538a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	3301      	adds	r3, #1
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	ea42 0103 	orr.w	r1, r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x564>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	0e9b      	lsrs	r3, r3, #26
 80053b4:	3301      	adds	r3, #1
 80053b6:	f003 021f 	and.w	r2, r3, #31
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	051b      	lsls	r3, r3, #20
 80053c2:	e018      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x596>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	fa93 f3a3 	rbit	r3, r3
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80053dc:	2320      	movs	r3, #32
 80053de:	e003      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053f6:	430b      	orrs	r3, r1
 80053f8:	e081      	b.n	80054fe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x5b6>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	0e9b      	lsrs	r3, r3, #26
 800540c:	3301      	adds	r3, #1
 800540e:	069b      	lsls	r3, r3, #26
 8005410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005414:	e015      	b.n	8005442 <HAL_ADC_ConfigChannel+0x5e2>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800542e:	2320      	movs	r3, #32
 8005430:	e003      	b.n	800543a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	3301      	adds	r3, #1
 800543c:	069b      	lsls	r3, r3, #26
 800543e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x602>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	0e9b      	lsrs	r3, r3, #26
 8005454:	3301      	adds	r3, #1
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2101      	movs	r1, #1
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	e017      	b.n	8005492 <HAL_ADC_ConfigChannel+0x632>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	61bb      	str	r3, [r7, #24]
  return result;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e003      	b.n	8005486 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	b2db      	uxtb	r3, r3
 8005486:	3301      	adds	r3, #1
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	ea42 0103 	orr.w	r1, r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_ADC_ConfigChannel+0x65e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	0e9b      	lsrs	r3, r3, #26
 80054a8:	3301      	adds	r3, #1
 80054aa:	f003 021f 	and.w	r2, r3, #31
 80054ae:	4613      	mov	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	3b1e      	subs	r3, #30
 80054b6:	051b      	lsls	r3, r3, #20
 80054b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054bc:	e01e      	b.n	80054fc <HAL_ADC_ConfigChannel+0x69c>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	60fb      	str	r3, [r7, #12]
  return result;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80054d6:	2320      	movs	r3, #32
 80054d8:	e006      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x688>
 80054da:	bf00      	nop
 80054dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	3301      	adds	r3, #1
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	3b1e      	subs	r3, #30
 80054f6:	051b      	lsls	r3, r3, #20
 80054f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005502:	4619      	mov	r1, r3
 8005504:	f7ff f974 	bl	80047f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b44      	ldr	r3, [pc, #272]	; (8005620 <HAL_ADC_ConfigChannel+0x7c0>)
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d07a      	beq.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005514:	4843      	ldr	r0, [pc, #268]	; (8005624 <HAL_ADC_ConfigChannel+0x7c4>)
 8005516:	f7ff f8c9 	bl	80046ac <LL_ADC_GetCommonPathInternalCh>
 800551a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a41      	ldr	r2, [pc, #260]	; (8005628 <HAL_ADC_ConfigChannel+0x7c8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d12c      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800552c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d126      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3c      	ldr	r2, [pc, #240]	; (800562c <HAL_ADC_ConfigChannel+0x7cc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_ADC_ConfigChannel+0x6e8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <HAL_ADC_ConfigChannel+0x7d0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d15d      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800554c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005550:	4619      	mov	r1, r3
 8005552:	4834      	ldr	r0, [pc, #208]	; (8005624 <HAL_ADC_ConfigChannel+0x7c4>)
 8005554:	f7ff f897 	bl	8004686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005558:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_ADC_ConfigChannel+0x7d4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	4a36      	ldr	r2, [pc, #216]	; (8005638 <HAL_ADC_ConfigChannel+0x7d8>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	099b      	lsrs	r3, r3, #6
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005572:	e002      	b.n	800557a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f9      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005580:	e040      	b.n	8005604 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2d      	ldr	r2, [pc, #180]	; (800563c <HAL_ADC_ConfigChannel+0x7dc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d118      	bne.n	80055be <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800558c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d112      	bne.n	80055be <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a23      	ldr	r2, [pc, #140]	; (800562c <HAL_ADC_ConfigChannel+0x7cc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_ADC_ConfigChannel+0x74c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_ADC_ConfigChannel+0x7d0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d12d      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b4:	4619      	mov	r1, r3
 80055b6:	481b      	ldr	r0, [pc, #108]	; (8005624 <HAL_ADC_ConfigChannel+0x7c4>)
 80055b8:	f7ff f865 	bl	8004686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055bc:	e024      	b.n	8005608 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <HAL_ADC_ConfigChannel+0x7e0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d120      	bne.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11a      	bne.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_ADC_ConfigChannel+0x7cc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d115      	bne.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055e6:	4619      	mov	r1, r3
 80055e8:	480e      	ldr	r0, [pc, #56]	; (8005624 <HAL_ADC_ConfigChannel+0x7c4>)
 80055ea:	f7ff f84c 	bl	8004686 <LL_ADC_SetCommonPathInternalCh>
 80055ee:	e00c      	b.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005602:	e002      	b.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005608:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005612:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005616:	4618      	mov	r0, r3
 8005618:	37d8      	adds	r7, #216	; 0xd8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	80080000 	.word	0x80080000
 8005624:	50040300 	.word	0x50040300
 8005628:	c7520000 	.word	0xc7520000
 800562c:	50040000 	.word	0x50040000
 8005630:	50040200 	.word	0x50040200
 8005634:	20000000 	.word	0x20000000
 8005638:	053e2d63 	.word	0x053e2d63
 800563c:	cb840000 	.word	0xcb840000
 8005640:	80000001 	.word	0x80000001

08005644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff f98b 	bl	8004970 <LL_ADC_IsEnabled>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d169      	bne.n	8005734 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <ADC_Enable+0xfc>)
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	f043 0210 	orr.w	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	f043 0201 	orr.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e055      	b.n	8005736 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff f95a 	bl	8004948 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005694:	482b      	ldr	r0, [pc, #172]	; (8005744 <ADC_Enable+0x100>)
 8005696:	f7ff f809 	bl	80046ac <LL_ADC_GetCommonPathInternalCh>
 800569a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800569c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <ADC_Enable+0x104>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	4a28      	ldr	r2, [pc, #160]	; (800574c <ADC_Enable+0x108>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056be:	e002      	b.n	80056c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f9      	bne.n	80056c0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056cc:	f7fe ff98 	bl	8004600 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056d2:	e028      	b.n	8005726 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff f949 	bl	8004970 <LL_ADC_IsEnabled>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff f92d 	bl	8004948 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056ee:	f7fe ff87 	bl	8004600 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d914      	bls.n	8005726 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d00d      	beq.n	8005726 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f043 0210 	orr.w	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e007      	b.n	8005736 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d1cf      	bne.n	80056d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	8000003f 	.word	0x8000003f
 8005744:	50040300 	.word	0x50040300
 8005748:	20000000 	.word	0x20000000
 800574c:	053e2d63 	.word	0x053e2d63

08005750 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d14b      	bne.n	8005802 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d021      	beq.n	80057c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe fff2 	bl	8004772 <LL_ADC_REG_IsTriggerSourceSWStart>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d032      	beq.n	80057fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d12b      	bne.n	80057fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11f      	bne.n	80057fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
 80057c6:	e018      	b.n	80057fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d111      	bne.n	80057fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fb12 	bl	8004e24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005800:	e00e      	b.n	8005820 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7ff fb1c 	bl	8004e4c <HAL_ADC_ErrorCallback>
}
 8005814:	e004      	b.n	8005820 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff fafe 	bl	8004e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff faee 	bl	8004e4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <LL_ADC_IsEnabled>:
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <LL_ADC_IsEnabled+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_ADC_IsEnabled+0x1a>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_ADC_REG_IsConversionOngoing>:
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d101      	bne.n	80058b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b09f      	sub	sp, #124	; 0x7c
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058de:	2302      	movs	r3, #2
 80058e0:	e093      	b.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80058ea:	2300      	movs	r3, #0
 80058ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80058ee:	2300      	movs	r3, #0
 80058f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a47      	ldr	r2, [pc, #284]	; (8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d102      	bne.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80058fc:	4b46      	ldr	r3, [pc, #280]	; (8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	e001      	b.n	8005906 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e072      	b.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffb9 	bl	800589e <LL_ADC_REG_IsConversionOngoing>
 800592c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ffb3 	bl	800589e <LL_ADC_REG_IsConversionOngoing>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d154      	bne.n	80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800593e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005940:	2b00      	cmp	r3, #0
 8005942:	d151      	bne.n	80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005944:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005946:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02c      	beq.n	80059aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005962:	035b      	lsls	r3, r3, #13
 8005964:	430b      	orrs	r3, r1
 8005966:	431a      	orrs	r2, r3
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800596c:	4829      	ldr	r0, [pc, #164]	; (8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800596e:	f7ff ff83 	bl	8005878 <LL_ADC_IsEnabled>
 8005972:	4604      	mov	r4, r0
 8005974:	4828      	ldr	r0, [pc, #160]	; (8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005976:	f7ff ff7f 	bl	8005878 <LL_ADC_IsEnabled>
 800597a:	4603      	mov	r3, r0
 800597c:	431c      	orrs	r4, r3
 800597e:	4828      	ldr	r0, [pc, #160]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005980:	f7ff ff7a 	bl	8005878 <LL_ADC_IsEnabled>
 8005984:	4603      	mov	r3, r0
 8005986:	4323      	orrs	r3, r4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d137      	bne.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005994:	f023 030f 	bic.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	6811      	ldr	r1, [r2, #0]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	6892      	ldr	r2, [r2, #8]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	431a      	orrs	r2, r3
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059a8:	e028      	b.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059b6:	4817      	ldr	r0, [pc, #92]	; (8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80059b8:	f7ff ff5e 	bl	8005878 <LL_ADC_IsEnabled>
 80059bc:	4604      	mov	r4, r0
 80059be:	4816      	ldr	r0, [pc, #88]	; (8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80059c0:	f7ff ff5a 	bl	8005878 <LL_ADC_IsEnabled>
 80059c4:	4603      	mov	r3, r0
 80059c6:	431c      	orrs	r4, r3
 80059c8:	4815      	ldr	r0, [pc, #84]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80059ca:	f7ff ff55 	bl	8005878 <LL_ADC_IsEnabled>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4323      	orrs	r3, r4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d112      	bne.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059de:	f023 030f 	bic.w	r3, r3, #15
 80059e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059e6:	e009      	b.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80059fa:	e000      	b.n	80059fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	377c      	adds	r7, #124	; 0x7c
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd90      	pop	{r4, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	50040000 	.word	0x50040000
 8005a18:	50040100 	.word	0x50040100
 8005a1c:	50040300 	.word	0x50040300
 8005a20:	50040200 	.word	0x50040200

08005a24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0ed      	b.n	8005c12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fc f852 	bl	8001aec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a58:	f7fe fdd2 	bl	8004600 <HAL_GetTick>
 8005a5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a5e:	e012      	b.n	8005a86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a60:	f7fe fdce 	bl	8004600 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b0a      	cmp	r3, #10
 8005a6c:	d90b      	bls.n	8005a86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0c5      	b.n	8005c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0e5      	beq.n	8005a60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0202 	bic.w	r2, r2, #2
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa4:	f7fe fdac 	bl	8004600 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005aaa:	e012      	b.n	8005ad2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005aac:	f7fe fda8 	bl	8004600 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b0a      	cmp	r3, #10
 8005ab8:	d90b      	bls.n	8005ad2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2205      	movs	r2, #5
 8005aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e09f      	b.n	8005c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7e1b      	ldrb	r3, [r3, #24]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d108      	bne.n	8005afa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e007      	b.n	8005b0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7e5b      	ldrb	r3, [r3, #25]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d108      	bne.n	8005b24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e007      	b.n	8005b34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	7e9b      	ldrb	r3, [r3, #26]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d108      	bne.n	8005b4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0220 	orr.w	r2, r2, #32
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e007      	b.n	8005b5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0220 	bic.w	r2, r2, #32
 8005b5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7edb      	ldrb	r3, [r3, #27]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d108      	bne.n	8005b78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0210 	bic.w	r2, r2, #16
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e007      	b.n	8005b88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0210 	orr.w	r2, r2, #16
 8005b86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	7f1b      	ldrb	r3, [r3, #28]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d108      	bne.n	8005ba2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e007      	b.n	8005bb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0208 	bic.w	r2, r2, #8
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	7f5b      	ldrb	r3, [r3, #29]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d108      	bne.n	8005bcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0204 	orr.w	r2, r2, #4
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e007      	b.n	8005bdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0204 	bic.w	r2, r2, #4
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	ea42 0103 	orr.w	r1, r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <__NVIC_SetPriorityGrouping+0x44>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c4e:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <__NVIC_SetPriorityGrouping+0x44>)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	60d3      	str	r3, [r2, #12]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000ed00 	.word	0xe000ed00

08005c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <__NVIC_GetPriorityGrouping+0x18>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	f003 0307 	and.w	r3, r3, #7
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	e000ed00 	.word	0xe000ed00

08005c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	db0b      	blt.n	8005caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	f003 021f 	and.w	r2, r3, #31
 8005c98:	4907      	ldr	r1, [pc, #28]	; (8005cb8 <__NVIC_EnableIRQ+0x38>)
 8005c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	e000e100 	.word	0xe000e100

08005cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	6039      	str	r1, [r7, #0]
 8005cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	db0a      	blt.n	8005ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	490c      	ldr	r1, [pc, #48]	; (8005d08 <__NVIC_SetPriority+0x4c>)
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	0112      	lsls	r2, r2, #4
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	440b      	add	r3, r1
 8005ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ce4:	e00a      	b.n	8005cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4908      	ldr	r1, [pc, #32]	; (8005d0c <__NVIC_SetPriority+0x50>)
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	0112      	lsls	r2, r2, #4
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	761a      	strb	r2, [r3, #24]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000e100 	.word	0xe000e100
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	; 0x24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f1c3 0307 	rsb	r3, r3, #7
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	bf28      	it	cs
 8005d2e:	2304      	movcs	r3, #4
 8005d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3304      	adds	r3, #4
 8005d36:	2b06      	cmp	r3, #6
 8005d38:	d902      	bls.n	8005d40 <NVIC_EncodePriority+0x30>
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3b03      	subs	r3, #3
 8005d3e:	e000      	b.n	8005d42 <NVIC_EncodePriority+0x32>
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	401a      	ands	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d58:	f04f 31ff 	mov.w	r1, #4294967295
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	43d9      	mvns	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	4313      	orrs	r3, r2
         );
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d88:	d301      	bcc.n	8005d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e00f      	b.n	8005dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d8e:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <SysTick_Config+0x40>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d96:	210f      	movs	r1, #15
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	f7ff ff8e 	bl	8005cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <SysTick_Config+0x40>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005da6:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <SysTick_Config+0x40>)
 8005da8:	2207      	movs	r2, #7
 8005daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	e000e010 	.word	0xe000e010

08005dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff29 	bl	8005c1c <__NVIC_SetPriorityGrouping>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005de4:	f7ff ff3e 	bl	8005c64 <__NVIC_GetPriorityGrouping>
 8005de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7ff ff8e 	bl	8005d10 <NVIC_EncodePriority>
 8005df4:	4602      	mov	r2, r0
 8005df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff5d 	bl	8005cbc <__NVIC_SetPriority>
}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff31 	bl	8005c80 <__NVIC_EnableIRQ>
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ffa2 	bl	8005d78 <SysTick_Config>
 8005e34:	4603      	mov	r3, r0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e098      	b.n	8005f84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	4b4d      	ldr	r3, [pc, #308]	; (8005f90 <HAL_DMA_Init+0x150>)
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d80f      	bhi.n	8005e7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	4b4b      	ldr	r3, [pc, #300]	; (8005f94 <HAL_DMA_Init+0x154>)
 8005e66:	4413      	add	r3, r2
 8005e68:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <HAL_DMA_Init+0x158>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	009a      	lsls	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a48      	ldr	r2, [pc, #288]	; (8005f9c <HAL_DMA_Init+0x15c>)
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005e7c:	e00e      	b.n	8005e9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_DMA_Init+0x160>)
 8005e86:	4413      	add	r3, r2
 8005e88:	4a43      	ldr	r2, [pc, #268]	; (8005f98 <HAL_DMA_Init+0x158>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	009a      	lsls	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <HAL_DMA_Init+0x164>)
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef6:	d039      	beq.n	8005f6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	4a27      	ldr	r2, [pc, #156]	; (8005f9c <HAL_DMA_Init+0x15c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d11a      	bne.n	8005f38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <HAL_DMA_Init+0x168>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	f003 031c 	and.w	r3, r3, #28
 8005f0e:	210f      	movs	r1, #15
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	4924      	ldr	r1, [pc, #144]	; (8005fa8 <HAL_DMA_Init+0x168>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <HAL_DMA_Init+0x168>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f003 031c 	and.w	r3, r3, #28
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	491d      	ldr	r1, [pc, #116]	; (8005fa8 <HAL_DMA_Init+0x168>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	e019      	b.n	8005f6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f38:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <HAL_DMA_Init+0x16c>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	f003 031c 	and.w	r3, r3, #28
 8005f44:	210f      	movs	r1, #15
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	4917      	ldr	r1, [pc, #92]	; (8005fac <HAL_DMA_Init+0x16c>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_DMA_Init+0x16c>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5e:	f003 031c 	and.w	r3, r3, #28
 8005f62:	fa01 f303 	lsl.w	r3, r1, r3
 8005f66:	4911      	ldr	r1, [pc, #68]	; (8005fac <HAL_DMA_Init+0x16c>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40020407 	.word	0x40020407
 8005f94:	bffdfff8 	.word	0xbffdfff8
 8005f98:	cccccccd 	.word	0xcccccccd
 8005f9c:	40020000 	.word	0x40020000
 8005fa0:	bffdfbf8 	.word	0xbffdfbf8
 8005fa4:	40020400 	.word	0x40020400
 8005fa8:	400200a8 	.word	0x400200a8
 8005fac:	400204a8 	.word	0x400204a8

08005fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_Start_IT+0x20>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e04b      	b.n	8006068 <HAL_DMA_Start_IT+0xb8>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d13a      	bne.n	800605a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f95f 	bl	80062cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 020e 	orr.w	r2, r2, #14
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e00f      	b.n	8006048 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 020a 	orr.w	r2, r2, #10
 8006046:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e005      	b.n	8006066 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d008      	beq.n	800609a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2204      	movs	r2, #4
 800608c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e022      	b.n	80060e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 020e 	bic.w	r2, r2, #14
 80060a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f003 021c 	and.w	r2, r3, #28
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2101      	movs	r1, #1
 80060c8:	fa01 f202 	lsl.w	r2, r1, r2
 80060cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d005      	beq.n	8006110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e029      	b.n	8006164 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 020e 	bic.w	r2, r2, #14
 800611e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	f003 021c 	and.w	r2, r3, #28
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	2101      	movs	r1, #1
 800613e:	fa01 f202 	lsl.w	r2, r1, r2
 8006142:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
    }
  }
  return status;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	f003 031c 	and.w	r3, r3, #28
 800618e:	2204      	movs	r2, #4
 8006190:	409a      	lsls	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d026      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x7a>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d021      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0204 	bic.w	r2, r2, #4
 80061c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f003 021c 	and.w	r2, r3, #28
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2104      	movs	r1, #4
 80061d0:	fa01 f202 	lsl.w	r2, r1, r2
 80061d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d071      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80061e6:	e06c      	b.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	f003 031c 	and.w	r3, r3, #28
 80061f0:	2202      	movs	r2, #2
 80061f2:	409a      	lsls	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02e      	beq.n	800625a <HAL_DMA_IRQHandler+0xec>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d029      	beq.n	800625a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 020a 	bic.w	r2, r2, #10
 8006222:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	f003 021c 	and.w	r2, r3, #28
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	2102      	movs	r1, #2
 800623a:	fa01 f202 	lsl.w	r2, r1, r2
 800623e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006258:	e033      	b.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f003 031c 	and.w	r3, r3, #28
 8006262:	2208      	movs	r2, #8
 8006264:	409a      	lsls	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02a      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d025      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 020e 	bic.w	r2, r2, #14
 8006286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	f003 021c 	and.w	r2, r3, #28
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f202 	lsl.w	r2, r1, r2
 800629a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
}
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f003 021c 	and.w	r2, r3, #28
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2101      	movs	r1, #1
 80062e8:	fa01 f202 	lsl.w	r2, r1, r2
 80062ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d108      	bne.n	8006310 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800630e:	e007      	b.n	8006320 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800633a:	e17f      	b.n	800663c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	2101      	movs	r1, #1
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8171 	beq.w	8006636 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d005      	beq.n	800636c <HAL_GPIO_Init+0x40>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d130      	bne.n	80063ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	2203      	movs	r2, #3
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4013      	ands	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063a2:	2201      	movs	r2, #1
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4013      	ands	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 0201 	and.w	r2, r3, #1
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d118      	bne.n	800640c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80063e0:	2201      	movs	r2, #1
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	08db      	lsrs	r3, r3, #3
 80063f6:	f003 0201 	and.w	r2, r3, #1
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d017      	beq.n	8006448 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4013      	ands	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d123      	bne.n	800649c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	08da      	lsrs	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3208      	adds	r2, #8
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	220f      	movs	r2, #15
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4013      	ands	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	08da      	lsrs	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3208      	adds	r2, #8
 8006496:	6939      	ldr	r1, [r7, #16]
 8006498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2203      	movs	r2, #3
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4013      	ands	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80ac 	beq.w	8006636 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064de:	4b5f      	ldr	r3, [pc, #380]	; (800665c <HAL_GPIO_Init+0x330>)
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	4a5e      	ldr	r2, [pc, #376]	; (800665c <HAL_GPIO_Init+0x330>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	6613      	str	r3, [r2, #96]	; 0x60
 80064ea:	4b5c      	ldr	r3, [pc, #368]	; (800665c <HAL_GPIO_Init+0x330>)
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064f6:	4a5a      	ldr	r2, [pc, #360]	; (8006660 <HAL_GPIO_Init+0x334>)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	3302      	adds	r3, #2
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	220f      	movs	r2, #15
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006520:	d025      	beq.n	800656e <HAL_GPIO_Init+0x242>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a4f      	ldr	r2, [pc, #316]	; (8006664 <HAL_GPIO_Init+0x338>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01f      	beq.n	800656a <HAL_GPIO_Init+0x23e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a4e      	ldr	r2, [pc, #312]	; (8006668 <HAL_GPIO_Init+0x33c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d019      	beq.n	8006566 <HAL_GPIO_Init+0x23a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a4d      	ldr	r2, [pc, #308]	; (800666c <HAL_GPIO_Init+0x340>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_GPIO_Init+0x236>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a4c      	ldr	r2, [pc, #304]	; (8006670 <HAL_GPIO_Init+0x344>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00d      	beq.n	800655e <HAL_GPIO_Init+0x232>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a4b      	ldr	r2, [pc, #300]	; (8006674 <HAL_GPIO_Init+0x348>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <HAL_GPIO_Init+0x22e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a4a      	ldr	r2, [pc, #296]	; (8006678 <HAL_GPIO_Init+0x34c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <HAL_GPIO_Init+0x22a>
 8006552:	2306      	movs	r3, #6
 8006554:	e00c      	b.n	8006570 <HAL_GPIO_Init+0x244>
 8006556:	2307      	movs	r3, #7
 8006558:	e00a      	b.n	8006570 <HAL_GPIO_Init+0x244>
 800655a:	2305      	movs	r3, #5
 800655c:	e008      	b.n	8006570 <HAL_GPIO_Init+0x244>
 800655e:	2304      	movs	r3, #4
 8006560:	e006      	b.n	8006570 <HAL_GPIO_Init+0x244>
 8006562:	2303      	movs	r3, #3
 8006564:	e004      	b.n	8006570 <HAL_GPIO_Init+0x244>
 8006566:	2302      	movs	r3, #2
 8006568:	e002      	b.n	8006570 <HAL_GPIO_Init+0x244>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <HAL_GPIO_Init+0x244>
 800656e:	2300      	movs	r3, #0
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	f002 0203 	and.w	r2, r2, #3
 8006576:	0092      	lsls	r2, r2, #2
 8006578:	4093      	lsls	r3, r2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006580:	4937      	ldr	r1, [pc, #220]	; (8006660 <HAL_GPIO_Init+0x334>)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	3302      	adds	r3, #2
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800658e:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_GPIO_Init+0x350>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	43db      	mvns	r3, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4013      	ands	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065b2:	4a32      	ldr	r2, [pc, #200]	; (800667c <HAL_GPIO_Init+0x350>)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065b8:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_GPIO_Init+0x350>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4013      	ands	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <HAL_GPIO_Init+0x350>)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <HAL_GPIO_Init+0x350>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4013      	ands	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006606:	4a1d      	ldr	r2, [pc, #116]	; (800667c <HAL_GPIO_Init+0x350>)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <HAL_GPIO_Init+0x350>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	43db      	mvns	r3, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006630:	4a12      	ldr	r2, [pc, #72]	; (800667c <HAL_GPIO_Init+0x350>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	3301      	adds	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	fa22 f303 	lsr.w	r3, r2, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f ae78 	bne.w	800633c <HAL_GPIO_Init+0x10>
  }
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000
 8006660:	40010000 	.word	0x40010000
 8006664:	48000400 	.word	0x48000400
 8006668:	48000800 	.word	0x48000800
 800666c:	48000c00 	.word	0x48000c00
 8006670:	48001000 	.word	0x48001000
 8006674:	48001400 	.word	0x48001400
 8006678:	48001800 	.word	0x48001800
 800667c:	40010400 	.word	0x40010400

08006680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	e001      	b.n	80066a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	807b      	strh	r3, [r7, #2]
 80066bc:	4613      	mov	r3, r2
 80066be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066c0:	787b      	ldrb	r3, [r7, #1]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066cc:	e002      	b.n	80066d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066f2:	887a      	ldrh	r2, [r7, #2]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4013      	ands	r3, r2
 80066f8:	041a      	lsls	r2, r3, #16
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	43d9      	mvns	r1, r3
 80066fe:	887b      	ldrh	r3, [r7, #2]
 8006700:	400b      	ands	r3, r1
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800672a:	4a05      	ldr	r2, [pc, #20]	; (8006740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fb faf0 	bl	8001d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40010400 	.word	0x40010400

08006744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <HAL_PWREx_GetVoltageRange+0x18>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006750:	4618      	mov	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40007000 	.word	0x40007000

08006760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676e:	d130      	bne.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006770:	4b23      	ldr	r3, [pc, #140]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677c:	d038      	beq.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006786:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800678c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2232      	movs	r2, #50	; 0x32
 8006794:	fb02 f303 	mul.w	r3, r2, r3
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	0c9b      	lsrs	r3, r3, #18
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a4:	e002      	b.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ac:	4b14      	ldr	r3, [pc, #80]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d102      	bne.n	80067c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f2      	bne.n	80067a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d110      	bne.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e00f      	b.n	80067f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067de:	d007      	beq.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067e8:	4a05      	ldr	r2, [pc, #20]	; (8006800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40007000 	.word	0x40007000
 8006804:	20000000 	.word	0x20000000
 8006808:	431bde83 	.word	0x431bde83

0800680c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e3ca      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800681e:	4b97      	ldr	r3, [pc, #604]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006828:	4b94      	ldr	r3, [pc, #592]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80e4 	beq.w	8006a08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_RCC_OscConfig+0x4a>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	f040 808b 	bne.w	8006964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 8087 	bne.w	8006964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006856:	4b89      	ldr	r3, [pc, #548]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_RCC_OscConfig+0x62>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e3a2      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	4b82      	ldr	r3, [pc, #520]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_RCC_OscConfig+0x7c>
 800687e:	4b7f      	ldr	r3, [pc, #508]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006886:	e005      	b.n	8006894 <HAL_RCC_OscConfig+0x88>
 8006888:	4b7c      	ldr	r3, [pc, #496]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 800688a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006894:	4293      	cmp	r3, r2
 8006896:	d223      	bcs.n	80068e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fd55 	bl	800734c <RCC_SetFlashLatencyFromMSIRange>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e383      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ac:	4b73      	ldr	r3, [pc, #460]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a72      	ldr	r2, [pc, #456]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068b2:	f043 0308 	orr.w	r3, r3, #8
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	4b70      	ldr	r3, [pc, #448]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	496d      	ldr	r1, [pc, #436]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ca:	4b6c      	ldr	r3, [pc, #432]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	4968      	ldr	r1, [pc, #416]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	604b      	str	r3, [r1, #4]
 80068de:	e025      	b.n	800692c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068e0:	4b66      	ldr	r3, [pc, #408]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a65      	ldr	r2, [pc, #404]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068e6:	f043 0308 	orr.w	r3, r3, #8
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b63      	ldr	r3, [pc, #396]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	4960      	ldr	r1, [pc, #384]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068fe:	4b5f      	ldr	r3, [pc, #380]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	495b      	ldr	r1, [pc, #364]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fd15 	bl	800734c <RCC_SetFlashLatencyFromMSIRange>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e343      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800692c:	f000 fc4a 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b52      	ldr	r3, [pc, #328]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4950      	ldr	r1, [pc, #320]	; (8006a80 <HAL_RCC_OscConfig+0x274>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	4a4e      	ldr	r2, [pc, #312]	; (8006a84 <HAL_RCC_OscConfig+0x278>)
 800694a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800694c:	4b4e      	ldr	r3, [pc, #312]	; (8006a88 <HAL_RCC_OscConfig+0x27c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7fd fe05 	bl	8004560 <HAL_InitTick>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d052      	beq.n	8006a06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	e327      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d032      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800696c:	4b43      	ldr	r3, [pc, #268]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a42      	ldr	r2, [pc, #264]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006978:	f7fd fe42 	bl	8004600 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006980:	f7fd fe3e 	bl	8004600 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e310      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006992:	4b3a      	ldr	r3, [pc, #232]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800699e:	4b37      	ldr	r3, [pc, #220]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a36      	ldr	r2, [pc, #216]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069a4:	f043 0308 	orr.w	r3, r3, #8
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4b34      	ldr	r3, [pc, #208]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4931      	ldr	r1, [pc, #196]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069bc:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	492c      	ldr	r1, [pc, #176]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	604b      	str	r3, [r1, #4]
 80069d0:	e01a      	b.n	8006a08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069d2:	4b2a      	ldr	r3, [pc, #168]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a29      	ldr	r2, [pc, #164]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069de:	f7fd fe0f 	bl	8004600 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e6:	f7fd fe0b 	bl	8004600 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e2dd      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069f8:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f0      	bne.n	80069e6 <HAL_RCC_OscConfig+0x1da>
 8006a04:	e000      	b.n	8006a08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d074      	beq.n	8006afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d005      	beq.n	8006a26 <HAL_RCC_OscConfig+0x21a>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d10e      	bne.n	8006a3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d10b      	bne.n	8006a3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d064      	beq.n	8006afc <HAL_RCC_OscConfig+0x2f0>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d160      	bne.n	8006afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e2ba      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a46:	d106      	bne.n	8006a56 <HAL_RCC_OscConfig+0x24a>
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0b      	ldr	r2, [pc, #44]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e026      	b.n	8006aa4 <HAL_RCC_OscConfig+0x298>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a5e:	d115      	bne.n	8006a8c <HAL_RCC_OscConfig+0x280>
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a02      	ldr	r2, [pc, #8]	; (8006a7c <HAL_RCC_OscConfig+0x270>)
 8006a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	e014      	b.n	8006aa4 <HAL_RCC_OscConfig+0x298>
 8006a7a:	bf00      	nop
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800ea38 	.word	0x0800ea38
 8006a84:	20000000 	.word	0x20000000
 8006a88:	20000004 	.word	0x20000004
 8006a8c:	4ba0      	ldr	r3, [pc, #640]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a9f      	ldr	r2, [pc, #636]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4b9d      	ldr	r3, [pc, #628]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a9c      	ldr	r2, [pc, #624]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d013      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd fda8 	bl	8004600 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fd fda4 	bl	8004600 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e276      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ac6:	4b92      	ldr	r3, [pc, #584]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x2a8>
 8006ad2:	e014      	b.n	8006afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fd fd94 	bl	8004600 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006adc:	f7fd fd90 	bl	8004600 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b64      	cmp	r3, #100	; 0x64
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e262      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aee:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x2d0>
 8006afa:	e000      	b.n	8006afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d060      	beq.n	8006bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_OscConfig+0x310>
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b0c      	cmp	r3, #12
 8006b14:	d119      	bne.n	8006b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d116      	bne.n	8006b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b1c:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_RCC_OscConfig+0x328>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e23f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	4973      	ldr	r1, [pc, #460]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b48:	e040      	b.n	8006bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d023      	beq.n	8006b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b52:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fd fd4f 	bl	8004600 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b66:	f7fd fd4b 	bl	8004600 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e21d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b78:	4b65      	ldr	r3, [pc, #404]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	495f      	ldr	r1, [pc, #380]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	604b      	str	r3, [r1, #4]
 8006b98:	e018      	b.n	8006bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9a:	4b5d      	ldr	r3, [pc, #372]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5c      	ldr	r2, [pc, #368]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba6:	f7fd fd2b 	bl	8004600 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bae:	f7fd fd27 	bl	8004600 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e1f9      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bc0:	4b53      	ldr	r3, [pc, #332]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d03c      	beq.n	8006c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01c      	beq.n	8006c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be0:	4b4b      	ldr	r3, [pc, #300]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be6:	4a4a      	ldr	r2, [pc, #296]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf0:	f7fd fd06 	bl	8004600 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7fd fd02 	bl	8004600 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e1d4      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c0a:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ef      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x3ec>
 8006c18:	e01b      	b.n	8006c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c1a:	4b3d      	ldr	r3, [pc, #244]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c20:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2a:	f7fd fce9 	bl	8004600 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c32:	f7fd fce5 	bl	8004600 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e1b7      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c44:	4b32      	ldr	r3, [pc, #200]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1ef      	bne.n	8006c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a6 	beq.w	8006dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c60:	2300      	movs	r3, #0
 8006c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c64:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <HAL_RCC_OscConfig+0x508>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d118      	bne.n	8006cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c98:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <HAL_RCC_OscConfig+0x508>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <HAL_RCC_OscConfig+0x508>)
 8006c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca4:	f7fd fcac 	bl	8004600 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cac:	f7fd fca8 	bl	8004600 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e17a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <HAL_RCC_OscConfig+0x508>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d108      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4d8>
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ce2:	e029      	b.n	8006d38 <HAL_RCC_OscConfig+0x52c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d115      	bne.n	8006d18 <HAL_RCC_OscConfig+0x50c>
 8006cec:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006cf4:	f043 0304 	orr.w	r3, r3, #4
 8006cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cfc:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d02:	4a03      	ldr	r2, [pc, #12]	; (8006d10 <HAL_RCC_OscConfig+0x504>)
 8006d04:	f043 0301 	orr.w	r3, r3, #1
 8006d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d0c:	e014      	b.n	8006d38 <HAL_RCC_OscConfig+0x52c>
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40007000 	.word	0x40007000
 8006d18:	4b9c      	ldr	r3, [pc, #624]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	4a9b      	ldr	r2, [pc, #620]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d28:	4b98      	ldr	r3, [pc, #608]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	4a97      	ldr	r2, [pc, #604]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d016      	beq.n	8006d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fd fc5e 	bl	8004600 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d46:	e00a      	b.n	8006d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d48:	f7fd fc5a 	bl	8004600 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e12a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d5e:	4b8b      	ldr	r3, [pc, #556]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ed      	beq.n	8006d48 <HAL_RCC_OscConfig+0x53c>
 8006d6c:	e015      	b.n	8006d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fd fc47 	bl	8004600 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d74:	e00a      	b.n	8006d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d76:	f7fd fc43 	bl	8004600 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e113      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d8c:	4b7f      	ldr	r3, [pc, #508]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1ed      	bne.n	8006d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d105      	bne.n	8006dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da0:	4b7a      	ldr	r3, [pc, #488]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	4a79      	ldr	r2, [pc, #484]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006daa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80fe 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	f040 80d0 	bne.w	8006f60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006dc0:	4b72      	ldr	r3, [pc, #456]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f003 0203 	and.w	r2, r3, #3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d130      	bne.n	8006e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	3b01      	subs	r3, #1
 8006de0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d127      	bne.n	8006e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d11f      	bne.n	8006e36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e00:	2a07      	cmp	r2, #7
 8006e02:	bf14      	ite	ne
 8006e04:	2201      	movne	r2, #1
 8006e06:	2200      	moveq	r2, #0
 8006e08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d113      	bne.n	8006e36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d109      	bne.n	8006e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	085b      	lsrs	r3, r3, #1
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d06e      	beq.n	8006f14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b0c      	cmp	r3, #12
 8006e3a:	d069      	beq.n	8006f10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0ad      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e58:	4b4c      	ldr	r3, [pc, #304]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a4b      	ldr	r2, [pc, #300]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e64:	f7fd fbcc 	bl	8004600 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fd fbc8 	bl	8004600 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e09a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e7e:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	4b40      	ldr	r3, [pc, #256]	; (8006f90 <HAL_RCC_OscConfig+0x784>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e9a:	3a01      	subs	r2, #1
 8006e9c:	0112      	lsls	r2, r2, #4
 8006e9e:	4311      	orrs	r1, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ea4:	0212      	lsls	r2, r2, #8
 8006ea6:	4311      	orrs	r1, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006eac:	0852      	lsrs	r2, r2, #1
 8006eae:	3a01      	subs	r2, #1
 8006eb0:	0552      	lsls	r2, r2, #21
 8006eb2:	4311      	orrs	r1, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006eb8:	0852      	lsrs	r2, r2, #1
 8006eba:	3a01      	subs	r2, #1
 8006ebc:	0652      	lsls	r2, r2, #25
 8006ebe:	4311      	orrs	r1, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ec4:	0912      	lsrs	r2, r2, #4
 8006ec6:	0452      	lsls	r2, r2, #17
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	4930      	ldr	r1, [pc, #192]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ee8:	f7fd fb8a 	bl	8004600 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fd fb86 	bl	8004600 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e058      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f0e:	e050      	b.n	8006fb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e04f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f14:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d148      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f38:	f7fd fb62 	bl	8004600 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f40:	f7fd fb5e 	bl	8004600 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e030      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0f0      	beq.n	8006f40 <HAL_RCC_OscConfig+0x734>
 8006f5e:	e028      	b.n	8006fb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	d023      	beq.n	8006fae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <HAL_RCC_OscConfig+0x780>)
 8006f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f72:	f7fd fb45 	bl	8004600 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f78:	e00c      	b.n	8006f94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7a:	f7fd fb41 	bl	8004600 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d905      	bls.n	8006f94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e013      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <HAL_RCC_OscConfig+0x7b0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ec      	bne.n	8006f7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_RCC_OscConfig+0x7b0>)
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	4905      	ldr	r1, [pc, #20]	; (8006fbc <HAL_RCC_OscConfig+0x7b0>)
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <HAL_RCC_OscConfig+0x7b4>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60cb      	str	r3, [r1, #12]
 8006fac:	e001      	b.n	8006fb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	feeefffc 	.word	0xfeeefffc

08006fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0e7      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b75      	ldr	r3, [pc, #468]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d910      	bls.n	8007008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b72      	ldr	r3, [pc, #456]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f023 0207 	bic.w	r2, r3, #7
 8006fee:	4970      	ldr	r1, [pc, #448]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b6e      	ldr	r3, [pc, #440]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0cf      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	4b66      	ldr	r3, [pc, #408]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007020:	429a      	cmp	r2, r3
 8007022:	d908      	bls.n	8007036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b63      	ldr	r3, [pc, #396]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4960      	ldr	r1, [pc, #384]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04c      	beq.n	80070dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704a:	4b5a      	ldr	r3, [pc, #360]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d121      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0a6      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007062:	4b54      	ldr	r3, [pc, #336]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d115      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e09a      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800707a:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e08e      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800708a:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e086      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800709a:	4b46      	ldr	r3, [pc, #280]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0203 	bic.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4943      	ldr	r1, [pc, #268]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ac:	f7fd faa8 	bl	8004600 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b4:	f7fd faa4 	bl	8004600 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e06e      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 020c 	and.w	r2, r3, #12
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1eb      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d208      	bcs.n	800710a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f8:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	492b      	ldr	r1, [pc, #172]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d210      	bcs.n	800713a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007118:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 0207 	bic.w	r2, r3, #7
 8007120:	4923      	ldr	r1, [pc, #140]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007128:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <HAL_RCC_ClockConfig+0x1ec>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d001      	beq.n	800713a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e036      	b.n	80071a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007146:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4918      	ldr	r1, [pc, #96]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4910      	ldr	r1, [pc, #64]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007174:	4313      	orrs	r3, r2
 8007176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007178:	f000 f824 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	490b      	ldr	r1, [pc, #44]	; (80071b8 <HAL_RCC_ClockConfig+0x1f4>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	4a09      	ldr	r2, [pc, #36]	; (80071bc <HAL_RCC_ClockConfig+0x1f8>)
 8007196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <HAL_RCC_ClockConfig+0x1fc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fd f9df 	bl	8004560 <HAL_InitTick>
 80071a2:	4603      	mov	r3, r0
 80071a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80071a6:	7afb      	ldrb	r3, [r7, #11]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40022000 	.word	0x40022000
 80071b4:	40021000 	.word	0x40021000
 80071b8:	0800ea38 	.word	0x0800ea38
 80071bc:	20000000 	.word	0x20000000
 80071c0:	20000004 	.word	0x20000004

080071c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b089      	sub	sp, #36	; 0x24
 80071c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071d2:	4b3e      	ldr	r3, [pc, #248]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 030c 	and.w	r3, r3, #12
 80071da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071dc:	4b3b      	ldr	r3, [pc, #236]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x34>
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d121      	bne.n	8007236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d11e      	bne.n	8007236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071f8:	4b34      	ldr	r3, [pc, #208]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007204:	4b31      	ldr	r3, [pc, #196]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	e005      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007214:	4b2d      	ldr	r3, [pc, #180]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007220:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007234:	e00a      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d102      	bne.n	8007242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800723c:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e004      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b08      	cmp	r3, #8
 8007246:	d101      	bne.n	800724c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007248:	4b23      	ldr	r3, [pc, #140]	; (80072d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800724a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b0c      	cmp	r3, #12
 8007250:	d134      	bne.n	80072bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007252:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d003      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0xa6>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d003      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0xac>
 8007268:	e005      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800726c:	617b      	str	r3, [r7, #20]
      break;
 800726e:	e005      	b.n	800727c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007272:	617b      	str	r3, [r7, #20]
      break;
 8007274:	e002      	b.n	800727c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	617b      	str	r3, [r7, #20]
      break;
 800727a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800727c:	4b13      	ldr	r3, [pc, #76]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	3301      	adds	r3, #1
 8007288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	fb03 f202 	mul.w	r2, r3, r2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_RCC_GetSysClockFreq+0x108>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	0e5b      	lsrs	r3, r3, #25
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	3301      	adds	r3, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072bc:	69bb      	ldr	r3, [r7, #24]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40021000 	.word	0x40021000
 80072d0:	0800ea50 	.word	0x0800ea50
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	007a1200 	.word	0x007a1200

080072dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000000 	.word	0x20000000

080072f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072f8:	f7ff fff0 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	; (800731c <HAL_RCC_GetPCLK1Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	0800ea48 	.word	0x0800ea48

08007320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007324:	f7ff ffda 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	0adb      	lsrs	r3, r3, #11
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40021000 	.word	0x40021000
 8007348:	0800ea48 	.word	0x0800ea48

0800734c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007358:	4b2a      	ldr	r3, [pc, #168]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800735a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007364:	f7ff f9ee 	bl	8006744 <HAL_PWREx_GetVoltageRange>
 8007368:	6178      	str	r0, [r7, #20]
 800736a:	e014      	b.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800736e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007370:	4a24      	ldr	r2, [pc, #144]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007376:	6593      	str	r3, [r2, #88]	; 0x58
 8007378:	4b22      	ldr	r3, [pc, #136]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007384:	f7ff f9de 	bl	8006744 <HAL_PWREx_GetVoltageRange>
 8007388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800738a:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739c:	d10b      	bne.n	80073b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	d919      	bls.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2ba0      	cmp	r3, #160	; 0xa0
 80073a8:	d902      	bls.n	80073b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073aa:	2302      	movs	r3, #2
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e013      	b.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073b0:	2301      	movs	r3, #1
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	e010      	b.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d902      	bls.n	80073c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073bc:	2303      	movs	r3, #3
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e00a      	b.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b80      	cmp	r3, #128	; 0x80
 80073c6:	d102      	bne.n	80073ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073c8:	2302      	movs	r3, #2
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	e004      	b.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b70      	cmp	r3, #112	; 0x70
 80073d2:	d101      	bne.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073d4:	2301      	movs	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 0207 	bic.w	r2, r3, #7
 80073e0:	4909      	ldr	r1, [pc, #36]	; (8007408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d001      	beq.n	80073fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	40021000 	.word	0x40021000
 8007408:	40022000 	.word	0x40022000

0800740c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007414:	2300      	movs	r3, #0
 8007416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007418:	2300      	movs	r3, #0
 800741a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007424:	2b00      	cmp	r3, #0
 8007426:	d041      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007430:	d02a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007432:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007436:	d824      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800743c:	d008      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800743e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007442:	d81e      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800744c:	d010      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800744e:	e018      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007450:	4b86      	ldr	r3, [pc, #536]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4a85      	ldr	r2, [pc, #532]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800745a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800745c:	e015      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3304      	adds	r3, #4
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fabb 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800746e:	e00c      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3320      	adds	r3, #32
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fba6 	bl	8007bc8 <RCCEx_PLLSAI2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	74fb      	strb	r3, [r7, #19]
      break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748a:	7cfb      	ldrb	r3, [r7, #19]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007490:	4b76      	ldr	r3, [pc, #472]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800749e:	4973      	ldr	r1, [pc, #460]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80074a6:	e001      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d041      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074c0:	d02a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80074c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074c6:	d824      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80074c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074cc:	d008      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d2:	d81e      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80074d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074dc:	d010      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80074de:	e018      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074e0:	4b62      	ldr	r3, [pc, #392]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	4a61      	ldr	r2, [pc, #388]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074ec:	e015      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fa73 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074fe:	e00c      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3320      	adds	r3, #32
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fb5e 	bl	8007bc8 <RCCEx_PLLSAI2_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007510:	e003      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	74fb      	strb	r3, [r7, #19]
      break;
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751a:	7cfb      	ldrb	r3, [r7, #19]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007520:	4b52      	ldr	r3, [pc, #328]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800752e:	494f      	ldr	r1, [pc, #316]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007536:	e001      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	7cfb      	ldrb	r3, [r7, #19]
 800753a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80a0 	beq.w	800768a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800754a:	2300      	movs	r3, #0
 800754c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007564:	4b41      	ldr	r3, [pc, #260]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	4a40      	ldr	r2, [pc, #256]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800756a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800756e:	6593      	str	r3, [r2, #88]	; 0x58
 8007570:	4b3e      	ldr	r3, [pc, #248]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800757c:	2301      	movs	r3, #1
 800757e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007580:	4b3b      	ldr	r3, [pc, #236]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a3a      	ldr	r2, [pc, #232]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800758a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800758c:	f7fd f838 	bl	8004600 <HAL_GetTick>
 8007590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007592:	e009      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007594:	f7fd f834 	bl	8004600 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d902      	bls.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	74fb      	strb	r3, [r7, #19]
        break;
 80075a6:	e005      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075a8:	4b31      	ldr	r3, [pc, #196]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0ef      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80075b4:	7cfb      	ldrb	r3, [r7, #19]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d15c      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075ba:	4b2c      	ldr	r3, [pc, #176]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01f      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d019      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075d8:	4b24      	ldr	r3, [pc, #144]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075e4:	4b21      	ldr	r3, [pc, #132]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ea:	4a20      	ldr	r2, [pc, #128]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075f4:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fa:	4a1c      	ldr	r2, [pc, #112]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007604:	4a19      	ldr	r2, [pc, #100]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fc fff3 	bl	8004600 <HAL_GetTick>
 800761a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800761c:	e00b      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761e:	f7fc ffef 	bl	8004600 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	4293      	cmp	r3, r2
 800762e:	d902      	bls.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	74fb      	strb	r3, [r7, #19]
            break;
 8007634:	e006      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0ec      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007644:	7cfb      	ldrb	r3, [r7, #19]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10c      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800764a:	4b08      	ldr	r3, [pc, #32]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800764c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765a:	4904      	ldr	r1, [pc, #16]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007662:	e009      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007664:	7cfb      	ldrb	r3, [r7, #19]
 8007666:	74bb      	strb	r3, [r7, #18]
 8007668:	e006      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800766a:	bf00      	nop
 800766c:	40021000 	.word	0x40021000
 8007670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	7cfb      	ldrb	r3, [r7, #19]
 8007676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007678:	7c7b      	ldrb	r3, [r7, #17]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d105      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800767e:	4b9e      	ldr	r3, [pc, #632]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	4a9d      	ldr	r2, [pc, #628]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007696:	4b98      	ldr	r3, [pc, #608]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769c:	f023 0203 	bic.w	r2, r3, #3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	4994      	ldr	r1, [pc, #592]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076b8:	4b8f      	ldr	r3, [pc, #572]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076be:	f023 020c 	bic.w	r2, r3, #12
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	498c      	ldr	r1, [pc, #560]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076da:	4b87      	ldr	r3, [pc, #540]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	4983      	ldr	r1, [pc, #524]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076fc:	4b7e      	ldr	r3, [pc, #504]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	497b      	ldr	r1, [pc, #492]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800771e:	4b76      	ldr	r3, [pc, #472]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772c:	4972      	ldr	r1, [pc, #456]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007740:	4b6d      	ldr	r3, [pc, #436]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774e:	496a      	ldr	r1, [pc, #424]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007762:	4b65      	ldr	r3, [pc, #404]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007770:	4961      	ldr	r1, [pc, #388]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007784:	4b5c      	ldr	r3, [pc, #368]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007792:	4959      	ldr	r1, [pc, #356]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077a6:	4b54      	ldr	r3, [pc, #336]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	4950      	ldr	r1, [pc, #320]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077c8:	4b4b      	ldr	r3, [pc, #300]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	4948      	ldr	r1, [pc, #288]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077ea:	4b43      	ldr	r3, [pc, #268]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f8:	493f      	ldr	r1, [pc, #252]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d028      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800780c:	4b3a      	ldr	r3, [pc, #232]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781a:	4937      	ldr	r1, [pc, #220]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800782a:	d106      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800782c:	4b32      	ldr	r3, [pc, #200]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4a31      	ldr	r2, [pc, #196]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007836:	60d3      	str	r3, [r2, #12]
 8007838:	e011      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007842:	d10c      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	2101      	movs	r1, #1
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f8c8 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007854:	7cfb      	ldrb	r3, [r7, #19]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800785a:	7cfb      	ldrb	r3, [r7, #19]
 800785c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d028      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	491f      	ldr	r1, [pc, #124]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007888:	d106      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800788a:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007894:	60d3      	str	r3, [r2, #12]
 8007896:	e011      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078a0:	d10c      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3304      	adds	r3, #4
 80078a6:	2101      	movs	r1, #1
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 f899 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078b2:	7cfb      	ldrb	r3, [r7, #19]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80078b8:	7cfb      	ldrb	r3, [r7, #19]
 80078ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d02b      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d6:	4908      	ldr	r1, [pc, #32]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e6:	d109      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e8:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4a02      	ldr	r2, [pc, #8]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078f2:	60d3      	str	r3, [r2, #12]
 80078f4:	e014      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80078f6:	bf00      	nop
 80078f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007904:	d10c      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3304      	adds	r3, #4
 800790a:	2101      	movs	r1, #1
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f867 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 8007912:	4603      	mov	r3, r0
 8007914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007916:	7cfb      	ldrb	r3, [r7, #19]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800791c:	7cfb      	ldrb	r3, [r7, #19]
 800791e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d02f      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793a:	4928      	ldr	r1, [pc, #160]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800794a:	d10d      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f844 	bl	80079e0 <RCCEx_PLLSAI1_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d014      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007962:	7cfb      	ldrb	r3, [r7, #19]
 8007964:	74bb      	strb	r3, [r7, #18]
 8007966:	e011      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800796c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007970:	d10c      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3320      	adds	r3, #32
 8007976:	2102      	movs	r1, #2
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f925 	bl	8007bc8 <RCCEx_PLLSAI2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007982:	7cfb      	ldrb	r3, [r7, #19]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007988:	7cfb      	ldrb	r3, [r7, #19]
 800798a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a6:	490d      	ldr	r1, [pc, #52]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ca:	4904      	ldr	r1, [pc, #16]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40021000 	.word	0x40021000

080079e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079ee:	4b75      	ldr	r3, [pc, #468]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d018      	beq.n	8007a2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80079fa:	4b72      	ldr	r3, [pc, #456]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0203 	and.w	r2, r3, #3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d10d      	bne.n	8007a26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a12:	4b6c      	ldr	r3, [pc, #432]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
       ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d047      	beq.n	8007ab6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
 8007a2a:	e044      	b.n	8007ab6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d018      	beq.n	8007a66 <RCCEx_PLLSAI1_Config+0x86>
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d825      	bhi.n	8007a84 <RCCEx_PLLSAI1_Config+0xa4>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <RCCEx_PLLSAI1_Config+0x62>
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d009      	beq.n	8007a54 <RCCEx_PLLSAI1_Config+0x74>
 8007a40:	e020      	b.n	8007a84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a42:	4b60      	ldr	r3, [pc, #384]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11d      	bne.n	8007a8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a52:	e01a      	b.n	8007a8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a54:	4b5b      	ldr	r3, [pc, #364]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d116      	bne.n	8007a8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a64:	e013      	b.n	8007a8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a66:	4b57      	ldr	r3, [pc, #348]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a72:	4b54      	ldr	r3, [pc, #336]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a82:	e006      	b.n	8007a92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e004      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10d      	bne.n	8007ab6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a9a:	4b4a      	ldr	r3, [pc, #296]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6819      	ldr	r1, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	4944      	ldr	r1, [pc, #272]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d17d      	bne.n	8007bb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007abc:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a40      	ldr	r2, [pc, #256]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac8:	f7fc fd9a 	bl	8004600 <HAL_GetTick>
 8007acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ace:	e009      	b.n	8007ae4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ad0:	f7fc fd96 	bl	8004600 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d902      	bls.n	8007ae4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8007ae2:	e005      	b.n	8007af0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ae4:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1ef      	bne.n	8007ad0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d160      	bne.n	8007bb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d111      	bne.n	8007b20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007afc:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6892      	ldr	r2, [r2, #8]
 8007b0c:	0211      	lsls	r1, r2, #8
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	68d2      	ldr	r2, [r2, #12]
 8007b12:	0912      	lsrs	r2, r2, #4
 8007b14:	0452      	lsls	r2, r2, #17
 8007b16:	430a      	orrs	r2, r1
 8007b18:	492a      	ldr	r1, [pc, #168]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	610b      	str	r3, [r1, #16]
 8007b1e:	e027      	b.n	8007b70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d112      	bne.n	8007b4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b26:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6892      	ldr	r2, [r2, #8]
 8007b36:	0211      	lsls	r1, r2, #8
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6912      	ldr	r2, [r2, #16]
 8007b3c:	0852      	lsrs	r2, r2, #1
 8007b3e:	3a01      	subs	r2, #1
 8007b40:	0552      	lsls	r2, r2, #21
 8007b42:	430a      	orrs	r2, r1
 8007b44:	491f      	ldr	r1, [pc, #124]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	610b      	str	r3, [r1, #16]
 8007b4a:	e011      	b.n	8007b70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b4c:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6892      	ldr	r2, [r2, #8]
 8007b5c:	0211      	lsls	r1, r2, #8
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6952      	ldr	r2, [r2, #20]
 8007b62:	0852      	lsrs	r2, r2, #1
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0652      	lsls	r2, r2, #25
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	4916      	ldr	r1, [pc, #88]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b70:	4b14      	ldr	r3, [pc, #80]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7c:	f7fc fd40 	bl	8004600 <HAL_GetTick>
 8007b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b82:	e009      	b.n	8007b98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b84:	f7fc fd3c 	bl	8004600 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d902      	bls.n	8007b98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	73fb      	strb	r3, [r7, #15]
          break;
 8007b96:	e005      	b.n	8007ba4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0ef      	beq.n	8007b84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40021000 	.word	0x40021000

08007bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bd6:	4b6a      	ldr	r3, [pc, #424]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d018      	beq.n	8007c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007be2:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f003 0203 	and.w	r2, r3, #3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d10d      	bne.n	8007c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007bfa:	4b61      	ldr	r3, [pc, #388]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
       ||
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d047      	beq.n	8007c9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	e044      	b.n	8007c9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d018      	beq.n	8007c4e <RCCEx_PLLSAI2_Config+0x86>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d825      	bhi.n	8007c6c <RCCEx_PLLSAI2_Config+0xa4>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d002      	beq.n	8007c2a <RCCEx_PLLSAI2_Config+0x62>
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d009      	beq.n	8007c3c <RCCEx_PLLSAI2_Config+0x74>
 8007c28:	e020      	b.n	8007c6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c2a:	4b55      	ldr	r3, [pc, #340]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d11d      	bne.n	8007c72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c3a:	e01a      	b.n	8007c72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c3c:	4b50      	ldr	r3, [pc, #320]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d116      	bne.n	8007c76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c4c:	e013      	b.n	8007c76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c4e:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c5a:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c6a:	e006      	b.n	8007c7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c70:	e004      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10d      	bne.n	8007c9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c82:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	430b      	orrs	r3, r1
 8007c98:	4939      	ldr	r1, [pc, #228]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d167      	bne.n	8007d74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ca4:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb0:	f7fc fca6 	bl	8004600 <HAL_GetTick>
 8007cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cb6:	e009      	b.n	8007ccc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cb8:	f7fc fca2 	bl	8004600 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d902      	bls.n	8007ccc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8007cca:	e005      	b.n	8007cd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ef      	bne.n	8007cb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d14a      	bne.n	8007d74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d111      	bne.n	8007d08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ce4:	4b26      	ldr	r3, [pc, #152]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6892      	ldr	r2, [r2, #8]
 8007cf4:	0211      	lsls	r1, r2, #8
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68d2      	ldr	r2, [r2, #12]
 8007cfa:	0912      	lsrs	r2, r2, #4
 8007cfc:	0452      	lsls	r2, r2, #17
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	491f      	ldr	r1, [pc, #124]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	614b      	str	r3, [r1, #20]
 8007d06:	e011      	b.n	8007d2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6892      	ldr	r2, [r2, #8]
 8007d18:	0211      	lsls	r1, r2, #8
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6912      	ldr	r2, [r2, #16]
 8007d1e:	0852      	lsrs	r2, r2, #1
 8007d20:	3a01      	subs	r2, #1
 8007d22:	0652      	lsls	r2, r2, #25
 8007d24:	430a      	orrs	r2, r1
 8007d26:	4916      	ldr	r1, [pc, #88]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d2c:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a13      	ldr	r2, [pc, #76]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d38:	f7fc fc62 	bl	8004600 <HAL_GetTick>
 8007d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d3e:	e009      	b.n	8007d54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d40:	f7fc fc5e 	bl	8004600 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d902      	bls.n	8007d54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
          break;
 8007d52:	e005      	b.n	8007d60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0ef      	beq.n	8007d40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	4904      	ldr	r1, [pc, #16]	; (8007d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40021000 	.word	0x40021000

08007d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e049      	b.n	8007e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fb f8ee 	bl	8002f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f000 fc42 	bl	800864c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d001      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e04f      	b.n	8007eec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a23      	ldr	r2, [pc, #140]	; (8007ef8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01d      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e76:	d018      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	; (8007efc <HAL_TIM_Base_Start_IT+0xc8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0x76>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a19      	ldr	r2, [pc, #100]	; (8007f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d115      	bne.n	8007ed6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d015      	beq.n	8007ee8 <HAL_TIM_Base_Start_IT+0xb4>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec2:	d011      	beq.n	8007ee8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed4:	e008      	b.n	8007ee8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e000      	b.n	8007eea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	40012c00 	.word	0x40012c00
 8007efc:	40000400 	.word	0x40000400
 8007f00:	40000800 	.word	0x40000800
 8007f04:	40000c00 	.word	0x40000c00
 8007f08:	40013400 	.word	0x40013400
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	00010007 	.word	0x00010007

08007f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e049      	b.n	8007fba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fa ffb8 	bl	8002eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f000 fb7a 	bl	800864c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <HAL_TIM_PWM_Start+0x24>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	bf14      	ite	ne
 8007fe0:	2301      	movne	r3, #1
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	e03c      	b.n	8008062 <HAL_TIM_PWM_Start+0x9e>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d109      	bne.n	8008002 <HAL_TIM_PWM_Start+0x3e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	bf14      	ite	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	e02f      	b.n	8008062 <HAL_TIM_PWM_Start+0x9e>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d109      	bne.n	800801c <HAL_TIM_PWM_Start+0x58>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e022      	b.n	8008062 <HAL_TIM_PWM_Start+0x9e>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b0c      	cmp	r3, #12
 8008020:	d109      	bne.n	8008036 <HAL_TIM_PWM_Start+0x72>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b01      	cmp	r3, #1
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	e015      	b.n	8008062 <HAL_TIM_PWM_Start+0x9e>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b10      	cmp	r3, #16
 800803a:	d109      	bne.n	8008050 <HAL_TIM_PWM_Start+0x8c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b01      	cmp	r3, #1
 8008046:	bf14      	ite	ne
 8008048:	2301      	movne	r3, #1
 800804a:	2300      	moveq	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	e008      	b.n	8008062 <HAL_TIM_PWM_Start+0x9e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	bf14      	ite	ne
 800805c:	2301      	movne	r3, #1
 800805e:	2300      	moveq	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e09c      	b.n	80081a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <HAL_TIM_PWM_Start+0xb6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008078:	e023      	b.n	80080c2 <HAL_TIM_PWM_Start+0xfe>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d104      	bne.n	800808a <HAL_TIM_PWM_Start+0xc6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008088:	e01b      	b.n	80080c2 <HAL_TIM_PWM_Start+0xfe>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b08      	cmp	r3, #8
 800808e:	d104      	bne.n	800809a <HAL_TIM_PWM_Start+0xd6>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008098:	e013      	b.n	80080c2 <HAL_TIM_PWM_Start+0xfe>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b0c      	cmp	r3, #12
 800809e:	d104      	bne.n	80080aa <HAL_TIM_PWM_Start+0xe6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080a8:	e00b      	b.n	80080c2 <HAL_TIM_PWM_Start+0xfe>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d104      	bne.n	80080ba <HAL_TIM_PWM_Start+0xf6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b8:	e003      	b.n	80080c2 <HAL_TIM_PWM_Start+0xfe>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fe2e 	bl	8008d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a35      	ldr	r2, [pc, #212]	; (80081ac <HAL_TIM_PWM_Start+0x1e8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <HAL_TIM_PWM_Start+0x13e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a34      	ldr	r2, [pc, #208]	; (80081b0 <HAL_TIM_PWM_Start+0x1ec>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00e      	beq.n	8008102 <HAL_TIM_PWM_Start+0x13e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <HAL_TIM_PWM_Start+0x1f0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d009      	beq.n	8008102 <HAL_TIM_PWM_Start+0x13e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a31      	ldr	r2, [pc, #196]	; (80081b8 <HAL_TIM_PWM_Start+0x1f4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d004      	beq.n	8008102 <HAL_TIM_PWM_Start+0x13e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2f      	ldr	r2, [pc, #188]	; (80081bc <HAL_TIM_PWM_Start+0x1f8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d101      	bne.n	8008106 <HAL_TIM_PWM_Start+0x142>
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <HAL_TIM_PWM_Start+0x144>
 8008106:	2300      	movs	r3, #0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800811a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a22      	ldr	r2, [pc, #136]	; (80081ac <HAL_TIM_PWM_Start+0x1e8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01d      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d018      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a22      	ldr	r2, [pc, #136]	; (80081c0 <HAL_TIM_PWM_Start+0x1fc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <HAL_TIM_PWM_Start+0x200>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <HAL_TIM_PWM_Start+0x204>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <HAL_TIM_PWM_Start+0x1ec>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIM_PWM_Start+0x1f0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d115      	bne.n	800818e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	4b18      	ldr	r3, [pc, #96]	; (80081cc <HAL_TIM_PWM_Start+0x208>)
 800816a:	4013      	ands	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b06      	cmp	r3, #6
 8008172:	d015      	beq.n	80081a0 <HAL_TIM_PWM_Start+0x1dc>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800817a:	d011      	beq.n	80081a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818c:	e008      	b.n	80081a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e000      	b.n	80081a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40000c00 	.word	0x40000c00
 80081cc:	00010007 	.word	0x00010007

080081d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d020      	beq.n	8008234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01b      	beq.n	8008234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0202 	mvn.w	r2, #2
 8008204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9f8 	bl	8008610 <HAL_TIM_IC_CaptureCallback>
 8008220:	e005      	b.n	800822e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9ea 	bl	80085fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f9fb 	bl	8008624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d020      	beq.n	8008280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01b      	beq.n	8008280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0204 	mvn.w	r2, #4
 8008250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9d2 	bl	8008610 <HAL_TIM_IC_CaptureCallback>
 800826c:	e005      	b.n	800827a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9c4 	bl	80085fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f9d5 	bl	8008624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d020      	beq.n	80082cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01b      	beq.n	80082cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0208 	mvn.w	r2, #8
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2204      	movs	r2, #4
 80082a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9ac 	bl	8008610 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f99e 	bl	80085fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9af 	bl	8008624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d020      	beq.n	8008318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01b      	beq.n	8008318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0210 	mvn.w	r2, #16
 80082e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2208      	movs	r2, #8
 80082ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f986 	bl	8008610 <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f978 	bl	80085fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f989 	bl	8008624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f06f 0201 	mvn.w	r2, #1
 8008334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fa f938 	bl	80025ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fe1c 	bl	8008f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800837c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fe14 	bl	8008fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f948 	bl	8008638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00c      	beq.n	80083cc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0220 	mvn.w	r2, #32
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fddc 	bl	8008f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e0ff      	b.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b14      	cmp	r3, #20
 80083fe:	f200 80f0 	bhi.w	80085e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080085e3 	.word	0x080085e3
 8008410:	080085e3 	.word	0x080085e3
 8008414:	080085e3 	.word	0x080085e3
 8008418:	0800849d 	.word	0x0800849d
 800841c:	080085e3 	.word	0x080085e3
 8008420:	080085e3 	.word	0x080085e3
 8008424:	080085e3 	.word	0x080085e3
 8008428:	080084df 	.word	0x080084df
 800842c:	080085e3 	.word	0x080085e3
 8008430:	080085e3 	.word	0x080085e3
 8008434:	080085e3 	.word	0x080085e3
 8008438:	0800851f 	.word	0x0800851f
 800843c:	080085e3 	.word	0x080085e3
 8008440:	080085e3 	.word	0x080085e3
 8008444:	080085e3 	.word	0x080085e3
 8008448:	08008561 	.word	0x08008561
 800844c:	080085e3 	.word	0x080085e3
 8008450:	080085e3 	.word	0x080085e3
 8008454:	080085e3 	.word	0x080085e3
 8008458:	080085a1 	.word	0x080085a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f98c 	bl	8008780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0208 	orr.w	r2, r2, #8
 8008476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0204 	bic.w	r2, r2, #4
 8008486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6999      	ldr	r1, [r3, #24]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	619a      	str	r2, [r3, #24]
      break;
 800849a:	e0a5      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f9fc 	bl	80088a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6999      	ldr	r1, [r3, #24]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	021a      	lsls	r2, r3, #8
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	619a      	str	r2, [r3, #24]
      break;
 80084dc:	e084      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fa65 	bl	80089b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0208 	orr.w	r2, r2, #8
 80084f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0204 	bic.w	r2, r2, #4
 8008508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69d9      	ldr	r1, [r3, #28]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	691a      	ldr	r2, [r3, #16]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	61da      	str	r2, [r3, #28]
      break;
 800851c:	e064      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 facd 	bl	8008ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69d9      	ldr	r1, [r3, #28]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	021a      	lsls	r2, r3, #8
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	61da      	str	r2, [r3, #28]
      break;
 800855e:	e043      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fb16 	bl	8008b98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0208 	orr.w	r2, r2, #8
 800857a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0204 	bic.w	r2, r2, #4
 800858a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691a      	ldr	r2, [r3, #16]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800859e:	e023      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fb5a 	bl	8008c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	021a      	lsls	r2, r3, #8
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085e0:	e002      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
      break;
 80085e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop

080085fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a40      	ldr	r2, [pc, #256]	; (8008760 <TIM_Base_SetConfig+0x114>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d013      	beq.n	800868c <TIM_Base_SetConfig+0x40>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866a:	d00f      	beq.n	800868c <TIM_Base_SetConfig+0x40>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a3d      	ldr	r2, [pc, #244]	; (8008764 <TIM_Base_SetConfig+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00b      	beq.n	800868c <TIM_Base_SetConfig+0x40>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <TIM_Base_SetConfig+0x11c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_Base_SetConfig+0x40>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a3b      	ldr	r2, [pc, #236]	; (800876c <TIM_Base_SetConfig+0x120>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_Base_SetConfig+0x40>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a3a      	ldr	r2, [pc, #232]	; (8008770 <TIM_Base_SetConfig+0x124>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d108      	bne.n	800869e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2f      	ldr	r2, [pc, #188]	; (8008760 <TIM_Base_SetConfig+0x114>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01f      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ac:	d01b      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a2c      	ldr	r2, [pc, #176]	; (8008764 <TIM_Base_SetConfig+0x118>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d017      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a2b      	ldr	r2, [pc, #172]	; (8008768 <TIM_Base_SetConfig+0x11c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a2a      	ldr	r2, [pc, #168]	; (800876c <TIM_Base_SetConfig+0x120>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00f      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a29      	ldr	r2, [pc, #164]	; (8008770 <TIM_Base_SetConfig+0x124>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00b      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a28      	ldr	r2, [pc, #160]	; (8008774 <TIM_Base_SetConfig+0x128>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a27      	ldr	r2, [pc, #156]	; (8008778 <TIM_Base_SetConfig+0x12c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a26      	ldr	r2, [pc, #152]	; (800877c <TIM_Base_SetConfig+0x130>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d108      	bne.n	80086f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a10      	ldr	r2, [pc, #64]	; (8008760 <TIM_Base_SetConfig+0x114>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00f      	beq.n	8008744 <TIM_Base_SetConfig+0xf8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a12      	ldr	r2, [pc, #72]	; (8008770 <TIM_Base_SetConfig+0x124>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <TIM_Base_SetConfig+0xf8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a11      	ldr	r2, [pc, #68]	; (8008774 <TIM_Base_SetConfig+0x128>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <TIM_Base_SetConfig+0xf8>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a10      	ldr	r2, [pc, #64]	; (8008778 <TIM_Base_SetConfig+0x12c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_Base_SetConfig+0xf8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a0f      	ldr	r2, [pc, #60]	; (800877c <TIM_Base_SetConfig+0x130>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d103      	bne.n	800874c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	615a      	str	r2, [r3, #20]
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40012c00 	.word	0x40012c00
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	f023 0201 	bic.w	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f023 0302 	bic.w	r3, r3, #2
 80087cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a2c      	ldr	r2, [pc, #176]	; (800888c <TIM_OC1_SetConfig+0x10c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00f      	beq.n	8008800 <TIM_OC1_SetConfig+0x80>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a2b      	ldr	r2, [pc, #172]	; (8008890 <TIM_OC1_SetConfig+0x110>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00b      	beq.n	8008800 <TIM_OC1_SetConfig+0x80>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a2a      	ldr	r2, [pc, #168]	; (8008894 <TIM_OC1_SetConfig+0x114>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d007      	beq.n	8008800 <TIM_OC1_SetConfig+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <TIM_OC1_SetConfig+0x118>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d003      	beq.n	8008800 <TIM_OC1_SetConfig+0x80>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a28      	ldr	r2, [pc, #160]	; (800889c <TIM_OC1_SetConfig+0x11c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10c      	bne.n	800881a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 0308 	bic.w	r3, r3, #8
 8008806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f023 0304 	bic.w	r3, r3, #4
 8008818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <TIM_OC1_SetConfig+0x10c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00f      	beq.n	8008842 <TIM_OC1_SetConfig+0xc2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <TIM_OC1_SetConfig+0x110>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00b      	beq.n	8008842 <TIM_OC1_SetConfig+0xc2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a19      	ldr	r2, [pc, #100]	; (8008894 <TIM_OC1_SetConfig+0x114>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <TIM_OC1_SetConfig+0xc2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a18      	ldr	r2, [pc, #96]	; (8008898 <TIM_OC1_SetConfig+0x118>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_OC1_SetConfig+0xc2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a17      	ldr	r2, [pc, #92]	; (800889c <TIM_OC1_SetConfig+0x11c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d111      	bne.n	8008866 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	621a      	str	r2, [r3, #32]
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40013400 	.word	0x40013400
 8008894:	40014000 	.word	0x40014000
 8008898:	40014400 	.word	0x40014400
 800889c:	40014800 	.word	0x40014800

080088a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	f023 0210 	bic.w	r2, r3, #16
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f023 0320 	bic.w	r3, r3, #32
 80088ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <TIM_OC2_SetConfig+0x100>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_OC2_SetConfig+0x6c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <TIM_OC2_SetConfig+0x104>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d10d      	bne.n	8008928 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <TIM_OC2_SetConfig+0x100>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00f      	beq.n	8008950 <TIM_OC2_SetConfig+0xb0>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <TIM_OC2_SetConfig+0x104>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00b      	beq.n	8008950 <TIM_OC2_SetConfig+0xb0>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <TIM_OC2_SetConfig+0x108>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_OC2_SetConfig+0xb0>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <TIM_OC2_SetConfig+0x10c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_OC2_SetConfig+0xb0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <TIM_OC2_SetConfig+0x110>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d113      	bne.n	8008978 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	621a      	str	r2, [r3, #32]
}
 8008992:	bf00      	nop
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40012c00 	.word	0x40012c00
 80089a4:	40013400 	.word	0x40013400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800

080089b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a27      	ldr	r2, [pc, #156]	; (8008ab0 <TIM_OC3_SetConfig+0xfc>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_OC3_SetConfig+0x6a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a26      	ldr	r2, [pc, #152]	; (8008ab4 <TIM_OC3_SetConfig+0x100>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d10d      	bne.n	8008a3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	021b      	lsls	r3, r3, #8
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <TIM_OC3_SetConfig+0xfc>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00f      	beq.n	8008a62 <TIM_OC3_SetConfig+0xae>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a1b      	ldr	r2, [pc, #108]	; (8008ab4 <TIM_OC3_SetConfig+0x100>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00b      	beq.n	8008a62 <TIM_OC3_SetConfig+0xae>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a1a      	ldr	r2, [pc, #104]	; (8008ab8 <TIM_OC3_SetConfig+0x104>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d007      	beq.n	8008a62 <TIM_OC3_SetConfig+0xae>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a19      	ldr	r2, [pc, #100]	; (8008abc <TIM_OC3_SetConfig+0x108>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d003      	beq.n	8008a62 <TIM_OC3_SetConfig+0xae>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <TIM_OC3_SetConfig+0x10c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d113      	bne.n	8008a8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	621a      	str	r2, [r3, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	40012c00 	.word	0x40012c00
 8008ab4:	40013400 	.word	0x40013400
 8008ab8:	40014000 	.word	0x40014000
 8008abc:	40014400 	.word	0x40014400
 8008ac0:	40014800 	.word	0x40014800

08008ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	031b      	lsls	r3, r3, #12
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <TIM_OC4_SetConfig+0xc0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00f      	beq.n	8008b48 <TIM_OC4_SetConfig+0x84>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a17      	ldr	r2, [pc, #92]	; (8008b88 <TIM_OC4_SetConfig+0xc4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00b      	beq.n	8008b48 <TIM_OC4_SetConfig+0x84>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <TIM_OC4_SetConfig+0xc8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d007      	beq.n	8008b48 <TIM_OC4_SetConfig+0x84>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a15      	ldr	r2, [pc, #84]	; (8008b90 <TIM_OC4_SetConfig+0xcc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d003      	beq.n	8008b48 <TIM_OC4_SetConfig+0x84>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a14      	ldr	r2, [pc, #80]	; (8008b94 <TIM_OC4_SetConfig+0xd0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d109      	bne.n	8008b5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	019b      	lsls	r3, r3, #6
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	621a      	str	r2, [r3, #32]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40012c00 	.word	0x40012c00
 8008b88:	40013400 	.word	0x40013400
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400
 8008b94:	40014800 	.word	0x40014800

08008b98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008bdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a17      	ldr	r2, [pc, #92]	; (8008c4c <TIM_OC5_SetConfig+0xb4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00f      	beq.n	8008c12 <TIM_OC5_SetConfig+0x7a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <TIM_OC5_SetConfig+0xb8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00b      	beq.n	8008c12 <TIM_OC5_SetConfig+0x7a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a15      	ldr	r2, [pc, #84]	; (8008c54 <TIM_OC5_SetConfig+0xbc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <TIM_OC5_SetConfig+0x7a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <TIM_OC5_SetConfig+0xc0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_OC5_SetConfig+0x7a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <TIM_OC5_SetConfig+0xc4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d109      	bne.n	8008c26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	621a      	str	r2, [r3, #32]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40013400 	.word	0x40013400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	021b      	lsls	r3, r3, #8
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	051b      	lsls	r3, r3, #20
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <TIM_OC6_SetConfig+0xb8>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00f      	beq.n	8008cdc <TIM_OC6_SetConfig+0x7c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <TIM_OC6_SetConfig+0xbc>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <TIM_OC6_SetConfig+0x7c>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a16      	ldr	r2, [pc, #88]	; (8008d20 <TIM_OC6_SetConfig+0xc0>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d007      	beq.n	8008cdc <TIM_OC6_SetConfig+0x7c>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <TIM_OC6_SetConfig+0xc4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d003      	beq.n	8008cdc <TIM_OC6_SetConfig+0x7c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <TIM_OC6_SetConfig+0xc8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d109      	bne.n	8008cf0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	029b      	lsls	r3, r3, #10
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40013400 	.word	0x40013400
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800

08008d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f003 031f 	and.w	r3, r3, #31
 8008d3e:	2201      	movs	r2, #1
 8008d40:	fa02 f303 	lsl.w	r3, r2, r3
 8008d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a1a      	ldr	r2, [r3, #32]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	401a      	ands	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	fa01 f303 	lsl.w	r3, r1, r3
 8008d64:	431a      	orrs	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
	...

08008d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e068      	b.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a2e      	ldr	r2, [pc, #184]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a2d      	ldr	r2, [pc, #180]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d108      	bne.n	8008dd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d01d      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e02:	d018      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d013      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1a      	ldr	r2, [pc, #104]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00e      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d009      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d004      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a14      	ldr	r2, [pc, #80]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d10c      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40012c00 	.word	0x40012c00
 8008e74:	40013400 	.word	0x40013400
 8008e78:	40000400 	.word	0x40000400
 8008e7c:	40000800 	.word	0x40000800
 8008e80:	40000c00 	.word	0x40000c00
 8008e84:	40014000 	.word	0x40014000

08008e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e065      	b.n	8008f70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a16      	ldr	r2, [pc, #88]	; (8008f7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d004      	beq.n	8008f32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a14      	ldr	r2, [pc, #80]	; (8008f80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d115      	bne.n	8008f5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	051b      	lsls	r3, r3, #20
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	40013400 	.word	0x40013400

08008f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e040      	b.n	8009054 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7fa f8f2 	bl	80031cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2224      	movs	r2, #36	; 0x24
 8008fec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 0201 	bic.w	r2, r2, #1
 8008ffc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 feb6 	bl	8009d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fbfb 	bl	8009808 <UART_SetConfig>
 8009012:	4603      	mov	r3, r0
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e01b      	b.n	8009054 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800902a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800903a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 ff35 	bl	8009ebc <UART_CheckIdleState>
 8009052:	4603      	mov	r3, r0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	; 0x28
 8009060:	af02      	add	r7, sp, #8
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009070:	2b20      	cmp	r3, #32
 8009072:	d178      	bne.n	8009166 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <HAL_UART_Transmit+0x24>
 800907a:	88fb      	ldrh	r3, [r7, #6]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e071      	b.n	8009168 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2221      	movs	r2, #33	; 0x21
 8009090:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009092:	f7fb fab5 	bl	8004600 <HAL_GetTick>
 8009096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b0:	d108      	bne.n	80090c4 <HAL_UART_Transmit+0x68>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	e003      	b.n	80090cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090cc:	e030      	b.n	8009130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2180      	movs	r1, #128	; 0x80
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 ff97 	bl	800a00c <UART_WaitOnFlagUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e03c      	b.n	8009168 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	881a      	ldrh	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009100:	b292      	uxth	r2, r2
 8009102:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	3302      	adds	r3, #2
 8009108:	61bb      	str	r3, [r7, #24]
 800910a:	e008      	b.n	800911e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	781a      	ldrb	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	b292      	uxth	r2, r2
 8009116:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	3301      	adds	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1c8      	bne.n	80090ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2200      	movs	r2, #0
 8009144:	2140      	movs	r1, #64	; 0x40
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 ff60 	bl	800a00c <UART_WaitOnFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d004      	beq.n	800915c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2220      	movs	r2, #32
 8009156:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e005      	b.n	8009168 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2220      	movs	r2, #32
 8009160:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	e000      	b.n	8009168 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009166:	2302      	movs	r3, #2
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009184:	2b20      	cmp	r3, #32
 8009186:	d137      	bne.n	80091f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <HAL_UART_Receive_IT+0x24>
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e030      	b.n	80091fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a18      	ldr	r2, [pc, #96]	; (8009204 <HAL_UART_Receive_IT+0x94>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d01f      	beq.n	80091e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d018      	beq.n	80091e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	613b      	str	r3, [r7, #16]
   return(result);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	623b      	str	r3, [r7, #32]
 80091d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	6a3a      	ldr	r2, [r7, #32]
 80091dc:	e841 2300 	strex	r3, r2, [r1]
 80091e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e6      	bne.n	80091b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	461a      	mov	r2, r3
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 ff74 	bl	800a0dc <UART_Start_Receive_IT>
 80091f4:	4603      	mov	r3, r0
 80091f6:	e000      	b.n	80091fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091f8:	2302      	movs	r3, #2
  }
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3728      	adds	r7, #40	; 0x28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	40008000 	.word	0x40008000

08009208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b0ba      	sub	sp, #232	; 0xe8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800922e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009232:	f640 030f 	movw	r3, #2063	; 0x80f
 8009236:	4013      	ands	r3, r2
 8009238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800923c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009240:	2b00      	cmp	r3, #0
 8009242:	d115      	bne.n	8009270 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00f      	beq.n	8009270 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 82ae 	beq.w	80097c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
      }
      return;
 800926e:	e2a8      	b.n	80097c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8117 	beq.w	80094a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800927a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800928a:	4b85      	ldr	r3, [pc, #532]	; (80094a0 <HAL_UART_IRQHandler+0x298>)
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 810a 	beq.w	80094a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d011      	beq.n	80092c4 <HAL_UART_IRQHandler+0xbc>
 80092a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2201      	movs	r2, #1
 80092b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ba:	f043 0201 	orr.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d011      	beq.n	80092f4 <HAL_UART_IRQHandler+0xec>
 80092d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2202      	movs	r2, #2
 80092e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ea:	f043 0204 	orr.w	r2, r3, #4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d011      	beq.n	8009324 <HAL_UART_IRQHandler+0x11c>
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2204      	movs	r2, #4
 8009312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800931a:	f043 0202 	orr.w	r2, r3, #2
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d017      	beq.n	8009360 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800933c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009340:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2208      	movs	r2, #8
 800934e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009356:	f043 0208 	orr.w	r2, r3, #8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009368:	2b00      	cmp	r3, #0
 800936a:	d012      	beq.n	8009392 <HAL_UART_IRQHandler+0x18a>
 800936c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009388:	f043 0220 	orr.w	r2, r3, #32
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8214 	beq.w	80097c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800939e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a2:	f003 0320 	and.w	r3, r3, #32
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d007      	beq.n	80093c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b40      	cmp	r3, #64	; 0x40
 80093dc:	d005      	beq.n	80093ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d04f      	beq.n	800948a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 ff3c 	bl	800a268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fa:	2b40      	cmp	r3, #64	; 0x40
 80093fc:	d141      	bne.n	8009482 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3308      	adds	r3, #8
 8009426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800942a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800942e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1d9      	bne.n	80093fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944e:	2b00      	cmp	r3, #0
 8009450:	d013      	beq.n	800947a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009456:	4a13      	ldr	r2, [pc, #76]	; (80094a4 <HAL_UART_IRQHandler+0x29c>)
 8009458:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945e:	4618      	mov	r0, r3
 8009460:	f7fc fe44 	bl	80060ec <HAL_DMA_Abort_IT>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d017      	beq.n	800949a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009478:	e00f      	b.n	800949a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9ae 	bl	80097dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009480:	e00b      	b.n	800949a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9aa 	bl	80097dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009488:	e007      	b.n	800949a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9a6 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009498:	e195      	b.n	80097c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949a:	bf00      	nop
    return;
 800949c:	e193      	b.n	80097c6 <HAL_UART_IRQHandler+0x5be>
 800949e:	bf00      	nop
 80094a0:	04000120 	.word	0x04000120
 80094a4:	0800a331 	.word	0x0800a331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	f040 814e 	bne.w	800974e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8147 	beq.w	800974e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8140 	beq.w	800974e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2210      	movs	r2, #16
 80094d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	f040 80b8 	bne.w	8009656 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 8167 	beq.w	80097ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009506:	429a      	cmp	r2, r3
 8009508:	f080 815f 	bcs.w	80097ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009512:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 8086 	bne.w	8009634 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800953c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009556:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800955e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800956a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1da      	bne.n	8009528 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3308      	adds	r3, #8
 8009578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800959a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800959e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e1      	bne.n	8009572 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e3      	bne.n	80095ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009604:	f023 0310 	bic.w	r3, r3, #16
 8009608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009616:	65bb      	str	r3, [r7, #88]	; 0x58
 8009618:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800961c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e4      	bne.n	80095f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962e:	4618      	mov	r0, r3
 8009630:	f7fc fd1e 	bl	8006070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009646:	b29b      	uxth	r3, r3
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	b29b      	uxth	r3, r3
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f8ce 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009654:	e0b9      	b.n	80097ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009662:	b29b      	uxth	r3, r3
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009670:	b29b      	uxth	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80ab 	beq.w	80097ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80a6 	beq.w	80097ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096a4:	647b      	str	r3, [r7, #68]	; 0x44
 80096a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e4      	bne.n	8009682 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	623b      	str	r3, [r7, #32]
   return(result);
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	f023 0301 	bic.w	r3, r3, #1
 80096ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096dc:	633a      	str	r2, [r7, #48]	; 0x30
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e3      	bne.n	80096b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	60fb      	str	r3, [r7, #12]
   return(result);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f023 0310 	bic.w	r3, r3, #16
 8009718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	69b9      	ldr	r1, [r7, #24]
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	617b      	str	r3, [r7, #20]
   return(result);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e4      	bne.n	8009704 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f852 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800974c:	e03f      	b.n	80097ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800974e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00e      	beq.n	8009778 <HAL_UART_IRQHandler+0x570>
 800975a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800975e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d008      	beq.n	8009778 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800976e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 ffd9 	bl	800a728 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009776:	e02d      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
    }
    return;
 80097a0:	e017      	b.n	80097d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d012      	beq.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
 80097ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00c      	beq.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fdce 	bl	800a35c <UART_EndTransmit_IT>
    return;
 80097c0:	e008      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80097c2:	bf00      	nop
 80097c4:	e006      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80097c6:	bf00      	nop
 80097c8:	e004      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80097ca:	bf00      	nop
 80097cc:	e002      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80097ce:	bf00      	nop
 80097d0:	e000      	b.n	80097d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80097d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80097d4:	37e8      	adds	r7, #232	; 0xe8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop

080097dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800980c:	b08a      	sub	sp, #40	; 0x28
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	431a      	orrs	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	431a      	orrs	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	4313      	orrs	r3, r2
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4ba4      	ldr	r3, [pc, #656]	; (8009ac8 <UART_SetConfig+0x2c0>)
 8009838:	4013      	ands	r3, r2
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009840:	430b      	orrs	r3, r1
 8009842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a99      	ldr	r2, [pc, #612]	; (8009acc <UART_SetConfig+0x2c4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d004      	beq.n	8009874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009870:	4313      	orrs	r3, r2
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009884:	430a      	orrs	r2, r1
 8009886:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a90      	ldr	r2, [pc, #576]	; (8009ad0 <UART_SetConfig+0x2c8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d126      	bne.n	80098e0 <UART_SetConfig+0xd8>
 8009892:	4b90      	ldr	r3, [pc, #576]	; (8009ad4 <UART_SetConfig+0x2cc>)
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009898:	f003 0303 	and.w	r3, r3, #3
 800989c:	2b03      	cmp	r3, #3
 800989e:	d81b      	bhi.n	80098d8 <UART_SetConfig+0xd0>
 80098a0:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0xa0>)
 80098a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a6:	bf00      	nop
 80098a8:	080098b9 	.word	0x080098b9
 80098ac:	080098c9 	.word	0x080098c9
 80098b0:	080098c1 	.word	0x080098c1
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098be:	e116      	b.n	8009aee <UART_SetConfig+0x2e6>
 80098c0:	2302      	movs	r3, #2
 80098c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098c6:	e112      	b.n	8009aee <UART_SetConfig+0x2e6>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ce:	e10e      	b.n	8009aee <UART_SetConfig+0x2e6>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098d6:	e10a      	b.n	8009aee <UART_SetConfig+0x2e6>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098de:	e106      	b.n	8009aee <UART_SetConfig+0x2e6>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a7c      	ldr	r2, [pc, #496]	; (8009ad8 <UART_SetConfig+0x2d0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d138      	bne.n	800995c <UART_SetConfig+0x154>
 80098ea:	4b7a      	ldr	r3, [pc, #488]	; (8009ad4 <UART_SetConfig+0x2cc>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	f003 030c 	and.w	r3, r3, #12
 80098f4:	2b0c      	cmp	r3, #12
 80098f6:	d82d      	bhi.n	8009954 <UART_SetConfig+0x14c>
 80098f8:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <UART_SetConfig+0xf8>)
 80098fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fe:	bf00      	nop
 8009900:	08009935 	.word	0x08009935
 8009904:	08009955 	.word	0x08009955
 8009908:	08009955 	.word	0x08009955
 800990c:	08009955 	.word	0x08009955
 8009910:	08009945 	.word	0x08009945
 8009914:	08009955 	.word	0x08009955
 8009918:	08009955 	.word	0x08009955
 800991c:	08009955 	.word	0x08009955
 8009920:	0800993d 	.word	0x0800993d
 8009924:	08009955 	.word	0x08009955
 8009928:	08009955 	.word	0x08009955
 800992c:	08009955 	.word	0x08009955
 8009930:	0800994d 	.word	0x0800994d
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800993a:	e0d8      	b.n	8009aee <UART_SetConfig+0x2e6>
 800993c:	2302      	movs	r3, #2
 800993e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009942:	e0d4      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800994a:	e0d0      	b.n	8009aee <UART_SetConfig+0x2e6>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009952:	e0cc      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800995a:	e0c8      	b.n	8009aee <UART_SetConfig+0x2e6>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a5e      	ldr	r2, [pc, #376]	; (8009adc <UART_SetConfig+0x2d4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d125      	bne.n	80099b2 <UART_SetConfig+0x1aa>
 8009966:	4b5b      	ldr	r3, [pc, #364]	; (8009ad4 <UART_SetConfig+0x2cc>)
 8009968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009970:	2b30      	cmp	r3, #48	; 0x30
 8009972:	d016      	beq.n	80099a2 <UART_SetConfig+0x19a>
 8009974:	2b30      	cmp	r3, #48	; 0x30
 8009976:	d818      	bhi.n	80099aa <UART_SetConfig+0x1a2>
 8009978:	2b20      	cmp	r3, #32
 800997a:	d00a      	beq.n	8009992 <UART_SetConfig+0x18a>
 800997c:	2b20      	cmp	r3, #32
 800997e:	d814      	bhi.n	80099aa <UART_SetConfig+0x1a2>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <UART_SetConfig+0x182>
 8009984:	2b10      	cmp	r3, #16
 8009986:	d008      	beq.n	800999a <UART_SetConfig+0x192>
 8009988:	e00f      	b.n	80099aa <UART_SetConfig+0x1a2>
 800998a:	2300      	movs	r3, #0
 800998c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009990:	e0ad      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009992:	2302      	movs	r3, #2
 8009994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009998:	e0a9      	b.n	8009aee <UART_SetConfig+0x2e6>
 800999a:	2304      	movs	r3, #4
 800999c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a0:	e0a5      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099a2:	2308      	movs	r3, #8
 80099a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a8:	e0a1      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099aa:	2310      	movs	r3, #16
 80099ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099b0:	e09d      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a4a      	ldr	r2, [pc, #296]	; (8009ae0 <UART_SetConfig+0x2d8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d125      	bne.n	8009a08 <UART_SetConfig+0x200>
 80099bc:	4b45      	ldr	r3, [pc, #276]	; (8009ad4 <UART_SetConfig+0x2cc>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099c6:	2bc0      	cmp	r3, #192	; 0xc0
 80099c8:	d016      	beq.n	80099f8 <UART_SetConfig+0x1f0>
 80099ca:	2bc0      	cmp	r3, #192	; 0xc0
 80099cc:	d818      	bhi.n	8009a00 <UART_SetConfig+0x1f8>
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d00a      	beq.n	80099e8 <UART_SetConfig+0x1e0>
 80099d2:	2b80      	cmp	r3, #128	; 0x80
 80099d4:	d814      	bhi.n	8009a00 <UART_SetConfig+0x1f8>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <UART_SetConfig+0x1d8>
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d008      	beq.n	80099f0 <UART_SetConfig+0x1e8>
 80099de:	e00f      	b.n	8009a00 <UART_SetConfig+0x1f8>
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099e6:	e082      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099e8:	2302      	movs	r3, #2
 80099ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ee:	e07e      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099f0:	2304      	movs	r3, #4
 80099f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099f6:	e07a      	b.n	8009aee <UART_SetConfig+0x2e6>
 80099f8:	2308      	movs	r3, #8
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099fe:	e076      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a00:	2310      	movs	r3, #16
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a06:	e072      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a35      	ldr	r2, [pc, #212]	; (8009ae4 <UART_SetConfig+0x2dc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d12a      	bne.n	8009a68 <UART_SetConfig+0x260>
 8009a12:	4b30      	ldr	r3, [pc, #192]	; (8009ad4 <UART_SetConfig+0x2cc>)
 8009a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a20:	d01a      	beq.n	8009a58 <UART_SetConfig+0x250>
 8009a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a26:	d81b      	bhi.n	8009a60 <UART_SetConfig+0x258>
 8009a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a2c:	d00c      	beq.n	8009a48 <UART_SetConfig+0x240>
 8009a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a32:	d815      	bhi.n	8009a60 <UART_SetConfig+0x258>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <UART_SetConfig+0x238>
 8009a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a3c:	d008      	beq.n	8009a50 <UART_SetConfig+0x248>
 8009a3e:	e00f      	b.n	8009a60 <UART_SetConfig+0x258>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a46:	e052      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a4e:	e04e      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a56:	e04a      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a5e:	e046      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a66:	e042      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a17      	ldr	r2, [pc, #92]	; (8009acc <UART_SetConfig+0x2c4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d13a      	bne.n	8009ae8 <UART_SetConfig+0x2e0>
 8009a72:	4b18      	ldr	r3, [pc, #96]	; (8009ad4 <UART_SetConfig+0x2cc>)
 8009a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a80:	d01a      	beq.n	8009ab8 <UART_SetConfig+0x2b0>
 8009a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a86:	d81b      	bhi.n	8009ac0 <UART_SetConfig+0x2b8>
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8c:	d00c      	beq.n	8009aa8 <UART_SetConfig+0x2a0>
 8009a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a92:	d815      	bhi.n	8009ac0 <UART_SetConfig+0x2b8>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <UART_SetConfig+0x298>
 8009a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9c:	d008      	beq.n	8009ab0 <UART_SetConfig+0x2a8>
 8009a9e:	e00f      	b.n	8009ac0 <UART_SetConfig+0x2b8>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009aa6:	e022      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009aae:	e01e      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ab6:	e01a      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009abe:	e016      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ac6:	e012      	b.n	8009aee <UART_SetConfig+0x2e6>
 8009ac8:	efff69f3 	.word	0xefff69f3
 8009acc:	40008000 	.word	0x40008000
 8009ad0:	40013800 	.word	0x40013800
 8009ad4:	40021000 	.word	0x40021000
 8009ad8:	40004400 	.word	0x40004400
 8009adc:	40004800 	.word	0x40004800
 8009ae0:	40004c00 	.word	0x40004c00
 8009ae4:	40005000 	.word	0x40005000
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a9f      	ldr	r2, [pc, #636]	; (8009d70 <UART_SetConfig+0x568>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d17a      	bne.n	8009bee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d824      	bhi.n	8009b4a <UART_SetConfig+0x342>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x300>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b4b 	.word	0x08009b4b
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b4b 	.word	0x08009b4b
 8009b18:	08009b3b 	.word	0x08009b3b
 8009b1c:	08009b4b 	.word	0x08009b4b
 8009b20:	08009b4b 	.word	0x08009b4b
 8009b24:	08009b4b 	.word	0x08009b4b
 8009b28:	08009b43 	.word	0x08009b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fd fbe2 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8009b30:	61f8      	str	r0, [r7, #28]
        break;
 8009b32:	e010      	b.n	8009b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b34:	4b8f      	ldr	r3, [pc, #572]	; (8009d74 <UART_SetConfig+0x56c>)
 8009b36:	61fb      	str	r3, [r7, #28]
        break;
 8009b38:	e00d      	b.n	8009b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b3a:	f7fd fb43 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8009b3e:	61f8      	str	r0, [r7, #28]
        break;
 8009b40:	e009      	b.n	8009b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b46:	61fb      	str	r3, [r7, #28]
        break;
 8009b48:	e005      	b.n	8009b56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80fb 	beq.w	8009d54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d305      	bcc.n	8009b7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d903      	bls.n	8009b82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b80:	e0e8      	b.n	8009d54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	2200      	movs	r2, #0
 8009b86:	461c      	mov	r4, r3
 8009b88:	4615      	mov	r5, r2
 8009b8a:	f04f 0200 	mov.w	r2, #0
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	022b      	lsls	r3, r5, #8
 8009b94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b98:	0222      	lsls	r2, r4, #8
 8009b9a:	68f9      	ldr	r1, [r7, #12]
 8009b9c:	6849      	ldr	r1, [r1, #4]
 8009b9e:	0849      	lsrs	r1, r1, #1
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	4688      	mov	r8, r1
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	eb12 0a08 	adds.w	sl, r2, r8
 8009baa:	eb43 0b09 	adc.w	fp, r3, r9
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bbc:	4650      	mov	r0, sl
 8009bbe:	4659      	mov	r1, fp
 8009bc0:	f7f7 f812 	bl	8000be8 <__aeabi_uldivmod>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4613      	mov	r3, r2
 8009bca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bd2:	d308      	bcc.n	8009be6 <UART_SetConfig+0x3de>
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bda:	d204      	bcs.n	8009be6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	60da      	str	r2, [r3, #12]
 8009be4:	e0b6      	b.n	8009d54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009bec:	e0b2      	b.n	8009d54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf6:	d15e      	bne.n	8009cb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d828      	bhi.n	8009c52 <UART_SetConfig+0x44a>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x400>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	08009c53 	.word	0x08009c53
 8009c18:	08009c43 	.word	0x08009c43
 8009c1c:	08009c53 	.word	0x08009c53
 8009c20:	08009c53 	.word	0x08009c53
 8009c24:	08009c53 	.word	0x08009c53
 8009c28:	08009c4b 	.word	0x08009c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c2c:	f7fd fb62 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8009c30:	61f8      	str	r0, [r7, #28]
        break;
 8009c32:	e014      	b.n	8009c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c34:	f7fd fb74 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 8009c38:	61f8      	str	r0, [r7, #28]
        break;
 8009c3a:	e010      	b.n	8009c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c3c:	4b4d      	ldr	r3, [pc, #308]	; (8009d74 <UART_SetConfig+0x56c>)
 8009c3e:	61fb      	str	r3, [r7, #28]
        break;
 8009c40:	e00d      	b.n	8009c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c42:	f7fd fabf 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8009c46:	61f8      	str	r0, [r7, #28]
        break;
 8009c48:	e009      	b.n	8009c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4e:	61fb      	str	r3, [r7, #28]
        break;
 8009c50:	e005      	b.n	8009c5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d077      	beq.n	8009d54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	005a      	lsls	r2, r3, #1
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	441a      	add	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b0f      	cmp	r3, #15
 8009c7e:	d916      	bls.n	8009cae <UART_SetConfig+0x4a6>
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c86:	d212      	bcs.n	8009cae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f023 030f 	bic.w	r3, r3, #15
 8009c90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	8afb      	ldrh	r3, [r7, #22]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	8afa      	ldrh	r2, [r7, #22]
 8009caa:	60da      	str	r2, [r3, #12]
 8009cac:	e052      	b.n	8009d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009cb4:	e04e      	b.n	8009d54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	d827      	bhi.n	8009d0e <UART_SetConfig+0x506>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <UART_SetConfig+0x4bc>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009cf9 	.word	0x08009cf9
 8009cd0:	08009d0f 	.word	0x08009d0f
 8009cd4:	08009cff 	.word	0x08009cff
 8009cd8:	08009d0f 	.word	0x08009d0f
 8009cdc:	08009d0f 	.word	0x08009d0f
 8009ce0:	08009d0f 	.word	0x08009d0f
 8009ce4:	08009d07 	.word	0x08009d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce8:	f7fd fb04 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8009cec:	61f8      	str	r0, [r7, #28]
        break;
 8009cee:	e014      	b.n	8009d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf0:	f7fd fb16 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 8009cf4:	61f8      	str	r0, [r7, #28]
        break;
 8009cf6:	e010      	b.n	8009d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <UART_SetConfig+0x56c>)
 8009cfa:	61fb      	str	r3, [r7, #28]
        break;
 8009cfc:	e00d      	b.n	8009d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cfe:	f7fd fa61 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8009d02:	61f8      	str	r0, [r7, #28]
        break;
 8009d04:	e009      	b.n	8009d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d0a:	61fb      	str	r3, [r7, #28]
        break;
 8009d0c:	e005      	b.n	8009d1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009d18:	bf00      	nop
    }

    if (pclk != 0U)
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d019      	beq.n	8009d54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	085a      	lsrs	r2, r3, #1
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	441a      	add	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d909      	bls.n	8009d4e <UART_SetConfig+0x546>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d40:	d205      	bcs.n	8009d4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60da      	str	r2, [r3, #12]
 8009d4c:	e002      	b.n	8009d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009d60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3728      	adds	r7, #40	; 0x28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d6e:	bf00      	nop
 8009d70:	40008000 	.word	0x40008000
 8009d74:	00f42400 	.word	0x00f42400

08009d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	f003 0304 	and.w	r3, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	f003 0310 	and.w	r3, r3, #16
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00a      	beq.n	8009e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01a      	beq.n	8009e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e76:	d10a      	bne.n	8009e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	605a      	str	r2, [r3, #4]
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b098      	sub	sp, #96	; 0x60
 8009ec0:	af02      	add	r7, sp, #8
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ecc:	f7fa fb98 	bl	8004600 <HAL_GetTick>
 8009ed0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d12e      	bne.n	8009f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f88c 	bl	800a00c <UART_WaitOnFlagUntilTimeout>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d021      	beq.n	8009f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f18:	647b      	str	r3, [r7, #68]	; 0x44
 8009f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f20:	e841 2300 	strex	r3, r2, [r1]
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e6      	bne.n	8009efa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e062      	b.n	800a004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d149      	bne.n	8009fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f54:	2200      	movs	r2, #0
 8009f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f856 	bl	800a00c <UART_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d03c      	beq.n	8009fe0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	623b      	str	r3, [r7, #32]
   return(result);
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f84:	633b      	str	r3, [r7, #48]	; 0x30
 8009f86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e6      	bne.n	8009f66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0301 	bic.w	r3, r3, #1
 8009fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fb8:	61fa      	str	r2, [r7, #28]
 8009fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69b9      	ldr	r1, [r7, #24]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e5      	bne.n	8009f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e011      	b.n	800a004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3758      	adds	r7, #88	; 0x58
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	4613      	mov	r3, r2
 800a01a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a01c:	e049      	b.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d045      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a026:	f7fa faeb 	bl	8004600 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	429a      	cmp	r2, r3
 800a034:	d302      	bcc.n	800a03c <UART_WaitOnFlagUntilTimeout+0x30>
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e048      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0304 	and.w	r3, r3, #4
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d031      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f003 0308 	and.w	r3, r3, #8
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d110      	bne.n	800a07e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2208      	movs	r2, #8
 800a062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f8ff 	bl	800a268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2208      	movs	r2, #8
 800a06e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e029      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a08c:	d111      	bne.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f8e5 	bl	800a268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e00f      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	2300      	movne	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d0a6      	beq.n	800a01e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b097      	sub	sp, #92	; 0x5c
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10e:	d10e      	bne.n	800a12e <UART_Start_Receive_IT+0x52>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <UART_Start_Receive_IT+0x48>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a11e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a122:	e02d      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	22ff      	movs	r2, #255	; 0xff
 800a128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a12c:	e028      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10d      	bne.n	800a152 <UART_Start_Receive_IT+0x76>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <UART_Start_Receive_IT+0x6c>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a146:	e01b      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	227f      	movs	r2, #127	; 0x7f
 800a14c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a150:	e016      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15a:	d10d      	bne.n	800a178 <UART_Start_Receive_IT+0x9c>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <UART_Start_Receive_IT+0x92>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	227f      	movs	r2, #127	; 0x7f
 800a168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a16c:	e008      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	223f      	movs	r2, #63	; 0x3f
 800a172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a176:	e003      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2222      	movs	r2, #34	; 0x22
 800a18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e5      	bne.n	800a190 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1cc:	d107      	bne.n	800a1de <UART_Start_Receive_IT+0x102>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d103      	bne.n	800a1de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4a21      	ldr	r2, [pc, #132]	; (800a260 <UART_Start_Receive_IT+0x184>)
 800a1da:	669a      	str	r2, [r3, #104]	; 0x68
 800a1dc:	e002      	b.n	800a1e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4a20      	ldr	r2, [pc, #128]	; (800a264 <UART_Start_Receive_IT+0x188>)
 800a1e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d019      	beq.n	800a220 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a200:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
 800a20c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e6      	bne.n	800a1ec <UART_Start_Receive_IT+0x110>
 800a21e:	e018      	b.n	800a252 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	613b      	str	r3, [r7, #16]
   return(result);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f043 0320 	orr.w	r3, r3, #32
 800a234:	653b      	str	r3, [r7, #80]	; 0x50
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a23e:	623b      	str	r3, [r7, #32]
 800a240:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	69f9      	ldr	r1, [r7, #28]
 800a244:	6a3a      	ldr	r2, [r7, #32]
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e6      	bne.n	800a220 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	375c      	adds	r7, #92	; 0x5c
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	0800a56d 	.word	0x0800a56d
 800a264:	0800a3b1 	.word	0x0800a3b1

0800a268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a268:	b480      	push	{r7}
 800a26a:	b095      	sub	sp, #84	; 0x54
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a284:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28e:	643b      	str	r3, [r7, #64]	; 0x40
 800a290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e6      	bne.n	800a270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e5      	bne.n	800a2a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d118      	bne.n	800a310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f023 0310 	bic.w	r3, r3, #16
 800a2f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2fc:	61bb      	str	r3, [r7, #24]
 800a2fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6979      	ldr	r1, [r7, #20]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	613b      	str	r3, [r7, #16]
   return(result);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e6      	bne.n	800a2de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a324:	bf00      	nop
 800a326:	3754      	adds	r7, #84	; 0x54
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff fa44 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	60bb      	str	r3, [r7, #8]
   return(result);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	61bb      	str	r3, [r7, #24]
 800a384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a386:	6979      	ldr	r1, [r7, #20]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	613b      	str	r3, [r7, #16]
   return(result);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e6      	bne.n	800a364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2220      	movs	r2, #32
 800a39a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7f6 ff58 	bl	8001258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3a8:	bf00      	nop
 800a3aa:	3720      	adds	r7, #32
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b09c      	sub	sp, #112	; 0x70
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c8:	2b22      	cmp	r3, #34	; 0x22
 800a3ca:	f040 80be 	bne.w	800a54a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a3dc:	b2d9      	uxtb	r1, r3
 800a3de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e8:	400a      	ands	r2, r1
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	3b01      	subs	r3, #1
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a410:	b29b      	uxth	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	f040 80a3 	bne.w	800a55e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a42c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a436:	65bb      	str	r3, [r7, #88]	; 0x58
 800a438:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a43c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a43e:	e841 2300 	strex	r3, r2, [r1]
 800a442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e6      	bne.n	800a418 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3308      	adds	r3, #8
 800a450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	667b      	str	r3, [r7, #100]	; 0x64
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a46a:	647a      	str	r2, [r7, #68]	; 0x44
 800a46c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e5      	bne.n	800a44a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a34      	ldr	r2, [pc, #208]	; (800a568 <UART_RxISR_8BIT+0x1b8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d01f      	beq.n	800a4dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d018      	beq.n	800a4dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	623b      	str	r3, [r7, #32]
   return(result);
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a4be:	663b      	str	r3, [r7, #96]	; 0x60
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4c8:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d12e      	bne.n	800a542 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0310 	bic.w	r3, r3, #16
 800a4fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a508:	61fb      	str	r3, [r7, #28]
 800a50a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	69b9      	ldr	r1, [r7, #24]
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	617b      	str	r3, [r7, #20]
   return(result);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e6      	bne.n	800a4ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	f003 0310 	and.w	r3, r3, #16
 800a526:	2b10      	cmp	r3, #16
 800a528:	d103      	bne.n	800a532 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2210      	movs	r2, #16
 800a530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff f958 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a540:	e00d      	b.n	800a55e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7f6 fe3c 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 800a548:	e009      	b.n	800a55e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	8b1b      	ldrh	r3, [r3, #24]
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0208 	orr.w	r2, r2, #8
 800a55a:	b292      	uxth	r2, r2
 800a55c:	831a      	strh	r2, [r3, #24]
}
 800a55e:	bf00      	nop
 800a560:	3770      	adds	r7, #112	; 0x70
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	40008000 	.word	0x40008000

0800a56c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b09c      	sub	sp, #112	; 0x70
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a57a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a584:	2b22      	cmp	r3, #34	; 0x22
 800a586:	f040 80be 	bne.w	800a706 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a590:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a59a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a59e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ae:	1c9a      	adds	r2, r3, #2
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 80a3 	bne.w	800a71a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5e8:	667b      	str	r3, [r7, #100]	; 0x64
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a5f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5fa:	e841 2300 	strex	r3, r2, [r1]
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e6      	bne.n	800a5d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3308      	adds	r3, #8
 800a60c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	f023 0301 	bic.w	r3, r3, #1
 800a61c:	663b      	str	r3, [r7, #96]	; 0x60
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3308      	adds	r3, #8
 800a624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a626:	643a      	str	r2, [r7, #64]	; 0x40
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a62c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1e5      	bne.n	800a606 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a34      	ldr	r2, [pc, #208]	; (800a724 <UART_RxISR_16BIT+0x1b8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d01f      	beq.n	800a698 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d018      	beq.n	800a698 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	e853 3f00 	ldrex	r3, [r3]
 800a672:	61fb      	str	r3, [r7, #28]
   return(result);
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a67a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a686:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a68c:	e841 2300 	strex	r3, r2, [r1]
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e6      	bne.n	800a666 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d12e      	bne.n	800a6fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f023 0310 	bic.w	r3, r3, #16
 800a6ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	6979      	ldr	r1, [r7, #20]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e6      	bne.n	800a6a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	f003 0310 	and.w	r3, r3, #16
 800a6e2:	2b10      	cmp	r3, #16
 800a6e4:	d103      	bne.n	800a6ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2210      	movs	r2, #16
 800a6ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff f87a 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6fc:	e00d      	b.n	800a71a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f6 fd5e 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 800a704:	e009      	b.n	800a71a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	8b1b      	ldrh	r3, [r3, #24]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0208 	orr.w	r2, r2, #8
 800a716:	b292      	uxth	r2, r2
 800a718:	831a      	strh	r2, [r3, #24]
}
 800a71a:	bf00      	nop
 800a71c:	3770      	adds	r7, #112	; 0x70
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	40008000 	.word	0x40008000

0800a728 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <atof>:
 800a73c:	2100      	movs	r1, #0
 800a73e:	f000 be0f 	b.w	800b360 <strtod>

0800a742 <sulp>:
 800a742:	b570      	push	{r4, r5, r6, lr}
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	ec45 4b10 	vmov	d0, r4, r5
 800a74c:	4616      	mov	r6, r2
 800a74e:	f003 fa9b 	bl	800dc88 <__ulp>
 800a752:	ec51 0b10 	vmov	r0, r1, d0
 800a756:	b17e      	cbz	r6, 800a778 <sulp+0x36>
 800a758:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a75c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd09      	ble.n	800a778 <sulp+0x36>
 800a764:	051b      	lsls	r3, r3, #20
 800a766:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a76a:	2400      	movs	r4, #0
 800a76c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a770:	4622      	mov	r2, r4
 800a772:	462b      	mov	r3, r5
 800a774:	f7f5 ff40 	bl	80005f8 <__aeabi_dmul>
 800a778:	bd70      	pop	{r4, r5, r6, pc}
 800a77a:	0000      	movs	r0, r0
 800a77c:	0000      	movs	r0, r0
	...

0800a780 <_strtod_l>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	ed2d 8b02 	vpush	{d8}
 800a788:	b09b      	sub	sp, #108	; 0x6c
 800a78a:	4604      	mov	r4, r0
 800a78c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a78e:	2200      	movs	r2, #0
 800a790:	9216      	str	r2, [sp, #88]	; 0x58
 800a792:	460d      	mov	r5, r1
 800a794:	f04f 0800 	mov.w	r8, #0
 800a798:	f04f 0900 	mov.w	r9, #0
 800a79c:	460a      	mov	r2, r1
 800a79e:	9215      	str	r2, [sp, #84]	; 0x54
 800a7a0:	7811      	ldrb	r1, [r2, #0]
 800a7a2:	292b      	cmp	r1, #43	; 0x2b
 800a7a4:	d04c      	beq.n	800a840 <_strtod_l+0xc0>
 800a7a6:	d83a      	bhi.n	800a81e <_strtod_l+0x9e>
 800a7a8:	290d      	cmp	r1, #13
 800a7aa:	d834      	bhi.n	800a816 <_strtod_l+0x96>
 800a7ac:	2908      	cmp	r1, #8
 800a7ae:	d834      	bhi.n	800a81a <_strtod_l+0x9a>
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d03d      	beq.n	800a830 <_strtod_l+0xb0>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	920a      	str	r2, [sp, #40]	; 0x28
 800a7b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a7ba:	7832      	ldrb	r2, [r6, #0]
 800a7bc:	2a30      	cmp	r2, #48	; 0x30
 800a7be:	f040 80b4 	bne.w	800a92a <_strtod_l+0x1aa>
 800a7c2:	7872      	ldrb	r2, [r6, #1]
 800a7c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a7c8:	2a58      	cmp	r2, #88	; 0x58
 800a7ca:	d170      	bne.n	800a8ae <_strtod_l+0x12e>
 800a7cc:	9302      	str	r3, [sp, #8]
 800a7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d0:	9301      	str	r3, [sp, #4]
 800a7d2:	ab16      	add	r3, sp, #88	; 0x58
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	4a8e      	ldr	r2, [pc, #568]	; (800aa10 <_strtod_l+0x290>)
 800a7d8:	ab17      	add	r3, sp, #92	; 0x5c
 800a7da:	a915      	add	r1, sp, #84	; 0x54
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f002 fb31 	bl	800ce44 <__gethex>
 800a7e2:	f010 070f 	ands.w	r7, r0, #15
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	d005      	beq.n	800a7f6 <_strtod_l+0x76>
 800a7ea:	2f06      	cmp	r7, #6
 800a7ec:	d12a      	bne.n	800a844 <_strtod_l+0xc4>
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9615      	str	r6, [sp, #84]	; 0x54
 800a7f4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f040 857f 	bne.w	800b2fc <_strtod_l+0xb7c>
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	b1db      	cbz	r3, 800a83a <_strtod_l+0xba>
 800a802:	4642      	mov	r2, r8
 800a804:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a808:	ec43 2b10 	vmov	d0, r2, r3
 800a80c:	b01b      	add	sp, #108	; 0x6c
 800a80e:	ecbd 8b02 	vpop	{d8}
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	2920      	cmp	r1, #32
 800a818:	d1cc      	bne.n	800a7b4 <_strtod_l+0x34>
 800a81a:	3201      	adds	r2, #1
 800a81c:	e7bf      	b.n	800a79e <_strtod_l+0x1e>
 800a81e:	292d      	cmp	r1, #45	; 0x2d
 800a820:	d1c8      	bne.n	800a7b4 <_strtod_l+0x34>
 800a822:	2101      	movs	r1, #1
 800a824:	910a      	str	r1, [sp, #40]	; 0x28
 800a826:	1c51      	adds	r1, r2, #1
 800a828:	9115      	str	r1, [sp, #84]	; 0x54
 800a82a:	7852      	ldrb	r2, [r2, #1]
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	d1c3      	bne.n	800a7b8 <_strtod_l+0x38>
 800a830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a832:	9515      	str	r5, [sp, #84]	; 0x54
 800a834:	2b00      	cmp	r3, #0
 800a836:	f040 855f 	bne.w	800b2f8 <_strtod_l+0xb78>
 800a83a:	4642      	mov	r2, r8
 800a83c:	464b      	mov	r3, r9
 800a83e:	e7e3      	b.n	800a808 <_strtod_l+0x88>
 800a840:	2100      	movs	r1, #0
 800a842:	e7ef      	b.n	800a824 <_strtod_l+0xa4>
 800a844:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a846:	b13a      	cbz	r2, 800a858 <_strtod_l+0xd8>
 800a848:	2135      	movs	r1, #53	; 0x35
 800a84a:	a818      	add	r0, sp, #96	; 0x60
 800a84c:	f003 fb19 	bl	800de82 <__copybits>
 800a850:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a852:	4620      	mov	r0, r4
 800a854:	f002 feec 	bl	800d630 <_Bfree>
 800a858:	3f01      	subs	r7, #1
 800a85a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a85c:	2f04      	cmp	r7, #4
 800a85e:	d806      	bhi.n	800a86e <_strtod_l+0xee>
 800a860:	e8df f007 	tbb	[pc, r7]
 800a864:	201d0314 	.word	0x201d0314
 800a868:	14          	.byte	0x14
 800a869:	00          	.byte	0x00
 800a86a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a86e:	05e9      	lsls	r1, r5, #23
 800a870:	bf48      	it	mi
 800a872:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a87a:	0d1b      	lsrs	r3, r3, #20
 800a87c:	051b      	lsls	r3, r3, #20
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1b9      	bne.n	800a7f6 <_strtod_l+0x76>
 800a882:	f001 fb6d 	bl	800bf60 <__errno>
 800a886:	2322      	movs	r3, #34	; 0x22
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	e7b4      	b.n	800a7f6 <_strtod_l+0x76>
 800a88c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a890:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a894:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a898:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a89c:	e7e7      	b.n	800a86e <_strtod_l+0xee>
 800a89e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aa18 <_strtod_l+0x298>
 800a8a2:	e7e4      	b.n	800a86e <_strtod_l+0xee>
 800a8a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a8a8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8ac:	e7df      	b.n	800a86e <_strtod_l+0xee>
 800a8ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	9215      	str	r2, [sp, #84]	; 0x54
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b30      	cmp	r3, #48	; 0x30
 800a8b8:	d0f9      	beq.n	800a8ae <_strtod_l+0x12e>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d09b      	beq.n	800a7f6 <_strtod_l+0x76>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f04f 0a00 	mov.w	sl, #0
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a8ce:	46d3      	mov	fp, sl
 800a8d0:	220a      	movs	r2, #10
 800a8d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a8d4:	7806      	ldrb	r6, [r0, #0]
 800a8d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a8da:	b2d9      	uxtb	r1, r3
 800a8dc:	2909      	cmp	r1, #9
 800a8de:	d926      	bls.n	800a92e <_strtod_l+0x1ae>
 800a8e0:	494c      	ldr	r1, [pc, #304]	; (800aa14 <_strtod_l+0x294>)
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f001 fac9 	bl	800be7a <strncmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d030      	beq.n	800a94e <_strtod_l+0x1ce>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	9005      	str	r0, [sp, #20]
 800a8f2:	465e      	mov	r6, fp
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2a65      	cmp	r2, #101	; 0x65
 800a8f8:	d001      	beq.n	800a8fe <_strtod_l+0x17e>
 800a8fa:	2a45      	cmp	r2, #69	; 0x45
 800a8fc:	d113      	bne.n	800a926 <_strtod_l+0x1a6>
 800a8fe:	b91e      	cbnz	r6, 800a908 <_strtod_l+0x188>
 800a900:	9a04      	ldr	r2, [sp, #16]
 800a902:	4302      	orrs	r2, r0
 800a904:	d094      	beq.n	800a830 <_strtod_l+0xb0>
 800a906:	2600      	movs	r6, #0
 800a908:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a90a:	1c6a      	adds	r2, r5, #1
 800a90c:	9215      	str	r2, [sp, #84]	; 0x54
 800a90e:	786a      	ldrb	r2, [r5, #1]
 800a910:	2a2b      	cmp	r2, #43	; 0x2b
 800a912:	d074      	beq.n	800a9fe <_strtod_l+0x27e>
 800a914:	2a2d      	cmp	r2, #45	; 0x2d
 800a916:	d078      	beq.n	800aa0a <_strtod_l+0x28a>
 800a918:	f04f 0c00 	mov.w	ip, #0
 800a91c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a920:	2909      	cmp	r1, #9
 800a922:	d97f      	bls.n	800aa24 <_strtod_l+0x2a4>
 800a924:	9515      	str	r5, [sp, #84]	; 0x54
 800a926:	2700      	movs	r7, #0
 800a928:	e09e      	b.n	800aa68 <_strtod_l+0x2e8>
 800a92a:	2300      	movs	r3, #0
 800a92c:	e7c8      	b.n	800a8c0 <_strtod_l+0x140>
 800a92e:	f1bb 0f08 	cmp.w	fp, #8
 800a932:	bfd8      	it	le
 800a934:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a936:	f100 0001 	add.w	r0, r0, #1
 800a93a:	bfda      	itte	le
 800a93c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a940:	9309      	strle	r3, [sp, #36]	; 0x24
 800a942:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a946:	f10b 0b01 	add.w	fp, fp, #1
 800a94a:	9015      	str	r0, [sp, #84]	; 0x54
 800a94c:	e7c1      	b.n	800a8d2 <_strtod_l+0x152>
 800a94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	9215      	str	r2, [sp, #84]	; 0x54
 800a954:	785a      	ldrb	r2, [r3, #1]
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	d037      	beq.n	800a9cc <_strtod_l+0x24c>
 800a95c:	9005      	str	r0, [sp, #20]
 800a95e:	465e      	mov	r6, fp
 800a960:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a964:	2b09      	cmp	r3, #9
 800a966:	d912      	bls.n	800a98e <_strtod_l+0x20e>
 800a968:	2301      	movs	r3, #1
 800a96a:	e7c4      	b.n	800a8f6 <_strtod_l+0x176>
 800a96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	9215      	str	r2, [sp, #84]	; 0x54
 800a972:	785a      	ldrb	r2, [r3, #1]
 800a974:	3001      	adds	r0, #1
 800a976:	2a30      	cmp	r2, #48	; 0x30
 800a978:	d0f8      	beq.n	800a96c <_strtod_l+0x1ec>
 800a97a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a97e:	2b08      	cmp	r3, #8
 800a980:	f200 84c1 	bhi.w	800b306 <_strtod_l+0xb86>
 800a984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a986:	9005      	str	r0, [sp, #20]
 800a988:	2000      	movs	r0, #0
 800a98a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a98c:	4606      	mov	r6, r0
 800a98e:	3a30      	subs	r2, #48	; 0x30
 800a990:	f100 0301 	add.w	r3, r0, #1
 800a994:	d014      	beq.n	800a9c0 <_strtod_l+0x240>
 800a996:	9905      	ldr	r1, [sp, #20]
 800a998:	4419      	add	r1, r3
 800a99a:	9105      	str	r1, [sp, #20]
 800a99c:	4633      	mov	r3, r6
 800a99e:	eb00 0c06 	add.w	ip, r0, r6
 800a9a2:	210a      	movs	r1, #10
 800a9a4:	4563      	cmp	r3, ip
 800a9a6:	d113      	bne.n	800a9d0 <_strtod_l+0x250>
 800a9a8:	1833      	adds	r3, r6, r0
 800a9aa:	2b08      	cmp	r3, #8
 800a9ac:	f106 0601 	add.w	r6, r6, #1
 800a9b0:	4406      	add	r6, r0
 800a9b2:	dc1a      	bgt.n	800a9ea <_strtod_l+0x26a>
 800a9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	fb03 2301 	mla	r3, r3, r1, r2
 800a9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9c2:	1c51      	adds	r1, r2, #1
 800a9c4:	9115      	str	r1, [sp, #84]	; 0x54
 800a9c6:	7852      	ldrb	r2, [r2, #1]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	e7c9      	b.n	800a960 <_strtod_l+0x1e0>
 800a9cc:	4658      	mov	r0, fp
 800a9ce:	e7d2      	b.n	800a976 <_strtod_l+0x1f6>
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	f103 0301 	add.w	r3, r3, #1
 800a9d6:	dc03      	bgt.n	800a9e0 <_strtod_l+0x260>
 800a9d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a9da:	434f      	muls	r7, r1
 800a9dc:	9709      	str	r7, [sp, #36]	; 0x24
 800a9de:	e7e1      	b.n	800a9a4 <_strtod_l+0x224>
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	bfd8      	it	le
 800a9e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a9e8:	e7dc      	b.n	800a9a4 <_strtod_l+0x224>
 800a9ea:	2e10      	cmp	r6, #16
 800a9ec:	bfdc      	itt	le
 800a9ee:	230a      	movle	r3, #10
 800a9f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a9f4:	e7e3      	b.n	800a9be <_strtod_l+0x23e>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e780      	b.n	800a900 <_strtod_l+0x180>
 800a9fe:	f04f 0c00 	mov.w	ip, #0
 800aa02:	1caa      	adds	r2, r5, #2
 800aa04:	9215      	str	r2, [sp, #84]	; 0x54
 800aa06:	78aa      	ldrb	r2, [r5, #2]
 800aa08:	e788      	b.n	800a91c <_strtod_l+0x19c>
 800aa0a:	f04f 0c01 	mov.w	ip, #1
 800aa0e:	e7f8      	b.n	800aa02 <_strtod_l+0x282>
 800aa10:	0800ea84 	.word	0x0800ea84
 800aa14:	0800ea80 	.word	0x0800ea80
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa1e:	1c51      	adds	r1, r2, #1
 800aa20:	9115      	str	r1, [sp, #84]	; 0x54
 800aa22:	7852      	ldrb	r2, [r2, #1]
 800aa24:	2a30      	cmp	r2, #48	; 0x30
 800aa26:	d0f9      	beq.n	800aa1c <_strtod_l+0x29c>
 800aa28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa2c:	2908      	cmp	r1, #8
 800aa2e:	f63f af7a 	bhi.w	800a926 <_strtod_l+0x1a6>
 800aa32:	3a30      	subs	r2, #48	; 0x30
 800aa34:	9208      	str	r2, [sp, #32]
 800aa36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa38:	920c      	str	r2, [sp, #48]	; 0x30
 800aa3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa3c:	1c57      	adds	r7, r2, #1
 800aa3e:	9715      	str	r7, [sp, #84]	; 0x54
 800aa40:	7852      	ldrb	r2, [r2, #1]
 800aa42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa46:	f1be 0f09 	cmp.w	lr, #9
 800aa4a:	d938      	bls.n	800aabe <_strtod_l+0x33e>
 800aa4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa4e:	1a7f      	subs	r7, r7, r1
 800aa50:	2f08      	cmp	r7, #8
 800aa52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aa56:	dc03      	bgt.n	800aa60 <_strtod_l+0x2e0>
 800aa58:	9908      	ldr	r1, [sp, #32]
 800aa5a:	428f      	cmp	r7, r1
 800aa5c:	bfa8      	it	ge
 800aa5e:	460f      	movge	r7, r1
 800aa60:	f1bc 0f00 	cmp.w	ip, #0
 800aa64:	d000      	beq.n	800aa68 <_strtod_l+0x2e8>
 800aa66:	427f      	negs	r7, r7
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	d14f      	bne.n	800ab0c <_strtod_l+0x38c>
 800aa6c:	9904      	ldr	r1, [sp, #16]
 800aa6e:	4301      	orrs	r1, r0
 800aa70:	f47f aec1 	bne.w	800a7f6 <_strtod_l+0x76>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f47f aedb 	bne.w	800a830 <_strtod_l+0xb0>
 800aa7a:	2a69      	cmp	r2, #105	; 0x69
 800aa7c:	d029      	beq.n	800aad2 <_strtod_l+0x352>
 800aa7e:	dc26      	bgt.n	800aace <_strtod_l+0x34e>
 800aa80:	2a49      	cmp	r2, #73	; 0x49
 800aa82:	d026      	beq.n	800aad2 <_strtod_l+0x352>
 800aa84:	2a4e      	cmp	r2, #78	; 0x4e
 800aa86:	f47f aed3 	bne.w	800a830 <_strtod_l+0xb0>
 800aa8a:	499b      	ldr	r1, [pc, #620]	; (800acf8 <_strtod_l+0x578>)
 800aa8c:	a815      	add	r0, sp, #84	; 0x54
 800aa8e:	f002 fc19 	bl	800d2c4 <__match>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f43f aecc 	beq.w	800a830 <_strtod_l+0xb0>
 800aa98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b28      	cmp	r3, #40	; 0x28
 800aa9e:	d12f      	bne.n	800ab00 <_strtod_l+0x380>
 800aaa0:	4996      	ldr	r1, [pc, #600]	; (800acfc <_strtod_l+0x57c>)
 800aaa2:	aa18      	add	r2, sp, #96	; 0x60
 800aaa4:	a815      	add	r0, sp, #84	; 0x54
 800aaa6:	f002 fc21 	bl	800d2ec <__hexnan>
 800aaaa:	2805      	cmp	r0, #5
 800aaac:	d128      	bne.n	800ab00 <_strtod_l+0x380>
 800aaae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aab4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aab8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aabc:	e69b      	b.n	800a7f6 <_strtod_l+0x76>
 800aabe:	9f08      	ldr	r7, [sp, #32]
 800aac0:	210a      	movs	r1, #10
 800aac2:	fb01 2107 	mla	r1, r1, r7, r2
 800aac6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aaca:	9208      	str	r2, [sp, #32]
 800aacc:	e7b5      	b.n	800aa3a <_strtod_l+0x2ba>
 800aace:	2a6e      	cmp	r2, #110	; 0x6e
 800aad0:	e7d9      	b.n	800aa86 <_strtod_l+0x306>
 800aad2:	498b      	ldr	r1, [pc, #556]	; (800ad00 <_strtod_l+0x580>)
 800aad4:	a815      	add	r0, sp, #84	; 0x54
 800aad6:	f002 fbf5 	bl	800d2c4 <__match>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f43f aea8 	beq.w	800a830 <_strtod_l+0xb0>
 800aae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae2:	4988      	ldr	r1, [pc, #544]	; (800ad04 <_strtod_l+0x584>)
 800aae4:	3b01      	subs	r3, #1
 800aae6:	a815      	add	r0, sp, #84	; 0x54
 800aae8:	9315      	str	r3, [sp, #84]	; 0x54
 800aaea:	f002 fbeb 	bl	800d2c4 <__match>
 800aaee:	b910      	cbnz	r0, 800aaf6 <_strtod_l+0x376>
 800aaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	9315      	str	r3, [sp, #84]	; 0x54
 800aaf6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ad14 <_strtod_l+0x594>
 800aafa:	f04f 0800 	mov.w	r8, #0
 800aafe:	e67a      	b.n	800a7f6 <_strtod_l+0x76>
 800ab00:	4881      	ldr	r0, [pc, #516]	; (800ad08 <_strtod_l+0x588>)
 800ab02:	f001 fa69 	bl	800bfd8 <nan>
 800ab06:	ec59 8b10 	vmov	r8, r9, d0
 800ab0a:	e674      	b.n	800a7f6 <_strtod_l+0x76>
 800ab0c:	9b05      	ldr	r3, [sp, #20]
 800ab0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab10:	1afb      	subs	r3, r7, r3
 800ab12:	f1bb 0f00 	cmp.w	fp, #0
 800ab16:	bf08      	it	eq
 800ab18:	46b3      	moveq	fp, r6
 800ab1a:	2e10      	cmp	r6, #16
 800ab1c:	9308      	str	r3, [sp, #32]
 800ab1e:	4635      	mov	r5, r6
 800ab20:	bfa8      	it	ge
 800ab22:	2510      	movge	r5, #16
 800ab24:	f7f5 fcee 	bl	8000504 <__aeabi_ui2d>
 800ab28:	2e09      	cmp	r6, #9
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	dd13      	ble.n	800ab58 <_strtod_l+0x3d8>
 800ab30:	4b76      	ldr	r3, [pc, #472]	; (800ad0c <_strtod_l+0x58c>)
 800ab32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab3a:	f7f5 fd5d 	bl	80005f8 <__aeabi_dmul>
 800ab3e:	4680      	mov	r8, r0
 800ab40:	4650      	mov	r0, sl
 800ab42:	4689      	mov	r9, r1
 800ab44:	f7f5 fcde 	bl	8000504 <__aeabi_ui2d>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	4649      	mov	r1, r9
 800ab50:	f7f5 fb9c 	bl	800028c <__adddf3>
 800ab54:	4680      	mov	r8, r0
 800ab56:	4689      	mov	r9, r1
 800ab58:	2e0f      	cmp	r6, #15
 800ab5a:	dc38      	bgt.n	800abce <_strtod_l+0x44e>
 800ab5c:	9b08      	ldr	r3, [sp, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f43f ae49 	beq.w	800a7f6 <_strtod_l+0x76>
 800ab64:	dd24      	ble.n	800abb0 <_strtod_l+0x430>
 800ab66:	2b16      	cmp	r3, #22
 800ab68:	dc0b      	bgt.n	800ab82 <_strtod_l+0x402>
 800ab6a:	4968      	ldr	r1, [pc, #416]	; (800ad0c <_strtod_l+0x58c>)
 800ab6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab74:	4642      	mov	r2, r8
 800ab76:	464b      	mov	r3, r9
 800ab78:	f7f5 fd3e 	bl	80005f8 <__aeabi_dmul>
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	4689      	mov	r9, r1
 800ab80:	e639      	b.n	800a7f6 <_strtod_l+0x76>
 800ab82:	9a08      	ldr	r2, [sp, #32]
 800ab84:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	db20      	blt.n	800abce <_strtod_l+0x44e>
 800ab8c:	4c5f      	ldr	r4, [pc, #380]	; (800ad0c <_strtod_l+0x58c>)
 800ab8e:	f1c6 060f 	rsb	r6, r6, #15
 800ab92:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ab96:	4642      	mov	r2, r8
 800ab98:	464b      	mov	r3, r9
 800ab9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9e:	f7f5 fd2b 	bl	80005f8 <__aeabi_dmul>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	1b9e      	subs	r6, r3, r6
 800aba6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800abaa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abae:	e7e3      	b.n	800ab78 <_strtod_l+0x3f8>
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	3316      	adds	r3, #22
 800abb4:	db0b      	blt.n	800abce <_strtod_l+0x44e>
 800abb6:	9b05      	ldr	r3, [sp, #20]
 800abb8:	1bdf      	subs	r7, r3, r7
 800abba:	4b54      	ldr	r3, [pc, #336]	; (800ad0c <_strtod_l+0x58c>)
 800abbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800abc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc4:	4640      	mov	r0, r8
 800abc6:	4649      	mov	r1, r9
 800abc8:	f7f5 fe40 	bl	800084c <__aeabi_ddiv>
 800abcc:	e7d6      	b.n	800ab7c <_strtod_l+0x3fc>
 800abce:	9b08      	ldr	r3, [sp, #32]
 800abd0:	1b75      	subs	r5, r6, r5
 800abd2:	441d      	add	r5, r3
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	dd70      	ble.n	800acba <_strtod_l+0x53a>
 800abd8:	f015 030f 	ands.w	r3, r5, #15
 800abdc:	d00a      	beq.n	800abf4 <_strtod_l+0x474>
 800abde:	494b      	ldr	r1, [pc, #300]	; (800ad0c <_strtod_l+0x58c>)
 800abe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abe4:	4642      	mov	r2, r8
 800abe6:	464b      	mov	r3, r9
 800abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abec:	f7f5 fd04 	bl	80005f8 <__aeabi_dmul>
 800abf0:	4680      	mov	r8, r0
 800abf2:	4689      	mov	r9, r1
 800abf4:	f035 050f 	bics.w	r5, r5, #15
 800abf8:	d04d      	beq.n	800ac96 <_strtod_l+0x516>
 800abfa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800abfe:	dd22      	ble.n	800ac46 <_strtod_l+0x4c6>
 800ac00:	2500      	movs	r5, #0
 800ac02:	46ab      	mov	fp, r5
 800ac04:	9509      	str	r5, [sp, #36]	; 0x24
 800ac06:	9505      	str	r5, [sp, #20]
 800ac08:	2322      	movs	r3, #34	; 0x22
 800ac0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ad14 <_strtod_l+0x594>
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	f04f 0800 	mov.w	r8, #0
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f43f aded 	beq.w	800a7f6 <_strtod_l+0x76>
 800ac1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f002 fd06 	bl	800d630 <_Bfree>
 800ac24:	9905      	ldr	r1, [sp, #20]
 800ac26:	4620      	mov	r0, r4
 800ac28:	f002 fd02 	bl	800d630 <_Bfree>
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f002 fcfe 	bl	800d630 <_Bfree>
 800ac34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac36:	4620      	mov	r0, r4
 800ac38:	f002 fcfa 	bl	800d630 <_Bfree>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f002 fcf6 	bl	800d630 <_Bfree>
 800ac44:	e5d7      	b.n	800a7f6 <_strtod_l+0x76>
 800ac46:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <_strtod_l+0x590>)
 800ac48:	9304      	str	r3, [sp, #16]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	112d      	asrs	r5, r5, #4
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	469a      	mov	sl, r3
 800ac54:	2d01      	cmp	r5, #1
 800ac56:	dc21      	bgt.n	800ac9c <_strtod_l+0x51c>
 800ac58:	b10b      	cbz	r3, 800ac5e <_strtod_l+0x4de>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4689      	mov	r9, r1
 800ac5e:	492c      	ldr	r1, [pc, #176]	; (800ad10 <_strtod_l+0x590>)
 800ac60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ac64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac70:	f7f5 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ac74:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <_strtod_l+0x594>)
 800ac76:	460a      	mov	r2, r1
 800ac78:	400b      	ands	r3, r1
 800ac7a:	4927      	ldr	r1, [pc, #156]	; (800ad18 <_strtod_l+0x598>)
 800ac7c:	428b      	cmp	r3, r1
 800ac7e:	4680      	mov	r8, r0
 800ac80:	d8be      	bhi.n	800ac00 <_strtod_l+0x480>
 800ac82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac86:	428b      	cmp	r3, r1
 800ac88:	bf86      	itte	hi
 800ac8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ad1c <_strtod_l+0x59c>
 800ac8e:	f04f 38ff 	movhi.w	r8, #4294967295
 800ac92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ac96:	2300      	movs	r3, #0
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	e07b      	b.n	800ad94 <_strtod_l+0x614>
 800ac9c:	07ea      	lsls	r2, r5, #31
 800ac9e:	d505      	bpl.n	800acac <_strtod_l+0x52c>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 fca7 	bl	80005f8 <__aeabi_dmul>
 800acaa:	2301      	movs	r3, #1
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	3208      	adds	r2, #8
 800acb0:	f10a 0a01 	add.w	sl, sl, #1
 800acb4:	106d      	asrs	r5, r5, #1
 800acb6:	9204      	str	r2, [sp, #16]
 800acb8:	e7cc      	b.n	800ac54 <_strtod_l+0x4d4>
 800acba:	d0ec      	beq.n	800ac96 <_strtod_l+0x516>
 800acbc:	426d      	negs	r5, r5
 800acbe:	f015 020f 	ands.w	r2, r5, #15
 800acc2:	d00a      	beq.n	800acda <_strtod_l+0x55a>
 800acc4:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <_strtod_l+0x58c>)
 800acc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	f7f5 fdbb 	bl	800084c <__aeabi_ddiv>
 800acd6:	4680      	mov	r8, r0
 800acd8:	4689      	mov	r9, r1
 800acda:	112d      	asrs	r5, r5, #4
 800acdc:	d0db      	beq.n	800ac96 <_strtod_l+0x516>
 800acde:	2d1f      	cmp	r5, #31
 800ace0:	dd1e      	ble.n	800ad20 <_strtod_l+0x5a0>
 800ace2:	2500      	movs	r5, #0
 800ace4:	46ab      	mov	fp, r5
 800ace6:	9509      	str	r5, [sp, #36]	; 0x24
 800ace8:	9505      	str	r5, [sp, #20]
 800acea:	2322      	movs	r3, #34	; 0x22
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	f04f 0900 	mov.w	r9, #0
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	e78d      	b.n	800ac14 <_strtod_l+0x494>
 800acf8:	0800eae5 	.word	0x0800eae5
 800acfc:	0800ea98 	.word	0x0800ea98
 800ad00:	0800eadd 	.word	0x0800eadd
 800ad04:	0800eb17 	.word	0x0800eb17
 800ad08:	0800eea9 	.word	0x0800eea9
 800ad0c:	0800ec88 	.word	0x0800ec88
 800ad10:	0800ec60 	.word	0x0800ec60
 800ad14:	7ff00000 	.word	0x7ff00000
 800ad18:	7ca00000 	.word	0x7ca00000
 800ad1c:	7fefffff 	.word	0x7fefffff
 800ad20:	f015 0310 	ands.w	r3, r5, #16
 800ad24:	bf18      	it	ne
 800ad26:	236a      	movne	r3, #106	; 0x6a
 800ad28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b0cc <_strtod_l+0x94c>
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	2300      	movs	r3, #0
 800ad34:	07ea      	lsls	r2, r5, #31
 800ad36:	d504      	bpl.n	800ad42 <_strtod_l+0x5c2>
 800ad38:	e9da 2300 	ldrd	r2, r3, [sl]
 800ad3c:	f7f5 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ad40:	2301      	movs	r3, #1
 800ad42:	106d      	asrs	r5, r5, #1
 800ad44:	f10a 0a08 	add.w	sl, sl, #8
 800ad48:	d1f4      	bne.n	800ad34 <_strtod_l+0x5b4>
 800ad4a:	b10b      	cbz	r3, 800ad50 <_strtod_l+0x5d0>
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	4689      	mov	r9, r1
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	b1bb      	cbz	r3, 800ad84 <_strtod_l+0x604>
 800ad54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ad58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	4649      	mov	r1, r9
 800ad60:	dd10      	ble.n	800ad84 <_strtod_l+0x604>
 800ad62:	2b1f      	cmp	r3, #31
 800ad64:	f340 811e 	ble.w	800afa4 <_strtod_l+0x824>
 800ad68:	2b34      	cmp	r3, #52	; 0x34
 800ad6a:	bfde      	ittt	le
 800ad6c:	f04f 33ff 	movle.w	r3, #4294967295
 800ad70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ad74:	4093      	lslle	r3, r2
 800ad76:	f04f 0800 	mov.w	r8, #0
 800ad7a:	bfcc      	ite	gt
 800ad7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ad80:	ea03 0901 	andle.w	r9, r3, r1
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	4640      	mov	r0, r8
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	f7f5 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1a6      	bne.n	800ace2 <_strtod_l+0x562>
 800ad94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad9a:	4633      	mov	r3, r6
 800ad9c:	465a      	mov	r2, fp
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f002 fcae 	bl	800d700 <__s2b>
 800ada4:	9009      	str	r0, [sp, #36]	; 0x24
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f43f af2a 	beq.w	800ac00 <_strtod_l+0x480>
 800adac:	9a08      	ldr	r2, [sp, #32]
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	2a00      	cmp	r2, #0
 800adb2:	eba3 0307 	sub.w	r3, r3, r7
 800adb6:	bfa8      	it	ge
 800adb8:	2300      	movge	r3, #0
 800adba:	930c      	str	r3, [sp, #48]	; 0x30
 800adbc:	2500      	movs	r5, #0
 800adbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800adc2:	9312      	str	r3, [sp, #72]	; 0x48
 800adc4:	46ab      	mov	fp, r5
 800adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc8:	4620      	mov	r0, r4
 800adca:	6859      	ldr	r1, [r3, #4]
 800adcc:	f002 fbf0 	bl	800d5b0 <_Balloc>
 800add0:	9005      	str	r0, [sp, #20]
 800add2:	2800      	cmp	r0, #0
 800add4:	f43f af18 	beq.w	800ac08 <_strtod_l+0x488>
 800add8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adda:	691a      	ldr	r2, [r3, #16]
 800addc:	3202      	adds	r2, #2
 800adde:	f103 010c 	add.w	r1, r3, #12
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	300c      	adds	r0, #12
 800ade6:	f001 f8e7 	bl	800bfb8 <memcpy>
 800adea:	ec49 8b10 	vmov	d0, r8, r9
 800adee:	aa18      	add	r2, sp, #96	; 0x60
 800adf0:	a917      	add	r1, sp, #92	; 0x5c
 800adf2:	4620      	mov	r0, r4
 800adf4:	f002 ffb8 	bl	800dd68 <__d2b>
 800adf8:	ec49 8b18 	vmov	d8, r8, r9
 800adfc:	9016      	str	r0, [sp, #88]	; 0x58
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f af02 	beq.w	800ac08 <_strtod_l+0x488>
 800ae04:	2101      	movs	r1, #1
 800ae06:	4620      	mov	r0, r4
 800ae08:	f002 fd12 	bl	800d830 <__i2b>
 800ae0c:	4683      	mov	fp, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f aefa 	beq.w	800ac08 <_strtod_l+0x488>
 800ae14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ae16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	bfab      	itete	ge
 800ae1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ae1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ae20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ae26:	bfac      	ite	ge
 800ae28:	eb06 0a03 	addge.w	sl, r6, r3
 800ae2c:	1b9f      	sublt	r7, r3, r6
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	1af6      	subs	r6, r6, r3
 800ae32:	4416      	add	r6, r2
 800ae34:	4ba0      	ldr	r3, [pc, #640]	; (800b0b8 <_strtod_l+0x938>)
 800ae36:	3e01      	subs	r6, #1
 800ae38:	429e      	cmp	r6, r3
 800ae3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae3e:	f280 80c4 	bge.w	800afca <_strtod_l+0x84a>
 800ae42:	1b9b      	subs	r3, r3, r6
 800ae44:	2b1f      	cmp	r3, #31
 800ae46:	eba2 0203 	sub.w	r2, r2, r3
 800ae4a:	f04f 0101 	mov.w	r1, #1
 800ae4e:	f300 80b0 	bgt.w	800afb2 <_strtod_l+0x832>
 800ae52:	fa01 f303 	lsl.w	r3, r1, r3
 800ae56:	930e      	str	r3, [sp, #56]	; 0x38
 800ae58:	2300      	movs	r3, #0
 800ae5a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae5c:	eb0a 0602 	add.w	r6, sl, r2
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	45b2      	cmp	sl, r6
 800ae64:	4417      	add	r7, r2
 800ae66:	441f      	add	r7, r3
 800ae68:	4653      	mov	r3, sl
 800ae6a:	bfa8      	it	ge
 800ae6c:	4633      	movge	r3, r6
 800ae6e:	42bb      	cmp	r3, r7
 800ae70:	bfa8      	it	ge
 800ae72:	463b      	movge	r3, r7
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	bfc2      	ittt	gt
 800ae78:	1af6      	subgt	r6, r6, r3
 800ae7a:	1aff      	subgt	r7, r7, r3
 800ae7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ae80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dd17      	ble.n	800aeb6 <_strtod_l+0x736>
 800ae86:	4659      	mov	r1, fp
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f002 fd90 	bl	800d9b0 <__pow5mult>
 800ae90:	4683      	mov	fp, r0
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f aeb8 	beq.w	800ac08 <_strtod_l+0x488>
 800ae98:	4601      	mov	r1, r0
 800ae9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f002 fcdd 	bl	800d85c <__multiply>
 800aea2:	900b      	str	r0, [sp, #44]	; 0x2c
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f43f aeaf 	beq.w	800ac08 <_strtod_l+0x488>
 800aeaa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aeac:	4620      	mov	r0, r4
 800aeae:	f002 fbbf 	bl	800d630 <_Bfree>
 800aeb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb4:	9316      	str	r3, [sp, #88]	; 0x58
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	f300 808c 	bgt.w	800afd4 <_strtod_l+0x854>
 800aebc:	9b08      	ldr	r3, [sp, #32]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	dd08      	ble.n	800aed4 <_strtod_l+0x754>
 800aec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aec4:	9905      	ldr	r1, [sp, #20]
 800aec6:	4620      	mov	r0, r4
 800aec8:	f002 fd72 	bl	800d9b0 <__pow5mult>
 800aecc:	9005      	str	r0, [sp, #20]
 800aece:	2800      	cmp	r0, #0
 800aed0:	f43f ae9a 	beq.w	800ac08 <_strtod_l+0x488>
 800aed4:	2f00      	cmp	r7, #0
 800aed6:	dd08      	ble.n	800aeea <_strtod_l+0x76a>
 800aed8:	9905      	ldr	r1, [sp, #20]
 800aeda:	463a      	mov	r2, r7
 800aedc:	4620      	mov	r0, r4
 800aede:	f002 fdc1 	bl	800da64 <__lshift>
 800aee2:	9005      	str	r0, [sp, #20]
 800aee4:	2800      	cmp	r0, #0
 800aee6:	f43f ae8f 	beq.w	800ac08 <_strtod_l+0x488>
 800aeea:	f1ba 0f00 	cmp.w	sl, #0
 800aeee:	dd08      	ble.n	800af02 <_strtod_l+0x782>
 800aef0:	4659      	mov	r1, fp
 800aef2:	4652      	mov	r2, sl
 800aef4:	4620      	mov	r0, r4
 800aef6:	f002 fdb5 	bl	800da64 <__lshift>
 800aefa:	4683      	mov	fp, r0
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f43f ae83 	beq.w	800ac08 <_strtod_l+0x488>
 800af02:	9a05      	ldr	r2, [sp, #20]
 800af04:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af06:	4620      	mov	r0, r4
 800af08:	f002 fe34 	bl	800db74 <__mdiff>
 800af0c:	4605      	mov	r5, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	f43f ae7a 	beq.w	800ac08 <_strtod_l+0x488>
 800af14:	68c3      	ldr	r3, [r0, #12]
 800af16:	930b      	str	r3, [sp, #44]	; 0x2c
 800af18:	2300      	movs	r3, #0
 800af1a:	60c3      	str	r3, [r0, #12]
 800af1c:	4659      	mov	r1, fp
 800af1e:	f002 fe0d 	bl	800db3c <__mcmp>
 800af22:	2800      	cmp	r0, #0
 800af24:	da60      	bge.n	800afe8 <_strtod_l+0x868>
 800af26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af28:	ea53 0308 	orrs.w	r3, r3, r8
 800af2c:	f040 8084 	bne.w	800b038 <_strtod_l+0x8b8>
 800af30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af34:	2b00      	cmp	r3, #0
 800af36:	d17f      	bne.n	800b038 <_strtod_l+0x8b8>
 800af38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af3c:	0d1b      	lsrs	r3, r3, #20
 800af3e:	051b      	lsls	r3, r3, #20
 800af40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af44:	d978      	bls.n	800b038 <_strtod_l+0x8b8>
 800af46:	696b      	ldr	r3, [r5, #20]
 800af48:	b913      	cbnz	r3, 800af50 <_strtod_l+0x7d0>
 800af4a:	692b      	ldr	r3, [r5, #16]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	dd73      	ble.n	800b038 <_strtod_l+0x8b8>
 800af50:	4629      	mov	r1, r5
 800af52:	2201      	movs	r2, #1
 800af54:	4620      	mov	r0, r4
 800af56:	f002 fd85 	bl	800da64 <__lshift>
 800af5a:	4659      	mov	r1, fp
 800af5c:	4605      	mov	r5, r0
 800af5e:	f002 fded 	bl	800db3c <__mcmp>
 800af62:	2800      	cmp	r0, #0
 800af64:	dd68      	ble.n	800b038 <_strtod_l+0x8b8>
 800af66:	9904      	ldr	r1, [sp, #16]
 800af68:	4a54      	ldr	r2, [pc, #336]	; (800b0bc <_strtod_l+0x93c>)
 800af6a:	464b      	mov	r3, r9
 800af6c:	2900      	cmp	r1, #0
 800af6e:	f000 8084 	beq.w	800b07a <_strtod_l+0x8fa>
 800af72:	ea02 0109 	and.w	r1, r2, r9
 800af76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af7a:	dc7e      	bgt.n	800b07a <_strtod_l+0x8fa>
 800af7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af80:	f77f aeb3 	ble.w	800acea <_strtod_l+0x56a>
 800af84:	4b4e      	ldr	r3, [pc, #312]	; (800b0c0 <_strtod_l+0x940>)
 800af86:	4640      	mov	r0, r8
 800af88:	4649      	mov	r1, r9
 800af8a:	2200      	movs	r2, #0
 800af8c:	f7f5 fb34 	bl	80005f8 <__aeabi_dmul>
 800af90:	4b4a      	ldr	r3, [pc, #296]	; (800b0bc <_strtod_l+0x93c>)
 800af92:	400b      	ands	r3, r1
 800af94:	4680      	mov	r8, r0
 800af96:	4689      	mov	r9, r1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f ae3f 	bne.w	800ac1c <_strtod_l+0x49c>
 800af9e:	2322      	movs	r3, #34	; 0x22
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	e63b      	b.n	800ac1c <_strtod_l+0x49c>
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295
 800afa8:	fa02 f303 	lsl.w	r3, r2, r3
 800afac:	ea03 0808 	and.w	r8, r3, r8
 800afb0:	e6e8      	b.n	800ad84 <_strtod_l+0x604>
 800afb2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800afb6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800afba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800afbe:	36e2      	adds	r6, #226	; 0xe2
 800afc0:	fa01 f306 	lsl.w	r3, r1, r6
 800afc4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800afc8:	e748      	b.n	800ae5c <_strtod_l+0x6dc>
 800afca:	2100      	movs	r1, #0
 800afcc:	2301      	movs	r3, #1
 800afce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800afd2:	e743      	b.n	800ae5c <_strtod_l+0x6dc>
 800afd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afd6:	4632      	mov	r2, r6
 800afd8:	4620      	mov	r0, r4
 800afda:	f002 fd43 	bl	800da64 <__lshift>
 800afde:	9016      	str	r0, [sp, #88]	; 0x58
 800afe0:	2800      	cmp	r0, #0
 800afe2:	f47f af6b 	bne.w	800aebc <_strtod_l+0x73c>
 800afe6:	e60f      	b.n	800ac08 <_strtod_l+0x488>
 800afe8:	46ca      	mov	sl, r9
 800afea:	d171      	bne.n	800b0d0 <_strtod_l+0x950>
 800afec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aff2:	b352      	cbz	r2, 800b04a <_strtod_l+0x8ca>
 800aff4:	4a33      	ldr	r2, [pc, #204]	; (800b0c4 <_strtod_l+0x944>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d12a      	bne.n	800b050 <_strtod_l+0x8d0>
 800affa:	9b04      	ldr	r3, [sp, #16]
 800affc:	4641      	mov	r1, r8
 800affe:	b1fb      	cbz	r3, 800b040 <_strtod_l+0x8c0>
 800b000:	4b2e      	ldr	r3, [pc, #184]	; (800b0bc <_strtod_l+0x93c>)
 800b002:	ea09 0303 	and.w	r3, r9, r3
 800b006:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b00a:	f04f 32ff 	mov.w	r2, #4294967295
 800b00e:	d81a      	bhi.n	800b046 <_strtod_l+0x8c6>
 800b010:	0d1b      	lsrs	r3, r3, #20
 800b012:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b016:	fa02 f303 	lsl.w	r3, r2, r3
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d118      	bne.n	800b050 <_strtod_l+0x8d0>
 800b01e:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <_strtod_l+0x948>)
 800b020:	459a      	cmp	sl, r3
 800b022:	d102      	bne.n	800b02a <_strtod_l+0x8aa>
 800b024:	3101      	adds	r1, #1
 800b026:	f43f adef 	beq.w	800ac08 <_strtod_l+0x488>
 800b02a:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <_strtod_l+0x93c>)
 800b02c:	ea0a 0303 	and.w	r3, sl, r3
 800b030:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b034:	f04f 0800 	mov.w	r8, #0
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1a2      	bne.n	800af84 <_strtod_l+0x804>
 800b03e:	e5ed      	b.n	800ac1c <_strtod_l+0x49c>
 800b040:	f04f 33ff 	mov.w	r3, #4294967295
 800b044:	e7e9      	b.n	800b01a <_strtod_l+0x89a>
 800b046:	4613      	mov	r3, r2
 800b048:	e7e7      	b.n	800b01a <_strtod_l+0x89a>
 800b04a:	ea53 0308 	orrs.w	r3, r3, r8
 800b04e:	d08a      	beq.n	800af66 <_strtod_l+0x7e6>
 800b050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b052:	b1e3      	cbz	r3, 800b08e <_strtod_l+0x90e>
 800b054:	ea13 0f0a 	tst.w	r3, sl
 800b058:	d0ee      	beq.n	800b038 <_strtod_l+0x8b8>
 800b05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b05c:	9a04      	ldr	r2, [sp, #16]
 800b05e:	4640      	mov	r0, r8
 800b060:	4649      	mov	r1, r9
 800b062:	b1c3      	cbz	r3, 800b096 <_strtod_l+0x916>
 800b064:	f7ff fb6d 	bl	800a742 <sulp>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	ec51 0b18 	vmov	r0, r1, d8
 800b070:	f7f5 f90c 	bl	800028c <__adddf3>
 800b074:	4680      	mov	r8, r0
 800b076:	4689      	mov	r9, r1
 800b078:	e7de      	b.n	800b038 <_strtod_l+0x8b8>
 800b07a:	4013      	ands	r3, r2
 800b07c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b080:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b084:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b088:	f04f 38ff 	mov.w	r8, #4294967295
 800b08c:	e7d4      	b.n	800b038 <_strtod_l+0x8b8>
 800b08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b090:	ea13 0f08 	tst.w	r3, r8
 800b094:	e7e0      	b.n	800b058 <_strtod_l+0x8d8>
 800b096:	f7ff fb54 	bl	800a742 <sulp>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	ec51 0b18 	vmov	r0, r1, d8
 800b0a2:	f7f5 f8f1 	bl	8000288 <__aeabi_dsub>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	4689      	mov	r9, r1
 800b0ae:	f7f5 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d0c0      	beq.n	800b038 <_strtod_l+0x8b8>
 800b0b6:	e618      	b.n	800acea <_strtod_l+0x56a>
 800b0b8:	fffffc02 	.word	0xfffffc02
 800b0bc:	7ff00000 	.word	0x7ff00000
 800b0c0:	39500000 	.word	0x39500000
 800b0c4:	000fffff 	.word	0x000fffff
 800b0c8:	7fefffff 	.word	0x7fefffff
 800b0cc:	0800eab0 	.word	0x0800eab0
 800b0d0:	4659      	mov	r1, fp
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f002 fea2 	bl	800de1c <__ratio>
 800b0d8:	ec57 6b10 	vmov	r6, r7, d0
 800b0dc:	ee10 0a10 	vmov	r0, s0
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f7f5 fd02 	bl	8000af0 <__aeabi_dcmple>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d071      	beq.n	800b1d4 <_strtod_l+0xa54>
 800b0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d17c      	bne.n	800b1f0 <_strtod_l+0xa70>
 800b0f6:	f1b8 0f00 	cmp.w	r8, #0
 800b0fa:	d15a      	bne.n	800b1b2 <_strtod_l+0xa32>
 800b0fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b100:	2b00      	cmp	r3, #0
 800b102:	d15d      	bne.n	800b1c0 <_strtod_l+0xa40>
 800b104:	4b90      	ldr	r3, [pc, #576]	; (800b348 <_strtod_l+0xbc8>)
 800b106:	2200      	movs	r2, #0
 800b108:	4630      	mov	r0, r6
 800b10a:	4639      	mov	r1, r7
 800b10c:	f7f5 fce6 	bl	8000adc <__aeabi_dcmplt>
 800b110:	2800      	cmp	r0, #0
 800b112:	d15c      	bne.n	800b1ce <_strtod_l+0xa4e>
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	4b8c      	ldr	r3, [pc, #560]	; (800b34c <_strtod_l+0xbcc>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	f7f5 fa6c 	bl	80005f8 <__aeabi_dmul>
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b128:	9606      	str	r6, [sp, #24]
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b130:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b134:	4b86      	ldr	r3, [pc, #536]	; (800b350 <_strtod_l+0xbd0>)
 800b136:	ea0a 0303 	and.w	r3, sl, r3
 800b13a:	930d      	str	r3, [sp, #52]	; 0x34
 800b13c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b13e:	4b85      	ldr	r3, [pc, #532]	; (800b354 <_strtod_l+0xbd4>)
 800b140:	429a      	cmp	r2, r3
 800b142:	f040 8090 	bne.w	800b266 <_strtod_l+0xae6>
 800b146:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b14a:	ec49 8b10 	vmov	d0, r8, r9
 800b14e:	f002 fd9b 	bl	800dc88 <__ulp>
 800b152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b156:	ec51 0b10 	vmov	r0, r1, d0
 800b15a:	f7f5 fa4d 	bl	80005f8 <__aeabi_dmul>
 800b15e:	4642      	mov	r2, r8
 800b160:	464b      	mov	r3, r9
 800b162:	f7f5 f893 	bl	800028c <__adddf3>
 800b166:	460b      	mov	r3, r1
 800b168:	4979      	ldr	r1, [pc, #484]	; (800b350 <_strtod_l+0xbd0>)
 800b16a:	4a7b      	ldr	r2, [pc, #492]	; (800b358 <_strtod_l+0xbd8>)
 800b16c:	4019      	ands	r1, r3
 800b16e:	4291      	cmp	r1, r2
 800b170:	4680      	mov	r8, r0
 800b172:	d944      	bls.n	800b1fe <_strtod_l+0xa7e>
 800b174:	ee18 2a90 	vmov	r2, s17
 800b178:	4b78      	ldr	r3, [pc, #480]	; (800b35c <_strtod_l+0xbdc>)
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d104      	bne.n	800b188 <_strtod_l+0xa08>
 800b17e:	ee18 3a10 	vmov	r3, s16
 800b182:	3301      	adds	r3, #1
 800b184:	f43f ad40 	beq.w	800ac08 <_strtod_l+0x488>
 800b188:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b35c <_strtod_l+0xbdc>
 800b18c:	f04f 38ff 	mov.w	r8, #4294967295
 800b190:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b192:	4620      	mov	r0, r4
 800b194:	f002 fa4c 	bl	800d630 <_Bfree>
 800b198:	9905      	ldr	r1, [sp, #20]
 800b19a:	4620      	mov	r0, r4
 800b19c:	f002 fa48 	bl	800d630 <_Bfree>
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f002 fa44 	bl	800d630 <_Bfree>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f002 fa40 	bl	800d630 <_Bfree>
 800b1b0:	e609      	b.n	800adc6 <_strtod_l+0x646>
 800b1b2:	f1b8 0f01 	cmp.w	r8, #1
 800b1b6:	d103      	bne.n	800b1c0 <_strtod_l+0xa40>
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	f43f ad95 	beq.w	800acea <_strtod_l+0x56a>
 800b1c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b318 <_strtod_l+0xb98>
 800b1c4:	4f60      	ldr	r7, [pc, #384]	; (800b348 <_strtod_l+0xbc8>)
 800b1c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	e7ae      	b.n	800b12c <_strtod_l+0x9ac>
 800b1ce:	4f5f      	ldr	r7, [pc, #380]	; (800b34c <_strtod_l+0xbcc>)
 800b1d0:	2600      	movs	r6, #0
 800b1d2:	e7a7      	b.n	800b124 <_strtod_l+0x9a4>
 800b1d4:	4b5d      	ldr	r3, [pc, #372]	; (800b34c <_strtod_l+0xbcc>)
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	460f      	mov	r7, r1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d09c      	beq.n	800b124 <_strtod_l+0x9a4>
 800b1ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b1ee:	e79d      	b.n	800b12c <_strtod_l+0x9ac>
 800b1f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b320 <_strtod_l+0xba0>
 800b1f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1f8:	ec57 6b17 	vmov	r6, r7, d7
 800b1fc:	e796      	b.n	800b12c <_strtod_l+0x9ac>
 800b1fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	46ca      	mov	sl, r9
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1c2      	bne.n	800b190 <_strtod_l+0xa10>
 800b20a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b20e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b210:	0d1b      	lsrs	r3, r3, #20
 800b212:	051b      	lsls	r3, r3, #20
 800b214:	429a      	cmp	r2, r3
 800b216:	d1bb      	bne.n	800b190 <_strtod_l+0xa10>
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	f7f5 fcfc 	bl	8000c18 <__aeabi_d2lz>
 800b220:	f7f5 f9bc 	bl	800059c <__aeabi_l2d>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 f82c 	bl	8000288 <__aeabi_dsub>
 800b230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b232:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b236:	ea43 0308 	orr.w	r3, r3, r8
 800b23a:	4313      	orrs	r3, r2
 800b23c:	4606      	mov	r6, r0
 800b23e:	460f      	mov	r7, r1
 800b240:	d054      	beq.n	800b2ec <_strtod_l+0xb6c>
 800b242:	a339      	add	r3, pc, #228	; (adr r3, 800b328 <_strtod_l+0xba8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f5 fc48 	bl	8000adc <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f47f ace5 	bne.w	800ac1c <_strtod_l+0x49c>
 800b252:	a337      	add	r3, pc, #220	; (adr r3, 800b330 <_strtod_l+0xbb0>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc5c 	bl	8000b18 <__aeabi_dcmpgt>
 800b260:	2800      	cmp	r0, #0
 800b262:	d095      	beq.n	800b190 <_strtod_l+0xa10>
 800b264:	e4da      	b.n	800ac1c <_strtod_l+0x49c>
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	b333      	cbz	r3, 800b2b8 <_strtod_l+0xb38>
 800b26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b26c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b270:	d822      	bhi.n	800b2b8 <_strtod_l+0xb38>
 800b272:	a331      	add	r3, pc, #196	; (adr r3, 800b338 <_strtod_l+0xbb8>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	4630      	mov	r0, r6
 800b27a:	4639      	mov	r1, r7
 800b27c:	f7f5 fc38 	bl	8000af0 <__aeabi_dcmple>
 800b280:	b1a0      	cbz	r0, 800b2ac <_strtod_l+0xb2c>
 800b282:	4639      	mov	r1, r7
 800b284:	4630      	mov	r0, r6
 800b286:	f7f5 fc8f 	bl	8000ba8 <__aeabi_d2uiz>
 800b28a:	2801      	cmp	r0, #1
 800b28c:	bf38      	it	cc
 800b28e:	2001      	movcc	r0, #1
 800b290:	f7f5 f938 	bl	8000504 <__aeabi_ui2d>
 800b294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	bb23      	cbnz	r3, 800b2e6 <_strtod_l+0xb66>
 800b29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2a0:	9010      	str	r0, [sp, #64]	; 0x40
 800b2a2:	9311      	str	r3, [sp, #68]	; 0x44
 800b2a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c0:	eef0 0a68 	vmov.f32	s1, s17
 800b2c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b2c8:	f002 fcde 	bl	800dc88 <__ulp>
 800b2cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2d0:	ec53 2b10 	vmov	r2, r3, d0
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	ec53 2b18 	vmov	r2, r3, d8
 800b2dc:	f7f4 ffd6 	bl	800028c <__adddf3>
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	e78d      	b.n	800b202 <_strtod_l+0xa82>
 800b2e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b2ea:	e7db      	b.n	800b2a4 <_strtod_l+0xb24>
 800b2ec:	a314      	add	r3, pc, #80	; (adr r3, 800b340 <_strtod_l+0xbc0>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f7f5 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800b2f6:	e7b3      	b.n	800b260 <_strtod_l+0xae0>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	f7ff ba7c 	b.w	800a7fe <_strtod_l+0x7e>
 800b306:	2a65      	cmp	r2, #101	; 0x65
 800b308:	f43f ab75 	beq.w	800a9f6 <_strtod_l+0x276>
 800b30c:	2a45      	cmp	r2, #69	; 0x45
 800b30e:	f43f ab72 	beq.w	800a9f6 <_strtod_l+0x276>
 800b312:	2301      	movs	r3, #1
 800b314:	f7ff bbaa 	b.w	800aa6c <_strtod_l+0x2ec>
 800b318:	00000000 	.word	0x00000000
 800b31c:	bff00000 	.word	0xbff00000
 800b320:	00000000 	.word	0x00000000
 800b324:	3ff00000 	.word	0x3ff00000
 800b328:	94a03595 	.word	0x94a03595
 800b32c:	3fdfffff 	.word	0x3fdfffff
 800b330:	35afe535 	.word	0x35afe535
 800b334:	3fe00000 	.word	0x3fe00000
 800b338:	ffc00000 	.word	0xffc00000
 800b33c:	41dfffff 	.word	0x41dfffff
 800b340:	94a03595 	.word	0x94a03595
 800b344:	3fcfffff 	.word	0x3fcfffff
 800b348:	3ff00000 	.word	0x3ff00000
 800b34c:	3fe00000 	.word	0x3fe00000
 800b350:	7ff00000 	.word	0x7ff00000
 800b354:	7fe00000 	.word	0x7fe00000
 800b358:	7c9fffff 	.word	0x7c9fffff
 800b35c:	7fefffff 	.word	0x7fefffff

0800b360 <strtod>:
 800b360:	460a      	mov	r2, r1
 800b362:	4601      	mov	r1, r0
 800b364:	4802      	ldr	r0, [pc, #8]	; (800b370 <strtod+0x10>)
 800b366:	4b03      	ldr	r3, [pc, #12]	; (800b374 <strtod+0x14>)
 800b368:	6800      	ldr	r0, [r0, #0]
 800b36a:	f7ff ba09 	b.w	800a780 <_strtod_l>
 800b36e:	bf00      	nop
 800b370:	200001d0 	.word	0x200001d0
 800b374:	20000018 	.word	0x20000018

0800b378 <__cvt>:
 800b378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	ec55 4b10 	vmov	r4, r5, d0
 800b380:	2d00      	cmp	r5, #0
 800b382:	460e      	mov	r6, r1
 800b384:	4619      	mov	r1, r3
 800b386:	462b      	mov	r3, r5
 800b388:	bfbb      	ittet	lt
 800b38a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b38e:	461d      	movlt	r5, r3
 800b390:	2300      	movge	r3, #0
 800b392:	232d      	movlt	r3, #45	; 0x2d
 800b394:	700b      	strb	r3, [r1, #0]
 800b396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b398:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b39c:	4691      	mov	r9, r2
 800b39e:	f023 0820 	bic.w	r8, r3, #32
 800b3a2:	bfbc      	itt	lt
 800b3a4:	4622      	movlt	r2, r4
 800b3a6:	4614      	movlt	r4, r2
 800b3a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3ac:	d005      	beq.n	800b3ba <__cvt+0x42>
 800b3ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b3b2:	d100      	bne.n	800b3b6 <__cvt+0x3e>
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	2102      	movs	r1, #2
 800b3b8:	e000      	b.n	800b3bc <__cvt+0x44>
 800b3ba:	2103      	movs	r1, #3
 800b3bc:	ab03      	add	r3, sp, #12
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	ab02      	add	r3, sp, #8
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	ec45 4b10 	vmov	d0, r4, r5
 800b3c8:	4653      	mov	r3, sl
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	f000 fe94 	bl	800c0f8 <_dtoa_r>
 800b3d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	d102      	bne.n	800b3de <__cvt+0x66>
 800b3d8:	f019 0f01 	tst.w	r9, #1
 800b3dc:	d022      	beq.n	800b424 <__cvt+0xac>
 800b3de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3e2:	eb07 0906 	add.w	r9, r7, r6
 800b3e6:	d110      	bne.n	800b40a <__cvt+0x92>
 800b3e8:	783b      	ldrb	r3, [r7, #0]
 800b3ea:	2b30      	cmp	r3, #48	; 0x30
 800b3ec:	d10a      	bne.n	800b404 <__cvt+0x8c>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	f7f5 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3fa:	b918      	cbnz	r0, 800b404 <__cvt+0x8c>
 800b3fc:	f1c6 0601 	rsb	r6, r6, #1
 800b400:	f8ca 6000 	str.w	r6, [sl]
 800b404:	f8da 3000 	ldr.w	r3, [sl]
 800b408:	4499      	add	r9, r3
 800b40a:	2200      	movs	r2, #0
 800b40c:	2300      	movs	r3, #0
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f5 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b416:	b108      	cbz	r0, 800b41c <__cvt+0xa4>
 800b418:	f8cd 900c 	str.w	r9, [sp, #12]
 800b41c:	2230      	movs	r2, #48	; 0x30
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	454b      	cmp	r3, r9
 800b422:	d307      	bcc.n	800b434 <__cvt+0xbc>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b428:	1bdb      	subs	r3, r3, r7
 800b42a:	4638      	mov	r0, r7
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	b004      	add	sp, #16
 800b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b434:	1c59      	adds	r1, r3, #1
 800b436:	9103      	str	r1, [sp, #12]
 800b438:	701a      	strb	r2, [r3, #0]
 800b43a:	e7f0      	b.n	800b41e <__cvt+0xa6>

0800b43c <__exponent>:
 800b43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b43e:	4603      	mov	r3, r0
 800b440:	2900      	cmp	r1, #0
 800b442:	bfb8      	it	lt
 800b444:	4249      	neglt	r1, r1
 800b446:	f803 2b02 	strb.w	r2, [r3], #2
 800b44a:	bfb4      	ite	lt
 800b44c:	222d      	movlt	r2, #45	; 0x2d
 800b44e:	222b      	movge	r2, #43	; 0x2b
 800b450:	2909      	cmp	r1, #9
 800b452:	7042      	strb	r2, [r0, #1]
 800b454:	dd2a      	ble.n	800b4ac <__exponent+0x70>
 800b456:	f10d 0207 	add.w	r2, sp, #7
 800b45a:	4617      	mov	r7, r2
 800b45c:	260a      	movs	r6, #10
 800b45e:	4694      	mov	ip, r2
 800b460:	fb91 f5f6 	sdiv	r5, r1, r6
 800b464:	fb06 1415 	mls	r4, r6, r5, r1
 800b468:	3430      	adds	r4, #48	; 0x30
 800b46a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b46e:	460c      	mov	r4, r1
 800b470:	2c63      	cmp	r4, #99	; 0x63
 800b472:	f102 32ff 	add.w	r2, r2, #4294967295
 800b476:	4629      	mov	r1, r5
 800b478:	dcf1      	bgt.n	800b45e <__exponent+0x22>
 800b47a:	3130      	adds	r1, #48	; 0x30
 800b47c:	f1ac 0402 	sub.w	r4, ip, #2
 800b480:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b484:	1c41      	adds	r1, r0, #1
 800b486:	4622      	mov	r2, r4
 800b488:	42ba      	cmp	r2, r7
 800b48a:	d30a      	bcc.n	800b4a2 <__exponent+0x66>
 800b48c:	f10d 0209 	add.w	r2, sp, #9
 800b490:	eba2 020c 	sub.w	r2, r2, ip
 800b494:	42bc      	cmp	r4, r7
 800b496:	bf88      	it	hi
 800b498:	2200      	movhi	r2, #0
 800b49a:	4413      	add	r3, r2
 800b49c:	1a18      	subs	r0, r3, r0
 800b49e:	b003      	add	sp, #12
 800b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b4a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b4aa:	e7ed      	b.n	800b488 <__exponent+0x4c>
 800b4ac:	2330      	movs	r3, #48	; 0x30
 800b4ae:	3130      	adds	r1, #48	; 0x30
 800b4b0:	7083      	strb	r3, [r0, #2]
 800b4b2:	70c1      	strb	r1, [r0, #3]
 800b4b4:	1d03      	adds	r3, r0, #4
 800b4b6:	e7f1      	b.n	800b49c <__exponent+0x60>

0800b4b8 <_printf_float>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	ed2d 8b02 	vpush	{d8}
 800b4c0:	b08d      	sub	sp, #52	; 0x34
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	f000 fcfd 	bl	800becc <_localeconv_r>
 800b4d2:	f8d0 a000 	ldr.w	sl, [r0]
 800b4d6:	4650      	mov	r0, sl
 800b4d8:	f7f4 feca 	bl	8000270 <strlen>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930a      	str	r3, [sp, #40]	; 0x28
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4ec:	3307      	adds	r3, #7
 800b4ee:	f023 0307 	bic.w	r3, r3, #7
 800b4f2:	f103 0208 	add.w	r2, r3, #8
 800b4f6:	f8c8 2000 	str.w	r2, [r8]
 800b4fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b502:	9307      	str	r3, [sp, #28]
 800b504:	f8cd 8018 	str.w	r8, [sp, #24]
 800b508:	ee08 0a10 	vmov	s16, r0
 800b50c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b514:	4b9e      	ldr	r3, [pc, #632]	; (800b790 <_printf_float+0x2d8>)
 800b516:	f04f 32ff 	mov.w	r2, #4294967295
 800b51a:	f7f5 fb07 	bl	8000b2c <__aeabi_dcmpun>
 800b51e:	bb88      	cbnz	r0, 800b584 <_printf_float+0xcc>
 800b520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b524:	4b9a      	ldr	r3, [pc, #616]	; (800b790 <_printf_float+0x2d8>)
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	f7f5 fae1 	bl	8000af0 <__aeabi_dcmple>
 800b52e:	bb48      	cbnz	r0, 800b584 <_printf_float+0xcc>
 800b530:	2200      	movs	r2, #0
 800b532:	2300      	movs	r3, #0
 800b534:	4640      	mov	r0, r8
 800b536:	4649      	mov	r1, r9
 800b538:	f7f5 fad0 	bl	8000adc <__aeabi_dcmplt>
 800b53c:	b110      	cbz	r0, 800b544 <_printf_float+0x8c>
 800b53e:	232d      	movs	r3, #45	; 0x2d
 800b540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b544:	4a93      	ldr	r2, [pc, #588]	; (800b794 <_printf_float+0x2dc>)
 800b546:	4b94      	ldr	r3, [pc, #592]	; (800b798 <_printf_float+0x2e0>)
 800b548:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b54c:	bf94      	ite	ls
 800b54e:	4690      	movls	r8, r2
 800b550:	4698      	movhi	r8, r3
 800b552:	2303      	movs	r3, #3
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	9b05      	ldr	r3, [sp, #20]
 800b558:	f023 0304 	bic.w	r3, r3, #4
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	f04f 0900 	mov.w	r9, #0
 800b562:	9700      	str	r7, [sp, #0]
 800b564:	4633      	mov	r3, r6
 800b566:	aa0b      	add	r2, sp, #44	; 0x2c
 800b568:	4621      	mov	r1, r4
 800b56a:	4628      	mov	r0, r5
 800b56c:	f000 f9da 	bl	800b924 <_printf_common>
 800b570:	3001      	adds	r0, #1
 800b572:	f040 8090 	bne.w	800b696 <_printf_float+0x1de>
 800b576:	f04f 30ff 	mov.w	r0, #4294967295
 800b57a:	b00d      	add	sp, #52	; 0x34
 800b57c:	ecbd 8b02 	vpop	{d8}
 800b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b584:	4642      	mov	r2, r8
 800b586:	464b      	mov	r3, r9
 800b588:	4640      	mov	r0, r8
 800b58a:	4649      	mov	r1, r9
 800b58c:	f7f5 face 	bl	8000b2c <__aeabi_dcmpun>
 800b590:	b140      	cbz	r0, 800b5a4 <_printf_float+0xec>
 800b592:	464b      	mov	r3, r9
 800b594:	2b00      	cmp	r3, #0
 800b596:	bfbc      	itt	lt
 800b598:	232d      	movlt	r3, #45	; 0x2d
 800b59a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b59e:	4a7f      	ldr	r2, [pc, #508]	; (800b79c <_printf_float+0x2e4>)
 800b5a0:	4b7f      	ldr	r3, [pc, #508]	; (800b7a0 <_printf_float+0x2e8>)
 800b5a2:	e7d1      	b.n	800b548 <_printf_float+0x90>
 800b5a4:	6863      	ldr	r3, [r4, #4]
 800b5a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b5aa:	9206      	str	r2, [sp, #24]
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	d13f      	bne.n	800b630 <_printf_float+0x178>
 800b5b0:	2306      	movs	r3, #6
 800b5b2:	6063      	str	r3, [r4, #4]
 800b5b4:	9b05      	ldr	r3, [sp, #20]
 800b5b6:	6861      	ldr	r1, [r4, #4]
 800b5b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	ab0a      	add	r3, sp, #40	; 0x28
 800b5c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b5c6:	ab09      	add	r3, sp, #36	; 0x24
 800b5c8:	ec49 8b10 	vmov	d0, r8, r9
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	6022      	str	r2, [r4, #0]
 800b5d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff fecf 	bl	800b378 <__cvt>
 800b5da:	9b06      	ldr	r3, [sp, #24]
 800b5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5de:	2b47      	cmp	r3, #71	; 0x47
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	d108      	bne.n	800b5f6 <_printf_float+0x13e>
 800b5e4:	1cc8      	adds	r0, r1, #3
 800b5e6:	db02      	blt.n	800b5ee <_printf_float+0x136>
 800b5e8:	6863      	ldr	r3, [r4, #4]
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	dd41      	ble.n	800b672 <_printf_float+0x1ba>
 800b5ee:	f1ab 0302 	sub.w	r3, fp, #2
 800b5f2:	fa5f fb83 	uxtb.w	fp, r3
 800b5f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5fa:	d820      	bhi.n	800b63e <_printf_float+0x186>
 800b5fc:	3901      	subs	r1, #1
 800b5fe:	465a      	mov	r2, fp
 800b600:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b604:	9109      	str	r1, [sp, #36]	; 0x24
 800b606:	f7ff ff19 	bl	800b43c <__exponent>
 800b60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60c:	1813      	adds	r3, r2, r0
 800b60e:	2a01      	cmp	r2, #1
 800b610:	4681      	mov	r9, r0
 800b612:	6123      	str	r3, [r4, #16]
 800b614:	dc02      	bgt.n	800b61c <_printf_float+0x164>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	07d2      	lsls	r2, r2, #31
 800b61a:	d501      	bpl.n	800b620 <_printf_float+0x168>
 800b61c:	3301      	adds	r3, #1
 800b61e:	6123      	str	r3, [r4, #16]
 800b620:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b624:	2b00      	cmp	r3, #0
 800b626:	d09c      	beq.n	800b562 <_printf_float+0xaa>
 800b628:	232d      	movs	r3, #45	; 0x2d
 800b62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62e:	e798      	b.n	800b562 <_printf_float+0xaa>
 800b630:	9a06      	ldr	r2, [sp, #24]
 800b632:	2a47      	cmp	r2, #71	; 0x47
 800b634:	d1be      	bne.n	800b5b4 <_printf_float+0xfc>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1bc      	bne.n	800b5b4 <_printf_float+0xfc>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e7b9      	b.n	800b5b2 <_printf_float+0xfa>
 800b63e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b642:	d118      	bne.n	800b676 <_printf_float+0x1be>
 800b644:	2900      	cmp	r1, #0
 800b646:	6863      	ldr	r3, [r4, #4]
 800b648:	dd0b      	ble.n	800b662 <_printf_float+0x1aa>
 800b64a:	6121      	str	r1, [r4, #16]
 800b64c:	b913      	cbnz	r3, 800b654 <_printf_float+0x19c>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	07d0      	lsls	r0, r2, #31
 800b652:	d502      	bpl.n	800b65a <_printf_float+0x1a2>
 800b654:	3301      	adds	r3, #1
 800b656:	440b      	add	r3, r1
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b65c:	f04f 0900 	mov.w	r9, #0
 800b660:	e7de      	b.n	800b620 <_printf_float+0x168>
 800b662:	b913      	cbnz	r3, 800b66a <_printf_float+0x1b2>
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	07d2      	lsls	r2, r2, #31
 800b668:	d501      	bpl.n	800b66e <_printf_float+0x1b6>
 800b66a:	3302      	adds	r3, #2
 800b66c:	e7f4      	b.n	800b658 <_printf_float+0x1a0>
 800b66e:	2301      	movs	r3, #1
 800b670:	e7f2      	b.n	800b658 <_printf_float+0x1a0>
 800b672:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	4299      	cmp	r1, r3
 800b67a:	db05      	blt.n	800b688 <_printf_float+0x1d0>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	6121      	str	r1, [r4, #16]
 800b680:	07d8      	lsls	r0, r3, #31
 800b682:	d5ea      	bpl.n	800b65a <_printf_float+0x1a2>
 800b684:	1c4b      	adds	r3, r1, #1
 800b686:	e7e7      	b.n	800b658 <_printf_float+0x1a0>
 800b688:	2900      	cmp	r1, #0
 800b68a:	bfd4      	ite	le
 800b68c:	f1c1 0202 	rsble	r2, r1, #2
 800b690:	2201      	movgt	r2, #1
 800b692:	4413      	add	r3, r2
 800b694:	e7e0      	b.n	800b658 <_printf_float+0x1a0>
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	055a      	lsls	r2, r3, #21
 800b69a:	d407      	bmi.n	800b6ac <_printf_float+0x1f4>
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	4642      	mov	r2, r8
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d12c      	bne.n	800b704 <_printf_float+0x24c>
 800b6aa:	e764      	b.n	800b576 <_printf_float+0xbe>
 800b6ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6b0:	f240 80e0 	bls.w	800b874 <_printf_float+0x3bc>
 800b6b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f7f5 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d034      	beq.n	800b72e <_printf_float+0x276>
 800b6c4:	4a37      	ldr	r2, [pc, #220]	; (800b7a4 <_printf_float+0x2ec>)
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	f43f af51 	beq.w	800b576 <_printf_float+0xbe>
 800b6d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	db02      	blt.n	800b6e2 <_printf_float+0x22a>
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	07d8      	lsls	r0, r3, #31
 800b6e0:	d510      	bpl.n	800b704 <_printf_float+0x24c>
 800b6e2:	ee18 3a10 	vmov	r3, s16
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	47b8      	blx	r7
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f43f af41 	beq.w	800b576 <_printf_float+0xbe>
 800b6f4:	f04f 0800 	mov.w	r8, #0
 800b6f8:	f104 091a 	add.w	r9, r4, #26
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6fe:	3b01      	subs	r3, #1
 800b700:	4543      	cmp	r3, r8
 800b702:	dc09      	bgt.n	800b718 <_printf_float+0x260>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	079b      	lsls	r3, r3, #30
 800b708:	f100 8107 	bmi.w	800b91a <_printf_float+0x462>
 800b70c:	68e0      	ldr	r0, [r4, #12]
 800b70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b710:	4298      	cmp	r0, r3
 800b712:	bfb8      	it	lt
 800b714:	4618      	movlt	r0, r3
 800b716:	e730      	b.n	800b57a <_printf_float+0xc2>
 800b718:	2301      	movs	r3, #1
 800b71a:	464a      	mov	r2, r9
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	f43f af27 	beq.w	800b576 <_printf_float+0xbe>
 800b728:	f108 0801 	add.w	r8, r8, #1
 800b72c:	e7e6      	b.n	800b6fc <_printf_float+0x244>
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc39      	bgt.n	800b7a8 <_printf_float+0x2f0>
 800b734:	4a1b      	ldr	r2, [pc, #108]	; (800b7a4 <_printf_float+0x2ec>)
 800b736:	2301      	movs	r3, #1
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	f43f af19 	beq.w	800b576 <_printf_float+0xbe>
 800b744:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b748:	4313      	orrs	r3, r2
 800b74a:	d102      	bne.n	800b752 <_printf_float+0x29a>
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	07d9      	lsls	r1, r3, #31
 800b750:	d5d8      	bpl.n	800b704 <_printf_float+0x24c>
 800b752:	ee18 3a10 	vmov	r3, s16
 800b756:	4652      	mov	r2, sl
 800b758:	4631      	mov	r1, r6
 800b75a:	4628      	mov	r0, r5
 800b75c:	47b8      	blx	r7
 800b75e:	3001      	adds	r0, #1
 800b760:	f43f af09 	beq.w	800b576 <_printf_float+0xbe>
 800b764:	f04f 0900 	mov.w	r9, #0
 800b768:	f104 0a1a 	add.w	sl, r4, #26
 800b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76e:	425b      	negs	r3, r3
 800b770:	454b      	cmp	r3, r9
 800b772:	dc01      	bgt.n	800b778 <_printf_float+0x2c0>
 800b774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b776:	e792      	b.n	800b69e <_printf_float+0x1e6>
 800b778:	2301      	movs	r3, #1
 800b77a:	4652      	mov	r2, sl
 800b77c:	4631      	mov	r1, r6
 800b77e:	4628      	mov	r0, r5
 800b780:	47b8      	blx	r7
 800b782:	3001      	adds	r0, #1
 800b784:	f43f aef7 	beq.w	800b576 <_printf_float+0xbe>
 800b788:	f109 0901 	add.w	r9, r9, #1
 800b78c:	e7ee      	b.n	800b76c <_printf_float+0x2b4>
 800b78e:	bf00      	nop
 800b790:	7fefffff 	.word	0x7fefffff
 800b794:	0800ead8 	.word	0x0800ead8
 800b798:	0800eadc 	.word	0x0800eadc
 800b79c:	0800eae0 	.word	0x0800eae0
 800b7a0:	0800eae4 	.word	0x0800eae4
 800b7a4:	0800eae8 	.word	0x0800eae8
 800b7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	bfa8      	it	ge
 800b7b0:	461a      	movge	r2, r3
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	4691      	mov	r9, r2
 800b7b6:	dc37      	bgt.n	800b828 <_printf_float+0x370>
 800b7b8:	f04f 0b00 	mov.w	fp, #0
 800b7bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7c0:	f104 021a 	add.w	r2, r4, #26
 800b7c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	eba3 0309 	sub.w	r3, r3, r9
 800b7cc:	455b      	cmp	r3, fp
 800b7ce:	dc33      	bgt.n	800b838 <_printf_float+0x380>
 800b7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	db3b      	blt.n	800b850 <_printf_float+0x398>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	07da      	lsls	r2, r3, #31
 800b7dc:	d438      	bmi.n	800b850 <_printf_float+0x398>
 800b7de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b7e2:	eba2 0903 	sub.w	r9, r2, r3
 800b7e6:	9b05      	ldr	r3, [sp, #20]
 800b7e8:	1ad2      	subs	r2, r2, r3
 800b7ea:	4591      	cmp	r9, r2
 800b7ec:	bfa8      	it	ge
 800b7ee:	4691      	movge	r9, r2
 800b7f0:	f1b9 0f00 	cmp.w	r9, #0
 800b7f4:	dc35      	bgt.n	800b862 <_printf_float+0x3aa>
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7fe:	f104 0a1a 	add.w	sl, r4, #26
 800b802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	eba3 0309 	sub.w	r3, r3, r9
 800b80c:	4543      	cmp	r3, r8
 800b80e:	f77f af79 	ble.w	800b704 <_printf_float+0x24c>
 800b812:	2301      	movs	r3, #1
 800b814:	4652      	mov	r2, sl
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	47b8      	blx	r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	f43f aeaa 	beq.w	800b576 <_printf_float+0xbe>
 800b822:	f108 0801 	add.w	r8, r8, #1
 800b826:	e7ec      	b.n	800b802 <_printf_float+0x34a>
 800b828:	4613      	mov	r3, r2
 800b82a:	4631      	mov	r1, r6
 800b82c:	4642      	mov	r2, r8
 800b82e:	4628      	mov	r0, r5
 800b830:	47b8      	blx	r7
 800b832:	3001      	adds	r0, #1
 800b834:	d1c0      	bne.n	800b7b8 <_printf_float+0x300>
 800b836:	e69e      	b.n	800b576 <_printf_float+0xbe>
 800b838:	2301      	movs	r3, #1
 800b83a:	4631      	mov	r1, r6
 800b83c:	4628      	mov	r0, r5
 800b83e:	9205      	str	r2, [sp, #20]
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f ae97 	beq.w	800b576 <_printf_float+0xbe>
 800b848:	9a05      	ldr	r2, [sp, #20]
 800b84a:	f10b 0b01 	add.w	fp, fp, #1
 800b84e:	e7b9      	b.n	800b7c4 <_printf_float+0x30c>
 800b850:	ee18 3a10 	vmov	r3, s16
 800b854:	4652      	mov	r2, sl
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	d1be      	bne.n	800b7de <_printf_float+0x326>
 800b860:	e689      	b.n	800b576 <_printf_float+0xbe>
 800b862:	9a05      	ldr	r2, [sp, #20]
 800b864:	464b      	mov	r3, r9
 800b866:	4442      	add	r2, r8
 800b868:	4631      	mov	r1, r6
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b8      	blx	r7
 800b86e:	3001      	adds	r0, #1
 800b870:	d1c1      	bne.n	800b7f6 <_printf_float+0x33e>
 800b872:	e680      	b.n	800b576 <_printf_float+0xbe>
 800b874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b876:	2a01      	cmp	r2, #1
 800b878:	dc01      	bgt.n	800b87e <_printf_float+0x3c6>
 800b87a:	07db      	lsls	r3, r3, #31
 800b87c:	d53a      	bpl.n	800b8f4 <_printf_float+0x43c>
 800b87e:	2301      	movs	r3, #1
 800b880:	4642      	mov	r2, r8
 800b882:	4631      	mov	r1, r6
 800b884:	4628      	mov	r0, r5
 800b886:	47b8      	blx	r7
 800b888:	3001      	adds	r0, #1
 800b88a:	f43f ae74 	beq.w	800b576 <_printf_float+0xbe>
 800b88e:	ee18 3a10 	vmov	r3, s16
 800b892:	4652      	mov	r2, sl
 800b894:	4631      	mov	r1, r6
 800b896:	4628      	mov	r0, r5
 800b898:	47b8      	blx	r7
 800b89a:	3001      	adds	r0, #1
 800b89c:	f43f ae6b 	beq.w	800b576 <_printf_float+0xbe>
 800b8a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b8ac:	f7f5 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b0:	b9d8      	cbnz	r0, 800b8ea <_printf_float+0x432>
 800b8b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b8b6:	f108 0201 	add.w	r2, r8, #1
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	d10e      	bne.n	800b8e2 <_printf_float+0x42a>
 800b8c4:	e657      	b.n	800b576 <_printf_float+0xbe>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b8      	blx	r7
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	f43f ae50 	beq.w	800b576 <_printf_float+0xbe>
 800b8d6:	f108 0801 	add.w	r8, r8, #1
 800b8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	4543      	cmp	r3, r8
 800b8e0:	dcf1      	bgt.n	800b8c6 <_printf_float+0x40e>
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8e8:	e6da      	b.n	800b6a0 <_printf_float+0x1e8>
 800b8ea:	f04f 0800 	mov.w	r8, #0
 800b8ee:	f104 0a1a 	add.w	sl, r4, #26
 800b8f2:	e7f2      	b.n	800b8da <_printf_float+0x422>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	4642      	mov	r2, r8
 800b8f8:	e7df      	b.n	800b8ba <_printf_float+0x402>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	464a      	mov	r2, r9
 800b8fe:	4631      	mov	r1, r6
 800b900:	4628      	mov	r0, r5
 800b902:	47b8      	blx	r7
 800b904:	3001      	adds	r0, #1
 800b906:	f43f ae36 	beq.w	800b576 <_printf_float+0xbe>
 800b90a:	f108 0801 	add.w	r8, r8, #1
 800b90e:	68e3      	ldr	r3, [r4, #12]
 800b910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b912:	1a5b      	subs	r3, r3, r1
 800b914:	4543      	cmp	r3, r8
 800b916:	dcf0      	bgt.n	800b8fa <_printf_float+0x442>
 800b918:	e6f8      	b.n	800b70c <_printf_float+0x254>
 800b91a:	f04f 0800 	mov.w	r8, #0
 800b91e:	f104 0919 	add.w	r9, r4, #25
 800b922:	e7f4      	b.n	800b90e <_printf_float+0x456>

0800b924 <_printf_common>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	4616      	mov	r6, r2
 800b92a:	4699      	mov	r9, r3
 800b92c:	688a      	ldr	r2, [r1, #8]
 800b92e:	690b      	ldr	r3, [r1, #16]
 800b930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b934:	4293      	cmp	r3, r2
 800b936:	bfb8      	it	lt
 800b938:	4613      	movlt	r3, r2
 800b93a:	6033      	str	r3, [r6, #0]
 800b93c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b940:	4607      	mov	r7, r0
 800b942:	460c      	mov	r4, r1
 800b944:	b10a      	cbz	r2, 800b94a <_printf_common+0x26>
 800b946:	3301      	adds	r3, #1
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	0699      	lsls	r1, r3, #26
 800b94e:	bf42      	ittt	mi
 800b950:	6833      	ldrmi	r3, [r6, #0]
 800b952:	3302      	addmi	r3, #2
 800b954:	6033      	strmi	r3, [r6, #0]
 800b956:	6825      	ldr	r5, [r4, #0]
 800b958:	f015 0506 	ands.w	r5, r5, #6
 800b95c:	d106      	bne.n	800b96c <_printf_common+0x48>
 800b95e:	f104 0a19 	add.w	sl, r4, #25
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	6832      	ldr	r2, [r6, #0]
 800b966:	1a9b      	subs	r3, r3, r2
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dc26      	bgt.n	800b9ba <_printf_common+0x96>
 800b96c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b970:	1e13      	subs	r3, r2, #0
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	bf18      	it	ne
 800b976:	2301      	movne	r3, #1
 800b978:	0692      	lsls	r2, r2, #26
 800b97a:	d42b      	bmi.n	800b9d4 <_printf_common+0xb0>
 800b97c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b980:	4649      	mov	r1, r9
 800b982:	4638      	mov	r0, r7
 800b984:	47c0      	blx	r8
 800b986:	3001      	adds	r0, #1
 800b988:	d01e      	beq.n	800b9c8 <_printf_common+0xa4>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	f003 0306 	and.w	r3, r3, #6
 800b992:	2b04      	cmp	r3, #4
 800b994:	bf02      	ittt	eq
 800b996:	68e5      	ldreq	r5, [r4, #12]
 800b998:	6833      	ldreq	r3, [r6, #0]
 800b99a:	1aed      	subeq	r5, r5, r3
 800b99c:	68a3      	ldr	r3, [r4, #8]
 800b99e:	bf0c      	ite	eq
 800b9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9a4:	2500      	movne	r5, #0
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	bfc4      	itt	gt
 800b9aa:	1a9b      	subgt	r3, r3, r2
 800b9ac:	18ed      	addgt	r5, r5, r3
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	341a      	adds	r4, #26
 800b9b2:	42b5      	cmp	r5, r6
 800b9b4:	d11a      	bne.n	800b9ec <_printf_common+0xc8>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e008      	b.n	800b9cc <_printf_common+0xa8>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4652      	mov	r2, sl
 800b9be:	4649      	mov	r1, r9
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	47c0      	blx	r8
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d103      	bne.n	800b9d0 <_printf_common+0xac>
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	e7c6      	b.n	800b962 <_printf_common+0x3e>
 800b9d4:	18e1      	adds	r1, r4, r3
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	2030      	movs	r0, #48	; 0x30
 800b9da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9de:	4422      	add	r2, r4
 800b9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9e8:	3302      	adds	r3, #2
 800b9ea:	e7c7      	b.n	800b97c <_printf_common+0x58>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	47c0      	blx	r8
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	d0e6      	beq.n	800b9c8 <_printf_common+0xa4>
 800b9fa:	3601      	adds	r6, #1
 800b9fc:	e7d9      	b.n	800b9b2 <_printf_common+0x8e>
	...

0800ba00 <_printf_i>:
 800ba00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	7e0f      	ldrb	r7, [r1, #24]
 800ba06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba08:	2f78      	cmp	r7, #120	; 0x78
 800ba0a:	4691      	mov	r9, r2
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	469a      	mov	sl, r3
 800ba12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba16:	d807      	bhi.n	800ba28 <_printf_i+0x28>
 800ba18:	2f62      	cmp	r7, #98	; 0x62
 800ba1a:	d80a      	bhi.n	800ba32 <_printf_i+0x32>
 800ba1c:	2f00      	cmp	r7, #0
 800ba1e:	f000 80d4 	beq.w	800bbca <_printf_i+0x1ca>
 800ba22:	2f58      	cmp	r7, #88	; 0x58
 800ba24:	f000 80c0 	beq.w	800bba8 <_printf_i+0x1a8>
 800ba28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba30:	e03a      	b.n	800baa8 <_printf_i+0xa8>
 800ba32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba36:	2b15      	cmp	r3, #21
 800ba38:	d8f6      	bhi.n	800ba28 <_printf_i+0x28>
 800ba3a:	a101      	add	r1, pc, #4	; (adr r1, 800ba40 <_printf_i+0x40>)
 800ba3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba40:	0800ba99 	.word	0x0800ba99
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800ba29 	.word	0x0800ba29
 800ba4c:	0800ba29 	.word	0x0800ba29
 800ba50:	0800ba29 	.word	0x0800ba29
 800ba54:	0800ba29 	.word	0x0800ba29
 800ba58:	0800baad 	.word	0x0800baad
 800ba5c:	0800ba29 	.word	0x0800ba29
 800ba60:	0800ba29 	.word	0x0800ba29
 800ba64:	0800ba29 	.word	0x0800ba29
 800ba68:	0800ba29 	.word	0x0800ba29
 800ba6c:	0800bbb1 	.word	0x0800bbb1
 800ba70:	0800bad9 	.word	0x0800bad9
 800ba74:	0800bb6b 	.word	0x0800bb6b
 800ba78:	0800ba29 	.word	0x0800ba29
 800ba7c:	0800ba29 	.word	0x0800ba29
 800ba80:	0800bbd3 	.word	0x0800bbd3
 800ba84:	0800ba29 	.word	0x0800ba29
 800ba88:	0800bad9 	.word	0x0800bad9
 800ba8c:	0800ba29 	.word	0x0800ba29
 800ba90:	0800ba29 	.word	0x0800ba29
 800ba94:	0800bb73 	.word	0x0800bb73
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	1d1a      	adds	r2, r3, #4
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	602a      	str	r2, [r5, #0]
 800baa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800baa8:	2301      	movs	r3, #1
 800baaa:	e09f      	b.n	800bbec <_printf_i+0x1ec>
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	0607      	lsls	r7, r0, #24
 800bab2:	f103 0104 	add.w	r1, r3, #4
 800bab6:	6029      	str	r1, [r5, #0]
 800bab8:	d501      	bpl.n	800babe <_printf_i+0xbe>
 800baba:	681e      	ldr	r6, [r3, #0]
 800babc:	e003      	b.n	800bac6 <_printf_i+0xc6>
 800babe:	0646      	lsls	r6, r0, #25
 800bac0:	d5fb      	bpl.n	800baba <_printf_i+0xba>
 800bac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	da03      	bge.n	800bad2 <_printf_i+0xd2>
 800baca:	232d      	movs	r3, #45	; 0x2d
 800bacc:	4276      	negs	r6, r6
 800bace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad2:	485a      	ldr	r0, [pc, #360]	; (800bc3c <_printf_i+0x23c>)
 800bad4:	230a      	movs	r3, #10
 800bad6:	e012      	b.n	800bafe <_printf_i+0xfe>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	1d19      	adds	r1, r3, #4
 800bade:	6029      	str	r1, [r5, #0]
 800bae0:	0605      	lsls	r5, r0, #24
 800bae2:	d501      	bpl.n	800bae8 <_printf_i+0xe8>
 800bae4:	681e      	ldr	r6, [r3, #0]
 800bae6:	e002      	b.n	800baee <_printf_i+0xee>
 800bae8:	0641      	lsls	r1, r0, #25
 800baea:	d5fb      	bpl.n	800bae4 <_printf_i+0xe4>
 800baec:	881e      	ldrh	r6, [r3, #0]
 800baee:	4853      	ldr	r0, [pc, #332]	; (800bc3c <_printf_i+0x23c>)
 800baf0:	2f6f      	cmp	r7, #111	; 0x6f
 800baf2:	bf0c      	ite	eq
 800baf4:	2308      	moveq	r3, #8
 800baf6:	230a      	movne	r3, #10
 800baf8:	2100      	movs	r1, #0
 800bafa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bafe:	6865      	ldr	r5, [r4, #4]
 800bb00:	60a5      	str	r5, [r4, #8]
 800bb02:	2d00      	cmp	r5, #0
 800bb04:	bfa2      	ittt	ge
 800bb06:	6821      	ldrge	r1, [r4, #0]
 800bb08:	f021 0104 	bicge.w	r1, r1, #4
 800bb0c:	6021      	strge	r1, [r4, #0]
 800bb0e:	b90e      	cbnz	r6, 800bb14 <_printf_i+0x114>
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d04b      	beq.n	800bbac <_printf_i+0x1ac>
 800bb14:	4615      	mov	r5, r2
 800bb16:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb1a:	fb03 6711 	mls	r7, r3, r1, r6
 800bb1e:	5dc7      	ldrb	r7, [r0, r7]
 800bb20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb24:	4637      	mov	r7, r6
 800bb26:	42bb      	cmp	r3, r7
 800bb28:	460e      	mov	r6, r1
 800bb2a:	d9f4      	bls.n	800bb16 <_printf_i+0x116>
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d10b      	bne.n	800bb48 <_printf_i+0x148>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	07de      	lsls	r6, r3, #31
 800bb34:	d508      	bpl.n	800bb48 <_printf_i+0x148>
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	6861      	ldr	r1, [r4, #4]
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	bfde      	ittt	le
 800bb3e:	2330      	movle	r3, #48	; 0x30
 800bb40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb48:	1b52      	subs	r2, r2, r5
 800bb4a:	6122      	str	r2, [r4, #16]
 800bb4c:	f8cd a000 	str.w	sl, [sp]
 800bb50:	464b      	mov	r3, r9
 800bb52:	aa03      	add	r2, sp, #12
 800bb54:	4621      	mov	r1, r4
 800bb56:	4640      	mov	r0, r8
 800bb58:	f7ff fee4 	bl	800b924 <_printf_common>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d14a      	bne.n	800bbf6 <_printf_i+0x1f6>
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	b004      	add	sp, #16
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	f043 0320 	orr.w	r3, r3, #32
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	4833      	ldr	r0, [pc, #204]	; (800bc40 <_printf_i+0x240>)
 800bb74:	2778      	movs	r7, #120	; 0x78
 800bb76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	6829      	ldr	r1, [r5, #0]
 800bb7e:	061f      	lsls	r7, r3, #24
 800bb80:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb84:	d402      	bmi.n	800bb8c <_printf_i+0x18c>
 800bb86:	065f      	lsls	r7, r3, #25
 800bb88:	bf48      	it	mi
 800bb8a:	b2b6      	uxthmi	r6, r6
 800bb8c:	07df      	lsls	r7, r3, #31
 800bb8e:	bf48      	it	mi
 800bb90:	f043 0320 	orrmi.w	r3, r3, #32
 800bb94:	6029      	str	r1, [r5, #0]
 800bb96:	bf48      	it	mi
 800bb98:	6023      	strmi	r3, [r4, #0]
 800bb9a:	b91e      	cbnz	r6, 800bba4 <_printf_i+0x1a4>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f023 0320 	bic.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	2310      	movs	r3, #16
 800bba6:	e7a7      	b.n	800baf8 <_printf_i+0xf8>
 800bba8:	4824      	ldr	r0, [pc, #144]	; (800bc3c <_printf_i+0x23c>)
 800bbaa:	e7e4      	b.n	800bb76 <_printf_i+0x176>
 800bbac:	4615      	mov	r5, r2
 800bbae:	e7bd      	b.n	800bb2c <_printf_i+0x12c>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	6826      	ldr	r6, [r4, #0]
 800bbb4:	6961      	ldr	r1, [r4, #20]
 800bbb6:	1d18      	adds	r0, r3, #4
 800bbb8:	6028      	str	r0, [r5, #0]
 800bbba:	0635      	lsls	r5, r6, #24
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	d501      	bpl.n	800bbc4 <_printf_i+0x1c4>
 800bbc0:	6019      	str	r1, [r3, #0]
 800bbc2:	e002      	b.n	800bbca <_printf_i+0x1ca>
 800bbc4:	0670      	lsls	r0, r6, #25
 800bbc6:	d5fb      	bpl.n	800bbc0 <_printf_i+0x1c0>
 800bbc8:	8019      	strh	r1, [r3, #0]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6123      	str	r3, [r4, #16]
 800bbce:	4615      	mov	r5, r2
 800bbd0:	e7bc      	b.n	800bb4c <_printf_i+0x14c>
 800bbd2:	682b      	ldr	r3, [r5, #0]
 800bbd4:	1d1a      	adds	r2, r3, #4
 800bbd6:	602a      	str	r2, [r5, #0]
 800bbd8:	681d      	ldr	r5, [r3, #0]
 800bbda:	6862      	ldr	r2, [r4, #4]
 800bbdc:	2100      	movs	r1, #0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f7f4 faf6 	bl	80001d0 <memchr>
 800bbe4:	b108      	cbz	r0, 800bbea <_printf_i+0x1ea>
 800bbe6:	1b40      	subs	r0, r0, r5
 800bbe8:	6060      	str	r0, [r4, #4]
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbf4:	e7aa      	b.n	800bb4c <_printf_i+0x14c>
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	47d0      	blx	sl
 800bc00:	3001      	adds	r0, #1
 800bc02:	d0ad      	beq.n	800bb60 <_printf_i+0x160>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	079b      	lsls	r3, r3, #30
 800bc08:	d413      	bmi.n	800bc32 <_printf_i+0x232>
 800bc0a:	68e0      	ldr	r0, [r4, #12]
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	4298      	cmp	r0, r3
 800bc10:	bfb8      	it	lt
 800bc12:	4618      	movlt	r0, r3
 800bc14:	e7a6      	b.n	800bb64 <_printf_i+0x164>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4632      	mov	r2, r6
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	47d0      	blx	sl
 800bc20:	3001      	adds	r0, #1
 800bc22:	d09d      	beq.n	800bb60 <_printf_i+0x160>
 800bc24:	3501      	adds	r5, #1
 800bc26:	68e3      	ldr	r3, [r4, #12]
 800bc28:	9903      	ldr	r1, [sp, #12]
 800bc2a:	1a5b      	subs	r3, r3, r1
 800bc2c:	42ab      	cmp	r3, r5
 800bc2e:	dcf2      	bgt.n	800bc16 <_printf_i+0x216>
 800bc30:	e7eb      	b.n	800bc0a <_printf_i+0x20a>
 800bc32:	2500      	movs	r5, #0
 800bc34:	f104 0619 	add.w	r6, r4, #25
 800bc38:	e7f5      	b.n	800bc26 <_printf_i+0x226>
 800bc3a:	bf00      	nop
 800bc3c:	0800eaea 	.word	0x0800eaea
 800bc40:	0800eafb 	.word	0x0800eafb

0800bc44 <std>:
 800bc44:	2300      	movs	r3, #0
 800bc46:	b510      	push	{r4, lr}
 800bc48:	4604      	mov	r4, r0
 800bc4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc52:	6083      	str	r3, [r0, #8]
 800bc54:	8181      	strh	r1, [r0, #12]
 800bc56:	6643      	str	r3, [r0, #100]	; 0x64
 800bc58:	81c2      	strh	r2, [r0, #14]
 800bc5a:	6183      	str	r3, [r0, #24]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	2208      	movs	r2, #8
 800bc60:	305c      	adds	r0, #92	; 0x5c
 800bc62:	f000 f902 	bl	800be6a <memset>
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <std+0x38>)
 800bc68:	6263      	str	r3, [r4, #36]	; 0x24
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <std+0x3c>)
 800bc6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <std+0x40>)
 800bc70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <std+0x44>)
 800bc74:	6224      	str	r4, [r4, #32]
 800bc76:	6323      	str	r3, [r4, #48]	; 0x30
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800bde5 	.word	0x0800bde5
 800bc80:	0800be07 	.word	0x0800be07
 800bc84:	0800be3f 	.word	0x0800be3f
 800bc88:	0800be63 	.word	0x0800be63

0800bc8c <stdio_exit_handler>:
 800bc8c:	4a02      	ldr	r2, [pc, #8]	; (800bc98 <stdio_exit_handler+0xc>)
 800bc8e:	4903      	ldr	r1, [pc, #12]	; (800bc9c <stdio_exit_handler+0x10>)
 800bc90:	4803      	ldr	r0, [pc, #12]	; (800bca0 <stdio_exit_handler+0x14>)
 800bc92:	f000 b869 	b.w	800bd68 <_fwalk_sglue>
 800bc96:	bf00      	nop
 800bc98:	2000000c 	.word	0x2000000c
 800bc9c:	0800e2e1 	.word	0x0800e2e1
 800bca0:	20000184 	.word	0x20000184

0800bca4 <cleanup_stdio>:
 800bca4:	6841      	ldr	r1, [r0, #4]
 800bca6:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <cleanup_stdio+0x34>)
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	4604      	mov	r4, r0
 800bcae:	d001      	beq.n	800bcb4 <cleanup_stdio+0x10>
 800bcb0:	f002 fb16 	bl	800e2e0 <_fflush_r>
 800bcb4:	68a1      	ldr	r1, [r4, #8]
 800bcb6:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <cleanup_stdio+0x38>)
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d002      	beq.n	800bcc2 <cleanup_stdio+0x1e>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f002 fb0f 	bl	800e2e0 <_fflush_r>
 800bcc2:	68e1      	ldr	r1, [r4, #12]
 800bcc4:	4b06      	ldr	r3, [pc, #24]	; (800bce0 <cleanup_stdio+0x3c>)
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	d004      	beq.n	800bcd4 <cleanup_stdio+0x30>
 800bcca:	4620      	mov	r0, r4
 800bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd0:	f002 bb06 	b.w	800e2e0 <_fflush_r>
 800bcd4:	bd10      	pop	{r4, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20000a18 	.word	0x20000a18
 800bcdc:	20000a80 	.word	0x20000a80
 800bce0:	20000ae8 	.word	0x20000ae8

0800bce4 <global_stdio_init.part.0>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <global_stdio_init.part.0+0x30>)
 800bce8:	4c0b      	ldr	r4, [pc, #44]	; (800bd18 <global_stdio_init.part.0+0x34>)
 800bcea:	4a0c      	ldr	r2, [pc, #48]	; (800bd1c <global_stdio_init.part.0+0x38>)
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2104      	movs	r1, #4
 800bcf4:	f7ff ffa6 	bl	800bc44 <std>
 800bcf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	2109      	movs	r1, #9
 800bd00:	f7ff ffa0 	bl	800bc44 <std>
 800bd04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd08:	2202      	movs	r2, #2
 800bd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd0e:	2112      	movs	r1, #18
 800bd10:	f7ff bf98 	b.w	800bc44 <std>
 800bd14:	20000b50 	.word	0x20000b50
 800bd18:	20000a18 	.word	0x20000a18
 800bd1c:	0800bc8d 	.word	0x0800bc8d

0800bd20 <__sfp_lock_acquire>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__sfp_lock_acquire+0x8>)
 800bd22:	f000 b947 	b.w	800bfb4 <__retarget_lock_acquire_recursive>
 800bd26:	bf00      	nop
 800bd28:	20000b59 	.word	0x20000b59

0800bd2c <__sfp_lock_release>:
 800bd2c:	4801      	ldr	r0, [pc, #4]	; (800bd34 <__sfp_lock_release+0x8>)
 800bd2e:	f000 b942 	b.w	800bfb6 <__retarget_lock_release_recursive>
 800bd32:	bf00      	nop
 800bd34:	20000b59 	.word	0x20000b59

0800bd38 <__sinit>:
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	f7ff fff0 	bl	800bd20 <__sfp_lock_acquire>
 800bd40:	6a23      	ldr	r3, [r4, #32]
 800bd42:	b11b      	cbz	r3, 800bd4c <__sinit+0x14>
 800bd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd48:	f7ff bff0 	b.w	800bd2c <__sfp_lock_release>
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <__sinit+0x28>)
 800bd4e:	6223      	str	r3, [r4, #32]
 800bd50:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <__sinit+0x2c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1f5      	bne.n	800bd44 <__sinit+0xc>
 800bd58:	f7ff ffc4 	bl	800bce4 <global_stdio_init.part.0>
 800bd5c:	e7f2      	b.n	800bd44 <__sinit+0xc>
 800bd5e:	bf00      	nop
 800bd60:	0800bca5 	.word	0x0800bca5
 800bd64:	20000b50 	.word	0x20000b50

0800bd68 <_fwalk_sglue>:
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	4688      	mov	r8, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	2600      	movs	r6, #0
 800bd74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd78:	f1b9 0901 	subs.w	r9, r9, #1
 800bd7c:	d505      	bpl.n	800bd8a <_fwalk_sglue+0x22>
 800bd7e:	6824      	ldr	r4, [r4, #0]
 800bd80:	2c00      	cmp	r4, #0
 800bd82:	d1f7      	bne.n	800bd74 <_fwalk_sglue+0xc>
 800bd84:	4630      	mov	r0, r6
 800bd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d907      	bls.n	800bda0 <_fwalk_sglue+0x38>
 800bd90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd94:	3301      	adds	r3, #1
 800bd96:	d003      	beq.n	800bda0 <_fwalk_sglue+0x38>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	47c0      	blx	r8
 800bd9e:	4306      	orrs	r6, r0
 800bda0:	3568      	adds	r5, #104	; 0x68
 800bda2:	e7e9      	b.n	800bd78 <_fwalk_sglue+0x10>

0800bda4 <siprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b500      	push	{lr}
 800bda8:	b09c      	sub	sp, #112	; 0x70
 800bdaa:	ab1d      	add	r3, sp, #116	; 0x74
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	9006      	str	r0, [sp, #24]
 800bdb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdb4:	4809      	ldr	r0, [pc, #36]	; (800bddc <siprintf+0x38>)
 800bdb6:	9107      	str	r1, [sp, #28]
 800bdb8:	9104      	str	r1, [sp, #16]
 800bdba:	4909      	ldr	r1, [pc, #36]	; (800bde0 <siprintf+0x3c>)
 800bdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc0:	9105      	str	r1, [sp, #20]
 800bdc2:	6800      	ldr	r0, [r0, #0]
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	a902      	add	r1, sp, #8
 800bdc8:	f002 f906 	bl	800dfd8 <_svfiprintf_r>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
 800bdd2:	b01c      	add	sp, #112	; 0x70
 800bdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd8:	b003      	add	sp, #12
 800bdda:	4770      	bx	lr
 800bddc:	200001d0 	.word	0x200001d0
 800bde0:	ffff0208 	.word	0xffff0208

0800bde4 <__sread>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	460c      	mov	r4, r1
 800bde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdec:	f000 f894 	bl	800bf18 <_read_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	bfab      	itete	ge
 800bdf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdf6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdf8:	181b      	addge	r3, r3, r0
 800bdfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdfe:	bfac      	ite	ge
 800be00:	6563      	strge	r3, [r4, #84]	; 0x54
 800be02:	81a3      	strhlt	r3, [r4, #12]
 800be04:	bd10      	pop	{r4, pc}

0800be06 <__swrite>:
 800be06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0a:	461f      	mov	r7, r3
 800be0c:	898b      	ldrh	r3, [r1, #12]
 800be0e:	05db      	lsls	r3, r3, #23
 800be10:	4605      	mov	r5, r0
 800be12:	460c      	mov	r4, r1
 800be14:	4616      	mov	r6, r2
 800be16:	d505      	bpl.n	800be24 <__swrite+0x1e>
 800be18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1c:	2302      	movs	r3, #2
 800be1e:	2200      	movs	r2, #0
 800be20:	f000 f868 	bl	800bef4 <_lseek_r>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	4628      	mov	r0, r5
 800be36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be3a:	f000 b87f 	b.w	800bf3c <_write_r>

0800be3e <__sseek>:
 800be3e:	b510      	push	{r4, lr}
 800be40:	460c      	mov	r4, r1
 800be42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be46:	f000 f855 	bl	800bef4 <_lseek_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	bf15      	itete	ne
 800be50:	6560      	strne	r0, [r4, #84]	; 0x54
 800be52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be5a:	81a3      	strheq	r3, [r4, #12]
 800be5c:	bf18      	it	ne
 800be5e:	81a3      	strhne	r3, [r4, #12]
 800be60:	bd10      	pop	{r4, pc}

0800be62 <__sclose>:
 800be62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be66:	f000 b835 	b.w	800bed4 <_close_r>

0800be6a <memset>:
 800be6a:	4402      	add	r2, r0
 800be6c:	4603      	mov	r3, r0
 800be6e:	4293      	cmp	r3, r2
 800be70:	d100      	bne.n	800be74 <memset+0xa>
 800be72:	4770      	bx	lr
 800be74:	f803 1b01 	strb.w	r1, [r3], #1
 800be78:	e7f9      	b.n	800be6e <memset+0x4>

0800be7a <strncmp>:
 800be7a:	b510      	push	{r4, lr}
 800be7c:	b16a      	cbz	r2, 800be9a <strncmp+0x20>
 800be7e:	3901      	subs	r1, #1
 800be80:	1884      	adds	r4, r0, r2
 800be82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d103      	bne.n	800be96 <strncmp+0x1c>
 800be8e:	42a0      	cmp	r0, r4
 800be90:	d001      	beq.n	800be96 <strncmp+0x1c>
 800be92:	2a00      	cmp	r2, #0
 800be94:	d1f5      	bne.n	800be82 <strncmp+0x8>
 800be96:	1ad0      	subs	r0, r2, r3
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	4610      	mov	r0, r2
 800be9c:	e7fc      	b.n	800be98 <strncmp+0x1e>

0800be9e <strstr>:
 800be9e:	780a      	ldrb	r2, [r1, #0]
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	b96a      	cbnz	r2, 800bec0 <strstr+0x22>
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d109      	bne.n	800bebe <strstr+0x20>
 800beaa:	460c      	mov	r4, r1
 800beac:	4605      	mov	r5, r0
 800beae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0f6      	beq.n	800bea4 <strstr+0x6>
 800beb6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800beba:	429e      	cmp	r6, r3
 800bebc:	d0f7      	beq.n	800beae <strstr+0x10>
 800bebe:	3001      	adds	r0, #1
 800bec0:	7803      	ldrb	r3, [r0, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1ef      	bne.n	800bea6 <strstr+0x8>
 800bec6:	4618      	mov	r0, r3
 800bec8:	e7ec      	b.n	800bea4 <strstr+0x6>
	...

0800becc <_localeconv_r>:
 800becc:	4800      	ldr	r0, [pc, #0]	; (800bed0 <_localeconv_r+0x4>)
 800bece:	4770      	bx	lr
 800bed0:	20000108 	.word	0x20000108

0800bed4 <_close_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d06      	ldr	r5, [pc, #24]	; (800bef0 <_close_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f6 fcd1 	bl	8002886 <_close>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_close_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_close_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20000b54 	.word	0x20000b54

0800bef4 <_lseek_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	; (800bf14 <_lseek_r+0x20>)
 800bef8:	4604      	mov	r4, r0
 800befa:	4608      	mov	r0, r1
 800befc:	4611      	mov	r1, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	602a      	str	r2, [r5, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f7f6 fce6 	bl	80028d4 <_lseek>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_lseek_r+0x1e>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_lseek_r+0x1e>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	20000b54 	.word	0x20000b54

0800bf18 <_read_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_read_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f6 fc74 	bl	8002814 <_read>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_read_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_read_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20000b54 	.word	0x20000b54

0800bf3c <_write_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d07      	ldr	r5, [pc, #28]	; (800bf5c <_write_r+0x20>)
 800bf40:	4604      	mov	r4, r0
 800bf42:	4608      	mov	r0, r1
 800bf44:	4611      	mov	r1, r2
 800bf46:	2200      	movs	r2, #0
 800bf48:	602a      	str	r2, [r5, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f7f6 fc7f 	bl	800284e <_write>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_write_r+0x1e>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_write_r+0x1e>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	20000b54 	.word	0x20000b54

0800bf60 <__errno>:
 800bf60:	4b01      	ldr	r3, [pc, #4]	; (800bf68 <__errno+0x8>)
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	200001d0 	.word	0x200001d0

0800bf6c <__libc_init_array>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	4d0d      	ldr	r5, [pc, #52]	; (800bfa4 <__libc_init_array+0x38>)
 800bf70:	4c0d      	ldr	r4, [pc, #52]	; (800bfa8 <__libc_init_array+0x3c>)
 800bf72:	1b64      	subs	r4, r4, r5
 800bf74:	10a4      	asrs	r4, r4, #2
 800bf76:	2600      	movs	r6, #0
 800bf78:	42a6      	cmp	r6, r4
 800bf7a:	d109      	bne.n	800bf90 <__libc_init_array+0x24>
 800bf7c:	4d0b      	ldr	r5, [pc, #44]	; (800bfac <__libc_init_array+0x40>)
 800bf7e:	4c0c      	ldr	r4, [pc, #48]	; (800bfb0 <__libc_init_array+0x44>)
 800bf80:	f002 fd26 	bl	800e9d0 <_init>
 800bf84:	1b64      	subs	r4, r4, r5
 800bf86:	10a4      	asrs	r4, r4, #2
 800bf88:	2600      	movs	r6, #0
 800bf8a:	42a6      	cmp	r6, r4
 800bf8c:	d105      	bne.n	800bf9a <__libc_init_array+0x2e>
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}
 800bf90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf94:	4798      	blx	r3
 800bf96:	3601      	adds	r6, #1
 800bf98:	e7ee      	b.n	800bf78 <__libc_init_array+0xc>
 800bf9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9e:	4798      	blx	r3
 800bfa0:	3601      	adds	r6, #1
 800bfa2:	e7f2      	b.n	800bf8a <__libc_init_array+0x1e>
 800bfa4:	0800eeb4 	.word	0x0800eeb4
 800bfa8:	0800eeb4 	.word	0x0800eeb4
 800bfac:	0800eeb4 	.word	0x0800eeb4
 800bfb0:	0800eeb8 	.word	0x0800eeb8

0800bfb4 <__retarget_lock_acquire_recursive>:
 800bfb4:	4770      	bx	lr

0800bfb6 <__retarget_lock_release_recursive>:
 800bfb6:	4770      	bx	lr

0800bfb8 <memcpy>:
 800bfb8:	440a      	add	r2, r1
 800bfba:	4291      	cmp	r1, r2
 800bfbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfc0:	d100      	bne.n	800bfc4 <memcpy+0xc>
 800bfc2:	4770      	bx	lr
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfce:	4291      	cmp	r1, r2
 800bfd0:	d1f9      	bne.n	800bfc6 <memcpy+0xe>
 800bfd2:	bd10      	pop	{r4, pc}
 800bfd4:	0000      	movs	r0, r0
	...

0800bfd8 <nan>:
 800bfd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bfe0 <nan+0x8>
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	00000000 	.word	0x00000000
 800bfe4:	7ff80000 	.word	0x7ff80000

0800bfe8 <quorem>:
 800bfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	6903      	ldr	r3, [r0, #16]
 800bfee:	690c      	ldr	r4, [r1, #16]
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	4607      	mov	r7, r0
 800bff4:	db7e      	blt.n	800c0f4 <quorem+0x10c>
 800bff6:	3c01      	subs	r4, #1
 800bff8:	f101 0814 	add.w	r8, r1, #20
 800bffc:	f100 0514 	add.w	r5, r0, #20
 800c000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c00a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c00e:	3301      	adds	r3, #1
 800c010:	429a      	cmp	r2, r3
 800c012:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c01a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c01e:	d331      	bcc.n	800c084 <quorem+0x9c>
 800c020:	f04f 0e00 	mov.w	lr, #0
 800c024:	4640      	mov	r0, r8
 800c026:	46ac      	mov	ip, r5
 800c028:	46f2      	mov	sl, lr
 800c02a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c02e:	b293      	uxth	r3, r2
 800c030:	fb06 e303 	mla	r3, r6, r3, lr
 800c034:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c038:	0c1a      	lsrs	r2, r3, #16
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	ebaa 0303 	sub.w	r3, sl, r3
 800c040:	f8dc a000 	ldr.w	sl, [ip]
 800c044:	fa13 f38a 	uxtah	r3, r3, sl
 800c048:	fb06 220e 	mla	r2, r6, lr, r2
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	9b00      	ldr	r3, [sp, #0]
 800c050:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c054:	b292      	uxth	r2, r2
 800c056:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c05a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c05e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c062:	4581      	cmp	r9, r0
 800c064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c068:	f84c 3b04 	str.w	r3, [ip], #4
 800c06c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c070:	d2db      	bcs.n	800c02a <quorem+0x42>
 800c072:	f855 300b 	ldr.w	r3, [r5, fp]
 800c076:	b92b      	cbnz	r3, 800c084 <quorem+0x9c>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	3b04      	subs	r3, #4
 800c07c:	429d      	cmp	r5, r3
 800c07e:	461a      	mov	r2, r3
 800c080:	d32c      	bcc.n	800c0dc <quorem+0xf4>
 800c082:	613c      	str	r4, [r7, #16]
 800c084:	4638      	mov	r0, r7
 800c086:	f001 fd59 	bl	800db3c <__mcmp>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	db22      	blt.n	800c0d4 <quorem+0xec>
 800c08e:	3601      	adds	r6, #1
 800c090:	4629      	mov	r1, r5
 800c092:	2000      	movs	r0, #0
 800c094:	f858 2b04 	ldr.w	r2, [r8], #4
 800c098:	f8d1 c000 	ldr.w	ip, [r1]
 800c09c:	b293      	uxth	r3, r2
 800c09e:	1ac3      	subs	r3, r0, r3
 800c0a0:	0c12      	lsrs	r2, r2, #16
 800c0a2:	fa13 f38c 	uxtah	r3, r3, ip
 800c0a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0b4:	45c1      	cmp	r9, r8
 800c0b6:	f841 3b04 	str.w	r3, [r1], #4
 800c0ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0be:	d2e9      	bcs.n	800c094 <quorem+0xac>
 800c0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0c8:	b922      	cbnz	r2, 800c0d4 <quorem+0xec>
 800c0ca:	3b04      	subs	r3, #4
 800c0cc:	429d      	cmp	r5, r3
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	d30a      	bcc.n	800c0e8 <quorem+0x100>
 800c0d2:	613c      	str	r4, [r7, #16]
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	b003      	add	sp, #12
 800c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	3b04      	subs	r3, #4
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	d1ce      	bne.n	800c082 <quorem+0x9a>
 800c0e4:	3c01      	subs	r4, #1
 800c0e6:	e7c9      	b.n	800c07c <quorem+0x94>
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	3b04      	subs	r3, #4
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	d1f0      	bne.n	800c0d2 <quorem+0xea>
 800c0f0:	3c01      	subs	r4, #1
 800c0f2:	e7eb      	b.n	800c0cc <quorem+0xe4>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7ee      	b.n	800c0d6 <quorem+0xee>

0800c0f8 <_dtoa_r>:
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	ed2d 8b04 	vpush	{d8-d9}
 800c100:	69c5      	ldr	r5, [r0, #28]
 800c102:	b093      	sub	sp, #76	; 0x4c
 800c104:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c108:	ec57 6b10 	vmov	r6, r7, d0
 800c10c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c110:	9107      	str	r1, [sp, #28]
 800c112:	4604      	mov	r4, r0
 800c114:	920a      	str	r2, [sp, #40]	; 0x28
 800c116:	930d      	str	r3, [sp, #52]	; 0x34
 800c118:	b975      	cbnz	r5, 800c138 <_dtoa_r+0x40>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f001 f982 	bl	800d424 <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	61e0      	str	r0, [r4, #28]
 800c124:	b920      	cbnz	r0, 800c130 <_dtoa_r+0x38>
 800c126:	4bae      	ldr	r3, [pc, #696]	; (800c3e0 <_dtoa_r+0x2e8>)
 800c128:	21ef      	movs	r1, #239	; 0xef
 800c12a:	48ae      	ldr	r0, [pc, #696]	; (800c3e4 <_dtoa_r+0x2ec>)
 800c12c:	f002 f92a 	bl	800e384 <__assert_func>
 800c130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c134:	6005      	str	r5, [r0, #0]
 800c136:	60c5      	str	r5, [r0, #12]
 800c138:	69e3      	ldr	r3, [r4, #28]
 800c13a:	6819      	ldr	r1, [r3, #0]
 800c13c:	b151      	cbz	r1, 800c154 <_dtoa_r+0x5c>
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	604a      	str	r2, [r1, #4]
 800c142:	2301      	movs	r3, #1
 800c144:	4093      	lsls	r3, r2
 800c146:	608b      	str	r3, [r1, #8]
 800c148:	4620      	mov	r0, r4
 800c14a:	f001 fa71 	bl	800d630 <_Bfree>
 800c14e:	69e3      	ldr	r3, [r4, #28]
 800c150:	2200      	movs	r2, #0
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	1e3b      	subs	r3, r7, #0
 800c156:	bfbb      	ittet	lt
 800c158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c15c:	9303      	strlt	r3, [sp, #12]
 800c15e:	2300      	movge	r3, #0
 800c160:	2201      	movlt	r2, #1
 800c162:	bfac      	ite	ge
 800c164:	f8c8 3000 	strge.w	r3, [r8]
 800c168:	f8c8 2000 	strlt.w	r2, [r8]
 800c16c:	4b9e      	ldr	r3, [pc, #632]	; (800c3e8 <_dtoa_r+0x2f0>)
 800c16e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c172:	ea33 0308 	bics.w	r3, r3, r8
 800c176:	d11b      	bne.n	800c1b0 <_dtoa_r+0xb8>
 800c178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c17a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c184:	4333      	orrs	r3, r6
 800c186:	f000 8593 	beq.w	800ccb0 <_dtoa_r+0xbb8>
 800c18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c18c:	b963      	cbnz	r3, 800c1a8 <_dtoa_r+0xb0>
 800c18e:	4b97      	ldr	r3, [pc, #604]	; (800c3ec <_dtoa_r+0x2f4>)
 800c190:	e027      	b.n	800c1e2 <_dtoa_r+0xea>
 800c192:	4b97      	ldr	r3, [pc, #604]	; (800c3f0 <_dtoa_r+0x2f8>)
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	3308      	adds	r3, #8
 800c198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	9800      	ldr	r0, [sp, #0]
 800c19e:	b013      	add	sp, #76	; 0x4c
 800c1a0:	ecbd 8b04 	vpop	{d8-d9}
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	4b90      	ldr	r3, [pc, #576]	; (800c3ec <_dtoa_r+0x2f4>)
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	3303      	adds	r3, #3
 800c1ae:	e7f3      	b.n	800c198 <_dtoa_r+0xa0>
 800c1b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	ec51 0b17 	vmov	r0, r1, d7
 800c1ba:	eeb0 8a47 	vmov.f32	s16, s14
 800c1be:	eef0 8a67 	vmov.f32	s17, s15
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f7f4 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1c8:	4681      	mov	r9, r0
 800c1ca:	b160      	cbz	r0, 800c1e6 <_dtoa_r+0xee>
 800c1cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 8568 	beq.w	800ccaa <_dtoa_r+0xbb2>
 800c1da:	4b86      	ldr	r3, [pc, #536]	; (800c3f4 <_dtoa_r+0x2fc>)
 800c1dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	e7da      	b.n	800c19c <_dtoa_r+0xa4>
 800c1e6:	aa10      	add	r2, sp, #64	; 0x40
 800c1e8:	a911      	add	r1, sp, #68	; 0x44
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c1f0:	eef0 0a68 	vmov.f32	s1, s17
 800c1f4:	f001 fdb8 	bl	800dd68 <__d2b>
 800c1f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c1fc:	4682      	mov	sl, r0
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	d07f      	beq.n	800c302 <_dtoa_r+0x20a>
 800c202:	ee18 3a90 	vmov	r3, s17
 800c206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c20a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c20e:	ec51 0b18 	vmov	r0, r1, d8
 800c212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c21a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c21e:	4619      	mov	r1, r3
 800c220:	2200      	movs	r2, #0
 800c222:	4b75      	ldr	r3, [pc, #468]	; (800c3f8 <_dtoa_r+0x300>)
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	a367      	add	r3, pc, #412	; (adr r3, 800c3c8 <_dtoa_r+0x2d0>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f7f4 f9e3 	bl	80005f8 <__aeabi_dmul>
 800c232:	a367      	add	r3, pc, #412	; (adr r3, 800c3d0 <_dtoa_r+0x2d8>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 f828 	bl	800028c <__adddf3>
 800c23c:	4606      	mov	r6, r0
 800c23e:	4628      	mov	r0, r5
 800c240:	460f      	mov	r7, r1
 800c242:	f7f4 f96f 	bl	8000524 <__aeabi_i2d>
 800c246:	a364      	add	r3, pc, #400	; (adr r3, 800c3d8 <_dtoa_r+0x2e0>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 f818 	bl	800028c <__adddf3>
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	f7f4 fc7a 	bl	8000b58 <__aeabi_d2iz>
 800c264:	2200      	movs	r2, #0
 800c266:	4683      	mov	fp, r0
 800c268:	2300      	movs	r3, #0
 800c26a:	4630      	mov	r0, r6
 800c26c:	4639      	mov	r1, r7
 800c26e:	f7f4 fc35 	bl	8000adc <__aeabi_dcmplt>
 800c272:	b148      	cbz	r0, 800c288 <_dtoa_r+0x190>
 800c274:	4658      	mov	r0, fp
 800c276:	f7f4 f955 	bl	8000524 <__aeabi_i2d>
 800c27a:	4632      	mov	r2, r6
 800c27c:	463b      	mov	r3, r7
 800c27e:	f7f4 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 800c282:	b908      	cbnz	r0, 800c288 <_dtoa_r+0x190>
 800c284:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c288:	f1bb 0f16 	cmp.w	fp, #22
 800c28c:	d857      	bhi.n	800c33e <_dtoa_r+0x246>
 800c28e:	4b5b      	ldr	r3, [pc, #364]	; (800c3fc <_dtoa_r+0x304>)
 800c290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	ec51 0b18 	vmov	r0, r1, d8
 800c29c:	f7f4 fc1e 	bl	8000adc <__aeabi_dcmplt>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d04e      	beq.n	800c342 <_dtoa_r+0x24a>
 800c2a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ae:	1b5b      	subs	r3, r3, r5
 800c2b0:	1e5a      	subs	r2, r3, #1
 800c2b2:	bf45      	ittet	mi
 800c2b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2b8:	9305      	strmi	r3, [sp, #20]
 800c2ba:	2300      	movpl	r3, #0
 800c2bc:	2300      	movmi	r3, #0
 800c2be:	9206      	str	r2, [sp, #24]
 800c2c0:	bf54      	ite	pl
 800c2c2:	9305      	strpl	r3, [sp, #20]
 800c2c4:	9306      	strmi	r3, [sp, #24]
 800c2c6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ca:	db3c      	blt.n	800c346 <_dtoa_r+0x24e>
 800c2cc:	9b06      	ldr	r3, [sp, #24]
 800c2ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c2d2:	445b      	add	r3, fp
 800c2d4:	9306      	str	r3, [sp, #24]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9308      	str	r3, [sp, #32]
 800c2da:	9b07      	ldr	r3, [sp, #28]
 800c2dc:	2b09      	cmp	r3, #9
 800c2de:	d868      	bhi.n	800c3b2 <_dtoa_r+0x2ba>
 800c2e0:	2b05      	cmp	r3, #5
 800c2e2:	bfc4      	itt	gt
 800c2e4:	3b04      	subgt	r3, #4
 800c2e6:	9307      	strgt	r3, [sp, #28]
 800c2e8:	9b07      	ldr	r3, [sp, #28]
 800c2ea:	f1a3 0302 	sub.w	r3, r3, #2
 800c2ee:	bfcc      	ite	gt
 800c2f0:	2500      	movgt	r5, #0
 800c2f2:	2501      	movle	r5, #1
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	f200 8085 	bhi.w	800c404 <_dtoa_r+0x30c>
 800c2fa:	e8df f003 	tbb	[pc, r3]
 800c2fe:	3b2e      	.short	0x3b2e
 800c300:	5839      	.short	0x5839
 800c302:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c306:	441d      	add	r5, r3
 800c308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	bfc1      	itttt	gt
 800c310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c314:	fa08 f803 	lslgt.w	r8, r8, r3
 800c318:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c31c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c320:	bfd6      	itet	le
 800c322:	f1c3 0320 	rsble	r3, r3, #32
 800c326:	ea48 0003 	orrgt.w	r0, r8, r3
 800c32a:	fa06 f003 	lslle.w	r0, r6, r3
 800c32e:	f7f4 f8e9 	bl	8000504 <__aeabi_ui2d>
 800c332:	2201      	movs	r2, #1
 800c334:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c338:	3d01      	subs	r5, #1
 800c33a:	920e      	str	r2, [sp, #56]	; 0x38
 800c33c:	e76f      	b.n	800c21e <_dtoa_r+0x126>
 800c33e:	2301      	movs	r3, #1
 800c340:	e7b3      	b.n	800c2aa <_dtoa_r+0x1b2>
 800c342:	900c      	str	r0, [sp, #48]	; 0x30
 800c344:	e7b2      	b.n	800c2ac <_dtoa_r+0x1b4>
 800c346:	9b05      	ldr	r3, [sp, #20]
 800c348:	eba3 030b 	sub.w	r3, r3, fp
 800c34c:	9305      	str	r3, [sp, #20]
 800c34e:	f1cb 0300 	rsb	r3, fp, #0
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	2300      	movs	r3, #0
 800c356:	930b      	str	r3, [sp, #44]	; 0x2c
 800c358:	e7bf      	b.n	800c2da <_dtoa_r+0x1e2>
 800c35a:	2300      	movs	r3, #0
 800c35c:	9309      	str	r3, [sp, #36]	; 0x24
 800c35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	dc52      	bgt.n	800c40a <_dtoa_r+0x312>
 800c364:	2301      	movs	r3, #1
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	9304      	str	r3, [sp, #16]
 800c36a:	461a      	mov	r2, r3
 800c36c:	920a      	str	r2, [sp, #40]	; 0x28
 800c36e:	e00b      	b.n	800c388 <_dtoa_r+0x290>
 800c370:	2301      	movs	r3, #1
 800c372:	e7f3      	b.n	800c35c <_dtoa_r+0x264>
 800c374:	2300      	movs	r3, #0
 800c376:	9309      	str	r3, [sp, #36]	; 0x24
 800c378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c37a:	445b      	add	r3, fp
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	3301      	adds	r3, #1
 800c380:	2b01      	cmp	r3, #1
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	bfb8      	it	lt
 800c386:	2301      	movlt	r3, #1
 800c388:	69e0      	ldr	r0, [r4, #28]
 800c38a:	2100      	movs	r1, #0
 800c38c:	2204      	movs	r2, #4
 800c38e:	f102 0614 	add.w	r6, r2, #20
 800c392:	429e      	cmp	r6, r3
 800c394:	d93d      	bls.n	800c412 <_dtoa_r+0x31a>
 800c396:	6041      	str	r1, [r0, #4]
 800c398:	4620      	mov	r0, r4
 800c39a:	f001 f909 	bl	800d5b0 <_Balloc>
 800c39e:	9000      	str	r0, [sp, #0]
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d139      	bne.n	800c418 <_dtoa_r+0x320>
 800c3a4:	4b16      	ldr	r3, [pc, #88]	; (800c400 <_dtoa_r+0x308>)
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	f240 11af 	movw	r1, #431	; 0x1af
 800c3ac:	e6bd      	b.n	800c12a <_dtoa_r+0x32>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e7e1      	b.n	800c376 <_dtoa_r+0x27e>
 800c3b2:	2501      	movs	r5, #1
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9307      	str	r3, [sp, #28]
 800c3b8:	9509      	str	r5, [sp, #36]	; 0x24
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2312      	movs	r3, #18
 800c3c6:	e7d1      	b.n	800c36c <_dtoa_r+0x274>
 800c3c8:	636f4361 	.word	0x636f4361
 800c3cc:	3fd287a7 	.word	0x3fd287a7
 800c3d0:	8b60c8b3 	.word	0x8b60c8b3
 800c3d4:	3fc68a28 	.word	0x3fc68a28
 800c3d8:	509f79fb 	.word	0x509f79fb
 800c3dc:	3fd34413 	.word	0x3fd34413
 800c3e0:	0800eb21 	.word	0x0800eb21
 800c3e4:	0800eb38 	.word	0x0800eb38
 800c3e8:	7ff00000 	.word	0x7ff00000
 800c3ec:	0800eb1d 	.word	0x0800eb1d
 800c3f0:	0800eb14 	.word	0x0800eb14
 800c3f4:	0800eae9 	.word	0x0800eae9
 800c3f8:	3ff80000 	.word	0x3ff80000
 800c3fc:	0800ec88 	.word	0x0800ec88
 800c400:	0800eb90 	.word	0x0800eb90
 800c404:	2301      	movs	r3, #1
 800c406:	9309      	str	r3, [sp, #36]	; 0x24
 800c408:	e7d7      	b.n	800c3ba <_dtoa_r+0x2c2>
 800c40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	9304      	str	r3, [sp, #16]
 800c410:	e7ba      	b.n	800c388 <_dtoa_r+0x290>
 800c412:	3101      	adds	r1, #1
 800c414:	0052      	lsls	r2, r2, #1
 800c416:	e7ba      	b.n	800c38e <_dtoa_r+0x296>
 800c418:	69e3      	ldr	r3, [r4, #28]
 800c41a:	9a00      	ldr	r2, [sp, #0]
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	2b0e      	cmp	r3, #14
 800c422:	f200 80a8 	bhi.w	800c576 <_dtoa_r+0x47e>
 800c426:	2d00      	cmp	r5, #0
 800c428:	f000 80a5 	beq.w	800c576 <_dtoa_r+0x47e>
 800c42c:	f1bb 0f00 	cmp.w	fp, #0
 800c430:	dd38      	ble.n	800c4a4 <_dtoa_r+0x3ac>
 800c432:	4bc0      	ldr	r3, [pc, #768]	; (800c734 <_dtoa_r+0x63c>)
 800c434:	f00b 020f 	and.w	r2, fp, #15
 800c438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c43c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c440:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c444:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c448:	d019      	beq.n	800c47e <_dtoa_r+0x386>
 800c44a:	4bbb      	ldr	r3, [pc, #748]	; (800c738 <_dtoa_r+0x640>)
 800c44c:	ec51 0b18 	vmov	r0, r1, d8
 800c450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c454:	f7f4 f9fa 	bl	800084c <__aeabi_ddiv>
 800c458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c45c:	f008 080f 	and.w	r8, r8, #15
 800c460:	2503      	movs	r5, #3
 800c462:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c738 <_dtoa_r+0x640>
 800c466:	f1b8 0f00 	cmp.w	r8, #0
 800c46a:	d10a      	bne.n	800c482 <_dtoa_r+0x38a>
 800c46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c470:	4632      	mov	r2, r6
 800c472:	463b      	mov	r3, r7
 800c474:	f7f4 f9ea 	bl	800084c <__aeabi_ddiv>
 800c478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c47c:	e02b      	b.n	800c4d6 <_dtoa_r+0x3de>
 800c47e:	2502      	movs	r5, #2
 800c480:	e7ef      	b.n	800c462 <_dtoa_r+0x36a>
 800c482:	f018 0f01 	tst.w	r8, #1
 800c486:	d008      	beq.n	800c49a <_dtoa_r+0x3a2>
 800c488:	4630      	mov	r0, r6
 800c48a:	4639      	mov	r1, r7
 800c48c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c490:	f7f4 f8b2 	bl	80005f8 <__aeabi_dmul>
 800c494:	3501      	adds	r5, #1
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c49e:	f109 0908 	add.w	r9, r9, #8
 800c4a2:	e7e0      	b.n	800c466 <_dtoa_r+0x36e>
 800c4a4:	f000 809f 	beq.w	800c5e6 <_dtoa_r+0x4ee>
 800c4a8:	f1cb 0600 	rsb	r6, fp, #0
 800c4ac:	4ba1      	ldr	r3, [pc, #644]	; (800c734 <_dtoa_r+0x63c>)
 800c4ae:	4fa2      	ldr	r7, [pc, #648]	; (800c738 <_dtoa_r+0x640>)
 800c4b0:	f006 020f 	and.w	r2, r6, #15
 800c4b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	ec51 0b18 	vmov	r0, r1, d8
 800c4c0:	f7f4 f89a 	bl	80005f8 <__aeabi_dmul>
 800c4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4c8:	1136      	asrs	r6, r6, #4
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2502      	movs	r5, #2
 800c4ce:	2e00      	cmp	r6, #0
 800c4d0:	d17e      	bne.n	800c5d0 <_dtoa_r+0x4d8>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1d0      	bne.n	800c478 <_dtoa_r+0x380>
 800c4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 8084 	beq.w	800c5ea <_dtoa_r+0x4f2>
 800c4e2:	4b96      	ldr	r3, [pc, #600]	; (800c73c <_dtoa_r+0x644>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	f7f4 faf7 	bl	8000adc <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d07b      	beq.n	800c5ea <_dtoa_r+0x4f2>
 800c4f2:	9b04      	ldr	r3, [sp, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d078      	beq.n	800c5ea <_dtoa_r+0x4f2>
 800c4f8:	9b01      	ldr	r3, [sp, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	dd39      	ble.n	800c572 <_dtoa_r+0x47a>
 800c4fe:	4b90      	ldr	r3, [pc, #576]	; (800c740 <_dtoa_r+0x648>)
 800c500:	2200      	movs	r2, #0
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f4 f877 	bl	80005f8 <__aeabi_dmul>
 800c50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c50e:	9e01      	ldr	r6, [sp, #4]
 800c510:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c514:	3501      	adds	r5, #1
 800c516:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c51a:	4628      	mov	r0, r5
 800c51c:	f7f4 f802 	bl	8000524 <__aeabi_i2d>
 800c520:	4642      	mov	r2, r8
 800c522:	464b      	mov	r3, r9
 800c524:	f7f4 f868 	bl	80005f8 <__aeabi_dmul>
 800c528:	4b86      	ldr	r3, [pc, #536]	; (800c744 <_dtoa_r+0x64c>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	f7f3 feae 	bl	800028c <__adddf3>
 800c530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	d158      	bne.n	800c5f0 <_dtoa_r+0x4f8>
 800c53e:	4b82      	ldr	r3, [pc, #520]	; (800c748 <_dtoa_r+0x650>)
 800c540:	2200      	movs	r2, #0
 800c542:	4640      	mov	r0, r8
 800c544:	4649      	mov	r1, r9
 800c546:	f7f3 fe9f 	bl	8000288 <__aeabi_dsub>
 800c54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c54e:	4680      	mov	r8, r0
 800c550:	4689      	mov	r9, r1
 800c552:	f7f4 fae1 	bl	8000b18 <__aeabi_dcmpgt>
 800c556:	2800      	cmp	r0, #0
 800c558:	f040 8296 	bne.w	800ca88 <_dtoa_r+0x990>
 800c55c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c560:	4640      	mov	r0, r8
 800c562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c566:	4649      	mov	r1, r9
 800c568:	f7f4 fab8 	bl	8000adc <__aeabi_dcmplt>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f040 8289 	bne.w	800ca84 <_dtoa_r+0x98c>
 800c572:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f2c0 814e 	blt.w	800c81a <_dtoa_r+0x722>
 800c57e:	f1bb 0f0e 	cmp.w	fp, #14
 800c582:	f300 814a 	bgt.w	800c81a <_dtoa_r+0x722>
 800c586:	4b6b      	ldr	r3, [pc, #428]	; (800c734 <_dtoa_r+0x63c>)
 800c588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c58c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c592:	2b00      	cmp	r3, #0
 800c594:	f280 80dc 	bge.w	800c750 <_dtoa_r+0x658>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f300 80d8 	bgt.w	800c750 <_dtoa_r+0x658>
 800c5a0:	f040 826f 	bne.w	800ca82 <_dtoa_r+0x98a>
 800c5a4:	4b68      	ldr	r3, [pc, #416]	; (800c748 <_dtoa_r+0x650>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	4649      	mov	r1, r9
 800c5ac:	f7f4 f824 	bl	80005f8 <__aeabi_dmul>
 800c5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5b4:	f7f4 faa6 	bl	8000b04 <__aeabi_dcmpge>
 800c5b8:	9e04      	ldr	r6, [sp, #16]
 800c5ba:	4637      	mov	r7, r6
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	f040 8245 	bne.w	800ca4c <_dtoa_r+0x954>
 800c5c2:	9d00      	ldr	r5, [sp, #0]
 800c5c4:	2331      	movs	r3, #49	; 0x31
 800c5c6:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ca:	f10b 0b01 	add.w	fp, fp, #1
 800c5ce:	e241      	b.n	800ca54 <_dtoa_r+0x95c>
 800c5d0:	07f2      	lsls	r2, r6, #31
 800c5d2:	d505      	bpl.n	800c5e0 <_dtoa_r+0x4e8>
 800c5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5d8:	f7f4 f80e 	bl	80005f8 <__aeabi_dmul>
 800c5dc:	3501      	adds	r5, #1
 800c5de:	2301      	movs	r3, #1
 800c5e0:	1076      	asrs	r6, r6, #1
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	e773      	b.n	800c4ce <_dtoa_r+0x3d6>
 800c5e6:	2502      	movs	r5, #2
 800c5e8:	e775      	b.n	800c4d6 <_dtoa_r+0x3de>
 800c5ea:	9e04      	ldr	r6, [sp, #16]
 800c5ec:	465f      	mov	r7, fp
 800c5ee:	e792      	b.n	800c516 <_dtoa_r+0x41e>
 800c5f0:	9900      	ldr	r1, [sp, #0]
 800c5f2:	4b50      	ldr	r3, [pc, #320]	; (800c734 <_dtoa_r+0x63c>)
 800c5f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5f8:	4431      	add	r1, r6
 800c5fa:	9102      	str	r1, [sp, #8]
 800c5fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5fe:	eeb0 9a47 	vmov.f32	s18, s14
 800c602:	eef0 9a67 	vmov.f32	s19, s15
 800c606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c60e:	2900      	cmp	r1, #0
 800c610:	d044      	beq.n	800c69c <_dtoa_r+0x5a4>
 800c612:	494e      	ldr	r1, [pc, #312]	; (800c74c <_dtoa_r+0x654>)
 800c614:	2000      	movs	r0, #0
 800c616:	f7f4 f919 	bl	800084c <__aeabi_ddiv>
 800c61a:	ec53 2b19 	vmov	r2, r3, d9
 800c61e:	f7f3 fe33 	bl	8000288 <__aeabi_dsub>
 800c622:	9d00      	ldr	r5, [sp, #0]
 800c624:	ec41 0b19 	vmov	d9, r0, r1
 800c628:	4649      	mov	r1, r9
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7f4 fa94 	bl	8000b58 <__aeabi_d2iz>
 800c630:	4606      	mov	r6, r0
 800c632:	f7f3 ff77 	bl	8000524 <__aeabi_i2d>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	f7f3 fe23 	bl	8000288 <__aeabi_dsub>
 800c642:	3630      	adds	r6, #48	; 0x30
 800c644:	f805 6b01 	strb.w	r6, [r5], #1
 800c648:	ec53 2b19 	vmov	r2, r3, d9
 800c64c:	4680      	mov	r8, r0
 800c64e:	4689      	mov	r9, r1
 800c650:	f7f4 fa44 	bl	8000adc <__aeabi_dcmplt>
 800c654:	2800      	cmp	r0, #0
 800c656:	d164      	bne.n	800c722 <_dtoa_r+0x62a>
 800c658:	4642      	mov	r2, r8
 800c65a:	464b      	mov	r3, r9
 800c65c:	4937      	ldr	r1, [pc, #220]	; (800c73c <_dtoa_r+0x644>)
 800c65e:	2000      	movs	r0, #0
 800c660:	f7f3 fe12 	bl	8000288 <__aeabi_dsub>
 800c664:	ec53 2b19 	vmov	r2, r3, d9
 800c668:	f7f4 fa38 	bl	8000adc <__aeabi_dcmplt>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	f040 80b6 	bne.w	800c7de <_dtoa_r+0x6e6>
 800c672:	9b02      	ldr	r3, [sp, #8]
 800c674:	429d      	cmp	r5, r3
 800c676:	f43f af7c 	beq.w	800c572 <_dtoa_r+0x47a>
 800c67a:	4b31      	ldr	r3, [pc, #196]	; (800c740 <_dtoa_r+0x648>)
 800c67c:	ec51 0b19 	vmov	r0, r1, d9
 800c680:	2200      	movs	r2, #0
 800c682:	f7f3 ffb9 	bl	80005f8 <__aeabi_dmul>
 800c686:	4b2e      	ldr	r3, [pc, #184]	; (800c740 <_dtoa_r+0x648>)
 800c688:	ec41 0b19 	vmov	d9, r0, r1
 800c68c:	2200      	movs	r2, #0
 800c68e:	4640      	mov	r0, r8
 800c690:	4649      	mov	r1, r9
 800c692:	f7f3 ffb1 	bl	80005f8 <__aeabi_dmul>
 800c696:	4680      	mov	r8, r0
 800c698:	4689      	mov	r9, r1
 800c69a:	e7c5      	b.n	800c628 <_dtoa_r+0x530>
 800c69c:	ec51 0b17 	vmov	r0, r1, d7
 800c6a0:	f7f3 ffaa 	bl	80005f8 <__aeabi_dmul>
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	9d00      	ldr	r5, [sp, #0]
 800c6a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6aa:	ec41 0b19 	vmov	d9, r0, r1
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	f7f4 fa51 	bl	8000b58 <__aeabi_d2iz>
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	f7f3 ff34 	bl	8000524 <__aeabi_i2d>
 800c6bc:	3630      	adds	r6, #48	; 0x30
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	f7f3 fddf 	bl	8000288 <__aeabi_dsub>
 800c6ca:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ce:	9b02      	ldr	r3, [sp, #8]
 800c6d0:	429d      	cmp	r5, r3
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	4689      	mov	r9, r1
 800c6d6:	f04f 0200 	mov.w	r2, #0
 800c6da:	d124      	bne.n	800c726 <_dtoa_r+0x62e>
 800c6dc:	4b1b      	ldr	r3, [pc, #108]	; (800c74c <_dtoa_r+0x654>)
 800c6de:	ec51 0b19 	vmov	r0, r1, d9
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	f7f4 fa13 	bl	8000b18 <__aeabi_dcmpgt>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d173      	bne.n	800c7de <_dtoa_r+0x6e6>
 800c6f6:	ec53 2b19 	vmov	r2, r3, d9
 800c6fa:	4914      	ldr	r1, [pc, #80]	; (800c74c <_dtoa_r+0x654>)
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7f3 fdc3 	bl	8000288 <__aeabi_dsub>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	f7f4 f9e7 	bl	8000adc <__aeabi_dcmplt>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f43f af2f 	beq.w	800c572 <_dtoa_r+0x47a>
 800c714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c716:	1e6b      	subs	r3, r5, #1
 800c718:	930f      	str	r3, [sp, #60]	; 0x3c
 800c71a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c71e:	2b30      	cmp	r3, #48	; 0x30
 800c720:	d0f8      	beq.n	800c714 <_dtoa_r+0x61c>
 800c722:	46bb      	mov	fp, r7
 800c724:	e04a      	b.n	800c7bc <_dtoa_r+0x6c4>
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <_dtoa_r+0x648>)
 800c728:	f7f3 ff66 	bl	80005f8 <__aeabi_dmul>
 800c72c:	4680      	mov	r8, r0
 800c72e:	4689      	mov	r9, r1
 800c730:	e7bd      	b.n	800c6ae <_dtoa_r+0x5b6>
 800c732:	bf00      	nop
 800c734:	0800ec88 	.word	0x0800ec88
 800c738:	0800ec60 	.word	0x0800ec60
 800c73c:	3ff00000 	.word	0x3ff00000
 800c740:	40240000 	.word	0x40240000
 800c744:	401c0000 	.word	0x401c0000
 800c748:	40140000 	.word	0x40140000
 800c74c:	3fe00000 	.word	0x3fe00000
 800c750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c754:	9d00      	ldr	r5, [sp, #0]
 800c756:	4642      	mov	r2, r8
 800c758:	464b      	mov	r3, r9
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f4 f875 	bl	800084c <__aeabi_ddiv>
 800c762:	f7f4 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800c766:	9001      	str	r0, [sp, #4]
 800c768:	f7f3 fedc 	bl	8000524 <__aeabi_i2d>
 800c76c:	4642      	mov	r2, r8
 800c76e:	464b      	mov	r3, r9
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f3 fd84 	bl	8000288 <__aeabi_dsub>
 800c780:	9e01      	ldr	r6, [sp, #4]
 800c782:	9f04      	ldr	r7, [sp, #16]
 800c784:	3630      	adds	r6, #48	; 0x30
 800c786:	f805 6b01 	strb.w	r6, [r5], #1
 800c78a:	9e00      	ldr	r6, [sp, #0]
 800c78c:	1bae      	subs	r6, r5, r6
 800c78e:	42b7      	cmp	r7, r6
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	d134      	bne.n	800c800 <_dtoa_r+0x708>
 800c796:	f7f3 fd79 	bl	800028c <__adddf3>
 800c79a:	4642      	mov	r2, r8
 800c79c:	464b      	mov	r3, r9
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	f7f4 f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 800c7a6:	b9c8      	cbnz	r0, 800c7dc <_dtoa_r+0x6e4>
 800c7a8:	4642      	mov	r2, r8
 800c7aa:	464b      	mov	r3, r9
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	4639      	mov	r1, r7
 800c7b0:	f7f4 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b4:	b110      	cbz	r0, 800c7bc <_dtoa_r+0x6c4>
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	07db      	lsls	r3, r3, #31
 800c7ba:	d40f      	bmi.n	800c7dc <_dtoa_r+0x6e4>
 800c7bc:	4651      	mov	r1, sl
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 ff36 	bl	800d630 <_Bfree>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7c8:	702b      	strb	r3, [r5, #0]
 800c7ca:	f10b 0301 	add.w	r3, fp, #1
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f43f ace2 	beq.w	800c19c <_dtoa_r+0xa4>
 800c7d8:	601d      	str	r5, [r3, #0]
 800c7da:	e4df      	b.n	800c19c <_dtoa_r+0xa4>
 800c7dc:	465f      	mov	r7, fp
 800c7de:	462b      	mov	r3, r5
 800c7e0:	461d      	mov	r5, r3
 800c7e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7e6:	2a39      	cmp	r2, #57	; 0x39
 800c7e8:	d106      	bne.n	800c7f8 <_dtoa_r+0x700>
 800c7ea:	9a00      	ldr	r2, [sp, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d1f7      	bne.n	800c7e0 <_dtoa_r+0x6e8>
 800c7f0:	9900      	ldr	r1, [sp, #0]
 800c7f2:	2230      	movs	r2, #48	; 0x30
 800c7f4:	3701      	adds	r7, #1
 800c7f6:	700a      	strb	r2, [r1, #0]
 800c7f8:	781a      	ldrb	r2, [r3, #0]
 800c7fa:	3201      	adds	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e790      	b.n	800c722 <_dtoa_r+0x62a>
 800c800:	4ba3      	ldr	r3, [pc, #652]	; (800ca90 <_dtoa_r+0x998>)
 800c802:	2200      	movs	r2, #0
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	2200      	movs	r2, #0
 800c80a:	2300      	movs	r3, #0
 800c80c:	4606      	mov	r6, r0
 800c80e:	460f      	mov	r7, r1
 800c810:	f7f4 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c814:	2800      	cmp	r0, #0
 800c816:	d09e      	beq.n	800c756 <_dtoa_r+0x65e>
 800c818:	e7d0      	b.n	800c7bc <_dtoa_r+0x6c4>
 800c81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	f000 80ca 	beq.w	800c9b6 <_dtoa_r+0x8be>
 800c822:	9a07      	ldr	r2, [sp, #28]
 800c824:	2a01      	cmp	r2, #1
 800c826:	f300 80ad 	bgt.w	800c984 <_dtoa_r+0x88c>
 800c82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	f000 80a5 	beq.w	800c97c <_dtoa_r+0x884>
 800c832:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c836:	9e08      	ldr	r6, [sp, #32]
 800c838:	9d05      	ldr	r5, [sp, #20]
 800c83a:	9a05      	ldr	r2, [sp, #20]
 800c83c:	441a      	add	r2, r3
 800c83e:	9205      	str	r2, [sp, #20]
 800c840:	9a06      	ldr	r2, [sp, #24]
 800c842:	2101      	movs	r1, #1
 800c844:	441a      	add	r2, r3
 800c846:	4620      	mov	r0, r4
 800c848:	9206      	str	r2, [sp, #24]
 800c84a:	f000 fff1 	bl	800d830 <__i2b>
 800c84e:	4607      	mov	r7, r0
 800c850:	b165      	cbz	r5, 800c86c <_dtoa_r+0x774>
 800c852:	9b06      	ldr	r3, [sp, #24]
 800c854:	2b00      	cmp	r3, #0
 800c856:	dd09      	ble.n	800c86c <_dtoa_r+0x774>
 800c858:	42ab      	cmp	r3, r5
 800c85a:	9a05      	ldr	r2, [sp, #20]
 800c85c:	bfa8      	it	ge
 800c85e:	462b      	movge	r3, r5
 800c860:	1ad2      	subs	r2, r2, r3
 800c862:	9205      	str	r2, [sp, #20]
 800c864:	9a06      	ldr	r2, [sp, #24]
 800c866:	1aed      	subs	r5, r5, r3
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	9306      	str	r3, [sp, #24]
 800c86c:	9b08      	ldr	r3, [sp, #32]
 800c86e:	b1f3      	cbz	r3, 800c8ae <_dtoa_r+0x7b6>
 800c870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 80a3 	beq.w	800c9be <_dtoa_r+0x8c6>
 800c878:	2e00      	cmp	r6, #0
 800c87a:	dd10      	ble.n	800c89e <_dtoa_r+0x7a6>
 800c87c:	4639      	mov	r1, r7
 800c87e:	4632      	mov	r2, r6
 800c880:	4620      	mov	r0, r4
 800c882:	f001 f895 	bl	800d9b0 <__pow5mult>
 800c886:	4652      	mov	r2, sl
 800c888:	4601      	mov	r1, r0
 800c88a:	4607      	mov	r7, r0
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 ffe5 	bl	800d85c <__multiply>
 800c892:	4651      	mov	r1, sl
 800c894:	4680      	mov	r8, r0
 800c896:	4620      	mov	r0, r4
 800c898:	f000 feca 	bl	800d630 <_Bfree>
 800c89c:	46c2      	mov	sl, r8
 800c89e:	9b08      	ldr	r3, [sp, #32]
 800c8a0:	1b9a      	subs	r2, r3, r6
 800c8a2:	d004      	beq.n	800c8ae <_dtoa_r+0x7b6>
 800c8a4:	4651      	mov	r1, sl
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f001 f882 	bl	800d9b0 <__pow5mult>
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 ffbd 	bl	800d830 <__i2b>
 800c8b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	f340 8081 	ble.w	800c9c2 <_dtoa_r+0x8ca>
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f001 f873 	bl	800d9b0 <__pow5mult>
 800c8ca:	9b07      	ldr	r3, [sp, #28]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	dd7a      	ble.n	800c9c8 <_dtoa_r+0x8d0>
 800c8d2:	f04f 0800 	mov.w	r8, #0
 800c8d6:	6933      	ldr	r3, [r6, #16]
 800c8d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8dc:	6918      	ldr	r0, [r3, #16]
 800c8de:	f000 ff59 	bl	800d794 <__hi0bits>
 800c8e2:	f1c0 0020 	rsb	r0, r0, #32
 800c8e6:	9b06      	ldr	r3, [sp, #24]
 800c8e8:	4418      	add	r0, r3
 800c8ea:	f010 001f 	ands.w	r0, r0, #31
 800c8ee:	f000 8094 	beq.w	800ca1a <_dtoa_r+0x922>
 800c8f2:	f1c0 0320 	rsb	r3, r0, #32
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	f340 8085 	ble.w	800ca06 <_dtoa_r+0x90e>
 800c8fc:	9b05      	ldr	r3, [sp, #20]
 800c8fe:	f1c0 001c 	rsb	r0, r0, #28
 800c902:	4403      	add	r3, r0
 800c904:	9305      	str	r3, [sp, #20]
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	4403      	add	r3, r0
 800c90a:	4405      	add	r5, r0
 800c90c:	9306      	str	r3, [sp, #24]
 800c90e:	9b05      	ldr	r3, [sp, #20]
 800c910:	2b00      	cmp	r3, #0
 800c912:	dd05      	ble.n	800c920 <_dtoa_r+0x828>
 800c914:	4651      	mov	r1, sl
 800c916:	461a      	mov	r2, r3
 800c918:	4620      	mov	r0, r4
 800c91a:	f001 f8a3 	bl	800da64 <__lshift>
 800c91e:	4682      	mov	sl, r0
 800c920:	9b06      	ldr	r3, [sp, #24]
 800c922:	2b00      	cmp	r3, #0
 800c924:	dd05      	ble.n	800c932 <_dtoa_r+0x83a>
 800c926:	4631      	mov	r1, r6
 800c928:	461a      	mov	r2, r3
 800c92a:	4620      	mov	r0, r4
 800c92c:	f001 f89a 	bl	800da64 <__lshift>
 800c930:	4606      	mov	r6, r0
 800c932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c934:	2b00      	cmp	r3, #0
 800c936:	d072      	beq.n	800ca1e <_dtoa_r+0x926>
 800c938:	4631      	mov	r1, r6
 800c93a:	4650      	mov	r0, sl
 800c93c:	f001 f8fe 	bl	800db3c <__mcmp>
 800c940:	2800      	cmp	r0, #0
 800c942:	da6c      	bge.n	800ca1e <_dtoa_r+0x926>
 800c944:	2300      	movs	r3, #0
 800c946:	4651      	mov	r1, sl
 800c948:	220a      	movs	r2, #10
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fe92 	bl	800d674 <__multadd>
 800c950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c952:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c956:	4682      	mov	sl, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 81b0 	beq.w	800ccbe <_dtoa_r+0xbc6>
 800c95e:	2300      	movs	r3, #0
 800c960:	4639      	mov	r1, r7
 800c962:	220a      	movs	r2, #10
 800c964:	4620      	mov	r0, r4
 800c966:	f000 fe85 	bl	800d674 <__multadd>
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	4607      	mov	r7, r0
 800c970:	f300 8096 	bgt.w	800caa0 <_dtoa_r+0x9a8>
 800c974:	9b07      	ldr	r3, [sp, #28]
 800c976:	2b02      	cmp	r3, #2
 800c978:	dc59      	bgt.n	800ca2e <_dtoa_r+0x936>
 800c97a:	e091      	b.n	800caa0 <_dtoa_r+0x9a8>
 800c97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c97e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c982:	e758      	b.n	800c836 <_dtoa_r+0x73e>
 800c984:	9b04      	ldr	r3, [sp, #16]
 800c986:	1e5e      	subs	r6, r3, #1
 800c988:	9b08      	ldr	r3, [sp, #32]
 800c98a:	42b3      	cmp	r3, r6
 800c98c:	bfbf      	itttt	lt
 800c98e:	9b08      	ldrlt	r3, [sp, #32]
 800c990:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c992:	9608      	strlt	r6, [sp, #32]
 800c994:	1af3      	sublt	r3, r6, r3
 800c996:	bfb4      	ite	lt
 800c998:	18d2      	addlt	r2, r2, r3
 800c99a:	1b9e      	subge	r6, r3, r6
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	bfbc      	itt	lt
 800c9a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c9a2:	2600      	movlt	r6, #0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bfb7      	itett	lt
 800c9a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c9ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c9b0:	1a9d      	sublt	r5, r3, r2
 800c9b2:	2300      	movlt	r3, #0
 800c9b4:	e741      	b.n	800c83a <_dtoa_r+0x742>
 800c9b6:	9e08      	ldr	r6, [sp, #32]
 800c9b8:	9d05      	ldr	r5, [sp, #20]
 800c9ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9bc:	e748      	b.n	800c850 <_dtoa_r+0x758>
 800c9be:	9a08      	ldr	r2, [sp, #32]
 800c9c0:	e770      	b.n	800c8a4 <_dtoa_r+0x7ac>
 800c9c2:	9b07      	ldr	r3, [sp, #28]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	dc19      	bgt.n	800c9fc <_dtoa_r+0x904>
 800c9c8:	9b02      	ldr	r3, [sp, #8]
 800c9ca:	b9bb      	cbnz	r3, 800c9fc <_dtoa_r+0x904>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9d2:	b99b      	cbnz	r3, 800c9fc <_dtoa_r+0x904>
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9da:	0d1b      	lsrs	r3, r3, #20
 800c9dc:	051b      	lsls	r3, r3, #20
 800c9de:	b183      	cbz	r3, 800ca02 <_dtoa_r+0x90a>
 800c9e0:	9b05      	ldr	r3, [sp, #20]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	9305      	str	r3, [sp, #20]
 800c9e6:	9b06      	ldr	r3, [sp, #24]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	9306      	str	r3, [sp, #24]
 800c9ec:	f04f 0801 	mov.w	r8, #1
 800c9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f47f af6f 	bne.w	800c8d6 <_dtoa_r+0x7de>
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	e774      	b.n	800c8e6 <_dtoa_r+0x7ee>
 800c9fc:	f04f 0800 	mov.w	r8, #0
 800ca00:	e7f6      	b.n	800c9f0 <_dtoa_r+0x8f8>
 800ca02:	4698      	mov	r8, r3
 800ca04:	e7f4      	b.n	800c9f0 <_dtoa_r+0x8f8>
 800ca06:	d082      	beq.n	800c90e <_dtoa_r+0x816>
 800ca08:	9a05      	ldr	r2, [sp, #20]
 800ca0a:	331c      	adds	r3, #28
 800ca0c:	441a      	add	r2, r3
 800ca0e:	9205      	str	r2, [sp, #20]
 800ca10:	9a06      	ldr	r2, [sp, #24]
 800ca12:	441a      	add	r2, r3
 800ca14:	441d      	add	r5, r3
 800ca16:	9206      	str	r2, [sp, #24]
 800ca18:	e779      	b.n	800c90e <_dtoa_r+0x816>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	e7f4      	b.n	800ca08 <_dtoa_r+0x910>
 800ca1e:	9b04      	ldr	r3, [sp, #16]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	dc37      	bgt.n	800ca94 <_dtoa_r+0x99c>
 800ca24:	9b07      	ldr	r3, [sp, #28]
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	dd34      	ble.n	800ca94 <_dtoa_r+0x99c>
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	9b01      	ldr	r3, [sp, #4]
 800ca30:	b963      	cbnz	r3, 800ca4c <_dtoa_r+0x954>
 800ca32:	4631      	mov	r1, r6
 800ca34:	2205      	movs	r2, #5
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 fe1c 	bl	800d674 <__multadd>
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	4606      	mov	r6, r0
 800ca40:	4650      	mov	r0, sl
 800ca42:	f001 f87b 	bl	800db3c <__mcmp>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f73f adbb 	bgt.w	800c5c2 <_dtoa_r+0x4ca>
 800ca4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4e:	9d00      	ldr	r5, [sp, #0]
 800ca50:	ea6f 0b03 	mvn.w	fp, r3
 800ca54:	f04f 0800 	mov.w	r8, #0
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fde8 	bl	800d630 <_Bfree>
 800ca60:	2f00      	cmp	r7, #0
 800ca62:	f43f aeab 	beq.w	800c7bc <_dtoa_r+0x6c4>
 800ca66:	f1b8 0f00 	cmp.w	r8, #0
 800ca6a:	d005      	beq.n	800ca78 <_dtoa_r+0x980>
 800ca6c:	45b8      	cmp	r8, r7
 800ca6e:	d003      	beq.n	800ca78 <_dtoa_r+0x980>
 800ca70:	4641      	mov	r1, r8
 800ca72:	4620      	mov	r0, r4
 800ca74:	f000 fddc 	bl	800d630 <_Bfree>
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 fdd8 	bl	800d630 <_Bfree>
 800ca80:	e69c      	b.n	800c7bc <_dtoa_r+0x6c4>
 800ca82:	2600      	movs	r6, #0
 800ca84:	4637      	mov	r7, r6
 800ca86:	e7e1      	b.n	800ca4c <_dtoa_r+0x954>
 800ca88:	46bb      	mov	fp, r7
 800ca8a:	4637      	mov	r7, r6
 800ca8c:	e599      	b.n	800c5c2 <_dtoa_r+0x4ca>
 800ca8e:	bf00      	nop
 800ca90:	40240000 	.word	0x40240000
 800ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 80c8 	beq.w	800cc2c <_dtoa_r+0xb34>
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	dd05      	ble.n	800cab0 <_dtoa_r+0x9b8>
 800caa4:	4639      	mov	r1, r7
 800caa6:	462a      	mov	r2, r5
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 ffdb 	bl	800da64 <__lshift>
 800caae:	4607      	mov	r7, r0
 800cab0:	f1b8 0f00 	cmp.w	r8, #0
 800cab4:	d05b      	beq.n	800cb6e <_dtoa_r+0xa76>
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fd79 	bl	800d5b0 <_Balloc>
 800cabe:	4605      	mov	r5, r0
 800cac0:	b928      	cbnz	r0, 800cace <_dtoa_r+0x9d6>
 800cac2:	4b83      	ldr	r3, [pc, #524]	; (800ccd0 <_dtoa_r+0xbd8>)
 800cac4:	4602      	mov	r2, r0
 800cac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800caca:	f7ff bb2e 	b.w	800c12a <_dtoa_r+0x32>
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	3202      	adds	r2, #2
 800cad2:	0092      	lsls	r2, r2, #2
 800cad4:	f107 010c 	add.w	r1, r7, #12
 800cad8:	300c      	adds	r0, #12
 800cada:	f7ff fa6d 	bl	800bfb8 <memcpy>
 800cade:	2201      	movs	r2, #1
 800cae0:	4629      	mov	r1, r5
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 ffbe 	bl	800da64 <__lshift>
 800cae8:	9b00      	ldr	r3, [sp, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	9304      	str	r3, [sp, #16]
 800caee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caf2:	4413      	add	r3, r2
 800caf4:	9308      	str	r3, [sp, #32]
 800caf6:	9b02      	ldr	r3, [sp, #8]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	46b8      	mov	r8, r7
 800cafe:	9306      	str	r3, [sp, #24]
 800cb00:	4607      	mov	r7, r0
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	4631      	mov	r1, r6
 800cb06:	3b01      	subs	r3, #1
 800cb08:	4650      	mov	r0, sl
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	f7ff fa6c 	bl	800bfe8 <quorem>
 800cb10:	4641      	mov	r1, r8
 800cb12:	9002      	str	r0, [sp, #8]
 800cb14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb18:	4650      	mov	r0, sl
 800cb1a:	f001 f80f 	bl	800db3c <__mcmp>
 800cb1e:	463a      	mov	r2, r7
 800cb20:	9005      	str	r0, [sp, #20]
 800cb22:	4631      	mov	r1, r6
 800cb24:	4620      	mov	r0, r4
 800cb26:	f001 f825 	bl	800db74 <__mdiff>
 800cb2a:	68c2      	ldr	r2, [r0, #12]
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	bb02      	cbnz	r2, 800cb72 <_dtoa_r+0xa7a>
 800cb30:	4601      	mov	r1, r0
 800cb32:	4650      	mov	r0, sl
 800cb34:	f001 f802 	bl	800db3c <__mcmp>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb40:	f000 fd76 	bl	800d630 <_Bfree>
 800cb44:	9b07      	ldr	r3, [sp, #28]
 800cb46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb48:	9d04      	ldr	r5, [sp, #16]
 800cb4a:	ea43 0102 	orr.w	r1, r3, r2
 800cb4e:	9b06      	ldr	r3, [sp, #24]
 800cb50:	4319      	orrs	r1, r3
 800cb52:	d110      	bne.n	800cb76 <_dtoa_r+0xa7e>
 800cb54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb58:	d029      	beq.n	800cbae <_dtoa_r+0xab6>
 800cb5a:	9b05      	ldr	r3, [sp, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dd02      	ble.n	800cb66 <_dtoa_r+0xa6e>
 800cb60:	9b02      	ldr	r3, [sp, #8]
 800cb62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	f883 9000 	strb.w	r9, [r3]
 800cb6c:	e774      	b.n	800ca58 <_dtoa_r+0x960>
 800cb6e:	4638      	mov	r0, r7
 800cb70:	e7ba      	b.n	800cae8 <_dtoa_r+0x9f0>
 800cb72:	2201      	movs	r2, #1
 800cb74:	e7e1      	b.n	800cb3a <_dtoa_r+0xa42>
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	db04      	blt.n	800cb86 <_dtoa_r+0xa8e>
 800cb7c:	9907      	ldr	r1, [sp, #28]
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	9906      	ldr	r1, [sp, #24]
 800cb82:	430b      	orrs	r3, r1
 800cb84:	d120      	bne.n	800cbc8 <_dtoa_r+0xad0>
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	dded      	ble.n	800cb66 <_dtoa_r+0xa6e>
 800cb8a:	4651      	mov	r1, sl
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 ff68 	bl	800da64 <__lshift>
 800cb94:	4631      	mov	r1, r6
 800cb96:	4682      	mov	sl, r0
 800cb98:	f000 ffd0 	bl	800db3c <__mcmp>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	dc03      	bgt.n	800cba8 <_dtoa_r+0xab0>
 800cba0:	d1e1      	bne.n	800cb66 <_dtoa_r+0xa6e>
 800cba2:	f019 0f01 	tst.w	r9, #1
 800cba6:	d0de      	beq.n	800cb66 <_dtoa_r+0xa6e>
 800cba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbac:	d1d8      	bne.n	800cb60 <_dtoa_r+0xa68>
 800cbae:	9a01      	ldr	r2, [sp, #4]
 800cbb0:	2339      	movs	r3, #57	; 0x39
 800cbb2:	7013      	strb	r3, [r2, #0]
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	461d      	mov	r5, r3
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbbe:	2a39      	cmp	r2, #57	; 0x39
 800cbc0:	d06c      	beq.n	800cc9c <_dtoa_r+0xba4>
 800cbc2:	3201      	adds	r2, #1
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	e747      	b.n	800ca58 <_dtoa_r+0x960>
 800cbc8:	2a00      	cmp	r2, #0
 800cbca:	dd07      	ble.n	800cbdc <_dtoa_r+0xae4>
 800cbcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbd0:	d0ed      	beq.n	800cbae <_dtoa_r+0xab6>
 800cbd2:	9a01      	ldr	r2, [sp, #4]
 800cbd4:	f109 0301 	add.w	r3, r9, #1
 800cbd8:	7013      	strb	r3, [r2, #0]
 800cbda:	e73d      	b.n	800ca58 <_dtoa_r+0x960>
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	9a08      	ldr	r2, [sp, #32]
 800cbe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d043      	beq.n	800cc70 <_dtoa_r+0xb78>
 800cbe8:	4651      	mov	r1, sl
 800cbea:	2300      	movs	r3, #0
 800cbec:	220a      	movs	r2, #10
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 fd40 	bl	800d674 <__multadd>
 800cbf4:	45b8      	cmp	r8, r7
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	f04f 0300 	mov.w	r3, #0
 800cbfc:	f04f 020a 	mov.w	r2, #10
 800cc00:	4641      	mov	r1, r8
 800cc02:	4620      	mov	r0, r4
 800cc04:	d107      	bne.n	800cc16 <_dtoa_r+0xb1e>
 800cc06:	f000 fd35 	bl	800d674 <__multadd>
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	4607      	mov	r7, r0
 800cc0e:	9b04      	ldr	r3, [sp, #16]
 800cc10:	3301      	adds	r3, #1
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	e775      	b.n	800cb02 <_dtoa_r+0xa0a>
 800cc16:	f000 fd2d 	bl	800d674 <__multadd>
 800cc1a:	4639      	mov	r1, r7
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	220a      	movs	r2, #10
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 fd26 	bl	800d674 <__multadd>
 800cc28:	4607      	mov	r7, r0
 800cc2a:	e7f0      	b.n	800cc0e <_dtoa_r+0xb16>
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	9d00      	ldr	r5, [sp, #0]
 800cc32:	4631      	mov	r1, r6
 800cc34:	4650      	mov	r0, sl
 800cc36:	f7ff f9d7 	bl	800bfe8 <quorem>
 800cc3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc3e:	9b00      	ldr	r3, [sp, #0]
 800cc40:	f805 9b01 	strb.w	r9, [r5], #1
 800cc44:	1aea      	subs	r2, r5, r3
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	dd07      	ble.n	800cc5c <_dtoa_r+0xb64>
 800cc4c:	4651      	mov	r1, sl
 800cc4e:	2300      	movs	r3, #0
 800cc50:	220a      	movs	r2, #10
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 fd0e 	bl	800d674 <__multadd>
 800cc58:	4682      	mov	sl, r0
 800cc5a:	e7ea      	b.n	800cc32 <_dtoa_r+0xb3a>
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bfc8      	it	gt
 800cc62:	461d      	movgt	r5, r3
 800cc64:	9b00      	ldr	r3, [sp, #0]
 800cc66:	bfd8      	it	le
 800cc68:	2501      	movle	r5, #1
 800cc6a:	441d      	add	r5, r3
 800cc6c:	f04f 0800 	mov.w	r8, #0
 800cc70:	4651      	mov	r1, sl
 800cc72:	2201      	movs	r2, #1
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fef5 	bl	800da64 <__lshift>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4682      	mov	sl, r0
 800cc7e:	f000 ff5d 	bl	800db3c <__mcmp>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	dc96      	bgt.n	800cbb4 <_dtoa_r+0xabc>
 800cc86:	d102      	bne.n	800cc8e <_dtoa_r+0xb96>
 800cc88:	f019 0f01 	tst.w	r9, #1
 800cc8c:	d192      	bne.n	800cbb4 <_dtoa_r+0xabc>
 800cc8e:	462b      	mov	r3, r5
 800cc90:	461d      	mov	r5, r3
 800cc92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc96:	2a30      	cmp	r2, #48	; 0x30
 800cc98:	d0fa      	beq.n	800cc90 <_dtoa_r+0xb98>
 800cc9a:	e6dd      	b.n	800ca58 <_dtoa_r+0x960>
 800cc9c:	9a00      	ldr	r2, [sp, #0]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d189      	bne.n	800cbb6 <_dtoa_r+0xabe>
 800cca2:	f10b 0b01 	add.w	fp, fp, #1
 800cca6:	2331      	movs	r3, #49	; 0x31
 800cca8:	e796      	b.n	800cbd8 <_dtoa_r+0xae0>
 800ccaa:	4b0a      	ldr	r3, [pc, #40]	; (800ccd4 <_dtoa_r+0xbdc>)
 800ccac:	f7ff ba99 	b.w	800c1e2 <_dtoa_r+0xea>
 800ccb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f47f aa6d 	bne.w	800c192 <_dtoa_r+0x9a>
 800ccb8:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <_dtoa_r+0xbe0>)
 800ccba:	f7ff ba92 	b.w	800c1e2 <_dtoa_r+0xea>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dcb5      	bgt.n	800cc30 <_dtoa_r+0xb38>
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	f73f aeb1 	bgt.w	800ca2e <_dtoa_r+0x936>
 800cccc:	e7b0      	b.n	800cc30 <_dtoa_r+0xb38>
 800ccce:	bf00      	nop
 800ccd0:	0800eb90 	.word	0x0800eb90
 800ccd4:	0800eae8 	.word	0x0800eae8
 800ccd8:	0800eb14 	.word	0x0800eb14

0800ccdc <_free_r>:
 800ccdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccde:	2900      	cmp	r1, #0
 800cce0:	d044      	beq.n	800cd6c <_free_r+0x90>
 800cce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce6:	9001      	str	r0, [sp, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f1a1 0404 	sub.w	r4, r1, #4
 800ccee:	bfb8      	it	lt
 800ccf0:	18e4      	addlt	r4, r4, r3
 800ccf2:	f000 fc51 	bl	800d598 <__malloc_lock>
 800ccf6:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <_free_r+0x94>)
 800ccf8:	9801      	ldr	r0, [sp, #4]
 800ccfa:	6813      	ldr	r3, [r2, #0]
 800ccfc:	b933      	cbnz	r3, 800cd0c <_free_r+0x30>
 800ccfe:	6063      	str	r3, [r4, #4]
 800cd00:	6014      	str	r4, [r2, #0]
 800cd02:	b003      	add	sp, #12
 800cd04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd08:	f000 bc4c 	b.w	800d5a4 <__malloc_unlock>
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	d908      	bls.n	800cd22 <_free_r+0x46>
 800cd10:	6825      	ldr	r5, [r4, #0]
 800cd12:	1961      	adds	r1, r4, r5
 800cd14:	428b      	cmp	r3, r1
 800cd16:	bf01      	itttt	eq
 800cd18:	6819      	ldreq	r1, [r3, #0]
 800cd1a:	685b      	ldreq	r3, [r3, #4]
 800cd1c:	1949      	addeq	r1, r1, r5
 800cd1e:	6021      	streq	r1, [r4, #0]
 800cd20:	e7ed      	b.n	800ccfe <_free_r+0x22>
 800cd22:	461a      	mov	r2, r3
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	b10b      	cbz	r3, 800cd2c <_free_r+0x50>
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	d9fa      	bls.n	800cd22 <_free_r+0x46>
 800cd2c:	6811      	ldr	r1, [r2, #0]
 800cd2e:	1855      	adds	r5, r2, r1
 800cd30:	42a5      	cmp	r5, r4
 800cd32:	d10b      	bne.n	800cd4c <_free_r+0x70>
 800cd34:	6824      	ldr	r4, [r4, #0]
 800cd36:	4421      	add	r1, r4
 800cd38:	1854      	adds	r4, r2, r1
 800cd3a:	42a3      	cmp	r3, r4
 800cd3c:	6011      	str	r1, [r2, #0]
 800cd3e:	d1e0      	bne.n	800cd02 <_free_r+0x26>
 800cd40:	681c      	ldr	r4, [r3, #0]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	6053      	str	r3, [r2, #4]
 800cd46:	440c      	add	r4, r1
 800cd48:	6014      	str	r4, [r2, #0]
 800cd4a:	e7da      	b.n	800cd02 <_free_r+0x26>
 800cd4c:	d902      	bls.n	800cd54 <_free_r+0x78>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	6003      	str	r3, [r0, #0]
 800cd52:	e7d6      	b.n	800cd02 <_free_r+0x26>
 800cd54:	6825      	ldr	r5, [r4, #0]
 800cd56:	1961      	adds	r1, r4, r5
 800cd58:	428b      	cmp	r3, r1
 800cd5a:	bf04      	itt	eq
 800cd5c:	6819      	ldreq	r1, [r3, #0]
 800cd5e:	685b      	ldreq	r3, [r3, #4]
 800cd60:	6063      	str	r3, [r4, #4]
 800cd62:	bf04      	itt	eq
 800cd64:	1949      	addeq	r1, r1, r5
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	6054      	str	r4, [r2, #4]
 800cd6a:	e7ca      	b.n	800cd02 <_free_r+0x26>
 800cd6c:	b003      	add	sp, #12
 800cd6e:	bd30      	pop	{r4, r5, pc}
 800cd70:	20000b5c 	.word	0x20000b5c

0800cd74 <rshift>:
 800cd74:	6903      	ldr	r3, [r0, #16]
 800cd76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd82:	f100 0414 	add.w	r4, r0, #20
 800cd86:	dd45      	ble.n	800ce14 <rshift+0xa0>
 800cd88:	f011 011f 	ands.w	r1, r1, #31
 800cd8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd94:	d10c      	bne.n	800cdb0 <rshift+0x3c>
 800cd96:	f100 0710 	add.w	r7, r0, #16
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	42b1      	cmp	r1, r6
 800cd9e:	d334      	bcc.n	800ce0a <rshift+0x96>
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	1eea      	subs	r2, r5, #3
 800cda6:	4296      	cmp	r6, r2
 800cda8:	bf38      	it	cc
 800cdaa:	2300      	movcc	r3, #0
 800cdac:	4423      	add	r3, r4
 800cdae:	e015      	b.n	800cddc <rshift+0x68>
 800cdb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdb4:	f1c1 0820 	rsb	r8, r1, #32
 800cdb8:	40cf      	lsrs	r7, r1
 800cdba:	f105 0e04 	add.w	lr, r5, #4
 800cdbe:	46a1      	mov	r9, r4
 800cdc0:	4576      	cmp	r6, lr
 800cdc2:	46f4      	mov	ip, lr
 800cdc4:	d815      	bhi.n	800cdf2 <rshift+0x7e>
 800cdc6:	1a9a      	subs	r2, r3, r2
 800cdc8:	0092      	lsls	r2, r2, #2
 800cdca:	3a04      	subs	r2, #4
 800cdcc:	3501      	adds	r5, #1
 800cdce:	42ae      	cmp	r6, r5
 800cdd0:	bf38      	it	cc
 800cdd2:	2200      	movcc	r2, #0
 800cdd4:	18a3      	adds	r3, r4, r2
 800cdd6:	50a7      	str	r7, [r4, r2]
 800cdd8:	b107      	cbz	r7, 800cddc <rshift+0x68>
 800cdda:	3304      	adds	r3, #4
 800cddc:	1b1a      	subs	r2, r3, r4
 800cdde:	42a3      	cmp	r3, r4
 800cde0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cde4:	bf08      	it	eq
 800cde6:	2300      	moveq	r3, #0
 800cde8:	6102      	str	r2, [r0, #16]
 800cdea:	bf08      	it	eq
 800cdec:	6143      	streq	r3, [r0, #20]
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	f8dc c000 	ldr.w	ip, [ip]
 800cdf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdfa:	ea4c 0707 	orr.w	r7, ip, r7
 800cdfe:	f849 7b04 	str.w	r7, [r9], #4
 800ce02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce06:	40cf      	lsrs	r7, r1
 800ce08:	e7da      	b.n	800cdc0 <rshift+0x4c>
 800ce0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce12:	e7c3      	b.n	800cd9c <rshift+0x28>
 800ce14:	4623      	mov	r3, r4
 800ce16:	e7e1      	b.n	800cddc <rshift+0x68>

0800ce18 <__hexdig_fun>:
 800ce18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	d802      	bhi.n	800ce26 <__hexdig_fun+0xe>
 800ce20:	3820      	subs	r0, #32
 800ce22:	b2c0      	uxtb	r0, r0
 800ce24:	4770      	bx	lr
 800ce26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce2a:	2b05      	cmp	r3, #5
 800ce2c:	d801      	bhi.n	800ce32 <__hexdig_fun+0x1a>
 800ce2e:	3847      	subs	r0, #71	; 0x47
 800ce30:	e7f7      	b.n	800ce22 <__hexdig_fun+0xa>
 800ce32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce36:	2b05      	cmp	r3, #5
 800ce38:	d801      	bhi.n	800ce3e <__hexdig_fun+0x26>
 800ce3a:	3827      	subs	r0, #39	; 0x27
 800ce3c:	e7f1      	b.n	800ce22 <__hexdig_fun+0xa>
 800ce3e:	2000      	movs	r0, #0
 800ce40:	4770      	bx	lr
	...

0800ce44 <__gethex>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	4617      	mov	r7, r2
 800ce4a:	680a      	ldr	r2, [r1, #0]
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	f102 0b02 	add.w	fp, r2, #2
 800ce52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce5a:	4681      	mov	r9, r0
 800ce5c:	468a      	mov	sl, r1
 800ce5e:	9302      	str	r3, [sp, #8]
 800ce60:	32fe      	adds	r2, #254	; 0xfe
 800ce62:	eb02 030b 	add.w	r3, r2, fp
 800ce66:	46d8      	mov	r8, fp
 800ce68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	2830      	cmp	r0, #48	; 0x30
 800ce70:	d0f7      	beq.n	800ce62 <__gethex+0x1e>
 800ce72:	f7ff ffd1 	bl	800ce18 <__hexdig_fun>
 800ce76:	4604      	mov	r4, r0
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d138      	bne.n	800ceee <__gethex+0xaa>
 800ce7c:	49a7      	ldr	r1, [pc, #668]	; (800d11c <__gethex+0x2d8>)
 800ce7e:	2201      	movs	r2, #1
 800ce80:	4640      	mov	r0, r8
 800ce82:	f7fe fffa 	bl	800be7a <strncmp>
 800ce86:	4606      	mov	r6, r0
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d169      	bne.n	800cf60 <__gethex+0x11c>
 800ce8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ce90:	465d      	mov	r5, fp
 800ce92:	f7ff ffc1 	bl	800ce18 <__hexdig_fun>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d064      	beq.n	800cf64 <__gethex+0x120>
 800ce9a:	465a      	mov	r2, fp
 800ce9c:	7810      	ldrb	r0, [r2, #0]
 800ce9e:	2830      	cmp	r0, #48	; 0x30
 800cea0:	4690      	mov	r8, r2
 800cea2:	f102 0201 	add.w	r2, r2, #1
 800cea6:	d0f9      	beq.n	800ce9c <__gethex+0x58>
 800cea8:	f7ff ffb6 	bl	800ce18 <__hexdig_fun>
 800ceac:	2301      	movs	r3, #1
 800ceae:	fab0 f480 	clz	r4, r0
 800ceb2:	0964      	lsrs	r4, r4, #5
 800ceb4:	465e      	mov	r6, fp
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	4642      	mov	r2, r8
 800ceba:	4615      	mov	r5, r2
 800cebc:	3201      	adds	r2, #1
 800cebe:	7828      	ldrb	r0, [r5, #0]
 800cec0:	f7ff ffaa 	bl	800ce18 <__hexdig_fun>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d1f8      	bne.n	800ceba <__gethex+0x76>
 800cec8:	4994      	ldr	r1, [pc, #592]	; (800d11c <__gethex+0x2d8>)
 800ceca:	2201      	movs	r2, #1
 800cecc:	4628      	mov	r0, r5
 800cece:	f7fe ffd4 	bl	800be7a <strncmp>
 800ced2:	b978      	cbnz	r0, 800cef4 <__gethex+0xb0>
 800ced4:	b946      	cbnz	r6, 800cee8 <__gethex+0xa4>
 800ced6:	1c6e      	adds	r6, r5, #1
 800ced8:	4632      	mov	r2, r6
 800ceda:	4615      	mov	r5, r2
 800cedc:	3201      	adds	r2, #1
 800cede:	7828      	ldrb	r0, [r5, #0]
 800cee0:	f7ff ff9a 	bl	800ce18 <__hexdig_fun>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d1f8      	bne.n	800ceda <__gethex+0x96>
 800cee8:	1b73      	subs	r3, r6, r5
 800ceea:	009e      	lsls	r6, r3, #2
 800ceec:	e004      	b.n	800cef8 <__gethex+0xb4>
 800ceee:	2400      	movs	r4, #0
 800cef0:	4626      	mov	r6, r4
 800cef2:	e7e1      	b.n	800ceb8 <__gethex+0x74>
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	d1f7      	bne.n	800cee8 <__gethex+0xa4>
 800cef8:	782b      	ldrb	r3, [r5, #0]
 800cefa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cefe:	2b50      	cmp	r3, #80	; 0x50
 800cf00:	d13d      	bne.n	800cf7e <__gethex+0x13a>
 800cf02:	786b      	ldrb	r3, [r5, #1]
 800cf04:	2b2b      	cmp	r3, #43	; 0x2b
 800cf06:	d02f      	beq.n	800cf68 <__gethex+0x124>
 800cf08:	2b2d      	cmp	r3, #45	; 0x2d
 800cf0a:	d031      	beq.n	800cf70 <__gethex+0x12c>
 800cf0c:	1c69      	adds	r1, r5, #1
 800cf0e:	f04f 0b00 	mov.w	fp, #0
 800cf12:	7808      	ldrb	r0, [r1, #0]
 800cf14:	f7ff ff80 	bl	800ce18 <__hexdig_fun>
 800cf18:	1e42      	subs	r2, r0, #1
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	2a18      	cmp	r2, #24
 800cf1e:	d82e      	bhi.n	800cf7e <__gethex+0x13a>
 800cf20:	f1a0 0210 	sub.w	r2, r0, #16
 800cf24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf28:	f7ff ff76 	bl	800ce18 <__hexdig_fun>
 800cf2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf30:	fa5f fc8c 	uxtb.w	ip, ip
 800cf34:	f1bc 0f18 	cmp.w	ip, #24
 800cf38:	d91d      	bls.n	800cf76 <__gethex+0x132>
 800cf3a:	f1bb 0f00 	cmp.w	fp, #0
 800cf3e:	d000      	beq.n	800cf42 <__gethex+0xfe>
 800cf40:	4252      	negs	r2, r2
 800cf42:	4416      	add	r6, r2
 800cf44:	f8ca 1000 	str.w	r1, [sl]
 800cf48:	b1dc      	cbz	r4, 800cf82 <__gethex+0x13e>
 800cf4a:	9b01      	ldr	r3, [sp, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bf14      	ite	ne
 800cf50:	f04f 0800 	movne.w	r8, #0
 800cf54:	f04f 0806 	moveq.w	r8, #6
 800cf58:	4640      	mov	r0, r8
 800cf5a:	b005      	add	sp, #20
 800cf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf60:	4645      	mov	r5, r8
 800cf62:	4626      	mov	r6, r4
 800cf64:	2401      	movs	r4, #1
 800cf66:	e7c7      	b.n	800cef8 <__gethex+0xb4>
 800cf68:	f04f 0b00 	mov.w	fp, #0
 800cf6c:	1ca9      	adds	r1, r5, #2
 800cf6e:	e7d0      	b.n	800cf12 <__gethex+0xce>
 800cf70:	f04f 0b01 	mov.w	fp, #1
 800cf74:	e7fa      	b.n	800cf6c <__gethex+0x128>
 800cf76:	230a      	movs	r3, #10
 800cf78:	fb03 0002 	mla	r0, r3, r2, r0
 800cf7c:	e7d0      	b.n	800cf20 <__gethex+0xdc>
 800cf7e:	4629      	mov	r1, r5
 800cf80:	e7e0      	b.n	800cf44 <__gethex+0x100>
 800cf82:	eba5 0308 	sub.w	r3, r5, r8
 800cf86:	3b01      	subs	r3, #1
 800cf88:	4621      	mov	r1, r4
 800cf8a:	2b07      	cmp	r3, #7
 800cf8c:	dc0a      	bgt.n	800cfa4 <__gethex+0x160>
 800cf8e:	4648      	mov	r0, r9
 800cf90:	f000 fb0e 	bl	800d5b0 <_Balloc>
 800cf94:	4604      	mov	r4, r0
 800cf96:	b940      	cbnz	r0, 800cfaa <__gethex+0x166>
 800cf98:	4b61      	ldr	r3, [pc, #388]	; (800d120 <__gethex+0x2dc>)
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	21e4      	movs	r1, #228	; 0xe4
 800cf9e:	4861      	ldr	r0, [pc, #388]	; (800d124 <__gethex+0x2e0>)
 800cfa0:	f001 f9f0 	bl	800e384 <__assert_func>
 800cfa4:	3101      	adds	r1, #1
 800cfa6:	105b      	asrs	r3, r3, #1
 800cfa8:	e7ef      	b.n	800cf8a <__gethex+0x146>
 800cfaa:	f100 0a14 	add.w	sl, r0, #20
 800cfae:	2300      	movs	r3, #0
 800cfb0:	495a      	ldr	r1, [pc, #360]	; (800d11c <__gethex+0x2d8>)
 800cfb2:	f8cd a004 	str.w	sl, [sp, #4]
 800cfb6:	469b      	mov	fp, r3
 800cfb8:	45a8      	cmp	r8, r5
 800cfba:	d342      	bcc.n	800d042 <__gethex+0x1fe>
 800cfbc:	9801      	ldr	r0, [sp, #4]
 800cfbe:	f840 bb04 	str.w	fp, [r0], #4
 800cfc2:	eba0 000a 	sub.w	r0, r0, sl
 800cfc6:	1080      	asrs	r0, r0, #2
 800cfc8:	6120      	str	r0, [r4, #16]
 800cfca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cfce:	4658      	mov	r0, fp
 800cfd0:	f000 fbe0 	bl	800d794 <__hi0bits>
 800cfd4:	683d      	ldr	r5, [r7, #0]
 800cfd6:	eba8 0000 	sub.w	r0, r8, r0
 800cfda:	42a8      	cmp	r0, r5
 800cfdc:	dd59      	ble.n	800d092 <__gethex+0x24e>
 800cfde:	eba0 0805 	sub.w	r8, r0, r5
 800cfe2:	4641      	mov	r1, r8
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 ff6f 	bl	800dec8 <__any_on>
 800cfea:	4683      	mov	fp, r0
 800cfec:	b1b8      	cbz	r0, 800d01e <__gethex+0x1da>
 800cfee:	f108 33ff 	add.w	r3, r8, #4294967295
 800cff2:	1159      	asrs	r1, r3, #5
 800cff4:	f003 021f 	and.w	r2, r3, #31
 800cff8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cffc:	f04f 0b01 	mov.w	fp, #1
 800d000:	fa0b f202 	lsl.w	r2, fp, r2
 800d004:	420a      	tst	r2, r1
 800d006:	d00a      	beq.n	800d01e <__gethex+0x1da>
 800d008:	455b      	cmp	r3, fp
 800d00a:	dd06      	ble.n	800d01a <__gethex+0x1d6>
 800d00c:	f1a8 0102 	sub.w	r1, r8, #2
 800d010:	4620      	mov	r0, r4
 800d012:	f000 ff59 	bl	800dec8 <__any_on>
 800d016:	2800      	cmp	r0, #0
 800d018:	d138      	bne.n	800d08c <__gethex+0x248>
 800d01a:	f04f 0b02 	mov.w	fp, #2
 800d01e:	4641      	mov	r1, r8
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fea7 	bl	800cd74 <rshift>
 800d026:	4446      	add	r6, r8
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	42b3      	cmp	r3, r6
 800d02c:	da41      	bge.n	800d0b2 <__gethex+0x26e>
 800d02e:	4621      	mov	r1, r4
 800d030:	4648      	mov	r0, r9
 800d032:	f000 fafd 	bl	800d630 <_Bfree>
 800d036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d038:	2300      	movs	r3, #0
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d040:	e78a      	b.n	800cf58 <__gethex+0x114>
 800d042:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d046:	2a2e      	cmp	r2, #46	; 0x2e
 800d048:	d014      	beq.n	800d074 <__gethex+0x230>
 800d04a:	2b20      	cmp	r3, #32
 800d04c:	d106      	bne.n	800d05c <__gethex+0x218>
 800d04e:	9b01      	ldr	r3, [sp, #4]
 800d050:	f843 bb04 	str.w	fp, [r3], #4
 800d054:	f04f 0b00 	mov.w	fp, #0
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	465b      	mov	r3, fp
 800d05c:	7828      	ldrb	r0, [r5, #0]
 800d05e:	9303      	str	r3, [sp, #12]
 800d060:	f7ff feda 	bl	800ce18 <__hexdig_fun>
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	f000 000f 	and.w	r0, r0, #15
 800d06a:	4098      	lsls	r0, r3
 800d06c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d070:	3304      	adds	r3, #4
 800d072:	e7a1      	b.n	800cfb8 <__gethex+0x174>
 800d074:	45a8      	cmp	r8, r5
 800d076:	d8e8      	bhi.n	800d04a <__gethex+0x206>
 800d078:	2201      	movs	r2, #1
 800d07a:	4628      	mov	r0, r5
 800d07c:	9303      	str	r3, [sp, #12]
 800d07e:	f7fe fefc 	bl	800be7a <strncmp>
 800d082:	4926      	ldr	r1, [pc, #152]	; (800d11c <__gethex+0x2d8>)
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	2800      	cmp	r0, #0
 800d088:	d1df      	bne.n	800d04a <__gethex+0x206>
 800d08a:	e795      	b.n	800cfb8 <__gethex+0x174>
 800d08c:	f04f 0b03 	mov.w	fp, #3
 800d090:	e7c5      	b.n	800d01e <__gethex+0x1da>
 800d092:	da0b      	bge.n	800d0ac <__gethex+0x268>
 800d094:	eba5 0800 	sub.w	r8, r5, r0
 800d098:	4621      	mov	r1, r4
 800d09a:	4642      	mov	r2, r8
 800d09c:	4648      	mov	r0, r9
 800d09e:	f000 fce1 	bl	800da64 <__lshift>
 800d0a2:	eba6 0608 	sub.w	r6, r6, r8
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	f100 0a14 	add.w	sl, r0, #20
 800d0ac:	f04f 0b00 	mov.w	fp, #0
 800d0b0:	e7ba      	b.n	800d028 <__gethex+0x1e4>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	42b3      	cmp	r3, r6
 800d0b6:	dd73      	ble.n	800d1a0 <__gethex+0x35c>
 800d0b8:	1b9e      	subs	r6, r3, r6
 800d0ba:	42b5      	cmp	r5, r6
 800d0bc:	dc34      	bgt.n	800d128 <__gethex+0x2e4>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d023      	beq.n	800d10c <__gethex+0x2c8>
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d025      	beq.n	800d114 <__gethex+0x2d0>
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d115      	bne.n	800d0f8 <__gethex+0x2b4>
 800d0cc:	42b5      	cmp	r5, r6
 800d0ce:	d113      	bne.n	800d0f8 <__gethex+0x2b4>
 800d0d0:	2d01      	cmp	r5, #1
 800d0d2:	d10b      	bne.n	800d0ec <__gethex+0x2a8>
 800d0d4:	9a02      	ldr	r2, [sp, #8]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	2301      	movs	r3, #1
 800d0dc:	6123      	str	r3, [r4, #16]
 800d0de:	f8ca 3000 	str.w	r3, [sl]
 800d0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d0e8:	601c      	str	r4, [r3, #0]
 800d0ea:	e735      	b.n	800cf58 <__gethex+0x114>
 800d0ec:	1e69      	subs	r1, r5, #1
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f000 feea 	bl	800dec8 <__any_on>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d1ed      	bne.n	800d0d4 <__gethex+0x290>
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	f000 fa98 	bl	800d630 <_Bfree>
 800d100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d102:	2300      	movs	r3, #0
 800d104:	6013      	str	r3, [r2, #0]
 800d106:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d10a:	e725      	b.n	800cf58 <__gethex+0x114>
 800d10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1f2      	bne.n	800d0f8 <__gethex+0x2b4>
 800d112:	e7df      	b.n	800d0d4 <__gethex+0x290>
 800d114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1dc      	bne.n	800d0d4 <__gethex+0x290>
 800d11a:	e7ed      	b.n	800d0f8 <__gethex+0x2b4>
 800d11c:	0800ea80 	.word	0x0800ea80
 800d120:	0800eb90 	.word	0x0800eb90
 800d124:	0800eba1 	.word	0x0800eba1
 800d128:	f106 38ff 	add.w	r8, r6, #4294967295
 800d12c:	f1bb 0f00 	cmp.w	fp, #0
 800d130:	d133      	bne.n	800d19a <__gethex+0x356>
 800d132:	f1b8 0f00 	cmp.w	r8, #0
 800d136:	d004      	beq.n	800d142 <__gethex+0x2fe>
 800d138:	4641      	mov	r1, r8
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fec4 	bl	800dec8 <__any_on>
 800d140:	4683      	mov	fp, r0
 800d142:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d146:	2301      	movs	r3, #1
 800d148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d14c:	f008 081f 	and.w	r8, r8, #31
 800d150:	fa03 f308 	lsl.w	r3, r3, r8
 800d154:	4213      	tst	r3, r2
 800d156:	4631      	mov	r1, r6
 800d158:	4620      	mov	r0, r4
 800d15a:	bf18      	it	ne
 800d15c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d160:	1bad      	subs	r5, r5, r6
 800d162:	f7ff fe07 	bl	800cd74 <rshift>
 800d166:	687e      	ldr	r6, [r7, #4]
 800d168:	f04f 0802 	mov.w	r8, #2
 800d16c:	f1bb 0f00 	cmp.w	fp, #0
 800d170:	d04a      	beq.n	800d208 <__gethex+0x3c4>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d016      	beq.n	800d1a6 <__gethex+0x362>
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d018      	beq.n	800d1ae <__gethex+0x36a>
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d109      	bne.n	800d194 <__gethex+0x350>
 800d180:	f01b 0f02 	tst.w	fp, #2
 800d184:	d006      	beq.n	800d194 <__gethex+0x350>
 800d186:	f8da 3000 	ldr.w	r3, [sl]
 800d18a:	ea4b 0b03 	orr.w	fp, fp, r3
 800d18e:	f01b 0f01 	tst.w	fp, #1
 800d192:	d10f      	bne.n	800d1b4 <__gethex+0x370>
 800d194:	f048 0810 	orr.w	r8, r8, #16
 800d198:	e036      	b.n	800d208 <__gethex+0x3c4>
 800d19a:	f04f 0b01 	mov.w	fp, #1
 800d19e:	e7d0      	b.n	800d142 <__gethex+0x2fe>
 800d1a0:	f04f 0801 	mov.w	r8, #1
 800d1a4:	e7e2      	b.n	800d16c <__gethex+0x328>
 800d1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1a8:	f1c3 0301 	rsb	r3, r3, #1
 800d1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0ef      	beq.n	800d194 <__gethex+0x350>
 800d1b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1b8:	f104 0214 	add.w	r2, r4, #20
 800d1bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4694      	mov	ip, r2
 800d1ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800d1ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d1d2:	d01e      	beq.n	800d212 <__gethex+0x3ce>
 800d1d4:	3101      	adds	r1, #1
 800d1d6:	f8cc 1000 	str.w	r1, [ip]
 800d1da:	f1b8 0f02 	cmp.w	r8, #2
 800d1de:	f104 0214 	add.w	r2, r4, #20
 800d1e2:	d13d      	bne.n	800d260 <__gethex+0x41c>
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	42ab      	cmp	r3, r5
 800d1ea:	d10b      	bne.n	800d204 <__gethex+0x3c0>
 800d1ec:	1169      	asrs	r1, r5, #5
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	f005 051f 	and.w	r5, r5, #31
 800d1f4:	fa03 f505 	lsl.w	r5, r3, r5
 800d1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1fc:	421d      	tst	r5, r3
 800d1fe:	bf18      	it	ne
 800d200:	f04f 0801 	movne.w	r8, #1
 800d204:	f048 0820 	orr.w	r8, r8, #32
 800d208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d20a:	601c      	str	r4, [r3, #0]
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	601e      	str	r6, [r3, #0]
 800d210:	e6a2      	b.n	800cf58 <__gethex+0x114>
 800d212:	4290      	cmp	r0, r2
 800d214:	f842 3c04 	str.w	r3, [r2, #-4]
 800d218:	d8d6      	bhi.n	800d1c8 <__gethex+0x384>
 800d21a:	68a2      	ldr	r2, [r4, #8]
 800d21c:	4593      	cmp	fp, r2
 800d21e:	db17      	blt.n	800d250 <__gethex+0x40c>
 800d220:	6861      	ldr	r1, [r4, #4]
 800d222:	4648      	mov	r0, r9
 800d224:	3101      	adds	r1, #1
 800d226:	f000 f9c3 	bl	800d5b0 <_Balloc>
 800d22a:	4682      	mov	sl, r0
 800d22c:	b918      	cbnz	r0, 800d236 <__gethex+0x3f2>
 800d22e:	4b1b      	ldr	r3, [pc, #108]	; (800d29c <__gethex+0x458>)
 800d230:	4602      	mov	r2, r0
 800d232:	2184      	movs	r1, #132	; 0x84
 800d234:	e6b3      	b.n	800cf9e <__gethex+0x15a>
 800d236:	6922      	ldr	r2, [r4, #16]
 800d238:	3202      	adds	r2, #2
 800d23a:	f104 010c 	add.w	r1, r4, #12
 800d23e:	0092      	lsls	r2, r2, #2
 800d240:	300c      	adds	r0, #12
 800d242:	f7fe feb9 	bl	800bfb8 <memcpy>
 800d246:	4621      	mov	r1, r4
 800d248:	4648      	mov	r0, r9
 800d24a:	f000 f9f1 	bl	800d630 <_Bfree>
 800d24e:	4654      	mov	r4, sl
 800d250:	6922      	ldr	r2, [r4, #16]
 800d252:	1c51      	adds	r1, r2, #1
 800d254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d258:	6121      	str	r1, [r4, #16]
 800d25a:	2101      	movs	r1, #1
 800d25c:	6151      	str	r1, [r2, #20]
 800d25e:	e7bc      	b.n	800d1da <__gethex+0x396>
 800d260:	6921      	ldr	r1, [r4, #16]
 800d262:	4559      	cmp	r1, fp
 800d264:	dd0b      	ble.n	800d27e <__gethex+0x43a>
 800d266:	2101      	movs	r1, #1
 800d268:	4620      	mov	r0, r4
 800d26a:	f7ff fd83 	bl	800cd74 <rshift>
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	3601      	adds	r6, #1
 800d272:	42b3      	cmp	r3, r6
 800d274:	f6ff aedb 	blt.w	800d02e <__gethex+0x1ea>
 800d278:	f04f 0801 	mov.w	r8, #1
 800d27c:	e7c2      	b.n	800d204 <__gethex+0x3c0>
 800d27e:	f015 051f 	ands.w	r5, r5, #31
 800d282:	d0f9      	beq.n	800d278 <__gethex+0x434>
 800d284:	9b01      	ldr	r3, [sp, #4]
 800d286:	441a      	add	r2, r3
 800d288:	f1c5 0520 	rsb	r5, r5, #32
 800d28c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d290:	f000 fa80 	bl	800d794 <__hi0bits>
 800d294:	42a8      	cmp	r0, r5
 800d296:	dbe6      	blt.n	800d266 <__gethex+0x422>
 800d298:	e7ee      	b.n	800d278 <__gethex+0x434>
 800d29a:	bf00      	nop
 800d29c:	0800eb90 	.word	0x0800eb90

0800d2a0 <L_shift>:
 800d2a0:	f1c2 0208 	rsb	r2, r2, #8
 800d2a4:	0092      	lsls	r2, r2, #2
 800d2a6:	b570      	push	{r4, r5, r6, lr}
 800d2a8:	f1c2 0620 	rsb	r6, r2, #32
 800d2ac:	6843      	ldr	r3, [r0, #4]
 800d2ae:	6804      	ldr	r4, [r0, #0]
 800d2b0:	fa03 f506 	lsl.w	r5, r3, r6
 800d2b4:	432c      	orrs	r4, r5
 800d2b6:	40d3      	lsrs	r3, r2
 800d2b8:	6004      	str	r4, [r0, #0]
 800d2ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2be:	4288      	cmp	r0, r1
 800d2c0:	d3f4      	bcc.n	800d2ac <L_shift+0xc>
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}

0800d2c4 <__match>:
 800d2c4:	b530      	push	{r4, r5, lr}
 800d2c6:	6803      	ldr	r3, [r0, #0]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ce:	b914      	cbnz	r4, 800d2d6 <__match+0x12>
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	2001      	movs	r0, #1
 800d2d4:	bd30      	pop	{r4, r5, pc}
 800d2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2de:	2d19      	cmp	r5, #25
 800d2e0:	bf98      	it	ls
 800d2e2:	3220      	addls	r2, #32
 800d2e4:	42a2      	cmp	r2, r4
 800d2e6:	d0f0      	beq.n	800d2ca <__match+0x6>
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e7f3      	b.n	800d2d4 <__match+0x10>

0800d2ec <__hexnan>:
 800d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	680b      	ldr	r3, [r1, #0]
 800d2f2:	6801      	ldr	r1, [r0, #0]
 800d2f4:	115e      	asrs	r6, r3, #5
 800d2f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2fa:	f013 031f 	ands.w	r3, r3, #31
 800d2fe:	b087      	sub	sp, #28
 800d300:	bf18      	it	ne
 800d302:	3604      	addne	r6, #4
 800d304:	2500      	movs	r5, #0
 800d306:	1f37      	subs	r7, r6, #4
 800d308:	4682      	mov	sl, r0
 800d30a:	4690      	mov	r8, r2
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d312:	46b9      	mov	r9, r7
 800d314:	463c      	mov	r4, r7
 800d316:	9502      	str	r5, [sp, #8]
 800d318:	46ab      	mov	fp, r5
 800d31a:	784a      	ldrb	r2, [r1, #1]
 800d31c:	1c4b      	adds	r3, r1, #1
 800d31e:	9303      	str	r3, [sp, #12]
 800d320:	b342      	cbz	r2, 800d374 <__hexnan+0x88>
 800d322:	4610      	mov	r0, r2
 800d324:	9105      	str	r1, [sp, #20]
 800d326:	9204      	str	r2, [sp, #16]
 800d328:	f7ff fd76 	bl	800ce18 <__hexdig_fun>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d14f      	bne.n	800d3d0 <__hexnan+0xe4>
 800d330:	9a04      	ldr	r2, [sp, #16]
 800d332:	9905      	ldr	r1, [sp, #20]
 800d334:	2a20      	cmp	r2, #32
 800d336:	d818      	bhi.n	800d36a <__hexnan+0x7e>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	459b      	cmp	fp, r3
 800d33c:	dd13      	ble.n	800d366 <__hexnan+0x7a>
 800d33e:	454c      	cmp	r4, r9
 800d340:	d206      	bcs.n	800d350 <__hexnan+0x64>
 800d342:	2d07      	cmp	r5, #7
 800d344:	dc04      	bgt.n	800d350 <__hexnan+0x64>
 800d346:	462a      	mov	r2, r5
 800d348:	4649      	mov	r1, r9
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7ff ffa8 	bl	800d2a0 <L_shift>
 800d350:	4544      	cmp	r4, r8
 800d352:	d950      	bls.n	800d3f6 <__hexnan+0x10a>
 800d354:	2300      	movs	r3, #0
 800d356:	f1a4 0904 	sub.w	r9, r4, #4
 800d35a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d35e:	f8cd b008 	str.w	fp, [sp, #8]
 800d362:	464c      	mov	r4, r9
 800d364:	461d      	mov	r5, r3
 800d366:	9903      	ldr	r1, [sp, #12]
 800d368:	e7d7      	b.n	800d31a <__hexnan+0x2e>
 800d36a:	2a29      	cmp	r2, #41	; 0x29
 800d36c:	d155      	bne.n	800d41a <__hexnan+0x12e>
 800d36e:	3102      	adds	r1, #2
 800d370:	f8ca 1000 	str.w	r1, [sl]
 800d374:	f1bb 0f00 	cmp.w	fp, #0
 800d378:	d04f      	beq.n	800d41a <__hexnan+0x12e>
 800d37a:	454c      	cmp	r4, r9
 800d37c:	d206      	bcs.n	800d38c <__hexnan+0xa0>
 800d37e:	2d07      	cmp	r5, #7
 800d380:	dc04      	bgt.n	800d38c <__hexnan+0xa0>
 800d382:	462a      	mov	r2, r5
 800d384:	4649      	mov	r1, r9
 800d386:	4620      	mov	r0, r4
 800d388:	f7ff ff8a 	bl	800d2a0 <L_shift>
 800d38c:	4544      	cmp	r4, r8
 800d38e:	d934      	bls.n	800d3fa <__hexnan+0x10e>
 800d390:	f1a8 0204 	sub.w	r2, r8, #4
 800d394:	4623      	mov	r3, r4
 800d396:	f853 1b04 	ldr.w	r1, [r3], #4
 800d39a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d39e:	429f      	cmp	r7, r3
 800d3a0:	d2f9      	bcs.n	800d396 <__hexnan+0xaa>
 800d3a2:	1b3b      	subs	r3, r7, r4
 800d3a4:	f023 0303 	bic.w	r3, r3, #3
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	3e03      	subs	r6, #3
 800d3ac:	3401      	adds	r4, #1
 800d3ae:	42a6      	cmp	r6, r4
 800d3b0:	bf38      	it	cc
 800d3b2:	2304      	movcc	r3, #4
 800d3b4:	4443      	add	r3, r8
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f843 2b04 	str.w	r2, [r3], #4
 800d3bc:	429f      	cmp	r7, r3
 800d3be:	d2fb      	bcs.n	800d3b8 <__hexnan+0xcc>
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	b91b      	cbnz	r3, 800d3cc <__hexnan+0xe0>
 800d3c4:	4547      	cmp	r7, r8
 800d3c6:	d126      	bne.n	800d416 <__hexnan+0x12a>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	2005      	movs	r0, #5
 800d3ce:	e025      	b.n	800d41c <__hexnan+0x130>
 800d3d0:	3501      	adds	r5, #1
 800d3d2:	2d08      	cmp	r5, #8
 800d3d4:	f10b 0b01 	add.w	fp, fp, #1
 800d3d8:	dd06      	ble.n	800d3e8 <__hexnan+0xfc>
 800d3da:	4544      	cmp	r4, r8
 800d3dc:	d9c3      	bls.n	800d366 <__hexnan+0x7a>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3e4:	2501      	movs	r5, #1
 800d3e6:	3c04      	subs	r4, #4
 800d3e8:	6822      	ldr	r2, [r4, #0]
 800d3ea:	f000 000f 	and.w	r0, r0, #15
 800d3ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3f2:	6020      	str	r0, [r4, #0]
 800d3f4:	e7b7      	b.n	800d366 <__hexnan+0x7a>
 800d3f6:	2508      	movs	r5, #8
 800d3f8:	e7b5      	b.n	800d366 <__hexnan+0x7a>
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0df      	beq.n	800d3c0 <__hexnan+0xd4>
 800d400:	f1c3 0320 	rsb	r3, r3, #32
 800d404:	f04f 32ff 	mov.w	r2, #4294967295
 800d408:	40da      	lsrs	r2, r3
 800d40a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d40e:	4013      	ands	r3, r2
 800d410:	f846 3c04 	str.w	r3, [r6, #-4]
 800d414:	e7d4      	b.n	800d3c0 <__hexnan+0xd4>
 800d416:	3f04      	subs	r7, #4
 800d418:	e7d2      	b.n	800d3c0 <__hexnan+0xd4>
 800d41a:	2004      	movs	r0, #4
 800d41c:	b007      	add	sp, #28
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d424 <malloc>:
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <malloc+0xc>)
 800d426:	4601      	mov	r1, r0
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f000 b823 	b.w	800d474 <_malloc_r>
 800d42e:	bf00      	nop
 800d430:	200001d0 	.word	0x200001d0

0800d434 <sbrk_aligned>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	4e0e      	ldr	r6, [pc, #56]	; (800d470 <sbrk_aligned+0x3c>)
 800d438:	460c      	mov	r4, r1
 800d43a:	6831      	ldr	r1, [r6, #0]
 800d43c:	4605      	mov	r5, r0
 800d43e:	b911      	cbnz	r1, 800d446 <sbrk_aligned+0x12>
 800d440:	f000 ff90 	bl	800e364 <_sbrk_r>
 800d444:	6030      	str	r0, [r6, #0]
 800d446:	4621      	mov	r1, r4
 800d448:	4628      	mov	r0, r5
 800d44a:	f000 ff8b 	bl	800e364 <_sbrk_r>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d00a      	beq.n	800d468 <sbrk_aligned+0x34>
 800d452:	1cc4      	adds	r4, r0, #3
 800d454:	f024 0403 	bic.w	r4, r4, #3
 800d458:	42a0      	cmp	r0, r4
 800d45a:	d007      	beq.n	800d46c <sbrk_aligned+0x38>
 800d45c:	1a21      	subs	r1, r4, r0
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 ff80 	bl	800e364 <_sbrk_r>
 800d464:	3001      	adds	r0, #1
 800d466:	d101      	bne.n	800d46c <sbrk_aligned+0x38>
 800d468:	f04f 34ff 	mov.w	r4, #4294967295
 800d46c:	4620      	mov	r0, r4
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	20000b60 	.word	0x20000b60

0800d474 <_malloc_r>:
 800d474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d478:	1ccd      	adds	r5, r1, #3
 800d47a:	f025 0503 	bic.w	r5, r5, #3
 800d47e:	3508      	adds	r5, #8
 800d480:	2d0c      	cmp	r5, #12
 800d482:	bf38      	it	cc
 800d484:	250c      	movcc	r5, #12
 800d486:	2d00      	cmp	r5, #0
 800d488:	4607      	mov	r7, r0
 800d48a:	db01      	blt.n	800d490 <_malloc_r+0x1c>
 800d48c:	42a9      	cmp	r1, r5
 800d48e:	d905      	bls.n	800d49c <_malloc_r+0x28>
 800d490:	230c      	movs	r3, #12
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	2600      	movs	r6, #0
 800d496:	4630      	mov	r0, r6
 800d498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d570 <_malloc_r+0xfc>
 800d4a0:	f000 f87a 	bl	800d598 <__malloc_lock>
 800d4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a8:	461c      	mov	r4, r3
 800d4aa:	bb5c      	cbnz	r4, 800d504 <_malloc_r+0x90>
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	f7ff ffc0 	bl	800d434 <sbrk_aligned>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	d155      	bne.n	800d566 <_malloc_r+0xf2>
 800d4ba:	f8d8 4000 	ldr.w	r4, [r8]
 800d4be:	4626      	mov	r6, r4
 800d4c0:	2e00      	cmp	r6, #0
 800d4c2:	d145      	bne.n	800d550 <_malloc_r+0xdc>
 800d4c4:	2c00      	cmp	r4, #0
 800d4c6:	d048      	beq.n	800d55a <_malloc_r+0xe6>
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	eb04 0903 	add.w	r9, r4, r3
 800d4d2:	f000 ff47 	bl	800e364 <_sbrk_r>
 800d4d6:	4581      	cmp	r9, r0
 800d4d8:	d13f      	bne.n	800d55a <_malloc_r+0xe6>
 800d4da:	6821      	ldr	r1, [r4, #0]
 800d4dc:	1a6d      	subs	r5, r5, r1
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f7ff ffa7 	bl	800d434 <sbrk_aligned>
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	d037      	beq.n	800d55a <_malloc_r+0xe6>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	442b      	add	r3, r5
 800d4ee:	6023      	str	r3, [r4, #0]
 800d4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d038      	beq.n	800d56a <_malloc_r+0xf6>
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	42a2      	cmp	r2, r4
 800d4fc:	d12b      	bne.n	800d556 <_malloc_r+0xe2>
 800d4fe:	2200      	movs	r2, #0
 800d500:	605a      	str	r2, [r3, #4]
 800d502:	e00f      	b.n	800d524 <_malloc_r+0xb0>
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	1b52      	subs	r2, r2, r5
 800d508:	d41f      	bmi.n	800d54a <_malloc_r+0xd6>
 800d50a:	2a0b      	cmp	r2, #11
 800d50c:	d917      	bls.n	800d53e <_malloc_r+0xca>
 800d50e:	1961      	adds	r1, r4, r5
 800d510:	42a3      	cmp	r3, r4
 800d512:	6025      	str	r5, [r4, #0]
 800d514:	bf18      	it	ne
 800d516:	6059      	strne	r1, [r3, #4]
 800d518:	6863      	ldr	r3, [r4, #4]
 800d51a:	bf08      	it	eq
 800d51c:	f8c8 1000 	streq.w	r1, [r8]
 800d520:	5162      	str	r2, [r4, r5]
 800d522:	604b      	str	r3, [r1, #4]
 800d524:	4638      	mov	r0, r7
 800d526:	f104 060b 	add.w	r6, r4, #11
 800d52a:	f000 f83b 	bl	800d5a4 <__malloc_unlock>
 800d52e:	f026 0607 	bic.w	r6, r6, #7
 800d532:	1d23      	adds	r3, r4, #4
 800d534:	1af2      	subs	r2, r6, r3
 800d536:	d0ae      	beq.n	800d496 <_malloc_r+0x22>
 800d538:	1b9b      	subs	r3, r3, r6
 800d53a:	50a3      	str	r3, [r4, r2]
 800d53c:	e7ab      	b.n	800d496 <_malloc_r+0x22>
 800d53e:	42a3      	cmp	r3, r4
 800d540:	6862      	ldr	r2, [r4, #4]
 800d542:	d1dd      	bne.n	800d500 <_malloc_r+0x8c>
 800d544:	f8c8 2000 	str.w	r2, [r8]
 800d548:	e7ec      	b.n	800d524 <_malloc_r+0xb0>
 800d54a:	4623      	mov	r3, r4
 800d54c:	6864      	ldr	r4, [r4, #4]
 800d54e:	e7ac      	b.n	800d4aa <_malloc_r+0x36>
 800d550:	4634      	mov	r4, r6
 800d552:	6876      	ldr	r6, [r6, #4]
 800d554:	e7b4      	b.n	800d4c0 <_malloc_r+0x4c>
 800d556:	4613      	mov	r3, r2
 800d558:	e7cc      	b.n	800d4f4 <_malloc_r+0x80>
 800d55a:	230c      	movs	r3, #12
 800d55c:	603b      	str	r3, [r7, #0]
 800d55e:	4638      	mov	r0, r7
 800d560:	f000 f820 	bl	800d5a4 <__malloc_unlock>
 800d564:	e797      	b.n	800d496 <_malloc_r+0x22>
 800d566:	6025      	str	r5, [r4, #0]
 800d568:	e7dc      	b.n	800d524 <_malloc_r+0xb0>
 800d56a:	605b      	str	r3, [r3, #4]
 800d56c:	deff      	udf	#255	; 0xff
 800d56e:	bf00      	nop
 800d570:	20000b5c 	.word	0x20000b5c

0800d574 <__ascii_mbtowc>:
 800d574:	b082      	sub	sp, #8
 800d576:	b901      	cbnz	r1, 800d57a <__ascii_mbtowc+0x6>
 800d578:	a901      	add	r1, sp, #4
 800d57a:	b142      	cbz	r2, 800d58e <__ascii_mbtowc+0x1a>
 800d57c:	b14b      	cbz	r3, 800d592 <__ascii_mbtowc+0x1e>
 800d57e:	7813      	ldrb	r3, [r2, #0]
 800d580:	600b      	str	r3, [r1, #0]
 800d582:	7812      	ldrb	r2, [r2, #0]
 800d584:	1e10      	subs	r0, r2, #0
 800d586:	bf18      	it	ne
 800d588:	2001      	movne	r0, #1
 800d58a:	b002      	add	sp, #8
 800d58c:	4770      	bx	lr
 800d58e:	4610      	mov	r0, r2
 800d590:	e7fb      	b.n	800d58a <__ascii_mbtowc+0x16>
 800d592:	f06f 0001 	mvn.w	r0, #1
 800d596:	e7f8      	b.n	800d58a <__ascii_mbtowc+0x16>

0800d598 <__malloc_lock>:
 800d598:	4801      	ldr	r0, [pc, #4]	; (800d5a0 <__malloc_lock+0x8>)
 800d59a:	f7fe bd0b 	b.w	800bfb4 <__retarget_lock_acquire_recursive>
 800d59e:	bf00      	nop
 800d5a0:	20000b58 	.word	0x20000b58

0800d5a4 <__malloc_unlock>:
 800d5a4:	4801      	ldr	r0, [pc, #4]	; (800d5ac <__malloc_unlock+0x8>)
 800d5a6:	f7fe bd06 	b.w	800bfb6 <__retarget_lock_release_recursive>
 800d5aa:	bf00      	nop
 800d5ac:	20000b58 	.word	0x20000b58

0800d5b0 <_Balloc>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	69c6      	ldr	r6, [r0, #28]
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	b976      	cbnz	r6, 800d5d8 <_Balloc+0x28>
 800d5ba:	2010      	movs	r0, #16
 800d5bc:	f7ff ff32 	bl	800d424 <malloc>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	61e0      	str	r0, [r4, #28]
 800d5c4:	b920      	cbnz	r0, 800d5d0 <_Balloc+0x20>
 800d5c6:	4b18      	ldr	r3, [pc, #96]	; (800d628 <_Balloc+0x78>)
 800d5c8:	4818      	ldr	r0, [pc, #96]	; (800d62c <_Balloc+0x7c>)
 800d5ca:	216b      	movs	r1, #107	; 0x6b
 800d5cc:	f000 feda 	bl	800e384 <__assert_func>
 800d5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5d4:	6006      	str	r6, [r0, #0]
 800d5d6:	60c6      	str	r6, [r0, #12]
 800d5d8:	69e6      	ldr	r6, [r4, #28]
 800d5da:	68f3      	ldr	r3, [r6, #12]
 800d5dc:	b183      	cbz	r3, 800d600 <_Balloc+0x50>
 800d5de:	69e3      	ldr	r3, [r4, #28]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5e6:	b9b8      	cbnz	r0, 800d618 <_Balloc+0x68>
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	fa01 f605 	lsl.w	r6, r1, r5
 800d5ee:	1d72      	adds	r2, r6, #5
 800d5f0:	0092      	lsls	r2, r2, #2
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 fee4 	bl	800e3c0 <_calloc_r>
 800d5f8:	b160      	cbz	r0, 800d614 <_Balloc+0x64>
 800d5fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5fe:	e00e      	b.n	800d61e <_Balloc+0x6e>
 800d600:	2221      	movs	r2, #33	; 0x21
 800d602:	2104      	movs	r1, #4
 800d604:	4620      	mov	r0, r4
 800d606:	f000 fedb 	bl	800e3c0 <_calloc_r>
 800d60a:	69e3      	ldr	r3, [r4, #28]
 800d60c:	60f0      	str	r0, [r6, #12]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1e4      	bne.n	800d5de <_Balloc+0x2e>
 800d614:	2000      	movs	r0, #0
 800d616:	bd70      	pop	{r4, r5, r6, pc}
 800d618:	6802      	ldr	r2, [r0, #0]
 800d61a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d61e:	2300      	movs	r3, #0
 800d620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d624:	e7f7      	b.n	800d616 <_Balloc+0x66>
 800d626:	bf00      	nop
 800d628:	0800eb21 	.word	0x0800eb21
 800d62c:	0800ec01 	.word	0x0800ec01

0800d630 <_Bfree>:
 800d630:	b570      	push	{r4, r5, r6, lr}
 800d632:	69c6      	ldr	r6, [r0, #28]
 800d634:	4605      	mov	r5, r0
 800d636:	460c      	mov	r4, r1
 800d638:	b976      	cbnz	r6, 800d658 <_Bfree+0x28>
 800d63a:	2010      	movs	r0, #16
 800d63c:	f7ff fef2 	bl	800d424 <malloc>
 800d640:	4602      	mov	r2, r0
 800d642:	61e8      	str	r0, [r5, #28]
 800d644:	b920      	cbnz	r0, 800d650 <_Bfree+0x20>
 800d646:	4b09      	ldr	r3, [pc, #36]	; (800d66c <_Bfree+0x3c>)
 800d648:	4809      	ldr	r0, [pc, #36]	; (800d670 <_Bfree+0x40>)
 800d64a:	218f      	movs	r1, #143	; 0x8f
 800d64c:	f000 fe9a 	bl	800e384 <__assert_func>
 800d650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d654:	6006      	str	r6, [r0, #0]
 800d656:	60c6      	str	r6, [r0, #12]
 800d658:	b13c      	cbz	r4, 800d66a <_Bfree+0x3a>
 800d65a:	69eb      	ldr	r3, [r5, #28]
 800d65c:	6862      	ldr	r2, [r4, #4]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d664:	6021      	str	r1, [r4, #0]
 800d666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	0800eb21 	.word	0x0800eb21
 800d670:	0800ec01 	.word	0x0800ec01

0800d674 <__multadd>:
 800d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d678:	690d      	ldr	r5, [r1, #16]
 800d67a:	4607      	mov	r7, r0
 800d67c:	460c      	mov	r4, r1
 800d67e:	461e      	mov	r6, r3
 800d680:	f101 0c14 	add.w	ip, r1, #20
 800d684:	2000      	movs	r0, #0
 800d686:	f8dc 3000 	ldr.w	r3, [ip]
 800d68a:	b299      	uxth	r1, r3
 800d68c:	fb02 6101 	mla	r1, r2, r1, r6
 800d690:	0c1e      	lsrs	r6, r3, #16
 800d692:	0c0b      	lsrs	r3, r1, #16
 800d694:	fb02 3306 	mla	r3, r2, r6, r3
 800d698:	b289      	uxth	r1, r1
 800d69a:	3001      	adds	r0, #1
 800d69c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6a0:	4285      	cmp	r5, r0
 800d6a2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6aa:	dcec      	bgt.n	800d686 <__multadd+0x12>
 800d6ac:	b30e      	cbz	r6, 800d6f2 <__multadd+0x7e>
 800d6ae:	68a3      	ldr	r3, [r4, #8]
 800d6b0:	42ab      	cmp	r3, r5
 800d6b2:	dc19      	bgt.n	800d6e8 <__multadd+0x74>
 800d6b4:	6861      	ldr	r1, [r4, #4]
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	3101      	adds	r1, #1
 800d6ba:	f7ff ff79 	bl	800d5b0 <_Balloc>
 800d6be:	4680      	mov	r8, r0
 800d6c0:	b928      	cbnz	r0, 800d6ce <__multadd+0x5a>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	4b0c      	ldr	r3, [pc, #48]	; (800d6f8 <__multadd+0x84>)
 800d6c6:	480d      	ldr	r0, [pc, #52]	; (800d6fc <__multadd+0x88>)
 800d6c8:	21ba      	movs	r1, #186	; 0xba
 800d6ca:	f000 fe5b 	bl	800e384 <__assert_func>
 800d6ce:	6922      	ldr	r2, [r4, #16]
 800d6d0:	3202      	adds	r2, #2
 800d6d2:	f104 010c 	add.w	r1, r4, #12
 800d6d6:	0092      	lsls	r2, r2, #2
 800d6d8:	300c      	adds	r0, #12
 800d6da:	f7fe fc6d 	bl	800bfb8 <memcpy>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f7ff ffa5 	bl	800d630 <_Bfree>
 800d6e6:	4644      	mov	r4, r8
 800d6e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6ec:	3501      	adds	r5, #1
 800d6ee:	615e      	str	r6, [r3, #20]
 800d6f0:	6125      	str	r5, [r4, #16]
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f8:	0800eb90 	.word	0x0800eb90
 800d6fc:	0800ec01 	.word	0x0800ec01

0800d700 <__s2b>:
 800d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d704:	460c      	mov	r4, r1
 800d706:	4615      	mov	r5, r2
 800d708:	461f      	mov	r7, r3
 800d70a:	2209      	movs	r2, #9
 800d70c:	3308      	adds	r3, #8
 800d70e:	4606      	mov	r6, r0
 800d710:	fb93 f3f2 	sdiv	r3, r3, r2
 800d714:	2100      	movs	r1, #0
 800d716:	2201      	movs	r2, #1
 800d718:	429a      	cmp	r2, r3
 800d71a:	db09      	blt.n	800d730 <__s2b+0x30>
 800d71c:	4630      	mov	r0, r6
 800d71e:	f7ff ff47 	bl	800d5b0 <_Balloc>
 800d722:	b940      	cbnz	r0, 800d736 <__s2b+0x36>
 800d724:	4602      	mov	r2, r0
 800d726:	4b19      	ldr	r3, [pc, #100]	; (800d78c <__s2b+0x8c>)
 800d728:	4819      	ldr	r0, [pc, #100]	; (800d790 <__s2b+0x90>)
 800d72a:	21d3      	movs	r1, #211	; 0xd3
 800d72c:	f000 fe2a 	bl	800e384 <__assert_func>
 800d730:	0052      	lsls	r2, r2, #1
 800d732:	3101      	adds	r1, #1
 800d734:	e7f0      	b.n	800d718 <__s2b+0x18>
 800d736:	9b08      	ldr	r3, [sp, #32]
 800d738:	6143      	str	r3, [r0, #20]
 800d73a:	2d09      	cmp	r5, #9
 800d73c:	f04f 0301 	mov.w	r3, #1
 800d740:	6103      	str	r3, [r0, #16]
 800d742:	dd16      	ble.n	800d772 <__s2b+0x72>
 800d744:	f104 0909 	add.w	r9, r4, #9
 800d748:	46c8      	mov	r8, r9
 800d74a:	442c      	add	r4, r5
 800d74c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d750:	4601      	mov	r1, r0
 800d752:	3b30      	subs	r3, #48	; 0x30
 800d754:	220a      	movs	r2, #10
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff8c 	bl	800d674 <__multadd>
 800d75c:	45a0      	cmp	r8, r4
 800d75e:	d1f5      	bne.n	800d74c <__s2b+0x4c>
 800d760:	f1a5 0408 	sub.w	r4, r5, #8
 800d764:	444c      	add	r4, r9
 800d766:	1b2d      	subs	r5, r5, r4
 800d768:	1963      	adds	r3, r4, r5
 800d76a:	42bb      	cmp	r3, r7
 800d76c:	db04      	blt.n	800d778 <__s2b+0x78>
 800d76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d772:	340a      	adds	r4, #10
 800d774:	2509      	movs	r5, #9
 800d776:	e7f6      	b.n	800d766 <__s2b+0x66>
 800d778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d77c:	4601      	mov	r1, r0
 800d77e:	3b30      	subs	r3, #48	; 0x30
 800d780:	220a      	movs	r2, #10
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff ff76 	bl	800d674 <__multadd>
 800d788:	e7ee      	b.n	800d768 <__s2b+0x68>
 800d78a:	bf00      	nop
 800d78c:	0800eb90 	.word	0x0800eb90
 800d790:	0800ec01 	.word	0x0800ec01

0800d794 <__hi0bits>:
 800d794:	0c03      	lsrs	r3, r0, #16
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	b9d3      	cbnz	r3, 800d7d0 <__hi0bits+0x3c>
 800d79a:	0400      	lsls	r0, r0, #16
 800d79c:	2310      	movs	r3, #16
 800d79e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7a2:	bf04      	itt	eq
 800d7a4:	0200      	lsleq	r0, r0, #8
 800d7a6:	3308      	addeq	r3, #8
 800d7a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7ac:	bf04      	itt	eq
 800d7ae:	0100      	lsleq	r0, r0, #4
 800d7b0:	3304      	addeq	r3, #4
 800d7b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7b6:	bf04      	itt	eq
 800d7b8:	0080      	lsleq	r0, r0, #2
 800d7ba:	3302      	addeq	r3, #2
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	db05      	blt.n	800d7cc <__hi0bits+0x38>
 800d7c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7c4:	f103 0301 	add.w	r3, r3, #1
 800d7c8:	bf08      	it	eq
 800d7ca:	2320      	moveq	r3, #32
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	4770      	bx	lr
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e7e4      	b.n	800d79e <__hi0bits+0xa>

0800d7d4 <__lo0bits>:
 800d7d4:	6803      	ldr	r3, [r0, #0]
 800d7d6:	f013 0207 	ands.w	r2, r3, #7
 800d7da:	d00c      	beq.n	800d7f6 <__lo0bits+0x22>
 800d7dc:	07d9      	lsls	r1, r3, #31
 800d7de:	d422      	bmi.n	800d826 <__lo0bits+0x52>
 800d7e0:	079a      	lsls	r2, r3, #30
 800d7e2:	bf49      	itett	mi
 800d7e4:	085b      	lsrmi	r3, r3, #1
 800d7e6:	089b      	lsrpl	r3, r3, #2
 800d7e8:	6003      	strmi	r3, [r0, #0]
 800d7ea:	2201      	movmi	r2, #1
 800d7ec:	bf5c      	itt	pl
 800d7ee:	6003      	strpl	r3, [r0, #0]
 800d7f0:	2202      	movpl	r2, #2
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	4770      	bx	lr
 800d7f6:	b299      	uxth	r1, r3
 800d7f8:	b909      	cbnz	r1, 800d7fe <__lo0bits+0x2a>
 800d7fa:	0c1b      	lsrs	r3, r3, #16
 800d7fc:	2210      	movs	r2, #16
 800d7fe:	b2d9      	uxtb	r1, r3
 800d800:	b909      	cbnz	r1, 800d806 <__lo0bits+0x32>
 800d802:	3208      	adds	r2, #8
 800d804:	0a1b      	lsrs	r3, r3, #8
 800d806:	0719      	lsls	r1, r3, #28
 800d808:	bf04      	itt	eq
 800d80a:	091b      	lsreq	r3, r3, #4
 800d80c:	3204      	addeq	r2, #4
 800d80e:	0799      	lsls	r1, r3, #30
 800d810:	bf04      	itt	eq
 800d812:	089b      	lsreq	r3, r3, #2
 800d814:	3202      	addeq	r2, #2
 800d816:	07d9      	lsls	r1, r3, #31
 800d818:	d403      	bmi.n	800d822 <__lo0bits+0x4e>
 800d81a:	085b      	lsrs	r3, r3, #1
 800d81c:	f102 0201 	add.w	r2, r2, #1
 800d820:	d003      	beq.n	800d82a <__lo0bits+0x56>
 800d822:	6003      	str	r3, [r0, #0]
 800d824:	e7e5      	b.n	800d7f2 <__lo0bits+0x1e>
 800d826:	2200      	movs	r2, #0
 800d828:	e7e3      	b.n	800d7f2 <__lo0bits+0x1e>
 800d82a:	2220      	movs	r2, #32
 800d82c:	e7e1      	b.n	800d7f2 <__lo0bits+0x1e>
	...

0800d830 <__i2b>:
 800d830:	b510      	push	{r4, lr}
 800d832:	460c      	mov	r4, r1
 800d834:	2101      	movs	r1, #1
 800d836:	f7ff febb 	bl	800d5b0 <_Balloc>
 800d83a:	4602      	mov	r2, r0
 800d83c:	b928      	cbnz	r0, 800d84a <__i2b+0x1a>
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <__i2b+0x24>)
 800d840:	4805      	ldr	r0, [pc, #20]	; (800d858 <__i2b+0x28>)
 800d842:	f240 1145 	movw	r1, #325	; 0x145
 800d846:	f000 fd9d 	bl	800e384 <__assert_func>
 800d84a:	2301      	movs	r3, #1
 800d84c:	6144      	str	r4, [r0, #20]
 800d84e:	6103      	str	r3, [r0, #16]
 800d850:	bd10      	pop	{r4, pc}
 800d852:	bf00      	nop
 800d854:	0800eb90 	.word	0x0800eb90
 800d858:	0800ec01 	.word	0x0800ec01

0800d85c <__multiply>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4691      	mov	r9, r2
 800d862:	690a      	ldr	r2, [r1, #16]
 800d864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d868:	429a      	cmp	r2, r3
 800d86a:	bfb8      	it	lt
 800d86c:	460b      	movlt	r3, r1
 800d86e:	460c      	mov	r4, r1
 800d870:	bfbc      	itt	lt
 800d872:	464c      	movlt	r4, r9
 800d874:	4699      	movlt	r9, r3
 800d876:	6927      	ldr	r7, [r4, #16]
 800d878:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d87c:	68a3      	ldr	r3, [r4, #8]
 800d87e:	6861      	ldr	r1, [r4, #4]
 800d880:	eb07 060a 	add.w	r6, r7, sl
 800d884:	42b3      	cmp	r3, r6
 800d886:	b085      	sub	sp, #20
 800d888:	bfb8      	it	lt
 800d88a:	3101      	addlt	r1, #1
 800d88c:	f7ff fe90 	bl	800d5b0 <_Balloc>
 800d890:	b930      	cbnz	r0, 800d8a0 <__multiply+0x44>
 800d892:	4602      	mov	r2, r0
 800d894:	4b44      	ldr	r3, [pc, #272]	; (800d9a8 <__multiply+0x14c>)
 800d896:	4845      	ldr	r0, [pc, #276]	; (800d9ac <__multiply+0x150>)
 800d898:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d89c:	f000 fd72 	bl	800e384 <__assert_func>
 800d8a0:	f100 0514 	add.w	r5, r0, #20
 800d8a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8a8:	462b      	mov	r3, r5
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	4543      	cmp	r3, r8
 800d8ae:	d321      	bcc.n	800d8f4 <__multiply+0x98>
 800d8b0:	f104 0314 	add.w	r3, r4, #20
 800d8b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d8b8:	f109 0314 	add.w	r3, r9, #20
 800d8bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8c0:	9202      	str	r2, [sp, #8]
 800d8c2:	1b3a      	subs	r2, r7, r4
 800d8c4:	3a15      	subs	r2, #21
 800d8c6:	f022 0203 	bic.w	r2, r2, #3
 800d8ca:	3204      	adds	r2, #4
 800d8cc:	f104 0115 	add.w	r1, r4, #21
 800d8d0:	428f      	cmp	r7, r1
 800d8d2:	bf38      	it	cc
 800d8d4:	2204      	movcc	r2, #4
 800d8d6:	9201      	str	r2, [sp, #4]
 800d8d8:	9a02      	ldr	r2, [sp, #8]
 800d8da:	9303      	str	r3, [sp, #12]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d80c      	bhi.n	800d8fa <__multiply+0x9e>
 800d8e0:	2e00      	cmp	r6, #0
 800d8e2:	dd03      	ble.n	800d8ec <__multiply+0x90>
 800d8e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d05b      	beq.n	800d9a4 <__multiply+0x148>
 800d8ec:	6106      	str	r6, [r0, #16]
 800d8ee:	b005      	add	sp, #20
 800d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	f843 2b04 	str.w	r2, [r3], #4
 800d8f8:	e7d8      	b.n	800d8ac <__multiply+0x50>
 800d8fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8fe:	f1ba 0f00 	cmp.w	sl, #0
 800d902:	d024      	beq.n	800d94e <__multiply+0xf2>
 800d904:	f104 0e14 	add.w	lr, r4, #20
 800d908:	46a9      	mov	r9, r5
 800d90a:	f04f 0c00 	mov.w	ip, #0
 800d90e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d912:	f8d9 1000 	ldr.w	r1, [r9]
 800d916:	fa1f fb82 	uxth.w	fp, r2
 800d91a:	b289      	uxth	r1, r1
 800d91c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d920:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d924:	f8d9 2000 	ldr.w	r2, [r9]
 800d928:	4461      	add	r1, ip
 800d92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d92e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d932:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d936:	b289      	uxth	r1, r1
 800d938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d93c:	4577      	cmp	r7, lr
 800d93e:	f849 1b04 	str.w	r1, [r9], #4
 800d942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d946:	d8e2      	bhi.n	800d90e <__multiply+0xb2>
 800d948:	9a01      	ldr	r2, [sp, #4]
 800d94a:	f845 c002 	str.w	ip, [r5, r2]
 800d94e:	9a03      	ldr	r2, [sp, #12]
 800d950:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d954:	3304      	adds	r3, #4
 800d956:	f1b9 0f00 	cmp.w	r9, #0
 800d95a:	d021      	beq.n	800d9a0 <__multiply+0x144>
 800d95c:	6829      	ldr	r1, [r5, #0]
 800d95e:	f104 0c14 	add.w	ip, r4, #20
 800d962:	46ae      	mov	lr, r5
 800d964:	f04f 0a00 	mov.w	sl, #0
 800d968:	f8bc b000 	ldrh.w	fp, [ip]
 800d96c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d970:	fb09 220b 	mla	r2, r9, fp, r2
 800d974:	4452      	add	r2, sl
 800d976:	b289      	uxth	r1, r1
 800d978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d97c:	f84e 1b04 	str.w	r1, [lr], #4
 800d980:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d988:	f8be 1000 	ldrh.w	r1, [lr]
 800d98c:	fb09 110a 	mla	r1, r9, sl, r1
 800d990:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d994:	4567      	cmp	r7, ip
 800d996:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d99a:	d8e5      	bhi.n	800d968 <__multiply+0x10c>
 800d99c:	9a01      	ldr	r2, [sp, #4]
 800d99e:	50a9      	str	r1, [r5, r2]
 800d9a0:	3504      	adds	r5, #4
 800d9a2:	e799      	b.n	800d8d8 <__multiply+0x7c>
 800d9a4:	3e01      	subs	r6, #1
 800d9a6:	e79b      	b.n	800d8e0 <__multiply+0x84>
 800d9a8:	0800eb90 	.word	0x0800eb90
 800d9ac:	0800ec01 	.word	0x0800ec01

0800d9b0 <__pow5mult>:
 800d9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b4:	4615      	mov	r5, r2
 800d9b6:	f012 0203 	ands.w	r2, r2, #3
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	460f      	mov	r7, r1
 800d9be:	d007      	beq.n	800d9d0 <__pow5mult+0x20>
 800d9c0:	4c25      	ldr	r4, [pc, #148]	; (800da58 <__pow5mult+0xa8>)
 800d9c2:	3a01      	subs	r2, #1
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9ca:	f7ff fe53 	bl	800d674 <__multadd>
 800d9ce:	4607      	mov	r7, r0
 800d9d0:	10ad      	asrs	r5, r5, #2
 800d9d2:	d03d      	beq.n	800da50 <__pow5mult+0xa0>
 800d9d4:	69f4      	ldr	r4, [r6, #28]
 800d9d6:	b97c      	cbnz	r4, 800d9f8 <__pow5mult+0x48>
 800d9d8:	2010      	movs	r0, #16
 800d9da:	f7ff fd23 	bl	800d424 <malloc>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	61f0      	str	r0, [r6, #28]
 800d9e2:	b928      	cbnz	r0, 800d9f0 <__pow5mult+0x40>
 800d9e4:	4b1d      	ldr	r3, [pc, #116]	; (800da5c <__pow5mult+0xac>)
 800d9e6:	481e      	ldr	r0, [pc, #120]	; (800da60 <__pow5mult+0xb0>)
 800d9e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d9ec:	f000 fcca 	bl	800e384 <__assert_func>
 800d9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9f4:	6004      	str	r4, [r0, #0]
 800d9f6:	60c4      	str	r4, [r0, #12]
 800d9f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da00:	b94c      	cbnz	r4, 800da16 <__pow5mult+0x66>
 800da02:	f240 2171 	movw	r1, #625	; 0x271
 800da06:	4630      	mov	r0, r6
 800da08:	f7ff ff12 	bl	800d830 <__i2b>
 800da0c:	2300      	movs	r3, #0
 800da0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da12:	4604      	mov	r4, r0
 800da14:	6003      	str	r3, [r0, #0]
 800da16:	f04f 0900 	mov.w	r9, #0
 800da1a:	07eb      	lsls	r3, r5, #31
 800da1c:	d50a      	bpl.n	800da34 <__pow5mult+0x84>
 800da1e:	4639      	mov	r1, r7
 800da20:	4622      	mov	r2, r4
 800da22:	4630      	mov	r0, r6
 800da24:	f7ff ff1a 	bl	800d85c <__multiply>
 800da28:	4639      	mov	r1, r7
 800da2a:	4680      	mov	r8, r0
 800da2c:	4630      	mov	r0, r6
 800da2e:	f7ff fdff 	bl	800d630 <_Bfree>
 800da32:	4647      	mov	r7, r8
 800da34:	106d      	asrs	r5, r5, #1
 800da36:	d00b      	beq.n	800da50 <__pow5mult+0xa0>
 800da38:	6820      	ldr	r0, [r4, #0]
 800da3a:	b938      	cbnz	r0, 800da4c <__pow5mult+0x9c>
 800da3c:	4622      	mov	r2, r4
 800da3e:	4621      	mov	r1, r4
 800da40:	4630      	mov	r0, r6
 800da42:	f7ff ff0b 	bl	800d85c <__multiply>
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	f8c0 9000 	str.w	r9, [r0]
 800da4c:	4604      	mov	r4, r0
 800da4e:	e7e4      	b.n	800da1a <__pow5mult+0x6a>
 800da50:	4638      	mov	r0, r7
 800da52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da56:	bf00      	nop
 800da58:	0800ed50 	.word	0x0800ed50
 800da5c:	0800eb21 	.word	0x0800eb21
 800da60:	0800ec01 	.word	0x0800ec01

0800da64 <__lshift>:
 800da64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	6849      	ldr	r1, [r1, #4]
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	4607      	mov	r7, r0
 800da76:	4691      	mov	r9, r2
 800da78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da7c:	f108 0601 	add.w	r6, r8, #1
 800da80:	42b3      	cmp	r3, r6
 800da82:	db0b      	blt.n	800da9c <__lshift+0x38>
 800da84:	4638      	mov	r0, r7
 800da86:	f7ff fd93 	bl	800d5b0 <_Balloc>
 800da8a:	4605      	mov	r5, r0
 800da8c:	b948      	cbnz	r0, 800daa2 <__lshift+0x3e>
 800da8e:	4602      	mov	r2, r0
 800da90:	4b28      	ldr	r3, [pc, #160]	; (800db34 <__lshift+0xd0>)
 800da92:	4829      	ldr	r0, [pc, #164]	; (800db38 <__lshift+0xd4>)
 800da94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800da98:	f000 fc74 	bl	800e384 <__assert_func>
 800da9c:	3101      	adds	r1, #1
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	e7ee      	b.n	800da80 <__lshift+0x1c>
 800daa2:	2300      	movs	r3, #0
 800daa4:	f100 0114 	add.w	r1, r0, #20
 800daa8:	f100 0210 	add.w	r2, r0, #16
 800daac:	4618      	mov	r0, r3
 800daae:	4553      	cmp	r3, sl
 800dab0:	db33      	blt.n	800db1a <__lshift+0xb6>
 800dab2:	6920      	ldr	r0, [r4, #16]
 800dab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dab8:	f104 0314 	add.w	r3, r4, #20
 800dabc:	f019 091f 	ands.w	r9, r9, #31
 800dac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dac8:	d02b      	beq.n	800db22 <__lshift+0xbe>
 800daca:	f1c9 0e20 	rsb	lr, r9, #32
 800dace:	468a      	mov	sl, r1
 800dad0:	2200      	movs	r2, #0
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	fa00 f009 	lsl.w	r0, r0, r9
 800dad8:	4310      	orrs	r0, r2
 800dada:	f84a 0b04 	str.w	r0, [sl], #4
 800dade:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae2:	459c      	cmp	ip, r3
 800dae4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dae8:	d8f3      	bhi.n	800dad2 <__lshift+0x6e>
 800daea:	ebac 0304 	sub.w	r3, ip, r4
 800daee:	3b15      	subs	r3, #21
 800daf0:	f023 0303 	bic.w	r3, r3, #3
 800daf4:	3304      	adds	r3, #4
 800daf6:	f104 0015 	add.w	r0, r4, #21
 800dafa:	4584      	cmp	ip, r0
 800dafc:	bf38      	it	cc
 800dafe:	2304      	movcc	r3, #4
 800db00:	50ca      	str	r2, [r1, r3]
 800db02:	b10a      	cbz	r2, 800db08 <__lshift+0xa4>
 800db04:	f108 0602 	add.w	r6, r8, #2
 800db08:	3e01      	subs	r6, #1
 800db0a:	4638      	mov	r0, r7
 800db0c:	612e      	str	r6, [r5, #16]
 800db0e:	4621      	mov	r1, r4
 800db10:	f7ff fd8e 	bl	800d630 <_Bfree>
 800db14:	4628      	mov	r0, r5
 800db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db1e:	3301      	adds	r3, #1
 800db20:	e7c5      	b.n	800daae <__lshift+0x4a>
 800db22:	3904      	subs	r1, #4
 800db24:	f853 2b04 	ldr.w	r2, [r3], #4
 800db28:	f841 2f04 	str.w	r2, [r1, #4]!
 800db2c:	459c      	cmp	ip, r3
 800db2e:	d8f9      	bhi.n	800db24 <__lshift+0xc0>
 800db30:	e7ea      	b.n	800db08 <__lshift+0xa4>
 800db32:	bf00      	nop
 800db34:	0800eb90 	.word	0x0800eb90
 800db38:	0800ec01 	.word	0x0800ec01

0800db3c <__mcmp>:
 800db3c:	b530      	push	{r4, r5, lr}
 800db3e:	6902      	ldr	r2, [r0, #16]
 800db40:	690c      	ldr	r4, [r1, #16]
 800db42:	1b12      	subs	r2, r2, r4
 800db44:	d10e      	bne.n	800db64 <__mcmp+0x28>
 800db46:	f100 0314 	add.w	r3, r0, #20
 800db4a:	3114      	adds	r1, #20
 800db4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db5c:	42a5      	cmp	r5, r4
 800db5e:	d003      	beq.n	800db68 <__mcmp+0x2c>
 800db60:	d305      	bcc.n	800db6e <__mcmp+0x32>
 800db62:	2201      	movs	r2, #1
 800db64:	4610      	mov	r0, r2
 800db66:	bd30      	pop	{r4, r5, pc}
 800db68:	4283      	cmp	r3, r0
 800db6a:	d3f3      	bcc.n	800db54 <__mcmp+0x18>
 800db6c:	e7fa      	b.n	800db64 <__mcmp+0x28>
 800db6e:	f04f 32ff 	mov.w	r2, #4294967295
 800db72:	e7f7      	b.n	800db64 <__mcmp+0x28>

0800db74 <__mdiff>:
 800db74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	4606      	mov	r6, r0
 800db7c:	4611      	mov	r1, r2
 800db7e:	4620      	mov	r0, r4
 800db80:	4690      	mov	r8, r2
 800db82:	f7ff ffdb 	bl	800db3c <__mcmp>
 800db86:	1e05      	subs	r5, r0, #0
 800db88:	d110      	bne.n	800dbac <__mdiff+0x38>
 800db8a:	4629      	mov	r1, r5
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7ff fd0f 	bl	800d5b0 <_Balloc>
 800db92:	b930      	cbnz	r0, 800dba2 <__mdiff+0x2e>
 800db94:	4b3a      	ldr	r3, [pc, #232]	; (800dc80 <__mdiff+0x10c>)
 800db96:	4602      	mov	r2, r0
 800db98:	f240 2137 	movw	r1, #567	; 0x237
 800db9c:	4839      	ldr	r0, [pc, #228]	; (800dc84 <__mdiff+0x110>)
 800db9e:	f000 fbf1 	bl	800e384 <__assert_func>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	bfa4      	itt	ge
 800dbae:	4643      	movge	r3, r8
 800dbb0:	46a0      	movge	r8, r4
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbb8:	bfa6      	itte	ge
 800dbba:	461c      	movge	r4, r3
 800dbbc:	2500      	movge	r5, #0
 800dbbe:	2501      	movlt	r5, #1
 800dbc0:	f7ff fcf6 	bl	800d5b0 <_Balloc>
 800dbc4:	b920      	cbnz	r0, 800dbd0 <__mdiff+0x5c>
 800dbc6:	4b2e      	ldr	r3, [pc, #184]	; (800dc80 <__mdiff+0x10c>)
 800dbc8:	4602      	mov	r2, r0
 800dbca:	f240 2145 	movw	r1, #581	; 0x245
 800dbce:	e7e5      	b.n	800db9c <__mdiff+0x28>
 800dbd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbd4:	6926      	ldr	r6, [r4, #16]
 800dbd6:	60c5      	str	r5, [r0, #12]
 800dbd8:	f104 0914 	add.w	r9, r4, #20
 800dbdc:	f108 0514 	add.w	r5, r8, #20
 800dbe0:	f100 0e14 	add.w	lr, r0, #20
 800dbe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbec:	f108 0210 	add.w	r2, r8, #16
 800dbf0:	46f2      	mov	sl, lr
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbfc:	fa11 f88b 	uxtah	r8, r1, fp
 800dc00:	b299      	uxth	r1, r3
 800dc02:	0c1b      	lsrs	r3, r3, #16
 800dc04:	eba8 0801 	sub.w	r8, r8, r1
 800dc08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc10:	fa1f f888 	uxth.w	r8, r8
 800dc14:	1419      	asrs	r1, r3, #16
 800dc16:	454e      	cmp	r6, r9
 800dc18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc1c:	f84a 3b04 	str.w	r3, [sl], #4
 800dc20:	d8e8      	bhi.n	800dbf4 <__mdiff+0x80>
 800dc22:	1b33      	subs	r3, r6, r4
 800dc24:	3b15      	subs	r3, #21
 800dc26:	f023 0303 	bic.w	r3, r3, #3
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	3415      	adds	r4, #21
 800dc2e:	42a6      	cmp	r6, r4
 800dc30:	bf38      	it	cc
 800dc32:	2304      	movcc	r3, #4
 800dc34:	441d      	add	r5, r3
 800dc36:	4473      	add	r3, lr
 800dc38:	469e      	mov	lr, r3
 800dc3a:	462e      	mov	r6, r5
 800dc3c:	4566      	cmp	r6, ip
 800dc3e:	d30e      	bcc.n	800dc5e <__mdiff+0xea>
 800dc40:	f10c 0203 	add.w	r2, ip, #3
 800dc44:	1b52      	subs	r2, r2, r5
 800dc46:	f022 0203 	bic.w	r2, r2, #3
 800dc4a:	3d03      	subs	r5, #3
 800dc4c:	45ac      	cmp	ip, r5
 800dc4e:	bf38      	it	cc
 800dc50:	2200      	movcc	r2, #0
 800dc52:	4413      	add	r3, r2
 800dc54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dc58:	b17a      	cbz	r2, 800dc7a <__mdiff+0x106>
 800dc5a:	6107      	str	r7, [r0, #16]
 800dc5c:	e7a4      	b.n	800dba8 <__mdiff+0x34>
 800dc5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc62:	fa11 f288 	uxtah	r2, r1, r8
 800dc66:	1414      	asrs	r4, r2, #16
 800dc68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc6c:	b292      	uxth	r2, r2
 800dc6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc72:	f84e 2b04 	str.w	r2, [lr], #4
 800dc76:	1421      	asrs	r1, r4, #16
 800dc78:	e7e0      	b.n	800dc3c <__mdiff+0xc8>
 800dc7a:	3f01      	subs	r7, #1
 800dc7c:	e7ea      	b.n	800dc54 <__mdiff+0xe0>
 800dc7e:	bf00      	nop
 800dc80:	0800eb90 	.word	0x0800eb90
 800dc84:	0800ec01 	.word	0x0800ec01

0800dc88 <__ulp>:
 800dc88:	b082      	sub	sp, #8
 800dc8a:	ed8d 0b00 	vstr	d0, [sp]
 800dc8e:	9a01      	ldr	r2, [sp, #4]
 800dc90:	4b0f      	ldr	r3, [pc, #60]	; (800dcd0 <__ulp+0x48>)
 800dc92:	4013      	ands	r3, r2
 800dc94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc08      	bgt.n	800dcae <__ulp+0x26>
 800dc9c:	425b      	negs	r3, r3
 800dc9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dca2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dca6:	da04      	bge.n	800dcb2 <__ulp+0x2a>
 800dca8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dcac:	4113      	asrs	r3, r2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	e008      	b.n	800dcc4 <__ulp+0x3c>
 800dcb2:	f1a2 0314 	sub.w	r3, r2, #20
 800dcb6:	2b1e      	cmp	r3, #30
 800dcb8:	bfda      	itte	le
 800dcba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dcbe:	40da      	lsrle	r2, r3
 800dcc0:	2201      	movgt	r2, #1
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	ec41 0b10 	vmov	d0, r0, r1
 800dccc:	b002      	add	sp, #8
 800dcce:	4770      	bx	lr
 800dcd0:	7ff00000 	.word	0x7ff00000

0800dcd4 <__b2d>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	6906      	ldr	r6, [r0, #16]
 800dcda:	f100 0814 	add.w	r8, r0, #20
 800dcde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dce2:	1f37      	subs	r7, r6, #4
 800dce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dce8:	4610      	mov	r0, r2
 800dcea:	f7ff fd53 	bl	800d794 <__hi0bits>
 800dcee:	f1c0 0320 	rsb	r3, r0, #32
 800dcf2:	280a      	cmp	r0, #10
 800dcf4:	600b      	str	r3, [r1, #0]
 800dcf6:	491b      	ldr	r1, [pc, #108]	; (800dd64 <__b2d+0x90>)
 800dcf8:	dc15      	bgt.n	800dd26 <__b2d+0x52>
 800dcfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800dcfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800dd02:	45b8      	cmp	r8, r7
 800dd04:	ea43 0501 	orr.w	r5, r3, r1
 800dd08:	bf34      	ite	cc
 800dd0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd0e:	2300      	movcs	r3, #0
 800dd10:	3015      	adds	r0, #21
 800dd12:	fa02 f000 	lsl.w	r0, r2, r0
 800dd16:	fa23 f30c 	lsr.w	r3, r3, ip
 800dd1a:	4303      	orrs	r3, r0
 800dd1c:	461c      	mov	r4, r3
 800dd1e:	ec45 4b10 	vmov	d0, r4, r5
 800dd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd26:	45b8      	cmp	r8, r7
 800dd28:	bf3a      	itte	cc
 800dd2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800dd32:	2300      	movcs	r3, #0
 800dd34:	380b      	subs	r0, #11
 800dd36:	d012      	beq.n	800dd5e <__b2d+0x8a>
 800dd38:	f1c0 0120 	rsb	r1, r0, #32
 800dd3c:	fa23 f401 	lsr.w	r4, r3, r1
 800dd40:	4082      	lsls	r2, r0
 800dd42:	4322      	orrs	r2, r4
 800dd44:	4547      	cmp	r7, r8
 800dd46:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dd4a:	bf8c      	ite	hi
 800dd4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dd50:	2200      	movls	r2, #0
 800dd52:	4083      	lsls	r3, r0
 800dd54:	40ca      	lsrs	r2, r1
 800dd56:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	e7de      	b.n	800dd1c <__b2d+0x48>
 800dd5e:	ea42 0501 	orr.w	r5, r2, r1
 800dd62:	e7db      	b.n	800dd1c <__b2d+0x48>
 800dd64:	3ff00000 	.word	0x3ff00000

0800dd68 <__d2b>:
 800dd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd6c:	460f      	mov	r7, r1
 800dd6e:	2101      	movs	r1, #1
 800dd70:	ec59 8b10 	vmov	r8, r9, d0
 800dd74:	4616      	mov	r6, r2
 800dd76:	f7ff fc1b 	bl	800d5b0 <_Balloc>
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	b930      	cbnz	r0, 800dd8c <__d2b+0x24>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	4b24      	ldr	r3, [pc, #144]	; (800de14 <__d2b+0xac>)
 800dd82:	4825      	ldr	r0, [pc, #148]	; (800de18 <__d2b+0xb0>)
 800dd84:	f240 310f 	movw	r1, #783	; 0x30f
 800dd88:	f000 fafc 	bl	800e384 <__assert_func>
 800dd8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd94:	bb2d      	cbnz	r5, 800dde2 <__d2b+0x7a>
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	f1b8 0300 	subs.w	r3, r8, #0
 800dd9c:	d026      	beq.n	800ddec <__d2b+0x84>
 800dd9e:	4668      	mov	r0, sp
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	f7ff fd17 	bl	800d7d4 <__lo0bits>
 800dda6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ddaa:	b1e8      	cbz	r0, 800dde8 <__d2b+0x80>
 800ddac:	f1c0 0320 	rsb	r3, r0, #32
 800ddb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb4:	430b      	orrs	r3, r1
 800ddb6:	40c2      	lsrs	r2, r0
 800ddb8:	6163      	str	r3, [r4, #20]
 800ddba:	9201      	str	r2, [sp, #4]
 800ddbc:	9b01      	ldr	r3, [sp, #4]
 800ddbe:	61a3      	str	r3, [r4, #24]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	bf14      	ite	ne
 800ddc4:	2202      	movne	r2, #2
 800ddc6:	2201      	moveq	r2, #1
 800ddc8:	6122      	str	r2, [r4, #16]
 800ddca:	b1bd      	cbz	r5, 800ddfc <__d2b+0x94>
 800ddcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddd0:	4405      	add	r5, r0
 800ddd2:	603d      	str	r5, [r7, #0]
 800ddd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddd8:	6030      	str	r0, [r6, #0]
 800ddda:	4620      	mov	r0, r4
 800dddc:	b003      	add	sp, #12
 800ddde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dde6:	e7d6      	b.n	800dd96 <__d2b+0x2e>
 800dde8:	6161      	str	r1, [r4, #20]
 800ddea:	e7e7      	b.n	800ddbc <__d2b+0x54>
 800ddec:	a801      	add	r0, sp, #4
 800ddee:	f7ff fcf1 	bl	800d7d4 <__lo0bits>
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	6163      	str	r3, [r4, #20]
 800ddf6:	3020      	adds	r0, #32
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	e7e5      	b.n	800ddc8 <__d2b+0x60>
 800ddfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de04:	6038      	str	r0, [r7, #0]
 800de06:	6918      	ldr	r0, [r3, #16]
 800de08:	f7ff fcc4 	bl	800d794 <__hi0bits>
 800de0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de10:	e7e2      	b.n	800ddd8 <__d2b+0x70>
 800de12:	bf00      	nop
 800de14:	0800eb90 	.word	0x0800eb90
 800de18:	0800ec01 	.word	0x0800ec01

0800de1c <__ratio>:
 800de1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	4688      	mov	r8, r1
 800de22:	4669      	mov	r1, sp
 800de24:	4681      	mov	r9, r0
 800de26:	f7ff ff55 	bl	800dcd4 <__b2d>
 800de2a:	a901      	add	r1, sp, #4
 800de2c:	4640      	mov	r0, r8
 800de2e:	ec55 4b10 	vmov	r4, r5, d0
 800de32:	f7ff ff4f 	bl	800dcd4 <__b2d>
 800de36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de3e:	eba3 0c02 	sub.w	ip, r3, r2
 800de42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de46:	1a9b      	subs	r3, r3, r2
 800de48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de4c:	ec51 0b10 	vmov	r0, r1, d0
 800de50:	2b00      	cmp	r3, #0
 800de52:	bfd6      	itet	le
 800de54:	460a      	movle	r2, r1
 800de56:	462a      	movgt	r2, r5
 800de58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de5c:	468b      	mov	fp, r1
 800de5e:	462f      	mov	r7, r5
 800de60:	bfd4      	ite	le
 800de62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de6a:	4620      	mov	r0, r4
 800de6c:	ee10 2a10 	vmov	r2, s0
 800de70:	465b      	mov	r3, fp
 800de72:	4639      	mov	r1, r7
 800de74:	f7f2 fcea 	bl	800084c <__aeabi_ddiv>
 800de78:	ec41 0b10 	vmov	d0, r0, r1
 800de7c:	b003      	add	sp, #12
 800de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de82 <__copybits>:
 800de82:	3901      	subs	r1, #1
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	1149      	asrs	r1, r1, #5
 800de88:	6914      	ldr	r4, [r2, #16]
 800de8a:	3101      	adds	r1, #1
 800de8c:	f102 0314 	add.w	r3, r2, #20
 800de90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de98:	1f05      	subs	r5, r0, #4
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	d30c      	bcc.n	800deb8 <__copybits+0x36>
 800de9e:	1aa3      	subs	r3, r4, r2
 800dea0:	3b11      	subs	r3, #17
 800dea2:	f023 0303 	bic.w	r3, r3, #3
 800dea6:	3211      	adds	r2, #17
 800dea8:	42a2      	cmp	r2, r4
 800deaa:	bf88      	it	hi
 800deac:	2300      	movhi	r3, #0
 800deae:	4418      	add	r0, r3
 800deb0:	2300      	movs	r3, #0
 800deb2:	4288      	cmp	r0, r1
 800deb4:	d305      	bcc.n	800dec2 <__copybits+0x40>
 800deb6:	bd70      	pop	{r4, r5, r6, pc}
 800deb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800debc:	f845 6f04 	str.w	r6, [r5, #4]!
 800dec0:	e7eb      	b.n	800de9a <__copybits+0x18>
 800dec2:	f840 3b04 	str.w	r3, [r0], #4
 800dec6:	e7f4      	b.n	800deb2 <__copybits+0x30>

0800dec8 <__any_on>:
 800dec8:	f100 0214 	add.w	r2, r0, #20
 800decc:	6900      	ldr	r0, [r0, #16]
 800dece:	114b      	asrs	r3, r1, #5
 800ded0:	4298      	cmp	r0, r3
 800ded2:	b510      	push	{r4, lr}
 800ded4:	db11      	blt.n	800defa <__any_on+0x32>
 800ded6:	dd0a      	ble.n	800deee <__any_on+0x26>
 800ded8:	f011 011f 	ands.w	r1, r1, #31
 800dedc:	d007      	beq.n	800deee <__any_on+0x26>
 800dede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dee2:	fa24 f001 	lsr.w	r0, r4, r1
 800dee6:	fa00 f101 	lsl.w	r1, r0, r1
 800deea:	428c      	cmp	r4, r1
 800deec:	d10b      	bne.n	800df06 <__any_on+0x3e>
 800deee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800def2:	4293      	cmp	r3, r2
 800def4:	d803      	bhi.n	800defe <__any_on+0x36>
 800def6:	2000      	movs	r0, #0
 800def8:	bd10      	pop	{r4, pc}
 800defa:	4603      	mov	r3, r0
 800defc:	e7f7      	b.n	800deee <__any_on+0x26>
 800defe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df02:	2900      	cmp	r1, #0
 800df04:	d0f5      	beq.n	800def2 <__any_on+0x2a>
 800df06:	2001      	movs	r0, #1
 800df08:	e7f6      	b.n	800def8 <__any_on+0x30>

0800df0a <__ascii_wctomb>:
 800df0a:	b149      	cbz	r1, 800df20 <__ascii_wctomb+0x16>
 800df0c:	2aff      	cmp	r2, #255	; 0xff
 800df0e:	bf85      	ittet	hi
 800df10:	238a      	movhi	r3, #138	; 0x8a
 800df12:	6003      	strhi	r3, [r0, #0]
 800df14:	700a      	strbls	r2, [r1, #0]
 800df16:	f04f 30ff 	movhi.w	r0, #4294967295
 800df1a:	bf98      	it	ls
 800df1c:	2001      	movls	r0, #1
 800df1e:	4770      	bx	lr
 800df20:	4608      	mov	r0, r1
 800df22:	4770      	bx	lr

0800df24 <__ssputs_r>:
 800df24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df28:	688e      	ldr	r6, [r1, #8]
 800df2a:	461f      	mov	r7, r3
 800df2c:	42be      	cmp	r6, r7
 800df2e:	680b      	ldr	r3, [r1, #0]
 800df30:	4682      	mov	sl, r0
 800df32:	460c      	mov	r4, r1
 800df34:	4690      	mov	r8, r2
 800df36:	d82c      	bhi.n	800df92 <__ssputs_r+0x6e>
 800df38:	898a      	ldrh	r2, [r1, #12]
 800df3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df3e:	d026      	beq.n	800df8e <__ssputs_r+0x6a>
 800df40:	6965      	ldr	r5, [r4, #20]
 800df42:	6909      	ldr	r1, [r1, #16]
 800df44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df48:	eba3 0901 	sub.w	r9, r3, r1
 800df4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df50:	1c7b      	adds	r3, r7, #1
 800df52:	444b      	add	r3, r9
 800df54:	106d      	asrs	r5, r5, #1
 800df56:	429d      	cmp	r5, r3
 800df58:	bf38      	it	cc
 800df5a:	461d      	movcc	r5, r3
 800df5c:	0553      	lsls	r3, r2, #21
 800df5e:	d527      	bpl.n	800dfb0 <__ssputs_r+0x8c>
 800df60:	4629      	mov	r1, r5
 800df62:	f7ff fa87 	bl	800d474 <_malloc_r>
 800df66:	4606      	mov	r6, r0
 800df68:	b360      	cbz	r0, 800dfc4 <__ssputs_r+0xa0>
 800df6a:	6921      	ldr	r1, [r4, #16]
 800df6c:	464a      	mov	r2, r9
 800df6e:	f7fe f823 	bl	800bfb8 <memcpy>
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7c:	81a3      	strh	r3, [r4, #12]
 800df7e:	6126      	str	r6, [r4, #16]
 800df80:	6165      	str	r5, [r4, #20]
 800df82:	444e      	add	r6, r9
 800df84:	eba5 0509 	sub.w	r5, r5, r9
 800df88:	6026      	str	r6, [r4, #0]
 800df8a:	60a5      	str	r5, [r4, #8]
 800df8c:	463e      	mov	r6, r7
 800df8e:	42be      	cmp	r6, r7
 800df90:	d900      	bls.n	800df94 <__ssputs_r+0x70>
 800df92:	463e      	mov	r6, r7
 800df94:	6820      	ldr	r0, [r4, #0]
 800df96:	4632      	mov	r2, r6
 800df98:	4641      	mov	r1, r8
 800df9a:	f000 f9c9 	bl	800e330 <memmove>
 800df9e:	68a3      	ldr	r3, [r4, #8]
 800dfa0:	1b9b      	subs	r3, r3, r6
 800dfa2:	60a3      	str	r3, [r4, #8]
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	4433      	add	r3, r6
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	2000      	movs	r0, #0
 800dfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	f000 fa1b 	bl	800e3ec <_realloc_r>
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1e0      	bne.n	800df7e <__ssputs_r+0x5a>
 800dfbc:	6921      	ldr	r1, [r4, #16]
 800dfbe:	4650      	mov	r0, sl
 800dfc0:	f7fe fe8c 	bl	800ccdc <_free_r>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	f8ca 3000 	str.w	r3, [sl]
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd0:	81a3      	strh	r3, [r4, #12]
 800dfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd6:	e7e9      	b.n	800dfac <__ssputs_r+0x88>

0800dfd8 <_svfiprintf_r>:
 800dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	4698      	mov	r8, r3
 800dfde:	898b      	ldrh	r3, [r1, #12]
 800dfe0:	061b      	lsls	r3, r3, #24
 800dfe2:	b09d      	sub	sp, #116	; 0x74
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	4614      	mov	r4, r2
 800dfea:	d50e      	bpl.n	800e00a <_svfiprintf_r+0x32>
 800dfec:	690b      	ldr	r3, [r1, #16]
 800dfee:	b963      	cbnz	r3, 800e00a <_svfiprintf_r+0x32>
 800dff0:	2140      	movs	r1, #64	; 0x40
 800dff2:	f7ff fa3f 	bl	800d474 <_malloc_r>
 800dff6:	6028      	str	r0, [r5, #0]
 800dff8:	6128      	str	r0, [r5, #16]
 800dffa:	b920      	cbnz	r0, 800e006 <_svfiprintf_r+0x2e>
 800dffc:	230c      	movs	r3, #12
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	f04f 30ff 	mov.w	r0, #4294967295
 800e004:	e0d0      	b.n	800e1a8 <_svfiprintf_r+0x1d0>
 800e006:	2340      	movs	r3, #64	; 0x40
 800e008:	616b      	str	r3, [r5, #20]
 800e00a:	2300      	movs	r3, #0
 800e00c:	9309      	str	r3, [sp, #36]	; 0x24
 800e00e:	2320      	movs	r3, #32
 800e010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e014:	f8cd 800c 	str.w	r8, [sp, #12]
 800e018:	2330      	movs	r3, #48	; 0x30
 800e01a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e1c0 <_svfiprintf_r+0x1e8>
 800e01e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e022:	f04f 0901 	mov.w	r9, #1
 800e026:	4623      	mov	r3, r4
 800e028:	469a      	mov	sl, r3
 800e02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e02e:	b10a      	cbz	r2, 800e034 <_svfiprintf_r+0x5c>
 800e030:	2a25      	cmp	r2, #37	; 0x25
 800e032:	d1f9      	bne.n	800e028 <_svfiprintf_r+0x50>
 800e034:	ebba 0b04 	subs.w	fp, sl, r4
 800e038:	d00b      	beq.n	800e052 <_svfiprintf_r+0x7a>
 800e03a:	465b      	mov	r3, fp
 800e03c:	4622      	mov	r2, r4
 800e03e:	4629      	mov	r1, r5
 800e040:	4638      	mov	r0, r7
 800e042:	f7ff ff6f 	bl	800df24 <__ssputs_r>
 800e046:	3001      	adds	r0, #1
 800e048:	f000 80a9 	beq.w	800e19e <_svfiprintf_r+0x1c6>
 800e04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e04e:	445a      	add	r2, fp
 800e050:	9209      	str	r2, [sp, #36]	; 0x24
 800e052:	f89a 3000 	ldrb.w	r3, [sl]
 800e056:	2b00      	cmp	r3, #0
 800e058:	f000 80a1 	beq.w	800e19e <_svfiprintf_r+0x1c6>
 800e05c:	2300      	movs	r3, #0
 800e05e:	f04f 32ff 	mov.w	r2, #4294967295
 800e062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e066:	f10a 0a01 	add.w	sl, sl, #1
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	9307      	str	r3, [sp, #28]
 800e06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e072:	931a      	str	r3, [sp, #104]	; 0x68
 800e074:	4654      	mov	r4, sl
 800e076:	2205      	movs	r2, #5
 800e078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07c:	4850      	ldr	r0, [pc, #320]	; (800e1c0 <_svfiprintf_r+0x1e8>)
 800e07e:	f7f2 f8a7 	bl	80001d0 <memchr>
 800e082:	9a04      	ldr	r2, [sp, #16]
 800e084:	b9d8      	cbnz	r0, 800e0be <_svfiprintf_r+0xe6>
 800e086:	06d0      	lsls	r0, r2, #27
 800e088:	bf44      	itt	mi
 800e08a:	2320      	movmi	r3, #32
 800e08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e090:	0711      	lsls	r1, r2, #28
 800e092:	bf44      	itt	mi
 800e094:	232b      	movmi	r3, #43	; 0x2b
 800e096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e09a:	f89a 3000 	ldrb.w	r3, [sl]
 800e09e:	2b2a      	cmp	r3, #42	; 0x2a
 800e0a0:	d015      	beq.n	800e0ce <_svfiprintf_r+0xf6>
 800e0a2:	9a07      	ldr	r2, [sp, #28]
 800e0a4:	4654      	mov	r4, sl
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	f04f 0c0a 	mov.w	ip, #10
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0b2:	3b30      	subs	r3, #48	; 0x30
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d94d      	bls.n	800e154 <_svfiprintf_r+0x17c>
 800e0b8:	b1b0      	cbz	r0, 800e0e8 <_svfiprintf_r+0x110>
 800e0ba:	9207      	str	r2, [sp, #28]
 800e0bc:	e014      	b.n	800e0e8 <_svfiprintf_r+0x110>
 800e0be:	eba0 0308 	sub.w	r3, r0, r8
 800e0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	46a2      	mov	sl, r4
 800e0cc:	e7d2      	b.n	800e074 <_svfiprintf_r+0x9c>
 800e0ce:	9b03      	ldr	r3, [sp, #12]
 800e0d0:	1d19      	adds	r1, r3, #4
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	9103      	str	r1, [sp, #12]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	bfbb      	ittet	lt
 800e0da:	425b      	neglt	r3, r3
 800e0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e0e0:	9307      	strge	r3, [sp, #28]
 800e0e2:	9307      	strlt	r3, [sp, #28]
 800e0e4:	bfb8      	it	lt
 800e0e6:	9204      	strlt	r2, [sp, #16]
 800e0e8:	7823      	ldrb	r3, [r4, #0]
 800e0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e0ec:	d10c      	bne.n	800e108 <_svfiprintf_r+0x130>
 800e0ee:	7863      	ldrb	r3, [r4, #1]
 800e0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f2:	d134      	bne.n	800e15e <_svfiprintf_r+0x186>
 800e0f4:	9b03      	ldr	r3, [sp, #12]
 800e0f6:	1d1a      	adds	r2, r3, #4
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	9203      	str	r2, [sp, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	bfb8      	it	lt
 800e100:	f04f 33ff 	movlt.w	r3, #4294967295
 800e104:	3402      	adds	r4, #2
 800e106:	9305      	str	r3, [sp, #20]
 800e108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e1d0 <_svfiprintf_r+0x1f8>
 800e10c:	7821      	ldrb	r1, [r4, #0]
 800e10e:	2203      	movs	r2, #3
 800e110:	4650      	mov	r0, sl
 800e112:	f7f2 f85d 	bl	80001d0 <memchr>
 800e116:	b138      	cbz	r0, 800e128 <_svfiprintf_r+0x150>
 800e118:	9b04      	ldr	r3, [sp, #16]
 800e11a:	eba0 000a 	sub.w	r0, r0, sl
 800e11e:	2240      	movs	r2, #64	; 0x40
 800e120:	4082      	lsls	r2, r0
 800e122:	4313      	orrs	r3, r2
 800e124:	3401      	adds	r4, #1
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e12c:	4825      	ldr	r0, [pc, #148]	; (800e1c4 <_svfiprintf_r+0x1ec>)
 800e12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e132:	2206      	movs	r2, #6
 800e134:	f7f2 f84c 	bl	80001d0 <memchr>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d038      	beq.n	800e1ae <_svfiprintf_r+0x1d6>
 800e13c:	4b22      	ldr	r3, [pc, #136]	; (800e1c8 <_svfiprintf_r+0x1f0>)
 800e13e:	bb1b      	cbnz	r3, 800e188 <_svfiprintf_r+0x1b0>
 800e140:	9b03      	ldr	r3, [sp, #12]
 800e142:	3307      	adds	r3, #7
 800e144:	f023 0307 	bic.w	r3, r3, #7
 800e148:	3308      	adds	r3, #8
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e14e:	4433      	add	r3, r6
 800e150:	9309      	str	r3, [sp, #36]	; 0x24
 800e152:	e768      	b.n	800e026 <_svfiprintf_r+0x4e>
 800e154:	fb0c 3202 	mla	r2, ip, r2, r3
 800e158:	460c      	mov	r4, r1
 800e15a:	2001      	movs	r0, #1
 800e15c:	e7a6      	b.n	800e0ac <_svfiprintf_r+0xd4>
 800e15e:	2300      	movs	r3, #0
 800e160:	3401      	adds	r4, #1
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	4619      	mov	r1, r3
 800e166:	f04f 0c0a 	mov.w	ip, #10
 800e16a:	4620      	mov	r0, r4
 800e16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e170:	3a30      	subs	r2, #48	; 0x30
 800e172:	2a09      	cmp	r2, #9
 800e174:	d903      	bls.n	800e17e <_svfiprintf_r+0x1a6>
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0c6      	beq.n	800e108 <_svfiprintf_r+0x130>
 800e17a:	9105      	str	r1, [sp, #20]
 800e17c:	e7c4      	b.n	800e108 <_svfiprintf_r+0x130>
 800e17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e182:	4604      	mov	r4, r0
 800e184:	2301      	movs	r3, #1
 800e186:	e7f0      	b.n	800e16a <_svfiprintf_r+0x192>
 800e188:	ab03      	add	r3, sp, #12
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	462a      	mov	r2, r5
 800e18e:	4b0f      	ldr	r3, [pc, #60]	; (800e1cc <_svfiprintf_r+0x1f4>)
 800e190:	a904      	add	r1, sp, #16
 800e192:	4638      	mov	r0, r7
 800e194:	f7fd f990 	bl	800b4b8 <_printf_float>
 800e198:	1c42      	adds	r2, r0, #1
 800e19a:	4606      	mov	r6, r0
 800e19c:	d1d6      	bne.n	800e14c <_svfiprintf_r+0x174>
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	065b      	lsls	r3, r3, #25
 800e1a2:	f53f af2d 	bmi.w	800e000 <_svfiprintf_r+0x28>
 800e1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1a8:	b01d      	add	sp, #116	; 0x74
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	ab03      	add	r3, sp, #12
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	462a      	mov	r2, r5
 800e1b4:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <_svfiprintf_r+0x1f4>)
 800e1b6:	a904      	add	r1, sp, #16
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7fd fc21 	bl	800ba00 <_printf_i>
 800e1be:	e7eb      	b.n	800e198 <_svfiprintf_r+0x1c0>
 800e1c0:	0800ee5d 	.word	0x0800ee5d
 800e1c4:	0800ee67 	.word	0x0800ee67
 800e1c8:	0800b4b9 	.word	0x0800b4b9
 800e1cc:	0800df25 	.word	0x0800df25
 800e1d0:	0800ee63 	.word	0x0800ee63

0800e1d4 <__sflush_r>:
 800e1d4:	898a      	ldrh	r2, [r1, #12]
 800e1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1da:	4605      	mov	r5, r0
 800e1dc:	0710      	lsls	r0, r2, #28
 800e1de:	460c      	mov	r4, r1
 800e1e0:	d458      	bmi.n	800e294 <__sflush_r+0xc0>
 800e1e2:	684b      	ldr	r3, [r1, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dc05      	bgt.n	800e1f4 <__sflush_r+0x20>
 800e1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	dc02      	bgt.n	800e1f4 <__sflush_r+0x20>
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1f6:	2e00      	cmp	r6, #0
 800e1f8:	d0f9      	beq.n	800e1ee <__sflush_r+0x1a>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e200:	682f      	ldr	r7, [r5, #0]
 800e202:	6a21      	ldr	r1, [r4, #32]
 800e204:	602b      	str	r3, [r5, #0]
 800e206:	d032      	beq.n	800e26e <__sflush_r+0x9a>
 800e208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	075a      	lsls	r2, r3, #29
 800e20e:	d505      	bpl.n	800e21c <__sflush_r+0x48>
 800e210:	6863      	ldr	r3, [r4, #4]
 800e212:	1ac0      	subs	r0, r0, r3
 800e214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e216:	b10b      	cbz	r3, 800e21c <__sflush_r+0x48>
 800e218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e21a:	1ac0      	subs	r0, r0, r3
 800e21c:	2300      	movs	r3, #0
 800e21e:	4602      	mov	r2, r0
 800e220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e222:	6a21      	ldr	r1, [r4, #32]
 800e224:	4628      	mov	r0, r5
 800e226:	47b0      	blx	r6
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	89a3      	ldrh	r3, [r4, #12]
 800e22c:	d106      	bne.n	800e23c <__sflush_r+0x68>
 800e22e:	6829      	ldr	r1, [r5, #0]
 800e230:	291d      	cmp	r1, #29
 800e232:	d82b      	bhi.n	800e28c <__sflush_r+0xb8>
 800e234:	4a29      	ldr	r2, [pc, #164]	; (800e2dc <__sflush_r+0x108>)
 800e236:	410a      	asrs	r2, r1
 800e238:	07d6      	lsls	r6, r2, #31
 800e23a:	d427      	bmi.n	800e28c <__sflush_r+0xb8>
 800e23c:	2200      	movs	r2, #0
 800e23e:	6062      	str	r2, [r4, #4]
 800e240:	04d9      	lsls	r1, r3, #19
 800e242:	6922      	ldr	r2, [r4, #16]
 800e244:	6022      	str	r2, [r4, #0]
 800e246:	d504      	bpl.n	800e252 <__sflush_r+0x7e>
 800e248:	1c42      	adds	r2, r0, #1
 800e24a:	d101      	bne.n	800e250 <__sflush_r+0x7c>
 800e24c:	682b      	ldr	r3, [r5, #0]
 800e24e:	b903      	cbnz	r3, 800e252 <__sflush_r+0x7e>
 800e250:	6560      	str	r0, [r4, #84]	; 0x54
 800e252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e254:	602f      	str	r7, [r5, #0]
 800e256:	2900      	cmp	r1, #0
 800e258:	d0c9      	beq.n	800e1ee <__sflush_r+0x1a>
 800e25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e25e:	4299      	cmp	r1, r3
 800e260:	d002      	beq.n	800e268 <__sflush_r+0x94>
 800e262:	4628      	mov	r0, r5
 800e264:	f7fe fd3a 	bl	800ccdc <_free_r>
 800e268:	2000      	movs	r0, #0
 800e26a:	6360      	str	r0, [r4, #52]	; 0x34
 800e26c:	e7c0      	b.n	800e1f0 <__sflush_r+0x1c>
 800e26e:	2301      	movs	r3, #1
 800e270:	4628      	mov	r0, r5
 800e272:	47b0      	blx	r6
 800e274:	1c41      	adds	r1, r0, #1
 800e276:	d1c8      	bne.n	800e20a <__sflush_r+0x36>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0c5      	beq.n	800e20a <__sflush_r+0x36>
 800e27e:	2b1d      	cmp	r3, #29
 800e280:	d001      	beq.n	800e286 <__sflush_r+0xb2>
 800e282:	2b16      	cmp	r3, #22
 800e284:	d101      	bne.n	800e28a <__sflush_r+0xb6>
 800e286:	602f      	str	r7, [r5, #0]
 800e288:	e7b1      	b.n	800e1ee <__sflush_r+0x1a>
 800e28a:	89a3      	ldrh	r3, [r4, #12]
 800e28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	e7ad      	b.n	800e1f0 <__sflush_r+0x1c>
 800e294:	690f      	ldr	r7, [r1, #16]
 800e296:	2f00      	cmp	r7, #0
 800e298:	d0a9      	beq.n	800e1ee <__sflush_r+0x1a>
 800e29a:	0793      	lsls	r3, r2, #30
 800e29c:	680e      	ldr	r6, [r1, #0]
 800e29e:	bf08      	it	eq
 800e2a0:	694b      	ldreq	r3, [r1, #20]
 800e2a2:	600f      	str	r7, [r1, #0]
 800e2a4:	bf18      	it	ne
 800e2a6:	2300      	movne	r3, #0
 800e2a8:	eba6 0807 	sub.w	r8, r6, r7
 800e2ac:	608b      	str	r3, [r1, #8]
 800e2ae:	f1b8 0f00 	cmp.w	r8, #0
 800e2b2:	dd9c      	ble.n	800e1ee <__sflush_r+0x1a>
 800e2b4:	6a21      	ldr	r1, [r4, #32]
 800e2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2b8:	4643      	mov	r3, r8
 800e2ba:	463a      	mov	r2, r7
 800e2bc:	4628      	mov	r0, r5
 800e2be:	47b0      	blx	r6
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	dc06      	bgt.n	800e2d2 <__sflush_r+0xfe>
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2ca:	81a3      	strh	r3, [r4, #12]
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d0:	e78e      	b.n	800e1f0 <__sflush_r+0x1c>
 800e2d2:	4407      	add	r7, r0
 800e2d4:	eba8 0800 	sub.w	r8, r8, r0
 800e2d8:	e7e9      	b.n	800e2ae <__sflush_r+0xda>
 800e2da:	bf00      	nop
 800e2dc:	dfbffffe 	.word	0xdfbffffe

0800e2e0 <_fflush_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	690b      	ldr	r3, [r1, #16]
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	460c      	mov	r4, r1
 800e2e8:	b913      	cbnz	r3, 800e2f0 <_fflush_r+0x10>
 800e2ea:	2500      	movs	r5, #0
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	b118      	cbz	r0, 800e2fa <_fflush_r+0x1a>
 800e2f2:	6a03      	ldr	r3, [r0, #32]
 800e2f4:	b90b      	cbnz	r3, 800e2fa <_fflush_r+0x1a>
 800e2f6:	f7fd fd1f 	bl	800bd38 <__sinit>
 800e2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0f3      	beq.n	800e2ea <_fflush_r+0xa>
 800e302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e304:	07d0      	lsls	r0, r2, #31
 800e306:	d404      	bmi.n	800e312 <_fflush_r+0x32>
 800e308:	0599      	lsls	r1, r3, #22
 800e30a:	d402      	bmi.n	800e312 <_fflush_r+0x32>
 800e30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e30e:	f7fd fe51 	bl	800bfb4 <__retarget_lock_acquire_recursive>
 800e312:	4628      	mov	r0, r5
 800e314:	4621      	mov	r1, r4
 800e316:	f7ff ff5d 	bl	800e1d4 <__sflush_r>
 800e31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e31c:	07da      	lsls	r2, r3, #31
 800e31e:	4605      	mov	r5, r0
 800e320:	d4e4      	bmi.n	800e2ec <_fflush_r+0xc>
 800e322:	89a3      	ldrh	r3, [r4, #12]
 800e324:	059b      	lsls	r3, r3, #22
 800e326:	d4e1      	bmi.n	800e2ec <_fflush_r+0xc>
 800e328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e32a:	f7fd fe44 	bl	800bfb6 <__retarget_lock_release_recursive>
 800e32e:	e7dd      	b.n	800e2ec <_fflush_r+0xc>

0800e330 <memmove>:
 800e330:	4288      	cmp	r0, r1
 800e332:	b510      	push	{r4, lr}
 800e334:	eb01 0402 	add.w	r4, r1, r2
 800e338:	d902      	bls.n	800e340 <memmove+0x10>
 800e33a:	4284      	cmp	r4, r0
 800e33c:	4623      	mov	r3, r4
 800e33e:	d807      	bhi.n	800e350 <memmove+0x20>
 800e340:	1e43      	subs	r3, r0, #1
 800e342:	42a1      	cmp	r1, r4
 800e344:	d008      	beq.n	800e358 <memmove+0x28>
 800e346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e34e:	e7f8      	b.n	800e342 <memmove+0x12>
 800e350:	4402      	add	r2, r0
 800e352:	4601      	mov	r1, r0
 800e354:	428a      	cmp	r2, r1
 800e356:	d100      	bne.n	800e35a <memmove+0x2a>
 800e358:	bd10      	pop	{r4, pc}
 800e35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e362:	e7f7      	b.n	800e354 <memmove+0x24>

0800e364 <_sbrk_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d06      	ldr	r5, [pc, #24]	; (800e380 <_sbrk_r+0x1c>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	602b      	str	r3, [r5, #0]
 800e370:	f7f4 fabe 	bl	80028f0 <_sbrk>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_sbrk_r+0x1a>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_sbrk_r+0x1a>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	20000b54 	.word	0x20000b54

0800e384 <__assert_func>:
 800e384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e386:	4614      	mov	r4, r2
 800e388:	461a      	mov	r2, r3
 800e38a:	4b09      	ldr	r3, [pc, #36]	; (800e3b0 <__assert_func+0x2c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4605      	mov	r5, r0
 800e390:	68d8      	ldr	r0, [r3, #12]
 800e392:	b14c      	cbz	r4, 800e3a8 <__assert_func+0x24>
 800e394:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <__assert_func+0x30>)
 800e396:	9100      	str	r1, [sp, #0]
 800e398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e39c:	4906      	ldr	r1, [pc, #24]	; (800e3b8 <__assert_func+0x34>)
 800e39e:	462b      	mov	r3, r5
 800e3a0:	f000 f854 	bl	800e44c <fiprintf>
 800e3a4:	f000 f864 	bl	800e470 <abort>
 800e3a8:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <__assert_func+0x38>)
 800e3aa:	461c      	mov	r4, r3
 800e3ac:	e7f3      	b.n	800e396 <__assert_func+0x12>
 800e3ae:	bf00      	nop
 800e3b0:	200001d0 	.word	0x200001d0
 800e3b4:	0800ee6e 	.word	0x0800ee6e
 800e3b8:	0800ee7b 	.word	0x0800ee7b
 800e3bc:	0800eea9 	.word	0x0800eea9

0800e3c0 <_calloc_r>:
 800e3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3c2:	fba1 2402 	umull	r2, r4, r1, r2
 800e3c6:	b94c      	cbnz	r4, 800e3dc <_calloc_r+0x1c>
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	f7ff f852 	bl	800d474 <_malloc_r>
 800e3d0:	9a01      	ldr	r2, [sp, #4]
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	b930      	cbnz	r0, 800e3e4 <_calloc_r+0x24>
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	b003      	add	sp, #12
 800e3da:	bd30      	pop	{r4, r5, pc}
 800e3dc:	220c      	movs	r2, #12
 800e3de:	6002      	str	r2, [r0, #0]
 800e3e0:	2500      	movs	r5, #0
 800e3e2:	e7f8      	b.n	800e3d6 <_calloc_r+0x16>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	f7fd fd40 	bl	800be6a <memset>
 800e3ea:	e7f4      	b.n	800e3d6 <_calloc_r+0x16>

0800e3ec <_realloc_r>:
 800e3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f0:	4680      	mov	r8, r0
 800e3f2:	4614      	mov	r4, r2
 800e3f4:	460e      	mov	r6, r1
 800e3f6:	b921      	cbnz	r1, 800e402 <_realloc_r+0x16>
 800e3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	f7ff b839 	b.w	800d474 <_malloc_r>
 800e402:	b92a      	cbnz	r2, 800e410 <_realloc_r+0x24>
 800e404:	f7fe fc6a 	bl	800ccdc <_free_r>
 800e408:	4625      	mov	r5, r4
 800e40a:	4628      	mov	r0, r5
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	f000 f835 	bl	800e47e <_malloc_usable_size_r>
 800e414:	4284      	cmp	r4, r0
 800e416:	4607      	mov	r7, r0
 800e418:	d802      	bhi.n	800e420 <_realloc_r+0x34>
 800e41a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e41e:	d812      	bhi.n	800e446 <_realloc_r+0x5a>
 800e420:	4621      	mov	r1, r4
 800e422:	4640      	mov	r0, r8
 800e424:	f7ff f826 	bl	800d474 <_malloc_r>
 800e428:	4605      	mov	r5, r0
 800e42a:	2800      	cmp	r0, #0
 800e42c:	d0ed      	beq.n	800e40a <_realloc_r+0x1e>
 800e42e:	42bc      	cmp	r4, r7
 800e430:	4622      	mov	r2, r4
 800e432:	4631      	mov	r1, r6
 800e434:	bf28      	it	cs
 800e436:	463a      	movcs	r2, r7
 800e438:	f7fd fdbe 	bl	800bfb8 <memcpy>
 800e43c:	4631      	mov	r1, r6
 800e43e:	4640      	mov	r0, r8
 800e440:	f7fe fc4c 	bl	800ccdc <_free_r>
 800e444:	e7e1      	b.n	800e40a <_realloc_r+0x1e>
 800e446:	4635      	mov	r5, r6
 800e448:	e7df      	b.n	800e40a <_realloc_r+0x1e>
	...

0800e44c <fiprintf>:
 800e44c:	b40e      	push	{r1, r2, r3}
 800e44e:	b503      	push	{r0, r1, lr}
 800e450:	4601      	mov	r1, r0
 800e452:	ab03      	add	r3, sp, #12
 800e454:	4805      	ldr	r0, [pc, #20]	; (800e46c <fiprintf+0x20>)
 800e456:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45a:	6800      	ldr	r0, [r0, #0]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	f000 f83f 	bl	800e4e0 <_vfiprintf_r>
 800e462:	b002      	add	sp, #8
 800e464:	f85d eb04 	ldr.w	lr, [sp], #4
 800e468:	b003      	add	sp, #12
 800e46a:	4770      	bx	lr
 800e46c:	200001d0 	.word	0x200001d0

0800e470 <abort>:
 800e470:	b508      	push	{r3, lr}
 800e472:	2006      	movs	r0, #6
 800e474:	f000 fa0c 	bl	800e890 <raise>
 800e478:	2001      	movs	r0, #1
 800e47a:	f7f4 f9c1 	bl	8002800 <_exit>

0800e47e <_malloc_usable_size_r>:
 800e47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e482:	1f18      	subs	r0, r3, #4
 800e484:	2b00      	cmp	r3, #0
 800e486:	bfbc      	itt	lt
 800e488:	580b      	ldrlt	r3, [r1, r0]
 800e48a:	18c0      	addlt	r0, r0, r3
 800e48c:	4770      	bx	lr

0800e48e <__sfputc_r>:
 800e48e:	6893      	ldr	r3, [r2, #8]
 800e490:	3b01      	subs	r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	b410      	push	{r4}
 800e496:	6093      	str	r3, [r2, #8]
 800e498:	da08      	bge.n	800e4ac <__sfputc_r+0x1e>
 800e49a:	6994      	ldr	r4, [r2, #24]
 800e49c:	42a3      	cmp	r3, r4
 800e49e:	db01      	blt.n	800e4a4 <__sfputc_r+0x16>
 800e4a0:	290a      	cmp	r1, #10
 800e4a2:	d103      	bne.n	800e4ac <__sfputc_r+0x1e>
 800e4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a8:	f000 b934 	b.w	800e714 <__swbuf_r>
 800e4ac:	6813      	ldr	r3, [r2, #0]
 800e4ae:	1c58      	adds	r0, r3, #1
 800e4b0:	6010      	str	r0, [r2, #0]
 800e4b2:	7019      	strb	r1, [r3, #0]
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <__sfputs_r>:
 800e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4be:	4606      	mov	r6, r0
 800e4c0:	460f      	mov	r7, r1
 800e4c2:	4614      	mov	r4, r2
 800e4c4:	18d5      	adds	r5, r2, r3
 800e4c6:	42ac      	cmp	r4, r5
 800e4c8:	d101      	bne.n	800e4ce <__sfputs_r+0x12>
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	e007      	b.n	800e4de <__sfputs_r+0x22>
 800e4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d2:	463a      	mov	r2, r7
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f7ff ffda 	bl	800e48e <__sfputc_r>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	d1f3      	bne.n	800e4c6 <__sfputs_r+0xa>
 800e4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4e0 <_vfiprintf_r>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	b09d      	sub	sp, #116	; 0x74
 800e4e8:	4614      	mov	r4, r2
 800e4ea:	4698      	mov	r8, r3
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	b118      	cbz	r0, 800e4f8 <_vfiprintf_r+0x18>
 800e4f0:	6a03      	ldr	r3, [r0, #32]
 800e4f2:	b90b      	cbnz	r3, 800e4f8 <_vfiprintf_r+0x18>
 800e4f4:	f7fd fc20 	bl	800bd38 <__sinit>
 800e4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4fa:	07d9      	lsls	r1, r3, #31
 800e4fc:	d405      	bmi.n	800e50a <_vfiprintf_r+0x2a>
 800e4fe:	89ab      	ldrh	r3, [r5, #12]
 800e500:	059a      	lsls	r2, r3, #22
 800e502:	d402      	bmi.n	800e50a <_vfiprintf_r+0x2a>
 800e504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e506:	f7fd fd55 	bl	800bfb4 <__retarget_lock_acquire_recursive>
 800e50a:	89ab      	ldrh	r3, [r5, #12]
 800e50c:	071b      	lsls	r3, r3, #28
 800e50e:	d501      	bpl.n	800e514 <_vfiprintf_r+0x34>
 800e510:	692b      	ldr	r3, [r5, #16]
 800e512:	b99b      	cbnz	r3, 800e53c <_vfiprintf_r+0x5c>
 800e514:	4629      	mov	r1, r5
 800e516:	4630      	mov	r0, r6
 800e518:	f000 f93a 	bl	800e790 <__swsetup_r>
 800e51c:	b170      	cbz	r0, 800e53c <_vfiprintf_r+0x5c>
 800e51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e520:	07dc      	lsls	r4, r3, #31
 800e522:	d504      	bpl.n	800e52e <_vfiprintf_r+0x4e>
 800e524:	f04f 30ff 	mov.w	r0, #4294967295
 800e528:	b01d      	add	sp, #116	; 0x74
 800e52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	0598      	lsls	r0, r3, #22
 800e532:	d4f7      	bmi.n	800e524 <_vfiprintf_r+0x44>
 800e534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e536:	f7fd fd3e 	bl	800bfb6 <__retarget_lock_release_recursive>
 800e53a:	e7f3      	b.n	800e524 <_vfiprintf_r+0x44>
 800e53c:	2300      	movs	r3, #0
 800e53e:	9309      	str	r3, [sp, #36]	; 0x24
 800e540:	2320      	movs	r3, #32
 800e542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e546:	f8cd 800c 	str.w	r8, [sp, #12]
 800e54a:	2330      	movs	r3, #48	; 0x30
 800e54c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e700 <_vfiprintf_r+0x220>
 800e550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e554:	f04f 0901 	mov.w	r9, #1
 800e558:	4623      	mov	r3, r4
 800e55a:	469a      	mov	sl, r3
 800e55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e560:	b10a      	cbz	r2, 800e566 <_vfiprintf_r+0x86>
 800e562:	2a25      	cmp	r2, #37	; 0x25
 800e564:	d1f9      	bne.n	800e55a <_vfiprintf_r+0x7a>
 800e566:	ebba 0b04 	subs.w	fp, sl, r4
 800e56a:	d00b      	beq.n	800e584 <_vfiprintf_r+0xa4>
 800e56c:	465b      	mov	r3, fp
 800e56e:	4622      	mov	r2, r4
 800e570:	4629      	mov	r1, r5
 800e572:	4630      	mov	r0, r6
 800e574:	f7ff ffa2 	bl	800e4bc <__sfputs_r>
 800e578:	3001      	adds	r0, #1
 800e57a:	f000 80a9 	beq.w	800e6d0 <_vfiprintf_r+0x1f0>
 800e57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e580:	445a      	add	r2, fp
 800e582:	9209      	str	r2, [sp, #36]	; 0x24
 800e584:	f89a 3000 	ldrb.w	r3, [sl]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f000 80a1 	beq.w	800e6d0 <_vfiprintf_r+0x1f0>
 800e58e:	2300      	movs	r3, #0
 800e590:	f04f 32ff 	mov.w	r2, #4294967295
 800e594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e598:	f10a 0a01 	add.w	sl, sl, #1
 800e59c:	9304      	str	r3, [sp, #16]
 800e59e:	9307      	str	r3, [sp, #28]
 800e5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e5a6:	4654      	mov	r4, sl
 800e5a8:	2205      	movs	r2, #5
 800e5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ae:	4854      	ldr	r0, [pc, #336]	; (800e700 <_vfiprintf_r+0x220>)
 800e5b0:	f7f1 fe0e 	bl	80001d0 <memchr>
 800e5b4:	9a04      	ldr	r2, [sp, #16]
 800e5b6:	b9d8      	cbnz	r0, 800e5f0 <_vfiprintf_r+0x110>
 800e5b8:	06d1      	lsls	r1, r2, #27
 800e5ba:	bf44      	itt	mi
 800e5bc:	2320      	movmi	r3, #32
 800e5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5c2:	0713      	lsls	r3, r2, #28
 800e5c4:	bf44      	itt	mi
 800e5c6:	232b      	movmi	r3, #43	; 0x2b
 800e5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d2:	d015      	beq.n	800e600 <_vfiprintf_r+0x120>
 800e5d4:	9a07      	ldr	r2, [sp, #28]
 800e5d6:	4654      	mov	r4, sl
 800e5d8:	2000      	movs	r0, #0
 800e5da:	f04f 0c0a 	mov.w	ip, #10
 800e5de:	4621      	mov	r1, r4
 800e5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5e4:	3b30      	subs	r3, #48	; 0x30
 800e5e6:	2b09      	cmp	r3, #9
 800e5e8:	d94d      	bls.n	800e686 <_vfiprintf_r+0x1a6>
 800e5ea:	b1b0      	cbz	r0, 800e61a <_vfiprintf_r+0x13a>
 800e5ec:	9207      	str	r2, [sp, #28]
 800e5ee:	e014      	b.n	800e61a <_vfiprintf_r+0x13a>
 800e5f0:	eba0 0308 	sub.w	r3, r0, r8
 800e5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	9304      	str	r3, [sp, #16]
 800e5fc:	46a2      	mov	sl, r4
 800e5fe:	e7d2      	b.n	800e5a6 <_vfiprintf_r+0xc6>
 800e600:	9b03      	ldr	r3, [sp, #12]
 800e602:	1d19      	adds	r1, r3, #4
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	9103      	str	r1, [sp, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	bfbb      	ittet	lt
 800e60c:	425b      	neglt	r3, r3
 800e60e:	f042 0202 	orrlt.w	r2, r2, #2
 800e612:	9307      	strge	r3, [sp, #28]
 800e614:	9307      	strlt	r3, [sp, #28]
 800e616:	bfb8      	it	lt
 800e618:	9204      	strlt	r2, [sp, #16]
 800e61a:	7823      	ldrb	r3, [r4, #0]
 800e61c:	2b2e      	cmp	r3, #46	; 0x2e
 800e61e:	d10c      	bne.n	800e63a <_vfiprintf_r+0x15a>
 800e620:	7863      	ldrb	r3, [r4, #1]
 800e622:	2b2a      	cmp	r3, #42	; 0x2a
 800e624:	d134      	bne.n	800e690 <_vfiprintf_r+0x1b0>
 800e626:	9b03      	ldr	r3, [sp, #12]
 800e628:	1d1a      	adds	r2, r3, #4
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	9203      	str	r2, [sp, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	bfb8      	it	lt
 800e632:	f04f 33ff 	movlt.w	r3, #4294967295
 800e636:	3402      	adds	r4, #2
 800e638:	9305      	str	r3, [sp, #20]
 800e63a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e710 <_vfiprintf_r+0x230>
 800e63e:	7821      	ldrb	r1, [r4, #0]
 800e640:	2203      	movs	r2, #3
 800e642:	4650      	mov	r0, sl
 800e644:	f7f1 fdc4 	bl	80001d0 <memchr>
 800e648:	b138      	cbz	r0, 800e65a <_vfiprintf_r+0x17a>
 800e64a:	9b04      	ldr	r3, [sp, #16]
 800e64c:	eba0 000a 	sub.w	r0, r0, sl
 800e650:	2240      	movs	r2, #64	; 0x40
 800e652:	4082      	lsls	r2, r0
 800e654:	4313      	orrs	r3, r2
 800e656:	3401      	adds	r4, #1
 800e658:	9304      	str	r3, [sp, #16]
 800e65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65e:	4829      	ldr	r0, [pc, #164]	; (800e704 <_vfiprintf_r+0x224>)
 800e660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e664:	2206      	movs	r2, #6
 800e666:	f7f1 fdb3 	bl	80001d0 <memchr>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d03f      	beq.n	800e6ee <_vfiprintf_r+0x20e>
 800e66e:	4b26      	ldr	r3, [pc, #152]	; (800e708 <_vfiprintf_r+0x228>)
 800e670:	bb1b      	cbnz	r3, 800e6ba <_vfiprintf_r+0x1da>
 800e672:	9b03      	ldr	r3, [sp, #12]
 800e674:	3307      	adds	r3, #7
 800e676:	f023 0307 	bic.w	r3, r3, #7
 800e67a:	3308      	adds	r3, #8
 800e67c:	9303      	str	r3, [sp, #12]
 800e67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e680:	443b      	add	r3, r7
 800e682:	9309      	str	r3, [sp, #36]	; 0x24
 800e684:	e768      	b.n	800e558 <_vfiprintf_r+0x78>
 800e686:	fb0c 3202 	mla	r2, ip, r2, r3
 800e68a:	460c      	mov	r4, r1
 800e68c:	2001      	movs	r0, #1
 800e68e:	e7a6      	b.n	800e5de <_vfiprintf_r+0xfe>
 800e690:	2300      	movs	r3, #0
 800e692:	3401      	adds	r4, #1
 800e694:	9305      	str	r3, [sp, #20]
 800e696:	4619      	mov	r1, r3
 800e698:	f04f 0c0a 	mov.w	ip, #10
 800e69c:	4620      	mov	r0, r4
 800e69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6a2:	3a30      	subs	r2, #48	; 0x30
 800e6a4:	2a09      	cmp	r2, #9
 800e6a6:	d903      	bls.n	800e6b0 <_vfiprintf_r+0x1d0>
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d0c6      	beq.n	800e63a <_vfiprintf_r+0x15a>
 800e6ac:	9105      	str	r1, [sp, #20]
 800e6ae:	e7c4      	b.n	800e63a <_vfiprintf_r+0x15a>
 800e6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e7f0      	b.n	800e69c <_vfiprintf_r+0x1bc>
 800e6ba:	ab03      	add	r3, sp, #12
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	462a      	mov	r2, r5
 800e6c0:	4b12      	ldr	r3, [pc, #72]	; (800e70c <_vfiprintf_r+0x22c>)
 800e6c2:	a904      	add	r1, sp, #16
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7fc fef7 	bl	800b4b8 <_printf_float>
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	1c78      	adds	r0, r7, #1
 800e6ce:	d1d6      	bne.n	800e67e <_vfiprintf_r+0x19e>
 800e6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6d2:	07d9      	lsls	r1, r3, #31
 800e6d4:	d405      	bmi.n	800e6e2 <_vfiprintf_r+0x202>
 800e6d6:	89ab      	ldrh	r3, [r5, #12]
 800e6d8:	059a      	lsls	r2, r3, #22
 800e6da:	d402      	bmi.n	800e6e2 <_vfiprintf_r+0x202>
 800e6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6de:	f7fd fc6a 	bl	800bfb6 <__retarget_lock_release_recursive>
 800e6e2:	89ab      	ldrh	r3, [r5, #12]
 800e6e4:	065b      	lsls	r3, r3, #25
 800e6e6:	f53f af1d 	bmi.w	800e524 <_vfiprintf_r+0x44>
 800e6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6ec:	e71c      	b.n	800e528 <_vfiprintf_r+0x48>
 800e6ee:	ab03      	add	r3, sp, #12
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	462a      	mov	r2, r5
 800e6f4:	4b05      	ldr	r3, [pc, #20]	; (800e70c <_vfiprintf_r+0x22c>)
 800e6f6:	a904      	add	r1, sp, #16
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7fd f981 	bl	800ba00 <_printf_i>
 800e6fe:	e7e4      	b.n	800e6ca <_vfiprintf_r+0x1ea>
 800e700:	0800ee5d 	.word	0x0800ee5d
 800e704:	0800ee67 	.word	0x0800ee67
 800e708:	0800b4b9 	.word	0x0800b4b9
 800e70c:	0800e4bd 	.word	0x0800e4bd
 800e710:	0800ee63 	.word	0x0800ee63

0800e714 <__swbuf_r>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	460e      	mov	r6, r1
 800e718:	4614      	mov	r4, r2
 800e71a:	4605      	mov	r5, r0
 800e71c:	b118      	cbz	r0, 800e726 <__swbuf_r+0x12>
 800e71e:	6a03      	ldr	r3, [r0, #32]
 800e720:	b90b      	cbnz	r3, 800e726 <__swbuf_r+0x12>
 800e722:	f7fd fb09 	bl	800bd38 <__sinit>
 800e726:	69a3      	ldr	r3, [r4, #24]
 800e728:	60a3      	str	r3, [r4, #8]
 800e72a:	89a3      	ldrh	r3, [r4, #12]
 800e72c:	071a      	lsls	r2, r3, #28
 800e72e:	d525      	bpl.n	800e77c <__swbuf_r+0x68>
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	b31b      	cbz	r3, 800e77c <__swbuf_r+0x68>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	1a98      	subs	r0, r3, r2
 800e73a:	6963      	ldr	r3, [r4, #20]
 800e73c:	b2f6      	uxtb	r6, r6
 800e73e:	4283      	cmp	r3, r0
 800e740:	4637      	mov	r7, r6
 800e742:	dc04      	bgt.n	800e74e <__swbuf_r+0x3a>
 800e744:	4621      	mov	r1, r4
 800e746:	4628      	mov	r0, r5
 800e748:	f7ff fdca 	bl	800e2e0 <_fflush_r>
 800e74c:	b9e0      	cbnz	r0, 800e788 <__swbuf_r+0x74>
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	3b01      	subs	r3, #1
 800e752:	60a3      	str	r3, [r4, #8]
 800e754:	6823      	ldr	r3, [r4, #0]
 800e756:	1c5a      	adds	r2, r3, #1
 800e758:	6022      	str	r2, [r4, #0]
 800e75a:	701e      	strb	r6, [r3, #0]
 800e75c:	6962      	ldr	r2, [r4, #20]
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	429a      	cmp	r2, r3
 800e762:	d004      	beq.n	800e76e <__swbuf_r+0x5a>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	07db      	lsls	r3, r3, #31
 800e768:	d506      	bpl.n	800e778 <__swbuf_r+0x64>
 800e76a:	2e0a      	cmp	r6, #10
 800e76c:	d104      	bne.n	800e778 <__swbuf_r+0x64>
 800e76e:	4621      	mov	r1, r4
 800e770:	4628      	mov	r0, r5
 800e772:	f7ff fdb5 	bl	800e2e0 <_fflush_r>
 800e776:	b938      	cbnz	r0, 800e788 <__swbuf_r+0x74>
 800e778:	4638      	mov	r0, r7
 800e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77c:	4621      	mov	r1, r4
 800e77e:	4628      	mov	r0, r5
 800e780:	f000 f806 	bl	800e790 <__swsetup_r>
 800e784:	2800      	cmp	r0, #0
 800e786:	d0d5      	beq.n	800e734 <__swbuf_r+0x20>
 800e788:	f04f 37ff 	mov.w	r7, #4294967295
 800e78c:	e7f4      	b.n	800e778 <__swbuf_r+0x64>
	...

0800e790 <__swsetup_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4b2a      	ldr	r3, [pc, #168]	; (800e83c <__swsetup_r+0xac>)
 800e794:	4605      	mov	r5, r0
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	460c      	mov	r4, r1
 800e79a:	b118      	cbz	r0, 800e7a4 <__swsetup_r+0x14>
 800e79c:	6a03      	ldr	r3, [r0, #32]
 800e79e:	b90b      	cbnz	r3, 800e7a4 <__swsetup_r+0x14>
 800e7a0:	f7fd faca 	bl	800bd38 <__sinit>
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7aa:	0718      	lsls	r0, r3, #28
 800e7ac:	d422      	bmi.n	800e7f4 <__swsetup_r+0x64>
 800e7ae:	06d9      	lsls	r1, r3, #27
 800e7b0:	d407      	bmi.n	800e7c2 <__swsetup_r+0x32>
 800e7b2:	2309      	movs	r3, #9
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7ba:	81a3      	strh	r3, [r4, #12]
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	e034      	b.n	800e82c <__swsetup_r+0x9c>
 800e7c2:	0758      	lsls	r0, r3, #29
 800e7c4:	d512      	bpl.n	800e7ec <__swsetup_r+0x5c>
 800e7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7c8:	b141      	cbz	r1, 800e7dc <__swsetup_r+0x4c>
 800e7ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7ce:	4299      	cmp	r1, r3
 800e7d0:	d002      	beq.n	800e7d8 <__swsetup_r+0x48>
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f7fe fa82 	bl	800ccdc <_free_r>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	6363      	str	r3, [r4, #52]	; 0x34
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	6063      	str	r3, [r4, #4]
 800e7e8:	6923      	ldr	r3, [r4, #16]
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f043 0308 	orr.w	r3, r3, #8
 800e7f2:	81a3      	strh	r3, [r4, #12]
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	b94b      	cbnz	r3, 800e80c <__swsetup_r+0x7c>
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e802:	d003      	beq.n	800e80c <__swsetup_r+0x7c>
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f000 f884 	bl	800e914 <__smakebuf_r>
 800e80c:	89a0      	ldrh	r0, [r4, #12]
 800e80e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e812:	f010 0301 	ands.w	r3, r0, #1
 800e816:	d00a      	beq.n	800e82e <__swsetup_r+0x9e>
 800e818:	2300      	movs	r3, #0
 800e81a:	60a3      	str	r3, [r4, #8]
 800e81c:	6963      	ldr	r3, [r4, #20]
 800e81e:	425b      	negs	r3, r3
 800e820:	61a3      	str	r3, [r4, #24]
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	b943      	cbnz	r3, 800e838 <__swsetup_r+0xa8>
 800e826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e82a:	d1c4      	bne.n	800e7b6 <__swsetup_r+0x26>
 800e82c:	bd38      	pop	{r3, r4, r5, pc}
 800e82e:	0781      	lsls	r1, r0, #30
 800e830:	bf58      	it	pl
 800e832:	6963      	ldrpl	r3, [r4, #20]
 800e834:	60a3      	str	r3, [r4, #8]
 800e836:	e7f4      	b.n	800e822 <__swsetup_r+0x92>
 800e838:	2000      	movs	r0, #0
 800e83a:	e7f7      	b.n	800e82c <__swsetup_r+0x9c>
 800e83c:	200001d0 	.word	0x200001d0

0800e840 <_raise_r>:
 800e840:	291f      	cmp	r1, #31
 800e842:	b538      	push	{r3, r4, r5, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	460d      	mov	r5, r1
 800e848:	d904      	bls.n	800e854 <_raise_r+0x14>
 800e84a:	2316      	movs	r3, #22
 800e84c:	6003      	str	r3, [r0, #0]
 800e84e:	f04f 30ff 	mov.w	r0, #4294967295
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e856:	b112      	cbz	r2, 800e85e <_raise_r+0x1e>
 800e858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e85c:	b94b      	cbnz	r3, 800e872 <_raise_r+0x32>
 800e85e:	4620      	mov	r0, r4
 800e860:	f000 f830 	bl	800e8c4 <_getpid_r>
 800e864:	462a      	mov	r2, r5
 800e866:	4601      	mov	r1, r0
 800e868:	4620      	mov	r0, r4
 800e86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e86e:	f000 b817 	b.w	800e8a0 <_kill_r>
 800e872:	2b01      	cmp	r3, #1
 800e874:	d00a      	beq.n	800e88c <_raise_r+0x4c>
 800e876:	1c59      	adds	r1, r3, #1
 800e878:	d103      	bne.n	800e882 <_raise_r+0x42>
 800e87a:	2316      	movs	r3, #22
 800e87c:	6003      	str	r3, [r0, #0]
 800e87e:	2001      	movs	r0, #1
 800e880:	e7e7      	b.n	800e852 <_raise_r+0x12>
 800e882:	2400      	movs	r4, #0
 800e884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e888:	4628      	mov	r0, r5
 800e88a:	4798      	blx	r3
 800e88c:	2000      	movs	r0, #0
 800e88e:	e7e0      	b.n	800e852 <_raise_r+0x12>

0800e890 <raise>:
 800e890:	4b02      	ldr	r3, [pc, #8]	; (800e89c <raise+0xc>)
 800e892:	4601      	mov	r1, r0
 800e894:	6818      	ldr	r0, [r3, #0]
 800e896:	f7ff bfd3 	b.w	800e840 <_raise_r>
 800e89a:	bf00      	nop
 800e89c:	200001d0 	.word	0x200001d0

0800e8a0 <_kill_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d07      	ldr	r5, [pc, #28]	; (800e8c0 <_kill_r+0x20>)
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	602b      	str	r3, [r5, #0]
 800e8ae:	f7f3 ff97 	bl	80027e0 <_kill>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	d102      	bne.n	800e8bc <_kill_r+0x1c>
 800e8b6:	682b      	ldr	r3, [r5, #0]
 800e8b8:	b103      	cbz	r3, 800e8bc <_kill_r+0x1c>
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	bd38      	pop	{r3, r4, r5, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000b54 	.word	0x20000b54

0800e8c4 <_getpid_r>:
 800e8c4:	f7f3 bf84 	b.w	80027d0 <_getpid>

0800e8c8 <__swhatbuf_r>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	b096      	sub	sp, #88	; 0x58
 800e8d4:	4615      	mov	r5, r2
 800e8d6:	461e      	mov	r6, r3
 800e8d8:	da0d      	bge.n	800e8f6 <__swhatbuf_r+0x2e>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e8e0:	f04f 0100 	mov.w	r1, #0
 800e8e4:	bf0c      	ite	eq
 800e8e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e8ea:	2340      	movne	r3, #64	; 0x40
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	6031      	str	r1, [r6, #0]
 800e8f0:	602b      	str	r3, [r5, #0]
 800e8f2:	b016      	add	sp, #88	; 0x58
 800e8f4:	bd70      	pop	{r4, r5, r6, pc}
 800e8f6:	466a      	mov	r2, sp
 800e8f8:	f000 f848 	bl	800e98c <_fstat_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	dbec      	blt.n	800e8da <__swhatbuf_r+0x12>
 800e900:	9901      	ldr	r1, [sp, #4]
 800e902:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e906:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e90a:	4259      	negs	r1, r3
 800e90c:	4159      	adcs	r1, r3
 800e90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e912:	e7eb      	b.n	800e8ec <__swhatbuf_r+0x24>

0800e914 <__smakebuf_r>:
 800e914:	898b      	ldrh	r3, [r1, #12]
 800e916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e918:	079d      	lsls	r5, r3, #30
 800e91a:	4606      	mov	r6, r0
 800e91c:	460c      	mov	r4, r1
 800e91e:	d507      	bpl.n	800e930 <__smakebuf_r+0x1c>
 800e920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	6123      	str	r3, [r4, #16]
 800e928:	2301      	movs	r3, #1
 800e92a:	6163      	str	r3, [r4, #20]
 800e92c:	b002      	add	sp, #8
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	ab01      	add	r3, sp, #4
 800e932:	466a      	mov	r2, sp
 800e934:	f7ff ffc8 	bl	800e8c8 <__swhatbuf_r>
 800e938:	9900      	ldr	r1, [sp, #0]
 800e93a:	4605      	mov	r5, r0
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7fe fd99 	bl	800d474 <_malloc_r>
 800e942:	b948      	cbnz	r0, 800e958 <__smakebuf_r+0x44>
 800e944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e948:	059a      	lsls	r2, r3, #22
 800e94a:	d4ef      	bmi.n	800e92c <__smakebuf_r+0x18>
 800e94c:	f023 0303 	bic.w	r3, r3, #3
 800e950:	f043 0302 	orr.w	r3, r3, #2
 800e954:	81a3      	strh	r3, [r4, #12]
 800e956:	e7e3      	b.n	800e920 <__smakebuf_r+0xc>
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	6020      	str	r0, [r4, #0]
 800e95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e960:	81a3      	strh	r3, [r4, #12]
 800e962:	9b00      	ldr	r3, [sp, #0]
 800e964:	6163      	str	r3, [r4, #20]
 800e966:	9b01      	ldr	r3, [sp, #4]
 800e968:	6120      	str	r0, [r4, #16]
 800e96a:	b15b      	cbz	r3, 800e984 <__smakebuf_r+0x70>
 800e96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e970:	4630      	mov	r0, r6
 800e972:	f000 f81d 	bl	800e9b0 <_isatty_r>
 800e976:	b128      	cbz	r0, 800e984 <__smakebuf_r+0x70>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	f023 0303 	bic.w	r3, r3, #3
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	81a3      	strh	r3, [r4, #12]
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	431d      	orrs	r5, r3
 800e988:	81a5      	strh	r5, [r4, #12]
 800e98a:	e7cf      	b.n	800e92c <__smakebuf_r+0x18>

0800e98c <_fstat_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4d07      	ldr	r5, [pc, #28]	; (800e9ac <_fstat_r+0x20>)
 800e990:	2300      	movs	r3, #0
 800e992:	4604      	mov	r4, r0
 800e994:	4608      	mov	r0, r1
 800e996:	4611      	mov	r1, r2
 800e998:	602b      	str	r3, [r5, #0]
 800e99a:	f7f3 ff80 	bl	800289e <_fstat>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	d102      	bne.n	800e9a8 <_fstat_r+0x1c>
 800e9a2:	682b      	ldr	r3, [r5, #0]
 800e9a4:	b103      	cbz	r3, 800e9a8 <_fstat_r+0x1c>
 800e9a6:	6023      	str	r3, [r4, #0]
 800e9a8:	bd38      	pop	{r3, r4, r5, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000b54 	.word	0x20000b54

0800e9b0 <_isatty_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4d06      	ldr	r5, [pc, #24]	; (800e9cc <_isatty_r+0x1c>)
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4608      	mov	r0, r1
 800e9ba:	602b      	str	r3, [r5, #0]
 800e9bc:	f7f3 ff7f 	bl	80028be <_isatty>
 800e9c0:	1c43      	adds	r3, r0, #1
 800e9c2:	d102      	bne.n	800e9ca <_isatty_r+0x1a>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	b103      	cbz	r3, 800e9ca <_isatty_r+0x1a>
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	bd38      	pop	{r3, r4, r5, pc}
 800e9cc:	20000b54 	.word	0x20000b54

0800e9d0 <_init>:
 800e9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d2:	bf00      	nop
 800e9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9d6:	bc08      	pop	{r3}
 800e9d8:	469e      	mov	lr, r3
 800e9da:	4770      	bx	lr

0800e9dc <_fini>:
 800e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9de:	bf00      	nop
 800e9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e2:	bc08      	pop	{r3}
 800e9e4:	469e      	mov	lr, r3
 800e9e6:	4770      	bx	lr
