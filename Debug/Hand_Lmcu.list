
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800f8c8  0800f8c8  0001f8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fecc  0800fecc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fecc  0800fecc  0001fecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fed4  0800fed4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fed4  0800fed4  0001fed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800fedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb0  200001d8  080100b4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003188  080100b4  00023188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ad9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000509f  00000000  00000000  00045d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  0004adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001751  00000000  00000000  0004cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002db3c  00000000  00000000  0004e349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c36  00000000  00000000  0007be85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115e6c  00000000  00000000  000a0abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009314  00000000  00000000  001b6928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001bfc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8b0 	.word	0x0800f8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f8b0 	.word	0x0800f8b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	char* result;
	result= memchr(uartRecieveBuffer, 'P', strlen(uartRecieveBuffer));
 8000ff6:	483e      	ldr	r0, [pc, #248]	; (80010f0 <ProcessUartData+0x100>)
 8000ff8:	f7ff f93a 	bl	8000270 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	2150      	movs	r1, #80	; 0x50
 8001002:	483b      	ldr	r0, [pc, #236]	; (80010f0 <ProcessUartData+0x100>)
 8001004:	f7ff f8e4 	bl	80001d0 <memchr>
 8001008:	6078      	str	r0, [r7, #4]
	Fingers_Status.Pinky.SetPoint = atof(result+2);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3302      	adds	r3, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fac4 	bl	800b59c <atof>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <ProcessUartData+0x104>)
 8001024:	6513      	str	r3, [r2, #80]	; 0x50
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 8001026:	4832      	ldr	r0, [pc, #200]	; (80010f0 <ProcessUartData+0x100>)
 8001028:	f7ff f922 	bl	8000270 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	482f      	ldr	r0, [pc, #188]	; (80010f0 <ProcessUartData+0x100>)
 8001034:	f7ff f8cc 	bl	80001d0 <memchr>
 8001038:	6078      	str	r0, [r7, #4]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f00a faac 	bl	800b59c <atof>
 8001044:	ec53 2b10 	vmov	r2, r3, d0
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdcc 	bl	8000be8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <ProcessUartData+0x104>)
 8001054:	63d3      	str	r3, [r2, #60]	; 0x3c
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <ProcessUartData+0x100>)
 8001058:	f7ff f90a 	bl	8000270 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	214d      	movs	r1, #77	; 0x4d
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <ProcessUartData+0x100>)
 8001064:	f7ff f8b4 	bl	80001d0 <memchr>
 8001068:	6078      	str	r0, [r7, #4]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3302      	adds	r3, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f00a fa94 	bl	800b59c <atof>
 8001074:	ec53 2b10 	vmov	r2, r3, d0
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fdb4 	bl	8000be8 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <ProcessUartData+0x104>)
 8001084:	6293      	str	r3, [r2, #40]	; 0x28
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <ProcessUartData+0x100>)
 8001088:	f7ff f8f2 	bl	8000270 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	2149      	movs	r1, #73	; 0x49
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <ProcessUartData+0x100>)
 8001094:	f7ff f89c 	bl	80001d0 <memchr>
 8001098:	6078      	str	r0, [r7, #4]
	Fingers_Status.Index.SetPoint= atof(result+2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a fa7c 	bl	800b59c <atof>
 80010a4:	ec53 2b10 	vmov	r2, r3, d0
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd9c 	bl	8000be8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <ProcessUartData+0x104>)
 80010b4:	6153      	str	r3, [r2, #20]
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <ProcessUartData+0x100>)
 80010b8:	f7ff f8da 	bl	8000270 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	2154      	movs	r1, #84	; 0x54
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <ProcessUartData+0x100>)
 80010c4:	f7ff f884 	bl	80001d0 <memchr>
 80010c8:	6078      	str	r0, [r7, #4]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3302      	adds	r3, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00a fa64 	bl	800b59c <atof>
 80010d4:	ec53 2b10 	vmov	r2, r3, d0
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd84 	bl	8000be8 <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <ProcessUartData+0x104>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f8 	.word	0x200001f8
 80010f4:	200015e0 	.word	0x200015e0

080010f8 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <HAL_UART_RxCpltCallback+0x94>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d13c      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x8c>
		uartRecieveBuffer[uartCounter]=RXuart;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_UART_RxCpltCallback+0x9c>)
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 8001116:	5499      	strb	r1, [r3, r2]
		if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d123      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	2b0d      	cmp	r3, #13
 8001132:	d11c      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3b02      	subs	r3, #2
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	2b7d      	cmp	r3, #125	; 0x7d
 8001140:	d115      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
			ProcessUartData();
 8001142:	f7ff ff55 	bl	8000ff0 <ProcessUartData>
			ManualControl=1;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_UART_RxCpltCallback+0xa4>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
			uartCounter=-1;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	801a      	strh	r2, [r3, #0]

			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	e006      	b.n	8001168 <HAL_UART_RxCpltCallback+0x70>
				uartRecieveBuffer[cleanCounter]=0;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800115e:	2100      	movs	r1, #0
 8001160:	54d1      	strb	r1, [r2, r3]
			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	2b95      	cmp	r3, #149	; 0x95
 800116c:	d9f5      	bls.n	800115a <HAL_UART_RxCpltCallback+0x62>
		}
		uartCounter++;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001178:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 800117a:	2201      	movs	r2, #1
 800117c:	4905      	ldr	r1, [pc, #20]	; (8001194 <HAL_UART_RxCpltCallback+0x9c>)
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001180:	f006 fca2 	bl	8007ac8 <HAL_UART_Receive_IT>
	}
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013800 	.word	0x40013800
 8001190:	200001f4 	.word	0x200001f4
 8001194:	2000028e 	.word	0x2000028e
 8001198:	200001f8 	.word	0x200001f8
 800119c:	20001694 	.word	0x20001694
 80011a0:	20001558 	.word	0x20001558

080011a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <MX_ADC1_Init+0xe4>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ADC1_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC1_Init+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001228:	f002 f9ce 	bl	80035c8 <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001232:	f000 ff19 	bl	8002068 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001242:	f003 fa9f 	bl	8004784 <HAL_ADCEx_MultiModeConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800124c:	f000 ff0c 	bl	8002068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_ADC1_Init+0xe8>)
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001254:	2306      	movs	r3, #6
 8001256:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001258:	2306      	movs	r3, #6
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125c:	237f      	movs	r3, #127	; 0x7f
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001260:	2304      	movs	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_ADC1_Init+0xe0>)
 800126e:	f002 fccf 	bl	8003c10 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001278:	f000 fef6 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000290 	.word	0x20000290
 8001288:	50040000 	.word	0x50040000
 800128c:	0c900008 	.word	0x0c900008

08001290 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC2_Init+0xbc>)
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <MX_ADC2_Init+0xc0>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_ADC2_Init+0xbc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC2_Init+0xbc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_ADC2_Init+0xbc>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_ADC2_Init+0xbc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC2_Init+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC2_Init+0xbc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_ADC2_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC2_Init+0xbc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_ADC2_Init+0xbc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_ADC2_Init+0xbc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_ADC2_Init+0xbc>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_ADC2_Init+0xbc>)
 8001308:	f002 f95e 	bl	80035c8 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001312:	f000 fea9 	bl	8002068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_ADC2_Init+0xc4>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	237f      	movs	r3, #127	; 0x7f
 8001324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2304      	movs	r3, #4
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_ADC2_Init+0xbc>)
 8001334:	f002 fc6c 	bl	8003c10 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 fe93 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002f4 	.word	0x200002f4
 8001350:	50040100 	.word	0x50040100
 8001354:	21800100 	.word	0x21800100

08001358 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_ADC_MspInit+0x150>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d146      	bne.n	8001408 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001382:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001384:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10b      	bne.n	80013a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a41      	ldr	r2, [pc, #260]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 80013d4:	230c      	movs	r3, #12
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d8:	230b      	movs	r3, #11
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4833      	ldr	r0, [pc, #204]	; (80014b4 <HAL_ADC_MspInit+0x15c>)
 80013e8:	f003 fc5a 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 80013ec:	2334      	movs	r3, #52	; 0x34
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013f0:	230b      	movs	r3, #11
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f003 fc4d 	bl	8004ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001406:	e04a      	b.n	800149e <HAL_ADC_MspInit+0x146>
  else if(adcHandle->Instance==ADC2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_ADC_MspInit+0x160>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d145      	bne.n	800149e <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a24      	ldr	r2, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800141a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10b      	bne.n	800143c <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800142a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 800146c:	2303      	movs	r3, #3
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001470:	230b      	movs	r3, #11
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0x15c>)
 8001480:	f003 fc0e 	bl	8004ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 8001484:	23ca      	movs	r3, #202	; 0xca
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001488:	230b      	movs	r3, #11
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f003 fc01 	bl	8004ca0 <HAL_GPIO_Init>
}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	50040000 	.word	0x50040000
 80014ac:	20000358 	.word	0x20000358
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800
 80014b8:	50040100 	.word	0x50040100

080014bc <ADC_Select_Pinky_CH>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_Pinky_CH (void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <ADC_Select_Pinky_CH+0x48>)
 80014d4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d6:	2306      	movs	r3, #6
 80014d8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80014da:	2306      	movs	r3, #6
 80014dc:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <ADC_Select_Pinky_CH+0x4c>)
 80014e8:	f002 fb92 	bl	8003c10 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <ADC_Select_Pinky_CH+0x3a>
	  {
	    Error_Handler();
 80014f2:	f000 fdb9 	bl	8002068 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80014f6:	b662      	cpsie	i
}
 80014f8:	bf00      	nop
	  }
	  __enable_irq();
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2e300800 	.word	0x2e300800
 8001508:	200002f4 	.word	0x200002f4
 800150c:	00000000 	.word	0x00000000

08001510 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	af00      	add	r7, sp, #0
	ADC_Select_Pinky_CH();
 8001514:	f7ff ffd2 	bl	80014bc <ADC_Select_Pinky_CH>
	HAL_ADC_Start(&hadc2);
 8001518:	4831      	ldr	r0, [pc, #196]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 800151a:	f002 f9a5 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800151e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001522:	482f      	ldr	r0, [pc, #188]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 8001524:	f002 fa8e 	bl	8003a44 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc2);
 8001528:	482d      	ldr	r0, [pc, #180]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 800152a:	f002 fb63 	bl	8003bf4 <HAL_ADC_GetValue>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 8001532:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc2);
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 8001536:	f002 fa51 	bl	80039dc <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 800153c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffef 	bl	8000524 <__aeabi_i2d>
 8001546:	4604      	mov	r4, r0
 8001548:	460d      	mov	r5, r1
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffd8 	bl	8000504 <__aeabi_ui2d>
 8001554:	a31e      	add	r3, pc, #120	; (adr r3, 80015d0 <ADC_ReadCurrent_Pinky+0xc0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe91 	bl	800028c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a319      	add	r3, pc, #100	; (adr r3, 80015d8 <ADC_ReadCurrent_Pinky+0xc8>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f968 	bl	800084c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb10 	bl	8000ba8 <__aeabi_d2uiz>
 8001588:	4603      	mov	r3, r0
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 800158e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Current_motor[1]=Fingers_Status.Pinky.Current;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 8001594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001598:	461a      	mov	r2, r3
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 800159c:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015a4:	f640 62d8 	movw	r2, #3800	; 0xed8
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d805      	bhi.n	80015b8 <ADC_ReadCurrent_Pinky+0xa8>
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015b6:	d204      	bcs.n	80015c2 <ADC_ReadCurrent_Pinky+0xb2>
		Fingers_Status.Pinky.Stuck_Finger=1;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80015c0:	e004      	b.n	80015cc <ADC_ReadCurrent_Pinky+0xbc>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	47ae147b 	.word	0x47ae147b
 80015d4:	3f847ae1 	.word	0x3f847ae1
 80015d8:	c28f5c29 	.word	0xc28f5c29
 80015dc:	3ff028f5 	.word	0x3ff028f5
 80015e0:	200002f4 	.word	0x200002f4
 80015e4:	20001644 	.word	0x20001644
 80015e8:	200015e0 	.word	0x200015e0

080015ec <ADC_Select_Ring_CH>:
void ADC_Select_Ring_CH (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <ADC_Select_Ring_CH+0x48>)
 8001604:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001606:	2306      	movs	r3, #6
 8001608:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800160a:	2306      	movs	r3, #6
 800160c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800160e:	b672      	cpsid	i
}
 8001610:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <ADC_Select_Ring_CH+0x4c>)
 8001618:	f002 fafa 	bl	8003c10 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <ADC_Select_Ring_CH+0x3a>
	  {
	    Error_Handler();
 8001622:	f000 fd21 	bl	8002068 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001626:	b662      	cpsie	i
}
 8001628:	bf00      	nop
	  }
	  __enable_irq();
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	21800100 	.word	0x21800100
 8001638:	200002f4 	.word	0x200002f4
 800163c:	00000000 	.word	0x00000000

08001640 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	ADC_Select_Ring_CH();
 8001644:	f7ff ffd2 	bl	80015ec <ADC_Select_Ring_CH>
	HAL_ADC_Start(&hadc2);
 8001648:	4831      	ldr	r0, [pc, #196]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 800164a:	f002 f90d 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800164e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001652:	482f      	ldr	r0, [pc, #188]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 8001654:	f002 f9f6 	bl	8003a44 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc2);
 8001658:	482d      	ldr	r0, [pc, #180]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 800165a:	f002 facb 	bl	8003bf4 <HAL_ADC_GetValue>
 800165e:	4603      	mov	r3, r0
 8001660:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 8001662:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc2);
 8001664:	482a      	ldr	r0, [pc, #168]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 8001666:	f002 f9b9 	bl	80039dc <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 800166c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff40 	bl	8000504 <__aeabi_ui2d>
 8001684:	a31e      	add	r3, pc, #120	; (adr r3, 8001700 <ADC_ReadCurrent_Ring+0xc0>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffb5 	bl	80005f8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe fdf9 	bl	800028c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	a319      	add	r3, pc, #100	; (adr r3, 8001708 <ADC_ReadCurrent_Ring+0xc8>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f8d0 	bl	800084c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa78 	bl	8000ba8 <__aeabi_d2uiz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Current_motor[2]=Fingers_Status.Ring.Current;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016c4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 80016cc:	609a      	str	r2, [r3, #8]
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016d0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016d4:	f640 62d8 	movw	r2, #3800	; 0xed8
 80016d8:	4293      	cmp	r3, r2
 80016da:	d805      	bhi.n	80016e8 <ADC_ReadCurrent_Ring+0xa8>
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016e6:	d204      	bcs.n	80016f2 <ADC_ReadCurrent_Ring+0xb2>
		Fingers_Status.Ring.Stuck_Finger=1;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80016f0:	e004      	b.n	80016fc <ADC_ReadCurrent_Ring+0xbc>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	47ae147b 	.word	0x47ae147b
 8001704:	3f847ae1 	.word	0x3f847ae1
 8001708:	c28f5c29 	.word	0xc28f5c29
 800170c:	3ff028f5 	.word	0x3ff028f5
 8001710:	200002f4 	.word	0x200002f4
 8001714:	20001644 	.word	0x20001644
 8001718:	200015e0 	.word	0x200015e0

0800171c <ADC_Select_Middle_CH>:
void ADC_Select_Middle_CH (void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <ADC_Select_Middle_CH+0x48>)
 8001734:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2306      	movs	r3, #6
 8001738:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800173a:	2306      	movs	r3, #6
 800173c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
}
 8001740:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <ADC_Select_Middle_CH+0x4c>)
 8001748:	f002 fa62 	bl	8003c10 <HAL_ADC_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <ADC_Select_Middle_CH+0x3a>
	  {
	    Error_Handler();
 8001752:	f000 fc89 	bl	8002068 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001756:	b662      	cpsie	i
}
 8001758:	bf00      	nop
	  }
	  __enable_irq();
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	19200040 	.word	0x19200040
 8001768:	200002f4 	.word	0x200002f4
 800176c:	00000000 	.word	0x00000000

08001770 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	af00      	add	r7, sp, #0
	ADC_Select_Middle_CH();
 8001774:	f7ff ffd2 	bl	800171c <ADC_Select_Middle_CH>
	HAL_ADC_Start(&hadc2);
 8001778:	482f      	ldr	r0, [pc, #188]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 800177a:	f002 f875 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800177e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001782:	482d      	ldr	r0, [pc, #180]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 8001784:	f002 f95e 	bl	8003a44 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc2);
 8001788:	482b      	ldr	r0, [pc, #172]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 800178a:	f002 fa33 	bl	8003bf4 <HAL_ADC_GetValue>
 800178e:	4603      	mov	r3, r0
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 8001792:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc2);
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 8001796:	f002 f921 	bl	80039dc <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 800179c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec0 	bl	8000524 <__aeabi_i2d>
 80017a4:	4604      	mov	r4, r0
 80017a6:	460d      	mov	r5, r1
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fea9 	bl	8000504 <__aeabi_ui2d>
 80017b2:	a31d      	add	r3, pc, #116	; (adr r3, 8001828 <ADC_ReadCurrent_Middle+0xb8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff1e 	bl	80005f8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd62 	bl	800028c <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	a317      	add	r3, pc, #92	; (adr r3, 8001830 <ADC_ReadCurrent_Middle+0xc0>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7ff f839 	bl	800084c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f9e1 	bl	8000ba8 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017ec:	871a      	strh	r2, [r3, #56]	; 0x38
	Current_motor[3]=Fingers_Status.Middle.Current;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 80017f6:	60da      	str	r2, [r3, #12]
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017fc:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001800:	4293      	cmp	r3, r2
 8001802:	d804      	bhi.n	800180e <ADC_ReadCurrent_Middle+0x9e>
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 8001806:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001808:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800180c:	d204      	bcs.n	8001818 <ADC_ReadCurrent_Middle+0xa8>
		Fingers_Status.Middle.Stuck_Finger=1;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001816:	e004      	b.n	8001822 <ADC_ReadCurrent_Middle+0xb2>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
 8001826:	bf00      	nop
 8001828:	47ae147b 	.word	0x47ae147b
 800182c:	3f847ae1 	.word	0x3f847ae1
 8001830:	c28f5c29 	.word	0xc28f5c29
 8001834:	3ff028f5 	.word	0x3ff028f5
 8001838:	200002f4 	.word	0x200002f4
 800183c:	20001644 	.word	0x20001644
 8001840:	200015e0 	.word	0x200015e0

08001844 <ADC_Select_Index_CH>:
void ADC_Select_Index_CH (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	463b      	mov	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <ADC_Select_Index_CH+0x48>)
 800185c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185e:	2306      	movs	r3, #6
 8001860:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001862:	2306      	movs	r3, #6
 8001864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001866:	b672      	cpsid	i
}
 8001868:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <ADC_Select_Index_CH+0x4c>)
 8001870:	f002 f9ce 	bl	8003c10 <HAL_ADC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <ADC_Select_Index_CH+0x3a>
	  {
	    Error_Handler();
 800187a:	f000 fbf5 	bl	8002068 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 800187e:	b662      	cpsie	i
}
 8001880:	bf00      	nop
	  }
	  __enable_irq();
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08600004 	.word	0x08600004
 8001890:	200002f4 	.word	0x200002f4
 8001894:	00000000 	.word	0x00000000

08001898 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	af00      	add	r7, sp, #0
	ADC_Select_Index_CH();
 800189c:	f7ff ffd2 	bl	8001844 <ADC_Select_Index_CH>
	HAL_ADC_Start(&hadc2);
 80018a0:	482f      	ldr	r0, [pc, #188]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018a2:	f001 ffe1 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80018a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018ac:	f002 f8ca 	bl	8003a44 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc2);
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018b2:	f002 f99f 	bl	8003bf4 <HAL_ADC_GetValue>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 80018ba:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc2);
 80018bc:	4828      	ldr	r0, [pc, #160]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018be:	f002 f88d 	bl	80039dc <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 80018c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe15 	bl	8000504 <__aeabi_ui2d>
 80018da:	a31d      	add	r3, pc, #116	; (adr r3, 8001950 <ADC_ReadCurrent_Index+0xb8>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe8a 	bl	80005f8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe fcce 	bl	800028c <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <ADC_ReadCurrent_Index+0xc0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffa5 	bl	800084c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f94d 	bl	8000ba8 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001914:	849a      	strh	r2, [r3, #36]	; 0x24
	Current_motor[4]=Fingers_Status.Index.Current;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800191a:	461a      	mov	r2, r3
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 800191e:	611a      	str	r2, [r3, #16]
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001924:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001928:	4293      	cmp	r3, r2
 800192a:	d804      	bhi.n	8001936 <ADC_ReadCurrent_Index+0x9e>
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 800192e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001930:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001934:	d204      	bcs.n	8001940 <ADC_ReadCurrent_Index+0xa8>
		Fingers_Status.Index.Stuck_Finger=1;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800193e:	e004      	b.n	800194a <ADC_ReadCurrent_Index+0xb2>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f847ae1 	.word	0x3f847ae1
 8001958:	c28f5c29 	.word	0xc28f5c29
 800195c:	3ff028f5 	.word	0x3ff028f5
 8001960:	200002f4 	.word	0x200002f4
 8001964:	20001644 	.word	0x20001644
 8001968:	200015e0 	.word	0x200015e0

0800196c <ADC_Select_Thumb_CH>:
void ADC_Select_Thumb_CH (void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <ADC_Select_Thumb_CH+0x48>)
 8001984:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001986:	2306      	movs	r3, #6
 8001988:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800198a:	2306      	movs	r3, #6
 800198c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800198e:	b672      	cpsid	i
}
 8001990:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <ADC_Select_Thumb_CH+0x4c>)
 8001998:	f002 f93a 	bl	8003c10 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <ADC_Select_Thumb_CH+0x3a>
	  {
	    Error_Handler();
 80019a2:	f000 fb61 	bl	8002068 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80019a6:	b662      	cpsie	i
}
 80019a8:	bf00      	nop
	  }
	  __enable_irq();
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	04300002 	.word	0x04300002
 80019b8:	200002f4 	.word	0x200002f4
 80019bc:	00000000 	.word	0x00000000

080019c0 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	ADC_Select_Thumb_CH();
 80019c4:	f7ff ffd2 	bl	800196c <ADC_Select_Thumb_CH>
	HAL_ADC_Start(&hadc2);
 80019c8:	482f      	ldr	r0, [pc, #188]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019ca:	f001 ff4d 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80019ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d2:	482d      	ldr	r0, [pc, #180]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019d4:	f002 f836 	bl	8003a44 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc2);
 80019d8:	482b      	ldr	r0, [pc, #172]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019da:	f002 f90b 	bl	8003bf4 <HAL_ADC_GetValue>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 80019e2:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc2);
 80019e4:	4828      	ldr	r0, [pc, #160]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019e6:	f001 fff9 	bl	80039dc <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 80019ec:	8a1b      	ldrh	r3, [r3, #16]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd81 	bl	8000504 <__aeabi_ui2d>
 8001a02:	a31d      	add	r3, pc, #116	; (adr r3, 8001a78 <ADC_ReadCurrent_Thumb+0xb8>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc3a 	bl	800028c <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	a317      	add	r3, pc, #92	; (adr r3, 8001a80 <ADC_ReadCurrent_Thumb+0xc0>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe ff11 	bl	800084c <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8b9 	bl	8000ba8 <__aeabi_d2uiz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a3c:	821a      	strh	r2, [r3, #16]
	Current_motor[5]=Fingers_Status.Thumb.Current;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a40:	8a1b      	ldrh	r3, [r3, #16]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 8001a46:	615a      	str	r2, [r3, #20]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a4a:	8a1b      	ldrh	r3, [r3, #16]
 8001a4c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d804      	bhi.n	8001a5e <ADC_ReadCurrent_Thumb+0x9e>
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a56:	8a1b      	ldrh	r3, [r3, #16]
 8001a58:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a5c:	d203      	bcs.n	8001a66 <ADC_ReadCurrent_Thumb+0xa6>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	735a      	strb	r2, [r3, #13]
 8001a64:	e003      	b.n	8001a6e <ADC_ReadCurrent_Thumb+0xae>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	735a      	strb	r2, [r3, #13]
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	47ae147b 	.word	0x47ae147b
 8001a7c:	3f847ae1 	.word	0x3f847ae1
 8001a80:	c28f5c29 	.word	0xc28f5c29
 8001a84:	3ff028f5 	.word	0x3ff028f5
 8001a88:	200002f4 	.word	0x200002f4
 8001a8c:	20001644 	.word	0x20001644
 8001a90:	200015e0 	.word	0x200015e0

08001a94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <MX_CAN1_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ab6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ae4:	f002 fefe 	bl	80048e4 <HAL_CAN_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001aee:	f000 fabb 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000035c 	.word	0x2000035c
 8001afc:	40006400 	.word	0x40006400

08001b00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_CAN_MspInit+0x80>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d129      	bne.n	8001b76 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b64:	2309      	movs	r3, #9
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f003 f895 	bl	8004ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40006400 	.word	0x40006400
 8001b84:	40021000 	.word	0x40021000

08001b88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_T */
  ThumbFinger_THandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_T_attributes);
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_FREERTOS_Init+0x68>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <MX_FREERTOS_Init+0x6c>)
 8001b92:	f006 ffcf 	bl	8008b34 <osThreadNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_FREERTOS_Init+0x70>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_T */
  IndexFinger_THandle = osThreadNew(IndexFinger, NULL, &IndexFinger_T_attributes);
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <MX_FREERTOS_Init+0x74>)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4817      	ldr	r0, [pc, #92]	; (8001c00 <MX_FREERTOS_Init+0x78>)
 8001ba2:	f006 ffc7 	bl	8008b34 <osThreadNew>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <MX_FREERTOS_Init+0x7c>)
 8001baa:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_T */
  MiddleFinger_THandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_T_attributes);
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <MX_FREERTOS_Init+0x80>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <MX_FREERTOS_Init+0x84>)
 8001bb2:	f006 ffbf 	bl	8008b34 <osThreadNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <MX_FREERTOS_Init+0x88>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* creation of RingFinger_T */
  RingFinger_THandle = osThreadNew(RingFinger, NULL, &RingFinger_T_attributes);
 8001bbc:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <MX_FREERTOS_Init+0x8c>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_FREERTOS_Init+0x90>)
 8001bc2:	f006 ffb7 	bl	8008b34 <osThreadNew>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <MX_FREERTOS_Init+0x94>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_T */
  PinkyFinger_THandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_T_attributes);
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <MX_FREERTOS_Init+0x98>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_FREERTOS_Init+0x9c>)
 8001bd2:	f006 ffaf 	bl	8008b34 <osThreadNew>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <MX_FREERTOS_Init+0xa0>)
 8001bda:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <MX_FREERTOS_Init+0xa4>)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_FREERTOS_Init+0xa8>)
 8001be2:	f006 ffa7 	bl	8008b34 <osThreadNew>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_FREERTOS_Init+0xac>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	0800f980 	.word	0x0800f980
 8001bf4:	08001c39 	.word	0x08001c39
 8001bf8:	20000384 	.word	0x20000384
 8001bfc:	0800f9a4 	.word	0x0800f9a4
 8001c00:	08001c59 	.word	0x08001c59
 8001c04:	20000630 	.word	0x20000630
 8001c08:	0800f9c8 	.word	0x0800f9c8
 8001c0c:	08001c79 	.word	0x08001c79
 8001c10:	200008dc 	.word	0x200008dc
 8001c14:	0800f9ec 	.word	0x0800f9ec
 8001c18:	08001c99 	.word	0x08001c99
 8001c1c:	20000b88 	.word	0x20000b88
 8001c20:	0800fa10 	.word	0x0800fa10
 8001c24:	08001cb9 	.word	0x08001cb9
 8001c28:	20000e34 	.word	0x20000e34
 8001c2c:	0800fa34 	.word	0x0800fa34
 8001c30:	08001cd9 	.word	0x08001cd9
 8001c34:	200010e0 	.word	0x200010e0

08001c38 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Thumb.Stuck_Finger)
//			Fingers_Status.Thumb.Direction=Stop;
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <ThumbFinger+0x1c>)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 fff4 	bl	8002c30 <SetMotor>
		ADC_ReadCurrent_Thumb();
 8001c48:	f7ff feba 	bl	80019c0 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f007 f803 	bl	8008c58 <osDelay>
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001c52:	e7f5      	b.n	8001c40 <ThumbFinger+0x8>
 8001c54:	200015e0 	.word	0x200015e0

08001c58 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Index.Stuck_Finger)
//			Fingers_Status.Index.Direction=Stop;
		SetMotor(Index, &Fingers_Status.Index);
 8001c60:	4904      	ldr	r1, [pc, #16]	; (8001c74 <IndexFinger+0x1c>)
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 ffe4 	bl	8002c30 <SetMotor>
		ADC_ReadCurrent_Index();
 8001c68:	f7ff fe16 	bl	8001898 <ADC_ReadCurrent_Index>
		osDelay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f006 fff3 	bl	8008c58 <osDelay>
		SetMotor(Index, &Fingers_Status.Index);
 8001c72:	e7f5      	b.n	8001c60 <IndexFinger+0x8>
 8001c74:	200015f4 	.word	0x200015f4

08001c78 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Middle.Stuck_Finger)
//			Fingers_Status.Middle.Direction=Stop;
		SetMotor(Middle, &Fingers_Status.Middle);
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <MiddleFinger+0x1c>)
 8001c82:	2002      	movs	r0, #2
 8001c84:	f000 ffd4 	bl	8002c30 <SetMotor>
		ADC_ReadCurrent_Middle();
 8001c88:	f7ff fd72 	bl	8001770 <ADC_ReadCurrent_Middle>
		osDelay(1);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f006 ffe3 	bl	8008c58 <osDelay>
		SetMotor(Middle, &Fingers_Status.Middle);
 8001c92:	e7f5      	b.n	8001c80 <MiddleFinger+0x8>
 8001c94:	20001608 	.word	0x20001608

08001c98 <RingFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RingFinger */
void RingFinger(void *argument)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Ring.Stuck_Finger)
//			Fingers_Status.Ring.Direction=Stop;
		SetMotor(Ring, &Fingers_Status.Ring);
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <RingFinger+0x1c>)
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f000 ffc4 	bl	8002c30 <SetMotor>
		ADC_ReadCurrent_Ring();
 8001ca8:	f7ff fcca 	bl	8001640 <ADC_ReadCurrent_Ring>
		osDelay(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f006 ffd3 	bl	8008c58 <osDelay>
		SetMotor(Ring, &Fingers_Status.Ring);
 8001cb2:	e7f5      	b.n	8001ca0 <RingFinger+0x8>
 8001cb4:	2000161c 	.word	0x2000161c

08001cb8 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Pinky.Stuck_Finger)
//			Fingers_Status.Pinky.Direction=Stop;
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <PinkyFinger+0x1c>)
 8001cc2:	2004      	movs	r0, #4
 8001cc4:	f000 ffb4 	bl	8002c30 <SetMotor>
		ADC_ReadCurrent_Pinky();
 8001cc8:	f7ff fc22 	bl	8001510 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f006 ffc3 	bl	8008c58 <osDelay>
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001cd2:	e7f5      	b.n	8001cc0 <PinkyFinger+0x8>
 8001cd4:	20001630 	.word	0x20001630

08001cd8 <CommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b094      	sub	sp, #80	; 0x50
 8001cdc:	af04      	add	r7, sp, #16
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommunicationTask */
	char uartTX[50];
	/* Infinite loop */
	for(;;)
	{
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <CommunicationTask+0x114>)
 8001ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001ce6:	461c      	mov	r4, r3
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <CommunicationTask+0x114>)
 8001cea:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <CommunicationTask+0x114>)
 8001cf2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <CommunicationTask+0x114>)
 8001cf8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <CommunicationTask+0x114>)
 8001cfe:	8a1b      	ldrh	r3, [r3, #16]
 8001d00:	f107 000c 	add.w	r0, r7, #12
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	9101      	str	r1, [sp, #4]
 8001d08:	9200      	str	r2, [sp, #0]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	4938      	ldr	r1, [pc, #224]	; (8001df0 <CommunicationTask+0x118>)
 8001d10:	f00a ff78 	bl	800cc04 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe faa9 	bl	8000270 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f107 010c 	add.w	r1, r7, #12
 8001d26:	2305      	movs	r3, #5
 8001d28:	4832      	ldr	r0, [pc, #200]	; (8001df4 <CommunicationTask+0x11c>)
 8001d2a:	f005 fe43 	bl	80079b4 <HAL_UART_Transmit>
		osDelay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f006 ff92 	bl	8008c58 <osDelay>
		sprintf(uartTX,"{PP:%dPR:%dPM:%dPI:%dPT:%d}\n",((uint16_t)(Fingers_Status.Pinky.position*100)),((uint16_t)(Fingers_Status.Ring.position*100)),((uint16_t)(Fingers_Status.Middle.position*100)),((uint16_t)(Fingers_Status.Index.position*100)),((uint16_t)(Fingers_Status.Thumb.position*100)));
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <CommunicationTask+0x114>)
 8001d36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001d3a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001df8 <CommunicationTask+0x120>
 8001d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d46:	ee17 3a90 	vmov	r3, s15
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <CommunicationTask+0x114>)
 8001d50:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d54:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001df8 <CommunicationTask+0x120>
 8001d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d60:	ee17 3a90 	vmov	r3, s15
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	461d      	mov	r5, r3
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <CommunicationTask+0x114>)
 8001d6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d6e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001df8 <CommunicationTask+0x120>
 8001d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7a:	ee17 3a90 	vmov	r3, s15
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <CommunicationTask+0x114>)
 8001d84:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d88:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001df8 <CommunicationTask+0x120>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <CommunicationTask+0x114>)
 8001d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001df8 <CommunicationTask+0x120>
 8001da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dae:	ee17 3a90 	vmov	r3, s15
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f107 000c 	add.w	r0, r7, #12
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	9101      	str	r1, [sp, #4]
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <CommunicationTask+0x124>)
 8001dc4:	f00a ff1e 	bl	800cc04 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa4f 	bl	8000270 <strlen>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f107 010c 	add.w	r1, r7, #12
 8001dda:	2305      	movs	r3, #5
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <CommunicationTask+0x11c>)
 8001dde:	f005 fde9 	bl	80079b4 <HAL_UART_Transmit>
		osDelay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f006 ff38 	bl	8008c58 <osDelay>
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001de8:	e77a      	b.n	8001ce0 <CommunicationTask+0x8>
 8001dea:	bf00      	nop
 8001dec:	200015e0 	.word	0x200015e0
 8001df0:	0800f928 	.word	0x0800f928
 8001df4:	20001558 	.word	0x20001558
 8001df8:	42c80000 	.word	0x42c80000
 8001dfc:	0800f948 	.word	0x0800f948

08001e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e7c:	481f      	ldr	r0, [pc, #124]	; (8001efc <MX_GPIO_Init+0xfc>)
 8001e7e:	f003 f8b9 	bl	8004ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <MX_GPIO_Init+0xfc>)
 8001e9c:	f002 ff00 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001ea0:	2330      	movs	r3, #48	; 0x30
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4812      	ldr	r0, [pc, #72]	; (8001efc <MX_GPIO_Init+0xfc>)
 8001eb4:	f002 fef4 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001eb8:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001ebc:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <MX_GPIO_Init+0x100>)
 8001ece:	f002 fee7 	bl	8004ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f002 fed9 	bl	8004ca0 <HAL_GPIO_Init>

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000800 	.word	0x48000800
 8001f00:	48000400 	.word	0x48000400

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f08:	f001 f8f3 	bl	80030f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0c:	f000 f81f 	bl	8001f4e <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f10:	f000 f86c 	bl	8001fec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f14:	f7ff ff74 	bl	8001e00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f18:	f7ff f944 	bl	80011a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f1c:	f7ff f9b8 	bl	8001290 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001f20:	f7ff fdb8 	bl	8001a94 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001f24:	f000 fa40 	bl	80023a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f28:	f000 fad8 	bl	80024dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f2c:	f000 fb3a 	bl	80025a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f30:	f000 fb9c 	bl	800266c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001f34:	f000 fbfe 	bl	8002734 <MX_TIM8_Init>
  MX_UART4_Init();
 8001f38:	f000 fdce 	bl	8002ad8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  init_motor_controller();
 8001f3c:	f001 f82c 	bl	8002f98 <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f40:	f006 fdae 	bl	8008aa0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f44:	f7ff fe20 	bl	8001b88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f48:	f006 fdce 	bl	8008ae8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <main+0x48>

08001f4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b096      	sub	sp, #88	; 0x58
 8001f52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2244      	movs	r2, #68	; 0x44
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00a feb4 	bl	800ccca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f62:	463b      	mov	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f74:	f003 f864 	bl	8005040 <HAL_PWREx_ControlVoltageScaling>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f7e:	f000 f873 	bl	8002068 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f90:	2303      	movs	r3, #3
 8001f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001f98:	2314      	movs	r3, #20
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 f89d 	bl	80050ec <HAL_RCC_OscConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fb8:	f000 f856 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fc65 	bl	80058a4 <HAL_RCC_ClockConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fe0:	f000 f842 	bl	8002068 <Error_Handler>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3758      	adds	r7, #88	; 0x58
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0a2      	sub	sp, #136	; 0x88
 8001ff0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2288      	movs	r2, #136	; 0x88
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00a fe66 	bl	800ccca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002002:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002008:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800200a:	2303      	movs	r3, #3
 800200c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002012:	2308      	movs	r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002016:	2307      	movs	r3, #7
 8002018:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002026:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fe90 	bl	8005d50 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002036:	f000 f817 	bl	8002068 <Error_Handler>
  }
}
 800203a:	bf00      	nop
 800203c:	3788      	adds	r7, #136	; 0x88
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002056:	f001 f865 	bl	8003124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40001400 	.word	0x40001400

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	e7fe      	b.n	8002070 <Error_Handler+0x8>
	...

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_MspInit+0x4c>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_MspInit+0x4c>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6613      	str	r3, [r2, #96]	; 0x60
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_MspInit+0x4c>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_MspInit+0x4c>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_MspInit+0x4c>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_MspInit+0x4c>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	210f      	movs	r1, #15
 80020ae:	f06f 0001 	mvn.w	r0, #1
 80020b2:	f002 fdcb 	bl	8004c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_InitTick+0xe0>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_InitTick+0xe0>)
 80020d8:	f043 0320 	orr.w	r3, r3, #32
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_InitTick+0xe0>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ea:	f107 0210 	add.w	r2, r7, #16
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fd99 	bl	8005c2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d103      	bne.n	800210c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002104:	f003 fd66 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8002108:	6378      	str	r0, [r7, #52]	; 0x34
 800210a:	e004      	b.n	8002116 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800210c:	f003 fd62 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8002110:	4603      	mov	r3, r0
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_InitTick+0xe4>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	3b01      	subs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_InitTick+0xe8>)
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <HAL_InitTick+0xec>)
 8002128:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_InitTick+0xe8>)
 800212c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002130:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_InitTick+0xe8>)
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_InitTick+0xe8>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_InitTick+0xe8>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_InitTick+0xe8>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800214a:	4818      	ldr	r0, [pc, #96]	; (80021ac <HAL_InitTick+0xe8>)
 800214c:	f004 fabc 	bl	80066c8 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800215a:	2b00      	cmp	r3, #0
 800215c:	d11b      	bne.n	8002196 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800215e:	4813      	ldr	r0, [pc, #76]	; (80021ac <HAL_InitTick+0xe8>)
 8002160:	f004 fb14 	bl	800678c <HAL_TIM_Base_Start_IT>
 8002164:	4603      	mov	r3, r0
 8002166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800216a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800216e:	2b00      	cmp	r3, #0
 8002170:	d111      	bne.n	8002196 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002172:	2037      	movs	r0, #55	; 0x37
 8002174:	f002 fd86 	bl	8004c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	d808      	bhi.n	8002190 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800217e:	2200      	movs	r2, #0
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	2037      	movs	r0, #55	; 0x37
 8002184:	f002 fd62 	bl	8004c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_InitTick+0xf0>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e002      	b.n	8002196 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002196:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800219a:	4618      	mov	r0, r3
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	431bde83 	.word	0x431bde83
 80021ac:	2000138c 	.word	0x2000138c
 80021b0:	40001400 	.word	0x40001400
 80021b4:	20000004 	.word	0x20000004

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM7_IRQHandler+0x10>)
 80021ea:	f004 fc9d 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000138c 	.word	0x2000138c

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_kill>:

int _kill(int pid, int sig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002212:	f00a fe15 	bl	800ce40 <__errno>
 8002216:	4603      	mov	r3, r0
 8002218:	2216      	movs	r2, #22
 800221a:	601a      	str	r2, [r3, #0]
	return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_exit>:

void _exit (int status)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffe7 	bl	8002208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800223a:	e7fe      	b.n	800223a <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
	}

return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
	}
	return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d6:	605a      	str	r2, [r3, #4]
	return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_isatty>:

int _isatty(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <_sbrk+0x5c>)
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <_sbrk+0x60>)
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x64>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <_sbrk+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002348:	f00a fd7a 	bl	800ce40 <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e009      	b.n	800236c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <_sbrk+0x64>)
 8002368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20018000 	.word	0x20018000
 8002378:	00000400 	.word	0x00000400
 800237c:	200013d8 	.word	0x200013d8
 8002380:	20003188 	.word	0x20003188

08002384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <SystemInit+0x20>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <SystemInit+0x20>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b096      	sub	sp, #88	; 0x58
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	222c      	movs	r2, #44	; 0x2c
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f00a fc78 	bl	800ccca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023dc:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <MX_TIM1_Init+0x130>)
 80023de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80023e0:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023e2:	2218      	movs	r2, #24
 80023e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023ee:	2263      	movs	r2, #99	; 0x63
 80023f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fe:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <MX_TIM1_Init+0x12c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002404:	4833      	ldr	r0, [pc, #204]	; (80024d4 <MX_TIM1_Init+0x12c>)
 8002406:	f004 fa31 	bl	800686c <HAL_TIM_PWM_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002410:	f7ff fe2a 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002424:	4619      	mov	r1, r3
 8002426:	482b      	ldr	r0, [pc, #172]	; (80024d4 <MX_TIM1_Init+0x12c>)
 8002428:	f005 f952 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002432:	f7ff fe19 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	; 0x60
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002442:	2300      	movs	r3, #0
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002446:	2304      	movs	r3, #4
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	481e      	ldr	r0, [pc, #120]	; (80024d4 <MX_TIM1_Init+0x12c>)
 800245c:	f004 fc66 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002466:	f7ff fdff 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800246a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800246e:	2204      	movs	r2, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4818      	ldr	r0, [pc, #96]	; (80024d4 <MX_TIM1_Init+0x12c>)
 8002474:	f004 fc5a 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800247e:	f7ff fdf3 	bl	8002068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80024b8:	f005 f992 	bl	80077e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80024c2:	f7ff fdd1 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <MX_TIM1_Init+0x12c>)
 80024c8:	f000 fa3c 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80024cc:	bf00      	nop
 80024ce:	3758      	adds	r7, #88	; 0x58
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200013dc 	.word	0x200013dc
 80024d8:	40012c00 	.word	0x40012c00

080024dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	f107 031c 	add.w	r3, r7, #28
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ee:	463b      	mov	r3, r7
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <MX_TIM2_Init+0xc4>)
 800250a:	2218      	movs	r2, #24
 800250c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002516:	2263      	movs	r2, #99	; 0x63
 8002518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <MX_TIM2_Init+0xc4>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002526:	481e      	ldr	r0, [pc, #120]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002528:	f004 f9a0 	bl	800686c <HAL_TIM_PWM_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002532:	f7ff fd99 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	4619      	mov	r1, r3
 8002544:	4816      	ldr	r0, [pc, #88]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002546:	f005 f8c3 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002550:	f7ff fd8a 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002554:	2360      	movs	r3, #96	; 0x60
 8002556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002560:	2304      	movs	r3, #4
 8002562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002564:	463b      	mov	r3, r7
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_TIM2_Init+0xc4>)
 800256c:	f004 fbde 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002576:	f7ff fd77 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	220c      	movs	r2, #12
 800257e:	4619      	mov	r1, r3
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002582:	f004 fbd3 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800258c:	f7ff fd6c 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <MX_TIM2_Init+0xc4>)
 8002592:	f000 f9d7 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20001428 	.word	0x20001428

080025a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b6:	463b      	mov	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <MX_TIM3_Init+0xc4>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025d0:	2218      	movs	r2, #24
 80025d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025dc:	2263      	movs	r2, #99	; 0x63
 80025de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ec:	481d      	ldr	r0, [pc, #116]	; (8002664 <MX_TIM3_Init+0xc0>)
 80025ee:	f004 f93d 	bl	800686c <HAL_TIM_PWM_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025f8:	f7ff fd36 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4619      	mov	r1, r3
 800260a:	4816      	ldr	r0, [pc, #88]	; (8002664 <MX_TIM3_Init+0xc0>)
 800260c:	f005 f860 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002616:	f7ff fd27 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261a:	2360      	movs	r3, #96	; 0x60
 800261c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002626:	2304      	movs	r3, #4
 8002628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262a:	463b      	mov	r3, r7
 800262c:	2200      	movs	r2, #0
 800262e:	4619      	mov	r1, r3
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <MX_TIM3_Init+0xc0>)
 8002632:	f004 fb7b 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800263c:	f7ff fd14 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002640:	463b      	mov	r3, r7
 8002642:	2204      	movs	r2, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4807      	ldr	r0, [pc, #28]	; (8002664 <MX_TIM3_Init+0xc0>)
 8002648:	f004 fb70 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002652:	f7ff fd09 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002656:	4803      	ldr	r0, [pc, #12]	; (8002664 <MX_TIM3_Init+0xc0>)
 8002658:	f000 f974 	bl	8002944 <HAL_TIM_MspPostInit>

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20001474 	.word	0x20001474
 8002668:	40000400 	.word	0x40000400

0800266c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800267e:	463b      	mov	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002690:	4b26      	ldr	r3, [pc, #152]	; (800272c <MX_TIM4_Init+0xc0>)
 8002692:	4a27      	ldr	r2, [pc, #156]	; (8002730 <MX_TIM4_Init+0xc4>)
 8002694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <MX_TIM4_Init+0xc0>)
 8002698:	2218      	movs	r2, #24
 800269a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <MX_TIM4_Init+0xc0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_TIM4_Init+0xc0>)
 80026a4:	2263      	movs	r2, #99	; 0x63
 80026a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <MX_TIM4_Init+0xc0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_TIM4_Init+0xc0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026b4:	481d      	ldr	r0, [pc, #116]	; (800272c <MX_TIM4_Init+0xc0>)
 80026b6:	f004 f8d9 	bl	800686c <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80026c0:	f7ff fcd2 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4816      	ldr	r0, [pc, #88]	; (800272c <MX_TIM4_Init+0xc0>)
 80026d4:	f004 fffc 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80026de:	f7ff fcc3 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	; 0x60
 80026e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80026ee:	2304      	movs	r3, #4
 80026f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_TIM4_Init+0xc0>)
 80026fa:	f004 fb17 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002704:	f7ff fcb0 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	2204      	movs	r2, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4807      	ldr	r0, [pc, #28]	; (800272c <MX_TIM4_Init+0xc0>)
 8002710:	f004 fb0c 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800271a:	f7ff fca5 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800271e:	4803      	ldr	r0, [pc, #12]	; (800272c <MX_TIM4_Init+0xc0>)
 8002720:	f000 f910 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200014c0 	.word	0x200014c0
 8002730:	40000800 	.word	0x40000800

08002734 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b096      	sub	sp, #88	; 0x58
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	615a      	str	r2, [r3, #20]
 8002758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	222c      	movs	r2, #44	; 0x2c
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f00a fab2 	bl	800ccca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002768:	4a3e      	ldr	r2, [pc, #248]	; (8002864 <MX_TIM8_Init+0x130>)
 800276a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <MX_TIM8_Init+0x12c>)
 800276e:	2218      	movs	r2, #24
 8002770:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <MX_TIM8_Init+0x12c>)
 800277a:	2263      	movs	r2, #99	; 0x63
 800277c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b35      	ldr	r3, [pc, #212]	; (8002860 <MX_TIM8_Init+0x12c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002790:	4833      	ldr	r0, [pc, #204]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002792:	f004 f86b 	bl	800686c <HAL_TIM_PWM_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800279c:	f7ff fc64 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027b0:	4619      	mov	r1, r3
 80027b2:	482b      	ldr	r0, [pc, #172]	; (8002860 <MX_TIM8_Init+0x12c>)
 80027b4:	f004 ff8c 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80027be:	f7ff fc53 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c2:	2360      	movs	r3, #96	; 0x60
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ca:	2300      	movs	r3, #0
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80027d2:	2304      	movs	r3, #4
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e2:	2200      	movs	r2, #0
 80027e4:	4619      	mov	r1, r3
 80027e6:	481e      	ldr	r0, [pc, #120]	; (8002860 <MX_TIM8_Init+0x12c>)
 80027e8:	f004 faa0 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80027f2:	f7ff fc39 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fa:	2204      	movs	r2, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4818      	ldr	r0, [pc, #96]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002800:	f004 fa94 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800280a:	f7ff fc2d 	bl	8002068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002844:	f004 ffcc 	bl	80077e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800284e:	f7ff fc0b 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM8_Init+0x12c>)
 8002854:	f000 f876 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8002858:	bf00      	nop
 800285a:	3758      	adds	r7, #88	; 0x58
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	2000150c 	.word	0x2000150c
 8002864:	40013400 	.word	0x40013400

08002868 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <HAL_TIM_PWM_MspInit+0xc8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10c      	bne.n	8002894 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 8002880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002884:	6613      	str	r3, [r2, #96]	; 0x60
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002892:	e046      	b.n	8002922 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d10c      	bne.n	80028b8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6593      	str	r3, [r2, #88]	; 0x58
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	e034      	b.n	8002922 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <HAL_TIM_PWM_MspInit+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10c      	bne.n	80028dc <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
}
 80028da:	e022      	b.n	8002922 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_PWM_MspInit+0xd4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10c      	bne.n	8002900 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
}
 80028fe:	e010      	b.n	8002922 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_TIM_PWM_MspInit+0xd8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10b      	bne.n	8002922 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 8002910:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002914:	6613      	str	r3, [r2, #96]	; 0x60
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_TIM_PWM_MspInit+0xcc>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	bf00      	nop
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40013400 	.word	0x40013400

08002944 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a56      	ldr	r2, [pc, #344]	; (8002abc <HAL_TIM_MspPostInit+0x178>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11e      	bne.n	80029a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 800297e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002990:	2301      	movs	r3, #1
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299e:	f002 f97f 	bl	8004ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80029a2:	e087      	b.n	8002ab4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d11d      	bne.n	80029ea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	4b44      	ldr	r3, [pc, #272]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a43      	ldr	r2, [pc, #268]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 80029c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4838      	ldr	r0, [pc, #224]	; (8002ac4 <HAL_TIM_MspPostInit+0x180>)
 80029e4:	f002 f95c 	bl	8004ca0 <HAL_GPIO_Init>
}
 80029e8:	e064      	b.n	8002ab4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <HAL_TIM_MspPostInit+0x184>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d11c      	bne.n	8002a2e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a00:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 8002a0c:	2330      	movs	r3, #48	; 0x30
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	4827      	ldr	r0, [pc, #156]	; (8002ac4 <HAL_TIM_MspPostInit+0x180>)
 8002a28:	f002 f93a 	bl	8004ca0 <HAL_GPIO_Init>
}
 8002a2c:	e042      	b.n	8002ab4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_TIM_MspPostInit+0x188>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d11c      	bne.n	8002a72 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 8002a50:	23c0      	movs	r3, #192	; 0xc0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a60:	2302      	movs	r3, #2
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4816      	ldr	r0, [pc, #88]	; (8002ac4 <HAL_TIM_MspPostInit+0x180>)
 8002a6c:	f002 f918 	bl	8004ca0 <HAL_GPIO_Init>
}
 8002a70:	e020      	b.n	8002ab4 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_TIM_MspPostInit+0x18c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_TIM_MspPostInit+0x17c>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8002a94:	23c0      	movs	r3, #192	; 0xc0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <HAL_TIM_MspPostInit+0x190>)
 8002ab0:	f002 f8f6 	bl	8004ca0 <HAL_GPIO_Init>
}
 8002ab4:	bf00      	nop
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	48000800 	.word	0x48000800

08002ad8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_UART4_Init+0x58>)
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <MX_UART4_Init+0x5c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <MX_UART4_Init+0x58>)
 8002ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_UART4_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_UART4_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_UART4_Init+0x58>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_UART4_Init+0x58>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b1c:	f004 fefc 	bl	8007918 <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002b26:	f7ff fa9f 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001558 	.word	0x20001558
 8002b34:	40004c00 	.word	0x40004c00

08002b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0ac      	sub	sp, #176	; 0xb0
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2288      	movs	r2, #136	; 0x88
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00a f8b6 	bl	800ccca <memset>
  if(uartHandle->Instance==UART4)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_UART_MspInit+0xb0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d13b      	bne.n	8002be0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f8eb 	bl	8005d50 <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b80:	f7ff fa72 	bl	8002068 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	4a12      	ldr	r2, [pc, #72]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_UART_MspInit+0xb4>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_TX_ESP_RX_Pin|MCU_RX_ESP_TX_Pin;
 8002bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <HAL_UART_MspInit+0xb8>)
 8002bdc:	f002 f860 	bl	8004ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002be0:	bf00      	nop
 8002be2:	37b0      	adds	r7, #176	; 0xb0
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40004c00 	.word	0x40004c00
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	48000800 	.word	0x48000800

08002bf4 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <SetMotor>:
	}
}
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	f200 819f 	bhi.w	8002f82 <SetMotor+0x352>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <SetMotor+0x1c>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c61 	.word	0x08002c61
 8002c50:	08002ced 	.word	0x08002ced
 8002c54:	08002d81 	.word	0x08002d81
 8002c58:	08002e1d 	.word	0x08002e1d
 8002c5c:	08002eb1 	.word	0x08002eb1
	case Thumb :
		if ( FingerStruct->Direction== Open) {
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7a9b      	ldrb	r3, [r3, #10]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10e      	bne.n	8002c86 <SetMotor+0x56>
			htim3.Instance->CCR1 = FingerStruct->speed;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7b9a      	ldrb	r2, [r3, #14]
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	; (8002edc <SetMotor+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8002c72:	4b9a      	ldr	r3, [pc, #616]	; (8002edc <SetMotor+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor5_GPIO_Port, IN1_Motor5_Pin,0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	4898      	ldr	r0, [pc, #608]	; (8002ee0 <SetMotor+0x2b0>)
 8002c80:	f002 f9b8 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002c84:	e024      	b.n	8002cd0 <SetMotor+0xa0>
		} else if (FingerStruct->Direction == Close) {
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7a9b      	ldrb	r3, [r3, #10]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d10e      	bne.n	8002cac <SetMotor+0x7c>
			htim3.Instance->CCR2 = FingerStruct->speed;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	7b9a      	ldrb	r2, [r3, #14]
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <SetMotor+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 8002c98:	4b90      	ldr	r3, [pc, #576]	; (8002edc <SetMotor+0x2ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor5_GPIO_Port, IN2_Motor5_Pin,0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	488e      	ldr	r0, [pc, #568]	; (8002ee0 <SetMotor+0x2b0>)
 8002ca6:	f002 f9a5 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002caa:	e011      	b.n	8002cd0 <SetMotor+0xa0>
		} else {
			htim3.Instance->CCR1 =0;
 8002cac:	4b8b      	ldr	r3, [pc, #556]	; (8002edc <SetMotor+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <SetMotor+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor5_GPIO_Port, IN2_Motor5_Pin,0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	4887      	ldr	r0, [pc, #540]	; (8002ee0 <SetMotor+0x2b0>)
 8002cc2:	f002 f997 	bl	8004ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor5_GPIO_Port, IN1_Motor5_Pin,0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2120      	movs	r1, #32
 8002cca:	4885      	ldr	r0, [pc, #532]	; (8002ee0 <SetMotor+0x2b0>)
 8002ccc:	f002 f992 	bl	8004ff4 <HAL_GPIO_WritePin>
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	891b      	ldrh	r3, [r3, #8]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002ee4 <SetMotor+0x2b4>
 8002ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002cea:	e14b      	b.n	8002f84 <SetMotor+0x354>
	case Index :
		if ( FingerStruct->Direction== Open) {
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	7a9b      	ldrb	r3, [r3, #10]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10e      	bne.n	8002d12 <SetMotor+0xe2>
			htim4.Instance->CCR1 = FingerStruct->speed;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	7b9a      	ldrb	r2, [r3, #14]
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <SetMotor+0x2b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <SetMotor+0x2b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor4_GPIO_Port, IN1_Motor4_Pin,0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	4875      	ldr	r0, [pc, #468]	; (8002ee0 <SetMotor+0x2b0>)
 8002d0c:	f002 f972 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002d10:	e024      	b.n	8002d5c <SetMotor+0x12c>
		} else if (FingerStruct->Direction == Close) {
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7a9b      	ldrb	r3, [r3, #10]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d10e      	bne.n	8002d38 <SetMotor+0x108>
			htim4.Instance->CCR2 = FingerStruct->speed;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	7b9a      	ldrb	r2, [r3, #14]
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <SetMotor+0x2b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 8002d24:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <SetMotor+0x2b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor4_GPIO_Port, IN2_Motor4_Pin,0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	; 0x40
 8002d30:	486b      	ldr	r0, [pc, #428]	; (8002ee0 <SetMotor+0x2b0>)
 8002d32:	f002 f95f 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002d36:	e011      	b.n	8002d5c <SetMotor+0x12c>
		} else {
			htim4.Instance->CCR1 =0;
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <SetMotor+0x2b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <SetMotor+0x2b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor4_GPIO_Port, IN2_Motor4_Pin,0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	4864      	ldr	r0, [pc, #400]	; (8002ee0 <SetMotor+0x2b0>)
 8002d4e:	f002 f951 	bl	8004ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor4_GPIO_Port, IN1_Motor4_Pin,0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	4862      	ldr	r0, [pc, #392]	; (8002ee0 <SetMotor+0x2b0>)
 8002d58:	f002 f94c 	bl	8004ff4 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	891b      	ldrh	r3, [r3, #8]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d68:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002eec <SetMotor+0x2bc>
 8002d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d70:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002ee4 <SetMotor+0x2b4>
 8002d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002d7e:	e101      	b.n	8002f84 <SetMotor+0x354>
	case Middle :
		if ( FingerStruct->Direction== Open) {
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7a9b      	ldrb	r3, [r3, #10]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10f      	bne.n	8002da8 <SetMotor+0x178>
			htim2.Instance->CCR4 = FingerStruct->speed;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	7b9a      	ldrb	r2, [r3, #14]
 8002d8c:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <SetMotor+0x2c0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 8002d92:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <SetMotor+0x2c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(IN1_Motor3_GPIO_Port, IN1_Motor3_Pin,0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da0:	484f      	ldr	r0, [pc, #316]	; (8002ee0 <SetMotor+0x2b0>)
 8002da2:	f002 f927 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002da6:	e027      	b.n	8002df8 <SetMotor+0x1c8>
		} else if (FingerStruct->Direction == Close) {
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	7a9b      	ldrb	r3, [r3, #10]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d10f      	bne.n	8002dd0 <SetMotor+0x1a0>
			htim2.Instance->CCR3 = FingerStruct->speed;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	7b9a      	ldrb	r2, [r3, #14]
 8002db4:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <SetMotor+0x2c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <SetMotor+0x2c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(IN2_Motor3_GPIO_Port, IN2_Motor3_Pin,0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dc8:	4845      	ldr	r0, [pc, #276]	; (8002ee0 <SetMotor+0x2b0>)
 8002dca:	f002 f913 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002dce:	e013      	b.n	8002df8 <SetMotor+0x1c8>
		} else {
			htim2.Instance->CCR3 =0;
 8002dd0:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <SetMotor+0x2c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <SetMotor+0x2c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(IN2_Motor3_GPIO_Port, IN2_Motor3_Pin,0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de6:	483e      	ldr	r0, [pc, #248]	; (8002ee0 <SetMotor+0x2b0>)
 8002de8:	f002 f904 	bl	8004ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor3_GPIO_Port, IN1_Motor3_Pin,0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df2:	483b      	ldr	r0, [pc, #236]	; (8002ee0 <SetMotor+0x2b0>)
 8002df4:	f002 f8fe 	bl	8004ff4 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	891b      	ldrh	r3, [r3, #8]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002ef4 <SetMotor+0x2c4>
 8002e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002ee4 <SetMotor+0x2b4>
 8002e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002e1a:	e0b3      	b.n	8002f84 <SetMotor+0x354>
	case Ring :
		if ( FingerStruct->Direction== Open) {
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	7a9b      	ldrb	r3, [r3, #10]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10e      	bne.n	8002e42 <SetMotor+0x212>
			htim8.Instance->CCR1 = FingerStruct->speed;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	7b9a      	ldrb	r2, [r3, #14]
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <SetMotor+0x2c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8002e2e:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <SetMotor+0x2c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor2_GPIO_Port, IN1_Motor2_Pin,0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	4830      	ldr	r0, [pc, #192]	; (8002efc <SetMotor+0x2cc>)
 8002e3c:	f002 f8da 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002e40:	e024      	b.n	8002e8c <SetMotor+0x25c>
		} else if (FingerStruct->Direction == Close) {
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7a9b      	ldrb	r3, [r3, #10]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d10e      	bne.n	8002e68 <SetMotor+0x238>
			htim8.Instance->CCR2 = FingerStruct->speed;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	7b9a      	ldrb	r2, [r3, #14]
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <SetMotor+0x2c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <SetMotor+0x2c8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor2_GPIO_Port, IN2_Motor2_Pin,0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	4826      	ldr	r0, [pc, #152]	; (8002efc <SetMotor+0x2cc>)
 8002e62:	f002 f8c7 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002e66:	e011      	b.n	8002e8c <SetMotor+0x25c>
		} else {
			htim8.Instance->CCR1 =0;
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <SetMotor+0x2c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <SetMotor+0x2c8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor2_GPIO_Port, IN2_Motor2_Pin,0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	481f      	ldr	r0, [pc, #124]	; (8002efc <SetMotor+0x2cc>)
 8002e7e:	f002 f8b9 	bl	8004ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor2_GPIO_Port, IN1_Motor2_Pin,0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	481d      	ldr	r0, [pc, #116]	; (8002efc <SetMotor+0x2cc>)
 8002e88:	f002 f8b4 	bl	8004ff4 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	891b      	ldrh	r3, [r3, #8]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e98:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002f00 <SetMotor+0x2d0>
 8002e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ea0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ee4 <SetMotor+0x2b4>
 8002ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002eae:	e069      	b.n	8002f84 <SetMotor+0x354>
	case Pinky :
		if ( FingerStruct->Direction== Open) {
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7a9b      	ldrb	r3, [r3, #10]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d127      	bne.n	8002f08 <SetMotor+0x2d8>
			htim1.Instance->CCR1 = FingerStruct->speed;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7b9a      	ldrb	r2, [r3, #14]
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <SetMotor+0x2d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <SetMotor+0x2d4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor1_GPIO_Port, IN1_Motor1_Pin,0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed4:	f002 f88e 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002ed8:	e041      	b.n	8002f5e <SetMotor+0x32e>
 8002eda:	bf00      	nop
 8002edc:	20001474 	.word	0x20001474
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	42c80000 	.word	0x42c80000
 8002ee8:	200014c0 	.word	0x200014c0
 8002eec:	46d54800 	.word	0x46d54800
 8002ef0:	20001428 	.word	0x20001428
 8002ef4:	46e03800 	.word	0x46e03800
 8002ef8:	2000150c 	.word	0x2000150c
 8002efc:	48000800 	.word	0x48000800
 8002f00:	46d7a000 	.word	0x46d7a000
 8002f04:	200013dc 	.word	0x200013dc
		} else if (FingerStruct->Direction == Close) {
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7a9b      	ldrb	r3, [r3, #10]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d110      	bne.n	8002f32 <SetMotor+0x302>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7b9a      	ldrb	r2, [r3, #14]
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <SetMotor+0x35c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <SetMotor+0x35c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor1_GPIO_Port, IN2_Motor1_Pin,0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2c:	f002 f862 	bl	8004ff4 <HAL_GPIO_WritePin>
 8002f30:	e015      	b.n	8002f5e <SetMotor+0x32e>
		} else {
			htim1.Instance->CCR1 =0;
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <SetMotor+0x35c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <SetMotor+0x35c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor1_GPIO_Port, IN2_Motor1_Pin,0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f4c:	f002 f852 	bl	8004ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor1_GPIO_Port, IN1_Motor1_Pin,0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5a:	f002 f84b 	bl	8004ff4 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	891b      	ldrh	r3, [r3, #8]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f6a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002f90 <SetMotor+0x360>
 8002f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f94 <SetMotor+0x364>
 8002f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002f80:	e000      	b.n	8002f84 <SetMotor+0x354>

	default:

		break;
 8002f82:	bf00      	nop
	}
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200013dc 	.word	0x200013dc
 8002f90:	46cbe800 	.word	0x46cbe800
 8002f94:	42c80000 	.word	0x42c80000

08002f98 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	//start read data from ADC
	//motor5->thumb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4832      	ldr	r0, [pc, #200]	; (8003068 <init_motor_controller+0xd0>)
 8002fa0:	f003 fcbc 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4830      	ldr	r0, [pc, #192]	; (8003068 <init_motor_controller+0xd0>)
 8002fa8:	f003 fcb8 	bl	800691c <HAL_TIM_PWM_Start>
	//motor4->index
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002fac:	2100      	movs	r1, #0
 8002fae:	482f      	ldr	r0, [pc, #188]	; (800306c <init_motor_controller+0xd4>)
 8002fb0:	f003 fcb4 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	482d      	ldr	r0, [pc, #180]	; (800306c <init_motor_controller+0xd4>)
 8002fb8:	f003 fcb0 	bl	800691c <HAL_TIM_PWM_Start>
	//motor3->middle
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	482c      	ldr	r0, [pc, #176]	; (8003070 <init_motor_controller+0xd8>)
 8002fc0:	f003 fcac 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002fc4:	210c      	movs	r1, #12
 8002fc6:	482a      	ldr	r0, [pc, #168]	; (8003070 <init_motor_controller+0xd8>)
 8002fc8:	f003 fca8 	bl	800691c <HAL_TIM_PWM_Start>
	//motor2->ring
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4829      	ldr	r0, [pc, #164]	; (8003074 <init_motor_controller+0xdc>)
 8002fd0:	f003 fca4 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4827      	ldr	r0, [pc, #156]	; (8003074 <init_motor_controller+0xdc>)
 8002fd8:	f003 fca0 	bl	800691c <HAL_TIM_PWM_Start>
	//motor1->pinky
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4826      	ldr	r0, [pc, #152]	; (8003078 <init_motor_controller+0xe0>)
 8002fe0:	f003 fc9c 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4824      	ldr	r0, [pc, #144]	; (8003078 <init_motor_controller+0xe0>)
 8002fe8:	f003 fc98 	bl	800691c <HAL_TIM_PWM_Start>

	HAL_ADC_MspInit(&hadc1);
 8002fec:	4823      	ldr	r0, [pc, #140]	; (800307c <init_motor_controller+0xe4>)
 8002fee:	f7fe f9b3 	bl	8001358 <HAL_ADC_MspInit>
	HAL_ADC_MspInit(&hadc2);
 8002ff2:	4823      	ldr	r0, [pc, #140]	; (8003080 <init_motor_controller+0xe8>)
 8002ff4:	f7fe f9b0 	bl	8001358 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4922      	ldr	r1, [pc, #136]	; (8003084 <init_motor_controller+0xec>)
 8002ffc:	4822      	ldr	r0, [pc, #136]	; (8003088 <init_motor_controller+0xf0>)
 8002ffe:	f004 fd63 	bl	8007ac8 <HAL_UART_Receive_IT>
	TX_State=idel;
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <init_motor_controller+0xf4>)
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
	// Configure settings
	controller.AntiWindup = ENABLED;
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <init_motor_controller+0xf8>)
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <init_motor_controller+0xf8>)
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <init_motor_controller+0xf8>)
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <init_motor_controller+0xfc>)
 800301c:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <init_motor_controller+0xf8>)
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <init_motor_controller+0x100>)
 8003022:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <init_motor_controller+0xf8>)
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <init_motor_controller+0x104>)
 8003028:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <init_motor_controller+0xf8>)
 800302c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003030:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <init_motor_controller+0xf8>)
 8003034:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003038:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 800303a:	4815      	ldr	r0, [pc, #84]	; (8003090 <init_motor_controller+0xf8>)
 800303c:	f7ff fdda 	bl	8002bf4 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <init_motor_controller+0xf8>)
 8003042:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003046:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <init_motor_controller+0xf8>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <init_motor_controller+0xfc>)
 800304c:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <init_motor_controller+0xf8>)
 8003050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003054:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <init_motor_controller+0xf8>)
 8003058:	4a10      	ldr	r2, [pc, #64]	; (800309c <init_motor_controller+0x104>)
 800305a:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <init_motor_controller+0xf8>)
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20001474 	.word	0x20001474
 800306c:	200014c0 	.word	0x200014c0
 8003070:	20001428 	.word	0x20001428
 8003074:	2000150c 	.word	0x2000150c
 8003078:	200013dc 	.word	0x200013dc
 800307c:	20000290 	.word	0x20000290
 8003080:	200002f4 	.word	0x200002f4
 8003084:	2000028e 	.word	0x2000028e
 8003088:	20001558 	.word	0x20001558
 800308c:	2000028f 	.word	0x2000028f
 8003090:	2000165c 	.word	0x2000165c
 8003094:	42480000 	.word	0x42480000
 8003098:	c2480000 	.word	0xc2480000
 800309c:	40400000 	.word	0x40400000

080030a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030a4:	f7ff f96e 	bl	8002384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <LoopForever+0x6>)
  ldr r1, =_edata
 80030aa:	490d      	ldr	r1, [pc, #52]	; (80030e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <LoopForever+0xe>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b0:	e002      	b.n	80030b8 <LoopCopyDataInit>

080030b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b6:	3304      	adds	r3, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030bc:	d3f9      	bcc.n	80030b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030c0:	4c0a      	ldr	r4, [pc, #40]	; (80030ec <LoopForever+0x16>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c4:	e001      	b.n	80030ca <LoopFillZerobss>

080030c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c8:	3204      	adds	r2, #4

080030ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030cc:	d3fb      	bcc.n	80030c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ce:	f009 febd 	bl	800ce4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030d2:	f7fe ff17 	bl	8001f04 <main>

080030d6 <LoopForever>:

LoopForever:
    b LoopForever
 80030d6:	e7fe      	b.n	80030d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030e4:	0800fedc 	.word	0x0800fedc
  ldr r2, =_sbss
 80030e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030ec:	20003188 	.word	0x20003188

080030f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030f0:	e7fe      	b.n	80030f0 <ADC1_2_IRQHandler>

080030f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030fc:	2003      	movs	r0, #3
 80030fe:	f001 fd9a 	bl	8004c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003102:	200f      	movs	r0, #15
 8003104:	f7fe ffde 	bl	80020c4 <HAL_InitTick>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	e001      	b.n	8003118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003114:	f7fe ffae 	bl	8002074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003118:	79fb      	ldrb	r3, [r7, #7]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000008 	.word	0x20000008
 8003148:	20001698 	.word	0x20001698

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20001698 	.word	0x20001698

08003164 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <LL_ADC_SetOffset+0x44>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	03fff000 	.word	0x03fff000

08003214 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3360      	adds	r3, #96	; 0x60
 8003222:	461a      	mov	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3330      	adds	r3, #48	; 0x30
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	4413      	add	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	211f      	movs	r1, #31
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	f003 011f 	and.w	r1, r3, #31
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	431a      	orrs	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3314      	adds	r3, #20
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0e5b      	lsrs	r3, r3, #25
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	0d1b      	lsrs	r3, r3, #20
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2107      	movs	r1, #7
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0d1b      	lsrs	r3, r3, #20
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	431a      	orrs	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0318 	and.w	r3, r3, #24
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003370:	40d9      	lsrs	r1, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	400b      	ands	r3, r1
 8003376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	0007ffff 	.word	0x0007ffff

08003394 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 031f 	and.w	r3, r3, #31
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6093      	str	r3, [r2, #8]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d101      	bne.n	800340a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800342c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003454:	d101      	bne.n	800345a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034a4:	f043 0202 	orr.w	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <LL_ADC_IsEnabled+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_ADC_IsEnabled+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsDisableOngoing+0x18>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsDisableOngoing+0x1a>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003518:	f043 0204 	orr.w	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003540:	f043 0210 	orr.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d101      	bne.n	800356c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800358a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d101      	bne.n	80035ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e130      	b.n	8003844 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd feb1 	bl	8001358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fef1 	bl	80033f0 <LL_ADC_IsDeepPowerDownEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fed7 	bl	80033cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff0c 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fef0 	bl	8003418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003638:	4b84      	ldr	r3, [pc, #528]	; (800384c <HAL_ADC_Init+0x284>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	4a84      	ldr	r2, [pc, #528]	; (8003850 <HAL_ADC_Init+0x288>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800364c:	e002      	b.n	8003654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b01      	subs	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f9      	bne.n	800364e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff feee 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff62 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 8003690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 80c9 	bne.w	8003832 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 80c5 	bne.w	8003832 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036b0:	f043 0202 	orr.w	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fefb 	bl	80034b8 <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d115      	bne.n	80036f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c8:	4862      	ldr	r0, [pc, #392]	; (8003854 <HAL_ADC_Init+0x28c>)
 80036ca:	f7ff fef5 	bl	80034b8 <LL_ADC_IsEnabled>
 80036ce:	4604      	mov	r4, r0
 80036d0:	4861      	ldr	r0, [pc, #388]	; (8003858 <HAL_ADC_Init+0x290>)
 80036d2:	f7ff fef1 	bl	80034b8 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	431c      	orrs	r4, r3
 80036da:	4860      	ldr	r0, [pc, #384]	; (800385c <HAL_ADC_Init+0x294>)
 80036dc:	f7ff feec 	bl	80034b8 <LL_ADC_IsEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4323      	orrs	r3, r4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	485c      	ldr	r0, [pc, #368]	; (8003860 <HAL_ADC_Init+0x298>)
 80036f0:	f7ff fd38 	bl	8003164 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7e5b      	ldrb	r3, [r3, #25]
 80036f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003704:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800370a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003712:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d106      	bne.n	8003730 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	3b01      	subs	r3, #1
 8003728:	045b      	lsls	r3, r3, #17
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_ADC_Init+0x29c>)
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	69b9      	ldr	r1, [r7, #24]
 800375c:	430b      	orrs	r3, r1
 800375e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff1c 	bl	80035a2 <LL_ADC_INJ_IsConversionOngoing>
 800376a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13d      	bne.n	80037ee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13a      	bne.n	80037ee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800377c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003784:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003794:	f023 0302 	bic.w	r3, r3, #2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	69b9      	ldr	r1, [r7, #24]
 800379e:	430b      	orrs	r3, r1
 80037a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d118      	bne.n	80037de <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ce:	430a      	orrs	r2, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	611a      	str	r2, [r3, #16]
 80037dc:	e007      	b.n	80037ee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10c      	bne.n	8003810 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f023 010f 	bic.w	r1, r3, #15
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
 800380e:	e007      	b.n	8003820 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020f 	bic.w	r2, r2, #15
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	f023 0303 	bic.w	r3, r3, #3
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
 8003830:	e007      	b.n	8003842 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003842:	7ffb      	ldrb	r3, [r7, #31]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	20000000 	.word	0x20000000
 8003850:	053e2d63 	.word	0x053e2d63
 8003854:	50040000 	.word	0x50040000
 8003858:	50040100 	.word	0x50040100
 800385c:	50040200 	.word	0x50040200
 8003860:	50040300 	.word	0x50040300
 8003864:	fff0c007 	.word	0xfff0c007

08003868 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003870:	4857      	ldr	r0, [pc, #348]	; (80039d0 <HAL_ADC_Start+0x168>)
 8003872:	f7ff fd8f 	bl	8003394 <LL_ADC_GetMultimode>
 8003876:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fe69 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 809c 	bne.w	80039c2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_ADC_Start+0x30>
 8003894:	2302      	movs	r3, #2
 8003896:	e097      	b.n	80039c8 <HAL_ADC_Start+0x160>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fe63 	bl	800456c <ADC_Enable>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 8083 	bne.w	80039b8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_ADC_Start+0x16c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d002      	beq.n	80038d6 <HAL_ADC_Start+0x6e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	e000      	b.n	80038d8 <HAL_ADC_Start+0x70>
 80038d6:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_ADC_Start+0x170>)
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	4293      	cmp	r3, r2
 80038de:	d002      	beq.n	80038e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d106      	bne.n	800390e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f023 0206 	bic.w	r2, r3, #6
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	; 0x58
 800390c:	e002      	b.n	8003914 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	221c      	movs	r2, #28
 800391a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <HAL_ADC_Start+0x16c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d002      	beq.n	8003934 <HAL_ADC_Start+0xcc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	e000      	b.n	8003936 <HAL_ADC_Start+0xce>
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_ADC_Start+0x170>)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4293      	cmp	r3, r2
 800393c:	d008      	beq.n	8003950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d002      	beq.n	8003950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b09      	cmp	r3, #9
 800394e:	d114      	bne.n	800397a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fdc6 	bl	8003504 <LL_ADC_REG_StartConversion>
 8003978:	e025      	b.n	80039c6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <HAL_ADC_Start+0x16c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d002      	beq.n	8003996 <HAL_ADC_Start+0x12e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	e000      	b.n	8003998 <HAL_ADC_Start+0x130>
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_ADC_Start+0x170>)
 8003998:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00f      	beq.n	80039c6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
 80039b6:	e006      	b.n	80039c6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039c0:	e001      	b.n	80039c6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	50040300 	.word	0x50040300
 80039d4:	50040100 	.word	0x50040100
 80039d8:	50040000 	.word	0x50040000

080039dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Stop+0x16>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e023      	b.n	8003a3a <HAL_ADC_Stop+0x5e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039fa:	2103      	movs	r1, #3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fcf9 	bl	80043f4 <ADC_ConversionStop>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fe33 	bl	8004678 <ADC_Disable>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a4e:	4866      	ldr	r0, [pc, #408]	; (8003be8 <HAL_ADC_PollForConversion+0x1a4>)
 8003a50:	f7ff fca0 	bl	8003394 <LL_ADC_GetMultimode>
 8003a54:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d102      	bne.n	8003a64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a5e:	2308      	movs	r3, #8
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e02a      	b.n	8003aba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d002      	beq.n	8003a76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b09      	cmp	r3, #9
 8003a74:	d111      	bne.n	8003a9a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0a4      	b.n	8003bde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a94:	2304      	movs	r3, #4
 8003a96:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a98:	e00f      	b.n	8003aba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a9a:	4853      	ldr	r0, [pc, #332]	; (8003be8 <HAL_ADC_PollForConversion+0x1a4>)
 8003a9c:	f7ff fc88 	bl	80033b0 <LL_ADC_GetMultiDMATransfer>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e093      	b.n	8003bde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aba:	f7ff fb47 	bl	800314c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ac0:	e021      	b.n	8003b06 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d01d      	beq.n	8003b06 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aca:	f7ff fb3f 	bl	800314c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <HAL_ADC_PollForConversion+0x9c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d112      	bne.n	8003b06 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e06b      	b.n	8003bde <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0d6      	beq.n	8003ac2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fba6 	bl	8003276 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7e5b      	ldrb	r3, [r3, #25]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d118      	bne.n	8003b6a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d111      	bne.n	8003b6a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_ADC_PollForConversion+0x1a8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x136>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	e000      	b.n	8003b7c <HAL_ADC_PollForConversion+0x138>
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_ADC_PollForConversion+0x1ac>)
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d008      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d104      	bne.n	8003ba0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e00c      	b.n	8003bba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_ADC_PollForConversion+0x1a8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d002      	beq.n	8003bb0 <HAL_ADC_PollForConversion+0x16c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e000      	b.n	8003bb2 <HAL_ADC_PollForConversion+0x16e>
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_ADC_PollForConversion+0x1ac>)
 8003bb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d104      	bne.n	8003bca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e008      	b.n	8003bdc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	220c      	movs	r2, #12
 8003bda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	50040300 	.word	0x50040300
 8003bec:	50040100 	.word	0x50040100
 8003bf0:	50040000 	.word	0x50040000

08003bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0b6      	sub	sp, #216	; 0xd8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x22>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e3c9      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x7b6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fc88 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 83aa 	bne.w	80043a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	3b02      	subs	r3, #2
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d81b      	bhi.n	8003c9e <HAL_ADC_ConfigChannel+0x8e>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_ADC_ConfigChannel+0x5c>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c95 	.word	0x08003c95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c82:	e010      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003c84:	2312      	movs	r3, #18
 8003c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003c8c:	2318      	movs	r3, #24
 8003c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c92:	e008      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ca4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003cb4:	f7ff faf2 	bl	800329c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fc49 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fc69 	bl	80035a2 <LL_ADC_INJ_IsConversionOngoing>
 8003cd0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 81a4 	bne.w	8004026 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 819f 	bne.w	8004026 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6819      	ldr	r1, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f7ff fafd 	bl	80032f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00a      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6919      	ldr	r1, [r3, #16]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2c:	f7ff fa4e 	bl	80031cc <LL_ADC_SetOffset>
 8003d30:	e179      	b.n	8004026 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fa6b 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x14e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fa60 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	e01e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x18c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fa55 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1a4>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	e018      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1d6>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e004      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d106      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fa24 	bl	8003240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fa08 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x214>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f9fd 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 021f 	and.w	r2, r3, #31
 8003e22:	e01e      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x252>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f9f2 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x26a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x29c>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e004      	b.n	8003eac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff f9c1 	bl	8003240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff f9a5 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x2da>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff f99a 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0e9b      	lsrs	r3, r3, #26
 8003ee4:	f003 021f 	and.w	r2, r3, #31
 8003ee8:	e01e      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x318>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f98f 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e004      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x330>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	e014      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x35a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e004      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f962 	bl	8003240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2103      	movs	r1, #3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f946 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x398>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2103      	movs	r1, #3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f93b 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	e017      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x3c8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2103      	movs	r1, #3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f930 	bl	8003214 <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003fca:	2320      	movs	r3, #32
 8003fcc:	e003      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x3e0>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	e011      	b.n	8004014 <HAL_ADC_ConfigChannel+0x404>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004000:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800400c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004014:	429a      	cmp	r2, r3
 8004016:	d106      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2200      	movs	r2, #0
 800401e:	2103      	movs	r1, #3
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f90d 	bl	8003240 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fa44 	bl	80034b8 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8140 	bne.w	80042b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	461a      	mov	r2, r3
 8004046:	f7ff f981 	bl	800334c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a8f      	ldr	r2, [pc, #572]	; (800428c <HAL_ADC_ConfigChannel+0x67c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	f040 8131 	bne.w	80042b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_ADC_ConfigChannel+0x46e>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	0e9b      	lsrs	r3, r3, #26
 800406c:	3301      	adds	r3, #1
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2b09      	cmp	r3, #9
 8004074:	bf94      	ite	ls
 8004076:	2301      	movls	r3, #1
 8004078:	2300      	movhi	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e019      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x4a2>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800409a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d079      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x4c2>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	3301      	adds	r3, #1
 80040ca:	069b      	lsls	r3, r3, #26
 80040cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d0:	e015      	b.n	80040fe <HAL_ADC_ConfigChannel+0x4ee>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80040e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80040ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	069b      	lsls	r3, r3, #26
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_ADC_ConfigChannel+0x50e>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0e9b      	lsrs	r3, r3, #26
 8004110:	3301      	adds	r3, #1
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	e017      	b.n	800414e <HAL_ADC_ConfigChannel+0x53e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004136:	2320      	movs	r3, #32
 8004138:	e003      	b.n	8004142 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800413a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x564>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	3301      	adds	r3, #1
 8004166:	f003 021f 	and.w	r2, r3, #31
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	051b      	lsls	r3, r3, #20
 8004172:	e018      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x596>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f003 021f 	and.w	r2, r3, #31
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a6:	430b      	orrs	r3, r1
 80041a8:	e081      	b.n	80042ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x5b6>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	3301      	adds	r3, #1
 80041be:	069b      	lsls	r3, r3, #26
 80041c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c4:	e015      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x5e2>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	069b      	lsls	r3, r3, #26
 80041ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x602>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0e9b      	lsrs	r3, r3, #26
 8004204:	3301      	adds	r3, #1
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	e017      	b.n	8004242 <HAL_ADC_ConfigChannel+0x632>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	61bb      	str	r3, [r7, #24]
  return result;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e003      	b.n	8004236 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	3301      	adds	r3, #1
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2101      	movs	r1, #1
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	ea42 0103 	orr.w	r1, r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_ADC_ConfigChannel+0x65e>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	3301      	adds	r3, #1
 800425a:	f003 021f 	and.w	r2, r3, #31
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	3b1e      	subs	r3, #30
 8004266:	051b      	lsls	r3, r3, #20
 8004268:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800426c:	e01e      	b.n	80042ac <HAL_ADC_ConfigChannel+0x69c>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	60fb      	str	r3, [r7, #12]
  return result;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004286:	2320      	movs	r3, #32
 8004288:	e006      	b.n	8004298 <HAL_ADC_ConfigChannel+0x688>
 800428a:	bf00      	nop
 800428c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f003 021f 	and.w	r2, r3, #31
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	3b1e      	subs	r3, #30
 80042a6:	051b      	lsls	r3, r3, #20
 80042a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7ff f81e 	bl	80032f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d07a      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c4:	4843      	ldr	r0, [pc, #268]	; (80043d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80042c6:	f7fe ff73 	bl	80031b0 <LL_ADC_GetCommonPathInternalCh>
 80042ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a41      	ldr	r2, [pc, #260]	; (80043d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d12c      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d126      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <HAL_ADC_ConfigChannel+0x7cc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_ADC_ConfigChannel+0x6e8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_ADC_ConfigChannel+0x7d0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d15d      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004300:	4619      	mov	r1, r3
 8004302:	4834      	ldr	r0, [pc, #208]	; (80043d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004304:	f7fe ff41 	bl	800318a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004308:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	4a36      	ldr	r2, [pc, #216]	; (80043e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004322:	e002      	b.n	800432a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3b01      	subs	r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f9      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004330:	e040      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2d      	ldr	r2, [pc, #180]	; (80043ec <HAL_ADC_ConfigChannel+0x7dc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d118      	bne.n	800436e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800433c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d112      	bne.n	800436e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_ADC_ConfigChannel+0x7cc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_ADC_ConfigChannel+0x74c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d12d      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800435c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004364:	4619      	mov	r1, r3
 8004366:	481b      	ldr	r0, [pc, #108]	; (80043d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004368:	f7fe ff0f 	bl	800318a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436c:	e024      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d120      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800437c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11a      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <HAL_ADC_ConfigChannel+0x7cc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d115      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800438e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004396:	4619      	mov	r1, r3
 8004398:	480e      	ldr	r0, [pc, #56]	; (80043d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800439a:	f7fe fef6 	bl	800318a <LL_ADC_SetCommonPathInternalCh>
 800439e:	e00c      	b.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80043b2:	e002      	b.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	37d8      	adds	r7, #216	; 0xd8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	80080000 	.word	0x80080000
 80043d4:	50040300 	.word	0x50040300
 80043d8:	c7520000 	.word	0xc7520000
 80043dc:	50040000 	.word	0x50040000
 80043e0:	50040200 	.word	0x50040200
 80043e4:	20000000 	.word	0x20000000
 80043e8:	053e2d63 	.word	0x053e2d63
 80043ec:	cb840000 	.word	0xcb840000
 80043f0:	80000001 	.word	0x80000001

080043f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f8a2 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 8004410:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f8c3 	bl	80035a2 <LL_ADC_INJ_IsConversionOngoing>
 800441c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8098 	beq.w	800455c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02a      	beq.n	8004490 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7e5b      	ldrb	r3, [r3, #25]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d126      	bne.n	8004490 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7e1b      	ldrb	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d122      	bne.n	8004490 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800444e:	e014      	b.n	800447a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4a45      	ldr	r2, [pc, #276]	; (8004568 <ADC_ConversionStop+0x174>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d90d      	bls.n	8004474 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e074      	b.n	800455e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d1e3      	bne.n	8004450 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2240      	movs	r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d014      	beq.n	80044c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f85a 	bl	8003554 <LL_ADC_REG_IsConversionOngoing>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff f817 	bl	80034de <LL_ADC_IsDisableOngoing>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff f836 	bl	800352c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d014      	beq.n	80044f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff f869 	bl	80035a2 <LL_ADC_INJ_IsConversionOngoing>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe ffff 	bl	80034de <LL_ADC_IsDisableOngoing>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f845 	bl	800357a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d005      	beq.n	8004502 <ADC_ConversionStop+0x10e>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d105      	bne.n	8004508 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80044fc:	230c      	movs	r3, #12
 80044fe:	617b      	str	r3, [r7, #20]
        break;
 8004500:	e005      	b.n	800450e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004502:	2308      	movs	r3, #8
 8004504:	617b      	str	r3, [r7, #20]
        break;
 8004506:	e002      	b.n	800450e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004508:	2304      	movs	r3, #4
 800450a:	617b      	str	r3, [r7, #20]
        break;
 800450c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800450e:	f7fe fe1d 	bl	800314c <HAL_GetTick>
 8004512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004514:	e01b      	b.n	800454e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004516:	f7fe fe19 	bl	800314c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b05      	cmp	r3, #5
 8004522:	d914      	bls.n	800454e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1dc      	bne.n	8004516 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	a33fffff 	.word	0xa33fffff

0800456c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe ff9b 	bl	80034b8 <LL_ADC_IsEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d169      	bne.n	800465c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <ADC_Enable+0xfc>)
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f043 0210 	orr.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e055      	b.n	800465e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe ff56 	bl	8003468 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045bc:	482b      	ldr	r0, [pc, #172]	; (800466c <ADC_Enable+0x100>)
 80045be:	f7fe fdf7 	bl	80031b0 <LL_ADC_GetCommonPathInternalCh>
 80045c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <ADC_Enable+0x104>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	4a28      	ldr	r2, [pc, #160]	; (8004674 <ADC_Enable+0x108>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045e6:	e002      	b.n	80045ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f9      	bne.n	80045e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045f4:	f7fe fdaa 	bl	800314c <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045fa:	e028      	b.n	800464e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe ff59 	bl	80034b8 <LL_ADC_IsEnabled>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe ff29 	bl	8003468 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004616:	f7fe fd99 	bl	800314c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d914      	bls.n	800464e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00d      	beq.n	800464e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f043 0210 	orr.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e007      	b.n	800465e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d1cf      	bne.n	80045fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	8000003f 	.word	0x8000003f
 800466c:	50040300 	.word	0x50040300
 8004670:	20000000 	.word	0x20000000
 8004674:	053e2d63 	.word	0x053e2d63

08004678 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe ff2a 	bl	80034de <LL_ADC_IsDisableOngoing>
 800468a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe ff11 	bl	80034b8 <LL_ADC_IsEnabled>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d047      	beq.n	800472c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d144      	bne.n	800472c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030d 	and.w	r3, r3, #13
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10c      	bne.n	80046ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe feeb 	bl	8003490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2203      	movs	r2, #3
 80046c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046c2:	f7fe fd43 	bl	800314c <HAL_GetTick>
 80046c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046c8:	e029      	b.n	800471e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f043 0210 	orr.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e023      	b.n	800472e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046e6:	f7fe fd31 	bl	800314c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d914      	bls.n	800471e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00d      	beq.n	800471e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e007      	b.n	800472e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1dc      	bne.n	80046e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <LL_ADC_IsEnabled>:
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <LL_ADC_IsEnabled+0x18>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <LL_ADC_IsEnabled+0x1a>
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_ADC_REG_IsConversionOngoing>:
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d101      	bne.n	8004774 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b09f      	sub	sp, #124	; 0x7c
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e093      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047aa:	2300      	movs	r3, #0
 80047ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047ae:	2300      	movs	r3, #0
 80047b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a47      	ldr	r2, [pc, #284]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d102      	bne.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	e001      	b.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e072      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ffb8 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 80047ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ffb2 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d154      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004800:	2b00      	cmp	r3, #0
 8004802:	d151      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004806:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02c      	beq.n	800486a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004822:	035b      	lsls	r3, r3, #13
 8004824:	430b      	orrs	r3, r1
 8004826:	431a      	orrs	r2, r3
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800482c:	4829      	ldr	r0, [pc, #164]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800482e:	f7ff ff82 	bl	8004736 <LL_ADC_IsEnabled>
 8004832:	4604      	mov	r4, r0
 8004834:	4828      	ldr	r0, [pc, #160]	; (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004836:	f7ff ff7e 	bl	8004736 <LL_ADC_IsEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	431c      	orrs	r4, r3
 800483e:	4828      	ldr	r0, [pc, #160]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004840:	f7ff ff79 	bl	8004736 <LL_ADC_IsEnabled>
 8004844:	4603      	mov	r3, r0
 8004846:	4323      	orrs	r3, r4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d137      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6811      	ldr	r1, [r2, #0]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6892      	ldr	r2, [r2, #8]
 8004860:	430a      	orrs	r2, r1
 8004862:	431a      	orrs	r2, r3
 8004864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004866:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004868:	e028      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004876:	4817      	ldr	r0, [pc, #92]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004878:	f7ff ff5d 	bl	8004736 <LL_ADC_IsEnabled>
 800487c:	4604      	mov	r4, r0
 800487e:	4816      	ldr	r0, [pc, #88]	; (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004880:	f7ff ff59 	bl	8004736 <LL_ADC_IsEnabled>
 8004884:	4603      	mov	r3, r0
 8004886:	431c      	orrs	r4, r3
 8004888:	4815      	ldr	r0, [pc, #84]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800488a:	f7ff ff54 	bl	8004736 <LL_ADC_IsEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	4323      	orrs	r3, r4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d112      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800489e:	f023 030f 	bic.w	r3, r3, #15
 80048a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a6:	e009      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80048ba:	e000      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	377c      	adds	r7, #124	; 0x7c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	50040000 	.word	0x50040000
 80048d8:	50040100 	.word	0x50040100
 80048dc:	50040300 	.word	0x50040300
 80048e0:	50040200 	.word	0x50040200

080048e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0ed      	b.n	8004ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd f8fc 	bl	8001b00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004918:	f7fe fc18 	bl	800314c <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800491e:	e012      	b.n	8004946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004920:	f7fe fc14 	bl	800314c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d90b      	bls.n	8004946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2205      	movs	r2, #5
 800493e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0c5      	b.n	8004ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0e5      	beq.n	8004920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0202 	bic.w	r2, r2, #2
 8004962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004964:	f7fe fbf2 	bl	800314c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800496a:	e012      	b.n	8004992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800496c:	f7fe fbee 	bl	800314c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b0a      	cmp	r3, #10
 8004978:	d90b      	bls.n	8004992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2205      	movs	r2, #5
 800498a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e09f      	b.n	8004ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7e1b      	ldrb	r3, [r3, #24]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e007      	b.n	80049ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7e5b      	ldrb	r3, [r3, #25]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e007      	b.n	80049f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7e9b      	ldrb	r3, [r3, #26]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d108      	bne.n	8004a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0220 	orr.w	r2, r2, #32
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e007      	b.n	8004a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0220 	bic.w	r2, r2, #32
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7edb      	ldrb	r3, [r3, #27]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d108      	bne.n	8004a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0210 	bic.w	r2, r2, #16
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e007      	b.n	8004a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0210 	orr.w	r2, r2, #16
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7f1b      	ldrb	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d108      	bne.n	8004a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7f5b      	ldrb	r3, [r3, #29]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d108      	bne.n	8004a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0204 	orr.w	r2, r2, #4
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e007      	b.n	8004a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	ea42 0103 	orr.w	r1, r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <__NVIC_SetPriorityGrouping+0x44>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af8:	4013      	ands	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b0e:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <__NVIC_SetPriorityGrouping+0x44>)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	60d3      	str	r3, [r2, #12]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <__NVIC_GetPriorityGrouping+0x18>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	f003 0307 	and.w	r3, r3, #7
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	db0b      	blt.n	8004b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	f003 021f 	and.w	r2, r3, #31
 8004b58:	4907      	ldr	r1, [pc, #28]	; (8004b78 <__NVIC_EnableIRQ+0x38>)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2001      	movs	r0, #1
 8004b62:	fa00 f202 	lsl.w	r2, r0, r2
 8004b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	e000e100 	.word	0xe000e100

08004b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	db0a      	blt.n	8004ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	490c      	ldr	r1, [pc, #48]	; (8004bc8 <__NVIC_SetPriority+0x4c>)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ba4:	e00a      	b.n	8004bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4908      	ldr	r1, [pc, #32]	; (8004bcc <__NVIC_SetPriority+0x50>)
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	0112      	lsls	r2, r2, #4
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	761a      	strb	r2, [r3, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000e100 	.word	0xe000e100
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f1c3 0307 	rsb	r3, r3, #7
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	bf28      	it	cs
 8004bee:	2304      	movcs	r3, #4
 8004bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d902      	bls.n	8004c00 <NVIC_EncodePriority+0x30>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3b03      	subs	r3, #3
 8004bfe:	e000      	b.n	8004c02 <NVIC_EncodePriority+0x32>
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	401a      	ands	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c18:	f04f 31ff 	mov.w	r1, #4294967295
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	43d9      	mvns	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c28:	4313      	orrs	r3, r2
         );
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3724      	adds	r7, #36	; 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff ff4c 	bl	8004adc <__NVIC_SetPriorityGrouping>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c5e:	f7ff ff61 	bl	8004b24 <__NVIC_GetPriorityGrouping>
 8004c62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7ff ffb1 	bl	8004bd0 <NVIC_EncodePriority>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff80 	bl	8004b7c <__NVIC_SetPriority>
}
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ff54 	bl	8004b40 <__NVIC_EnableIRQ>
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cae:	e17f      	b.n	8004fb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8171 	beq.w	8004faa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d005      	beq.n	8004ce0 <HAL_GPIO_Init+0x40>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d130      	bne.n	8004d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d16:	2201      	movs	r2, #1
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 0201 	and.w	r2, r3, #1
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d118      	bne.n	8004d80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d54:	2201      	movs	r2, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0201 	and.w	r2, r3, #1
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d017      	beq.n	8004dbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	2203      	movs	r2, #3
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d123      	bne.n	8004e10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	08da      	lsrs	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3208      	adds	r2, #8
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	6939      	ldr	r1, [r7, #16]
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80ac 	beq.w	8004faa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <HAL_GPIO_Init+0x330>)
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	4a5e      	ldr	r2, [pc, #376]	; (8004fd0 <HAL_GPIO_Init+0x330>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e5e:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <HAL_GPIO_Init+0x330>)
 8004e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e6a:	4a5a      	ldr	r2, [pc, #360]	; (8004fd4 <HAL_GPIO_Init+0x334>)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	3302      	adds	r3, #2
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e94:	d025      	beq.n	8004ee2 <HAL_GPIO_Init+0x242>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4f      	ldr	r2, [pc, #316]	; (8004fd8 <HAL_GPIO_Init+0x338>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <HAL_GPIO_Init+0x23e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a4e      	ldr	r2, [pc, #312]	; (8004fdc <HAL_GPIO_Init+0x33c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d019      	beq.n	8004eda <HAL_GPIO_Init+0x23a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a4d      	ldr	r2, [pc, #308]	; (8004fe0 <HAL_GPIO_Init+0x340>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_GPIO_Init+0x236>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a4c      	ldr	r2, [pc, #304]	; (8004fe4 <HAL_GPIO_Init+0x344>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00d      	beq.n	8004ed2 <HAL_GPIO_Init+0x232>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4b      	ldr	r2, [pc, #300]	; (8004fe8 <HAL_GPIO_Init+0x348>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <HAL_GPIO_Init+0x22e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	; (8004fec <HAL_GPIO_Init+0x34c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <HAL_GPIO_Init+0x22a>
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	e00c      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004eca:	2307      	movs	r3, #7
 8004ecc:	e00a      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004ece:	2305      	movs	r3, #5
 8004ed0:	e008      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	e006      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e004      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e002      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_GPIO_Init+0x244>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	f002 0203 	and.w	r2, r2, #3
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	4093      	lsls	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ef4:	4937      	ldr	r1, [pc, #220]	; (8004fd4 <HAL_GPIO_Init+0x334>)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	3302      	adds	r3, #2
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f02:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f26:	4a32      	ldr	r2, [pc, #200]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f50:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fa4:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <HAL_GPIO_Init+0x350>)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3301      	adds	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f47f ae78 	bne.w	8004cb0 <HAL_GPIO_Init+0x10>
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	48000400 	.word	0x48000400
 8004fdc:	48000800 	.word	0x48000800
 8004fe0:	48000c00 	.word	0x48000c00
 8004fe4:	48001000 	.word	0x48001000
 8004fe8:	48001400 	.word	0x48001400
 8004fec:	48001800 	.word	0x48001800
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
 8005000:	4613      	mov	r3, r2
 8005002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005004:	787b      	ldrb	r3, [r7, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005010:	e002      	b.n	8005018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_PWREx_GetVoltageRange+0x18>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40007000 	.word	0x40007000

08005040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d130      	bne.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005050:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d038      	beq.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005066:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800506c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2232      	movs	r2, #50	; 0x32
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0c9b      	lsrs	r3, r3, #18
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005084:	e002      	b.n	800508c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3b01      	subs	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508c:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d102      	bne.n	80050a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f2      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d110      	bne.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e00f      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d007      	beq.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c8:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40007000 	.word	0x40007000
 80050e4:	20000000 	.word	0x20000000
 80050e8:	431bde83 	.word	0x431bde83

080050ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e3ca      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fe:	4b97      	ldr	r3, [pc, #604]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005108:	4b94      	ldr	r3, [pc, #592]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80e4 	beq.w	80052e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_RCC_OscConfig+0x4a>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	f040 808b 	bne.w	8005244 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 8087 	bne.w	8005244 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_RCC_OscConfig+0x62>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e3a2      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	4b82      	ldr	r3, [pc, #520]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_RCC_OscConfig+0x7c>
 800515e:	4b7f      	ldr	r3, [pc, #508]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005166:	e005      	b.n	8005174 <HAL_RCC_OscConfig+0x88>
 8005168:	4b7c      	ldr	r3, [pc, #496]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005174:	4293      	cmp	r3, r2
 8005176:	d223      	bcs.n	80051c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fd87 	bl	8005c90 <RCC_SetFlashLatencyFromMSIRange>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e383      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800518c:	4b73      	ldr	r3, [pc, #460]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a72      	ldr	r2, [pc, #456]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005192:	f043 0308 	orr.w	r3, r3, #8
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	496d      	ldr	r1, [pc, #436]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051aa:	4b6c      	ldr	r3, [pc, #432]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	4968      	ldr	r1, [pc, #416]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
 80051be:	e025      	b.n	800520c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a65      	ldr	r2, [pc, #404]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051c6:	f043 0308 	orr.w	r3, r3, #8
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4960      	ldr	r1, [pc, #384]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051de:	4b5f      	ldr	r3, [pc, #380]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	495b      	ldr	r1, [pc, #364]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fd47 	bl	8005c90 <RCC_SetFlashLatencyFromMSIRange>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e343      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800520c:	f000 fc4a 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b52      	ldr	r3, [pc, #328]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	4950      	ldr	r1, [pc, #320]	; (8005360 <HAL_RCC_OscConfig+0x274>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	4a4e      	ldr	r2, [pc, #312]	; (8005364 <HAL_RCC_OscConfig+0x278>)
 800522a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800522c:	4b4e      	ldr	r3, [pc, #312]	; (8005368 <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc ff47 	bl	80020c4 <HAL_InitTick>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d052      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	e327      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d032      	beq.n	80052b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800524c:	4b43      	ldr	r3, [pc, #268]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005258:	f7fd ff78 	bl	800314c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005260:	f7fd ff74 	bl	800314c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e310      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005272:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800527e:	4b37      	ldr	r3, [pc, #220]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a36      	ldr	r2, [pc, #216]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005284:	f043 0308 	orr.w	r3, r3, #8
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b34      	ldr	r3, [pc, #208]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4931      	ldr	r1, [pc, #196]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800529c:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	492c      	ldr	r1, [pc, #176]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]
 80052b0:	e01a      	b.n	80052e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a29      	ldr	r2, [pc, #164]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052be:	f7fd ff45 	bl	800314c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052c6:	f7fd ff41 	bl	800314c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e2dd      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052d8:	4b20      	ldr	r3, [pc, #128]	; (800535c <HAL_RCC_OscConfig+0x270>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCC_OscConfig+0x1da>
 80052e4:	e000      	b.n	80052e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d074      	beq.n	80053de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d005      	beq.n	8005306 <HAL_RCC_OscConfig+0x21a>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b0c      	cmp	r3, #12
 80052fe:	d10e      	bne.n	800531e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d10b      	bne.n	800531e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005306:	4b15      	ldr	r3, [pc, #84]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d064      	beq.n	80053dc <HAL_RCC_OscConfig+0x2f0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d160      	bne.n	80053dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e2ba      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d106      	bne.n	8005336 <HAL_RCC_OscConfig+0x24a>
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0b      	ldr	r2, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e026      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800533e:	d115      	bne.n	800536c <HAL_RCC_OscConfig+0x280>
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a05      	ldr	r2, [pc, #20]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_OscConfig+0x270>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a02      	ldr	r2, [pc, #8]	; (800535c <HAL_RCC_OscConfig+0x270>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e014      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000
 8005360:	0800fa58 	.word	0x0800fa58
 8005364:	20000000 	.word	0x20000000
 8005368:	20000004 	.word	0x20000004
 800536c:	4ba0      	ldr	r3, [pc, #640]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a9f      	ldr	r2, [pc, #636]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b9d      	ldr	r3, [pc, #628]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a9c      	ldr	r2, [pc, #624]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fd fede 	bl	800314c <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005394:	f7fd feda 	bl	800314c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e276      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a6:	4b92      	ldr	r3, [pc, #584]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x2a8>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd feca 	bl	800314c <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fd fec6 	bl	800314c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e262      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ce:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x2d0>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d060      	beq.n	80054ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_OscConfig+0x310>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d119      	bne.n	800542a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d116      	bne.n	800542a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053fc:	4b7c      	ldr	r3, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_OscConfig+0x328>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e23f      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005414:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	4973      	ldr	r1, [pc, #460]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005428:	e040      	b.n	80054ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d023      	beq.n	800547a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005432:	4b6f      	ldr	r3, [pc, #444]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6e      	ldr	r2, [pc, #440]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fd fe85 	bl	800314c <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7fd fe81 	bl	800314c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e21d      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005458:	4b65      	ldr	r3, [pc, #404]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	495f      	ldr	r1, [pc, #380]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
 8005478:	e018      	b.n	80054ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5c      	ldr	r2, [pc, #368]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd fe61 	bl	800314c <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548e:	f7fd fe5d 	bl	800314c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1f9      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a0:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d03c      	beq.n	8005532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01c      	beq.n	80054fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c0:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c6:	4a4a      	ldr	r2, [pc, #296]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fd fe3c 	bl	800314c <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fd fe38 	bl	800314c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1d4      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ea:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ef      	beq.n	80054d8 <HAL_RCC_OscConfig+0x3ec>
 80054f8:	e01b      	b.n	8005532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fa:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80054fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005500:	4a3b      	ldr	r2, [pc, #236]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550a:	f7fd fe1f 	bl	800314c <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005512:	f7fd fe1b 	bl	800314c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e1b7      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ef      	bne.n	8005512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a6 	beq.w	800568c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005540:	2300      	movs	r3, #0
 8005542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005550:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 8005556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555a:	6593      	str	r3, [r2, #88]	; 0x58
 800555c:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005568:	2301      	movs	r3, #1
 800556a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <HAL_RCC_OscConfig+0x508>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d118      	bne.n	80055aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <HAL_RCC_OscConfig+0x508>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <HAL_RCC_OscConfig+0x508>)
 800557e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005584:	f7fd fde2 	bl	800314c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558c:	f7fd fdde 	bl	800314c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e17a      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <HAL_RCC_OscConfig+0x508>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4d8>
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055c2:	e029      	b.n	8005618 <HAL_RCC_OscConfig+0x52c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d115      	bne.n	80055f8 <HAL_RCC_OscConfig+0x50c>
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	4a07      	ldr	r2, [pc, #28]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	4a03      	ldr	r2, [pc, #12]	; (80055f0 <HAL_RCC_OscConfig+0x504>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055ec:	e014      	b.n	8005618 <HAL_RCC_OscConfig+0x52c>
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40007000 	.word	0x40007000
 80055f8:	4b9c      	ldr	r3, [pc, #624]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	4a9b      	ldr	r2, [pc, #620]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005608:	4b98      	ldr	r3, [pc, #608]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	4a97      	ldr	r2, [pc, #604]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d016      	beq.n	800564e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005620:	f7fd fd94 	bl	800314c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005626:	e00a      	b.n	800563e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005628:	f7fd fd90 	bl	800314c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e12a      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	4b8b      	ldr	r3, [pc, #556]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ed      	beq.n	8005628 <HAL_RCC_OscConfig+0x53c>
 800564c:	e015      	b.n	800567a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fd fd7d 	bl	800314c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fd79 	bl	800314c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e113      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800566c:	4b7f      	ldr	r3, [pc, #508]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1ed      	bne.n	8005656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005680:	4b7a      	ldr	r3, [pc, #488]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005684:	4a79      	ldr	r2, [pc, #484]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80fe 	beq.w	8005892 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	2b02      	cmp	r3, #2
 800569c:	f040 80d0 	bne.w	8005840 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056a0:	4b72      	ldr	r3, [pc, #456]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f003 0203 	and.w	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d130      	bne.n	8005716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	3b01      	subs	r3, #1
 80056c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d127      	bne.n	8005716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d11f      	bne.n	8005716 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e0:	2a07      	cmp	r2, #7
 80056e2:	bf14      	ite	ne
 80056e4:	2201      	movne	r2, #1
 80056e6:	2200      	moveq	r2, #0
 80056e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d113      	bne.n	8005716 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d109      	bne.n	8005716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	3b01      	subs	r3, #1
 8005710:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d06e      	beq.n	80057f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d069      	beq.n	80057f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0ad      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005738:	4b4c      	ldr	r3, [pc, #304]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a4b      	ldr	r2, [pc, #300]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800573e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005742:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005744:	f7fd fd02 	bl	800314c <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574c:	f7fd fcfe 	bl	800314c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e09a      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575e:	4b43      	ldr	r3, [pc, #268]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	4b40      	ldr	r3, [pc, #256]	; (8005870 <HAL_RCC_OscConfig+0x784>)
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800577a:	3a01      	subs	r2, #1
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	4311      	orrs	r1, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005784:	0212      	lsls	r2, r2, #8
 8005786:	4311      	orrs	r1, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800578c:	0852      	lsrs	r2, r2, #1
 800578e:	3a01      	subs	r2, #1
 8005790:	0552      	lsls	r2, r2, #21
 8005792:	4311      	orrs	r1, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005798:	0852      	lsrs	r2, r2, #1
 800579a:	3a01      	subs	r2, #1
 800579c:	0652      	lsls	r2, r2, #25
 800579e:	4311      	orrs	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057a4:	0912      	lsrs	r2, r2, #4
 80057a6:	0452      	lsls	r2, r2, #17
 80057a8:	430a      	orrs	r2, r1
 80057aa:	4930      	ldr	r1, [pc, #192]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057b0:	4b2e      	ldr	r3, [pc, #184]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2d      	ldr	r2, [pc, #180]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057bc:	4b2b      	ldr	r3, [pc, #172]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057c8:	f7fd fcc0 	bl	800314c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fd fcbc 	bl	800314c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e058      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ee:	e050      	b.n	8005892 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04f      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_RCC_OscConfig+0x780>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d148      	bne.n	8005892 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800580c:	4b17      	ldr	r3, [pc, #92]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005818:	f7fd fc98 	bl	800314c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fd fc94 	bl	800314c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e030      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x734>
 800583e:	e028      	b.n	8005892 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d023      	beq.n	800588e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_OscConfig+0x780>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a08      	ldr	r2, [pc, #32]	; (800586c <HAL_RCC_OscConfig+0x780>)
 800584c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fd fc7b 	bl	800314c <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005858:	e00c      	b.n	8005874 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fd fc77 	bl	800314c <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d905      	bls.n	8005874 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e013      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
 800586c:	40021000 	.word	0x40021000
 8005870:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_RCC_OscConfig+0x7b0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ec      	bne.n	800585a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_RCC_OscConfig+0x7b0>)
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	4905      	ldr	r1, [pc, #20]	; (800589c <HAL_RCC_OscConfig+0x7b0>)
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <HAL_RCC_OscConfig+0x7b4>)
 8005888:	4013      	ands	r3, r2
 800588a:	60cb      	str	r3, [r1, #12]
 800588c:	e001      	b.n	8005892 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40021000 	.word	0x40021000
 80058a0:	feeefffc 	.word	0xfeeefffc

080058a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0e7      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b75      	ldr	r3, [pc, #468]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d910      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b72      	ldr	r3, [pc, #456]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f023 0207 	bic.w	r2, r3, #7
 80058ce:	4970      	ldr	r1, [pc, #448]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b6e      	ldr	r3, [pc, #440]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0cf      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	4b66      	ldr	r3, [pc, #408]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005900:	429a      	cmp	r2, r3
 8005902:	d908      	bls.n	8005916 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005904:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	4960      	ldr	r1, [pc, #384]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04c      	beq.n	80059bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d107      	bne.n	800593a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592a:	4b5a      	ldr	r3, [pc, #360]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d121      	bne.n	800597a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0a6      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d115      	bne.n	800597a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e09a      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595a:	4b4e      	ldr	r3, [pc, #312]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e08e      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596a:	4b4a      	ldr	r3, [pc, #296]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e086      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800597a:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f023 0203 	bic.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4943      	ldr	r1, [pc, #268]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598c:	f7fd fbde 	bl	800314c <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	e00a      	b.n	80059aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005994:	f7fd fbda 	bl	800314c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e06e      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059aa:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 020c 	and.w	r2, r3, #12
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d1eb      	bne.n	8005994 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d208      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d8:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	492b      	ldr	r1, [pc, #172]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ea:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d210      	bcs.n	8005a1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 0207 	bic.w	r2, r3, #7
 8005a00:	4923      	ldr	r1, [pc, #140]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_RCC_ClockConfig+0x1ec>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e036      	b.n	8005a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a26:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	4918      	ldr	r1, [pc, #96]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4910      	ldr	r1, [pc, #64]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a58:	f000 f824 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	490b      	ldr	r1, [pc, #44]	; (8005a98 <HAL_RCC_ClockConfig+0x1f4>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1fc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fc fb21 	bl	80020c4 <HAL_InitTick>
 8005a82:	4603      	mov	r3, r0
 8005a84:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a86:	7afb      	ldrb	r3, [r7, #11]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40022000 	.word	0x40022000
 8005a94:	40021000 	.word	0x40021000
 8005a98:	0800fa58 	.word	0x0800fa58
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	20000004 	.word	0x20000004

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab2:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005abc:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b0c      	cmp	r3, #12
 8005ad0:	d121      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d11e      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ad8:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	e005      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005af4:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b00:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d102      	bne.n	8005b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e004      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b28:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d134      	bne.n	8005b9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b32:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d003      	beq.n	8005b4a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d003      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0xac>
 8005b48:	e005      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b4c:	617b      	str	r3, [r7, #20]
      break;
 8005b4e:	e005      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b50:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b52:	617b      	str	r3, [r7, #20]
      break;
 8005b54:	e002      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	617b      	str	r3, [r7, #20]
      break;
 8005b5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	091b      	lsrs	r3, r3, #4
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	3301      	adds	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b6a:	4b10      	ldr	r3, [pc, #64]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	fb03 f202 	mul.w	r2, r3, r2
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <HAL_RCC_GetSysClockFreq+0x108>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	0e5b      	lsrs	r3, r3, #25
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3724      	adds	r7, #36	; 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800fa70 	.word	0x0800fa70
 8005bb4:	00f42400 	.word	0x00f42400
 8005bb8:	007a1200 	.word	0x007a1200

08005bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000000 	.word	0x20000000

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bd8:	f7ff fff0 	bl	8005bbc <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4904      	ldr	r1, [pc, #16]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800fa68 	.word	0x0800fa68

08005c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c04:	f7ff ffda 	bl	8005bbc <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0adb      	lsrs	r3, r3, #11
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4904      	ldr	r1, [pc, #16]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000
 8005c28:	0800fa68 	.word	0x0800fa68

08005c2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	220f      	movs	r2, #15
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0203 	and.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_RCC_GetClockConfig+0x5c>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <HAL_RCC_GetClockConfig+0x60>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0207 	and.w	r2, r3, #7
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	601a      	str	r2, [r3, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40022000 	.word	0x40022000

08005c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c9c:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ca8:	f7ff f9bc 	bl	8005024 <HAL_PWREx_GetVoltageRange>
 8005cac:	6178      	str	r0, [r7, #20]
 8005cae:	e014      	b.n	8005cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cb0:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb4:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cba:	6593      	str	r3, [r2, #88]	; 0x58
 8005cbc:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005cc8:	f7ff f9ac 	bl	8005024 <HAL_PWREx_GetVoltageRange>
 8005ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cce:	4b1e      	ldr	r3, [pc, #120]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd2:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce0:	d10b      	bne.n	8005cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d919      	bls.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2ba0      	cmp	r3, #160	; 0xa0
 8005cec:	d902      	bls.n	8005cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cee:	2302      	movs	r3, #2
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e013      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e010      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d902      	bls.n	8005d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d00:	2303      	movs	r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	e00a      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d102      	bne.n	8005d12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e004      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b70      	cmp	r3, #112	; 0x70
 8005d16:	d101      	bne.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d18:	2301      	movs	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f023 0207 	bic.w	r2, r3, #7
 8005d24:	4909      	ldr	r1, [pc, #36]	; (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d001      	beq.n	8005d3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40022000 	.word	0x40022000

08005d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d58:	2300      	movs	r3, #0
 8005d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d041      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d74:	d02a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d7a:	d824      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d80:	d008      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d86:	d81e      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d90:	d010      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d92:	e018      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d94:	4b86      	ldr	r3, [pc, #536]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a85      	ldr	r2, [pc, #532]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005da0:	e015      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fabb 	bl	8006324 <RCCEx_PLLSAI1_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005db2:	e00c      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3320      	adds	r3, #32
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fba6 	bl	800650c <RCCEx_PLLSAI2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	74fb      	strb	r3, [r7, #19]
      break;
 8005dca:	e000      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dce:	7cfb      	ldrb	r3, [r7, #19]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dd4:	4b76      	ldr	r3, [pc, #472]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de2:	4973      	ldr	r1, [pc, #460]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005dea:	e001      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dec:	7cfb      	ldrb	r3, [r7, #19]
 8005dee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d041      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e04:	d02a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e0a:	d824      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e10:	d008      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e16:	d81e      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e20:	d010      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e22:	e018      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e24:	4b62      	ldr	r3, [pc, #392]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a61      	ldr	r2, [pc, #388]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e30:	e015      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3304      	adds	r3, #4
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fa73 	bl	8006324 <RCCEx_PLLSAI1_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e42:	e00c      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3320      	adds	r3, #32
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fb5e 	bl	800650c <RCCEx_PLLSAI2_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e54:	e003      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	74fb      	strb	r3, [r7, #19]
      break;
 8005e5a:	e000      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5e:	7cfb      	ldrb	r3, [r7, #19]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e64:	4b52      	ldr	r3, [pc, #328]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e72:	494f      	ldr	r1, [pc, #316]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e7a:	e001      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80a0 	beq.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e92:	4b47      	ldr	r3, [pc, #284]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea8:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eac:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb4:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec4:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3a      	ldr	r2, [pc, #232]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ed0:	f7fd f93c 	bl	800314c <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ed6:	e009      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed8:	f7fd f938 	bl	800314c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d902      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	74fb      	strb	r3, [r7, #19]
        break;
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eec:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ef      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d15c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efe:	4b2c      	ldr	r3, [pc, #176]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01f      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d019      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f48:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5a:	f7fd f8f7 	bl	800314c <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f60:	e00b      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f62:	f7fd f8f3 	bl	800314c <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d902      	bls.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	74fb      	strb	r3, [r7, #19]
            break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ec      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f88:	7cfb      	ldrb	r3, [r7, #19]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10c      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	4904      	ldr	r1, [pc, #16]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa6:	e009      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	74bb      	strb	r3, [r7, #18]
 8005fac:	e006      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fbc:	7c7b      	ldrb	r3, [r7, #17]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4b9e      	ldr	r3, [pc, #632]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	4a9d      	ldr	r2, [pc, #628]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fda:	4b98      	ldr	r3, [pc, #608]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 0203 	bic.w	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	4994      	ldr	r1, [pc, #592]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ffc:	4b8f      	ldr	r3, [pc, #572]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 020c 	bic.w	r2, r3, #12
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	498c      	ldr	r1, [pc, #560]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800601e:	4b87      	ldr	r3, [pc, #540]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	4983      	ldr	r1, [pc, #524]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006040:	4b7e      	ldr	r3, [pc, #504]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	497b      	ldr	r1, [pc, #492]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006062:	4b76      	ldr	r3, [pc, #472]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	4972      	ldr	r1, [pc, #456]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006084:	4b6d      	ldr	r3, [pc, #436]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006092:	496a      	ldr	r1, [pc, #424]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b65      	ldr	r3, [pc, #404]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b4:	4961      	ldr	r1, [pc, #388]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060c8:	4b5c      	ldr	r3, [pc, #368]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	4959      	ldr	r1, [pc, #356]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060ea:	4b54      	ldr	r3, [pc, #336]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	4950      	ldr	r1, [pc, #320]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800610c:	4b4b      	ldr	r3, [pc, #300]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	4948      	ldr	r1, [pc, #288]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800612e:	4b43      	ldr	r3, [pc, #268]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	493f      	ldr	r1, [pc, #252]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d028      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006150:	4b3a      	ldr	r3, [pc, #232]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	4937      	ldr	r1, [pc, #220]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616e:	d106      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006170:	4b32      	ldr	r3, [pc, #200]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4a31      	ldr	r2, [pc, #196]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800617a:	60d3      	str	r3, [r2, #12]
 800617c:	e011      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006186:	d10c      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f8c8 	bl	8006324 <RCCEx_PLLSAI1_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006198:	7cfb      	ldrb	r3, [r7, #19]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d028      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061ae:	4b23      	ldr	r3, [pc, #140]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	491f      	ldr	r1, [pc, #124]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d8:	60d3      	str	r3, [r2, #12]
 80061da:	e011      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e4:	d10c      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2101      	movs	r1, #1
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f899 	bl	8006324 <RCCEx_PLLSAI1_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02b      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	4908      	ldr	r1, [pc, #32]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622a:	d109      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800622c:	4b03      	ldr	r3, [pc, #12]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4a02      	ldr	r2, [pc, #8]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006236:	60d3      	str	r3, [r2, #12]
 8006238:	e014      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800623a:	bf00      	nop
 800623c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2101      	movs	r1, #1
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f867 	bl	8006324 <RCCEx_PLLSAI1_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800625a:	7cfb      	ldrb	r3, [r7, #19]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006276:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627e:	4928      	ldr	r1, [pc, #160]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800628e:	d10d      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 f844 	bl	8006324 <RCCEx_PLLSAI1_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d014      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062a6:	7cfb      	ldrb	r3, [r7, #19]
 80062a8:	74bb      	strb	r3, [r7, #18]
 80062aa:	e011      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3320      	adds	r3, #32
 80062ba:	2102      	movs	r1, #2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 f925 	bl	800650c <RCCEx_PLLSAI2_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062c6:	7cfb      	ldrb	r3, [r7, #19]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ea:	490d      	ldr	r1, [pc, #52]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630e:	4904      	ldr	r1, [pc, #16]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006316:	7cbb      	ldrb	r3, [r7, #18]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021000 	.word	0x40021000

08006324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006332:	4b75      	ldr	r3, [pc, #468]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d018      	beq.n	8006370 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800633e:	4b72      	ldr	r3, [pc, #456]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0203 	and.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d10d      	bne.n	800636a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
       ||
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006356:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
       ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d047      	beq.n	80063fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
 800636e:	e044      	b.n	80063fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d018      	beq.n	80063aa <RCCEx_PLLSAI1_Config+0x86>
 8006378:	2b03      	cmp	r3, #3
 800637a:	d825      	bhi.n	80063c8 <RCCEx_PLLSAI1_Config+0xa4>
 800637c:	2b01      	cmp	r3, #1
 800637e:	d002      	beq.n	8006386 <RCCEx_PLLSAI1_Config+0x62>
 8006380:	2b02      	cmp	r3, #2
 8006382:	d009      	beq.n	8006398 <RCCEx_PLLSAI1_Config+0x74>
 8006384:	e020      	b.n	80063c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006386:	4b60      	ldr	r3, [pc, #384]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006396:	e01a      	b.n	80063ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006398:	4b5b      	ldr	r3, [pc, #364]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d116      	bne.n	80063d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a8:	e013      	b.n	80063d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063aa:	4b57      	ldr	r3, [pc, #348]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10f      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063b6:	4b54      	ldr	r3, [pc, #336]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063c6:	e006      	b.n	80063d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e004      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063ce:	bf00      	nop
 80063d0:	e002      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063d2:	bf00      	nop
 80063d4:	e000      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063de:	4b4a      	ldr	r3, [pc, #296]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	430b      	orrs	r3, r1
 80063f4:	4944      	ldr	r1, [pc, #272]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d17d      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006400:	4b41      	ldr	r3, [pc, #260]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a40      	ldr	r2, [pc, #256]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800640a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640c:	f7fc fe9e 	bl	800314c <HAL_GetTick>
 8006410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006412:	e009      	b.n	8006428 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006414:	f7fc fe9a 	bl	800314c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d902      	bls.n	8006428 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	73fb      	strb	r3, [r7, #15]
        break;
 8006426:	e005      	b.n	8006434 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006428:	4b37      	ldr	r3, [pc, #220]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ef      	bne.n	8006414 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d160      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d111      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006440:	4b31      	ldr	r3, [pc, #196]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6892      	ldr	r2, [r2, #8]
 8006450:	0211      	lsls	r1, r2, #8
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68d2      	ldr	r2, [r2, #12]
 8006456:	0912      	lsrs	r2, r2, #4
 8006458:	0452      	lsls	r2, r2, #17
 800645a:	430a      	orrs	r2, r1
 800645c:	492a      	ldr	r1, [pc, #168]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645e:	4313      	orrs	r3, r2
 8006460:	610b      	str	r3, [r1, #16]
 8006462:	e027      	b.n	80064b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d112      	bne.n	8006490 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800646a:	4b27      	ldr	r3, [pc, #156]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006472:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6892      	ldr	r2, [r2, #8]
 800647a:	0211      	lsls	r1, r2, #8
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6912      	ldr	r2, [r2, #16]
 8006480:	0852      	lsrs	r2, r2, #1
 8006482:	3a01      	subs	r2, #1
 8006484:	0552      	lsls	r2, r2, #21
 8006486:	430a      	orrs	r2, r1
 8006488:	491f      	ldr	r1, [pc, #124]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	610b      	str	r3, [r1, #16]
 800648e:	e011      	b.n	80064b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006490:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6892      	ldr	r2, [r2, #8]
 80064a0:	0211      	lsls	r1, r2, #8
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6952      	ldr	r2, [r2, #20]
 80064a6:	0852      	lsrs	r2, r2, #1
 80064a8:	3a01      	subs	r2, #1
 80064aa:	0652      	lsls	r2, r2, #25
 80064ac:	430a      	orrs	r2, r1
 80064ae:	4916      	ldr	r1, [pc, #88]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a13      	ldr	r2, [pc, #76]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c0:	f7fc fe44 	bl	800314c <HAL_GetTick>
 80064c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064c6:	e009      	b.n	80064dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c8:	f7fc fe40 	bl	800314c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d902      	bls.n	80064dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	73fb      	strb	r3, [r7, #15]
          break;
 80064da:	e005      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ef      	beq.n	80064c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	4904      	ldr	r1, [pc, #16]	; (8006508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40021000 	.word	0x40021000

0800650c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800651a:	4b6a      	ldr	r3, [pc, #424]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d018      	beq.n	8006558 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006526:	4b67      	ldr	r3, [pc, #412]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0203 	and.w	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d10d      	bne.n	8006552 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
       ||
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800653e:	4b61      	ldr	r3, [pc, #388]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	091b      	lsrs	r3, r3, #4
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
       ||
 800654e:	429a      	cmp	r2, r3
 8006550:	d047      	beq.n	80065e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e044      	b.n	80065e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d018      	beq.n	8006592 <RCCEx_PLLSAI2_Config+0x86>
 8006560:	2b03      	cmp	r3, #3
 8006562:	d825      	bhi.n	80065b0 <RCCEx_PLLSAI2_Config+0xa4>
 8006564:	2b01      	cmp	r3, #1
 8006566:	d002      	beq.n	800656e <RCCEx_PLLSAI2_Config+0x62>
 8006568:	2b02      	cmp	r3, #2
 800656a:	d009      	beq.n	8006580 <RCCEx_PLLSAI2_Config+0x74>
 800656c:	e020      	b.n	80065b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800656e:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d11d      	bne.n	80065b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800657e:	e01a      	b.n	80065b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006580:	4b50      	ldr	r3, [pc, #320]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d116      	bne.n	80065ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006590:	e013      	b.n	80065ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006592:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800659e:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ae:	e006      	b.n	80065be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
      break;
 80065b4:	e004      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065b6:	bf00      	nop
 80065b8:	e002      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065be:	bf00      	nop
    }

    if(status == HAL_OK)
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065c6:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6819      	ldr	r1, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	430b      	orrs	r3, r1
 80065dc:	4939      	ldr	r1, [pc, #228]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d167      	bne.n	80066b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065e8:	4b36      	ldr	r3, [pc, #216]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f4:	f7fc fdaa 	bl	800314c <HAL_GetTick>
 80065f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065fa:	e009      	b.n	8006610 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065fc:	f7fc fda6 	bl	800314c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d902      	bls.n	8006610 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	73fb      	strb	r3, [r7, #15]
        break;
 800660e:	e005      	b.n	800661c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006610:	4b2c      	ldr	r3, [pc, #176]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ef      	bne.n	80065fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d14a      	bne.n	80066b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d111      	bne.n	800664c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6892      	ldr	r2, [r2, #8]
 8006638:	0211      	lsls	r1, r2, #8
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	0912      	lsrs	r2, r2, #4
 8006640:	0452      	lsls	r2, r2, #17
 8006642:	430a      	orrs	r2, r1
 8006644:	491f      	ldr	r1, [pc, #124]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006646:	4313      	orrs	r3, r2
 8006648:	614b      	str	r3, [r1, #20]
 800664a:	e011      	b.n	8006670 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6892      	ldr	r2, [r2, #8]
 800665c:	0211      	lsls	r1, r2, #8
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6912      	ldr	r2, [r2, #16]
 8006662:	0852      	lsrs	r2, r2, #1
 8006664:	3a01      	subs	r2, #1
 8006666:	0652      	lsls	r2, r2, #25
 8006668:	430a      	orrs	r2, r1
 800666a:	4916      	ldr	r1, [pc, #88]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fc fd66 	bl	800314c <HAL_GetTick>
 8006680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006682:	e009      	b.n	8006698 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006684:	f7fc fd62 	bl	800314c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d902      	bls.n	8006698 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	73fb      	strb	r3, [r7, #15]
          break;
 8006696:	e005      	b.n	80066a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ef      	beq.n	8006684 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	4904      	ldr	r1, [pc, #16]	; (80066c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40021000 	.word	0x40021000

080066c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e049      	b.n	800676e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f841 	bl	8006776 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f000 fc4c 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d001      	beq.n	80067a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e04f      	b.n	8006844 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a23      	ldr	r2, [pc, #140]	; (8006850 <HAL_TIM_Base_Start_IT+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ce:	d018      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_TIM_Base_Start_IT+0xc8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <HAL_TIM_Base_Start_IT+0xcc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1c      	ldr	r2, [pc, #112]	; (800685c <HAL_TIM_Base_Start_IT+0xd0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <HAL_TIM_Base_Start_IT+0xd4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x76>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a19      	ldr	r2, [pc, #100]	; (8006864 <HAL_TIM_Base_Start_IT+0xd8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d115      	bne.n	800682e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <HAL_TIM_Base_Start_IT+0xdc>)
 800680a:	4013      	ands	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b06      	cmp	r3, #6
 8006812:	d015      	beq.n	8006840 <HAL_TIM_Base_Start_IT+0xb4>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681a:	d011      	beq.n	8006840 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682c:	e008      	b.n	8006840 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e000      	b.n	8006842 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006840:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	00010007 	.word	0x00010007

0800686c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e049      	b.n	8006912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb ffe8 	bl	8002868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f000 fb7a 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <HAL_TIM_PWM_Start+0x24>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e03c      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d109      	bne.n	800695a <HAL_TIM_PWM_Start+0x3e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02f      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d109      	bne.n	8006974 <HAL_TIM_PWM_Start+0x58>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e022      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d109      	bne.n	800698e <HAL_TIM_PWM_Start+0x72>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e015      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b10      	cmp	r3, #16
 8006992:	d109      	bne.n	80069a8 <HAL_TIM_PWM_Start+0x8c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e008      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e09c      	b.n	8006afc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_PWM_Start+0xb6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d0:	e023      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_PWM_Start+0xc6>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e0:	e01b      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_PWM_Start+0xd6>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f0:	e013      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start+0xe6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a00:	e00b      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0xf6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a10:	e003      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fe2e 	bl	8007684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <HAL_TIM_PWM_Start+0x1e8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x13e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a34      	ldr	r2, [pc, #208]	; (8006b08 <HAL_TIM_PWM_Start+0x1ec>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x13e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_TIM_PWM_Start+0x1f0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x13e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a31      	ldr	r2, [pc, #196]	; (8006b10 <HAL_TIM_PWM_Start+0x1f4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x13e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <HAL_TIM_PWM_Start+0x1f8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_PWM_Start+0x142>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <HAL_TIM_PWM_Start+0x144>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <HAL_TIM_PWM_Start+0x1e8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d018      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <HAL_TIM_PWM_Start+0x1fc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <HAL_TIM_PWM_Start+0x200>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <HAL_TIM_PWM_Start+0x204>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <HAL_TIM_PWM_Start+0x1ec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <HAL_TIM_PWM_Start+0x1f0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d115      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <HAL_TIM_PWM_Start+0x208>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d015      	beq.n	8006af8 <HAL_TIM_PWM_Start+0x1dc>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad2:	d011      	beq.n	8006af8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	e008      	b.n	8006af8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e000      	b.n	8006afa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	00010007 	.word	0x00010007

08006b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d020      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01b      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0202 	mvn.w	r2, #2
 8006b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9f8 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006b78:	e005      	b.n	8006b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9ea 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f9fb 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d020      	beq.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0204 	mvn.w	r2, #4
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9d2 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9c4 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9d5 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d020      	beq.n	8006c24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01b      	beq.n	8006c24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0208 	mvn.w	r2, #8
 8006bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9ac 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e005      	b.n	8006c1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f99e 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9af 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d020      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01b      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0210 	mvn.w	r2, #16
 8006c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2208      	movs	r2, #8
 8006c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f986 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e005      	b.n	8006c6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f978 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f989 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00c      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0201 	mvn.w	r2, #1
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb f9d8 	bl	8002044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fe1c 	bl	80078f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fe14 	bl	8007904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00c      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d007      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f948 	bl	8006f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0220 	mvn.w	r2, #32
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fddc 	bl	80078dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e0ff      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b14      	cmp	r3, #20
 8006d56:	f200 80f0 	bhi.w	8006f3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006f3b 	.word	0x08006f3b
 8006d68:	08006f3b 	.word	0x08006f3b
 8006d6c:	08006f3b 	.word	0x08006f3b
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006f3b 	.word	0x08006f3b
 8006d78:	08006f3b 	.word	0x08006f3b
 8006d7c:	08006f3b 	.word	0x08006f3b
 8006d80:	08006e37 	.word	0x08006e37
 8006d84:	08006f3b 	.word	0x08006f3b
 8006d88:	08006f3b 	.word	0x08006f3b
 8006d8c:	08006f3b 	.word	0x08006f3b
 8006d90:	08006e77 	.word	0x08006e77
 8006d94:	08006f3b 	.word	0x08006f3b
 8006d98:	08006f3b 	.word	0x08006f3b
 8006d9c:	08006f3b 	.word	0x08006f3b
 8006da0:	08006eb9 	.word	0x08006eb9
 8006da4:	08006f3b 	.word	0x08006f3b
 8006da8:	08006f3b 	.word	0x08006f3b
 8006dac:	08006f3b 	.word	0x08006f3b
 8006db0:	08006ef9 	.word	0x08006ef9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f98c 	bl	80070d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0208 	orr.w	r2, r2, #8
 8006dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0204 	bic.w	r2, r2, #4
 8006dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6999      	ldr	r1, [r3, #24]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	619a      	str	r2, [r3, #24]
      break;
 8006df2:	e0a5      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f9fc 	bl	80071f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	021a      	lsls	r2, r3, #8
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	619a      	str	r2, [r3, #24]
      break;
 8006e34:	e084      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fa65 	bl	800730c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0208 	orr.w	r2, r2, #8
 8006e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0204 	bic.w	r2, r2, #4
 8006e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69d9      	ldr	r1, [r3, #28]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	61da      	str	r2, [r3, #28]
      break;
 8006e74:	e064      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 facd 	bl	800741c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	021a      	lsls	r2, r3, #8
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	61da      	str	r2, [r3, #28]
      break;
 8006eb6:	e043      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fb16 	bl	80074f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ef6:	e023      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fb5a 	bl	80075b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f38:	e002      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a40      	ldr	r2, [pc, #256]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d00f      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a3d      	ldr	r2, [pc, #244]	; (80070bc <TIM_Base_SetConfig+0x118>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a3c      	ldr	r2, [pc, #240]	; (80070c0 <TIM_Base_SetConfig+0x11c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a3b      	ldr	r2, [pc, #236]	; (80070c4 <TIM_Base_SetConfig+0x120>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a3a      	ldr	r2, [pc, #232]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d108      	bne.n	8006ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2f      	ldr	r2, [pc, #188]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01f      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007004:	d01b      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <TIM_Base_SetConfig+0x118>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d017      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <TIM_Base_SetConfig+0x11c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2a      	ldr	r2, [pc, #168]	; (80070c4 <TIM_Base_SetConfig+0x120>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00f      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00b      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a28      	ldr	r2, [pc, #160]	; (80070cc <TIM_Base_SetConfig+0x128>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d007      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <TIM_Base_SetConfig+0x12c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_Base_SetConfig+0x9a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <TIM_Base_SetConfig+0x130>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d108      	bne.n	8007050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00f      	beq.n	800709c <TIM_Base_SetConfig+0xf8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0xf8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a11      	ldr	r2, [pc, #68]	; (80070cc <TIM_Base_SetConfig+0x128>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0xf8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <TIM_Base_SetConfig+0x12c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0xf8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a0f      	ldr	r2, [pc, #60]	; (80070d4 <TIM_Base_SetConfig+0x130>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d103      	bne.n	80070a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	615a      	str	r2, [r3, #20]
}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40013400 	.word	0x40013400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40014400 	.word	0x40014400
 80070d4:	40014800 	.word	0x40014800

080070d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f023 0201 	bic.w	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 0302 	bic.w	r3, r3, #2
 8007124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <TIM_OC1_SetConfig+0x10c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00f      	beq.n	8007158 <TIM_OC1_SetConfig+0x80>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a2b      	ldr	r2, [pc, #172]	; (80071e8 <TIM_OC1_SetConfig+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00b      	beq.n	8007158 <TIM_OC1_SetConfig+0x80>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <TIM_OC1_SetConfig+0x114>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d007      	beq.n	8007158 <TIM_OC1_SetConfig+0x80>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <TIM_OC1_SetConfig+0x118>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC1_SetConfig+0x80>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <TIM_OC1_SetConfig+0x11c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d10c      	bne.n	8007172 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f023 0308 	bic.w	r3, r3, #8
 800715e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f023 0304 	bic.w	r3, r3, #4
 8007170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1b      	ldr	r2, [pc, #108]	; (80071e4 <TIM_OC1_SetConfig+0x10c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00f      	beq.n	800719a <TIM_OC1_SetConfig+0xc2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <TIM_OC1_SetConfig+0x110>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_OC1_SetConfig+0xc2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a19      	ldr	r2, [pc, #100]	; (80071ec <TIM_OC1_SetConfig+0x114>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC1_SetConfig+0xc2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <TIM_OC1_SetConfig+0x118>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC1_SetConfig+0xc2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <TIM_OC1_SetConfig+0x11c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d111      	bne.n	80071be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f023 0210 	bic.w	r2, r3, #16
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0320 	bic.w	r3, r3, #32
 8007246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <TIM_OC2_SetConfig+0x100>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC2_SetConfig+0x6c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a27      	ldr	r2, [pc, #156]	; (80072fc <TIM_OC2_SetConfig+0x104>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d10d      	bne.n	8007280 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800726a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a1d      	ldr	r2, [pc, #116]	; (80072f8 <TIM_OC2_SetConfig+0x100>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00f      	beq.n	80072a8 <TIM_OC2_SetConfig+0xb0>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <TIM_OC2_SetConfig+0x104>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00b      	beq.n	80072a8 <TIM_OC2_SetConfig+0xb0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC2_SetConfig+0x108>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d007      	beq.n	80072a8 <TIM_OC2_SetConfig+0xb0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC2_SetConfig+0x10c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_OC2_SetConfig+0xb0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC2_SetConfig+0x110>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d113      	bne.n	80072d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40013400 	.word	0x40013400
 8007300:	40014000 	.word	0x40014000
 8007304:	40014400 	.word	0x40014400
 8007308:	40014800 	.word	0x40014800

0800730c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a27      	ldr	r2, [pc, #156]	; (8007408 <TIM_OC3_SetConfig+0xfc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC3_SetConfig+0x6a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a26      	ldr	r2, [pc, #152]	; (800740c <TIM_OC3_SetConfig+0x100>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10d      	bne.n	8007392 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <TIM_OC3_SetConfig+0xfc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00f      	beq.n	80073ba <TIM_OC3_SetConfig+0xae>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <TIM_OC3_SetConfig+0x100>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <TIM_OC3_SetConfig+0xae>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <TIM_OC3_SetConfig+0x104>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <TIM_OC3_SetConfig+0xae>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a19      	ldr	r2, [pc, #100]	; (8007414 <TIM_OC3_SetConfig+0x108>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <TIM_OC3_SetConfig+0xae>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a18      	ldr	r2, [pc, #96]	; (8007418 <TIM_OC3_SetConfig+0x10c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d113      	bne.n	80073e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800

0800741c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <TIM_OC4_SetConfig+0xc0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00f      	beq.n	80074a0 <TIM_OC4_SetConfig+0x84>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <TIM_OC4_SetConfig+0xc4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <TIM_OC4_SetConfig+0x84>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <TIM_OC4_SetConfig+0xc8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_OC4_SetConfig+0x84>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <TIM_OC4_SetConfig+0xcc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC4_SetConfig+0x84>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a14      	ldr	r2, [pc, #80]	; (80074ec <TIM_OC4_SetConfig+0xd0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d109      	bne.n	80074b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	019b      	lsls	r3, r3, #6
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40014400 	.word	0x40014400
 80074ec:	40014800 	.word	0x40014800

080074f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <TIM_OC5_SetConfig+0xb4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_OC5_SetConfig+0x7a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <TIM_OC5_SetConfig+0xb8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_OC5_SetConfig+0x7a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a15      	ldr	r2, [pc, #84]	; (80075ac <TIM_OC5_SetConfig+0xbc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_OC5_SetConfig+0x7a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a14      	ldr	r2, [pc, #80]	; (80075b0 <TIM_OC5_SetConfig+0xc0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_OC5_SetConfig+0x7a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <TIM_OC5_SetConfig+0xc4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d109      	bne.n	800757e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	621a      	str	r2, [r3, #32]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	051b      	lsls	r3, r3, #20
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a18      	ldr	r2, [pc, #96]	; (8007670 <TIM_OC6_SetConfig+0xb8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00f      	beq.n	8007634 <TIM_OC6_SetConfig+0x7c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a17      	ldr	r2, [pc, #92]	; (8007674 <TIM_OC6_SetConfig+0xbc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00b      	beq.n	8007634 <TIM_OC6_SetConfig+0x7c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a16      	ldr	r2, [pc, #88]	; (8007678 <TIM_OC6_SetConfig+0xc0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_OC6_SetConfig+0x7c>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a15      	ldr	r2, [pc, #84]	; (800767c <TIM_OC6_SetConfig+0xc4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC6_SetConfig+0x7c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a14      	ldr	r2, [pc, #80]	; (8007680 <TIM_OC6_SetConfig+0xc8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d109      	bne.n	8007648 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800763a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	029b      	lsls	r3, r3, #10
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40013400 	.word	0x40013400
 8007678:	40014000 	.word	0x40014000
 800767c:	40014400 	.word	0x40014400
 8007680:	40014800 	.word	0x40014800

08007684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	2201      	movs	r2, #1
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	401a      	ands	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	fa01 f303 	lsl.w	r3, r1, r3
 80076bc:	431a      	orrs	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e068      	b.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2d      	ldr	r2, [pc, #180]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d108      	bne.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01d      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d018      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00e      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a18      	ldr	r2, [pc, #96]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a13      	ldr	r2, [pc, #76]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a14      	ldr	r2, [pc, #80]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10c      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	4313      	orrs	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40013400 	.word	0x40013400
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40014000 	.word	0x40014000

080077e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e065      	b.n	80078c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a16      	ldr	r2, [pc, #88]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d004      	beq.n	800788a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a14      	ldr	r2, [pc, #80]	; (80078d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d115      	bne.n	80078b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	051b      	lsls	r3, r3, #20
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40013400 	.word	0x40013400

080078dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e040      	b.n	80079ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fb f8fc 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2224      	movs	r2, #36	; 0x24
 8007944:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fbc2 	bl	80080e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f907 	bl	8007b78 <UART_SetConfig>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e01b      	b.n	80079ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fc41 	bl	800822c <UART_CheckIdleState>
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d178      	bne.n	8007abe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <HAL_UART_Transmit+0x24>
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e071      	b.n	8007ac0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2221      	movs	r2, #33	; 0x21
 80079e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079ea:	f7fb fbaf 	bl	800314c <HAL_GetTick>
 80079ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	88fa      	ldrh	r2, [r7, #6]
 80079fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a08:	d108      	bne.n	8007a1c <HAL_UART_Transmit+0x68>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e003      	b.n	8007a24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a24:	e030      	b.n	8007a88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fca3 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e03c      	b.n	8007ac0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	881a      	ldrh	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a58:	b292      	uxth	r2, r2
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	3302      	adds	r3, #2
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e008      	b.n	8007a76 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1c8      	bne.n	8007a26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fc6c 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e005      	b.n	8007ac0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d137      	bne.n	8007b50 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_UART_Receive_IT+0x24>
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e030      	b.n	8007b52 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_UART_Receive_IT+0x94>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d01f      	beq.n	8007b40 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d018      	beq.n	8007b40 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	623b      	str	r3, [r7, #32]
 8007b2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	69f9      	ldr	r1, [r7, #28]
 8007b32:	6a3a      	ldr	r2, [r7, #32]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e6      	bne.n	8007b0e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fc80 	bl	800844c <UART_Start_Receive_IT>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	e000      	b.n	8007b52 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3728      	adds	r7, #40	; 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40008000 	.word	0x40008000

08007b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b7c:	b08a      	sub	sp, #40	; 0x28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4ba4      	ldr	r3, [pc, #656]	; (8007e38 <UART_SetConfig+0x2c0>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a99      	ldr	r2, [pc, #612]	; (8007e3c <UART_SetConfig+0x2c4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	4313      	orrs	r3, r2
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a90      	ldr	r2, [pc, #576]	; (8007e40 <UART_SetConfig+0x2c8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d126      	bne.n	8007c50 <UART_SetConfig+0xd8>
 8007c02:	4b90      	ldr	r3, [pc, #576]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d81b      	bhi.n	8007c48 <UART_SetConfig+0xd0>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0xa0>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2e:	e116      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007c30:	2302      	movs	r3, #2
 8007c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c36:	e112      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c3e:	e10e      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c46:	e10a      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e106      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a7c      	ldr	r2, [pc, #496]	; (8007e48 <UART_SetConfig+0x2d0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d138      	bne.n	8007ccc <UART_SetConfig+0x154>
 8007c5a:	4b7a      	ldr	r3, [pc, #488]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	f003 030c 	and.w	r3, r3, #12
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d82d      	bhi.n	8007cc4 <UART_SetConfig+0x14c>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0xf8>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007cc5 	.word	0x08007cc5
 8007c78:	08007cc5 	.word	0x08007cc5
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007cc5 	.word	0x08007cc5
 8007c88:	08007cc5 	.word	0x08007cc5
 8007c8c:	08007cc5 	.word	0x08007cc5
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007caa:	e0d8      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007cac:	2302      	movs	r3, #2
 8007cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb2:	e0d4      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cba:	e0d0      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc2:	e0cc      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cca:	e0c8      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5e      	ldr	r2, [pc, #376]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d125      	bne.n	8007d22 <UART_SetConfig+0x1aa>
 8007cd6:	4b5b      	ldr	r3, [pc, #364]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce0:	2b30      	cmp	r3, #48	; 0x30
 8007ce2:	d016      	beq.n	8007d12 <UART_SetConfig+0x19a>
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d818      	bhi.n	8007d1a <UART_SetConfig+0x1a2>
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d00a      	beq.n	8007d02 <UART_SetConfig+0x18a>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d814      	bhi.n	8007d1a <UART_SetConfig+0x1a2>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <UART_SetConfig+0x182>
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d008      	beq.n	8007d0a <UART_SetConfig+0x192>
 8007cf8:	e00f      	b.n	8007d1a <UART_SetConfig+0x1a2>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d00:	e0ad      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d02:	2302      	movs	r3, #2
 8007d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d08:	e0a9      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d10:	e0a5      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d12:	2308      	movs	r3, #8
 8007d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d18:	e0a1      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d20:	e09d      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a4a      	ldr	r2, [pc, #296]	; (8007e50 <UART_SetConfig+0x2d8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d125      	bne.n	8007d78 <UART_SetConfig+0x200>
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d36:	2bc0      	cmp	r3, #192	; 0xc0
 8007d38:	d016      	beq.n	8007d68 <UART_SetConfig+0x1f0>
 8007d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d3c:	d818      	bhi.n	8007d70 <UART_SetConfig+0x1f8>
 8007d3e:	2b80      	cmp	r3, #128	; 0x80
 8007d40:	d00a      	beq.n	8007d58 <UART_SetConfig+0x1e0>
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d814      	bhi.n	8007d70 <UART_SetConfig+0x1f8>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <UART_SetConfig+0x1d8>
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d008      	beq.n	8007d60 <UART_SetConfig+0x1e8>
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x1f8>
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e082      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5e:	e07e      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d66:	e07a      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6e:	e076      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d76:	e072      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a35      	ldr	r2, [pc, #212]	; (8007e54 <UART_SetConfig+0x2dc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d12a      	bne.n	8007dd8 <UART_SetConfig+0x260>
 8007d82:	4b30      	ldr	r3, [pc, #192]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d90:	d01a      	beq.n	8007dc8 <UART_SetConfig+0x250>
 8007d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d96:	d81b      	bhi.n	8007dd0 <UART_SetConfig+0x258>
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d00c      	beq.n	8007db8 <UART_SetConfig+0x240>
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da2:	d815      	bhi.n	8007dd0 <UART_SetConfig+0x258>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <UART_SetConfig+0x238>
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dac:	d008      	beq.n	8007dc0 <UART_SetConfig+0x248>
 8007dae:	e00f      	b.n	8007dd0 <UART_SetConfig+0x258>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e052      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007db8:	2302      	movs	r3, #2
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbe:	e04e      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc6:	e04a      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dce:	e046      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd6:	e042      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <UART_SetConfig+0x2c4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d13a      	bne.n	8007e58 <UART_SetConfig+0x2e0>
 8007de2:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007df0:	d01a      	beq.n	8007e28 <UART_SetConfig+0x2b0>
 8007df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007df6:	d81b      	bhi.n	8007e30 <UART_SetConfig+0x2b8>
 8007df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfc:	d00c      	beq.n	8007e18 <UART_SetConfig+0x2a0>
 8007dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e02:	d815      	bhi.n	8007e30 <UART_SetConfig+0x2b8>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <UART_SetConfig+0x298>
 8007e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0c:	d008      	beq.n	8007e20 <UART_SetConfig+0x2a8>
 8007e0e:	e00f      	b.n	8007e30 <UART_SetConfig+0x2b8>
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e022      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1e:	e01e      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007e20:	2304      	movs	r3, #4
 8007e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e26:	e01a      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2e:	e016      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e36:	e012      	b.n	8007e5e <UART_SetConfig+0x2e6>
 8007e38:	efff69f3 	.word	0xefff69f3
 8007e3c:	40008000 	.word	0x40008000
 8007e40:	40013800 	.word	0x40013800
 8007e44:	40021000 	.word	0x40021000
 8007e48:	40004400 	.word	0x40004400
 8007e4c:	40004800 	.word	0x40004800
 8007e50:	40004c00 	.word	0x40004c00
 8007e54:	40005000 	.word	0x40005000
 8007e58:	2310      	movs	r3, #16
 8007e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a9f      	ldr	r2, [pc, #636]	; (80080e0 <UART_SetConfig+0x568>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d17a      	bne.n	8007f5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d824      	bhi.n	8007eba <UART_SetConfig+0x342>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x300>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ebb 	.word	0x08007ebb
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ebb 	.word	0x08007ebb
 8007e88:	08007eab 	.word	0x08007eab
 8007e8c:	08007ebb 	.word	0x08007ebb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ebb 	.word	0x08007ebb
 8007e98:	08007eb3 	.word	0x08007eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fd fe9a 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	61f8      	str	r0, [r7, #28]
        break;
 8007ea2:	e010      	b.n	8007ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea4:	4b8f      	ldr	r3, [pc, #572]	; (80080e4 <UART_SetConfig+0x56c>)
 8007ea6:	61fb      	str	r3, [r7, #28]
        break;
 8007ea8:	e00d      	b.n	8007ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eaa:	f7fd fdfb 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007eae:	61f8      	str	r0, [r7, #28]
        break;
 8007eb0:	e009      	b.n	8007ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb6:	61fb      	str	r3, [r7, #28]
        break;
 8007eb8:	e005      	b.n	8007ec6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80fb 	beq.w	80080c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d305      	bcc.n	8007eea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d903      	bls.n	8007ef2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ef0:	e0e8      	b.n	80080c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	461c      	mov	r4, r3
 8007ef8:	4615      	mov	r5, r2
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	022b      	lsls	r3, r5, #8
 8007f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f08:	0222      	lsls	r2, r4, #8
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	6849      	ldr	r1, [r1, #4]
 8007f0e:	0849      	lsrs	r1, r1, #1
 8007f10:	2000      	movs	r0, #0
 8007f12:	4688      	mov	r8, r1
 8007f14:	4681      	mov	r9, r0
 8007f16:	eb12 0a08 	adds.w	sl, r2, r8
 8007f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2c:	4650      	mov	r0, sl
 8007f2e:	4659      	mov	r1, fp
 8007f30:	f7f8 feaa 	bl	8000c88 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f42:	d308      	bcc.n	8007f56 <UART_SetConfig+0x3de>
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4a:	d204      	bcs.n	8007f56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	e0b6      	b.n	80080c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f5c:	e0b2      	b.n	80080c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f66:	d15e      	bne.n	8008026 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d828      	bhi.n	8007fc2 <UART_SetConfig+0x44a>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x400>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fc3 	.word	0x08007fc3
 8007f88:	08007fb3 	.word	0x08007fb3
 8007f8c:	08007fc3 	.word	0x08007fc3
 8007f90:	08007fc3 	.word	0x08007fc3
 8007f94:	08007fc3 	.word	0x08007fc3
 8007f98:	08007fbb 	.word	0x08007fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f7fd fe1a 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8007fa0:	61f8      	str	r0, [r7, #28]
        break;
 8007fa2:	e014      	b.n	8007fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa4:	f7fd fe2c 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 8007fa8:	61f8      	str	r0, [r7, #28]
        break;
 8007faa:	e010      	b.n	8007fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fac:	4b4d      	ldr	r3, [pc, #308]	; (80080e4 <UART_SetConfig+0x56c>)
 8007fae:	61fb      	str	r3, [r7, #28]
        break;
 8007fb0:	e00d      	b.n	8007fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb2:	f7fd fd77 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007fb6:	61f8      	str	r0, [r7, #28]
        break;
 8007fb8:	e009      	b.n	8007fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fbe:	61fb      	str	r3, [r7, #28]
        break;
 8007fc0:	e005      	b.n	8007fce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d077      	beq.n	80080c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	005a      	lsls	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	441a      	add	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d916      	bls.n	800801e <UART_SetConfig+0x4a6>
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff6:	d212      	bcs.n	800801e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f023 030f 	bic.w	r3, r3, #15
 8008000:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	b29b      	uxth	r3, r3
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	b29a      	uxth	r2, r3
 800800e:	8afb      	ldrh	r3, [r7, #22]
 8008010:	4313      	orrs	r3, r2
 8008012:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	8afa      	ldrh	r2, [r7, #22]
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	e052      	b.n	80080c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008024:	e04e      	b.n	80080c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800802a:	2b08      	cmp	r3, #8
 800802c:	d827      	bhi.n	800807e <UART_SetConfig+0x506>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <UART_SetConfig+0x4bc>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008059 	.word	0x08008059
 8008038:	08008061 	.word	0x08008061
 800803c:	08008069 	.word	0x08008069
 8008040:	0800807f 	.word	0x0800807f
 8008044:	0800806f 	.word	0x0800806f
 8008048:	0800807f 	.word	0x0800807f
 800804c:	0800807f 	.word	0x0800807f
 8008050:	0800807f 	.word	0x0800807f
 8008054:	08008077 	.word	0x08008077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008058:	f7fd fdbc 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 800805c:	61f8      	str	r0, [r7, #28]
        break;
 800805e:	e014      	b.n	800808a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008060:	f7fd fdce 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 8008064:	61f8      	str	r0, [r7, #28]
        break;
 8008066:	e010      	b.n	800808a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <UART_SetConfig+0x56c>)
 800806a:	61fb      	str	r3, [r7, #28]
        break;
 800806c:	e00d      	b.n	800808a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806e:	f7fd fd19 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8008072:	61f8      	str	r0, [r7, #28]
        break;
 8008074:	e009      	b.n	800808a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800807a:	61fb      	str	r3, [r7, #28]
        break;
 800807c:	e005      	b.n	800808a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008088:	bf00      	nop
    }

    if (pclk != 0U)
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	085a      	lsrs	r2, r3, #1
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	441a      	add	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d909      	bls.n	80080be <UART_SetConfig+0x546>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b0:	d205      	bcs.n	80080be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e002      	b.n	80080c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3728      	adds	r7, #40	; 0x28
 80080d8:	46bd      	mov	sp, r7
 80080da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080de:	bf00      	nop
 80080e0:	40008000 	.word	0x40008000
 80080e4:	00f42400 	.word	0x00f42400

080080e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01a      	beq.n	80081fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e6:	d10a      	bne.n	80081fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	605a      	str	r2, [r3, #4]
  }
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b098      	sub	sp, #96	; 0x60
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800823c:	f7fa ff86 	bl	800314c <HAL_GetTick>
 8008240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b08      	cmp	r3, #8
 800824e:	d12e      	bne.n	80082ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008258:	2200      	movs	r2, #0
 800825a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f88c 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d021      	beq.n	80082ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827e:	653b      	str	r3, [r7, #80]	; 0x50
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
 800828a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800828e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e062      	b.n	8008374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d149      	bne.n	8008350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f856 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d03c      	beq.n	8008350 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	623b      	str	r3, [r7, #32]
   return(result);
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
 80082f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60fb      	str	r3, [r7, #12]
   return(result);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008328:	61fa      	str	r2, [r7, #28]
 800832a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e011      	b.n	8008374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3758      	adds	r7, #88	; 0x58
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838c:	e049      	b.n	8008422 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008394:	d045      	beq.n	8008422 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008396:	f7fa fed9 	bl	800314c <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d302      	bcc.n	80083ac <UART_WaitOnFlagUntilTimeout+0x30>
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e048      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d031      	beq.n	8008422 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d110      	bne.n	80083ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 f8ff 	bl	80085d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2208      	movs	r2, #8
 80083de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e029      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fc:	d111      	bne.n	8008422 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f8e5 	bl	80085d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e00f      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4013      	ands	r3, r2
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	bf0c      	ite	eq
 8008432:	2301      	moveq	r3, #1
 8008434:	2300      	movne	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	429a      	cmp	r2, r3
 800843e:	d0a6      	beq.n	800838e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800844c:	b480      	push	{r7}
 800844e:	b097      	sub	sp, #92	; 0x5c
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4613      	mov	r3, r2
 8008458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d10e      	bne.n	800849e <UART_Start_Receive_IT+0x52>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d105      	bne.n	8008494 <UART_Start_Receive_IT+0x48>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800848e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008492:	e02d      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	22ff      	movs	r2, #255	; 0xff
 8008498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800849c:	e028      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10d      	bne.n	80084c2 <UART_Start_Receive_IT+0x76>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d104      	bne.n	80084b8 <UART_Start_Receive_IT+0x6c>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	22ff      	movs	r2, #255	; 0xff
 80084b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084b6:	e01b      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	227f      	movs	r2, #127	; 0x7f
 80084bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084c0:	e016      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ca:	d10d      	bne.n	80084e8 <UART_Start_Receive_IT+0x9c>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <UART_Start_Receive_IT+0x92>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	227f      	movs	r2, #127	; 0x7f
 80084d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084dc:	e008      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	223f      	movs	r2, #63	; 0x3f
 80084e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084e6:	e003      	b.n	80084f0 <UART_Start_Receive_IT+0xa4>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2222      	movs	r2, #34	; 0x22
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	657b      	str	r3, [r7, #84]	; 0x54
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008520:	64ba      	str	r2, [r7, #72]	; 0x48
 8008522:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800852e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853c:	d107      	bne.n	800854e <UART_Start_Receive_IT+0x102>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a21      	ldr	r2, [pc, #132]	; (80085d0 <UART_Start_Receive_IT+0x184>)
 800854a:	669a      	str	r2, [r3, #104]	; 0x68
 800854c:	e002      	b.n	8008554 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4a20      	ldr	r2, [pc, #128]	; (80085d4 <UART_Start_Receive_IT+0x188>)
 8008552:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d019      	beq.n	8008590 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
 800857c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e6      	bne.n	800855c <UART_Start_Receive_IT+0x110>
 800858e:	e018      	b.n	80085c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	613b      	str	r3, [r7, #16]
   return(result);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f043 0320 	orr.w	r3, r3, #32
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ae:	623b      	str	r3, [r7, #32]
 80085b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	69f9      	ldr	r1, [r7, #28]
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e6      	bne.n	8008590 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	375c      	adds	r7, #92	; 0x5c
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	0800885d 	.word	0x0800885d
 80085d4:	080086a1 	.word	0x080086a1

080085d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b095      	sub	sp, #84	; 0x54
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008600:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	61fb      	str	r3, [r7, #28]
   return(result);
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	64bb      	str	r3, [r7, #72]	; 0x48
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800864a:	2b01      	cmp	r3, #1
 800864c:	d118      	bne.n	8008680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	60bb      	str	r3, [r7, #8]
   return(result);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0310 	bic.w	r3, r3, #16
 8008662:	647b      	str	r3, [r7, #68]	; 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	613b      	str	r3, [r7, #16]
   return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008694:	bf00      	nop
 8008696:	3754      	adds	r7, #84	; 0x54
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b09c      	sub	sp, #112	; 0x70
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b8:	2b22      	cmp	r3, #34	; 0x22
 80086ba:	f040 80be 	bne.w	800883a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086cc:	b2d9      	uxtb	r1, r3
 80086ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d8:	400a      	ands	r2, r1
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 80a3 	bne.w	800884e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800871c:	66bb      	str	r3, [r7, #104]	; 0x68
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008726:	65bb      	str	r3, [r7, #88]	; 0x58
 8008728:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800872c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	667b      	str	r3, [r7, #100]	; 0x64
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800875a:	647a      	str	r2, [r7, #68]	; 0x44
 800875c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a34      	ldr	r2, [pc, #208]	; (8008858 <UART_RxISR_8BIT+0x1b8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d01f      	beq.n	80087cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d018      	beq.n	80087cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	623b      	str	r3, [r7, #32]
   return(result);
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087ae:	663b      	str	r3, [r7, #96]	; 0x60
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b8:	633b      	str	r3, [r7, #48]	; 0x30
 80087ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e6      	bne.n	800879a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d12e      	bne.n	8008832 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0310 	bic.w	r3, r3, #16
 80087ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b10      	cmp	r3, #16
 8008818:	d103      	bne.n	8008822 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f998 	bl	8007b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008830:	e00d      	b.n	800884e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7f8 fc60 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 8008838:	e009      	b.n	800884e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	8b1b      	ldrh	r3, [r3, #24]
 8008840:	b29a      	uxth	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0208 	orr.w	r2, r2, #8
 800884a:	b292      	uxth	r2, r2
 800884c:	831a      	strh	r2, [r3, #24]
}
 800884e:	bf00      	nop
 8008850:	3770      	adds	r7, #112	; 0x70
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40008000 	.word	0x40008000

0800885c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b09c      	sub	sp, #112	; 0x70
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800886a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008874:	2b22      	cmp	r3, #34	; 0x22
 8008876:	f040 80be 	bne.w	80089f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008888:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800888a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800888e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008892:	4013      	ands	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008898:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	1c9a      	adds	r2, r3, #2
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 80a3 	bne.w	8008a0a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	667b      	str	r3, [r7, #100]	; 0x64
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088e2:	657b      	str	r3, [r7, #84]	; 0x54
 80088e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	663b      	str	r3, [r7, #96]	; 0x60
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008916:	643a      	str	r2, [r7, #64]	; 0x40
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800891c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a34      	ldr	r2, [pc, #208]	; (8008a14 <UART_RxISR_16BIT+0x1b8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01f      	beq.n	8008988 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	61fb      	str	r3, [r7, #28]
   return(result);
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800896a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008976:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800897a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898c:	2b01      	cmp	r3, #1
 800898e:	d12e      	bne.n	80089ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6979      	ldr	r1, [r7, #20]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f003 0310 	and.w	r3, r3, #16
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d103      	bne.n	80089de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2210      	movs	r2, #16
 80089dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff f8ba 	bl	8007b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ec:	e00d      	b.n	8008a0a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f8 fb82 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 80089f4:	e009      	b.n	8008a0a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	8b1b      	ldrh	r3, [r3, #24]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0208 	orr.w	r2, r2, #8
 8008a06:	b292      	uxth	r2, r2
 8008a08:	831a      	strh	r2, [r3, #24]
}
 8008a0a:	bf00      	nop
 8008a0c:	3770      	adds	r7, #112	; 0x70
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40008000 	.word	0x40008000

08008a18 <__NVIC_SetPriority>:
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	6039      	str	r1, [r7, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	db0a      	blt.n	8008a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	490c      	ldr	r1, [pc, #48]	; (8008a64 <__NVIC_SetPriority+0x4c>)
 8008a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a36:	0112      	lsls	r2, r2, #4
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a40:	e00a      	b.n	8008a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	4908      	ldr	r1, [pc, #32]	; (8008a68 <__NVIC_SetPriority+0x50>)
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	3b04      	subs	r3, #4
 8008a50:	0112      	lsls	r2, r2, #4
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	440b      	add	r3, r1
 8008a56:	761a      	strb	r2, [r3, #24]
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	e000e100 	.word	0xe000e100
 8008a68:	e000ed00 	.word	0xe000ed00

08008a6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <SysTick_Handler+0x1c>)
 8008a72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008a74:	f001 fd28 	bl	800a4c8 <xTaskGetSchedulerState>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d001      	beq.n	8008a82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008a7e:	f002 fb13 	bl	800b0a8 <xPortSysTickHandler>
  }
}
 8008a82:	bf00      	nop
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	e000e010 	.word	0xe000e010

08008a8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a90:	2100      	movs	r1, #0
 8008a92:	f06f 0004 	mvn.w	r0, #4
 8008a96:	f7ff ffbf 	bl	8008a18 <__NVIC_SetPriority>
#endif
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa6:	f3ef 8305 	mrs	r3, IPSR
 8008aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8008aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ab2:	f06f 0305 	mvn.w	r3, #5
 8008ab6:	607b      	str	r3, [r7, #4]
 8008ab8:	e00c      	b.n	8008ad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008aba:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <osKernelInitialize+0x44>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ac2:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <osKernelInitialize+0x44>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	607b      	str	r3, [r7, #4]
 8008acc:	e002      	b.n	8008ad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ad4:	687b      	ldr	r3, [r7, #4]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	2000169c 	.word	0x2000169c

08008ae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aee:	f3ef 8305 	mrs	r3, IPSR
 8008af2:	603b      	str	r3, [r7, #0]
  return(result);
 8008af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008afa:	f06f 0305 	mvn.w	r3, #5
 8008afe:	607b      	str	r3, [r7, #4]
 8008b00:	e010      	b.n	8008b24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <osKernelStart+0x48>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d109      	bne.n	8008b1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008b0a:	f7ff ffbf 	bl	8008a8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <osKernelStart+0x48>)
 8008b10:	2202      	movs	r2, #2
 8008b12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008b14:	f001 f87c 	bl	8009c10 <vTaskStartScheduler>
      stat = osOK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	607b      	str	r3, [r7, #4]
 8008b1c:	e002      	b.n	8008b24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b24:	687b      	ldr	r3, [r7, #4]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000169c 	.word	0x2000169c

08008b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08e      	sub	sp, #56	; 0x38
 8008b38:	af04      	add	r7, sp, #16
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b44:	f3ef 8305 	mrs	r3, IPSR
 8008b48:	617b      	str	r3, [r7, #20]
  return(result);
 8008b4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d17e      	bne.n	8008c4e <osThreadNew+0x11a>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d07b      	beq.n	8008c4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008b56:	2380      	movs	r3, #128	; 0x80
 8008b58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008b5a:	2318      	movs	r3, #24
 8008b5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008b62:	f04f 33ff 	mov.w	r3, #4294967295
 8008b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d045      	beq.n	8008bfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <osThreadNew+0x48>
        name = attr->name;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d008      	beq.n	8008ba2 <osThreadNew+0x6e>
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2b38      	cmp	r3, #56	; 0x38
 8008b94:	d805      	bhi.n	8008ba2 <osThreadNew+0x6e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <osThreadNew+0x72>
        return (NULL);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e054      	b.n	8008c50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	089b      	lsrs	r3, r3, #2
 8008bb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <osThreadNew+0xa8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	2ba7      	cmp	r3, #167	; 0xa7
 8008bc4:	d90a      	bls.n	8008bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d006      	beq.n	8008bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <osThreadNew+0xa8>
        mem = 1;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	e010      	b.n	8008bfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10c      	bne.n	8008bfe <osThreadNew+0xca>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <osThreadNew+0xca>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <osThreadNew+0xca>
          mem = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e001      	b.n	8008bfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d110      	bne.n	8008c26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	6a3a      	ldr	r2, [r7, #32]
 8008c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fe0c 	bl	8009838 <xTaskCreateStatic>
 8008c20:	4603      	mov	r3, r0
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	e013      	b.n	8008c4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d110      	bne.n	8008c4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	f107 0310 	add.w	r3, r7, #16
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fe57 	bl	80098f2 <xTaskCreate>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d001      	beq.n	8008c4e <osThreadNew+0x11a>
            hTask = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c4e:	693b      	ldr	r3, [r7, #16]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3728      	adds	r7, #40	; 0x28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c60:	f3ef 8305 	mrs	r3, IPSR
 8008c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <osDelay+0x1c>
    stat = osErrorISR;
 8008c6c:	f06f 0305 	mvn.w	r3, #5
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	e007      	b.n	8008c84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 ff92 	bl	8009ba8 <vTaskDelay>
    }
  }

  return (stat);
 8008c84:	68fb      	ldr	r3, [r7, #12]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4a07      	ldr	r2, [pc, #28]	; (8008cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8008ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4a06      	ldr	r2, [pc, #24]	; (8008cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8008ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2280      	movs	r2, #128	; 0x80
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	200016a0 	.word	0x200016a0
 8008cc0:	20001748 	.word	0x20001748

08008cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a07      	ldr	r2, [pc, #28]	; (8008cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4a06      	ldr	r2, [pc, #24]	; (8008cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8008cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20001948 	.word	0x20001948
 8008cf4:	200019f0 	.word	0x200019f0

08008cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f103 0208 	add.w	r2, r3, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f103 0208 	add.w	r2, r3, #8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f103 0208 	add.w	r2, r3, #8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d103      	bne.n	8008dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e00c      	b.n	8008dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e002      	b.n	8008dc8 <vListInsert+0x2e>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d2f6      	bcs.n	8008dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	601a      	str	r2, [r3, #0]
}
 8008e00:	bf00      	nop
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6892      	ldr	r2, [r2, #8]
 8008e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6852      	ldr	r2, [r2, #4]
 8008e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d103      	bne.n	8008e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	1e5a      	subs	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e8a:	f002 f87b 	bl	800af84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e96:	68f9      	ldr	r1, [r7, #12]
 8008e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	441a      	add	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	68f9      	ldr	r1, [r7, #12]
 8008ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	441a      	add	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	22ff      	movs	r2, #255	; 0xff
 8008ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d114      	bne.n	8008f0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01a      	beq.n	8008f1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3310      	adds	r3, #16
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 f929 	bl	800a144 <xTaskRemoveFromEventList>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d012      	beq.n	8008f1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <xQueueGenericReset+0xcc>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	e009      	b.n	8008f1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3310      	adds	r3, #16
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fef2 	bl	8008cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3324      	adds	r3, #36	; 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff feed 	bl	8008cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f1e:	f002 f861 	bl	800afe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f22:	2301      	movs	r3, #1
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	; 0x38
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <xQueueGenericCreateStatic+0x52>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <xQueueGenericCreateStatic+0x56>
 8008f82:	2301      	movs	r3, #1
 8008f84:	e000      	b.n	8008f88 <xQueueGenericCreateStatic+0x58>
 8008f86:	2300      	movs	r3, #0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <xQueueGenericCreateStatic+0x7e>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericCreateStatic+0x82>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericCreateStatic+0x84>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61fb      	str	r3, [r7, #28]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fce:	2350      	movs	r3, #80	; 0x50
 8008fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b50      	cmp	r3, #80	; 0x50
 8008fd6:	d00a      	beq.n	8008fee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	61bb      	str	r3, [r7, #24]
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4613      	mov	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f805 	bl	8009020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009018:	4618      	mov	r0, r3
 800901a:	3730      	adds	r7, #48	; 0x30
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d103      	bne.n	800903c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e002      	b.n	8009042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800904e:	2101      	movs	r1, #1
 8009050:	69b8      	ldr	r0, [r7, #24]
 8009052:	f7ff ff05 	bl	8008e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08e      	sub	sp, #56	; 0x38
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009076:	2300      	movs	r3, #0
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10a      	bne.n	800909a <xQueueGenericSend+0x32>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d103      	bne.n	80090a8 <xQueueGenericSend+0x40>
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <xQueueGenericSend+0x44>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <xQueueGenericSend+0x46>
 80090ac:	2300      	movs	r3, #0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <xQueueGenericSend+0x60>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d103      	bne.n	80090d6 <xQueueGenericSend+0x6e>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <xQueueGenericSend+0x72>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <xQueueGenericSend+0x74>
 80090da:	2300      	movs	r3, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	623b      	str	r3, [r7, #32]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090f6:	f001 f9e7 	bl	800a4c8 <xTaskGetSchedulerState>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <xQueueGenericSend+0x9e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xQueueGenericSend+0xa2>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueGenericSend+0xa4>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueGenericSend+0xbe>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	61fb      	str	r3, [r7, #28]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009126:	f001 ff2d 	bl	800af84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009132:	429a      	cmp	r2, r3
 8009134:	d302      	bcc.n	800913c <xQueueGenericSend+0xd4>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b02      	cmp	r3, #2
 800913a:	d129      	bne.n	8009190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009142:	f000 fa0b 	bl	800955c <prvCopyDataToQueue>
 8009146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	d010      	beq.n	8009172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fff5 	bl	800a144 <xTaskRemoveFromEventList>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d013      	beq.n	8009188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009160:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <xQueueGenericSend+0x1f8>)
 8009162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	e00a      	b.n	8009188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009178:	4b39      	ldr	r3, [pc, #228]	; (8009260 <xQueueGenericSend+0x1f8>)
 800917a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009188:	f001 ff2c 	bl	800afe4 <vPortExitCritical>
				return pdPASS;
 800918c:	2301      	movs	r3, #1
 800918e:	e063      	b.n	8009258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009196:	f001 ff25 	bl	800afe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800919a:	2300      	movs	r3, #0
 800919c:	e05c      	b.n	8009258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091a4:	f107 0314 	add.w	r3, r7, #20
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 f82f 	bl	800a20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091b2:	f001 ff17 	bl	800afe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091b6:	f000 fd9b 	bl	8009cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091ba:	f001 fee3 	bl	800af84 <vPortEnterCritical>
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091c4:	b25b      	sxtb	r3, r3
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ca:	d103      	bne.n	80091d4 <xQueueGenericSend+0x16c>
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091da:	b25b      	sxtb	r3, r3
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d103      	bne.n	80091ea <xQueueGenericSend+0x182>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ea:	f001 fefb 	bl	800afe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ee:	1d3a      	adds	r2, r7, #4
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 f81e 	bl	800a238 <xTaskCheckForTimeOut>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d124      	bne.n	800924c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009204:	f000 faa2 	bl	800974c <prvIsQueueFull>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d018      	beq.n	8009240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	3310      	adds	r3, #16
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f000 ff44 	bl	800a0a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800921c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921e:	f000 fa2d 	bl	800967c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009222:	f000 fd73 	bl	8009d0c <xTaskResumeAll>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	f47f af7c 	bne.w	8009126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <xQueueGenericSend+0x1f8>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	e772      	b.n	8009126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009242:	f000 fa1b 	bl	800967c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009246:	f000 fd61 	bl	8009d0c <xTaskResumeAll>
 800924a:	e76c      	b.n	8009126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800924c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924e:	f000 fa15 	bl	800967c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009252:	f000 fd5b 	bl	8009d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009258:	4618      	mov	r0, r3
 800925a:	3738      	adds	r7, #56	; 0x38
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b090      	sub	sp, #64	; 0x40
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <xQueueGenericSendFromISR+0x3c>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <xQueueGenericSendFromISR+0x40>
 80092a0:	2301      	movs	r3, #1
 80092a2:	e000      	b.n	80092a6 <xQueueGenericSendFromISR+0x42>
 80092a4:	2300      	movs	r3, #0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d103      	bne.n	80092ce <xQueueGenericSendFromISR+0x6a>
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <xQueueGenericSendFromISR+0x6e>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <xQueueGenericSendFromISR+0x70>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	623b      	str	r3, [r7, #32]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ee:	f001 ff2b 	bl	800b148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092f2:	f3ef 8211 	mrs	r2, BASEPRI
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	61fa      	str	r2, [r7, #28]
 8009308:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800930a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800930c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009316:	429a      	cmp	r2, r3
 8009318:	d302      	bcc.n	8009320 <xQueueGenericSendFromISR+0xbc>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d12f      	bne.n	8009380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009336:	f000 f911 	bl	800955c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800933a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d112      	bne.n	800936a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d016      	beq.n	800937a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fef7 	bl	800a144 <xTaskRemoveFromEventList>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00e      	beq.n	800937a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00b      	beq.n	800937a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	e007      	b.n	800937a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800936a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800936e:	3301      	adds	r3, #1
 8009370:	b2db      	uxtb	r3, r3
 8009372:	b25a      	sxtb	r2, r3
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800937a:	2301      	movs	r3, #1
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800937e:	e001      	b.n	8009384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009386:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800938e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009392:	4618      	mov	r0, r3
 8009394:	3740      	adds	r7, #64	; 0x40
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08c      	sub	sp, #48	; 0x30
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <xQueueReceive+0x30>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	623b      	str	r3, [r7, #32]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <xQueueReceive+0x3e>
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <xQueueReceive+0x42>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <xQueueReceive+0x44>
 80093de:	2300      	movs	r3, #0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xQueueReceive+0x5e>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	61fb      	str	r3, [r7, #28]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093fa:	f001 f865 	bl	800a4c8 <xTaskGetSchedulerState>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <xQueueReceive+0x6e>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <xQueueReceive+0x72>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <xQueueReceive+0x74>
 800940e:	2300      	movs	r3, #0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xQueueReceive+0x8e>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61bb      	str	r3, [r7, #24]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800942a:	f001 fdab 	bl	800af84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01f      	beq.n	800947a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943e:	f000 f8f7 	bl	8009630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	1e5a      	subs	r2, r3, #1
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00f      	beq.n	8009472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	3310      	adds	r3, #16
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fe74 	bl	800a144 <xTaskRemoveFromEventList>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009462:	4b3d      	ldr	r3, [pc, #244]	; (8009558 <xQueueReceive+0x1bc>)
 8009464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009472:	f001 fdb7 	bl	800afe4 <vPortExitCritical>
				return pdPASS;
 8009476:	2301      	movs	r3, #1
 8009478:	e069      	b.n	800954e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009480:	f001 fdb0 	bl	800afe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009484:	2300      	movs	r3, #0
 8009486:	e062      	b.n	800954e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800948e:	f107 0310 	add.w	r3, r7, #16
 8009492:	4618      	mov	r0, r3
 8009494:	f000 feba 	bl	800a20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009498:	2301      	movs	r3, #1
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800949c:	f001 fda2 	bl	800afe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094a0:	f000 fc26 	bl	8009cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094a4:	f001 fd6e 	bl	800af84 <vPortEnterCritical>
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ae:	b25b      	sxtb	r3, r3
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d103      	bne.n	80094be <xQueueReceive+0x122>
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c4:	b25b      	sxtb	r3, r3
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ca:	d103      	bne.n	80094d4 <xQueueReceive+0x138>
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d4:	f001 fd86 	bl	800afe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d8:	1d3a      	adds	r2, r7, #4
 80094da:	f107 0310 	add.w	r3, r7, #16
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fea9 	bl	800a238 <xTaskCheckForTimeOut>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d123      	bne.n	8009534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ee:	f000 f917 	bl	8009720 <prvIsQueueEmpty>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d017      	beq.n	8009528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fdcf 	bl	800a0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009508:	f000 f8b8 	bl	800967c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800950c:	f000 fbfe 	bl	8009d0c <xTaskResumeAll>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d189      	bne.n	800942a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009516:	4b10      	ldr	r3, [pc, #64]	; (8009558 <xQueueReceive+0x1bc>)
 8009518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	e780      	b.n	800942a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952a:	f000 f8a7 	bl	800967c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800952e:	f000 fbed 	bl	8009d0c <xTaskResumeAll>
 8009532:	e77a      	b.n	800942a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009536:	f000 f8a1 	bl	800967c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800953a:	f000 fbe7 	bl	8009d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800953e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009540:	f000 f8ee 	bl	8009720 <prvIsQueueEmpty>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	f43f af6f 	beq.w	800942a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800954c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800954e:	4618      	mov	r0, r3
 8009550:	3730      	adds	r7, #48	; 0x30
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10d      	bne.n	8009596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d14d      	bne.n	800961e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 ffbc 	bl	800a504 <xTaskPriorityDisinherit>
 800958c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	e043      	b.n	800961e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d119      	bne.n	80095d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6858      	ldr	r0, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	461a      	mov	r2, r3
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	f003 fc76 	bl	800ce98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d32b      	bcc.n	800961e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	e026      	b.n	800961e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68d8      	ldr	r0, [r3, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d8:	461a      	mov	r2, r3
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	f003 fc5c 	bl	800ce98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e8:	425b      	negs	r3, r3
 80095ea:	441a      	add	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d207      	bcs.n	800960c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	425b      	negs	r3, r3
 8009606:	441a      	add	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d105      	bne.n	800961e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	3b01      	subs	r3, #1
 800961c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009626:	697b      	ldr	r3, [r7, #20]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d018      	beq.n	8009674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	441a      	add	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	429a      	cmp	r2, r3
 800965a:	d303      	bcc.n	8009664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68d9      	ldr	r1, [r3, #12]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966c:	461a      	mov	r2, r3
 800966e:	6838      	ldr	r0, [r7, #0]
 8009670:	f003 fc12 	bl	800ce98 <memcpy>
	}
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009684:	f001 fc7e 	bl	800af84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800968e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009690:	e011      	b.n	80096b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	d012      	beq.n	80096c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3324      	adds	r3, #36	; 0x24
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fd50 	bl	800a144 <xTaskRemoveFromEventList>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096aa:	f000 fe27 	bl	800a2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dce9      	bgt.n	8009692 <prvUnlockQueue+0x16>
 80096be:	e000      	b.n	80096c2 <prvUnlockQueue+0x46>
					break;
 80096c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	22ff      	movs	r2, #255	; 0xff
 80096c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096ca:	f001 fc8b 	bl	800afe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096ce:	f001 fc59 	bl	800af84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096da:	e011      	b.n	8009700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d012      	beq.n	800970a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3310      	adds	r3, #16
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fd2b 	bl	800a144 <xTaskRemoveFromEventList>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096f4:	f000 fe02 	bl	800a2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dce9      	bgt.n	80096dc <prvUnlockQueue+0x60>
 8009708:	e000      	b.n	800970c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800970a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	22ff      	movs	r2, #255	; 0xff
 8009710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009714:	f001 fc66 	bl	800afe4 <vPortExitCritical>
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009728:	f001 fc2c 	bl	800af84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e001      	b.n	800973e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800973e:	f001 fc51 	bl	800afe4 <vPortExitCritical>

	return xReturn;
 8009742:	68fb      	ldr	r3, [r7, #12]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009754:	f001 fc16 	bl	800af84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	429a      	cmp	r2, r3
 8009762:	d102      	bne.n	800976a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009764:	2301      	movs	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e001      	b.n	800976e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800976e:	f001 fc39 	bl	800afe4 <vPortExitCritical>

	return xReturn;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	e014      	b.n	80097b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800978c:	4a0f      	ldr	r2, [pc, #60]	; (80097cc <vQueueAddToRegistry+0x50>)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009798:	490c      	ldr	r1, [pc, #48]	; (80097cc <vQueueAddToRegistry+0x50>)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097a2:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <vQueueAddToRegistry+0x50>)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097ae:	e006      	b.n	80097be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3301      	adds	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b07      	cmp	r3, #7
 80097ba:	d9e7      	bls.n	800978c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20001df0 	.word	0x20001df0

080097d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80097e0:	f001 fbd0 	bl	800af84 <vPortEnterCritical>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d103      	bne.n	80097fa <vQueueWaitForMessageRestricted+0x2a>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009800:	b25b      	sxtb	r3, r3
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d103      	bne.n	8009810 <vQueueWaitForMessageRestricted+0x40>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009810:	f001 fbe8 	bl	800afe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	2b00      	cmp	r3, #0
 800981a:	d106      	bne.n	800982a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	3324      	adds	r3, #36	; 0x24
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fc61 	bl	800a0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800982a:	6978      	ldr	r0, [r7, #20]
 800982c:	f7ff ff26 	bl	800967c <prvUnlockQueue>
	}
 8009830:	bf00      	nop
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	; 0x38
 800983c:	af04      	add	r7, sp, #16
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	623b      	str	r3, [r7, #32]
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <xTaskCreateStatic+0x46>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	61fb      	str	r3, [r7, #28]
}
 800987a:	bf00      	nop
 800987c:	e7fe      	b.n	800987c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800987e:	23a8      	movs	r3, #168	; 0xa8
 8009880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2ba8      	cmp	r3, #168	; 0xa8
 8009886:	d00a      	beq.n	800989e <xTaskCreateStatic+0x66>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	61bb      	str	r3, [r7, #24]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800989e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d01e      	beq.n	80098e4 <xTaskCreateStatic+0xac>
 80098a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01b      	beq.n	80098e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098be:	2300      	movs	r3, #0
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	9302      	str	r3, [sp, #8]
 80098c6:	f107 0314 	add.w	r3, r7, #20
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f850 	bl	800997c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098de:	f000 f8f3 	bl	8009ac8 <prvAddNewTaskToReadyList>
 80098e2:	e001      	b.n	80098e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80098e8:	697b      	ldr	r3, [r7, #20]
	}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3728      	adds	r7, #40	; 0x28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b08c      	sub	sp, #48	; 0x30
 80098f6:	af04      	add	r7, sp, #16
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4618      	mov	r0, r3
 8009908:	f001 fc5e 	bl	800b1c8 <pvPortMalloc>
 800990c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00e      	beq.n	8009932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009914:	20a8      	movs	r0, #168	; 0xa8
 8009916:	f001 fc57 	bl	800b1c8 <pvPortMalloc>
 800991a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
 8009928:	e005      	b.n	8009936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800992a:	6978      	ldr	r0, [r7, #20]
 800992c:	f001 fd18 	bl	800b360 <vPortFree>
 8009930:	e001      	b.n	8009936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d017      	beq.n	800996c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009944:	88fa      	ldrh	r2, [r7, #6]
 8009946:	2300      	movs	r3, #0
 8009948:	9303      	str	r3, [sp, #12]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	9302      	str	r3, [sp, #8]
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f80e 	bl	800997c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009960:	69f8      	ldr	r0, [r7, #28]
 8009962:	f000 f8b1 	bl	8009ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009966:	2301      	movs	r3, #1
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	e002      	b.n	8009972 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009972:	69bb      	ldr	r3, [r7, #24]
	}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	461a      	mov	r2, r3
 8009994:	21a5      	movs	r1, #165	; 0xa5
 8009996:	f003 f998 	bl	800ccca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099a4:	3b01      	subs	r3, #1
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f023 0307 	bic.w	r3, r3, #7
 80099b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	617b      	str	r3, [r7, #20]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01f      	beq.n	8009a1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099da:	2300      	movs	r3, #0
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	e012      	b.n	8009a06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	7819      	ldrb	r1, [r3, #0]
 80099e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	3334      	adds	r3, #52	; 0x34
 80099f0:	460a      	mov	r2, r1
 80099f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	3301      	adds	r3, #1
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	2b0f      	cmp	r3, #15
 8009a0a:	d9e9      	bls.n	80099e0 <prvInitialiseNewTask+0x64>
 8009a0c:	e000      	b.n	8009a10 <prvInitialiseNewTask+0x94>
			{
				break;
 8009a0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a18:	e003      	b.n	8009a22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	2b37      	cmp	r3, #55	; 0x37
 8009a26:	d901      	bls.n	8009a2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a28:	2337      	movs	r3, #55	; 0x37
 8009a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff f978 	bl	8008d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	3318      	adds	r3, #24
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff f973 	bl	8008d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	3354      	adds	r3, #84	; 0x54
 8009a7c:	224c      	movs	r2, #76	; 0x4c
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f003 f922 	bl	800ccca <memset>
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	4a0c      	ldr	r2, [pc, #48]	; (8009abc <prvInitialiseNewTask+0x140>)
 8009a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	4a0c      	ldr	r2, [pc, #48]	; (8009ac0 <prvInitialiseNewTask+0x144>)
 8009a90:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	4a0b      	ldr	r2, [pc, #44]	; (8009ac4 <prvInitialiseNewTask+0x148>)
 8009a96:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	69b8      	ldr	r0, [r7, #24]
 8009a9e:	f001 f941 	bl	800ad24 <pxPortInitialiseStack>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	2000303c 	.word	0x2000303c
 8009ac0:	200030a4 	.word	0x200030a4
 8009ac4:	2000310c 	.word	0x2000310c

08009ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ad0:	f001 fa58 	bl	800af84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ad4:	4b2d      	ldr	r3, [pc, #180]	; (8009b8c <prvAddNewTaskToReadyList+0xc4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	4a2c      	ldr	r2, [pc, #176]	; (8009b8c <prvAddNewTaskToReadyList+0xc4>)
 8009adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ade:	4b2c      	ldr	r3, [pc, #176]	; (8009b90 <prvAddNewTaskToReadyList+0xc8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ae6:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <prvAddNewTaskToReadyList+0xc8>)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009aec:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <prvAddNewTaskToReadyList+0xc4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d110      	bne.n	8009b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009af4:	f000 fc26 	bl	800a344 <prvInitialiseTaskLists>
 8009af8:	e00d      	b.n	8009b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009afa:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <prvAddNewTaskToReadyList+0xcc>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d109      	bne.n	8009b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b02:	4b23      	ldr	r3, [pc, #140]	; (8009b90 <prvAddNewTaskToReadyList+0xc8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d802      	bhi.n	8009b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b10:	4a1f      	ldr	r2, [pc, #124]	; (8009b90 <prvAddNewTaskToReadyList+0xc8>)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b16:	4b20      	ldr	r3, [pc, #128]	; (8009b98 <prvAddNewTaskToReadyList+0xd0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <prvAddNewTaskToReadyList+0xd0>)
 8009b1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b20:	4b1d      	ldr	r3, [pc, #116]	; (8009b98 <prvAddNewTaskToReadyList+0xd0>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2c:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <prvAddNewTaskToReadyList+0xd4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d903      	bls.n	8009b3c <prvAddNewTaskToReadyList+0x74>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <prvAddNewTaskToReadyList+0xd4>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a15      	ldr	r2, [pc, #84]	; (8009ba0 <prvAddNewTaskToReadyList+0xd8>)
 8009b4a:	441a      	add	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7ff f8fd 	bl	8008d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b58:	f001 fa44 	bl	800afe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <prvAddNewTaskToReadyList+0xcc>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00e      	beq.n	8009b82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <prvAddNewTaskToReadyList+0xc8>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d207      	bcs.n	8009b82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b72:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <prvAddNewTaskToReadyList+0xdc>)
 8009b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20002304 	.word	0x20002304
 8009b90:	20001e30 	.word	0x20001e30
 8009b94:	20002310 	.word	0x20002310
 8009b98:	20002320 	.word	0x20002320
 8009b9c:	2000230c 	.word	0x2000230c
 8009ba0:	20001e34 	.word	0x20001e34
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d017      	beq.n	8009bea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bba:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <vTaskDelay+0x60>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <vTaskDelay+0x30>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	60bb      	str	r3, [r7, #8]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009bd8:	f000 f88a 	bl	8009cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bdc:	2100      	movs	r1, #0
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fcfe 	bl	800a5e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009be4:	f000 f892 	bl	8009d0c <xTaskResumeAll>
 8009be8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d107      	bne.n	8009c00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <vTaskDelay+0x64>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	2000232c 	.word	0x2000232c
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c1e:	463a      	mov	r2, r7
 8009c20:	1d39      	adds	r1, r7, #4
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff f832 	bl	8008c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	9202      	str	r2, [sp, #8]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	460a      	mov	r2, r1
 8009c3e:	4924      	ldr	r1, [pc, #144]	; (8009cd0 <vTaskStartScheduler+0xc0>)
 8009c40:	4824      	ldr	r0, [pc, #144]	; (8009cd4 <vTaskStartScheduler+0xc4>)
 8009c42:	f7ff fdf9 	bl	8009838 <xTaskCreateStatic>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4a23      	ldr	r2, [pc, #140]	; (8009cd8 <vTaskStartScheduler+0xc8>)
 8009c4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c4c:	4b22      	ldr	r3, [pc, #136]	; (8009cd8 <vTaskStartScheduler+0xc8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c54:	2301      	movs	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e001      	b.n	8009c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d102      	bne.n	8009c6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c64:	f000 fd10 	bl	800a688 <xTimerCreateTimerTask>
 8009c68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d11b      	bne.n	8009ca8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
}
 8009c82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c84:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <vTaskStartScheduler+0xcc>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3354      	adds	r3, #84	; 0x54
 8009c8a:	4a15      	ldr	r2, [pc, #84]	; (8009ce0 <vTaskStartScheduler+0xd0>)
 8009c8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c8e:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <vTaskStartScheduler+0xd4>)
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295
 8009c94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <vTaskStartScheduler+0xd8>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c9c:	4b13      	ldr	r3, [pc, #76]	; (8009cec <vTaskStartScheduler+0xdc>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ca2:	f001 f8cd 	bl	800ae40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ca6:	e00e      	b.n	8009cc6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cae:	d10a      	bne.n	8009cc6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	60fb      	str	r3, [r7, #12]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <vTaskStartScheduler+0xb4>
}
 8009cc6:	bf00      	nop
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800f968 	.word	0x0800f968
 8009cd4:	0800a315 	.word	0x0800a315
 8009cd8:	20002328 	.word	0x20002328
 8009cdc:	20001e30 	.word	0x20001e30
 8009ce0:	200001d4 	.word	0x200001d4
 8009ce4:	20002324 	.word	0x20002324
 8009ce8:	20002310 	.word	0x20002310
 8009cec:	20002308 	.word	0x20002308

08009cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <vTaskSuspendAll+0x18>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	4a03      	ldr	r2, [pc, #12]	; (8009d08 <vTaskSuspendAll+0x18>)
 8009cfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cfe:	bf00      	nop
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	2000232c 	.word	0x2000232c

08009d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d1a:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <xTaskResumeAll+0x118>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	603b      	str	r3, [r7, #0]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d38:	f001 f924 	bl	800af84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d3c:	4b39      	ldr	r3, [pc, #228]	; (8009e24 <xTaskResumeAll+0x118>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <xTaskResumeAll+0x118>)
 8009d44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d46:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <xTaskResumeAll+0x118>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d162      	bne.n	8009e14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d4e:	4b36      	ldr	r3, [pc, #216]	; (8009e28 <xTaskResumeAll+0x11c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d05e      	beq.n	8009e14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d56:	e02f      	b.n	8009db8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d58:	4b34      	ldr	r3, [pc, #208]	; (8009e2c <xTaskResumeAll+0x120>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3318      	adds	r3, #24
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff f851 	bl	8008e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff f84c 	bl	8008e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d78:	4b2d      	ldr	r3, [pc, #180]	; (8009e30 <xTaskResumeAll+0x124>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d903      	bls.n	8009d88 <xTaskResumeAll+0x7c>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	4a2a      	ldr	r2, [pc, #168]	; (8009e30 <xTaskResumeAll+0x124>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4a27      	ldr	r2, [pc, #156]	; (8009e34 <xTaskResumeAll+0x128>)
 8009d96:	441a      	add	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fe ffd7 	bl	8008d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da8:	4b23      	ldr	r3, [pc, #140]	; (8009e38 <xTaskResumeAll+0x12c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d302      	bcc.n	8009db8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009db2:	4b22      	ldr	r3, [pc, #136]	; (8009e3c <xTaskResumeAll+0x130>)
 8009db4:	2201      	movs	r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009db8:	4b1c      	ldr	r3, [pc, #112]	; (8009e2c <xTaskResumeAll+0x120>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1cb      	bne.n	8009d58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009dc6:	f000 fb5f 	bl	800a488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009dca:	4b1d      	ldr	r3, [pc, #116]	; (8009e40 <xTaskResumeAll+0x134>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d010      	beq.n	8009df8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dd6:	f000 f847 	bl	8009e68 <xTaskIncrementTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009de0:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <xTaskResumeAll+0x130>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f1      	bne.n	8009dd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <xTaskResumeAll+0x134>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009df8:	4b10      	ldr	r3, [pc, #64]	; (8009e3c <xTaskResumeAll+0x130>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d009      	beq.n	8009e14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e00:	2301      	movs	r3, #1
 8009e02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <xTaskResumeAll+0x138>)
 8009e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e14:	f001 f8e6 	bl	800afe4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e18:	68bb      	ldr	r3, [r7, #8]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	2000232c 	.word	0x2000232c
 8009e28:	20002304 	.word	0x20002304
 8009e2c:	200022c4 	.word	0x200022c4
 8009e30:	2000230c 	.word	0x2000230c
 8009e34:	20001e34 	.word	0x20001e34
 8009e38:	20001e30 	.word	0x20001e30
 8009e3c:	20002318 	.word	0x20002318
 8009e40:	20002314 	.word	0x20002314
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <xTaskGetTickCount+0x1c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e54:	687b      	ldr	r3, [r7, #4]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20002308 	.word	0x20002308

08009e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e72:	4b4f      	ldr	r3, [pc, #316]	; (8009fb0 <xTaskIncrementTick+0x148>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f040 808f 	bne.w	8009f9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e7c:	4b4d      	ldr	r3, [pc, #308]	; (8009fb4 <xTaskIncrementTick+0x14c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e84:	4a4b      	ldr	r2, [pc, #300]	; (8009fb4 <xTaskIncrementTick+0x14c>)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d120      	bne.n	8009ed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e90:	4b49      	ldr	r3, [pc, #292]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	603b      	str	r3, [r7, #0]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <xTaskIncrementTick+0x46>
 8009eb0:	4b41      	ldr	r3, [pc, #260]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	4b41      	ldr	r3, [pc, #260]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a3f      	ldr	r2, [pc, #252]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	4a3f      	ldr	r2, [pc, #252]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	4b3e      	ldr	r3, [pc, #248]	; (8009fc0 <xTaskIncrementTick+0x158>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	4a3d      	ldr	r2, [pc, #244]	; (8009fc0 <xTaskIncrementTick+0x158>)
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	f000 fadb 	bl	800a488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ed2:	4b3c      	ldr	r3, [pc, #240]	; (8009fc4 <xTaskIncrementTick+0x15c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d349      	bcc.n	8009f70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009edc:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee6:	4b37      	ldr	r3, [pc, #220]	; (8009fc4 <xTaskIncrementTick+0x15c>)
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eec:	601a      	str	r2, [r3, #0]
					break;
 8009eee:	e03f      	b.n	8009f70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef0:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d203      	bcs.n	8009f10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f08:	4a2e      	ldr	r2, [pc, #184]	; (8009fc4 <xTaskIncrementTick+0x15c>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f0e:	e02f      	b.n	8009f70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe ff79 	bl	8008e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d004      	beq.n	8009f2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	3318      	adds	r3, #24
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe ff70 	bl	8008e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <xTaskIncrementTick+0x160>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d903      	bls.n	8009f40 <xTaskIncrementTick+0xd8>
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <xTaskIncrementTick+0x160>)
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4a1f      	ldr	r2, [pc, #124]	; (8009fcc <xTaskIncrementTick+0x164>)
 8009f4e:	441a      	add	r2, r3
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7fe fefb 	bl	8008d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	4b1b      	ldr	r3, [pc, #108]	; (8009fd0 <xTaskIncrementTick+0x168>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d3b8      	bcc.n	8009edc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6e:	e7b5      	b.n	8009edc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f70:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <xTaskIncrementTick+0x168>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f76:	4915      	ldr	r1, [pc, #84]	; (8009fcc <xTaskIncrementTick+0x164>)
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d901      	bls.n	8009f8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f8c:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <xTaskIncrementTick+0x16c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e004      	b.n	8009fa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f9a:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <xTaskIncrementTick+0x170>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	4a0d      	ldr	r2, [pc, #52]	; (8009fd8 <xTaskIncrementTick+0x170>)
 8009fa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fa4:	697b      	ldr	r3, [r7, #20]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	2000232c 	.word	0x2000232c
 8009fb4:	20002308 	.word	0x20002308
 8009fb8:	200022bc 	.word	0x200022bc
 8009fbc:	200022c0 	.word	0x200022c0
 8009fc0:	2000231c 	.word	0x2000231c
 8009fc4:	20002324 	.word	0x20002324
 8009fc8:	2000230c 	.word	0x2000230c
 8009fcc:	20001e34 	.word	0x20001e34
 8009fd0:	20001e30 	.word	0x20001e30
 8009fd4:	20002318 	.word	0x20002318
 8009fd8:	20002314 	.word	0x20002314

08009fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <vTaskSwitchContext+0xb0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fea:	4b29      	ldr	r3, [pc, #164]	; (800a090 <vTaskSwitchContext+0xb4>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ff0:	e046      	b.n	800a080 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009ff2:	4b27      	ldr	r3, [pc, #156]	; (800a090 <vTaskSwitchContext+0xb4>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff8:	4b26      	ldr	r3, [pc, #152]	; (800a094 <vTaskSwitchContext+0xb8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	e010      	b.n	800a022 <vTaskSwitchContext+0x46>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <vTaskSwitchContext+0x40>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	607b      	str	r3, [r7, #4]
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <vTaskSwitchContext+0x3e>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3b01      	subs	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	491d      	ldr	r1, [pc, #116]	; (800a098 <vTaskSwitchContext+0xbc>)
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0e4      	beq.n	800a000 <vTaskSwitchContext+0x24>
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4a15      	ldr	r2, [pc, #84]	; (800a098 <vTaskSwitchContext+0xbc>)
 800a042:	4413      	add	r3, r2
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	605a      	str	r2, [r3, #4]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	3308      	adds	r3, #8
 800a058:	429a      	cmp	r2, r3
 800a05a:	d104      	bne.n	800a066 <vTaskSwitchContext+0x8a>
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4a0b      	ldr	r2, [pc, #44]	; (800a09c <vTaskSwitchContext+0xc0>)
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	4a08      	ldr	r2, [pc, #32]	; (800a094 <vTaskSwitchContext+0xb8>)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <vTaskSwitchContext+0xc0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3354      	adds	r3, #84	; 0x54
 800a07c:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <vTaskSwitchContext+0xc4>)
 800a07e:	6013      	str	r3, [r2, #0]
}
 800a080:	bf00      	nop
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	2000232c 	.word	0x2000232c
 800a090:	20002318 	.word	0x20002318
 800a094:	2000230c 	.word	0x2000230c
 800a098:	20001e34 	.word	0x20001e34
 800a09c:	20001e30 	.word	0x20001e30
 800a0a0:	200001d4 	.word	0x200001d4

0800a0a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	60fb      	str	r3, [r7, #12]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <vTaskPlaceOnEventList+0x44>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fe fe61 	bl	8008d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0d8:	2101      	movs	r1, #1
 800a0da:	6838      	ldr	r0, [r7, #0]
 800a0dc:	f000 fa80 	bl	800a5e0 <prvAddCurrentTaskToDelayedList>
}
 800a0e0:	bf00      	nop
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20001e30 	.word	0x20001e30

0800a0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	617b      	str	r3, [r7, #20]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <vTaskPlaceOnEventListRestricted+0x54>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3318      	adds	r3, #24
 800a11a:	4619      	mov	r1, r3
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f7fe fe18 	bl	8008d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a128:	f04f 33ff 	mov.w	r3, #4294967295
 800a12c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	68b8      	ldr	r0, [r7, #8]
 800a132:	f000 fa55 	bl	800a5e0 <prvAddCurrentTaskToDelayedList>
	}
 800a136:	bf00      	nop
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20001e30 	.word	0x20001e30

0800a144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10a      	bne.n	800a170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	60fb      	str	r3, [r7, #12]
}
 800a16c:	bf00      	nop
 800a16e:	e7fe      	b.n	800a16e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3318      	adds	r3, #24
 800a174:	4618      	mov	r0, r3
 800a176:	f7fe fe49 	bl	8008e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a17a:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <xTaskRemoveFromEventList+0xb0>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d11d      	bne.n	800a1be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fe40 	bl	8008e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a190:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <xTaskRemoveFromEventList+0xb4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d903      	bls.n	800a1a0 <xTaskRemoveFromEventList+0x5c>
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <xTaskRemoveFromEventList+0xb4>)
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4a13      	ldr	r2, [pc, #76]	; (800a1fc <xTaskRemoveFromEventList+0xb8>)
 800a1ae:	441a      	add	r2, r3
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7fe fdcb 	bl	8008d52 <vListInsertEnd>
 800a1bc:	e005      	b.n	800a1ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	3318      	adds	r3, #24
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	480e      	ldr	r0, [pc, #56]	; (800a200 <xTaskRemoveFromEventList+0xbc>)
 800a1c6:	f7fe fdc4 	bl	8008d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <xTaskRemoveFromEventList+0xc0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d905      	bls.n	800a1e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <xTaskRemoveFromEventList+0xc4>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e001      	b.n	800a1e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1e8:	697b      	ldr	r3, [r7, #20]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	2000232c 	.word	0x2000232c
 800a1f8:	2000230c 	.word	0x2000230c
 800a1fc:	20001e34 	.word	0x20001e34
 800a200:	200022c4 	.word	0x200022c4
 800a204:	20001e30 	.word	0x20001e30
 800a208:	20002318 	.word	0x20002318

0800a20c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a214:	4b06      	ldr	r3, [pc, #24]	; (800a230 <vTaskInternalSetTimeOutState+0x24>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <vTaskInternalSetTimeOutState+0x28>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	605a      	str	r2, [r3, #4]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	2000231c 	.word	0x2000231c
 800a234:	20002308 	.word	0x20002308

0800a238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	613b      	str	r3, [r7, #16]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	60fb      	str	r3, [r7, #12]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a27a:	f000 fe83 	bl	800af84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a27e:	4b1d      	ldr	r3, [pc, #116]	; (800a2f4 <xTaskCheckForTimeOut+0xbc>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a296:	d102      	bne.n	800a29e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a298:	2300      	movs	r3, #0
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	e023      	b.n	800a2e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b15      	ldr	r3, [pc, #84]	; (800a2f8 <xTaskCheckForTimeOut+0xc0>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d007      	beq.n	800a2ba <xTaskCheckForTimeOut+0x82>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d302      	bcc.n	800a2ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	e015      	b.n	800a2e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d20b      	bcs.n	800a2dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	1ad2      	subs	r2, r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff ff9b 	bl	800a20c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	e004      	b.n	800a2e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2e6:	f000 fe7d 	bl	800afe4 <vPortExitCritical>

	return xReturn;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20002308 	.word	0x20002308
 800a2f8:	2000231c 	.word	0x2000231c

0800a2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a300:	4b03      	ldr	r3, [pc, #12]	; (800a310 <vTaskMissedYield+0x14>)
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]
}
 800a306:	bf00      	nop
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	20002318 	.word	0x20002318

0800a314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a31c:	f000 f852 	bl	800a3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <prvIdleTask+0x28>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d9f9      	bls.n	800a31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <prvIdleTask+0x2c>)
 800a32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a338:	e7f0      	b.n	800a31c <prvIdleTask+0x8>
 800a33a:	bf00      	nop
 800a33c:	20001e34 	.word	0x20001e34
 800a340:	e000ed04 	.word	0xe000ed04

0800a344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	e00c      	b.n	800a36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	4613      	mov	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4a12      	ldr	r2, [pc, #72]	; (800a3a4 <prvInitialiseTaskLists+0x60>)
 800a35c:	4413      	add	r3, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fcca 	bl	8008cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3301      	adds	r3, #1
 800a368:	607b      	str	r3, [r7, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b37      	cmp	r3, #55	; 0x37
 800a36e:	d9ef      	bls.n	800a350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a370:	480d      	ldr	r0, [pc, #52]	; (800a3a8 <prvInitialiseTaskLists+0x64>)
 800a372:	f7fe fcc1 	bl	8008cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a376:	480d      	ldr	r0, [pc, #52]	; (800a3ac <prvInitialiseTaskLists+0x68>)
 800a378:	f7fe fcbe 	bl	8008cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a37c:	480c      	ldr	r0, [pc, #48]	; (800a3b0 <prvInitialiseTaskLists+0x6c>)
 800a37e:	f7fe fcbb 	bl	8008cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a382:	480c      	ldr	r0, [pc, #48]	; (800a3b4 <prvInitialiseTaskLists+0x70>)
 800a384:	f7fe fcb8 	bl	8008cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a388:	480b      	ldr	r0, [pc, #44]	; (800a3b8 <prvInitialiseTaskLists+0x74>)
 800a38a:	f7fe fcb5 	bl	8008cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a38e:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <prvInitialiseTaskLists+0x78>)
 800a390:	4a05      	ldr	r2, [pc, #20]	; (800a3a8 <prvInitialiseTaskLists+0x64>)
 800a392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <prvInitialiseTaskLists+0x7c>)
 800a396:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <prvInitialiseTaskLists+0x68>)
 800a398:	601a      	str	r2, [r3, #0]
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20001e34 	.word	0x20001e34
 800a3a8:	20002294 	.word	0x20002294
 800a3ac:	200022a8 	.word	0x200022a8
 800a3b0:	200022c4 	.word	0x200022c4
 800a3b4:	200022d8 	.word	0x200022d8
 800a3b8:	200022f0 	.word	0x200022f0
 800a3bc:	200022bc 	.word	0x200022bc
 800a3c0:	200022c0 	.word	0x200022c0

0800a3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3ca:	e019      	b.n	800a400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3cc:	f000 fdda 	bl	800af84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d0:	4b10      	ldr	r3, [pc, #64]	; (800a414 <prvCheckTasksWaitingTermination+0x50>)
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fd15 	bl	8008e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <prvCheckTasksWaitingTermination+0x54>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	4a0b      	ldr	r2, [pc, #44]	; (800a418 <prvCheckTasksWaitingTermination+0x54>)
 800a3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <prvCheckTasksWaitingTermination+0x58>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <prvCheckTasksWaitingTermination+0x58>)
 800a3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3f6:	f000 fdf5 	bl	800afe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f810 	bl	800a420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a400:	4b06      	ldr	r3, [pc, #24]	; (800a41c <prvCheckTasksWaitingTermination+0x58>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e1      	bne.n	800a3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	200022d8 	.word	0x200022d8
 800a418:	20002304 	.word	0x20002304
 800a41c:	200022ec 	.word	0x200022ec

0800a420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3354      	adds	r3, #84	; 0x54
 800a42c:	4618      	mov	r0, r3
 800a42e:	f002 fc7b 	bl	800cd28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d108      	bne.n	800a44e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	4618      	mov	r0, r3
 800a442:	f000 ff8d 	bl	800b360 <vPortFree>
				vPortFree( pxTCB );
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 ff8a 	bl	800b360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a44c:	e018      	b.n	800a480 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a454:	2b01      	cmp	r3, #1
 800a456:	d103      	bne.n	800a460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 ff81 	bl	800b360 <vPortFree>
	}
 800a45e:	e00f      	b.n	800a480 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a466:	2b02      	cmp	r3, #2
 800a468:	d00a      	beq.n	800a480 <prvDeleteTCB+0x60>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	60fb      	str	r3, [r7, #12]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <prvDeleteTCB+0x5e>
	}
 800a480:	bf00      	nop
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <prvResetNextTaskUnblockTime+0x38>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d104      	bne.n	800a4a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a49a:	f04f 32ff 	mov.w	r2, #4294967295
 800a49e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4a0:	e008      	b.n	800a4b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a2:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <prvResetNextTaskUnblockTime+0x38>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	4a04      	ldr	r2, [pc, #16]	; (800a4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	200022bc 	.word	0x200022bc
 800a4c4:	20002324 	.word	0x20002324

0800a4c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4ce:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <xTaskGetSchedulerState+0x34>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d102      	bne.n	800a4dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	607b      	str	r3, [r7, #4]
 800a4da:	e008      	b.n	800a4ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4dc:	4b08      	ldr	r3, [pc, #32]	; (800a500 <xTaskGetSchedulerState+0x38>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	e001      	b.n	800a4ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4ee:	687b      	ldr	r3, [r7, #4]
	}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20002310 	.word	0x20002310
 800a500:	2000232c 	.word	0x2000232c

0800a504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d056      	beq.n	800a5c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a51a:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <xTaskPriorityDisinherit+0xd0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	429a      	cmp	r2, r3
 800a522:	d00a      	beq.n	800a53a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60fb      	str	r3, [r7, #12]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	60bb      	str	r3, [r7, #8]
}
 800a554:	bf00      	nop
 800a556:	e7fe      	b.n	800a556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d02c      	beq.n	800a5c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a572:	2b00      	cmp	r3, #0
 800a574:	d128      	bne.n	800a5c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fc46 	bl	8008e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <xTaskPriorityDisinherit+0xd4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d903      	bls.n	800a5a8 <xTaskPriorityDisinherit+0xa4>
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	4a0c      	ldr	r2, [pc, #48]	; (800a5d8 <xTaskPriorityDisinherit+0xd4>)
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4a09      	ldr	r2, [pc, #36]	; (800a5dc <xTaskPriorityDisinherit+0xd8>)
 800a5b6:	441a      	add	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fe fbc7 	bl	8008d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5c8:	697b      	ldr	r3, [r7, #20]
	}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001e30 	.word	0x20001e30
 800a5d8:	2000230c 	.word	0x2000230c
 800a5dc:	20001e34 	.word	0x20001e34

0800a5e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5ea:	4b21      	ldr	r3, [pc, #132]	; (800a670 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5f0:	4b20      	ldr	r3, [pc, #128]	; (800a674 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fc08 	bl	8008e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d10a      	bne.n	800a61a <prvAddCurrentTaskToDelayedList+0x3a>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a60a:	4b1a      	ldr	r3, [pc, #104]	; (800a674 <prvAddCurrentTaskToDelayedList+0x94>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3304      	adds	r3, #4
 800a610:	4619      	mov	r1, r3
 800a612:	4819      	ldr	r0, [pc, #100]	; (800a678 <prvAddCurrentTaskToDelayedList+0x98>)
 800a614:	f7fe fb9d 	bl	8008d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a618:	e026      	b.n	800a668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4413      	add	r3, r2
 800a620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a622:	4b14      	ldr	r3, [pc, #80]	; (800a674 <prvAddCurrentTaskToDelayedList+0x94>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d209      	bcs.n	800a646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <prvAddCurrentTaskToDelayedList+0x94>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f7fe fbab 	bl	8008d9a <vListInsert>
}
 800a644:	e010      	b.n	800a668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a646:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <prvAddCurrentTaskToDelayedList+0x94>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3304      	adds	r3, #4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7fe fba1 	bl	8008d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d202      	bcs.n	800a668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a662:	4a08      	ldr	r2, [pc, #32]	; (800a684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	6013      	str	r3, [r2, #0]
}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20002308 	.word	0x20002308
 800a674:	20001e30 	.word	0x20001e30
 800a678:	200022f0 	.word	0x200022f0
 800a67c:	200022c0 	.word	0x200022c0
 800a680:	200022bc 	.word	0x200022bc
 800a684:	20002324 	.word	0x20002324

0800a688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a68e:	2300      	movs	r3, #0
 800a690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a692:	f000 fb07 	bl	800aca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a696:	4b1c      	ldr	r3, [pc, #112]	; (800a708 <xTimerCreateTimerTask+0x80>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d021      	beq.n	800a6e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6a6:	1d3a      	adds	r2, r7, #4
 800a6a8:	f107 0108 	add.w	r1, r7, #8
 800a6ac:	f107 030c 	add.w	r3, r7, #12
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fe fb07 	bl	8008cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	9202      	str	r2, [sp, #8]
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	460a      	mov	r2, r1
 800a6c8:	4910      	ldr	r1, [pc, #64]	; (800a70c <xTimerCreateTimerTask+0x84>)
 800a6ca:	4811      	ldr	r0, [pc, #68]	; (800a710 <xTimerCreateTimerTask+0x88>)
 800a6cc:	f7ff f8b4 	bl	8009838 <xTaskCreateStatic>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	4a10      	ldr	r2, [pc, #64]	; (800a714 <xTimerCreateTimerTask+0x8c>)
 800a6d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6d6:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <xTimerCreateTimerTask+0x8c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	613b      	str	r3, [r7, #16]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6fe:	697b      	ldr	r3, [r7, #20]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	20002360 	.word	0x20002360
 800a70c:	0800f970 	.word	0x0800f970
 800a710:	0800a84d 	.word	0x0800a84d
 800a714:	20002364 	.word	0x20002364

0800a718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a726:	2300      	movs	r3, #0
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	623b      	str	r3, [r7, #32]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <xTimerGenericCommand+0x98>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d02a      	beq.n	800a7a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	dc18      	bgt.n	800a792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a760:	f7ff feb2 	bl	800a4c8 <xTaskGetSchedulerState>
 800a764:	4603      	mov	r3, r0
 800a766:	2b02      	cmp	r3, #2
 800a768:	d109      	bne.n	800a77e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a76a:	4b11      	ldr	r3, [pc, #68]	; (800a7b0 <xTimerGenericCommand+0x98>)
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f107 0110 	add.w	r1, r7, #16
 800a772:	2300      	movs	r3, #0
 800a774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a776:	f7fe fc77 	bl	8009068 <xQueueGenericSend>
 800a77a:	6278      	str	r0, [r7, #36]	; 0x24
 800a77c:	e012      	b.n	800a7a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a77e:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <xTimerGenericCommand+0x98>)
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f107 0110 	add.w	r1, r7, #16
 800a786:	2300      	movs	r3, #0
 800a788:	2200      	movs	r2, #0
 800a78a:	f7fe fc6d 	bl	8009068 <xQueueGenericSend>
 800a78e:	6278      	str	r0, [r7, #36]	; 0x24
 800a790:	e008      	b.n	800a7a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a792:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <xTimerGenericCommand+0x98>)
 800a794:	6818      	ldr	r0, [r3, #0]
 800a796:	f107 0110 	add.w	r1, r7, #16
 800a79a:	2300      	movs	r3, #0
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	f7fe fd61 	bl	8009264 <xQueueGenericSendFromISR>
 800a7a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3728      	adds	r7, #40	; 0x28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20002360 	.word	0x20002360

0800a7b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7be:	4b22      	ldr	r3, [pc, #136]	; (800a848 <prvProcessExpiredTimer+0x94>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fb1d 	bl	8008e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d022      	beq.n	800a826 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	18d1      	adds	r1, r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	6978      	ldr	r0, [r7, #20]
 800a7ee:	f000 f8d1 	bl	800a994 <prvInsertTimerInActiveList>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01f      	beq.n	800a838 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	2100      	movs	r1, #0
 800a802:	6978      	ldr	r0, [r7, #20]
 800a804:	f7ff ff88 	bl	800a718 <xTimerGenericCommand>
 800a808:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d113      	bne.n	800a838 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60fb      	str	r3, [r7, #12]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	6978      	ldr	r0, [r7, #20]
 800a83e:	4798      	blx	r3
}
 800a840:	bf00      	nop
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20002358 	.word	0x20002358

0800a84c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 f857 	bl	800a90c <prvGetNextExpireTime>
 800a85e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f803 	bl	800a870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a86a:	f000 f8d5 	bl	800aa18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a86e:	e7f1      	b.n	800a854 <prvTimerTask+0x8>

0800a870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a87a:	f7ff fa39 	bl	8009cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f866 	bl	800a954 <prvSampleTimeNow>
 800a888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d130      	bne.n	800a8f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <prvProcessTimerOrBlockTask+0x3c>
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d806      	bhi.n	800a8ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a89e:	f7ff fa35 	bl	8009d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff85 	bl	800a7b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8aa:	e024      	b.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <prvProcessTimerOrBlockTask+0x90>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <prvProcessTimerOrBlockTask+0x50>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <prvProcessTimerOrBlockTask+0x52>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <prvProcessTimerOrBlockTask+0x94>)
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7fe ff7d 	bl	80097d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8d6:	f7ff fa19 	bl	8009d0c <xTaskResumeAll>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8e0:	4b09      	ldr	r3, [pc, #36]	; (800a908 <prvProcessTimerOrBlockTask+0x98>)
 800a8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
}
 800a8f0:	e001      	b.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8f2:	f7ff fa0b 	bl	8009d0c <xTaskResumeAll>
}
 800a8f6:	bf00      	nop
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	2000235c 	.word	0x2000235c
 800a904:	20002360 	.word	0x20002360
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a914:	4b0e      	ldr	r3, [pc, #56]	; (800a950 <prvGetNextExpireTime+0x44>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <prvGetNextExpireTime+0x16>
 800a91e:	2201      	movs	r2, #1
 800a920:	e000      	b.n	800a924 <prvGetNextExpireTime+0x18>
 800a922:	2200      	movs	r2, #0
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d105      	bne.n	800a93c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <prvGetNextExpireTime+0x44>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e001      	b.n	800a940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a940:	68fb      	ldr	r3, [r7, #12]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20002358 	.word	0x20002358

0800a954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a95c:	f7ff fa74 	bl	8009e48 <xTaskGetTickCount>
 800a960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <prvSampleTimeNow+0x3c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d205      	bcs.n	800a978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a96c:	f000 f936 	bl	800abdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	e002      	b.n	800a97e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a97e:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvSampleTimeNow+0x3c>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a984:	68fb      	ldr	r3, [r7, #12]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20002368 	.word	0x20002368

0800a994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d812      	bhi.n	800a9e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d302      	bcc.n	800a9ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	e01b      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9ce:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <prvInsertTimerInActiveList+0x7c>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4610      	mov	r0, r2
 800a9da:	f7fe f9de 	bl	8008d9a <vListInsert>
 800a9de:	e012      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d206      	bcs.n	800a9f6 <prvInsertTimerInActiveList+0x62>
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d302      	bcc.n	800a9f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e007      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9f6:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <prvInsertTimerInActiveList+0x80>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7fe f9ca 	bl	8008d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa06:	697b      	ldr	r3, [r7, #20]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	2000235c 	.word	0x2000235c
 800aa14:	20002358 	.word	0x20002358

0800aa18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08e      	sub	sp, #56	; 0x38
 800aa1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa1e:	e0ca      	b.n	800abb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da18      	bge.n	800aa58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	3304      	adds	r3, #4
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	61fb      	str	r3, [r7, #28]
}
 800aa44:	bf00      	nop
 800aa46:	e7fe      	b.n	800aa46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa4e:	6850      	ldr	r0, [r2, #4]
 800aa50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa52:	6892      	ldr	r2, [r2, #8]
 800aa54:	4611      	mov	r1, r2
 800aa56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f2c0 80ab 	blt.w	800abb6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe f9cb 	bl	8008e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa76:	463b      	mov	r3, r7
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff ff6b 	bl	800a954 <prvSampleTimeNow>
 800aa7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	f200 8096 	bhi.w	800abb4 <prvProcessReceivedCommands+0x19c>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <prvProcessReceivedCommands+0x78>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aab9 	.word	0x0800aab9
 800aa94:	0800aab9 	.word	0x0800aab9
 800aa98:	0800aab9 	.word	0x0800aab9
 800aa9c:	0800ab2d 	.word	0x0800ab2d
 800aaa0:	0800ab41 	.word	0x0800ab41
 800aaa4:	0800ab8b 	.word	0x0800ab8b
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800aab9 	.word	0x0800aab9
 800aab0:	0800ab2d 	.word	0x0800ab2d
 800aab4:	0800ab41 	.word	0x0800ab41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	18d1      	adds	r1, r2, r3
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad8:	f7ff ff5c 	bl	800a994 <prvInsertTimerInActiveList>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d069      	beq.n	800abb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d05e      	beq.n	800abb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	441a      	add	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	2100      	movs	r1, #0
 800ab08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0a:	f7ff fe05 	bl	800a718 <xTimerGenericCommand>
 800ab0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d14f      	bne.n	800abb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	61bb      	str	r3, [r7, #24]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab32:	f023 0301 	bic.w	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab3e:	e03a      	b.n	800abb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	617b      	str	r3, [r7, #20]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	18d1      	adds	r1, r2, r3
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab84:	f7ff ff06 	bl	800a994 <prvInsertTimerInActiveList>
					break;
 800ab88:	e015      	b.n	800abb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9a:	f000 fbe1 	bl	800b360 <vPortFree>
 800ab9e:	e00a      	b.n	800abb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abb2:	e000      	b.n	800abb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800abb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abb6:	4b08      	ldr	r3, [pc, #32]	; (800abd8 <prvProcessReceivedCommands+0x1c0>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	1d39      	adds	r1, r7, #4
 800abbc:	2200      	movs	r2, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fbec 	bl	800939c <xQueueReceive>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f47f af2a 	bne.w	800aa20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	3730      	adds	r7, #48	; 0x30
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20002360 	.word	0x20002360

0800abdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abe2:	e048      	b.n	800ac76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abe4:	4b2d      	ldr	r3, [pc, #180]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abee:	4b2b      	ldr	r3, [pc, #172]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3304      	adds	r3, #4
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe f905 	bl	8008e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d02e      	beq.n	800ac76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4413      	add	r3, r2
 800ac20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d90e      	bls.n	800ac48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac36:	4b19      	ldr	r3, [pc, #100]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f7fe f8aa 	bl	8008d9a <vListInsert>
 800ac46:	e016      	b.n	800ac76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	2100      	movs	r1, #0
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fd60 	bl	800a718 <xTimerGenericCommand>
 800ac58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	603b      	str	r3, [r7, #0]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac76:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1b1      	bne.n	800abe4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac80:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac86:	4b06      	ldr	r3, [pc, #24]	; (800aca0 <prvSwitchTimerLists+0xc4>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a04      	ldr	r2, [pc, #16]	; (800ac9c <prvSwitchTimerLists+0xc0>)
 800ac8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac8e:	4a04      	ldr	r2, [pc, #16]	; (800aca0 <prvSwitchTimerLists+0xc4>)
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	6013      	str	r3, [r2, #0]
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20002358 	.word	0x20002358
 800aca0:	2000235c 	.word	0x2000235c

0800aca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acaa:	f000 f96b 	bl	800af84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acae:	4b15      	ldr	r3, [pc, #84]	; (800ad04 <prvCheckForValidListAndQueue+0x60>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d120      	bne.n	800acf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acb6:	4814      	ldr	r0, [pc, #80]	; (800ad08 <prvCheckForValidListAndQueue+0x64>)
 800acb8:	f7fe f81e 	bl	8008cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acbc:	4813      	ldr	r0, [pc, #76]	; (800ad0c <prvCheckForValidListAndQueue+0x68>)
 800acbe:	f7fe f81b 	bl	8008cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acc2:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <prvCheckForValidListAndQueue+0x6c>)
 800acc4:	4a10      	ldr	r2, [pc, #64]	; (800ad08 <prvCheckForValidListAndQueue+0x64>)
 800acc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acc8:	4b12      	ldr	r3, [pc, #72]	; (800ad14 <prvCheckForValidListAndQueue+0x70>)
 800acca:	4a10      	ldr	r2, [pc, #64]	; (800ad0c <prvCheckForValidListAndQueue+0x68>)
 800accc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acce:	2300      	movs	r3, #0
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <prvCheckForValidListAndQueue+0x74>)
 800acd4:	4a11      	ldr	r2, [pc, #68]	; (800ad1c <prvCheckForValidListAndQueue+0x78>)
 800acd6:	2110      	movs	r1, #16
 800acd8:	200a      	movs	r0, #10
 800acda:	f7fe f929 	bl	8008f30 <xQueueGenericCreateStatic>
 800acde:	4603      	mov	r3, r0
 800ace0:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <prvCheckForValidListAndQueue+0x60>)
 800ace2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ace4:	4b07      	ldr	r3, [pc, #28]	; (800ad04 <prvCheckForValidListAndQueue+0x60>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <prvCheckForValidListAndQueue+0x60>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	490b      	ldr	r1, [pc, #44]	; (800ad20 <prvCheckForValidListAndQueue+0x7c>)
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fd42 	bl	800977c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acf8:	f000 f974 	bl	800afe4 <vPortExitCritical>
}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20002360 	.word	0x20002360
 800ad08:	20002330 	.word	0x20002330
 800ad0c:	20002344 	.word	0x20002344
 800ad10:	20002358 	.word	0x20002358
 800ad14:	2000235c 	.word	0x2000235c
 800ad18:	2000240c 	.word	0x2000240c
 800ad1c:	2000236c 	.word	0x2000236c
 800ad20:	0800f978 	.word	0x0800f978

0800ad24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	3b04      	subs	r3, #4
 800ad34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3b04      	subs	r3, #4
 800ad42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f023 0201 	bic.w	r2, r3, #1
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b04      	subs	r3, #4
 800ad52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad54:	4a0c      	ldr	r2, [pc, #48]	; (800ad88 <pxPortInitialiseStack+0x64>)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3b14      	subs	r3, #20
 800ad5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3b04      	subs	r3, #4
 800ad6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f06f 0202 	mvn.w	r2, #2
 800ad72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3b20      	subs	r3, #32
 800ad78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	0800ad8d 	.word	0x0800ad8d

0800ad8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad96:	4b12      	ldr	r3, [pc, #72]	; (800ade0 <prvTaskExitError+0x54>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	d00a      	beq.n	800adb6 <prvTaskExitError+0x2a>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <prvTaskExitError+0x28>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	60bb      	str	r3, [r7, #8]
}
 800adc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adca:	bf00      	nop
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d0fc      	beq.n	800adcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	2000000c 	.word	0x2000000c
	...

0800adf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <pxCurrentTCBConst2>)
 800adf2:	6819      	ldr	r1, [r3, #0]
 800adf4:	6808      	ldr	r0, [r1, #0]
 800adf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	f380 8809 	msr	PSP, r0
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f04f 0000 	mov.w	r0, #0
 800ae06:	f380 8811 	msr	BASEPRI, r0
 800ae0a:	4770      	bx	lr
 800ae0c:	f3af 8000 	nop.w

0800ae10 <pxCurrentTCBConst2>:
 800ae10:	20001e30 	.word	0x20001e30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop

0800ae18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae18:	4808      	ldr	r0, [pc, #32]	; (800ae3c <prvPortStartFirstTask+0x24>)
 800ae1a:	6800      	ldr	r0, [r0, #0]
 800ae1c:	6800      	ldr	r0, [r0, #0]
 800ae1e:	f380 8808 	msr	MSP, r0
 800ae22:	f04f 0000 	mov.w	r0, #0
 800ae26:	f380 8814 	msr	CONTROL, r0
 800ae2a:	b662      	cpsie	i
 800ae2c:	b661      	cpsie	f
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	df00      	svc	0
 800ae38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae3a:	bf00      	nop
 800ae3c:	e000ed08 	.word	0xe000ed08

0800ae40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae46:	4b46      	ldr	r3, [pc, #280]	; (800af60 <xPortStartScheduler+0x120>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a46      	ldr	r2, [pc, #280]	; (800af64 <xPortStartScheduler+0x124>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d10a      	bne.n	800ae66 <xPortStartScheduler+0x26>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	613b      	str	r3, [r7, #16]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae66:	4b3e      	ldr	r3, [pc, #248]	; (800af60 <xPortStartScheduler+0x120>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a3f      	ldr	r2, [pc, #252]	; (800af68 <xPortStartScheduler+0x128>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d10a      	bne.n	800ae86 <xPortStartScheduler+0x46>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	60fb      	str	r3, [r7, #12]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae86:	4b39      	ldr	r3, [pc, #228]	; (800af6c <xPortStartScheduler+0x12c>)
 800ae88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	22ff      	movs	r2, #255	; 0xff
 800ae96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	4b31      	ldr	r3, [pc, #196]	; (800af70 <xPortStartScheduler+0x130>)
 800aeac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aeae:	4b31      	ldr	r3, [pc, #196]	; (800af74 <xPortStartScheduler+0x134>)
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeb4:	e009      	b.n	800aeca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aeb6:	4b2f      	ldr	r3, [pc, #188]	; (800af74 <xPortStartScheduler+0x134>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	4a2d      	ldr	r2, [pc, #180]	; (800af74 <xPortStartScheduler+0x134>)
 800aebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed2:	2b80      	cmp	r3, #128	; 0x80
 800aed4:	d0ef      	beq.n	800aeb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aed6:	4b27      	ldr	r3, [pc, #156]	; (800af74 <xPortStartScheduler+0x134>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f1c3 0307 	rsb	r3, r3, #7
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d00a      	beq.n	800aef8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	60bb      	str	r3, [r7, #8]
}
 800aef4:	bf00      	nop
 800aef6:	e7fe      	b.n	800aef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aef8:	4b1e      	ldr	r3, [pc, #120]	; (800af74 <xPortStartScheduler+0x134>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	4a1d      	ldr	r2, [pc, #116]	; (800af74 <xPortStartScheduler+0x134>)
 800af00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af02:	4b1c      	ldr	r3, [pc, #112]	; (800af74 <xPortStartScheduler+0x134>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af0a:	4a1a      	ldr	r2, [pc, #104]	; (800af74 <xPortStartScheduler+0x134>)
 800af0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	b2da      	uxtb	r2, r3
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af16:	4b18      	ldr	r3, [pc, #96]	; (800af78 <xPortStartScheduler+0x138>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a17      	ldr	r2, [pc, #92]	; (800af78 <xPortStartScheduler+0x138>)
 800af1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af22:	4b15      	ldr	r3, [pc, #84]	; (800af78 <xPortStartScheduler+0x138>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a14      	ldr	r2, [pc, #80]	; (800af78 <xPortStartScheduler+0x138>)
 800af28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af2e:	f000 f8dd 	bl	800b0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af32:	4b12      	ldr	r3, [pc, #72]	; (800af7c <xPortStartScheduler+0x13c>)
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af38:	f000 f8fc 	bl	800b134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af3c:	4b10      	ldr	r3, [pc, #64]	; (800af80 <xPortStartScheduler+0x140>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0f      	ldr	r2, [pc, #60]	; (800af80 <xPortStartScheduler+0x140>)
 800af42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af48:	f7ff ff66 	bl	800ae18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af4c:	f7ff f846 	bl	8009fdc <vTaskSwitchContext>
	prvTaskExitError();
 800af50:	f7ff ff1c 	bl	800ad8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	e000ed00 	.word	0xe000ed00
 800af64:	410fc271 	.word	0x410fc271
 800af68:	410fc270 	.word	0x410fc270
 800af6c:	e000e400 	.word	0xe000e400
 800af70:	2000245c 	.word	0x2000245c
 800af74:	20002460 	.word	0x20002460
 800af78:	e000ed20 	.word	0xe000ed20
 800af7c:	2000000c 	.word	0x2000000c
 800af80:	e000ef34 	.word	0xe000ef34

0800af84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	607b      	str	r3, [r7, #4]
}
 800af9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af9e:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <vPortEnterCritical+0x58>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <vPortEnterCritical+0x58>)
 800afa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afa8:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <vPortEnterCritical+0x58>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d10f      	bne.n	800afd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afb0:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <vPortEnterCritical+0x5c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00a      	beq.n	800afd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	603b      	str	r3, [r7, #0]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <vPortEnterCritical+0x4a>
	}
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	2000000c 	.word	0x2000000c
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afea:	4b12      	ldr	r3, [pc, #72]	; (800b034 <vPortExitCritical+0x50>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <vPortExitCritical+0x24>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	607b      	str	r3, [r7, #4]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <vPortExitCritical+0x50>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	4a09      	ldr	r2, [pc, #36]	; (800b034 <vPortExitCritical+0x50>)
 800b010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <vPortExitCritical+0x50>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <vPortExitCritical+0x42>
 800b01a:	2300      	movs	r3, #0
 800b01c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	f383 8811 	msr	BASEPRI, r3
}
 800b024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	2000000c 	.word	0x2000000c
	...

0800b040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b040:	f3ef 8009 	mrs	r0, PSP
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	4b15      	ldr	r3, [pc, #84]	; (800b0a0 <pxCurrentTCBConst>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	f01e 0f10 	tst.w	lr, #16
 800b050:	bf08      	it	eq
 800b052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05a:	6010      	str	r0, [r2, #0]
 800b05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b060:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b064:	f380 8811 	msr	BASEPRI, r0
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f7fe ffb4 	bl	8009fdc <vTaskSwitchContext>
 800b074:	f04f 0000 	mov.w	r0, #0
 800b078:	f380 8811 	msr	BASEPRI, r0
 800b07c:	bc09      	pop	{r0, r3}
 800b07e:	6819      	ldr	r1, [r3, #0]
 800b080:	6808      	ldr	r0, [r1, #0]
 800b082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b086:	f01e 0f10 	tst.w	lr, #16
 800b08a:	bf08      	it	eq
 800b08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b090:	f380 8809 	msr	PSP, r0
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	f3af 8000 	nop.w

0800b0a0 <pxCurrentTCBConst>:
 800b0a0:	20001e30 	.word	0x20001e30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop

0800b0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	607b      	str	r3, [r7, #4]
}
 800b0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0c2:	f7fe fed1 	bl	8009e68 <xTaskIncrementTick>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <xPortSysTickHandler+0x40>)
 800b0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f383 8811 	msr	BASEPRI, r3
}
 800b0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0f0:	4b0b      	ldr	r3, [pc, #44]	; (800b120 <vPortSetupTimerInterrupt+0x34>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	; (800b124 <vPortSetupTimerInterrupt+0x38>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <vPortSetupTimerInterrupt+0x3c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a0a      	ldr	r2, [pc, #40]	; (800b12c <vPortSetupTimerInterrupt+0x40>)
 800b102:	fba2 2303 	umull	r2, r3, r2, r3
 800b106:	099b      	lsrs	r3, r3, #6
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <vPortSetupTimerInterrupt+0x44>)
 800b10a:	3b01      	subs	r3, #1
 800b10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b10e:	4b04      	ldr	r3, [pc, #16]	; (800b120 <vPortSetupTimerInterrupt+0x34>)
 800b110:	2207      	movs	r2, #7
 800b112:	601a      	str	r2, [r3, #0]
}
 800b114:	bf00      	nop
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	e000e010 	.word	0xe000e010
 800b124:	e000e018 	.word	0xe000e018
 800b128:	20000000 	.word	0x20000000
 800b12c:	10624dd3 	.word	0x10624dd3
 800b130:	e000e014 	.word	0xe000e014

0800b134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b144 <vPortEnableVFP+0x10>
 800b138:	6801      	ldr	r1, [r0, #0]
 800b13a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b13e:	6001      	str	r1, [r0, #0]
 800b140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b142:	bf00      	nop
 800b144:	e000ed88 	.word	0xe000ed88

0800b148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b14e:	f3ef 8305 	mrs	r3, IPSR
 800b152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b0f      	cmp	r3, #15
 800b158:	d914      	bls.n	800b184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b15a:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <vPortValidateInterruptPriority+0x70>)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4413      	add	r3, r2
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b164:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <vPortValidateInterruptPriority+0x74>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	7afa      	ldrb	r2, [r7, #11]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d20a      	bcs.n	800b184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	607b      	str	r3, [r7, #4]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b184:	4b0e      	ldr	r3, [pc, #56]	; (800b1c0 <vPortValidateInterruptPriority+0x78>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <vPortValidateInterruptPriority+0x7c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d90a      	bls.n	800b1aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	603b      	str	r3, [r7, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <vPortValidateInterruptPriority+0x60>
	}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	e000e3f0 	.word	0xe000e3f0
 800b1bc:	2000245c 	.word	0x2000245c
 800b1c0:	e000ed0c 	.word	0xe000ed0c
 800b1c4:	20002460 	.word	0x20002460

0800b1c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b08a      	sub	sp, #40	; 0x28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1d4:	f7fe fd8c 	bl	8009cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1d8:	4b5b      	ldr	r3, [pc, #364]	; (800b348 <pvPortMalloc+0x180>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1e0:	f000 f920 	bl	800b424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1e4:	4b59      	ldr	r3, [pc, #356]	; (800b34c <pvPortMalloc+0x184>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f040 8093 	bne.w	800b318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01d      	beq.n	800b234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1f8:	2208      	movs	r2, #8
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	2b00      	cmp	r3, #0
 800b208:	d014      	beq.n	800b234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f023 0307 	bic.w	r3, r3, #7
 800b210:	3308      	adds	r3, #8
 800b212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f003 0307 	and.w	r3, r3, #7
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <pvPortMalloc+0x6c>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	617b      	str	r3, [r7, #20]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d06e      	beq.n	800b318 <pvPortMalloc+0x150>
 800b23a:	4b45      	ldr	r3, [pc, #276]	; (800b350 <pvPortMalloc+0x188>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d869      	bhi.n	800b318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b244:	4b43      	ldr	r3, [pc, #268]	; (800b354 <pvPortMalloc+0x18c>)
 800b246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b248:	4b42      	ldr	r3, [pc, #264]	; (800b354 <pvPortMalloc+0x18c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b24e:	e004      	b.n	800b25a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d903      	bls.n	800b26c <pvPortMalloc+0xa4>
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1f1      	bne.n	800b250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b26c:	4b36      	ldr	r3, [pc, #216]	; (800b348 <pvPortMalloc+0x180>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b272:	429a      	cmp	r2, r3
 800b274:	d050      	beq.n	800b318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2208      	movs	r2, #8
 800b27c:	4413      	add	r3, r2
 800b27e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	1ad2      	subs	r2, r2, r3
 800b290:	2308      	movs	r3, #8
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	429a      	cmp	r2, r3
 800b296:	d91f      	bls.n	800b2d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4413      	add	r3, r2
 800b29e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	613b      	str	r3, [r7, #16]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2d2:	69b8      	ldr	r0, [r7, #24]
 800b2d4:	f000 f908 	bl	800b4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2d8:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <pvPortMalloc+0x188>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	4a1b      	ldr	r2, [pc, #108]	; (800b350 <pvPortMalloc+0x188>)
 800b2e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2e6:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <pvPortMalloc+0x188>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <pvPortMalloc+0x190>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d203      	bcs.n	800b2fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2f2:	4b17      	ldr	r3, [pc, #92]	; (800b350 <pvPortMalloc+0x188>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a18      	ldr	r2, [pc, #96]	; (800b358 <pvPortMalloc+0x190>)
 800b2f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <pvPortMalloc+0x184>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	431a      	orrs	r2, r3
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <pvPortMalloc+0x194>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3301      	adds	r3, #1
 800b314:	4a11      	ldr	r2, [pc, #68]	; (800b35c <pvPortMalloc+0x194>)
 800b316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b318:	f7fe fcf8 	bl	8009d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00a      	beq.n	800b33c <pvPortMalloc+0x174>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60fb      	str	r3, [r7, #12]
}
 800b338:	bf00      	nop
 800b33a:	e7fe      	b.n	800b33a <pvPortMalloc+0x172>
	return pvReturn;
 800b33c:	69fb      	ldr	r3, [r7, #28]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3728      	adds	r7, #40	; 0x28
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20003024 	.word	0x20003024
 800b34c:	20003038 	.word	0x20003038
 800b350:	20003028 	.word	0x20003028
 800b354:	2000301c 	.word	0x2000301c
 800b358:	2000302c 	.word	0x2000302c
 800b35c:	20003030 	.word	0x20003030

0800b360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d04d      	beq.n	800b40e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b372:	2308      	movs	r3, #8
 800b374:	425b      	negs	r3, r3
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4413      	add	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	4b24      	ldr	r3, [pc, #144]	; (800b418 <vPortFree+0xb8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4013      	ands	r3, r2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <vPortFree+0x44>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	60fb      	str	r3, [r7, #12]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00a      	beq.n	800b3c2 <vPortFree+0x62>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	60bb      	str	r3, [r7, #8]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	4b14      	ldr	r3, [pc, #80]	; (800b418 <vPortFree+0xb8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01e      	beq.n	800b40e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d11a      	bne.n	800b40e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <vPortFree+0xb8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	43db      	mvns	r3, r3
 800b3e2:	401a      	ands	r2, r3
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3e8:	f7fe fc82 	bl	8009cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <vPortFree+0xbc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	4a09      	ldr	r2, [pc, #36]	; (800b41c <vPortFree+0xbc>)
 800b3f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3fa:	6938      	ldr	r0, [r7, #16]
 800b3fc:	f000 f874 	bl	800b4e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <vPortFree+0xc0>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a06      	ldr	r2, [pc, #24]	; (800b420 <vPortFree+0xc0>)
 800b408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b40a:	f7fe fc7f 	bl	8009d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b40e:	bf00      	nop
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20003038 	.word	0x20003038
 800b41c:	20003028 	.word	0x20003028
 800b420:	20003034 	.word	0x20003034

0800b424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b42a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b430:	4b27      	ldr	r3, [pc, #156]	; (800b4d0 <prvHeapInit+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3307      	adds	r3, #7
 800b442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0307 	bic.w	r3, r3, #7
 800b44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	4a1f      	ldr	r2, [pc, #124]	; (800b4d0 <prvHeapInit+0xac>)
 800b454:	4413      	add	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b45c:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <prvHeapInit+0xb0>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <prvHeapInit+0xb0>)
 800b464:	2200      	movs	r2, #0
 800b466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	4413      	add	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b470:	2208      	movs	r2, #8
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1a9b      	subs	r3, r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4a15      	ldr	r2, [pc, #84]	; (800b4d8 <prvHeapInit+0xb4>)
 800b484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b486:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <prvHeapInit+0xb4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b48e:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <prvHeapInit+0xb4>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvHeapInit+0xb4>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4a0a      	ldr	r2, [pc, #40]	; (800b4dc <prvHeapInit+0xb8>)
 800b4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <prvHeapInit+0xbc>)
 800b4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4bc:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <prvHeapInit+0xc0>)
 800b4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4c2:	601a      	str	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20002464 	.word	0x20002464
 800b4d4:	2000301c 	.word	0x2000301c
 800b4d8:	20003024 	.word	0x20003024
 800b4dc:	2000302c 	.word	0x2000302c
 800b4e0:	20003028 	.word	0x20003028
 800b4e4:	20003038 	.word	0x20003038

0800b4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4f0:	4b28      	ldr	r3, [pc, #160]	; (800b594 <prvInsertBlockIntoFreeList+0xac>)
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e002      	b.n	800b4fc <prvInsertBlockIntoFreeList+0x14>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d8f7      	bhi.n	800b4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d108      	bne.n	800b52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	441a      	add	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	441a      	add	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d118      	bne.n	800b570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d00d      	beq.n	800b566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	e008      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b566:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e003      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d002      	beq.n	800b586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	2000301c 	.word	0x2000301c
 800b598:	20003024 	.word	0x20003024

0800b59c <atof>:
 800b59c:	2100      	movs	r1, #0
 800b59e:	f000 be0f 	b.w	800c1c0 <strtod>

0800b5a2 <sulp>:
 800b5a2:	b570      	push	{r4, r5, r6, lr}
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	ec45 4b10 	vmov	d0, r4, r5
 800b5ac:	4616      	mov	r6, r2
 800b5ae:	f003 fadb 	bl	800eb68 <__ulp>
 800b5b2:	ec51 0b10 	vmov	r0, r1, d0
 800b5b6:	b17e      	cbz	r6, 800b5d8 <sulp+0x36>
 800b5b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dd09      	ble.n	800b5d8 <sulp+0x36>
 800b5c4:	051b      	lsls	r3, r3, #20
 800b5c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5ca:	2400      	movs	r4, #0
 800b5cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	0000      	movs	r0, r0
 800b5dc:	0000      	movs	r0, r0
	...

0800b5e0 <_strtod_l>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ed2d 8b02 	vpush	{d8}
 800b5e8:	b09b      	sub	sp, #108	; 0x6c
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	9216      	str	r2, [sp, #88]	; 0x58
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	f04f 0800 	mov.w	r8, #0
 800b5f8:	f04f 0900 	mov.w	r9, #0
 800b5fc:	460a      	mov	r2, r1
 800b5fe:	9215      	str	r2, [sp, #84]	; 0x54
 800b600:	7811      	ldrb	r1, [r2, #0]
 800b602:	292b      	cmp	r1, #43	; 0x2b
 800b604:	d04c      	beq.n	800b6a0 <_strtod_l+0xc0>
 800b606:	d83a      	bhi.n	800b67e <_strtod_l+0x9e>
 800b608:	290d      	cmp	r1, #13
 800b60a:	d834      	bhi.n	800b676 <_strtod_l+0x96>
 800b60c:	2908      	cmp	r1, #8
 800b60e:	d834      	bhi.n	800b67a <_strtod_l+0x9a>
 800b610:	2900      	cmp	r1, #0
 800b612:	d03d      	beq.n	800b690 <_strtod_l+0xb0>
 800b614:	2200      	movs	r2, #0
 800b616:	920a      	str	r2, [sp, #40]	; 0x28
 800b618:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b61a:	7832      	ldrb	r2, [r6, #0]
 800b61c:	2a30      	cmp	r2, #48	; 0x30
 800b61e:	f040 80b4 	bne.w	800b78a <_strtod_l+0x1aa>
 800b622:	7872      	ldrb	r2, [r6, #1]
 800b624:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b628:	2a58      	cmp	r2, #88	; 0x58
 800b62a:	d170      	bne.n	800b70e <_strtod_l+0x12e>
 800b62c:	9302      	str	r3, [sp, #8]
 800b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	ab16      	add	r3, sp, #88	; 0x58
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	4a8e      	ldr	r2, [pc, #568]	; (800b870 <_strtod_l+0x290>)
 800b638:	ab17      	add	r3, sp, #92	; 0x5c
 800b63a:	a915      	add	r1, sp, #84	; 0x54
 800b63c:	4620      	mov	r0, r4
 800b63e:	f002 fb71 	bl	800dd24 <__gethex>
 800b642:	f010 070f 	ands.w	r7, r0, #15
 800b646:	4605      	mov	r5, r0
 800b648:	d005      	beq.n	800b656 <_strtod_l+0x76>
 800b64a:	2f06      	cmp	r7, #6
 800b64c:	d12a      	bne.n	800b6a4 <_strtod_l+0xc4>
 800b64e:	3601      	adds	r6, #1
 800b650:	2300      	movs	r3, #0
 800b652:	9615      	str	r6, [sp, #84]	; 0x54
 800b654:	930a      	str	r3, [sp, #40]	; 0x28
 800b656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f040 857f 	bne.w	800c15c <_strtod_l+0xb7c>
 800b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b660:	b1db      	cbz	r3, 800b69a <_strtod_l+0xba>
 800b662:	4642      	mov	r2, r8
 800b664:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b668:	ec43 2b10 	vmov	d0, r2, r3
 800b66c:	b01b      	add	sp, #108	; 0x6c
 800b66e:	ecbd 8b02 	vpop	{d8}
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	2920      	cmp	r1, #32
 800b678:	d1cc      	bne.n	800b614 <_strtod_l+0x34>
 800b67a:	3201      	adds	r2, #1
 800b67c:	e7bf      	b.n	800b5fe <_strtod_l+0x1e>
 800b67e:	292d      	cmp	r1, #45	; 0x2d
 800b680:	d1c8      	bne.n	800b614 <_strtod_l+0x34>
 800b682:	2101      	movs	r1, #1
 800b684:	910a      	str	r1, [sp, #40]	; 0x28
 800b686:	1c51      	adds	r1, r2, #1
 800b688:	9115      	str	r1, [sp, #84]	; 0x54
 800b68a:	7852      	ldrb	r2, [r2, #1]
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	d1c3      	bne.n	800b618 <_strtod_l+0x38>
 800b690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b692:	9515      	str	r5, [sp, #84]	; 0x54
 800b694:	2b00      	cmp	r3, #0
 800b696:	f040 855f 	bne.w	800c158 <_strtod_l+0xb78>
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	e7e3      	b.n	800b668 <_strtod_l+0x88>
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	e7ef      	b.n	800b684 <_strtod_l+0xa4>
 800b6a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6a6:	b13a      	cbz	r2, 800b6b8 <_strtod_l+0xd8>
 800b6a8:	2135      	movs	r1, #53	; 0x35
 800b6aa:	a818      	add	r0, sp, #96	; 0x60
 800b6ac:	f003 fb59 	bl	800ed62 <__copybits>
 800b6b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f002 ff2c 	bl	800e510 <_Bfree>
 800b6b8:	3f01      	subs	r7, #1
 800b6ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6bc:	2f04      	cmp	r7, #4
 800b6be:	d806      	bhi.n	800b6ce <_strtod_l+0xee>
 800b6c0:	e8df f007 	tbb	[pc, r7]
 800b6c4:	201d0314 	.word	0x201d0314
 800b6c8:	14          	.byte	0x14
 800b6c9:	00          	.byte	0x00
 800b6ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b6ce:	05e9      	lsls	r1, r5, #23
 800b6d0:	bf48      	it	mi
 800b6d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b6d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6da:	0d1b      	lsrs	r3, r3, #20
 800b6dc:	051b      	lsls	r3, r3, #20
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1b9      	bne.n	800b656 <_strtod_l+0x76>
 800b6e2:	f001 fbad 	bl	800ce40 <__errno>
 800b6e6:	2322      	movs	r3, #34	; 0x22
 800b6e8:	6003      	str	r3, [r0, #0]
 800b6ea:	e7b4      	b.n	800b656 <_strtod_l+0x76>
 800b6ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b6f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b6fc:	e7e7      	b.n	800b6ce <_strtod_l+0xee>
 800b6fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b878 <_strtod_l+0x298>
 800b702:	e7e4      	b.n	800b6ce <_strtod_l+0xee>
 800b704:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b708:	f04f 38ff 	mov.w	r8, #4294967295
 800b70c:	e7df      	b.n	800b6ce <_strtod_l+0xee>
 800b70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	9215      	str	r2, [sp, #84]	; 0x54
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b30      	cmp	r3, #48	; 0x30
 800b718:	d0f9      	beq.n	800b70e <_strtod_l+0x12e>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d09b      	beq.n	800b656 <_strtod_l+0x76>
 800b71e:	2301      	movs	r3, #1
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b728:	930b      	str	r3, [sp, #44]	; 0x2c
 800b72a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b72e:	46d3      	mov	fp, sl
 800b730:	220a      	movs	r2, #10
 800b732:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b734:	7806      	ldrb	r6, [r0, #0]
 800b736:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b73a:	b2d9      	uxtb	r1, r3
 800b73c:	2909      	cmp	r1, #9
 800b73e:	d926      	bls.n	800b78e <_strtod_l+0x1ae>
 800b740:	494c      	ldr	r1, [pc, #304]	; (800b874 <_strtod_l+0x294>)
 800b742:	2201      	movs	r2, #1
 800b744:	f001 fac9 	bl	800ccda <strncmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d030      	beq.n	800b7ae <_strtod_l+0x1ce>
 800b74c:	2000      	movs	r0, #0
 800b74e:	4632      	mov	r2, r6
 800b750:	9005      	str	r0, [sp, #20]
 800b752:	465e      	mov	r6, fp
 800b754:	4603      	mov	r3, r0
 800b756:	2a65      	cmp	r2, #101	; 0x65
 800b758:	d001      	beq.n	800b75e <_strtod_l+0x17e>
 800b75a:	2a45      	cmp	r2, #69	; 0x45
 800b75c:	d113      	bne.n	800b786 <_strtod_l+0x1a6>
 800b75e:	b91e      	cbnz	r6, 800b768 <_strtod_l+0x188>
 800b760:	9a04      	ldr	r2, [sp, #16]
 800b762:	4302      	orrs	r2, r0
 800b764:	d094      	beq.n	800b690 <_strtod_l+0xb0>
 800b766:	2600      	movs	r6, #0
 800b768:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b76a:	1c6a      	adds	r2, r5, #1
 800b76c:	9215      	str	r2, [sp, #84]	; 0x54
 800b76e:	786a      	ldrb	r2, [r5, #1]
 800b770:	2a2b      	cmp	r2, #43	; 0x2b
 800b772:	d074      	beq.n	800b85e <_strtod_l+0x27e>
 800b774:	2a2d      	cmp	r2, #45	; 0x2d
 800b776:	d078      	beq.n	800b86a <_strtod_l+0x28a>
 800b778:	f04f 0c00 	mov.w	ip, #0
 800b77c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b780:	2909      	cmp	r1, #9
 800b782:	d97f      	bls.n	800b884 <_strtod_l+0x2a4>
 800b784:	9515      	str	r5, [sp, #84]	; 0x54
 800b786:	2700      	movs	r7, #0
 800b788:	e09e      	b.n	800b8c8 <_strtod_l+0x2e8>
 800b78a:	2300      	movs	r3, #0
 800b78c:	e7c8      	b.n	800b720 <_strtod_l+0x140>
 800b78e:	f1bb 0f08 	cmp.w	fp, #8
 800b792:	bfd8      	it	le
 800b794:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b796:	f100 0001 	add.w	r0, r0, #1
 800b79a:	bfda      	itte	le
 800b79c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800b7a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b7a6:	f10b 0b01 	add.w	fp, fp, #1
 800b7aa:	9015      	str	r0, [sp, #84]	; 0x54
 800b7ac:	e7c1      	b.n	800b732 <_strtod_l+0x152>
 800b7ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	9215      	str	r2, [sp, #84]	; 0x54
 800b7b4:	785a      	ldrb	r2, [r3, #1]
 800b7b6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ba:	d037      	beq.n	800b82c <_strtod_l+0x24c>
 800b7bc:	9005      	str	r0, [sp, #20]
 800b7be:	465e      	mov	r6, fp
 800b7c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7c4:	2b09      	cmp	r3, #9
 800b7c6:	d912      	bls.n	800b7ee <_strtod_l+0x20e>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e7c4      	b.n	800b756 <_strtod_l+0x176>
 800b7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	9215      	str	r2, [sp, #84]	; 0x54
 800b7d2:	785a      	ldrb	r2, [r3, #1]
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	2a30      	cmp	r2, #48	; 0x30
 800b7d8:	d0f8      	beq.n	800b7cc <_strtod_l+0x1ec>
 800b7da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7de:	2b08      	cmp	r3, #8
 800b7e0:	f200 84c1 	bhi.w	800c166 <_strtod_l+0xb86>
 800b7e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7e6:	9005      	str	r0, [sp, #20]
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	3a30      	subs	r2, #48	; 0x30
 800b7f0:	f100 0301 	add.w	r3, r0, #1
 800b7f4:	d014      	beq.n	800b820 <_strtod_l+0x240>
 800b7f6:	9905      	ldr	r1, [sp, #20]
 800b7f8:	4419      	add	r1, r3
 800b7fa:	9105      	str	r1, [sp, #20]
 800b7fc:	4633      	mov	r3, r6
 800b7fe:	eb00 0c06 	add.w	ip, r0, r6
 800b802:	210a      	movs	r1, #10
 800b804:	4563      	cmp	r3, ip
 800b806:	d113      	bne.n	800b830 <_strtod_l+0x250>
 800b808:	1833      	adds	r3, r6, r0
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	f106 0601 	add.w	r6, r6, #1
 800b810:	4406      	add	r6, r0
 800b812:	dc1a      	bgt.n	800b84a <_strtod_l+0x26a>
 800b814:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b816:	230a      	movs	r3, #10
 800b818:	fb03 2301 	mla	r3, r3, r1, r2
 800b81c:	9309      	str	r3, [sp, #36]	; 0x24
 800b81e:	2300      	movs	r3, #0
 800b820:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b822:	1c51      	adds	r1, r2, #1
 800b824:	9115      	str	r1, [sp, #84]	; 0x54
 800b826:	7852      	ldrb	r2, [r2, #1]
 800b828:	4618      	mov	r0, r3
 800b82a:	e7c9      	b.n	800b7c0 <_strtod_l+0x1e0>
 800b82c:	4658      	mov	r0, fp
 800b82e:	e7d2      	b.n	800b7d6 <_strtod_l+0x1f6>
 800b830:	2b08      	cmp	r3, #8
 800b832:	f103 0301 	add.w	r3, r3, #1
 800b836:	dc03      	bgt.n	800b840 <_strtod_l+0x260>
 800b838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b83a:	434f      	muls	r7, r1
 800b83c:	9709      	str	r7, [sp, #36]	; 0x24
 800b83e:	e7e1      	b.n	800b804 <_strtod_l+0x224>
 800b840:	2b10      	cmp	r3, #16
 800b842:	bfd8      	it	le
 800b844:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b848:	e7dc      	b.n	800b804 <_strtod_l+0x224>
 800b84a:	2e10      	cmp	r6, #16
 800b84c:	bfdc      	itt	le
 800b84e:	230a      	movle	r3, #10
 800b850:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b854:	e7e3      	b.n	800b81e <_strtod_l+0x23e>
 800b856:	2300      	movs	r3, #0
 800b858:	9305      	str	r3, [sp, #20]
 800b85a:	2301      	movs	r3, #1
 800b85c:	e780      	b.n	800b760 <_strtod_l+0x180>
 800b85e:	f04f 0c00 	mov.w	ip, #0
 800b862:	1caa      	adds	r2, r5, #2
 800b864:	9215      	str	r2, [sp, #84]	; 0x54
 800b866:	78aa      	ldrb	r2, [r5, #2]
 800b868:	e788      	b.n	800b77c <_strtod_l+0x19c>
 800b86a:	f04f 0c01 	mov.w	ip, #1
 800b86e:	e7f8      	b.n	800b862 <_strtod_l+0x282>
 800b870:	0800faa4 	.word	0x0800faa4
 800b874:	0800faa0 	.word	0x0800faa0
 800b878:	7ff00000 	.word	0x7ff00000
 800b87c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b87e:	1c51      	adds	r1, r2, #1
 800b880:	9115      	str	r1, [sp, #84]	; 0x54
 800b882:	7852      	ldrb	r2, [r2, #1]
 800b884:	2a30      	cmp	r2, #48	; 0x30
 800b886:	d0f9      	beq.n	800b87c <_strtod_l+0x29c>
 800b888:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b88c:	2908      	cmp	r1, #8
 800b88e:	f63f af7a 	bhi.w	800b786 <_strtod_l+0x1a6>
 800b892:	3a30      	subs	r2, #48	; 0x30
 800b894:	9208      	str	r2, [sp, #32]
 800b896:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b898:	920c      	str	r2, [sp, #48]	; 0x30
 800b89a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b89c:	1c57      	adds	r7, r2, #1
 800b89e:	9715      	str	r7, [sp, #84]	; 0x54
 800b8a0:	7852      	ldrb	r2, [r2, #1]
 800b8a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8a6:	f1be 0f09 	cmp.w	lr, #9
 800b8aa:	d938      	bls.n	800b91e <_strtod_l+0x33e>
 800b8ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8ae:	1a7f      	subs	r7, r7, r1
 800b8b0:	2f08      	cmp	r7, #8
 800b8b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b8b6:	dc03      	bgt.n	800b8c0 <_strtod_l+0x2e0>
 800b8b8:	9908      	ldr	r1, [sp, #32]
 800b8ba:	428f      	cmp	r7, r1
 800b8bc:	bfa8      	it	ge
 800b8be:	460f      	movge	r7, r1
 800b8c0:	f1bc 0f00 	cmp.w	ip, #0
 800b8c4:	d000      	beq.n	800b8c8 <_strtod_l+0x2e8>
 800b8c6:	427f      	negs	r7, r7
 800b8c8:	2e00      	cmp	r6, #0
 800b8ca:	d14f      	bne.n	800b96c <_strtod_l+0x38c>
 800b8cc:	9904      	ldr	r1, [sp, #16]
 800b8ce:	4301      	orrs	r1, r0
 800b8d0:	f47f aec1 	bne.w	800b656 <_strtod_l+0x76>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f47f aedb 	bne.w	800b690 <_strtod_l+0xb0>
 800b8da:	2a69      	cmp	r2, #105	; 0x69
 800b8dc:	d029      	beq.n	800b932 <_strtod_l+0x352>
 800b8de:	dc26      	bgt.n	800b92e <_strtod_l+0x34e>
 800b8e0:	2a49      	cmp	r2, #73	; 0x49
 800b8e2:	d026      	beq.n	800b932 <_strtod_l+0x352>
 800b8e4:	2a4e      	cmp	r2, #78	; 0x4e
 800b8e6:	f47f aed3 	bne.w	800b690 <_strtod_l+0xb0>
 800b8ea:	499b      	ldr	r1, [pc, #620]	; (800bb58 <_strtod_l+0x578>)
 800b8ec:	a815      	add	r0, sp, #84	; 0x54
 800b8ee:	f002 fc59 	bl	800e1a4 <__match>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f43f aecc 	beq.w	800b690 <_strtod_l+0xb0>
 800b8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b28      	cmp	r3, #40	; 0x28
 800b8fe:	d12f      	bne.n	800b960 <_strtod_l+0x380>
 800b900:	4996      	ldr	r1, [pc, #600]	; (800bb5c <_strtod_l+0x57c>)
 800b902:	aa18      	add	r2, sp, #96	; 0x60
 800b904:	a815      	add	r0, sp, #84	; 0x54
 800b906:	f002 fc61 	bl	800e1cc <__hexnan>
 800b90a:	2805      	cmp	r0, #5
 800b90c:	d128      	bne.n	800b960 <_strtod_l+0x380>
 800b90e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b914:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b918:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b91c:	e69b      	b.n	800b656 <_strtod_l+0x76>
 800b91e:	9f08      	ldr	r7, [sp, #32]
 800b920:	210a      	movs	r1, #10
 800b922:	fb01 2107 	mla	r1, r1, r7, r2
 800b926:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b92a:	9208      	str	r2, [sp, #32]
 800b92c:	e7b5      	b.n	800b89a <_strtod_l+0x2ba>
 800b92e:	2a6e      	cmp	r2, #110	; 0x6e
 800b930:	e7d9      	b.n	800b8e6 <_strtod_l+0x306>
 800b932:	498b      	ldr	r1, [pc, #556]	; (800bb60 <_strtod_l+0x580>)
 800b934:	a815      	add	r0, sp, #84	; 0x54
 800b936:	f002 fc35 	bl	800e1a4 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aea8 	beq.w	800b690 <_strtod_l+0xb0>
 800b940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b942:	4988      	ldr	r1, [pc, #544]	; (800bb64 <_strtod_l+0x584>)
 800b944:	3b01      	subs	r3, #1
 800b946:	a815      	add	r0, sp, #84	; 0x54
 800b948:	9315      	str	r3, [sp, #84]	; 0x54
 800b94a:	f002 fc2b 	bl	800e1a4 <__match>
 800b94e:	b910      	cbnz	r0, 800b956 <_strtod_l+0x376>
 800b950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b952:	3301      	adds	r3, #1
 800b954:	9315      	str	r3, [sp, #84]	; 0x54
 800b956:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bb74 <_strtod_l+0x594>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	e67a      	b.n	800b656 <_strtod_l+0x76>
 800b960:	4881      	ldr	r0, [pc, #516]	; (800bb68 <_strtod_l+0x588>)
 800b962:	f001 faa9 	bl	800ceb8 <nan>
 800b966:	ec59 8b10 	vmov	r8, r9, d0
 800b96a:	e674      	b.n	800b656 <_strtod_l+0x76>
 800b96c:	9b05      	ldr	r3, [sp, #20]
 800b96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b970:	1afb      	subs	r3, r7, r3
 800b972:	f1bb 0f00 	cmp.w	fp, #0
 800b976:	bf08      	it	eq
 800b978:	46b3      	moveq	fp, r6
 800b97a:	2e10      	cmp	r6, #16
 800b97c:	9308      	str	r3, [sp, #32]
 800b97e:	4635      	mov	r5, r6
 800b980:	bfa8      	it	ge
 800b982:	2510      	movge	r5, #16
 800b984:	f7f4 fdbe 	bl	8000504 <__aeabi_ui2d>
 800b988:	2e09      	cmp	r6, #9
 800b98a:	4680      	mov	r8, r0
 800b98c:	4689      	mov	r9, r1
 800b98e:	dd13      	ble.n	800b9b8 <_strtod_l+0x3d8>
 800b990:	4b76      	ldr	r3, [pc, #472]	; (800bb6c <_strtod_l+0x58c>)
 800b992:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b996:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b99a:	f7f4 fe2d 	bl	80005f8 <__aeabi_dmul>
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	4689      	mov	r9, r1
 800b9a4:	f7f4 fdae 	bl	8000504 <__aeabi_ui2d>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	f7f4 fc6c 	bl	800028c <__adddf3>
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	4689      	mov	r9, r1
 800b9b8:	2e0f      	cmp	r6, #15
 800b9ba:	dc38      	bgt.n	800ba2e <_strtod_l+0x44e>
 800b9bc:	9b08      	ldr	r3, [sp, #32]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f43f ae49 	beq.w	800b656 <_strtod_l+0x76>
 800b9c4:	dd24      	ble.n	800ba10 <_strtod_l+0x430>
 800b9c6:	2b16      	cmp	r3, #22
 800b9c8:	dc0b      	bgt.n	800b9e2 <_strtod_l+0x402>
 800b9ca:	4968      	ldr	r1, [pc, #416]	; (800bb6c <_strtod_l+0x58c>)
 800b9cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f7f4 fe0e 	bl	80005f8 <__aeabi_dmul>
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	e639      	b.n	800b656 <_strtod_l+0x76>
 800b9e2:	9a08      	ldr	r2, [sp, #32]
 800b9e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	db20      	blt.n	800ba2e <_strtod_l+0x44e>
 800b9ec:	4c5f      	ldr	r4, [pc, #380]	; (800bb6c <_strtod_l+0x58c>)
 800b9ee:	f1c6 060f 	rsb	r6, r6, #15
 800b9f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9fe:	f7f4 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ba02:	9b08      	ldr	r3, [sp, #32]
 800ba04:	1b9e      	subs	r6, r3, r6
 800ba06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba0e:	e7e3      	b.n	800b9d8 <_strtod_l+0x3f8>
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	3316      	adds	r3, #22
 800ba14:	db0b      	blt.n	800ba2e <_strtod_l+0x44e>
 800ba16:	9b05      	ldr	r3, [sp, #20]
 800ba18:	1bdf      	subs	r7, r3, r7
 800ba1a:	4b54      	ldr	r3, [pc, #336]	; (800bb6c <_strtod_l+0x58c>)
 800ba1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba24:	4640      	mov	r0, r8
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f4 ff10 	bl	800084c <__aeabi_ddiv>
 800ba2c:	e7d6      	b.n	800b9dc <_strtod_l+0x3fc>
 800ba2e:	9b08      	ldr	r3, [sp, #32]
 800ba30:	1b75      	subs	r5, r6, r5
 800ba32:	441d      	add	r5, r3
 800ba34:	2d00      	cmp	r5, #0
 800ba36:	dd70      	ble.n	800bb1a <_strtod_l+0x53a>
 800ba38:	f015 030f 	ands.w	r3, r5, #15
 800ba3c:	d00a      	beq.n	800ba54 <_strtod_l+0x474>
 800ba3e:	494b      	ldr	r1, [pc, #300]	; (800bb6c <_strtod_l+0x58c>)
 800ba40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba44:	4642      	mov	r2, r8
 800ba46:	464b      	mov	r3, r9
 800ba48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	4680      	mov	r8, r0
 800ba52:	4689      	mov	r9, r1
 800ba54:	f035 050f 	bics.w	r5, r5, #15
 800ba58:	d04d      	beq.n	800baf6 <_strtod_l+0x516>
 800ba5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ba5e:	dd22      	ble.n	800baa6 <_strtod_l+0x4c6>
 800ba60:	2500      	movs	r5, #0
 800ba62:	46ab      	mov	fp, r5
 800ba64:	9509      	str	r5, [sp, #36]	; 0x24
 800ba66:	9505      	str	r5, [sp, #20]
 800ba68:	2322      	movs	r3, #34	; 0x22
 800ba6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bb74 <_strtod_l+0x594>
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	f04f 0800 	mov.w	r8, #0
 800ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f43f aded 	beq.w	800b656 <_strtod_l+0x76>
 800ba7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f002 fd46 	bl	800e510 <_Bfree>
 800ba84:	9905      	ldr	r1, [sp, #20]
 800ba86:	4620      	mov	r0, r4
 800ba88:	f002 fd42 	bl	800e510 <_Bfree>
 800ba8c:	4659      	mov	r1, fp
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f002 fd3e 	bl	800e510 <_Bfree>
 800ba94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba96:	4620      	mov	r0, r4
 800ba98:	f002 fd3a 	bl	800e510 <_Bfree>
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f002 fd36 	bl	800e510 <_Bfree>
 800baa4:	e5d7      	b.n	800b656 <_strtod_l+0x76>
 800baa6:	4b32      	ldr	r3, [pc, #200]	; (800bb70 <_strtod_l+0x590>)
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	2300      	movs	r3, #0
 800baac:	112d      	asrs	r5, r5, #4
 800baae:	4640      	mov	r0, r8
 800bab0:	4649      	mov	r1, r9
 800bab2:	469a      	mov	sl, r3
 800bab4:	2d01      	cmp	r5, #1
 800bab6:	dc21      	bgt.n	800bafc <_strtod_l+0x51c>
 800bab8:	b10b      	cbz	r3, 800babe <_strtod_l+0x4de>
 800baba:	4680      	mov	r8, r0
 800babc:	4689      	mov	r9, r1
 800babe:	492c      	ldr	r1, [pc, #176]	; (800bb70 <_strtod_l+0x590>)
 800bac0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bac4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bac8:	4642      	mov	r2, r8
 800baca:	464b      	mov	r3, r9
 800bacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad0:	f7f4 fd92 	bl	80005f8 <__aeabi_dmul>
 800bad4:	4b27      	ldr	r3, [pc, #156]	; (800bb74 <_strtod_l+0x594>)
 800bad6:	460a      	mov	r2, r1
 800bad8:	400b      	ands	r3, r1
 800bada:	4927      	ldr	r1, [pc, #156]	; (800bb78 <_strtod_l+0x598>)
 800badc:	428b      	cmp	r3, r1
 800bade:	4680      	mov	r8, r0
 800bae0:	d8be      	bhi.n	800ba60 <_strtod_l+0x480>
 800bae2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bae6:	428b      	cmp	r3, r1
 800bae8:	bf86      	itte	hi
 800baea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bb7c <_strtod_l+0x59c>
 800baee:	f04f 38ff 	movhi.w	r8, #4294967295
 800baf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800baf6:	2300      	movs	r3, #0
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	e07b      	b.n	800bbf4 <_strtod_l+0x614>
 800bafc:	07ea      	lsls	r2, r5, #31
 800bafe:	d505      	bpl.n	800bb0c <_strtod_l+0x52c>
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f7f4 fd77 	bl	80005f8 <__aeabi_dmul>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	9a04      	ldr	r2, [sp, #16]
 800bb0e:	3208      	adds	r2, #8
 800bb10:	f10a 0a01 	add.w	sl, sl, #1
 800bb14:	106d      	asrs	r5, r5, #1
 800bb16:	9204      	str	r2, [sp, #16]
 800bb18:	e7cc      	b.n	800bab4 <_strtod_l+0x4d4>
 800bb1a:	d0ec      	beq.n	800baf6 <_strtod_l+0x516>
 800bb1c:	426d      	negs	r5, r5
 800bb1e:	f015 020f 	ands.w	r2, r5, #15
 800bb22:	d00a      	beq.n	800bb3a <_strtod_l+0x55a>
 800bb24:	4b11      	ldr	r3, [pc, #68]	; (800bb6c <_strtod_l+0x58c>)
 800bb26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f7f4 fe8b 	bl	800084c <__aeabi_ddiv>
 800bb36:	4680      	mov	r8, r0
 800bb38:	4689      	mov	r9, r1
 800bb3a:	112d      	asrs	r5, r5, #4
 800bb3c:	d0db      	beq.n	800baf6 <_strtod_l+0x516>
 800bb3e:	2d1f      	cmp	r5, #31
 800bb40:	dd1e      	ble.n	800bb80 <_strtod_l+0x5a0>
 800bb42:	2500      	movs	r5, #0
 800bb44:	46ab      	mov	fp, r5
 800bb46:	9509      	str	r5, [sp, #36]	; 0x24
 800bb48:	9505      	str	r5, [sp, #20]
 800bb4a:	2322      	movs	r3, #34	; 0x22
 800bb4c:	f04f 0800 	mov.w	r8, #0
 800bb50:	f04f 0900 	mov.w	r9, #0
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	e78d      	b.n	800ba74 <_strtod_l+0x494>
 800bb58:	0800fb05 	.word	0x0800fb05
 800bb5c:	0800fab8 	.word	0x0800fab8
 800bb60:	0800fafd 	.word	0x0800fafd
 800bb64:	0800fb37 	.word	0x0800fb37
 800bb68:	0800fec9 	.word	0x0800fec9
 800bb6c:	0800fca8 	.word	0x0800fca8
 800bb70:	0800fc80 	.word	0x0800fc80
 800bb74:	7ff00000 	.word	0x7ff00000
 800bb78:	7ca00000 	.word	0x7ca00000
 800bb7c:	7fefffff 	.word	0x7fefffff
 800bb80:	f015 0310 	ands.w	r3, r5, #16
 800bb84:	bf18      	it	ne
 800bb86:	236a      	movne	r3, #106	; 0x6a
 800bb88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bf2c <_strtod_l+0x94c>
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	4640      	mov	r0, r8
 800bb90:	4649      	mov	r1, r9
 800bb92:	2300      	movs	r3, #0
 800bb94:	07ea      	lsls	r2, r5, #31
 800bb96:	d504      	bpl.n	800bba2 <_strtod_l+0x5c2>
 800bb98:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb9c:	f7f4 fd2c 	bl	80005f8 <__aeabi_dmul>
 800bba0:	2301      	movs	r3, #1
 800bba2:	106d      	asrs	r5, r5, #1
 800bba4:	f10a 0a08 	add.w	sl, sl, #8
 800bba8:	d1f4      	bne.n	800bb94 <_strtod_l+0x5b4>
 800bbaa:	b10b      	cbz	r3, 800bbb0 <_strtod_l+0x5d0>
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	9b04      	ldr	r3, [sp, #16]
 800bbb2:	b1bb      	cbz	r3, 800bbe4 <_strtod_l+0x604>
 800bbb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bbb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	dd10      	ble.n	800bbe4 <_strtod_l+0x604>
 800bbc2:	2b1f      	cmp	r3, #31
 800bbc4:	f340 811e 	ble.w	800be04 <_strtod_l+0x824>
 800bbc8:	2b34      	cmp	r3, #52	; 0x34
 800bbca:	bfde      	ittt	le
 800bbcc:	f04f 33ff 	movle.w	r3, #4294967295
 800bbd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbd4:	4093      	lslle	r3, r2
 800bbd6:	f04f 0800 	mov.w	r8, #0
 800bbda:	bfcc      	ite	gt
 800bbdc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bbe0:	ea03 0901 	andle.w	r9, r3, r1
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4640      	mov	r0, r8
 800bbea:	4649      	mov	r1, r9
 800bbec:	f7f4 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1a6      	bne.n	800bb42 <_strtod_l+0x562>
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbfa:	4633      	mov	r3, r6
 800bbfc:	465a      	mov	r2, fp
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f002 fcee 	bl	800e5e0 <__s2b>
 800bc04:	9009      	str	r0, [sp, #36]	; 0x24
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f43f af2a 	beq.w	800ba60 <_strtod_l+0x480>
 800bc0c:	9a08      	ldr	r2, [sp, #32]
 800bc0e:	9b05      	ldr	r3, [sp, #20]
 800bc10:	2a00      	cmp	r2, #0
 800bc12:	eba3 0307 	sub.w	r3, r3, r7
 800bc16:	bfa8      	it	ge
 800bc18:	2300      	movge	r3, #0
 800bc1a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc1c:	2500      	movs	r5, #0
 800bc1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc22:	9312      	str	r3, [sp, #72]	; 0x48
 800bc24:	46ab      	mov	fp, r5
 800bc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc28:	4620      	mov	r0, r4
 800bc2a:	6859      	ldr	r1, [r3, #4]
 800bc2c:	f002 fc30 	bl	800e490 <_Balloc>
 800bc30:	9005      	str	r0, [sp, #20]
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f43f af18 	beq.w	800ba68 <_strtod_l+0x488>
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	691a      	ldr	r2, [r3, #16]
 800bc3c:	3202      	adds	r2, #2
 800bc3e:	f103 010c 	add.w	r1, r3, #12
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	300c      	adds	r0, #12
 800bc46:	f001 f927 	bl	800ce98 <memcpy>
 800bc4a:	ec49 8b10 	vmov	d0, r8, r9
 800bc4e:	aa18      	add	r2, sp, #96	; 0x60
 800bc50:	a917      	add	r1, sp, #92	; 0x5c
 800bc52:	4620      	mov	r0, r4
 800bc54:	f002 fff8 	bl	800ec48 <__d2b>
 800bc58:	ec49 8b18 	vmov	d8, r8, r9
 800bc5c:	9016      	str	r0, [sp, #88]	; 0x58
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f af02 	beq.w	800ba68 <_strtod_l+0x488>
 800bc64:	2101      	movs	r1, #1
 800bc66:	4620      	mov	r0, r4
 800bc68:	f002 fd52 	bl	800e710 <__i2b>
 800bc6c:	4683      	mov	fp, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f aefa 	beq.w	800ba68 <_strtod_l+0x488>
 800bc74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bc76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc78:	2e00      	cmp	r6, #0
 800bc7a:	bfab      	itete	ge
 800bc7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bc7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bc80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bc86:	bfac      	ite	ge
 800bc88:	eb06 0a03 	addge.w	sl, r6, r3
 800bc8c:	1b9f      	sublt	r7, r3, r6
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	1af6      	subs	r6, r6, r3
 800bc92:	4416      	add	r6, r2
 800bc94:	4ba0      	ldr	r3, [pc, #640]	; (800bf18 <_strtod_l+0x938>)
 800bc96:	3e01      	subs	r6, #1
 800bc98:	429e      	cmp	r6, r3
 800bc9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc9e:	f280 80c4 	bge.w	800be2a <_strtod_l+0x84a>
 800bca2:	1b9b      	subs	r3, r3, r6
 800bca4:	2b1f      	cmp	r3, #31
 800bca6:	eba2 0203 	sub.w	r2, r2, r3
 800bcaa:	f04f 0101 	mov.w	r1, #1
 800bcae:	f300 80b0 	bgt.w	800be12 <_strtod_l+0x832>
 800bcb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb6:	930e      	str	r3, [sp, #56]	; 0x38
 800bcb8:	2300      	movs	r3, #0
 800bcba:	930d      	str	r3, [sp, #52]	; 0x34
 800bcbc:	eb0a 0602 	add.w	r6, sl, r2
 800bcc0:	9b04      	ldr	r3, [sp, #16]
 800bcc2:	45b2      	cmp	sl, r6
 800bcc4:	4417      	add	r7, r2
 800bcc6:	441f      	add	r7, r3
 800bcc8:	4653      	mov	r3, sl
 800bcca:	bfa8      	it	ge
 800bccc:	4633      	movge	r3, r6
 800bcce:	42bb      	cmp	r3, r7
 800bcd0:	bfa8      	it	ge
 800bcd2:	463b      	movge	r3, r7
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bfc2      	ittt	gt
 800bcd8:	1af6      	subgt	r6, r6, r3
 800bcda:	1aff      	subgt	r7, r7, r3
 800bcdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dd17      	ble.n	800bd16 <_strtod_l+0x736>
 800bce6:	4659      	mov	r1, fp
 800bce8:	461a      	mov	r2, r3
 800bcea:	4620      	mov	r0, r4
 800bcec:	f002 fdd0 	bl	800e890 <__pow5mult>
 800bcf0:	4683      	mov	fp, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f43f aeb8 	beq.w	800ba68 <_strtod_l+0x488>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f002 fd1d 	bl	800e73c <__multiply>
 800bd02:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f43f aeaf 	beq.w	800ba68 <_strtod_l+0x488>
 800bd0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f002 fbff 	bl	800e510 <_Bfree>
 800bd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd14:	9316      	str	r3, [sp, #88]	; 0x58
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	f300 808c 	bgt.w	800be34 <_strtod_l+0x854>
 800bd1c:	9b08      	ldr	r3, [sp, #32]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	dd08      	ble.n	800bd34 <_strtod_l+0x754>
 800bd22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd24:	9905      	ldr	r1, [sp, #20]
 800bd26:	4620      	mov	r0, r4
 800bd28:	f002 fdb2 	bl	800e890 <__pow5mult>
 800bd2c:	9005      	str	r0, [sp, #20]
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f43f ae9a 	beq.w	800ba68 <_strtod_l+0x488>
 800bd34:	2f00      	cmp	r7, #0
 800bd36:	dd08      	ble.n	800bd4a <_strtod_l+0x76a>
 800bd38:	9905      	ldr	r1, [sp, #20]
 800bd3a:	463a      	mov	r2, r7
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f002 fe01 	bl	800e944 <__lshift>
 800bd42:	9005      	str	r0, [sp, #20]
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f43f ae8f 	beq.w	800ba68 <_strtod_l+0x488>
 800bd4a:	f1ba 0f00 	cmp.w	sl, #0
 800bd4e:	dd08      	ble.n	800bd62 <_strtod_l+0x782>
 800bd50:	4659      	mov	r1, fp
 800bd52:	4652      	mov	r2, sl
 800bd54:	4620      	mov	r0, r4
 800bd56:	f002 fdf5 	bl	800e944 <__lshift>
 800bd5a:	4683      	mov	fp, r0
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f43f ae83 	beq.w	800ba68 <_strtod_l+0x488>
 800bd62:	9a05      	ldr	r2, [sp, #20]
 800bd64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd66:	4620      	mov	r0, r4
 800bd68:	f002 fe74 	bl	800ea54 <__mdiff>
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f43f ae7a 	beq.w	800ba68 <_strtod_l+0x488>
 800bd74:	68c3      	ldr	r3, [r0, #12]
 800bd76:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60c3      	str	r3, [r0, #12]
 800bd7c:	4659      	mov	r1, fp
 800bd7e:	f002 fe4d 	bl	800ea1c <__mcmp>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	da60      	bge.n	800be48 <_strtod_l+0x868>
 800bd86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd88:	ea53 0308 	orrs.w	r3, r3, r8
 800bd8c:	f040 8084 	bne.w	800be98 <_strtod_l+0x8b8>
 800bd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d17f      	bne.n	800be98 <_strtod_l+0x8b8>
 800bd98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd9c:	0d1b      	lsrs	r3, r3, #20
 800bd9e:	051b      	lsls	r3, r3, #20
 800bda0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bda4:	d978      	bls.n	800be98 <_strtod_l+0x8b8>
 800bda6:	696b      	ldr	r3, [r5, #20]
 800bda8:	b913      	cbnz	r3, 800bdb0 <_strtod_l+0x7d0>
 800bdaa:	692b      	ldr	r3, [r5, #16]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	dd73      	ble.n	800be98 <_strtod_l+0x8b8>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f002 fdc5 	bl	800e944 <__lshift>
 800bdba:	4659      	mov	r1, fp
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	f002 fe2d 	bl	800ea1c <__mcmp>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	dd68      	ble.n	800be98 <_strtod_l+0x8b8>
 800bdc6:	9904      	ldr	r1, [sp, #16]
 800bdc8:	4a54      	ldr	r2, [pc, #336]	; (800bf1c <_strtod_l+0x93c>)
 800bdca:	464b      	mov	r3, r9
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	f000 8084 	beq.w	800beda <_strtod_l+0x8fa>
 800bdd2:	ea02 0109 	and.w	r1, r2, r9
 800bdd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdda:	dc7e      	bgt.n	800beda <_strtod_l+0x8fa>
 800bddc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bde0:	f77f aeb3 	ble.w	800bb4a <_strtod_l+0x56a>
 800bde4:	4b4e      	ldr	r3, [pc, #312]	; (800bf20 <_strtod_l+0x940>)
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	2200      	movs	r2, #0
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	4b4a      	ldr	r3, [pc, #296]	; (800bf1c <_strtod_l+0x93c>)
 800bdf2:	400b      	ands	r3, r1
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f47f ae3f 	bne.w	800ba7c <_strtod_l+0x49c>
 800bdfe:	2322      	movs	r3, #34	; 0x22
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	e63b      	b.n	800ba7c <_strtod_l+0x49c>
 800be04:	f04f 32ff 	mov.w	r2, #4294967295
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	ea03 0808 	and.w	r8, r3, r8
 800be10:	e6e8      	b.n	800bbe4 <_strtod_l+0x604>
 800be12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800be16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800be1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800be1e:	36e2      	adds	r6, #226	; 0xe2
 800be20:	fa01 f306 	lsl.w	r3, r1, r6
 800be24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800be28:	e748      	b.n	800bcbc <_strtod_l+0x6dc>
 800be2a:	2100      	movs	r1, #0
 800be2c:	2301      	movs	r3, #1
 800be2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800be32:	e743      	b.n	800bcbc <_strtod_l+0x6dc>
 800be34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be36:	4632      	mov	r2, r6
 800be38:	4620      	mov	r0, r4
 800be3a:	f002 fd83 	bl	800e944 <__lshift>
 800be3e:	9016      	str	r0, [sp, #88]	; 0x58
 800be40:	2800      	cmp	r0, #0
 800be42:	f47f af6b 	bne.w	800bd1c <_strtod_l+0x73c>
 800be46:	e60f      	b.n	800ba68 <_strtod_l+0x488>
 800be48:	46ca      	mov	sl, r9
 800be4a:	d171      	bne.n	800bf30 <_strtod_l+0x950>
 800be4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be52:	b352      	cbz	r2, 800beaa <_strtod_l+0x8ca>
 800be54:	4a33      	ldr	r2, [pc, #204]	; (800bf24 <_strtod_l+0x944>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d12a      	bne.n	800beb0 <_strtod_l+0x8d0>
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	4641      	mov	r1, r8
 800be5e:	b1fb      	cbz	r3, 800bea0 <_strtod_l+0x8c0>
 800be60:	4b2e      	ldr	r3, [pc, #184]	; (800bf1c <_strtod_l+0x93c>)
 800be62:	ea09 0303 	and.w	r3, r9, r3
 800be66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	d81a      	bhi.n	800bea6 <_strtod_l+0x8c6>
 800be70:	0d1b      	lsrs	r3, r3, #20
 800be72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be76:	fa02 f303 	lsl.w	r3, r2, r3
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d118      	bne.n	800beb0 <_strtod_l+0x8d0>
 800be7e:	4b2a      	ldr	r3, [pc, #168]	; (800bf28 <_strtod_l+0x948>)
 800be80:	459a      	cmp	sl, r3
 800be82:	d102      	bne.n	800be8a <_strtod_l+0x8aa>
 800be84:	3101      	adds	r1, #1
 800be86:	f43f adef 	beq.w	800ba68 <_strtod_l+0x488>
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <_strtod_l+0x93c>)
 800be8c:	ea0a 0303 	and.w	r3, sl, r3
 800be90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800be94:	f04f 0800 	mov.w	r8, #0
 800be98:	9b04      	ldr	r3, [sp, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1a2      	bne.n	800bde4 <_strtod_l+0x804>
 800be9e:	e5ed      	b.n	800ba7c <_strtod_l+0x49c>
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	e7e9      	b.n	800be7a <_strtod_l+0x89a>
 800bea6:	4613      	mov	r3, r2
 800bea8:	e7e7      	b.n	800be7a <_strtod_l+0x89a>
 800beaa:	ea53 0308 	orrs.w	r3, r3, r8
 800beae:	d08a      	beq.n	800bdc6 <_strtod_l+0x7e6>
 800beb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beb2:	b1e3      	cbz	r3, 800beee <_strtod_l+0x90e>
 800beb4:	ea13 0f0a 	tst.w	r3, sl
 800beb8:	d0ee      	beq.n	800be98 <_strtod_l+0x8b8>
 800beba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bebc:	9a04      	ldr	r2, [sp, #16]
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	b1c3      	cbz	r3, 800bef6 <_strtod_l+0x916>
 800bec4:	f7ff fb6d 	bl	800b5a2 <sulp>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	ec51 0b18 	vmov	r0, r1, d8
 800bed0:	f7f4 f9dc 	bl	800028c <__adddf3>
 800bed4:	4680      	mov	r8, r0
 800bed6:	4689      	mov	r9, r1
 800bed8:	e7de      	b.n	800be98 <_strtod_l+0x8b8>
 800beda:	4013      	ands	r3, r2
 800bedc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bee0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bee4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bee8:	f04f 38ff 	mov.w	r8, #4294967295
 800beec:	e7d4      	b.n	800be98 <_strtod_l+0x8b8>
 800beee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bef0:	ea13 0f08 	tst.w	r3, r8
 800bef4:	e7e0      	b.n	800beb8 <_strtod_l+0x8d8>
 800bef6:	f7ff fb54 	bl	800b5a2 <sulp>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	ec51 0b18 	vmov	r0, r1, d8
 800bf02:	f7f4 f9c1 	bl	8000288 <__aeabi_dsub>
 800bf06:	2200      	movs	r2, #0
 800bf08:	2300      	movs	r3, #0
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	f7f4 fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d0c0      	beq.n	800be98 <_strtod_l+0x8b8>
 800bf16:	e618      	b.n	800bb4a <_strtod_l+0x56a>
 800bf18:	fffffc02 	.word	0xfffffc02
 800bf1c:	7ff00000 	.word	0x7ff00000
 800bf20:	39500000 	.word	0x39500000
 800bf24:	000fffff 	.word	0x000fffff
 800bf28:	7fefffff 	.word	0x7fefffff
 800bf2c:	0800fad0 	.word	0x0800fad0
 800bf30:	4659      	mov	r1, fp
 800bf32:	4628      	mov	r0, r5
 800bf34:	f002 fee2 	bl	800ecfc <__ratio>
 800bf38:	ec57 6b10 	vmov	r6, r7, d0
 800bf3c:	ee10 0a10 	vmov	r0, s0
 800bf40:	2200      	movs	r2, #0
 800bf42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fdd2 	bl	8000af0 <__aeabi_dcmple>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d071      	beq.n	800c034 <_strtod_l+0xa54>
 800bf50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d17c      	bne.n	800c050 <_strtod_l+0xa70>
 800bf56:	f1b8 0f00 	cmp.w	r8, #0
 800bf5a:	d15a      	bne.n	800c012 <_strtod_l+0xa32>
 800bf5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d15d      	bne.n	800c020 <_strtod_l+0xa40>
 800bf64:	4b90      	ldr	r3, [pc, #576]	; (800c1a8 <_strtod_l+0xbc8>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 fdb6 	bl	8000adc <__aeabi_dcmplt>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d15c      	bne.n	800c02e <_strtod_l+0xa4e>
 800bf74:	4630      	mov	r0, r6
 800bf76:	4639      	mov	r1, r7
 800bf78:	4b8c      	ldr	r3, [pc, #560]	; (800c1ac <_strtod_l+0xbcc>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	4606      	mov	r6, r0
 800bf82:	460f      	mov	r7, r1
 800bf84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bf88:	9606      	str	r6, [sp, #24]
 800bf8a:	9307      	str	r3, [sp, #28]
 800bf8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bf94:	4b86      	ldr	r3, [pc, #536]	; (800c1b0 <_strtod_l+0xbd0>)
 800bf96:	ea0a 0303 	and.w	r3, sl, r3
 800bf9a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf9e:	4b85      	ldr	r3, [pc, #532]	; (800c1b4 <_strtod_l+0xbd4>)
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	f040 8090 	bne.w	800c0c6 <_strtod_l+0xae6>
 800bfa6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bfaa:	ec49 8b10 	vmov	d0, r8, r9
 800bfae:	f002 fddb 	bl	800eb68 <__ulp>
 800bfb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfb6:	ec51 0b10 	vmov	r0, r1, d0
 800bfba:	f7f4 fb1d 	bl	80005f8 <__aeabi_dmul>
 800bfbe:	4642      	mov	r2, r8
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4979      	ldr	r1, [pc, #484]	; (800c1b0 <_strtod_l+0xbd0>)
 800bfca:	4a7b      	ldr	r2, [pc, #492]	; (800c1b8 <_strtod_l+0xbd8>)
 800bfcc:	4019      	ands	r1, r3
 800bfce:	4291      	cmp	r1, r2
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	d944      	bls.n	800c05e <_strtod_l+0xa7e>
 800bfd4:	ee18 2a90 	vmov	r2, s17
 800bfd8:	4b78      	ldr	r3, [pc, #480]	; (800c1bc <_strtod_l+0xbdc>)
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d104      	bne.n	800bfe8 <_strtod_l+0xa08>
 800bfde:	ee18 3a10 	vmov	r3, s16
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	f43f ad40 	beq.w	800ba68 <_strtod_l+0x488>
 800bfe8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c1bc <_strtod_l+0xbdc>
 800bfec:	f04f 38ff 	mov.w	r8, #4294967295
 800bff0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bff2:	4620      	mov	r0, r4
 800bff4:	f002 fa8c 	bl	800e510 <_Bfree>
 800bff8:	9905      	ldr	r1, [sp, #20]
 800bffa:	4620      	mov	r0, r4
 800bffc:	f002 fa88 	bl	800e510 <_Bfree>
 800c000:	4659      	mov	r1, fp
 800c002:	4620      	mov	r0, r4
 800c004:	f002 fa84 	bl	800e510 <_Bfree>
 800c008:	4629      	mov	r1, r5
 800c00a:	4620      	mov	r0, r4
 800c00c:	f002 fa80 	bl	800e510 <_Bfree>
 800c010:	e609      	b.n	800bc26 <_strtod_l+0x646>
 800c012:	f1b8 0f01 	cmp.w	r8, #1
 800c016:	d103      	bne.n	800c020 <_strtod_l+0xa40>
 800c018:	f1b9 0f00 	cmp.w	r9, #0
 800c01c:	f43f ad95 	beq.w	800bb4a <_strtod_l+0x56a>
 800c020:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c178 <_strtod_l+0xb98>
 800c024:	4f60      	ldr	r7, [pc, #384]	; (800c1a8 <_strtod_l+0xbc8>)
 800c026:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c02a:	2600      	movs	r6, #0
 800c02c:	e7ae      	b.n	800bf8c <_strtod_l+0x9ac>
 800c02e:	4f5f      	ldr	r7, [pc, #380]	; (800c1ac <_strtod_l+0xbcc>)
 800c030:	2600      	movs	r6, #0
 800c032:	e7a7      	b.n	800bf84 <_strtod_l+0x9a4>
 800c034:	4b5d      	ldr	r3, [pc, #372]	; (800c1ac <_strtod_l+0xbcc>)
 800c036:	4630      	mov	r0, r6
 800c038:	4639      	mov	r1, r7
 800c03a:	2200      	movs	r2, #0
 800c03c:	f7f4 fadc 	bl	80005f8 <__aeabi_dmul>
 800c040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d09c      	beq.n	800bf84 <_strtod_l+0x9a4>
 800c04a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c04e:	e79d      	b.n	800bf8c <_strtod_l+0x9ac>
 800c050:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c180 <_strtod_l+0xba0>
 800c054:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c058:	ec57 6b17 	vmov	r6, r7, d7
 800c05c:	e796      	b.n	800bf8c <_strtod_l+0x9ac>
 800c05e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	46ca      	mov	sl, r9
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1c2      	bne.n	800bff0 <_strtod_l+0xa10>
 800c06a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c06e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c070:	0d1b      	lsrs	r3, r3, #20
 800c072:	051b      	lsls	r3, r3, #20
 800c074:	429a      	cmp	r2, r3
 800c076:	d1bb      	bne.n	800bff0 <_strtod_l+0xa10>
 800c078:	4630      	mov	r0, r6
 800c07a:	4639      	mov	r1, r7
 800c07c:	f7f4 fe1c 	bl	8000cb8 <__aeabi_d2lz>
 800c080:	f7f4 fa8c 	bl	800059c <__aeabi_l2d>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4630      	mov	r0, r6
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 f8fc 	bl	8000288 <__aeabi_dsub>
 800c090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c096:	ea43 0308 	orr.w	r3, r3, r8
 800c09a:	4313      	orrs	r3, r2
 800c09c:	4606      	mov	r6, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	d054      	beq.n	800c14c <_strtod_l+0xb6c>
 800c0a2:	a339      	add	r3, pc, #228	; (adr r3, 800c188 <_strtod_l+0xba8>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 fd18 	bl	8000adc <__aeabi_dcmplt>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f47f ace5 	bne.w	800ba7c <_strtod_l+0x49c>
 800c0b2:	a337      	add	r3, pc, #220	; (adr r3, 800c190 <_strtod_l+0xbb0>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	f7f4 fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d095      	beq.n	800bff0 <_strtod_l+0xa10>
 800c0c4:	e4da      	b.n	800ba7c <_strtod_l+0x49c>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	b333      	cbz	r3, 800c118 <_strtod_l+0xb38>
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0d0:	d822      	bhi.n	800c118 <_strtod_l+0xb38>
 800c0d2:	a331      	add	r3, pc, #196	; (adr r3, 800c198 <_strtod_l+0xbb8>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 fd08 	bl	8000af0 <__aeabi_dcmple>
 800c0e0:	b1a0      	cbz	r0, 800c10c <_strtod_l+0xb2c>
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7f4 fd5f 	bl	8000ba8 <__aeabi_d2uiz>
 800c0ea:	2801      	cmp	r0, #1
 800c0ec:	bf38      	it	cc
 800c0ee:	2001      	movcc	r0, #1
 800c0f0:	f7f4 fa08 	bl	8000504 <__aeabi_ui2d>
 800c0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	bb23      	cbnz	r3, 800c146 <_strtod_l+0xb66>
 800c0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c100:	9010      	str	r0, [sp, #64]	; 0x40
 800c102:	9311      	str	r3, [sp, #68]	; 0x44
 800c104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c110:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	930f      	str	r3, [sp, #60]	; 0x3c
 800c118:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c11c:	eeb0 0a48 	vmov.f32	s0, s16
 800c120:	eef0 0a68 	vmov.f32	s1, s17
 800c124:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c128:	f002 fd1e 	bl	800eb68 <__ulp>
 800c12c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c130:	ec53 2b10 	vmov	r2, r3, d0
 800c134:	f7f4 fa60 	bl	80005f8 <__aeabi_dmul>
 800c138:	ec53 2b18 	vmov	r2, r3, d8
 800c13c:	f7f4 f8a6 	bl	800028c <__adddf3>
 800c140:	4680      	mov	r8, r0
 800c142:	4689      	mov	r9, r1
 800c144:	e78d      	b.n	800c062 <_strtod_l+0xa82>
 800c146:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c14a:	e7db      	b.n	800c104 <_strtod_l+0xb24>
 800c14c:	a314      	add	r3, pc, #80	; (adr r3, 800c1a0 <_strtod_l+0xbc0>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	f7f4 fcc3 	bl	8000adc <__aeabi_dcmplt>
 800c156:	e7b3      	b.n	800c0c0 <_strtod_l+0xae0>
 800c158:	2300      	movs	r3, #0
 800c15a:	930a      	str	r3, [sp, #40]	; 0x28
 800c15c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	f7ff ba7c 	b.w	800b65e <_strtod_l+0x7e>
 800c166:	2a65      	cmp	r2, #101	; 0x65
 800c168:	f43f ab75 	beq.w	800b856 <_strtod_l+0x276>
 800c16c:	2a45      	cmp	r2, #69	; 0x45
 800c16e:	f43f ab72 	beq.w	800b856 <_strtod_l+0x276>
 800c172:	2301      	movs	r3, #1
 800c174:	f7ff bbaa 	b.w	800b8cc <_strtod_l+0x2ec>
 800c178:	00000000 	.word	0x00000000
 800c17c:	bff00000 	.word	0xbff00000
 800c180:	00000000 	.word	0x00000000
 800c184:	3ff00000 	.word	0x3ff00000
 800c188:	94a03595 	.word	0x94a03595
 800c18c:	3fdfffff 	.word	0x3fdfffff
 800c190:	35afe535 	.word	0x35afe535
 800c194:	3fe00000 	.word	0x3fe00000
 800c198:	ffc00000 	.word	0xffc00000
 800c19c:	41dfffff 	.word	0x41dfffff
 800c1a0:	94a03595 	.word	0x94a03595
 800c1a4:	3fcfffff 	.word	0x3fcfffff
 800c1a8:	3ff00000 	.word	0x3ff00000
 800c1ac:	3fe00000 	.word	0x3fe00000
 800c1b0:	7ff00000 	.word	0x7ff00000
 800c1b4:	7fe00000 	.word	0x7fe00000
 800c1b8:	7c9fffff 	.word	0x7c9fffff
 800c1bc:	7fefffff 	.word	0x7fefffff

0800c1c0 <strtod>:
 800c1c0:	460a      	mov	r2, r1
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	4802      	ldr	r0, [pc, #8]	; (800c1d0 <strtod+0x10>)
 800c1c6:	4b03      	ldr	r3, [pc, #12]	; (800c1d4 <strtod+0x14>)
 800c1c8:	6800      	ldr	r0, [r0, #0]
 800c1ca:	f7ff ba09 	b.w	800b5e0 <_strtod_l>
 800c1ce:	bf00      	nop
 800c1d0:	200001d4 	.word	0x200001d4
 800c1d4:	2000001c 	.word	0x2000001c

0800c1d8 <__cvt>:
 800c1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	ec55 4b10 	vmov	r4, r5, d0
 800c1e0:	2d00      	cmp	r5, #0
 800c1e2:	460e      	mov	r6, r1
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	bfbb      	ittet	lt
 800c1ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c1ee:	461d      	movlt	r5, r3
 800c1f0:	2300      	movge	r3, #0
 800c1f2:	232d      	movlt	r3, #45	; 0x2d
 800c1f4:	700b      	strb	r3, [r1, #0]
 800c1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c1fc:	4691      	mov	r9, r2
 800c1fe:	f023 0820 	bic.w	r8, r3, #32
 800c202:	bfbc      	itt	lt
 800c204:	4622      	movlt	r2, r4
 800c206:	4614      	movlt	r4, r2
 800c208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c20c:	d005      	beq.n	800c21a <__cvt+0x42>
 800c20e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c212:	d100      	bne.n	800c216 <__cvt+0x3e>
 800c214:	3601      	adds	r6, #1
 800c216:	2102      	movs	r1, #2
 800c218:	e000      	b.n	800c21c <__cvt+0x44>
 800c21a:	2103      	movs	r1, #3
 800c21c:	ab03      	add	r3, sp, #12
 800c21e:	9301      	str	r3, [sp, #4]
 800c220:	ab02      	add	r3, sp, #8
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	ec45 4b10 	vmov	d0, r4, r5
 800c228:	4653      	mov	r3, sl
 800c22a:	4632      	mov	r2, r6
 800c22c:	f000 fed4 	bl	800cfd8 <_dtoa_r>
 800c230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c234:	4607      	mov	r7, r0
 800c236:	d102      	bne.n	800c23e <__cvt+0x66>
 800c238:	f019 0f01 	tst.w	r9, #1
 800c23c:	d022      	beq.n	800c284 <__cvt+0xac>
 800c23e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c242:	eb07 0906 	add.w	r9, r7, r6
 800c246:	d110      	bne.n	800c26a <__cvt+0x92>
 800c248:	783b      	ldrb	r3, [r7, #0]
 800c24a:	2b30      	cmp	r3, #48	; 0x30
 800c24c:	d10a      	bne.n	800c264 <__cvt+0x8c>
 800c24e:	2200      	movs	r2, #0
 800c250:	2300      	movs	r3, #0
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f7f4 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800c25a:	b918      	cbnz	r0, 800c264 <__cvt+0x8c>
 800c25c:	f1c6 0601 	rsb	r6, r6, #1
 800c260:	f8ca 6000 	str.w	r6, [sl]
 800c264:	f8da 3000 	ldr.w	r3, [sl]
 800c268:	4499      	add	r9, r3
 800c26a:	2200      	movs	r2, #0
 800c26c:	2300      	movs	r3, #0
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	f7f4 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 800c276:	b108      	cbz	r0, 800c27c <__cvt+0xa4>
 800c278:	f8cd 900c 	str.w	r9, [sp, #12]
 800c27c:	2230      	movs	r2, #48	; 0x30
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	454b      	cmp	r3, r9
 800c282:	d307      	bcc.n	800c294 <__cvt+0xbc>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c288:	1bdb      	subs	r3, r3, r7
 800c28a:	4638      	mov	r0, r7
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	b004      	add	sp, #16
 800c290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c294:	1c59      	adds	r1, r3, #1
 800c296:	9103      	str	r1, [sp, #12]
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	e7f0      	b.n	800c27e <__cvt+0xa6>

0800c29c <__exponent>:
 800c29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	bfb8      	it	lt
 800c2a4:	4249      	neglt	r1, r1
 800c2a6:	f803 2b02 	strb.w	r2, [r3], #2
 800c2aa:	bfb4      	ite	lt
 800c2ac:	222d      	movlt	r2, #45	; 0x2d
 800c2ae:	222b      	movge	r2, #43	; 0x2b
 800c2b0:	2909      	cmp	r1, #9
 800c2b2:	7042      	strb	r2, [r0, #1]
 800c2b4:	dd2a      	ble.n	800c30c <__exponent+0x70>
 800c2b6:	f10d 0207 	add.w	r2, sp, #7
 800c2ba:	4617      	mov	r7, r2
 800c2bc:	260a      	movs	r6, #10
 800c2be:	4694      	mov	ip, r2
 800c2c0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c2c4:	fb06 1415 	mls	r4, r6, r5, r1
 800c2c8:	3430      	adds	r4, #48	; 0x30
 800c2ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	2c63      	cmp	r4, #99	; 0x63
 800c2d2:	f102 32ff 	add.w	r2, r2, #4294967295
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	dcf1      	bgt.n	800c2be <__exponent+0x22>
 800c2da:	3130      	adds	r1, #48	; 0x30
 800c2dc:	f1ac 0402 	sub.w	r4, ip, #2
 800c2e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c2e4:	1c41      	adds	r1, r0, #1
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	42ba      	cmp	r2, r7
 800c2ea:	d30a      	bcc.n	800c302 <__exponent+0x66>
 800c2ec:	f10d 0209 	add.w	r2, sp, #9
 800c2f0:	eba2 020c 	sub.w	r2, r2, ip
 800c2f4:	42bc      	cmp	r4, r7
 800c2f6:	bf88      	it	hi
 800c2f8:	2200      	movhi	r2, #0
 800c2fa:	4413      	add	r3, r2
 800c2fc:	1a18      	subs	r0, r3, r0
 800c2fe:	b003      	add	sp, #12
 800c300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c302:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c306:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c30a:	e7ed      	b.n	800c2e8 <__exponent+0x4c>
 800c30c:	2330      	movs	r3, #48	; 0x30
 800c30e:	3130      	adds	r1, #48	; 0x30
 800c310:	7083      	strb	r3, [r0, #2]
 800c312:	70c1      	strb	r1, [r0, #3]
 800c314:	1d03      	adds	r3, r0, #4
 800c316:	e7f1      	b.n	800c2fc <__exponent+0x60>

0800c318 <_printf_float>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	ed2d 8b02 	vpush	{d8}
 800c320:	b08d      	sub	sp, #52	; 0x34
 800c322:	460c      	mov	r4, r1
 800c324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c328:	4616      	mov	r6, r2
 800c32a:	461f      	mov	r7, r3
 800c32c:	4605      	mov	r5, r0
 800c32e:	f000 fce7 	bl	800cd00 <_localeconv_r>
 800c332:	f8d0 a000 	ldr.w	sl, [r0]
 800c336:	4650      	mov	r0, sl
 800c338:	f7f3 ff9a 	bl	8000270 <strlen>
 800c33c:	2300      	movs	r3, #0
 800c33e:	930a      	str	r3, [sp, #40]	; 0x28
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	9305      	str	r3, [sp, #20]
 800c344:	f8d8 3000 	ldr.w	r3, [r8]
 800c348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c34c:	3307      	adds	r3, #7
 800c34e:	f023 0307 	bic.w	r3, r3, #7
 800c352:	f103 0208 	add.w	r2, r3, #8
 800c356:	f8c8 2000 	str.w	r2, [r8]
 800c35a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	f8cd 8018 	str.w	r8, [sp, #24]
 800c368:	ee08 0a10 	vmov	s16, r0
 800c36c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c374:	4b9e      	ldr	r3, [pc, #632]	; (800c5f0 <_printf_float+0x2d8>)
 800c376:	f04f 32ff 	mov.w	r2, #4294967295
 800c37a:	f7f4 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800c37e:	bb88      	cbnz	r0, 800c3e4 <_printf_float+0xcc>
 800c380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c384:	4b9a      	ldr	r3, [pc, #616]	; (800c5f0 <_printf_float+0x2d8>)
 800c386:	f04f 32ff 	mov.w	r2, #4294967295
 800c38a:	f7f4 fbb1 	bl	8000af0 <__aeabi_dcmple>
 800c38e:	bb48      	cbnz	r0, 800c3e4 <_printf_float+0xcc>
 800c390:	2200      	movs	r2, #0
 800c392:	2300      	movs	r3, #0
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 fba0 	bl	8000adc <__aeabi_dcmplt>
 800c39c:	b110      	cbz	r0, 800c3a4 <_printf_float+0x8c>
 800c39e:	232d      	movs	r3, #45	; 0x2d
 800c3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a4:	4a93      	ldr	r2, [pc, #588]	; (800c5f4 <_printf_float+0x2dc>)
 800c3a6:	4b94      	ldr	r3, [pc, #592]	; (800c5f8 <_printf_float+0x2e0>)
 800c3a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3ac:	bf94      	ite	ls
 800c3ae:	4690      	movls	r8, r2
 800c3b0:	4698      	movhi	r8, r3
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	6123      	str	r3, [r4, #16]
 800c3b6:	9b05      	ldr	r3, [sp, #20]
 800c3b8:	f023 0304 	bic.w	r3, r3, #4
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	f04f 0900 	mov.w	r9, #0
 800c3c2:	9700      	str	r7, [sp, #0]
 800c3c4:	4633      	mov	r3, r6
 800c3c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 f9da 	bl	800c784 <_printf_common>
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f040 8090 	bne.w	800c4f6 <_printf_float+0x1de>
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3da:	b00d      	add	sp, #52	; 0x34
 800c3dc:	ecbd 8b02 	vpop	{d8}
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	4642      	mov	r2, r8
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	4640      	mov	r0, r8
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	f7f4 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 800c3f0:	b140      	cbz	r0, 800c404 <_printf_float+0xec>
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	bfbc      	itt	lt
 800c3f8:	232d      	movlt	r3, #45	; 0x2d
 800c3fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3fe:	4a7f      	ldr	r2, [pc, #508]	; (800c5fc <_printf_float+0x2e4>)
 800c400:	4b7f      	ldr	r3, [pc, #508]	; (800c600 <_printf_float+0x2e8>)
 800c402:	e7d1      	b.n	800c3a8 <_printf_float+0x90>
 800c404:	6863      	ldr	r3, [r4, #4]
 800c406:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c40a:	9206      	str	r2, [sp, #24]
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	d13f      	bne.n	800c490 <_printf_float+0x178>
 800c410:	2306      	movs	r3, #6
 800c412:	6063      	str	r3, [r4, #4]
 800c414:	9b05      	ldr	r3, [sp, #20]
 800c416:	6861      	ldr	r1, [r4, #4]
 800c418:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c41c:	2300      	movs	r3, #0
 800c41e:	9303      	str	r3, [sp, #12]
 800c420:	ab0a      	add	r3, sp, #40	; 0x28
 800c422:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c426:	ab09      	add	r3, sp, #36	; 0x24
 800c428:	ec49 8b10 	vmov	d0, r8, r9
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	6022      	str	r2, [r4, #0]
 800c430:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c434:	4628      	mov	r0, r5
 800c436:	f7ff fecf 	bl	800c1d8 <__cvt>
 800c43a:	9b06      	ldr	r3, [sp, #24]
 800c43c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c43e:	2b47      	cmp	r3, #71	; 0x47
 800c440:	4680      	mov	r8, r0
 800c442:	d108      	bne.n	800c456 <_printf_float+0x13e>
 800c444:	1cc8      	adds	r0, r1, #3
 800c446:	db02      	blt.n	800c44e <_printf_float+0x136>
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	4299      	cmp	r1, r3
 800c44c:	dd41      	ble.n	800c4d2 <_printf_float+0x1ba>
 800c44e:	f1ab 0302 	sub.w	r3, fp, #2
 800c452:	fa5f fb83 	uxtb.w	fp, r3
 800c456:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c45a:	d820      	bhi.n	800c49e <_printf_float+0x186>
 800c45c:	3901      	subs	r1, #1
 800c45e:	465a      	mov	r2, fp
 800c460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c464:	9109      	str	r1, [sp, #36]	; 0x24
 800c466:	f7ff ff19 	bl	800c29c <__exponent>
 800c46a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c46c:	1813      	adds	r3, r2, r0
 800c46e:	2a01      	cmp	r2, #1
 800c470:	4681      	mov	r9, r0
 800c472:	6123      	str	r3, [r4, #16]
 800c474:	dc02      	bgt.n	800c47c <_printf_float+0x164>
 800c476:	6822      	ldr	r2, [r4, #0]
 800c478:	07d2      	lsls	r2, r2, #31
 800c47a:	d501      	bpl.n	800c480 <_printf_float+0x168>
 800c47c:	3301      	adds	r3, #1
 800c47e:	6123      	str	r3, [r4, #16]
 800c480:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c484:	2b00      	cmp	r3, #0
 800c486:	d09c      	beq.n	800c3c2 <_printf_float+0xaa>
 800c488:	232d      	movs	r3, #45	; 0x2d
 800c48a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c48e:	e798      	b.n	800c3c2 <_printf_float+0xaa>
 800c490:	9a06      	ldr	r2, [sp, #24]
 800c492:	2a47      	cmp	r2, #71	; 0x47
 800c494:	d1be      	bne.n	800c414 <_printf_float+0xfc>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1bc      	bne.n	800c414 <_printf_float+0xfc>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e7b9      	b.n	800c412 <_printf_float+0xfa>
 800c49e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c4a2:	d118      	bne.n	800c4d6 <_printf_float+0x1be>
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	6863      	ldr	r3, [r4, #4]
 800c4a8:	dd0b      	ble.n	800c4c2 <_printf_float+0x1aa>
 800c4aa:	6121      	str	r1, [r4, #16]
 800c4ac:	b913      	cbnz	r3, 800c4b4 <_printf_float+0x19c>
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	07d0      	lsls	r0, r2, #31
 800c4b2:	d502      	bpl.n	800c4ba <_printf_float+0x1a2>
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	440b      	add	r3, r1
 800c4b8:	6123      	str	r3, [r4, #16]
 800c4ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4bc:	f04f 0900 	mov.w	r9, #0
 800c4c0:	e7de      	b.n	800c480 <_printf_float+0x168>
 800c4c2:	b913      	cbnz	r3, 800c4ca <_printf_float+0x1b2>
 800c4c4:	6822      	ldr	r2, [r4, #0]
 800c4c6:	07d2      	lsls	r2, r2, #31
 800c4c8:	d501      	bpl.n	800c4ce <_printf_float+0x1b6>
 800c4ca:	3302      	adds	r3, #2
 800c4cc:	e7f4      	b.n	800c4b8 <_printf_float+0x1a0>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e7f2      	b.n	800c4b8 <_printf_float+0x1a0>
 800c4d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d8:	4299      	cmp	r1, r3
 800c4da:	db05      	blt.n	800c4e8 <_printf_float+0x1d0>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	6121      	str	r1, [r4, #16]
 800c4e0:	07d8      	lsls	r0, r3, #31
 800c4e2:	d5ea      	bpl.n	800c4ba <_printf_float+0x1a2>
 800c4e4:	1c4b      	adds	r3, r1, #1
 800c4e6:	e7e7      	b.n	800c4b8 <_printf_float+0x1a0>
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	bfd4      	ite	le
 800c4ec:	f1c1 0202 	rsble	r2, r1, #2
 800c4f0:	2201      	movgt	r2, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	e7e0      	b.n	800c4b8 <_printf_float+0x1a0>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	055a      	lsls	r2, r3, #21
 800c4fa:	d407      	bmi.n	800c50c <_printf_float+0x1f4>
 800c4fc:	6923      	ldr	r3, [r4, #16]
 800c4fe:	4642      	mov	r2, r8
 800c500:	4631      	mov	r1, r6
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	d12c      	bne.n	800c564 <_printf_float+0x24c>
 800c50a:	e764      	b.n	800c3d6 <_printf_float+0xbe>
 800c50c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c510:	f240 80e0 	bls.w	800c6d4 <_printf_float+0x3bc>
 800c514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c518:	2200      	movs	r2, #0
 800c51a:	2300      	movs	r3, #0
 800c51c:	f7f4 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c520:	2800      	cmp	r0, #0
 800c522:	d034      	beq.n	800c58e <_printf_float+0x276>
 800c524:	4a37      	ldr	r2, [pc, #220]	; (800c604 <_printf_float+0x2ec>)
 800c526:	2301      	movs	r3, #1
 800c528:	4631      	mov	r1, r6
 800c52a:	4628      	mov	r0, r5
 800c52c:	47b8      	blx	r7
 800c52e:	3001      	adds	r0, #1
 800c530:	f43f af51 	beq.w	800c3d6 <_printf_float+0xbe>
 800c534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c538:	429a      	cmp	r2, r3
 800c53a:	db02      	blt.n	800c542 <_printf_float+0x22a>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	07d8      	lsls	r0, r3, #31
 800c540:	d510      	bpl.n	800c564 <_printf_float+0x24c>
 800c542:	ee18 3a10 	vmov	r3, s16
 800c546:	4652      	mov	r2, sl
 800c548:	4631      	mov	r1, r6
 800c54a:	4628      	mov	r0, r5
 800c54c:	47b8      	blx	r7
 800c54e:	3001      	adds	r0, #1
 800c550:	f43f af41 	beq.w	800c3d6 <_printf_float+0xbe>
 800c554:	f04f 0800 	mov.w	r8, #0
 800c558:	f104 091a 	add.w	r9, r4, #26
 800c55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55e:	3b01      	subs	r3, #1
 800c560:	4543      	cmp	r3, r8
 800c562:	dc09      	bgt.n	800c578 <_printf_float+0x260>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	079b      	lsls	r3, r3, #30
 800c568:	f100 8107 	bmi.w	800c77a <_printf_float+0x462>
 800c56c:	68e0      	ldr	r0, [r4, #12]
 800c56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c570:	4298      	cmp	r0, r3
 800c572:	bfb8      	it	lt
 800c574:	4618      	movlt	r0, r3
 800c576:	e730      	b.n	800c3da <_printf_float+0xc2>
 800c578:	2301      	movs	r3, #1
 800c57a:	464a      	mov	r2, r9
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	f43f af27 	beq.w	800c3d6 <_printf_float+0xbe>
 800c588:	f108 0801 	add.w	r8, r8, #1
 800c58c:	e7e6      	b.n	800c55c <_printf_float+0x244>
 800c58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c590:	2b00      	cmp	r3, #0
 800c592:	dc39      	bgt.n	800c608 <_printf_float+0x2f0>
 800c594:	4a1b      	ldr	r2, [pc, #108]	; (800c604 <_printf_float+0x2ec>)
 800c596:	2301      	movs	r3, #1
 800c598:	4631      	mov	r1, r6
 800c59a:	4628      	mov	r0, r5
 800c59c:	47b8      	blx	r7
 800c59e:	3001      	adds	r0, #1
 800c5a0:	f43f af19 	beq.w	800c3d6 <_printf_float+0xbe>
 800c5a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	d102      	bne.n	800c5b2 <_printf_float+0x29a>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	07d9      	lsls	r1, r3, #31
 800c5b0:	d5d8      	bpl.n	800c564 <_printf_float+0x24c>
 800c5b2:	ee18 3a10 	vmov	r3, s16
 800c5b6:	4652      	mov	r2, sl
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f af09 	beq.w	800c3d6 <_printf_float+0xbe>
 800c5c4:	f04f 0900 	mov.w	r9, #0
 800c5c8:	f104 0a1a 	add.w	sl, r4, #26
 800c5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ce:	425b      	negs	r3, r3
 800c5d0:	454b      	cmp	r3, r9
 800c5d2:	dc01      	bgt.n	800c5d8 <_printf_float+0x2c0>
 800c5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d6:	e792      	b.n	800c4fe <_printf_float+0x1e6>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4652      	mov	r2, sl
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	f43f aef7 	beq.w	800c3d6 <_printf_float+0xbe>
 800c5e8:	f109 0901 	add.w	r9, r9, #1
 800c5ec:	e7ee      	b.n	800c5cc <_printf_float+0x2b4>
 800c5ee:	bf00      	nop
 800c5f0:	7fefffff 	.word	0x7fefffff
 800c5f4:	0800faf8 	.word	0x0800faf8
 800c5f8:	0800fafc 	.word	0x0800fafc
 800c5fc:	0800fb00 	.word	0x0800fb00
 800c600:	0800fb04 	.word	0x0800fb04
 800c604:	0800fb08 	.word	0x0800fb08
 800c608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c60a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c60c:	429a      	cmp	r2, r3
 800c60e:	bfa8      	it	ge
 800c610:	461a      	movge	r2, r3
 800c612:	2a00      	cmp	r2, #0
 800c614:	4691      	mov	r9, r2
 800c616:	dc37      	bgt.n	800c688 <_printf_float+0x370>
 800c618:	f04f 0b00 	mov.w	fp, #0
 800c61c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c620:	f104 021a 	add.w	r2, r4, #26
 800c624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	eba3 0309 	sub.w	r3, r3, r9
 800c62c:	455b      	cmp	r3, fp
 800c62e:	dc33      	bgt.n	800c698 <_printf_float+0x380>
 800c630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c634:	429a      	cmp	r2, r3
 800c636:	db3b      	blt.n	800c6b0 <_printf_float+0x398>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	07da      	lsls	r2, r3, #31
 800c63c:	d438      	bmi.n	800c6b0 <_printf_float+0x398>
 800c63e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c642:	eba2 0903 	sub.w	r9, r2, r3
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	4591      	cmp	r9, r2
 800c64c:	bfa8      	it	ge
 800c64e:	4691      	movge	r9, r2
 800c650:	f1b9 0f00 	cmp.w	r9, #0
 800c654:	dc35      	bgt.n	800c6c2 <_printf_float+0x3aa>
 800c656:	f04f 0800 	mov.w	r8, #0
 800c65a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c65e:	f104 0a1a 	add.w	sl, r4, #26
 800c662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c666:	1a9b      	subs	r3, r3, r2
 800c668:	eba3 0309 	sub.w	r3, r3, r9
 800c66c:	4543      	cmp	r3, r8
 800c66e:	f77f af79 	ble.w	800c564 <_printf_float+0x24c>
 800c672:	2301      	movs	r3, #1
 800c674:	4652      	mov	r2, sl
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	47b8      	blx	r7
 800c67c:	3001      	adds	r0, #1
 800c67e:	f43f aeaa 	beq.w	800c3d6 <_printf_float+0xbe>
 800c682:	f108 0801 	add.w	r8, r8, #1
 800c686:	e7ec      	b.n	800c662 <_printf_float+0x34a>
 800c688:	4613      	mov	r3, r2
 800c68a:	4631      	mov	r1, r6
 800c68c:	4642      	mov	r2, r8
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	d1c0      	bne.n	800c618 <_printf_float+0x300>
 800c696:	e69e      	b.n	800c3d6 <_printf_float+0xbe>
 800c698:	2301      	movs	r3, #1
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	9205      	str	r2, [sp, #20]
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f43f ae97 	beq.w	800c3d6 <_printf_float+0xbe>
 800c6a8:	9a05      	ldr	r2, [sp, #20]
 800c6aa:	f10b 0b01 	add.w	fp, fp, #1
 800c6ae:	e7b9      	b.n	800c624 <_printf_float+0x30c>
 800c6b0:	ee18 3a10 	vmov	r3, s16
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d1be      	bne.n	800c63e <_printf_float+0x326>
 800c6c0:	e689      	b.n	800c3d6 <_printf_float+0xbe>
 800c6c2:	9a05      	ldr	r2, [sp, #20]
 800c6c4:	464b      	mov	r3, r9
 800c6c6:	4442      	add	r2, r8
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	d1c1      	bne.n	800c656 <_printf_float+0x33e>
 800c6d2:	e680      	b.n	800c3d6 <_printf_float+0xbe>
 800c6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6d6:	2a01      	cmp	r2, #1
 800c6d8:	dc01      	bgt.n	800c6de <_printf_float+0x3c6>
 800c6da:	07db      	lsls	r3, r3, #31
 800c6dc:	d53a      	bpl.n	800c754 <_printf_float+0x43c>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4642      	mov	r2, r8
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	47b8      	blx	r7
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	f43f ae74 	beq.w	800c3d6 <_printf_float+0xbe>
 800c6ee:	ee18 3a10 	vmov	r3, s16
 800c6f2:	4652      	mov	r2, sl
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	47b8      	blx	r7
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	f43f ae6b 	beq.w	800c3d6 <_printf_float+0xbe>
 800c700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c704:	2200      	movs	r2, #0
 800c706:	2300      	movs	r3, #0
 800c708:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c70c:	f7f4 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c710:	b9d8      	cbnz	r0, 800c74a <_printf_float+0x432>
 800c712:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c716:	f108 0201 	add.w	r2, r8, #1
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	d10e      	bne.n	800c742 <_printf_float+0x42a>
 800c724:	e657      	b.n	800c3d6 <_printf_float+0xbe>
 800c726:	2301      	movs	r3, #1
 800c728:	4652      	mov	r2, sl
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f ae50 	beq.w	800c3d6 <_printf_float+0xbe>
 800c736:	f108 0801 	add.w	r8, r8, #1
 800c73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4543      	cmp	r3, r8
 800c740:	dcf1      	bgt.n	800c726 <_printf_float+0x40e>
 800c742:	464b      	mov	r3, r9
 800c744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c748:	e6da      	b.n	800c500 <_printf_float+0x1e8>
 800c74a:	f04f 0800 	mov.w	r8, #0
 800c74e:	f104 0a1a 	add.w	sl, r4, #26
 800c752:	e7f2      	b.n	800c73a <_printf_float+0x422>
 800c754:	2301      	movs	r3, #1
 800c756:	4642      	mov	r2, r8
 800c758:	e7df      	b.n	800c71a <_printf_float+0x402>
 800c75a:	2301      	movs	r3, #1
 800c75c:	464a      	mov	r2, r9
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	f43f ae36 	beq.w	800c3d6 <_printf_float+0xbe>
 800c76a:	f108 0801 	add.w	r8, r8, #1
 800c76e:	68e3      	ldr	r3, [r4, #12]
 800c770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c772:	1a5b      	subs	r3, r3, r1
 800c774:	4543      	cmp	r3, r8
 800c776:	dcf0      	bgt.n	800c75a <_printf_float+0x442>
 800c778:	e6f8      	b.n	800c56c <_printf_float+0x254>
 800c77a:	f04f 0800 	mov.w	r8, #0
 800c77e:	f104 0919 	add.w	r9, r4, #25
 800c782:	e7f4      	b.n	800c76e <_printf_float+0x456>

0800c784 <_printf_common>:
 800c784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c788:	4616      	mov	r6, r2
 800c78a:	4699      	mov	r9, r3
 800c78c:	688a      	ldr	r2, [r1, #8]
 800c78e:	690b      	ldr	r3, [r1, #16]
 800c790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c794:	4293      	cmp	r3, r2
 800c796:	bfb8      	it	lt
 800c798:	4613      	movlt	r3, r2
 800c79a:	6033      	str	r3, [r6, #0]
 800c79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	b10a      	cbz	r2, 800c7aa <_printf_common+0x26>
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	6033      	str	r3, [r6, #0]
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	0699      	lsls	r1, r3, #26
 800c7ae:	bf42      	ittt	mi
 800c7b0:	6833      	ldrmi	r3, [r6, #0]
 800c7b2:	3302      	addmi	r3, #2
 800c7b4:	6033      	strmi	r3, [r6, #0]
 800c7b6:	6825      	ldr	r5, [r4, #0]
 800c7b8:	f015 0506 	ands.w	r5, r5, #6
 800c7bc:	d106      	bne.n	800c7cc <_printf_common+0x48>
 800c7be:	f104 0a19 	add.w	sl, r4, #25
 800c7c2:	68e3      	ldr	r3, [r4, #12]
 800c7c4:	6832      	ldr	r2, [r6, #0]
 800c7c6:	1a9b      	subs	r3, r3, r2
 800c7c8:	42ab      	cmp	r3, r5
 800c7ca:	dc26      	bgt.n	800c81a <_printf_common+0x96>
 800c7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7d0:	1e13      	subs	r3, r2, #0
 800c7d2:	6822      	ldr	r2, [r4, #0]
 800c7d4:	bf18      	it	ne
 800c7d6:	2301      	movne	r3, #1
 800c7d8:	0692      	lsls	r2, r2, #26
 800c7da:	d42b      	bmi.n	800c834 <_printf_common+0xb0>
 800c7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	47c0      	blx	r8
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	d01e      	beq.n	800c828 <_printf_common+0xa4>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	6922      	ldr	r2, [r4, #16]
 800c7ee:	f003 0306 	and.w	r3, r3, #6
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	bf02      	ittt	eq
 800c7f6:	68e5      	ldreq	r5, [r4, #12]
 800c7f8:	6833      	ldreq	r3, [r6, #0]
 800c7fa:	1aed      	subeq	r5, r5, r3
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	bf0c      	ite	eq
 800c800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c804:	2500      	movne	r5, #0
 800c806:	4293      	cmp	r3, r2
 800c808:	bfc4      	itt	gt
 800c80a:	1a9b      	subgt	r3, r3, r2
 800c80c:	18ed      	addgt	r5, r5, r3
 800c80e:	2600      	movs	r6, #0
 800c810:	341a      	adds	r4, #26
 800c812:	42b5      	cmp	r5, r6
 800c814:	d11a      	bne.n	800c84c <_printf_common+0xc8>
 800c816:	2000      	movs	r0, #0
 800c818:	e008      	b.n	800c82c <_printf_common+0xa8>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4652      	mov	r2, sl
 800c81e:	4649      	mov	r1, r9
 800c820:	4638      	mov	r0, r7
 800c822:	47c0      	blx	r8
 800c824:	3001      	adds	r0, #1
 800c826:	d103      	bne.n	800c830 <_printf_common+0xac>
 800c828:	f04f 30ff 	mov.w	r0, #4294967295
 800c82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c830:	3501      	adds	r5, #1
 800c832:	e7c6      	b.n	800c7c2 <_printf_common+0x3e>
 800c834:	18e1      	adds	r1, r4, r3
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	2030      	movs	r0, #48	; 0x30
 800c83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c83e:	4422      	add	r2, r4
 800c840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c848:	3302      	adds	r3, #2
 800c84a:	e7c7      	b.n	800c7dc <_printf_common+0x58>
 800c84c:	2301      	movs	r3, #1
 800c84e:	4622      	mov	r2, r4
 800c850:	4649      	mov	r1, r9
 800c852:	4638      	mov	r0, r7
 800c854:	47c0      	blx	r8
 800c856:	3001      	adds	r0, #1
 800c858:	d0e6      	beq.n	800c828 <_printf_common+0xa4>
 800c85a:	3601      	adds	r6, #1
 800c85c:	e7d9      	b.n	800c812 <_printf_common+0x8e>
	...

0800c860 <_printf_i>:
 800c860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c864:	7e0f      	ldrb	r7, [r1, #24]
 800c866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c868:	2f78      	cmp	r7, #120	; 0x78
 800c86a:	4691      	mov	r9, r2
 800c86c:	4680      	mov	r8, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	469a      	mov	sl, r3
 800c872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c876:	d807      	bhi.n	800c888 <_printf_i+0x28>
 800c878:	2f62      	cmp	r7, #98	; 0x62
 800c87a:	d80a      	bhi.n	800c892 <_printf_i+0x32>
 800c87c:	2f00      	cmp	r7, #0
 800c87e:	f000 80d4 	beq.w	800ca2a <_printf_i+0x1ca>
 800c882:	2f58      	cmp	r7, #88	; 0x58
 800c884:	f000 80c0 	beq.w	800ca08 <_printf_i+0x1a8>
 800c888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c890:	e03a      	b.n	800c908 <_printf_i+0xa8>
 800c892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c896:	2b15      	cmp	r3, #21
 800c898:	d8f6      	bhi.n	800c888 <_printf_i+0x28>
 800c89a:	a101      	add	r1, pc, #4	; (adr r1, 800c8a0 <_printf_i+0x40>)
 800c89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8a0:	0800c8f9 	.word	0x0800c8f9
 800c8a4:	0800c90d 	.word	0x0800c90d
 800c8a8:	0800c889 	.word	0x0800c889
 800c8ac:	0800c889 	.word	0x0800c889
 800c8b0:	0800c889 	.word	0x0800c889
 800c8b4:	0800c889 	.word	0x0800c889
 800c8b8:	0800c90d 	.word	0x0800c90d
 800c8bc:	0800c889 	.word	0x0800c889
 800c8c0:	0800c889 	.word	0x0800c889
 800c8c4:	0800c889 	.word	0x0800c889
 800c8c8:	0800c889 	.word	0x0800c889
 800c8cc:	0800ca11 	.word	0x0800ca11
 800c8d0:	0800c939 	.word	0x0800c939
 800c8d4:	0800c9cb 	.word	0x0800c9cb
 800c8d8:	0800c889 	.word	0x0800c889
 800c8dc:	0800c889 	.word	0x0800c889
 800c8e0:	0800ca33 	.word	0x0800ca33
 800c8e4:	0800c889 	.word	0x0800c889
 800c8e8:	0800c939 	.word	0x0800c939
 800c8ec:	0800c889 	.word	0x0800c889
 800c8f0:	0800c889 	.word	0x0800c889
 800c8f4:	0800c9d3 	.word	0x0800c9d3
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	1d1a      	adds	r2, r3, #4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	602a      	str	r2, [r5, #0]
 800c900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c908:	2301      	movs	r3, #1
 800c90a:	e09f      	b.n	800ca4c <_printf_i+0x1ec>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	682b      	ldr	r3, [r5, #0]
 800c910:	0607      	lsls	r7, r0, #24
 800c912:	f103 0104 	add.w	r1, r3, #4
 800c916:	6029      	str	r1, [r5, #0]
 800c918:	d501      	bpl.n	800c91e <_printf_i+0xbe>
 800c91a:	681e      	ldr	r6, [r3, #0]
 800c91c:	e003      	b.n	800c926 <_printf_i+0xc6>
 800c91e:	0646      	lsls	r6, r0, #25
 800c920:	d5fb      	bpl.n	800c91a <_printf_i+0xba>
 800c922:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c926:	2e00      	cmp	r6, #0
 800c928:	da03      	bge.n	800c932 <_printf_i+0xd2>
 800c92a:	232d      	movs	r3, #45	; 0x2d
 800c92c:	4276      	negs	r6, r6
 800c92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c932:	485a      	ldr	r0, [pc, #360]	; (800ca9c <_printf_i+0x23c>)
 800c934:	230a      	movs	r3, #10
 800c936:	e012      	b.n	800c95e <_printf_i+0xfe>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	6820      	ldr	r0, [r4, #0]
 800c93c:	1d19      	adds	r1, r3, #4
 800c93e:	6029      	str	r1, [r5, #0]
 800c940:	0605      	lsls	r5, r0, #24
 800c942:	d501      	bpl.n	800c948 <_printf_i+0xe8>
 800c944:	681e      	ldr	r6, [r3, #0]
 800c946:	e002      	b.n	800c94e <_printf_i+0xee>
 800c948:	0641      	lsls	r1, r0, #25
 800c94a:	d5fb      	bpl.n	800c944 <_printf_i+0xe4>
 800c94c:	881e      	ldrh	r6, [r3, #0]
 800c94e:	4853      	ldr	r0, [pc, #332]	; (800ca9c <_printf_i+0x23c>)
 800c950:	2f6f      	cmp	r7, #111	; 0x6f
 800c952:	bf0c      	ite	eq
 800c954:	2308      	moveq	r3, #8
 800c956:	230a      	movne	r3, #10
 800c958:	2100      	movs	r1, #0
 800c95a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c95e:	6865      	ldr	r5, [r4, #4]
 800c960:	60a5      	str	r5, [r4, #8]
 800c962:	2d00      	cmp	r5, #0
 800c964:	bfa2      	ittt	ge
 800c966:	6821      	ldrge	r1, [r4, #0]
 800c968:	f021 0104 	bicge.w	r1, r1, #4
 800c96c:	6021      	strge	r1, [r4, #0]
 800c96e:	b90e      	cbnz	r6, 800c974 <_printf_i+0x114>
 800c970:	2d00      	cmp	r5, #0
 800c972:	d04b      	beq.n	800ca0c <_printf_i+0x1ac>
 800c974:	4615      	mov	r5, r2
 800c976:	fbb6 f1f3 	udiv	r1, r6, r3
 800c97a:	fb03 6711 	mls	r7, r3, r1, r6
 800c97e:	5dc7      	ldrb	r7, [r0, r7]
 800c980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c984:	4637      	mov	r7, r6
 800c986:	42bb      	cmp	r3, r7
 800c988:	460e      	mov	r6, r1
 800c98a:	d9f4      	bls.n	800c976 <_printf_i+0x116>
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d10b      	bne.n	800c9a8 <_printf_i+0x148>
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	07de      	lsls	r6, r3, #31
 800c994:	d508      	bpl.n	800c9a8 <_printf_i+0x148>
 800c996:	6923      	ldr	r3, [r4, #16]
 800c998:	6861      	ldr	r1, [r4, #4]
 800c99a:	4299      	cmp	r1, r3
 800c99c:	bfde      	ittt	le
 800c99e:	2330      	movle	r3, #48	; 0x30
 800c9a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9a8:	1b52      	subs	r2, r2, r5
 800c9aa:	6122      	str	r2, [r4, #16]
 800c9ac:	f8cd a000 	str.w	sl, [sp]
 800c9b0:	464b      	mov	r3, r9
 800c9b2:	aa03      	add	r2, sp, #12
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	f7ff fee4 	bl	800c784 <_printf_common>
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d14a      	bne.n	800ca56 <_printf_i+0x1f6>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	b004      	add	sp, #16
 800c9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	f043 0320 	orr.w	r3, r3, #32
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	4833      	ldr	r0, [pc, #204]	; (800caa0 <_printf_i+0x240>)
 800c9d4:	2778      	movs	r7, #120	; 0x78
 800c9d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	6829      	ldr	r1, [r5, #0]
 800c9de:	061f      	lsls	r7, r3, #24
 800c9e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9e4:	d402      	bmi.n	800c9ec <_printf_i+0x18c>
 800c9e6:	065f      	lsls	r7, r3, #25
 800c9e8:	bf48      	it	mi
 800c9ea:	b2b6      	uxthmi	r6, r6
 800c9ec:	07df      	lsls	r7, r3, #31
 800c9ee:	bf48      	it	mi
 800c9f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9f4:	6029      	str	r1, [r5, #0]
 800c9f6:	bf48      	it	mi
 800c9f8:	6023      	strmi	r3, [r4, #0]
 800c9fa:	b91e      	cbnz	r6, 800ca04 <_printf_i+0x1a4>
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	f023 0320 	bic.w	r3, r3, #32
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	2310      	movs	r3, #16
 800ca06:	e7a7      	b.n	800c958 <_printf_i+0xf8>
 800ca08:	4824      	ldr	r0, [pc, #144]	; (800ca9c <_printf_i+0x23c>)
 800ca0a:	e7e4      	b.n	800c9d6 <_printf_i+0x176>
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	e7bd      	b.n	800c98c <_printf_i+0x12c>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	6826      	ldr	r6, [r4, #0]
 800ca14:	6961      	ldr	r1, [r4, #20]
 800ca16:	1d18      	adds	r0, r3, #4
 800ca18:	6028      	str	r0, [r5, #0]
 800ca1a:	0635      	lsls	r5, r6, #24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	d501      	bpl.n	800ca24 <_printf_i+0x1c4>
 800ca20:	6019      	str	r1, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <_printf_i+0x1ca>
 800ca24:	0670      	lsls	r0, r6, #25
 800ca26:	d5fb      	bpl.n	800ca20 <_printf_i+0x1c0>
 800ca28:	8019      	strh	r1, [r3, #0]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	4615      	mov	r5, r2
 800ca30:	e7bc      	b.n	800c9ac <_printf_i+0x14c>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	1d1a      	adds	r2, r3, #4
 800ca36:	602a      	str	r2, [r5, #0]
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	6862      	ldr	r2, [r4, #4]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f7f3 fbc6 	bl	80001d0 <memchr>
 800ca44:	b108      	cbz	r0, 800ca4a <_printf_i+0x1ea>
 800ca46:	1b40      	subs	r0, r0, r5
 800ca48:	6060      	str	r0, [r4, #4]
 800ca4a:	6863      	ldr	r3, [r4, #4]
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca54:	e7aa      	b.n	800c9ac <_printf_i+0x14c>
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	47d0      	blx	sl
 800ca60:	3001      	adds	r0, #1
 800ca62:	d0ad      	beq.n	800c9c0 <_printf_i+0x160>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	079b      	lsls	r3, r3, #30
 800ca68:	d413      	bmi.n	800ca92 <_printf_i+0x232>
 800ca6a:	68e0      	ldr	r0, [r4, #12]
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	4298      	cmp	r0, r3
 800ca70:	bfb8      	it	lt
 800ca72:	4618      	movlt	r0, r3
 800ca74:	e7a6      	b.n	800c9c4 <_printf_i+0x164>
 800ca76:	2301      	movs	r3, #1
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	47d0      	blx	sl
 800ca80:	3001      	adds	r0, #1
 800ca82:	d09d      	beq.n	800c9c0 <_printf_i+0x160>
 800ca84:	3501      	adds	r5, #1
 800ca86:	68e3      	ldr	r3, [r4, #12]
 800ca88:	9903      	ldr	r1, [sp, #12]
 800ca8a:	1a5b      	subs	r3, r3, r1
 800ca8c:	42ab      	cmp	r3, r5
 800ca8e:	dcf2      	bgt.n	800ca76 <_printf_i+0x216>
 800ca90:	e7eb      	b.n	800ca6a <_printf_i+0x20a>
 800ca92:	2500      	movs	r5, #0
 800ca94:	f104 0619 	add.w	r6, r4, #25
 800ca98:	e7f5      	b.n	800ca86 <_printf_i+0x226>
 800ca9a:	bf00      	nop
 800ca9c:	0800fb0a 	.word	0x0800fb0a
 800caa0:	0800fb1b 	.word	0x0800fb1b

0800caa4 <std>:
 800caa4:	2300      	movs	r3, #0
 800caa6:	b510      	push	{r4, lr}
 800caa8:	4604      	mov	r4, r0
 800caaa:	e9c0 3300 	strd	r3, r3, [r0]
 800caae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cab2:	6083      	str	r3, [r0, #8]
 800cab4:	8181      	strh	r1, [r0, #12]
 800cab6:	6643      	str	r3, [r0, #100]	; 0x64
 800cab8:	81c2      	strh	r2, [r0, #14]
 800caba:	6183      	str	r3, [r0, #24]
 800cabc:	4619      	mov	r1, r3
 800cabe:	2208      	movs	r2, #8
 800cac0:	305c      	adds	r0, #92	; 0x5c
 800cac2:	f000 f902 	bl	800ccca <memset>
 800cac6:	4b05      	ldr	r3, [pc, #20]	; (800cadc <std+0x38>)
 800cac8:	6263      	str	r3, [r4, #36]	; 0x24
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x3c>)
 800cacc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x40>)
 800cad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <std+0x44>)
 800cad4:	6224      	str	r4, [r4, #32]
 800cad6:	6323      	str	r3, [r4, #48]	; 0x30
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	bf00      	nop
 800cadc:	0800cc45 	.word	0x0800cc45
 800cae0:	0800cc67 	.word	0x0800cc67
 800cae4:	0800cc9f 	.word	0x0800cc9f
 800cae8:	0800ccc3 	.word	0x0800ccc3

0800caec <stdio_exit_handler>:
 800caec:	4a02      	ldr	r2, [pc, #8]	; (800caf8 <stdio_exit_handler+0xc>)
 800caee:	4903      	ldr	r1, [pc, #12]	; (800cafc <stdio_exit_handler+0x10>)
 800caf0:	4803      	ldr	r0, [pc, #12]	; (800cb00 <stdio_exit_handler+0x14>)
 800caf2:	f000 b869 	b.w	800cbc8 <_fwalk_sglue>
 800caf6:	bf00      	nop
 800caf8:	20000010 	.word	0x20000010
 800cafc:	0800f1c1 	.word	0x0800f1c1
 800cb00:	20000188 	.word	0x20000188

0800cb04 <cleanup_stdio>:
 800cb04:	6841      	ldr	r1, [r0, #4]
 800cb06:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <cleanup_stdio+0x34>)
 800cb08:	4299      	cmp	r1, r3
 800cb0a:	b510      	push	{r4, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	d001      	beq.n	800cb14 <cleanup_stdio+0x10>
 800cb10:	f002 fb56 	bl	800f1c0 <_fflush_r>
 800cb14:	68a1      	ldr	r1, [r4, #8]
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <cleanup_stdio+0x38>)
 800cb18:	4299      	cmp	r1, r3
 800cb1a:	d002      	beq.n	800cb22 <cleanup_stdio+0x1e>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f002 fb4f 	bl	800f1c0 <_fflush_r>
 800cb22:	68e1      	ldr	r1, [r4, #12]
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <cleanup_stdio+0x3c>)
 800cb26:	4299      	cmp	r1, r3
 800cb28:	d004      	beq.n	800cb34 <cleanup_stdio+0x30>
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb30:	f002 bb46 	b.w	800f1c0 <_fflush_r>
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	bf00      	nop
 800cb38:	2000303c 	.word	0x2000303c
 800cb3c:	200030a4 	.word	0x200030a4
 800cb40:	2000310c 	.word	0x2000310c

0800cb44 <global_stdio_init.part.0>:
 800cb44:	b510      	push	{r4, lr}
 800cb46:	4b0b      	ldr	r3, [pc, #44]	; (800cb74 <global_stdio_init.part.0+0x30>)
 800cb48:	4c0b      	ldr	r4, [pc, #44]	; (800cb78 <global_stdio_init.part.0+0x34>)
 800cb4a:	4a0c      	ldr	r2, [pc, #48]	; (800cb7c <global_stdio_init.part.0+0x38>)
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	2200      	movs	r2, #0
 800cb52:	2104      	movs	r1, #4
 800cb54:	f7ff ffa6 	bl	800caa4 <std>
 800cb58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	2109      	movs	r1, #9
 800cb60:	f7ff ffa0 	bl	800caa4 <std>
 800cb64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb68:	2202      	movs	r2, #2
 800cb6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb6e:	2112      	movs	r1, #18
 800cb70:	f7ff bf98 	b.w	800caa4 <std>
 800cb74:	20003174 	.word	0x20003174
 800cb78:	2000303c 	.word	0x2000303c
 800cb7c:	0800caed 	.word	0x0800caed

0800cb80 <__sfp_lock_acquire>:
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <__sfp_lock_acquire+0x8>)
 800cb82:	f000 b987 	b.w	800ce94 <__retarget_lock_acquire_recursive>
 800cb86:	bf00      	nop
 800cb88:	2000317d 	.word	0x2000317d

0800cb8c <__sfp_lock_release>:
 800cb8c:	4801      	ldr	r0, [pc, #4]	; (800cb94 <__sfp_lock_release+0x8>)
 800cb8e:	f000 b982 	b.w	800ce96 <__retarget_lock_release_recursive>
 800cb92:	bf00      	nop
 800cb94:	2000317d 	.word	0x2000317d

0800cb98 <__sinit>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	f7ff fff0 	bl	800cb80 <__sfp_lock_acquire>
 800cba0:	6a23      	ldr	r3, [r4, #32]
 800cba2:	b11b      	cbz	r3, 800cbac <__sinit+0x14>
 800cba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba8:	f7ff bff0 	b.w	800cb8c <__sfp_lock_release>
 800cbac:	4b04      	ldr	r3, [pc, #16]	; (800cbc0 <__sinit+0x28>)
 800cbae:	6223      	str	r3, [r4, #32]
 800cbb0:	4b04      	ldr	r3, [pc, #16]	; (800cbc4 <__sinit+0x2c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1f5      	bne.n	800cba4 <__sinit+0xc>
 800cbb8:	f7ff ffc4 	bl	800cb44 <global_stdio_init.part.0>
 800cbbc:	e7f2      	b.n	800cba4 <__sinit+0xc>
 800cbbe:	bf00      	nop
 800cbc0:	0800cb05 	.word	0x0800cb05
 800cbc4:	20003174 	.word	0x20003174

0800cbc8 <_fwalk_sglue>:
 800cbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	4607      	mov	r7, r0
 800cbce:	4688      	mov	r8, r1
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	2600      	movs	r6, #0
 800cbd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbd8:	f1b9 0901 	subs.w	r9, r9, #1
 800cbdc:	d505      	bpl.n	800cbea <_fwalk_sglue+0x22>
 800cbde:	6824      	ldr	r4, [r4, #0]
 800cbe0:	2c00      	cmp	r4, #0
 800cbe2:	d1f7      	bne.n	800cbd4 <_fwalk_sglue+0xc>
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbea:	89ab      	ldrh	r3, [r5, #12]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d907      	bls.n	800cc00 <_fwalk_sglue+0x38>
 800cbf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	d003      	beq.n	800cc00 <_fwalk_sglue+0x38>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	47c0      	blx	r8
 800cbfe:	4306      	orrs	r6, r0
 800cc00:	3568      	adds	r5, #104	; 0x68
 800cc02:	e7e9      	b.n	800cbd8 <_fwalk_sglue+0x10>

0800cc04 <siprintf>:
 800cc04:	b40e      	push	{r1, r2, r3}
 800cc06:	b500      	push	{lr}
 800cc08:	b09c      	sub	sp, #112	; 0x70
 800cc0a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc0c:	9002      	str	r0, [sp, #8]
 800cc0e:	9006      	str	r0, [sp, #24]
 800cc10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc14:	4809      	ldr	r0, [pc, #36]	; (800cc3c <siprintf+0x38>)
 800cc16:	9107      	str	r1, [sp, #28]
 800cc18:	9104      	str	r1, [sp, #16]
 800cc1a:	4909      	ldr	r1, [pc, #36]	; (800cc40 <siprintf+0x3c>)
 800cc1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc20:	9105      	str	r1, [sp, #20]
 800cc22:	6800      	ldr	r0, [r0, #0]
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	a902      	add	r1, sp, #8
 800cc28:	f002 f946 	bl	800eeb8 <_svfiprintf_r>
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	b01c      	add	sp, #112	; 0x70
 800cc34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc38:	b003      	add	sp, #12
 800cc3a:	4770      	bx	lr
 800cc3c:	200001d4 	.word	0x200001d4
 800cc40:	ffff0208 	.word	0xffff0208

0800cc44 <__sread>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	460c      	mov	r4, r1
 800cc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4c:	f000 f8d4 	bl	800cdf8 <_read_r>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	bfab      	itete	ge
 800cc54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc56:	89a3      	ldrhlt	r3, [r4, #12]
 800cc58:	181b      	addge	r3, r3, r0
 800cc5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc5e:	bfac      	ite	ge
 800cc60:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc62:	81a3      	strhlt	r3, [r4, #12]
 800cc64:	bd10      	pop	{r4, pc}

0800cc66 <__swrite>:
 800cc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6a:	461f      	mov	r7, r3
 800cc6c:	898b      	ldrh	r3, [r1, #12]
 800cc6e:	05db      	lsls	r3, r3, #23
 800cc70:	4605      	mov	r5, r0
 800cc72:	460c      	mov	r4, r1
 800cc74:	4616      	mov	r6, r2
 800cc76:	d505      	bpl.n	800cc84 <__swrite+0x1e>
 800cc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f000 f8a8 	bl	800cdd4 <_lseek_r>
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc8e:	81a3      	strh	r3, [r4, #12]
 800cc90:	4632      	mov	r2, r6
 800cc92:	463b      	mov	r3, r7
 800cc94:	4628      	mov	r0, r5
 800cc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	f000 b8bf 	b.w	800ce1c <_write_r>

0800cc9e <__sseek>:
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	460c      	mov	r4, r1
 800cca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca6:	f000 f895 	bl	800cdd4 <_lseek_r>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	bf15      	itete	ne
 800ccb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccba:	81a3      	strheq	r3, [r4, #12]
 800ccbc:	bf18      	it	ne
 800ccbe:	81a3      	strhne	r3, [r4, #12]
 800ccc0:	bd10      	pop	{r4, pc}

0800ccc2 <__sclose>:
 800ccc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc6:	f000 b81f 	b.w	800cd08 <_close_r>

0800ccca <memset>:
 800ccca:	4402      	add	r2, r0
 800cccc:	4603      	mov	r3, r0
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d100      	bne.n	800ccd4 <memset+0xa>
 800ccd2:	4770      	bx	lr
 800ccd4:	f803 1b01 	strb.w	r1, [r3], #1
 800ccd8:	e7f9      	b.n	800ccce <memset+0x4>

0800ccda <strncmp>:
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	b16a      	cbz	r2, 800ccfa <strncmp+0x20>
 800ccde:	3901      	subs	r1, #1
 800cce0:	1884      	adds	r4, r0, r2
 800cce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d103      	bne.n	800ccf6 <strncmp+0x1c>
 800ccee:	42a0      	cmp	r0, r4
 800ccf0:	d001      	beq.n	800ccf6 <strncmp+0x1c>
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d1f5      	bne.n	800cce2 <strncmp+0x8>
 800ccf6:	1ad0      	subs	r0, r2, r3
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	e7fc      	b.n	800ccf8 <strncmp+0x1e>
	...

0800cd00 <_localeconv_r>:
 800cd00:	4800      	ldr	r0, [pc, #0]	; (800cd04 <_localeconv_r+0x4>)
 800cd02:	4770      	bx	lr
 800cd04:	2000010c 	.word	0x2000010c

0800cd08 <_close_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d06      	ldr	r5, [pc, #24]	; (800cd24 <_close_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	602b      	str	r3, [r5, #0]
 800cd14:	f7f5 facb 	bl	80022ae <_close>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_close_r+0x1a>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_close_r+0x1a>
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	20003178 	.word	0x20003178

0800cd28 <_reclaim_reent>:
 800cd28:	4b29      	ldr	r3, [pc, #164]	; (800cdd0 <_reclaim_reent+0xa8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4283      	cmp	r3, r0
 800cd2e:	b570      	push	{r4, r5, r6, lr}
 800cd30:	4604      	mov	r4, r0
 800cd32:	d04b      	beq.n	800cdcc <_reclaim_reent+0xa4>
 800cd34:	69c3      	ldr	r3, [r0, #28]
 800cd36:	b143      	cbz	r3, 800cd4a <_reclaim_reent+0x22>
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d144      	bne.n	800cdc8 <_reclaim_reent+0xa0>
 800cd3e:	69e3      	ldr	r3, [r4, #28]
 800cd40:	6819      	ldr	r1, [r3, #0]
 800cd42:	b111      	cbz	r1, 800cd4a <_reclaim_reent+0x22>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f000 ff39 	bl	800dbbc <_free_r>
 800cd4a:	6961      	ldr	r1, [r4, #20]
 800cd4c:	b111      	cbz	r1, 800cd54 <_reclaim_reent+0x2c>
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 ff34 	bl	800dbbc <_free_r>
 800cd54:	69e1      	ldr	r1, [r4, #28]
 800cd56:	b111      	cbz	r1, 800cd5e <_reclaim_reent+0x36>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 ff2f 	bl	800dbbc <_free_r>
 800cd5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cd60:	b111      	cbz	r1, 800cd68 <_reclaim_reent+0x40>
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 ff2a 	bl	800dbbc <_free_r>
 800cd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd6a:	b111      	cbz	r1, 800cd72 <_reclaim_reent+0x4a>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 ff25 	bl	800dbbc <_free_r>
 800cd72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd74:	b111      	cbz	r1, 800cd7c <_reclaim_reent+0x54>
 800cd76:	4620      	mov	r0, r4
 800cd78:	f000 ff20 	bl	800dbbc <_free_r>
 800cd7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd7e:	b111      	cbz	r1, 800cd86 <_reclaim_reent+0x5e>
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 ff1b 	bl	800dbbc <_free_r>
 800cd86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cd88:	b111      	cbz	r1, 800cd90 <_reclaim_reent+0x68>
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 ff16 	bl	800dbbc <_free_r>
 800cd90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cd92:	b111      	cbz	r1, 800cd9a <_reclaim_reent+0x72>
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 ff11 	bl	800dbbc <_free_r>
 800cd9a:	6a23      	ldr	r3, [r4, #32]
 800cd9c:	b1b3      	cbz	r3, 800cdcc <_reclaim_reent+0xa4>
 800cd9e:	4620      	mov	r0, r4
 800cda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cda4:	4718      	bx	r3
 800cda6:	5949      	ldr	r1, [r1, r5]
 800cda8:	b941      	cbnz	r1, 800cdbc <_reclaim_reent+0x94>
 800cdaa:	3504      	adds	r5, #4
 800cdac:	69e3      	ldr	r3, [r4, #28]
 800cdae:	2d80      	cmp	r5, #128	; 0x80
 800cdb0:	68d9      	ldr	r1, [r3, #12]
 800cdb2:	d1f8      	bne.n	800cda6 <_reclaim_reent+0x7e>
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 ff01 	bl	800dbbc <_free_r>
 800cdba:	e7c0      	b.n	800cd3e <_reclaim_reent+0x16>
 800cdbc:	680e      	ldr	r6, [r1, #0]
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 fefc 	bl	800dbbc <_free_r>
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	e7ef      	b.n	800cda8 <_reclaim_reent+0x80>
 800cdc8:	2500      	movs	r5, #0
 800cdca:	e7ef      	b.n	800cdac <_reclaim_reent+0x84>
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	bf00      	nop
 800cdd0:	200001d4 	.word	0x200001d4

0800cdd4 <_lseek_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d07      	ldr	r5, [pc, #28]	; (800cdf4 <_lseek_r+0x20>)
 800cdd8:	4604      	mov	r4, r0
 800cdda:	4608      	mov	r0, r1
 800cddc:	4611      	mov	r1, r2
 800cdde:	2200      	movs	r2, #0
 800cde0:	602a      	str	r2, [r5, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	f7f5 fa8a 	bl	80022fc <_lseek>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_lseek_r+0x1e>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_lseek_r+0x1e>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	20003178 	.word	0x20003178

0800cdf8 <_read_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_read_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f5 fa18 	bl	800223c <_read>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_read_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_read_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20003178 	.word	0x20003178

0800ce1c <_write_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d07      	ldr	r5, [pc, #28]	; (800ce3c <_write_r+0x20>)
 800ce20:	4604      	mov	r4, r0
 800ce22:	4608      	mov	r0, r1
 800ce24:	4611      	mov	r1, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	602a      	str	r2, [r5, #0]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f7f5 fa23 	bl	8002276 <_write>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_write_r+0x1e>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_write_r+0x1e>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	20003178 	.word	0x20003178

0800ce40 <__errno>:
 800ce40:	4b01      	ldr	r3, [pc, #4]	; (800ce48 <__errno+0x8>)
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	200001d4 	.word	0x200001d4

0800ce4c <__libc_init_array>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4d0d      	ldr	r5, [pc, #52]	; (800ce84 <__libc_init_array+0x38>)
 800ce50:	4c0d      	ldr	r4, [pc, #52]	; (800ce88 <__libc_init_array+0x3c>)
 800ce52:	1b64      	subs	r4, r4, r5
 800ce54:	10a4      	asrs	r4, r4, #2
 800ce56:	2600      	movs	r6, #0
 800ce58:	42a6      	cmp	r6, r4
 800ce5a:	d109      	bne.n	800ce70 <__libc_init_array+0x24>
 800ce5c:	4d0b      	ldr	r5, [pc, #44]	; (800ce8c <__libc_init_array+0x40>)
 800ce5e:	4c0c      	ldr	r4, [pc, #48]	; (800ce90 <__libc_init_array+0x44>)
 800ce60:	f002 fd26 	bl	800f8b0 <_init>
 800ce64:	1b64      	subs	r4, r4, r5
 800ce66:	10a4      	asrs	r4, r4, #2
 800ce68:	2600      	movs	r6, #0
 800ce6a:	42a6      	cmp	r6, r4
 800ce6c:	d105      	bne.n	800ce7a <__libc_init_array+0x2e>
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
 800ce70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce74:	4798      	blx	r3
 800ce76:	3601      	adds	r6, #1
 800ce78:	e7ee      	b.n	800ce58 <__libc_init_array+0xc>
 800ce7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce7e:	4798      	blx	r3
 800ce80:	3601      	adds	r6, #1
 800ce82:	e7f2      	b.n	800ce6a <__libc_init_array+0x1e>
 800ce84:	0800fed4 	.word	0x0800fed4
 800ce88:	0800fed4 	.word	0x0800fed4
 800ce8c:	0800fed4 	.word	0x0800fed4
 800ce90:	0800fed8 	.word	0x0800fed8

0800ce94 <__retarget_lock_acquire_recursive>:
 800ce94:	4770      	bx	lr

0800ce96 <__retarget_lock_release_recursive>:
 800ce96:	4770      	bx	lr

0800ce98 <memcpy>:
 800ce98:	440a      	add	r2, r1
 800ce9a:	4291      	cmp	r1, r2
 800ce9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cea0:	d100      	bne.n	800cea4 <memcpy+0xc>
 800cea2:	4770      	bx	lr
 800cea4:	b510      	push	{r4, lr}
 800cea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceae:	4291      	cmp	r1, r2
 800ceb0:	d1f9      	bne.n	800cea6 <memcpy+0xe>
 800ceb2:	bd10      	pop	{r4, pc}
 800ceb4:	0000      	movs	r0, r0
	...

0800ceb8 <nan>:
 800ceb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cec0 <nan+0x8>
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	00000000 	.word	0x00000000
 800cec4:	7ff80000 	.word	0x7ff80000

0800cec8 <quorem>:
 800cec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	6903      	ldr	r3, [r0, #16]
 800cece:	690c      	ldr	r4, [r1, #16]
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	4607      	mov	r7, r0
 800ced4:	db7e      	blt.n	800cfd4 <quorem+0x10c>
 800ced6:	3c01      	subs	r4, #1
 800ced8:	f101 0814 	add.w	r8, r1, #20
 800cedc:	f100 0514 	add.w	r5, r0, #20
 800cee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ceea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ceee:	3301      	adds	r3, #1
 800cef0:	429a      	cmp	r2, r3
 800cef2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cefa:	fbb2 f6f3 	udiv	r6, r2, r3
 800cefe:	d331      	bcc.n	800cf64 <quorem+0x9c>
 800cf00:	f04f 0e00 	mov.w	lr, #0
 800cf04:	4640      	mov	r0, r8
 800cf06:	46ac      	mov	ip, r5
 800cf08:	46f2      	mov	sl, lr
 800cf0a:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf0e:	b293      	uxth	r3, r2
 800cf10:	fb06 e303 	mla	r3, r6, r3, lr
 800cf14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf18:	0c1a      	lsrs	r2, r3, #16
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	ebaa 0303 	sub.w	r3, sl, r3
 800cf20:	f8dc a000 	ldr.w	sl, [ip]
 800cf24:	fa13 f38a 	uxtah	r3, r3, sl
 800cf28:	fb06 220e 	mla	r2, r6, lr, r2
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	9b00      	ldr	r3, [sp, #0]
 800cf30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf34:	b292      	uxth	r2, r2
 800cf36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf3e:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf42:	4581      	cmp	r9, r0
 800cf44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf48:	f84c 3b04 	str.w	r3, [ip], #4
 800cf4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf50:	d2db      	bcs.n	800cf0a <quorem+0x42>
 800cf52:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf56:	b92b      	cbnz	r3, 800cf64 <quorem+0x9c>
 800cf58:	9b01      	ldr	r3, [sp, #4]
 800cf5a:	3b04      	subs	r3, #4
 800cf5c:	429d      	cmp	r5, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	d32c      	bcc.n	800cfbc <quorem+0xf4>
 800cf62:	613c      	str	r4, [r7, #16]
 800cf64:	4638      	mov	r0, r7
 800cf66:	f001 fd59 	bl	800ea1c <__mcmp>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	db22      	blt.n	800cfb4 <quorem+0xec>
 800cf6e:	3601      	adds	r6, #1
 800cf70:	4629      	mov	r1, r5
 800cf72:	2000      	movs	r0, #0
 800cf74:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf78:	f8d1 c000 	ldr.w	ip, [r1]
 800cf7c:	b293      	uxth	r3, r2
 800cf7e:	1ac3      	subs	r3, r0, r3
 800cf80:	0c12      	lsrs	r2, r2, #16
 800cf82:	fa13 f38c 	uxtah	r3, r3, ip
 800cf86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cf8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf94:	45c1      	cmp	r9, r8
 800cf96:	f841 3b04 	str.w	r3, [r1], #4
 800cf9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf9e:	d2e9      	bcs.n	800cf74 <quorem+0xac>
 800cfa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfa8:	b922      	cbnz	r2, 800cfb4 <quorem+0xec>
 800cfaa:	3b04      	subs	r3, #4
 800cfac:	429d      	cmp	r5, r3
 800cfae:	461a      	mov	r2, r3
 800cfb0:	d30a      	bcc.n	800cfc8 <quorem+0x100>
 800cfb2:	613c      	str	r4, [r7, #16]
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	b003      	add	sp, #12
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	6812      	ldr	r2, [r2, #0]
 800cfbe:	3b04      	subs	r3, #4
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d1ce      	bne.n	800cf62 <quorem+0x9a>
 800cfc4:	3c01      	subs	r4, #1
 800cfc6:	e7c9      	b.n	800cf5c <quorem+0x94>
 800cfc8:	6812      	ldr	r2, [r2, #0]
 800cfca:	3b04      	subs	r3, #4
 800cfcc:	2a00      	cmp	r2, #0
 800cfce:	d1f0      	bne.n	800cfb2 <quorem+0xea>
 800cfd0:	3c01      	subs	r4, #1
 800cfd2:	e7eb      	b.n	800cfac <quorem+0xe4>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7ee      	b.n	800cfb6 <quorem+0xee>

0800cfd8 <_dtoa_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	ed2d 8b04 	vpush	{d8-d9}
 800cfe0:	69c5      	ldr	r5, [r0, #28]
 800cfe2:	b093      	sub	sp, #76	; 0x4c
 800cfe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cfe8:	ec57 6b10 	vmov	r6, r7, d0
 800cfec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cff0:	9107      	str	r1, [sp, #28]
 800cff2:	4604      	mov	r4, r0
 800cff4:	920a      	str	r2, [sp, #40]	; 0x28
 800cff6:	930d      	str	r3, [sp, #52]	; 0x34
 800cff8:	b975      	cbnz	r5, 800d018 <_dtoa_r+0x40>
 800cffa:	2010      	movs	r0, #16
 800cffc:	f001 f982 	bl	800e304 <malloc>
 800d000:	4602      	mov	r2, r0
 800d002:	61e0      	str	r0, [r4, #28]
 800d004:	b920      	cbnz	r0, 800d010 <_dtoa_r+0x38>
 800d006:	4bae      	ldr	r3, [pc, #696]	; (800d2c0 <_dtoa_r+0x2e8>)
 800d008:	21ef      	movs	r1, #239	; 0xef
 800d00a:	48ae      	ldr	r0, [pc, #696]	; (800d2c4 <_dtoa_r+0x2ec>)
 800d00c:	f002 f92a 	bl	800f264 <__assert_func>
 800d010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d014:	6005      	str	r5, [r0, #0]
 800d016:	60c5      	str	r5, [r0, #12]
 800d018:	69e3      	ldr	r3, [r4, #28]
 800d01a:	6819      	ldr	r1, [r3, #0]
 800d01c:	b151      	cbz	r1, 800d034 <_dtoa_r+0x5c>
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	604a      	str	r2, [r1, #4]
 800d022:	2301      	movs	r3, #1
 800d024:	4093      	lsls	r3, r2
 800d026:	608b      	str	r3, [r1, #8]
 800d028:	4620      	mov	r0, r4
 800d02a:	f001 fa71 	bl	800e510 <_Bfree>
 800d02e:	69e3      	ldr	r3, [r4, #28]
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	1e3b      	subs	r3, r7, #0
 800d036:	bfbb      	ittet	lt
 800d038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d03c:	9303      	strlt	r3, [sp, #12]
 800d03e:	2300      	movge	r3, #0
 800d040:	2201      	movlt	r2, #1
 800d042:	bfac      	ite	ge
 800d044:	f8c8 3000 	strge.w	r3, [r8]
 800d048:	f8c8 2000 	strlt.w	r2, [r8]
 800d04c:	4b9e      	ldr	r3, [pc, #632]	; (800d2c8 <_dtoa_r+0x2f0>)
 800d04e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d052:	ea33 0308 	bics.w	r3, r3, r8
 800d056:	d11b      	bne.n	800d090 <_dtoa_r+0xb8>
 800d058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d05a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d064:	4333      	orrs	r3, r6
 800d066:	f000 8593 	beq.w	800db90 <_dtoa_r+0xbb8>
 800d06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d06c:	b963      	cbnz	r3, 800d088 <_dtoa_r+0xb0>
 800d06e:	4b97      	ldr	r3, [pc, #604]	; (800d2cc <_dtoa_r+0x2f4>)
 800d070:	e027      	b.n	800d0c2 <_dtoa_r+0xea>
 800d072:	4b97      	ldr	r3, [pc, #604]	; (800d2d0 <_dtoa_r+0x2f8>)
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	3308      	adds	r3, #8
 800d078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	9800      	ldr	r0, [sp, #0]
 800d07e:	b013      	add	sp, #76	; 0x4c
 800d080:	ecbd 8b04 	vpop	{d8-d9}
 800d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	4b90      	ldr	r3, [pc, #576]	; (800d2cc <_dtoa_r+0x2f4>)
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	3303      	adds	r3, #3
 800d08e:	e7f3      	b.n	800d078 <_dtoa_r+0xa0>
 800d090:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d094:	2200      	movs	r2, #0
 800d096:	ec51 0b17 	vmov	r0, r1, d7
 800d09a:	eeb0 8a47 	vmov.f32	s16, s14
 800d09e:	eef0 8a67 	vmov.f32	s17, s15
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f7f3 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0a8:	4681      	mov	r9, r0
 800d0aa:	b160      	cbz	r0, 800d0c6 <_dtoa_r+0xee>
 800d0ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8568 	beq.w	800db8a <_dtoa_r+0xbb2>
 800d0ba:	4b86      	ldr	r3, [pc, #536]	; (800d2d4 <_dtoa_r+0x2fc>)
 800d0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	e7da      	b.n	800d07c <_dtoa_r+0xa4>
 800d0c6:	aa10      	add	r2, sp, #64	; 0x40
 800d0c8:	a911      	add	r1, sp, #68	; 0x44
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d0d0:	eef0 0a68 	vmov.f32	s1, s17
 800d0d4:	f001 fdb8 	bl	800ec48 <__d2b>
 800d0d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d0dc:	4682      	mov	sl, r0
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	d07f      	beq.n	800d1e2 <_dtoa_r+0x20a>
 800d0e2:	ee18 3a90 	vmov	r3, s17
 800d0e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d0ee:	ec51 0b18 	vmov	r0, r1, d8
 800d0f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d0f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d0fe:	4619      	mov	r1, r3
 800d100:	2200      	movs	r2, #0
 800d102:	4b75      	ldr	r3, [pc, #468]	; (800d2d8 <_dtoa_r+0x300>)
 800d104:	f7f3 f8c0 	bl	8000288 <__aeabi_dsub>
 800d108:	a367      	add	r3, pc, #412	; (adr r3, 800d2a8 <_dtoa_r+0x2d0>)
 800d10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10e:	f7f3 fa73 	bl	80005f8 <__aeabi_dmul>
 800d112:	a367      	add	r3, pc, #412	; (adr r3, 800d2b0 <_dtoa_r+0x2d8>)
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	f7f3 f8b8 	bl	800028c <__adddf3>
 800d11c:	4606      	mov	r6, r0
 800d11e:	4628      	mov	r0, r5
 800d120:	460f      	mov	r7, r1
 800d122:	f7f3 f9ff 	bl	8000524 <__aeabi_i2d>
 800d126:	a364      	add	r3, pc, #400	; (adr r3, 800d2b8 <_dtoa_r+0x2e0>)
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 f8a8 	bl	800028c <__adddf3>
 800d13c:	4606      	mov	r6, r0
 800d13e:	460f      	mov	r7, r1
 800d140:	f7f3 fd0a 	bl	8000b58 <__aeabi_d2iz>
 800d144:	2200      	movs	r2, #0
 800d146:	4683      	mov	fp, r0
 800d148:	2300      	movs	r3, #0
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	f7f3 fcc5 	bl	8000adc <__aeabi_dcmplt>
 800d152:	b148      	cbz	r0, 800d168 <_dtoa_r+0x190>
 800d154:	4658      	mov	r0, fp
 800d156:	f7f3 f9e5 	bl	8000524 <__aeabi_i2d>
 800d15a:	4632      	mov	r2, r6
 800d15c:	463b      	mov	r3, r7
 800d15e:	f7f3 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d162:	b908      	cbnz	r0, 800d168 <_dtoa_r+0x190>
 800d164:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d168:	f1bb 0f16 	cmp.w	fp, #22
 800d16c:	d857      	bhi.n	800d21e <_dtoa_r+0x246>
 800d16e:	4b5b      	ldr	r3, [pc, #364]	; (800d2dc <_dtoa_r+0x304>)
 800d170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	ec51 0b18 	vmov	r0, r1, d8
 800d17c:	f7f3 fcae 	bl	8000adc <__aeabi_dcmplt>
 800d180:	2800      	cmp	r0, #0
 800d182:	d04e      	beq.n	800d222 <_dtoa_r+0x24a>
 800d184:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d188:	2300      	movs	r3, #0
 800d18a:	930c      	str	r3, [sp, #48]	; 0x30
 800d18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d18e:	1b5b      	subs	r3, r3, r5
 800d190:	1e5a      	subs	r2, r3, #1
 800d192:	bf45      	ittet	mi
 800d194:	f1c3 0301 	rsbmi	r3, r3, #1
 800d198:	9305      	strmi	r3, [sp, #20]
 800d19a:	2300      	movpl	r3, #0
 800d19c:	2300      	movmi	r3, #0
 800d19e:	9206      	str	r2, [sp, #24]
 800d1a0:	bf54      	ite	pl
 800d1a2:	9305      	strpl	r3, [sp, #20]
 800d1a4:	9306      	strmi	r3, [sp, #24]
 800d1a6:	f1bb 0f00 	cmp.w	fp, #0
 800d1aa:	db3c      	blt.n	800d226 <_dtoa_r+0x24e>
 800d1ac:	9b06      	ldr	r3, [sp, #24]
 800d1ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d1b2:	445b      	add	r3, fp
 800d1b4:	9306      	str	r3, [sp, #24]
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	9308      	str	r3, [sp, #32]
 800d1ba:	9b07      	ldr	r3, [sp, #28]
 800d1bc:	2b09      	cmp	r3, #9
 800d1be:	d868      	bhi.n	800d292 <_dtoa_r+0x2ba>
 800d1c0:	2b05      	cmp	r3, #5
 800d1c2:	bfc4      	itt	gt
 800d1c4:	3b04      	subgt	r3, #4
 800d1c6:	9307      	strgt	r3, [sp, #28]
 800d1c8:	9b07      	ldr	r3, [sp, #28]
 800d1ca:	f1a3 0302 	sub.w	r3, r3, #2
 800d1ce:	bfcc      	ite	gt
 800d1d0:	2500      	movgt	r5, #0
 800d1d2:	2501      	movle	r5, #1
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	f200 8085 	bhi.w	800d2e4 <_dtoa_r+0x30c>
 800d1da:	e8df f003 	tbb	[pc, r3]
 800d1de:	3b2e      	.short	0x3b2e
 800d1e0:	5839      	.short	0x5839
 800d1e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d1e6:	441d      	add	r5, r3
 800d1e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	bfc1      	itttt	gt
 800d1f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d1f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d1fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d200:	bfd6      	itet	le
 800d202:	f1c3 0320 	rsble	r3, r3, #32
 800d206:	ea48 0003 	orrgt.w	r0, r8, r3
 800d20a:	fa06 f003 	lslle.w	r0, r6, r3
 800d20e:	f7f3 f979 	bl	8000504 <__aeabi_ui2d>
 800d212:	2201      	movs	r2, #1
 800d214:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d218:	3d01      	subs	r5, #1
 800d21a:	920e      	str	r2, [sp, #56]	; 0x38
 800d21c:	e76f      	b.n	800d0fe <_dtoa_r+0x126>
 800d21e:	2301      	movs	r3, #1
 800d220:	e7b3      	b.n	800d18a <_dtoa_r+0x1b2>
 800d222:	900c      	str	r0, [sp, #48]	; 0x30
 800d224:	e7b2      	b.n	800d18c <_dtoa_r+0x1b4>
 800d226:	9b05      	ldr	r3, [sp, #20]
 800d228:	eba3 030b 	sub.w	r3, r3, fp
 800d22c:	9305      	str	r3, [sp, #20]
 800d22e:	f1cb 0300 	rsb	r3, fp, #0
 800d232:	9308      	str	r3, [sp, #32]
 800d234:	2300      	movs	r3, #0
 800d236:	930b      	str	r3, [sp, #44]	; 0x2c
 800d238:	e7bf      	b.n	800d1ba <_dtoa_r+0x1e2>
 800d23a:	2300      	movs	r3, #0
 800d23c:	9309      	str	r3, [sp, #36]	; 0x24
 800d23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	dc52      	bgt.n	800d2ea <_dtoa_r+0x312>
 800d244:	2301      	movs	r3, #1
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	461a      	mov	r2, r3
 800d24c:	920a      	str	r2, [sp, #40]	; 0x28
 800d24e:	e00b      	b.n	800d268 <_dtoa_r+0x290>
 800d250:	2301      	movs	r3, #1
 800d252:	e7f3      	b.n	800d23c <_dtoa_r+0x264>
 800d254:	2300      	movs	r3, #0
 800d256:	9309      	str	r3, [sp, #36]	; 0x24
 800d258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25a:	445b      	add	r3, fp
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	3301      	adds	r3, #1
 800d260:	2b01      	cmp	r3, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	bfb8      	it	lt
 800d266:	2301      	movlt	r3, #1
 800d268:	69e0      	ldr	r0, [r4, #28]
 800d26a:	2100      	movs	r1, #0
 800d26c:	2204      	movs	r2, #4
 800d26e:	f102 0614 	add.w	r6, r2, #20
 800d272:	429e      	cmp	r6, r3
 800d274:	d93d      	bls.n	800d2f2 <_dtoa_r+0x31a>
 800d276:	6041      	str	r1, [r0, #4]
 800d278:	4620      	mov	r0, r4
 800d27a:	f001 f909 	bl	800e490 <_Balloc>
 800d27e:	9000      	str	r0, [sp, #0]
 800d280:	2800      	cmp	r0, #0
 800d282:	d139      	bne.n	800d2f8 <_dtoa_r+0x320>
 800d284:	4b16      	ldr	r3, [pc, #88]	; (800d2e0 <_dtoa_r+0x308>)
 800d286:	4602      	mov	r2, r0
 800d288:	f240 11af 	movw	r1, #431	; 0x1af
 800d28c:	e6bd      	b.n	800d00a <_dtoa_r+0x32>
 800d28e:	2301      	movs	r3, #1
 800d290:	e7e1      	b.n	800d256 <_dtoa_r+0x27e>
 800d292:	2501      	movs	r5, #1
 800d294:	2300      	movs	r3, #0
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	9509      	str	r5, [sp, #36]	; 0x24
 800d29a:	f04f 33ff 	mov.w	r3, #4294967295
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	9304      	str	r3, [sp, #16]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2312      	movs	r3, #18
 800d2a6:	e7d1      	b.n	800d24c <_dtoa_r+0x274>
 800d2a8:	636f4361 	.word	0x636f4361
 800d2ac:	3fd287a7 	.word	0x3fd287a7
 800d2b0:	8b60c8b3 	.word	0x8b60c8b3
 800d2b4:	3fc68a28 	.word	0x3fc68a28
 800d2b8:	509f79fb 	.word	0x509f79fb
 800d2bc:	3fd34413 	.word	0x3fd34413
 800d2c0:	0800fb41 	.word	0x0800fb41
 800d2c4:	0800fb58 	.word	0x0800fb58
 800d2c8:	7ff00000 	.word	0x7ff00000
 800d2cc:	0800fb3d 	.word	0x0800fb3d
 800d2d0:	0800fb34 	.word	0x0800fb34
 800d2d4:	0800fb09 	.word	0x0800fb09
 800d2d8:	3ff80000 	.word	0x3ff80000
 800d2dc:	0800fca8 	.word	0x0800fca8
 800d2e0:	0800fbb0 	.word	0x0800fbb0
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e8:	e7d7      	b.n	800d29a <_dtoa_r+0x2c2>
 800d2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	e7ba      	b.n	800d268 <_dtoa_r+0x290>
 800d2f2:	3101      	adds	r1, #1
 800d2f4:	0052      	lsls	r2, r2, #1
 800d2f6:	e7ba      	b.n	800d26e <_dtoa_r+0x296>
 800d2f8:	69e3      	ldr	r3, [r4, #28]
 800d2fa:	9a00      	ldr	r2, [sp, #0]
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	2b0e      	cmp	r3, #14
 800d302:	f200 80a8 	bhi.w	800d456 <_dtoa_r+0x47e>
 800d306:	2d00      	cmp	r5, #0
 800d308:	f000 80a5 	beq.w	800d456 <_dtoa_r+0x47e>
 800d30c:	f1bb 0f00 	cmp.w	fp, #0
 800d310:	dd38      	ble.n	800d384 <_dtoa_r+0x3ac>
 800d312:	4bc0      	ldr	r3, [pc, #768]	; (800d614 <_dtoa_r+0x63c>)
 800d314:	f00b 020f 	and.w	r2, fp, #15
 800d318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d31c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d320:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d324:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d328:	d019      	beq.n	800d35e <_dtoa_r+0x386>
 800d32a:	4bbb      	ldr	r3, [pc, #748]	; (800d618 <_dtoa_r+0x640>)
 800d32c:	ec51 0b18 	vmov	r0, r1, d8
 800d330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d334:	f7f3 fa8a 	bl	800084c <__aeabi_ddiv>
 800d338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d33c:	f008 080f 	and.w	r8, r8, #15
 800d340:	2503      	movs	r5, #3
 800d342:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d618 <_dtoa_r+0x640>
 800d346:	f1b8 0f00 	cmp.w	r8, #0
 800d34a:	d10a      	bne.n	800d362 <_dtoa_r+0x38a>
 800d34c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d350:	4632      	mov	r2, r6
 800d352:	463b      	mov	r3, r7
 800d354:	f7f3 fa7a 	bl	800084c <__aeabi_ddiv>
 800d358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d35c:	e02b      	b.n	800d3b6 <_dtoa_r+0x3de>
 800d35e:	2502      	movs	r5, #2
 800d360:	e7ef      	b.n	800d342 <_dtoa_r+0x36a>
 800d362:	f018 0f01 	tst.w	r8, #1
 800d366:	d008      	beq.n	800d37a <_dtoa_r+0x3a2>
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	3501      	adds	r5, #1
 800d376:	4606      	mov	r6, r0
 800d378:	460f      	mov	r7, r1
 800d37a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d37e:	f109 0908 	add.w	r9, r9, #8
 800d382:	e7e0      	b.n	800d346 <_dtoa_r+0x36e>
 800d384:	f000 809f 	beq.w	800d4c6 <_dtoa_r+0x4ee>
 800d388:	f1cb 0600 	rsb	r6, fp, #0
 800d38c:	4ba1      	ldr	r3, [pc, #644]	; (800d614 <_dtoa_r+0x63c>)
 800d38e:	4fa2      	ldr	r7, [pc, #648]	; (800d618 <_dtoa_r+0x640>)
 800d390:	f006 020f 	and.w	r2, r6, #15
 800d394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	ec51 0b18 	vmov	r0, r1, d8
 800d3a0:	f7f3 f92a 	bl	80005f8 <__aeabi_dmul>
 800d3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3a8:	1136      	asrs	r6, r6, #4
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	2502      	movs	r5, #2
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	d17e      	bne.n	800d4b0 <_dtoa_r+0x4d8>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1d0      	bne.n	800d358 <_dtoa_r+0x380>
 800d3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 8084 	beq.w	800d4ca <_dtoa_r+0x4f2>
 800d3c2:	4b96      	ldr	r3, [pc, #600]	; (800d61c <_dtoa_r+0x644>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	f7f3 fb87 	bl	8000adc <__aeabi_dcmplt>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d07b      	beq.n	800d4ca <_dtoa_r+0x4f2>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d078      	beq.n	800d4ca <_dtoa_r+0x4f2>
 800d3d8:	9b01      	ldr	r3, [sp, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	dd39      	ble.n	800d452 <_dtoa_r+0x47a>
 800d3de:	4b90      	ldr	r3, [pc, #576]	; (800d620 <_dtoa_r+0x648>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	4649      	mov	r1, r9
 800d3e6:	f7f3 f907 	bl	80005f8 <__aeabi_dmul>
 800d3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ee:	9e01      	ldr	r6, [sp, #4]
 800d3f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3f4:	3501      	adds	r5, #1
 800d3f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7f3 f892 	bl	8000524 <__aeabi_i2d>
 800d400:	4642      	mov	r2, r8
 800d402:	464b      	mov	r3, r9
 800d404:	f7f3 f8f8 	bl	80005f8 <__aeabi_dmul>
 800d408:	4b86      	ldr	r3, [pc, #536]	; (800d624 <_dtoa_r+0x64c>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	f7f2 ff3e 	bl	800028c <__adddf3>
 800d410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d418:	9303      	str	r3, [sp, #12]
 800d41a:	2e00      	cmp	r6, #0
 800d41c:	d158      	bne.n	800d4d0 <_dtoa_r+0x4f8>
 800d41e:	4b82      	ldr	r3, [pc, #520]	; (800d628 <_dtoa_r+0x650>)
 800d420:	2200      	movs	r2, #0
 800d422:	4640      	mov	r0, r8
 800d424:	4649      	mov	r1, r9
 800d426:	f7f2 ff2f 	bl	8000288 <__aeabi_dsub>
 800d42a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d42e:	4680      	mov	r8, r0
 800d430:	4689      	mov	r9, r1
 800d432:	f7f3 fb71 	bl	8000b18 <__aeabi_dcmpgt>
 800d436:	2800      	cmp	r0, #0
 800d438:	f040 8296 	bne.w	800d968 <_dtoa_r+0x990>
 800d43c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d440:	4640      	mov	r0, r8
 800d442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 fb48 	bl	8000adc <__aeabi_dcmplt>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	f040 8289 	bne.w	800d964 <_dtoa_r+0x98c>
 800d452:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f2c0 814e 	blt.w	800d6fa <_dtoa_r+0x722>
 800d45e:	f1bb 0f0e 	cmp.w	fp, #14
 800d462:	f300 814a 	bgt.w	800d6fa <_dtoa_r+0x722>
 800d466:	4b6b      	ldr	r3, [pc, #428]	; (800d614 <_dtoa_r+0x63c>)
 800d468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d46c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d472:	2b00      	cmp	r3, #0
 800d474:	f280 80dc 	bge.w	800d630 <_dtoa_r+0x658>
 800d478:	9b04      	ldr	r3, [sp, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f300 80d8 	bgt.w	800d630 <_dtoa_r+0x658>
 800d480:	f040 826f 	bne.w	800d962 <_dtoa_r+0x98a>
 800d484:	4b68      	ldr	r3, [pc, #416]	; (800d628 <_dtoa_r+0x650>)
 800d486:	2200      	movs	r2, #0
 800d488:	4640      	mov	r0, r8
 800d48a:	4649      	mov	r1, r9
 800d48c:	f7f3 f8b4 	bl	80005f8 <__aeabi_dmul>
 800d490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d494:	f7f3 fb36 	bl	8000b04 <__aeabi_dcmpge>
 800d498:	9e04      	ldr	r6, [sp, #16]
 800d49a:	4637      	mov	r7, r6
 800d49c:	2800      	cmp	r0, #0
 800d49e:	f040 8245 	bne.w	800d92c <_dtoa_r+0x954>
 800d4a2:	9d00      	ldr	r5, [sp, #0]
 800d4a4:	2331      	movs	r3, #49	; 0x31
 800d4a6:	f805 3b01 	strb.w	r3, [r5], #1
 800d4aa:	f10b 0b01 	add.w	fp, fp, #1
 800d4ae:	e241      	b.n	800d934 <_dtoa_r+0x95c>
 800d4b0:	07f2      	lsls	r2, r6, #31
 800d4b2:	d505      	bpl.n	800d4c0 <_dtoa_r+0x4e8>
 800d4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b8:	f7f3 f89e 	bl	80005f8 <__aeabi_dmul>
 800d4bc:	3501      	adds	r5, #1
 800d4be:	2301      	movs	r3, #1
 800d4c0:	1076      	asrs	r6, r6, #1
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	e773      	b.n	800d3ae <_dtoa_r+0x3d6>
 800d4c6:	2502      	movs	r5, #2
 800d4c8:	e775      	b.n	800d3b6 <_dtoa_r+0x3de>
 800d4ca:	9e04      	ldr	r6, [sp, #16]
 800d4cc:	465f      	mov	r7, fp
 800d4ce:	e792      	b.n	800d3f6 <_dtoa_r+0x41e>
 800d4d0:	9900      	ldr	r1, [sp, #0]
 800d4d2:	4b50      	ldr	r3, [pc, #320]	; (800d614 <_dtoa_r+0x63c>)
 800d4d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4d8:	4431      	add	r1, r6
 800d4da:	9102      	str	r1, [sp, #8]
 800d4dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4de:	eeb0 9a47 	vmov.f32	s18, s14
 800d4e2:	eef0 9a67 	vmov.f32	s19, s15
 800d4e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	d044      	beq.n	800d57c <_dtoa_r+0x5a4>
 800d4f2:	494e      	ldr	r1, [pc, #312]	; (800d62c <_dtoa_r+0x654>)
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	f7f3 f9a9 	bl	800084c <__aeabi_ddiv>
 800d4fa:	ec53 2b19 	vmov	r2, r3, d9
 800d4fe:	f7f2 fec3 	bl	8000288 <__aeabi_dsub>
 800d502:	9d00      	ldr	r5, [sp, #0]
 800d504:	ec41 0b19 	vmov	d9, r0, r1
 800d508:	4649      	mov	r1, r9
 800d50a:	4640      	mov	r0, r8
 800d50c:	f7f3 fb24 	bl	8000b58 <__aeabi_d2iz>
 800d510:	4606      	mov	r6, r0
 800d512:	f7f3 f807 	bl	8000524 <__aeabi_i2d>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	4640      	mov	r0, r8
 800d51c:	4649      	mov	r1, r9
 800d51e:	f7f2 feb3 	bl	8000288 <__aeabi_dsub>
 800d522:	3630      	adds	r6, #48	; 0x30
 800d524:	f805 6b01 	strb.w	r6, [r5], #1
 800d528:	ec53 2b19 	vmov	r2, r3, d9
 800d52c:	4680      	mov	r8, r0
 800d52e:	4689      	mov	r9, r1
 800d530:	f7f3 fad4 	bl	8000adc <__aeabi_dcmplt>
 800d534:	2800      	cmp	r0, #0
 800d536:	d164      	bne.n	800d602 <_dtoa_r+0x62a>
 800d538:	4642      	mov	r2, r8
 800d53a:	464b      	mov	r3, r9
 800d53c:	4937      	ldr	r1, [pc, #220]	; (800d61c <_dtoa_r+0x644>)
 800d53e:	2000      	movs	r0, #0
 800d540:	f7f2 fea2 	bl	8000288 <__aeabi_dsub>
 800d544:	ec53 2b19 	vmov	r2, r3, d9
 800d548:	f7f3 fac8 	bl	8000adc <__aeabi_dcmplt>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f040 80b6 	bne.w	800d6be <_dtoa_r+0x6e6>
 800d552:	9b02      	ldr	r3, [sp, #8]
 800d554:	429d      	cmp	r5, r3
 800d556:	f43f af7c 	beq.w	800d452 <_dtoa_r+0x47a>
 800d55a:	4b31      	ldr	r3, [pc, #196]	; (800d620 <_dtoa_r+0x648>)
 800d55c:	ec51 0b19 	vmov	r0, r1, d9
 800d560:	2200      	movs	r2, #0
 800d562:	f7f3 f849 	bl	80005f8 <__aeabi_dmul>
 800d566:	4b2e      	ldr	r3, [pc, #184]	; (800d620 <_dtoa_r+0x648>)
 800d568:	ec41 0b19 	vmov	d9, r0, r1
 800d56c:	2200      	movs	r2, #0
 800d56e:	4640      	mov	r0, r8
 800d570:	4649      	mov	r1, r9
 800d572:	f7f3 f841 	bl	80005f8 <__aeabi_dmul>
 800d576:	4680      	mov	r8, r0
 800d578:	4689      	mov	r9, r1
 800d57a:	e7c5      	b.n	800d508 <_dtoa_r+0x530>
 800d57c:	ec51 0b17 	vmov	r0, r1, d7
 800d580:	f7f3 f83a 	bl	80005f8 <__aeabi_dmul>
 800d584:	9b02      	ldr	r3, [sp, #8]
 800d586:	9d00      	ldr	r5, [sp, #0]
 800d588:	930f      	str	r3, [sp, #60]	; 0x3c
 800d58a:	ec41 0b19 	vmov	d9, r0, r1
 800d58e:	4649      	mov	r1, r9
 800d590:	4640      	mov	r0, r8
 800d592:	f7f3 fae1 	bl	8000b58 <__aeabi_d2iz>
 800d596:	4606      	mov	r6, r0
 800d598:	f7f2 ffc4 	bl	8000524 <__aeabi_i2d>
 800d59c:	3630      	adds	r6, #48	; 0x30
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	4649      	mov	r1, r9
 800d5a6:	f7f2 fe6f 	bl	8000288 <__aeabi_dsub>
 800d5aa:	f805 6b01 	strb.w	r6, [r5], #1
 800d5ae:	9b02      	ldr	r3, [sp, #8]
 800d5b0:	429d      	cmp	r5, r3
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	4689      	mov	r9, r1
 800d5b6:	f04f 0200 	mov.w	r2, #0
 800d5ba:	d124      	bne.n	800d606 <_dtoa_r+0x62e>
 800d5bc:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <_dtoa_r+0x654>)
 800d5be:	ec51 0b19 	vmov	r0, r1, d9
 800d5c2:	f7f2 fe63 	bl	800028c <__adddf3>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4640      	mov	r0, r8
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	f7f3 faa3 	bl	8000b18 <__aeabi_dcmpgt>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d173      	bne.n	800d6be <_dtoa_r+0x6e6>
 800d5d6:	ec53 2b19 	vmov	r2, r3, d9
 800d5da:	4914      	ldr	r1, [pc, #80]	; (800d62c <_dtoa_r+0x654>)
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f7f2 fe53 	bl	8000288 <__aeabi_dsub>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f3 fa77 	bl	8000adc <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f43f af2f 	beq.w	800d452 <_dtoa_r+0x47a>
 800d5f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d5f6:	1e6b      	subs	r3, r5, #1
 800d5f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5fe:	2b30      	cmp	r3, #48	; 0x30
 800d600:	d0f8      	beq.n	800d5f4 <_dtoa_r+0x61c>
 800d602:	46bb      	mov	fp, r7
 800d604:	e04a      	b.n	800d69c <_dtoa_r+0x6c4>
 800d606:	4b06      	ldr	r3, [pc, #24]	; (800d620 <_dtoa_r+0x648>)
 800d608:	f7f2 fff6 	bl	80005f8 <__aeabi_dmul>
 800d60c:	4680      	mov	r8, r0
 800d60e:	4689      	mov	r9, r1
 800d610:	e7bd      	b.n	800d58e <_dtoa_r+0x5b6>
 800d612:	bf00      	nop
 800d614:	0800fca8 	.word	0x0800fca8
 800d618:	0800fc80 	.word	0x0800fc80
 800d61c:	3ff00000 	.word	0x3ff00000
 800d620:	40240000 	.word	0x40240000
 800d624:	401c0000 	.word	0x401c0000
 800d628:	40140000 	.word	0x40140000
 800d62c:	3fe00000 	.word	0x3fe00000
 800d630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d634:	9d00      	ldr	r5, [sp, #0]
 800d636:	4642      	mov	r2, r8
 800d638:	464b      	mov	r3, r9
 800d63a:	4630      	mov	r0, r6
 800d63c:	4639      	mov	r1, r7
 800d63e:	f7f3 f905 	bl	800084c <__aeabi_ddiv>
 800d642:	f7f3 fa89 	bl	8000b58 <__aeabi_d2iz>
 800d646:	9001      	str	r0, [sp, #4]
 800d648:	f7f2 ff6c 	bl	8000524 <__aeabi_i2d>
 800d64c:	4642      	mov	r2, r8
 800d64e:	464b      	mov	r3, r9
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f2 fe14 	bl	8000288 <__aeabi_dsub>
 800d660:	9e01      	ldr	r6, [sp, #4]
 800d662:	9f04      	ldr	r7, [sp, #16]
 800d664:	3630      	adds	r6, #48	; 0x30
 800d666:	f805 6b01 	strb.w	r6, [r5], #1
 800d66a:	9e00      	ldr	r6, [sp, #0]
 800d66c:	1bae      	subs	r6, r5, r6
 800d66e:	42b7      	cmp	r7, r6
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	d134      	bne.n	800d6e0 <_dtoa_r+0x708>
 800d676:	f7f2 fe09 	bl	800028c <__adddf3>
 800d67a:	4642      	mov	r2, r8
 800d67c:	464b      	mov	r3, r9
 800d67e:	4606      	mov	r6, r0
 800d680:	460f      	mov	r7, r1
 800d682:	f7f3 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800d686:	b9c8      	cbnz	r0, 800d6bc <_dtoa_r+0x6e4>
 800d688:	4642      	mov	r2, r8
 800d68a:	464b      	mov	r3, r9
 800d68c:	4630      	mov	r0, r6
 800d68e:	4639      	mov	r1, r7
 800d690:	f7f3 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d694:	b110      	cbz	r0, 800d69c <_dtoa_r+0x6c4>
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	07db      	lsls	r3, r3, #31
 800d69a:	d40f      	bmi.n	800d6bc <_dtoa_r+0x6e4>
 800d69c:	4651      	mov	r1, sl
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 ff36 	bl	800e510 <_Bfree>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6a8:	702b      	strb	r3, [r5, #0]
 800d6aa:	f10b 0301 	add.w	r3, fp, #1
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f43f ace2 	beq.w	800d07c <_dtoa_r+0xa4>
 800d6b8:	601d      	str	r5, [r3, #0]
 800d6ba:	e4df      	b.n	800d07c <_dtoa_r+0xa4>
 800d6bc:	465f      	mov	r7, fp
 800d6be:	462b      	mov	r3, r5
 800d6c0:	461d      	mov	r5, r3
 800d6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6c6:	2a39      	cmp	r2, #57	; 0x39
 800d6c8:	d106      	bne.n	800d6d8 <_dtoa_r+0x700>
 800d6ca:	9a00      	ldr	r2, [sp, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d1f7      	bne.n	800d6c0 <_dtoa_r+0x6e8>
 800d6d0:	9900      	ldr	r1, [sp, #0]
 800d6d2:	2230      	movs	r2, #48	; 0x30
 800d6d4:	3701      	adds	r7, #1
 800d6d6:	700a      	strb	r2, [r1, #0]
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	3201      	adds	r2, #1
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	e790      	b.n	800d602 <_dtoa_r+0x62a>
 800d6e0:	4ba3      	ldr	r3, [pc, #652]	; (800d970 <_dtoa_r+0x998>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f7f2 ff88 	bl	80005f8 <__aeabi_dmul>
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	460f      	mov	r7, r1
 800d6f0:	f7f3 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d09e      	beq.n	800d636 <_dtoa_r+0x65e>
 800d6f8:	e7d0      	b.n	800d69c <_dtoa_r+0x6c4>
 800d6fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	f000 80ca 	beq.w	800d896 <_dtoa_r+0x8be>
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	2a01      	cmp	r2, #1
 800d706:	f300 80ad 	bgt.w	800d864 <_dtoa_r+0x88c>
 800d70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	f000 80a5 	beq.w	800d85c <_dtoa_r+0x884>
 800d712:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d716:	9e08      	ldr	r6, [sp, #32]
 800d718:	9d05      	ldr	r5, [sp, #20]
 800d71a:	9a05      	ldr	r2, [sp, #20]
 800d71c:	441a      	add	r2, r3
 800d71e:	9205      	str	r2, [sp, #20]
 800d720:	9a06      	ldr	r2, [sp, #24]
 800d722:	2101      	movs	r1, #1
 800d724:	441a      	add	r2, r3
 800d726:	4620      	mov	r0, r4
 800d728:	9206      	str	r2, [sp, #24]
 800d72a:	f000 fff1 	bl	800e710 <__i2b>
 800d72e:	4607      	mov	r7, r0
 800d730:	b165      	cbz	r5, 800d74c <_dtoa_r+0x774>
 800d732:	9b06      	ldr	r3, [sp, #24]
 800d734:	2b00      	cmp	r3, #0
 800d736:	dd09      	ble.n	800d74c <_dtoa_r+0x774>
 800d738:	42ab      	cmp	r3, r5
 800d73a:	9a05      	ldr	r2, [sp, #20]
 800d73c:	bfa8      	it	ge
 800d73e:	462b      	movge	r3, r5
 800d740:	1ad2      	subs	r2, r2, r3
 800d742:	9205      	str	r2, [sp, #20]
 800d744:	9a06      	ldr	r2, [sp, #24]
 800d746:	1aed      	subs	r5, r5, r3
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	9306      	str	r3, [sp, #24]
 800d74c:	9b08      	ldr	r3, [sp, #32]
 800d74e:	b1f3      	cbz	r3, 800d78e <_dtoa_r+0x7b6>
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 80a3 	beq.w	800d89e <_dtoa_r+0x8c6>
 800d758:	2e00      	cmp	r6, #0
 800d75a:	dd10      	ble.n	800d77e <_dtoa_r+0x7a6>
 800d75c:	4639      	mov	r1, r7
 800d75e:	4632      	mov	r2, r6
 800d760:	4620      	mov	r0, r4
 800d762:	f001 f895 	bl	800e890 <__pow5mult>
 800d766:	4652      	mov	r2, sl
 800d768:	4601      	mov	r1, r0
 800d76a:	4607      	mov	r7, r0
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 ffe5 	bl	800e73c <__multiply>
 800d772:	4651      	mov	r1, sl
 800d774:	4680      	mov	r8, r0
 800d776:	4620      	mov	r0, r4
 800d778:	f000 feca 	bl	800e510 <_Bfree>
 800d77c:	46c2      	mov	sl, r8
 800d77e:	9b08      	ldr	r3, [sp, #32]
 800d780:	1b9a      	subs	r2, r3, r6
 800d782:	d004      	beq.n	800d78e <_dtoa_r+0x7b6>
 800d784:	4651      	mov	r1, sl
 800d786:	4620      	mov	r0, r4
 800d788:	f001 f882 	bl	800e890 <__pow5mult>
 800d78c:	4682      	mov	sl, r0
 800d78e:	2101      	movs	r1, #1
 800d790:	4620      	mov	r0, r4
 800d792:	f000 ffbd 	bl	800e710 <__i2b>
 800d796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	4606      	mov	r6, r0
 800d79c:	f340 8081 	ble.w	800d8a2 <_dtoa_r+0x8ca>
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f001 f873 	bl	800e890 <__pow5mult>
 800d7aa:	9b07      	ldr	r3, [sp, #28]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	dd7a      	ble.n	800d8a8 <_dtoa_r+0x8d0>
 800d7b2:	f04f 0800 	mov.w	r8, #0
 800d7b6:	6933      	ldr	r3, [r6, #16]
 800d7b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7bc:	6918      	ldr	r0, [r3, #16]
 800d7be:	f000 ff59 	bl	800e674 <__hi0bits>
 800d7c2:	f1c0 0020 	rsb	r0, r0, #32
 800d7c6:	9b06      	ldr	r3, [sp, #24]
 800d7c8:	4418      	add	r0, r3
 800d7ca:	f010 001f 	ands.w	r0, r0, #31
 800d7ce:	f000 8094 	beq.w	800d8fa <_dtoa_r+0x922>
 800d7d2:	f1c0 0320 	rsb	r3, r0, #32
 800d7d6:	2b04      	cmp	r3, #4
 800d7d8:	f340 8085 	ble.w	800d8e6 <_dtoa_r+0x90e>
 800d7dc:	9b05      	ldr	r3, [sp, #20]
 800d7de:	f1c0 001c 	rsb	r0, r0, #28
 800d7e2:	4403      	add	r3, r0
 800d7e4:	9305      	str	r3, [sp, #20]
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	4403      	add	r3, r0
 800d7ea:	4405      	add	r5, r0
 800d7ec:	9306      	str	r3, [sp, #24]
 800d7ee:	9b05      	ldr	r3, [sp, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	dd05      	ble.n	800d800 <_dtoa_r+0x828>
 800d7f4:	4651      	mov	r1, sl
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f001 f8a3 	bl	800e944 <__lshift>
 800d7fe:	4682      	mov	sl, r0
 800d800:	9b06      	ldr	r3, [sp, #24]
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd05      	ble.n	800d812 <_dtoa_r+0x83a>
 800d806:	4631      	mov	r1, r6
 800d808:	461a      	mov	r2, r3
 800d80a:	4620      	mov	r0, r4
 800d80c:	f001 f89a 	bl	800e944 <__lshift>
 800d810:	4606      	mov	r6, r0
 800d812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d814:	2b00      	cmp	r3, #0
 800d816:	d072      	beq.n	800d8fe <_dtoa_r+0x926>
 800d818:	4631      	mov	r1, r6
 800d81a:	4650      	mov	r0, sl
 800d81c:	f001 f8fe 	bl	800ea1c <__mcmp>
 800d820:	2800      	cmp	r0, #0
 800d822:	da6c      	bge.n	800d8fe <_dtoa_r+0x926>
 800d824:	2300      	movs	r3, #0
 800d826:	4651      	mov	r1, sl
 800d828:	220a      	movs	r2, #10
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 fe92 	bl	800e554 <__multadd>
 800d830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d832:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d836:	4682      	mov	sl, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 81b0 	beq.w	800db9e <_dtoa_r+0xbc6>
 800d83e:	2300      	movs	r3, #0
 800d840:	4639      	mov	r1, r7
 800d842:	220a      	movs	r2, #10
 800d844:	4620      	mov	r0, r4
 800d846:	f000 fe85 	bl	800e554 <__multadd>
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	4607      	mov	r7, r0
 800d850:	f300 8096 	bgt.w	800d980 <_dtoa_r+0x9a8>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	2b02      	cmp	r3, #2
 800d858:	dc59      	bgt.n	800d90e <_dtoa_r+0x936>
 800d85a:	e091      	b.n	800d980 <_dtoa_r+0x9a8>
 800d85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d85e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d862:	e758      	b.n	800d716 <_dtoa_r+0x73e>
 800d864:	9b04      	ldr	r3, [sp, #16]
 800d866:	1e5e      	subs	r6, r3, #1
 800d868:	9b08      	ldr	r3, [sp, #32]
 800d86a:	42b3      	cmp	r3, r6
 800d86c:	bfbf      	itttt	lt
 800d86e:	9b08      	ldrlt	r3, [sp, #32]
 800d870:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d872:	9608      	strlt	r6, [sp, #32]
 800d874:	1af3      	sublt	r3, r6, r3
 800d876:	bfb4      	ite	lt
 800d878:	18d2      	addlt	r2, r2, r3
 800d87a:	1b9e      	subge	r6, r3, r6
 800d87c:	9b04      	ldr	r3, [sp, #16]
 800d87e:	bfbc      	itt	lt
 800d880:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d882:	2600      	movlt	r6, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	bfb7      	itett	lt
 800d888:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d88c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d890:	1a9d      	sublt	r5, r3, r2
 800d892:	2300      	movlt	r3, #0
 800d894:	e741      	b.n	800d71a <_dtoa_r+0x742>
 800d896:	9e08      	ldr	r6, [sp, #32]
 800d898:	9d05      	ldr	r5, [sp, #20]
 800d89a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d89c:	e748      	b.n	800d730 <_dtoa_r+0x758>
 800d89e:	9a08      	ldr	r2, [sp, #32]
 800d8a0:	e770      	b.n	800d784 <_dtoa_r+0x7ac>
 800d8a2:	9b07      	ldr	r3, [sp, #28]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	dc19      	bgt.n	800d8dc <_dtoa_r+0x904>
 800d8a8:	9b02      	ldr	r3, [sp, #8]
 800d8aa:	b9bb      	cbnz	r3, 800d8dc <_dtoa_r+0x904>
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8b2:	b99b      	cbnz	r3, 800d8dc <_dtoa_r+0x904>
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8ba:	0d1b      	lsrs	r3, r3, #20
 800d8bc:	051b      	lsls	r3, r3, #20
 800d8be:	b183      	cbz	r3, 800d8e2 <_dtoa_r+0x90a>
 800d8c0:	9b05      	ldr	r3, [sp, #20]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	9305      	str	r3, [sp, #20]
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	9306      	str	r3, [sp, #24]
 800d8cc:	f04f 0801 	mov.w	r8, #1
 800d8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f47f af6f 	bne.w	800d7b6 <_dtoa_r+0x7de>
 800d8d8:	2001      	movs	r0, #1
 800d8da:	e774      	b.n	800d7c6 <_dtoa_r+0x7ee>
 800d8dc:	f04f 0800 	mov.w	r8, #0
 800d8e0:	e7f6      	b.n	800d8d0 <_dtoa_r+0x8f8>
 800d8e2:	4698      	mov	r8, r3
 800d8e4:	e7f4      	b.n	800d8d0 <_dtoa_r+0x8f8>
 800d8e6:	d082      	beq.n	800d7ee <_dtoa_r+0x816>
 800d8e8:	9a05      	ldr	r2, [sp, #20]
 800d8ea:	331c      	adds	r3, #28
 800d8ec:	441a      	add	r2, r3
 800d8ee:	9205      	str	r2, [sp, #20]
 800d8f0:	9a06      	ldr	r2, [sp, #24]
 800d8f2:	441a      	add	r2, r3
 800d8f4:	441d      	add	r5, r3
 800d8f6:	9206      	str	r2, [sp, #24]
 800d8f8:	e779      	b.n	800d7ee <_dtoa_r+0x816>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	e7f4      	b.n	800d8e8 <_dtoa_r+0x910>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	dc37      	bgt.n	800d974 <_dtoa_r+0x99c>
 800d904:	9b07      	ldr	r3, [sp, #28]
 800d906:	2b02      	cmp	r3, #2
 800d908:	dd34      	ble.n	800d974 <_dtoa_r+0x99c>
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	9b01      	ldr	r3, [sp, #4]
 800d910:	b963      	cbnz	r3, 800d92c <_dtoa_r+0x954>
 800d912:	4631      	mov	r1, r6
 800d914:	2205      	movs	r2, #5
 800d916:	4620      	mov	r0, r4
 800d918:	f000 fe1c 	bl	800e554 <__multadd>
 800d91c:	4601      	mov	r1, r0
 800d91e:	4606      	mov	r6, r0
 800d920:	4650      	mov	r0, sl
 800d922:	f001 f87b 	bl	800ea1c <__mcmp>
 800d926:	2800      	cmp	r0, #0
 800d928:	f73f adbb 	bgt.w	800d4a2 <_dtoa_r+0x4ca>
 800d92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d92e:	9d00      	ldr	r5, [sp, #0]
 800d930:	ea6f 0b03 	mvn.w	fp, r3
 800d934:	f04f 0800 	mov.w	r8, #0
 800d938:	4631      	mov	r1, r6
 800d93a:	4620      	mov	r0, r4
 800d93c:	f000 fde8 	bl	800e510 <_Bfree>
 800d940:	2f00      	cmp	r7, #0
 800d942:	f43f aeab 	beq.w	800d69c <_dtoa_r+0x6c4>
 800d946:	f1b8 0f00 	cmp.w	r8, #0
 800d94a:	d005      	beq.n	800d958 <_dtoa_r+0x980>
 800d94c:	45b8      	cmp	r8, r7
 800d94e:	d003      	beq.n	800d958 <_dtoa_r+0x980>
 800d950:	4641      	mov	r1, r8
 800d952:	4620      	mov	r0, r4
 800d954:	f000 fddc 	bl	800e510 <_Bfree>
 800d958:	4639      	mov	r1, r7
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 fdd8 	bl	800e510 <_Bfree>
 800d960:	e69c      	b.n	800d69c <_dtoa_r+0x6c4>
 800d962:	2600      	movs	r6, #0
 800d964:	4637      	mov	r7, r6
 800d966:	e7e1      	b.n	800d92c <_dtoa_r+0x954>
 800d968:	46bb      	mov	fp, r7
 800d96a:	4637      	mov	r7, r6
 800d96c:	e599      	b.n	800d4a2 <_dtoa_r+0x4ca>
 800d96e:	bf00      	nop
 800d970:	40240000 	.word	0x40240000
 800d974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d976:	2b00      	cmp	r3, #0
 800d978:	f000 80c8 	beq.w	800db0c <_dtoa_r+0xb34>
 800d97c:	9b04      	ldr	r3, [sp, #16]
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	2d00      	cmp	r5, #0
 800d982:	dd05      	ble.n	800d990 <_dtoa_r+0x9b8>
 800d984:	4639      	mov	r1, r7
 800d986:	462a      	mov	r2, r5
 800d988:	4620      	mov	r0, r4
 800d98a:	f000 ffdb 	bl	800e944 <__lshift>
 800d98e:	4607      	mov	r7, r0
 800d990:	f1b8 0f00 	cmp.w	r8, #0
 800d994:	d05b      	beq.n	800da4e <_dtoa_r+0xa76>
 800d996:	6879      	ldr	r1, [r7, #4]
 800d998:	4620      	mov	r0, r4
 800d99a:	f000 fd79 	bl	800e490 <_Balloc>
 800d99e:	4605      	mov	r5, r0
 800d9a0:	b928      	cbnz	r0, 800d9ae <_dtoa_r+0x9d6>
 800d9a2:	4b83      	ldr	r3, [pc, #524]	; (800dbb0 <_dtoa_r+0xbd8>)
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d9aa:	f7ff bb2e 	b.w	800d00a <_dtoa_r+0x32>
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	3202      	adds	r2, #2
 800d9b2:	0092      	lsls	r2, r2, #2
 800d9b4:	f107 010c 	add.w	r1, r7, #12
 800d9b8:	300c      	adds	r0, #12
 800d9ba:	f7ff fa6d 	bl	800ce98 <memcpy>
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f000 ffbe 	bl	800e944 <__lshift>
 800d9c8:	9b00      	ldr	r3, [sp, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	9308      	str	r3, [sp, #32]
 800d9d6:	9b02      	ldr	r3, [sp, #8]
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	46b8      	mov	r8, r7
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	4607      	mov	r7, r0
 800d9e2:	9b04      	ldr	r3, [sp, #16]
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	f7ff fa6c 	bl	800cec8 <quorem>
 800d9f0:	4641      	mov	r1, r8
 800d9f2:	9002      	str	r0, [sp, #8]
 800d9f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	f001 f80f 	bl	800ea1c <__mcmp>
 800d9fe:	463a      	mov	r2, r7
 800da00:	9005      	str	r0, [sp, #20]
 800da02:	4631      	mov	r1, r6
 800da04:	4620      	mov	r0, r4
 800da06:	f001 f825 	bl	800ea54 <__mdiff>
 800da0a:	68c2      	ldr	r2, [r0, #12]
 800da0c:	4605      	mov	r5, r0
 800da0e:	bb02      	cbnz	r2, 800da52 <_dtoa_r+0xa7a>
 800da10:	4601      	mov	r1, r0
 800da12:	4650      	mov	r0, sl
 800da14:	f001 f802 	bl	800ea1c <__mcmp>
 800da18:	4602      	mov	r2, r0
 800da1a:	4629      	mov	r1, r5
 800da1c:	4620      	mov	r0, r4
 800da1e:	9209      	str	r2, [sp, #36]	; 0x24
 800da20:	f000 fd76 	bl	800e510 <_Bfree>
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da28:	9d04      	ldr	r5, [sp, #16]
 800da2a:	ea43 0102 	orr.w	r1, r3, r2
 800da2e:	9b06      	ldr	r3, [sp, #24]
 800da30:	4319      	orrs	r1, r3
 800da32:	d110      	bne.n	800da56 <_dtoa_r+0xa7e>
 800da34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da38:	d029      	beq.n	800da8e <_dtoa_r+0xab6>
 800da3a:	9b05      	ldr	r3, [sp, #20]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dd02      	ble.n	800da46 <_dtoa_r+0xa6e>
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800da46:	9b01      	ldr	r3, [sp, #4]
 800da48:	f883 9000 	strb.w	r9, [r3]
 800da4c:	e774      	b.n	800d938 <_dtoa_r+0x960>
 800da4e:	4638      	mov	r0, r7
 800da50:	e7ba      	b.n	800d9c8 <_dtoa_r+0x9f0>
 800da52:	2201      	movs	r2, #1
 800da54:	e7e1      	b.n	800da1a <_dtoa_r+0xa42>
 800da56:	9b05      	ldr	r3, [sp, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	db04      	blt.n	800da66 <_dtoa_r+0xa8e>
 800da5c:	9907      	ldr	r1, [sp, #28]
 800da5e:	430b      	orrs	r3, r1
 800da60:	9906      	ldr	r1, [sp, #24]
 800da62:	430b      	orrs	r3, r1
 800da64:	d120      	bne.n	800daa8 <_dtoa_r+0xad0>
 800da66:	2a00      	cmp	r2, #0
 800da68:	dded      	ble.n	800da46 <_dtoa_r+0xa6e>
 800da6a:	4651      	mov	r1, sl
 800da6c:	2201      	movs	r2, #1
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 ff68 	bl	800e944 <__lshift>
 800da74:	4631      	mov	r1, r6
 800da76:	4682      	mov	sl, r0
 800da78:	f000 ffd0 	bl	800ea1c <__mcmp>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	dc03      	bgt.n	800da88 <_dtoa_r+0xab0>
 800da80:	d1e1      	bne.n	800da46 <_dtoa_r+0xa6e>
 800da82:	f019 0f01 	tst.w	r9, #1
 800da86:	d0de      	beq.n	800da46 <_dtoa_r+0xa6e>
 800da88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da8c:	d1d8      	bne.n	800da40 <_dtoa_r+0xa68>
 800da8e:	9a01      	ldr	r2, [sp, #4]
 800da90:	2339      	movs	r3, #57	; 0x39
 800da92:	7013      	strb	r3, [r2, #0]
 800da94:	462b      	mov	r3, r5
 800da96:	461d      	mov	r5, r3
 800da98:	3b01      	subs	r3, #1
 800da9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da9e:	2a39      	cmp	r2, #57	; 0x39
 800daa0:	d06c      	beq.n	800db7c <_dtoa_r+0xba4>
 800daa2:	3201      	adds	r2, #1
 800daa4:	701a      	strb	r2, [r3, #0]
 800daa6:	e747      	b.n	800d938 <_dtoa_r+0x960>
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	dd07      	ble.n	800dabc <_dtoa_r+0xae4>
 800daac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dab0:	d0ed      	beq.n	800da8e <_dtoa_r+0xab6>
 800dab2:	9a01      	ldr	r2, [sp, #4]
 800dab4:	f109 0301 	add.w	r3, r9, #1
 800dab8:	7013      	strb	r3, [r2, #0]
 800daba:	e73d      	b.n	800d938 <_dtoa_r+0x960>
 800dabc:	9b04      	ldr	r3, [sp, #16]
 800dabe:	9a08      	ldr	r2, [sp, #32]
 800dac0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d043      	beq.n	800db50 <_dtoa_r+0xb78>
 800dac8:	4651      	mov	r1, sl
 800daca:	2300      	movs	r3, #0
 800dacc:	220a      	movs	r2, #10
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 fd40 	bl	800e554 <__multadd>
 800dad4:	45b8      	cmp	r8, r7
 800dad6:	4682      	mov	sl, r0
 800dad8:	f04f 0300 	mov.w	r3, #0
 800dadc:	f04f 020a 	mov.w	r2, #10
 800dae0:	4641      	mov	r1, r8
 800dae2:	4620      	mov	r0, r4
 800dae4:	d107      	bne.n	800daf6 <_dtoa_r+0xb1e>
 800dae6:	f000 fd35 	bl	800e554 <__multadd>
 800daea:	4680      	mov	r8, r0
 800daec:	4607      	mov	r7, r0
 800daee:	9b04      	ldr	r3, [sp, #16]
 800daf0:	3301      	adds	r3, #1
 800daf2:	9304      	str	r3, [sp, #16]
 800daf4:	e775      	b.n	800d9e2 <_dtoa_r+0xa0a>
 800daf6:	f000 fd2d 	bl	800e554 <__multadd>
 800dafa:	4639      	mov	r1, r7
 800dafc:	4680      	mov	r8, r0
 800dafe:	2300      	movs	r3, #0
 800db00:	220a      	movs	r2, #10
 800db02:	4620      	mov	r0, r4
 800db04:	f000 fd26 	bl	800e554 <__multadd>
 800db08:	4607      	mov	r7, r0
 800db0a:	e7f0      	b.n	800daee <_dtoa_r+0xb16>
 800db0c:	9b04      	ldr	r3, [sp, #16]
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	9d00      	ldr	r5, [sp, #0]
 800db12:	4631      	mov	r1, r6
 800db14:	4650      	mov	r0, sl
 800db16:	f7ff f9d7 	bl	800cec8 <quorem>
 800db1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800db1e:	9b00      	ldr	r3, [sp, #0]
 800db20:	f805 9b01 	strb.w	r9, [r5], #1
 800db24:	1aea      	subs	r2, r5, r3
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	4293      	cmp	r3, r2
 800db2a:	dd07      	ble.n	800db3c <_dtoa_r+0xb64>
 800db2c:	4651      	mov	r1, sl
 800db2e:	2300      	movs	r3, #0
 800db30:	220a      	movs	r2, #10
 800db32:	4620      	mov	r0, r4
 800db34:	f000 fd0e 	bl	800e554 <__multadd>
 800db38:	4682      	mov	sl, r0
 800db3a:	e7ea      	b.n	800db12 <_dtoa_r+0xb3a>
 800db3c:	9b01      	ldr	r3, [sp, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	bfc8      	it	gt
 800db42:	461d      	movgt	r5, r3
 800db44:	9b00      	ldr	r3, [sp, #0]
 800db46:	bfd8      	it	le
 800db48:	2501      	movle	r5, #1
 800db4a:	441d      	add	r5, r3
 800db4c:	f04f 0800 	mov.w	r8, #0
 800db50:	4651      	mov	r1, sl
 800db52:	2201      	movs	r2, #1
 800db54:	4620      	mov	r0, r4
 800db56:	f000 fef5 	bl	800e944 <__lshift>
 800db5a:	4631      	mov	r1, r6
 800db5c:	4682      	mov	sl, r0
 800db5e:	f000 ff5d 	bl	800ea1c <__mcmp>
 800db62:	2800      	cmp	r0, #0
 800db64:	dc96      	bgt.n	800da94 <_dtoa_r+0xabc>
 800db66:	d102      	bne.n	800db6e <_dtoa_r+0xb96>
 800db68:	f019 0f01 	tst.w	r9, #1
 800db6c:	d192      	bne.n	800da94 <_dtoa_r+0xabc>
 800db6e:	462b      	mov	r3, r5
 800db70:	461d      	mov	r5, r3
 800db72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db76:	2a30      	cmp	r2, #48	; 0x30
 800db78:	d0fa      	beq.n	800db70 <_dtoa_r+0xb98>
 800db7a:	e6dd      	b.n	800d938 <_dtoa_r+0x960>
 800db7c:	9a00      	ldr	r2, [sp, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d189      	bne.n	800da96 <_dtoa_r+0xabe>
 800db82:	f10b 0b01 	add.w	fp, fp, #1
 800db86:	2331      	movs	r3, #49	; 0x31
 800db88:	e796      	b.n	800dab8 <_dtoa_r+0xae0>
 800db8a:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <_dtoa_r+0xbdc>)
 800db8c:	f7ff ba99 	b.w	800d0c2 <_dtoa_r+0xea>
 800db90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db92:	2b00      	cmp	r3, #0
 800db94:	f47f aa6d 	bne.w	800d072 <_dtoa_r+0x9a>
 800db98:	4b07      	ldr	r3, [pc, #28]	; (800dbb8 <_dtoa_r+0xbe0>)
 800db9a:	f7ff ba92 	b.w	800d0c2 <_dtoa_r+0xea>
 800db9e:	9b01      	ldr	r3, [sp, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dcb5      	bgt.n	800db10 <_dtoa_r+0xb38>
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	f73f aeb1 	bgt.w	800d90e <_dtoa_r+0x936>
 800dbac:	e7b0      	b.n	800db10 <_dtoa_r+0xb38>
 800dbae:	bf00      	nop
 800dbb0:	0800fbb0 	.word	0x0800fbb0
 800dbb4:	0800fb08 	.word	0x0800fb08
 800dbb8:	0800fb34 	.word	0x0800fb34

0800dbbc <_free_r>:
 800dbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	d044      	beq.n	800dc4c <_free_r+0x90>
 800dbc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc6:	9001      	str	r0, [sp, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f1a1 0404 	sub.w	r4, r1, #4
 800dbce:	bfb8      	it	lt
 800dbd0:	18e4      	addlt	r4, r4, r3
 800dbd2:	f000 fc51 	bl	800e478 <__malloc_lock>
 800dbd6:	4a1e      	ldr	r2, [pc, #120]	; (800dc50 <_free_r+0x94>)
 800dbd8:	9801      	ldr	r0, [sp, #4]
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	b933      	cbnz	r3, 800dbec <_free_r+0x30>
 800dbde:	6063      	str	r3, [r4, #4]
 800dbe0:	6014      	str	r4, [r2, #0]
 800dbe2:	b003      	add	sp, #12
 800dbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe8:	f000 bc4c 	b.w	800e484 <__malloc_unlock>
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d908      	bls.n	800dc02 <_free_r+0x46>
 800dbf0:	6825      	ldr	r5, [r4, #0]
 800dbf2:	1961      	adds	r1, r4, r5
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf01      	itttt	eq
 800dbf8:	6819      	ldreq	r1, [r3, #0]
 800dbfa:	685b      	ldreq	r3, [r3, #4]
 800dbfc:	1949      	addeq	r1, r1, r5
 800dbfe:	6021      	streq	r1, [r4, #0]
 800dc00:	e7ed      	b.n	800dbde <_free_r+0x22>
 800dc02:	461a      	mov	r2, r3
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	b10b      	cbz	r3, 800dc0c <_free_r+0x50>
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	d9fa      	bls.n	800dc02 <_free_r+0x46>
 800dc0c:	6811      	ldr	r1, [r2, #0]
 800dc0e:	1855      	adds	r5, r2, r1
 800dc10:	42a5      	cmp	r5, r4
 800dc12:	d10b      	bne.n	800dc2c <_free_r+0x70>
 800dc14:	6824      	ldr	r4, [r4, #0]
 800dc16:	4421      	add	r1, r4
 800dc18:	1854      	adds	r4, r2, r1
 800dc1a:	42a3      	cmp	r3, r4
 800dc1c:	6011      	str	r1, [r2, #0]
 800dc1e:	d1e0      	bne.n	800dbe2 <_free_r+0x26>
 800dc20:	681c      	ldr	r4, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	6053      	str	r3, [r2, #4]
 800dc26:	440c      	add	r4, r1
 800dc28:	6014      	str	r4, [r2, #0]
 800dc2a:	e7da      	b.n	800dbe2 <_free_r+0x26>
 800dc2c:	d902      	bls.n	800dc34 <_free_r+0x78>
 800dc2e:	230c      	movs	r3, #12
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	e7d6      	b.n	800dbe2 <_free_r+0x26>
 800dc34:	6825      	ldr	r5, [r4, #0]
 800dc36:	1961      	adds	r1, r4, r5
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	bf04      	itt	eq
 800dc3c:	6819      	ldreq	r1, [r3, #0]
 800dc3e:	685b      	ldreq	r3, [r3, #4]
 800dc40:	6063      	str	r3, [r4, #4]
 800dc42:	bf04      	itt	eq
 800dc44:	1949      	addeq	r1, r1, r5
 800dc46:	6021      	streq	r1, [r4, #0]
 800dc48:	6054      	str	r4, [r2, #4]
 800dc4a:	e7ca      	b.n	800dbe2 <_free_r+0x26>
 800dc4c:	b003      	add	sp, #12
 800dc4e:	bd30      	pop	{r4, r5, pc}
 800dc50:	20003180 	.word	0x20003180

0800dc54 <rshift>:
 800dc54:	6903      	ldr	r3, [r0, #16]
 800dc56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc62:	f100 0414 	add.w	r4, r0, #20
 800dc66:	dd45      	ble.n	800dcf4 <rshift+0xa0>
 800dc68:	f011 011f 	ands.w	r1, r1, #31
 800dc6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc74:	d10c      	bne.n	800dc90 <rshift+0x3c>
 800dc76:	f100 0710 	add.w	r7, r0, #16
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	42b1      	cmp	r1, r6
 800dc7e:	d334      	bcc.n	800dcea <rshift+0x96>
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	1eea      	subs	r2, r5, #3
 800dc86:	4296      	cmp	r6, r2
 800dc88:	bf38      	it	cc
 800dc8a:	2300      	movcc	r3, #0
 800dc8c:	4423      	add	r3, r4
 800dc8e:	e015      	b.n	800dcbc <rshift+0x68>
 800dc90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc94:	f1c1 0820 	rsb	r8, r1, #32
 800dc98:	40cf      	lsrs	r7, r1
 800dc9a:	f105 0e04 	add.w	lr, r5, #4
 800dc9e:	46a1      	mov	r9, r4
 800dca0:	4576      	cmp	r6, lr
 800dca2:	46f4      	mov	ip, lr
 800dca4:	d815      	bhi.n	800dcd2 <rshift+0x7e>
 800dca6:	1a9a      	subs	r2, r3, r2
 800dca8:	0092      	lsls	r2, r2, #2
 800dcaa:	3a04      	subs	r2, #4
 800dcac:	3501      	adds	r5, #1
 800dcae:	42ae      	cmp	r6, r5
 800dcb0:	bf38      	it	cc
 800dcb2:	2200      	movcc	r2, #0
 800dcb4:	18a3      	adds	r3, r4, r2
 800dcb6:	50a7      	str	r7, [r4, r2]
 800dcb8:	b107      	cbz	r7, 800dcbc <rshift+0x68>
 800dcba:	3304      	adds	r3, #4
 800dcbc:	1b1a      	subs	r2, r3, r4
 800dcbe:	42a3      	cmp	r3, r4
 800dcc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dcc4:	bf08      	it	eq
 800dcc6:	2300      	moveq	r3, #0
 800dcc8:	6102      	str	r2, [r0, #16]
 800dcca:	bf08      	it	eq
 800dccc:	6143      	streq	r3, [r0, #20]
 800dcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd2:	f8dc c000 	ldr.w	ip, [ip]
 800dcd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcda:	ea4c 0707 	orr.w	r7, ip, r7
 800dcde:	f849 7b04 	str.w	r7, [r9], #4
 800dce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dce6:	40cf      	lsrs	r7, r1
 800dce8:	e7da      	b.n	800dca0 <rshift+0x4c>
 800dcea:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcee:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcf2:	e7c3      	b.n	800dc7c <rshift+0x28>
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	e7e1      	b.n	800dcbc <rshift+0x68>

0800dcf8 <__hexdig_fun>:
 800dcf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d802      	bhi.n	800dd06 <__hexdig_fun+0xe>
 800dd00:	3820      	subs	r0, #32
 800dd02:	b2c0      	uxtb	r0, r0
 800dd04:	4770      	bx	lr
 800dd06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	d801      	bhi.n	800dd12 <__hexdig_fun+0x1a>
 800dd0e:	3847      	subs	r0, #71	; 0x47
 800dd10:	e7f7      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd16:	2b05      	cmp	r3, #5
 800dd18:	d801      	bhi.n	800dd1e <__hexdig_fun+0x26>
 800dd1a:	3827      	subs	r0, #39	; 0x27
 800dd1c:	e7f1      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4770      	bx	lr
	...

0800dd24 <__gethex>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	4617      	mov	r7, r2
 800dd2a:	680a      	ldr	r2, [r1, #0]
 800dd2c:	b085      	sub	sp, #20
 800dd2e:	f102 0b02 	add.w	fp, r2, #2
 800dd32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dd36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	468a      	mov	sl, r1
 800dd3e:	9302      	str	r3, [sp, #8]
 800dd40:	32fe      	adds	r2, #254	; 0xfe
 800dd42:	eb02 030b 	add.w	r3, r2, fp
 800dd46:	46d8      	mov	r8, fp
 800dd48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dd4c:	9301      	str	r3, [sp, #4]
 800dd4e:	2830      	cmp	r0, #48	; 0x30
 800dd50:	d0f7      	beq.n	800dd42 <__gethex+0x1e>
 800dd52:	f7ff ffd1 	bl	800dcf8 <__hexdig_fun>
 800dd56:	4604      	mov	r4, r0
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d138      	bne.n	800ddce <__gethex+0xaa>
 800dd5c:	49a7      	ldr	r1, [pc, #668]	; (800dffc <__gethex+0x2d8>)
 800dd5e:	2201      	movs	r2, #1
 800dd60:	4640      	mov	r0, r8
 800dd62:	f7fe ffba 	bl	800ccda <strncmp>
 800dd66:	4606      	mov	r6, r0
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d169      	bne.n	800de40 <__gethex+0x11c>
 800dd6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dd70:	465d      	mov	r5, fp
 800dd72:	f7ff ffc1 	bl	800dcf8 <__hexdig_fun>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d064      	beq.n	800de44 <__gethex+0x120>
 800dd7a:	465a      	mov	r2, fp
 800dd7c:	7810      	ldrb	r0, [r2, #0]
 800dd7e:	2830      	cmp	r0, #48	; 0x30
 800dd80:	4690      	mov	r8, r2
 800dd82:	f102 0201 	add.w	r2, r2, #1
 800dd86:	d0f9      	beq.n	800dd7c <__gethex+0x58>
 800dd88:	f7ff ffb6 	bl	800dcf8 <__hexdig_fun>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	fab0 f480 	clz	r4, r0
 800dd92:	0964      	lsrs	r4, r4, #5
 800dd94:	465e      	mov	r6, fp
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	4642      	mov	r2, r8
 800dd9a:	4615      	mov	r5, r2
 800dd9c:	3201      	adds	r2, #1
 800dd9e:	7828      	ldrb	r0, [r5, #0]
 800dda0:	f7ff ffaa 	bl	800dcf8 <__hexdig_fun>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d1f8      	bne.n	800dd9a <__gethex+0x76>
 800dda8:	4994      	ldr	r1, [pc, #592]	; (800dffc <__gethex+0x2d8>)
 800ddaa:	2201      	movs	r2, #1
 800ddac:	4628      	mov	r0, r5
 800ddae:	f7fe ff94 	bl	800ccda <strncmp>
 800ddb2:	b978      	cbnz	r0, 800ddd4 <__gethex+0xb0>
 800ddb4:	b946      	cbnz	r6, 800ddc8 <__gethex+0xa4>
 800ddb6:	1c6e      	adds	r6, r5, #1
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4615      	mov	r5, r2
 800ddbc:	3201      	adds	r2, #1
 800ddbe:	7828      	ldrb	r0, [r5, #0]
 800ddc0:	f7ff ff9a 	bl	800dcf8 <__hexdig_fun>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d1f8      	bne.n	800ddba <__gethex+0x96>
 800ddc8:	1b73      	subs	r3, r6, r5
 800ddca:	009e      	lsls	r6, r3, #2
 800ddcc:	e004      	b.n	800ddd8 <__gethex+0xb4>
 800ddce:	2400      	movs	r4, #0
 800ddd0:	4626      	mov	r6, r4
 800ddd2:	e7e1      	b.n	800dd98 <__gethex+0x74>
 800ddd4:	2e00      	cmp	r6, #0
 800ddd6:	d1f7      	bne.n	800ddc8 <__gethex+0xa4>
 800ddd8:	782b      	ldrb	r3, [r5, #0]
 800ddda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ddde:	2b50      	cmp	r3, #80	; 0x50
 800dde0:	d13d      	bne.n	800de5e <__gethex+0x13a>
 800dde2:	786b      	ldrb	r3, [r5, #1]
 800dde4:	2b2b      	cmp	r3, #43	; 0x2b
 800dde6:	d02f      	beq.n	800de48 <__gethex+0x124>
 800dde8:	2b2d      	cmp	r3, #45	; 0x2d
 800ddea:	d031      	beq.n	800de50 <__gethex+0x12c>
 800ddec:	1c69      	adds	r1, r5, #1
 800ddee:	f04f 0b00 	mov.w	fp, #0
 800ddf2:	7808      	ldrb	r0, [r1, #0]
 800ddf4:	f7ff ff80 	bl	800dcf8 <__hexdig_fun>
 800ddf8:	1e42      	subs	r2, r0, #1
 800ddfa:	b2d2      	uxtb	r2, r2
 800ddfc:	2a18      	cmp	r2, #24
 800ddfe:	d82e      	bhi.n	800de5e <__gethex+0x13a>
 800de00:	f1a0 0210 	sub.w	r2, r0, #16
 800de04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de08:	f7ff ff76 	bl	800dcf8 <__hexdig_fun>
 800de0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800de10:	fa5f fc8c 	uxtb.w	ip, ip
 800de14:	f1bc 0f18 	cmp.w	ip, #24
 800de18:	d91d      	bls.n	800de56 <__gethex+0x132>
 800de1a:	f1bb 0f00 	cmp.w	fp, #0
 800de1e:	d000      	beq.n	800de22 <__gethex+0xfe>
 800de20:	4252      	negs	r2, r2
 800de22:	4416      	add	r6, r2
 800de24:	f8ca 1000 	str.w	r1, [sl]
 800de28:	b1dc      	cbz	r4, 800de62 <__gethex+0x13e>
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	bf14      	ite	ne
 800de30:	f04f 0800 	movne.w	r8, #0
 800de34:	f04f 0806 	moveq.w	r8, #6
 800de38:	4640      	mov	r0, r8
 800de3a:	b005      	add	sp, #20
 800de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de40:	4645      	mov	r5, r8
 800de42:	4626      	mov	r6, r4
 800de44:	2401      	movs	r4, #1
 800de46:	e7c7      	b.n	800ddd8 <__gethex+0xb4>
 800de48:	f04f 0b00 	mov.w	fp, #0
 800de4c:	1ca9      	adds	r1, r5, #2
 800de4e:	e7d0      	b.n	800ddf2 <__gethex+0xce>
 800de50:	f04f 0b01 	mov.w	fp, #1
 800de54:	e7fa      	b.n	800de4c <__gethex+0x128>
 800de56:	230a      	movs	r3, #10
 800de58:	fb03 0002 	mla	r0, r3, r2, r0
 800de5c:	e7d0      	b.n	800de00 <__gethex+0xdc>
 800de5e:	4629      	mov	r1, r5
 800de60:	e7e0      	b.n	800de24 <__gethex+0x100>
 800de62:	eba5 0308 	sub.w	r3, r5, r8
 800de66:	3b01      	subs	r3, #1
 800de68:	4621      	mov	r1, r4
 800de6a:	2b07      	cmp	r3, #7
 800de6c:	dc0a      	bgt.n	800de84 <__gethex+0x160>
 800de6e:	4648      	mov	r0, r9
 800de70:	f000 fb0e 	bl	800e490 <_Balloc>
 800de74:	4604      	mov	r4, r0
 800de76:	b940      	cbnz	r0, 800de8a <__gethex+0x166>
 800de78:	4b61      	ldr	r3, [pc, #388]	; (800e000 <__gethex+0x2dc>)
 800de7a:	4602      	mov	r2, r0
 800de7c:	21e4      	movs	r1, #228	; 0xe4
 800de7e:	4861      	ldr	r0, [pc, #388]	; (800e004 <__gethex+0x2e0>)
 800de80:	f001 f9f0 	bl	800f264 <__assert_func>
 800de84:	3101      	adds	r1, #1
 800de86:	105b      	asrs	r3, r3, #1
 800de88:	e7ef      	b.n	800de6a <__gethex+0x146>
 800de8a:	f100 0a14 	add.w	sl, r0, #20
 800de8e:	2300      	movs	r3, #0
 800de90:	495a      	ldr	r1, [pc, #360]	; (800dffc <__gethex+0x2d8>)
 800de92:	f8cd a004 	str.w	sl, [sp, #4]
 800de96:	469b      	mov	fp, r3
 800de98:	45a8      	cmp	r8, r5
 800de9a:	d342      	bcc.n	800df22 <__gethex+0x1fe>
 800de9c:	9801      	ldr	r0, [sp, #4]
 800de9e:	f840 bb04 	str.w	fp, [r0], #4
 800dea2:	eba0 000a 	sub.w	r0, r0, sl
 800dea6:	1080      	asrs	r0, r0, #2
 800dea8:	6120      	str	r0, [r4, #16]
 800deaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800deae:	4658      	mov	r0, fp
 800deb0:	f000 fbe0 	bl	800e674 <__hi0bits>
 800deb4:	683d      	ldr	r5, [r7, #0]
 800deb6:	eba8 0000 	sub.w	r0, r8, r0
 800deba:	42a8      	cmp	r0, r5
 800debc:	dd59      	ble.n	800df72 <__gethex+0x24e>
 800debe:	eba0 0805 	sub.w	r8, r0, r5
 800dec2:	4641      	mov	r1, r8
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 ff6f 	bl	800eda8 <__any_on>
 800deca:	4683      	mov	fp, r0
 800decc:	b1b8      	cbz	r0, 800defe <__gethex+0x1da>
 800dece:	f108 33ff 	add.w	r3, r8, #4294967295
 800ded2:	1159      	asrs	r1, r3, #5
 800ded4:	f003 021f 	and.w	r2, r3, #31
 800ded8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dedc:	f04f 0b01 	mov.w	fp, #1
 800dee0:	fa0b f202 	lsl.w	r2, fp, r2
 800dee4:	420a      	tst	r2, r1
 800dee6:	d00a      	beq.n	800defe <__gethex+0x1da>
 800dee8:	455b      	cmp	r3, fp
 800deea:	dd06      	ble.n	800defa <__gethex+0x1d6>
 800deec:	f1a8 0102 	sub.w	r1, r8, #2
 800def0:	4620      	mov	r0, r4
 800def2:	f000 ff59 	bl	800eda8 <__any_on>
 800def6:	2800      	cmp	r0, #0
 800def8:	d138      	bne.n	800df6c <__gethex+0x248>
 800defa:	f04f 0b02 	mov.w	fp, #2
 800defe:	4641      	mov	r1, r8
 800df00:	4620      	mov	r0, r4
 800df02:	f7ff fea7 	bl	800dc54 <rshift>
 800df06:	4446      	add	r6, r8
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	42b3      	cmp	r3, r6
 800df0c:	da41      	bge.n	800df92 <__gethex+0x26e>
 800df0e:	4621      	mov	r1, r4
 800df10:	4648      	mov	r0, r9
 800df12:	f000 fafd 	bl	800e510 <_Bfree>
 800df16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df18:	2300      	movs	r3, #0
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800df20:	e78a      	b.n	800de38 <__gethex+0x114>
 800df22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800df26:	2a2e      	cmp	r2, #46	; 0x2e
 800df28:	d014      	beq.n	800df54 <__gethex+0x230>
 800df2a:	2b20      	cmp	r3, #32
 800df2c:	d106      	bne.n	800df3c <__gethex+0x218>
 800df2e:	9b01      	ldr	r3, [sp, #4]
 800df30:	f843 bb04 	str.w	fp, [r3], #4
 800df34:	f04f 0b00 	mov.w	fp, #0
 800df38:	9301      	str	r3, [sp, #4]
 800df3a:	465b      	mov	r3, fp
 800df3c:	7828      	ldrb	r0, [r5, #0]
 800df3e:	9303      	str	r3, [sp, #12]
 800df40:	f7ff feda 	bl	800dcf8 <__hexdig_fun>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	f000 000f 	and.w	r0, r0, #15
 800df4a:	4098      	lsls	r0, r3
 800df4c:	ea4b 0b00 	orr.w	fp, fp, r0
 800df50:	3304      	adds	r3, #4
 800df52:	e7a1      	b.n	800de98 <__gethex+0x174>
 800df54:	45a8      	cmp	r8, r5
 800df56:	d8e8      	bhi.n	800df2a <__gethex+0x206>
 800df58:	2201      	movs	r2, #1
 800df5a:	4628      	mov	r0, r5
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	f7fe febc 	bl	800ccda <strncmp>
 800df62:	4926      	ldr	r1, [pc, #152]	; (800dffc <__gethex+0x2d8>)
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	2800      	cmp	r0, #0
 800df68:	d1df      	bne.n	800df2a <__gethex+0x206>
 800df6a:	e795      	b.n	800de98 <__gethex+0x174>
 800df6c:	f04f 0b03 	mov.w	fp, #3
 800df70:	e7c5      	b.n	800defe <__gethex+0x1da>
 800df72:	da0b      	bge.n	800df8c <__gethex+0x268>
 800df74:	eba5 0800 	sub.w	r8, r5, r0
 800df78:	4621      	mov	r1, r4
 800df7a:	4642      	mov	r2, r8
 800df7c:	4648      	mov	r0, r9
 800df7e:	f000 fce1 	bl	800e944 <__lshift>
 800df82:	eba6 0608 	sub.w	r6, r6, r8
 800df86:	4604      	mov	r4, r0
 800df88:	f100 0a14 	add.w	sl, r0, #20
 800df8c:	f04f 0b00 	mov.w	fp, #0
 800df90:	e7ba      	b.n	800df08 <__gethex+0x1e4>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	42b3      	cmp	r3, r6
 800df96:	dd73      	ble.n	800e080 <__gethex+0x35c>
 800df98:	1b9e      	subs	r6, r3, r6
 800df9a:	42b5      	cmp	r5, r6
 800df9c:	dc34      	bgt.n	800e008 <__gethex+0x2e4>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d023      	beq.n	800dfec <__gethex+0x2c8>
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d025      	beq.n	800dff4 <__gethex+0x2d0>
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d115      	bne.n	800dfd8 <__gethex+0x2b4>
 800dfac:	42b5      	cmp	r5, r6
 800dfae:	d113      	bne.n	800dfd8 <__gethex+0x2b4>
 800dfb0:	2d01      	cmp	r5, #1
 800dfb2:	d10b      	bne.n	800dfcc <__gethex+0x2a8>
 800dfb4:	9a02      	ldr	r2, [sp, #8]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	2301      	movs	r3, #1
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	f8ca 3000 	str.w	r3, [sl]
 800dfc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dfc8:	601c      	str	r4, [r3, #0]
 800dfca:	e735      	b.n	800de38 <__gethex+0x114>
 800dfcc:	1e69      	subs	r1, r5, #1
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 feea 	bl	800eda8 <__any_on>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d1ed      	bne.n	800dfb4 <__gethex+0x290>
 800dfd8:	4621      	mov	r1, r4
 800dfda:	4648      	mov	r0, r9
 800dfdc:	f000 fa98 	bl	800e510 <_Bfree>
 800dfe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dfea:	e725      	b.n	800de38 <__gethex+0x114>
 800dfec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f2      	bne.n	800dfd8 <__gethex+0x2b4>
 800dff2:	e7df      	b.n	800dfb4 <__gethex+0x290>
 800dff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1dc      	bne.n	800dfb4 <__gethex+0x290>
 800dffa:	e7ed      	b.n	800dfd8 <__gethex+0x2b4>
 800dffc:	0800faa0 	.word	0x0800faa0
 800e000:	0800fbb0 	.word	0x0800fbb0
 800e004:	0800fbc1 	.word	0x0800fbc1
 800e008:	f106 38ff 	add.w	r8, r6, #4294967295
 800e00c:	f1bb 0f00 	cmp.w	fp, #0
 800e010:	d133      	bne.n	800e07a <__gethex+0x356>
 800e012:	f1b8 0f00 	cmp.w	r8, #0
 800e016:	d004      	beq.n	800e022 <__gethex+0x2fe>
 800e018:	4641      	mov	r1, r8
 800e01a:	4620      	mov	r0, r4
 800e01c:	f000 fec4 	bl	800eda8 <__any_on>
 800e020:	4683      	mov	fp, r0
 800e022:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e026:	2301      	movs	r3, #1
 800e028:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e02c:	f008 081f 	and.w	r8, r8, #31
 800e030:	fa03 f308 	lsl.w	r3, r3, r8
 800e034:	4213      	tst	r3, r2
 800e036:	4631      	mov	r1, r6
 800e038:	4620      	mov	r0, r4
 800e03a:	bf18      	it	ne
 800e03c:	f04b 0b02 	orrne.w	fp, fp, #2
 800e040:	1bad      	subs	r5, r5, r6
 800e042:	f7ff fe07 	bl	800dc54 <rshift>
 800e046:	687e      	ldr	r6, [r7, #4]
 800e048:	f04f 0802 	mov.w	r8, #2
 800e04c:	f1bb 0f00 	cmp.w	fp, #0
 800e050:	d04a      	beq.n	800e0e8 <__gethex+0x3c4>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2b02      	cmp	r3, #2
 800e056:	d016      	beq.n	800e086 <__gethex+0x362>
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d018      	beq.n	800e08e <__gethex+0x36a>
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d109      	bne.n	800e074 <__gethex+0x350>
 800e060:	f01b 0f02 	tst.w	fp, #2
 800e064:	d006      	beq.n	800e074 <__gethex+0x350>
 800e066:	f8da 3000 	ldr.w	r3, [sl]
 800e06a:	ea4b 0b03 	orr.w	fp, fp, r3
 800e06e:	f01b 0f01 	tst.w	fp, #1
 800e072:	d10f      	bne.n	800e094 <__gethex+0x370>
 800e074:	f048 0810 	orr.w	r8, r8, #16
 800e078:	e036      	b.n	800e0e8 <__gethex+0x3c4>
 800e07a:	f04f 0b01 	mov.w	fp, #1
 800e07e:	e7d0      	b.n	800e022 <__gethex+0x2fe>
 800e080:	f04f 0801 	mov.w	r8, #1
 800e084:	e7e2      	b.n	800e04c <__gethex+0x328>
 800e086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e088:	f1c3 0301 	rsb	r3, r3, #1
 800e08c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d0ef      	beq.n	800e074 <__gethex+0x350>
 800e094:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e098:	f104 0214 	add.w	r2, r4, #20
 800e09c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4694      	mov	ip, r2
 800e0aa:	f852 1b04 	ldr.w	r1, [r2], #4
 800e0ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e0b2:	d01e      	beq.n	800e0f2 <__gethex+0x3ce>
 800e0b4:	3101      	adds	r1, #1
 800e0b6:	f8cc 1000 	str.w	r1, [ip]
 800e0ba:	f1b8 0f02 	cmp.w	r8, #2
 800e0be:	f104 0214 	add.w	r2, r4, #20
 800e0c2:	d13d      	bne.n	800e140 <__gethex+0x41c>
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	42ab      	cmp	r3, r5
 800e0ca:	d10b      	bne.n	800e0e4 <__gethex+0x3c0>
 800e0cc:	1169      	asrs	r1, r5, #5
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f005 051f 	and.w	r5, r5, #31
 800e0d4:	fa03 f505 	lsl.w	r5, r3, r5
 800e0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0dc:	421d      	tst	r5, r3
 800e0de:	bf18      	it	ne
 800e0e0:	f04f 0801 	movne.w	r8, #1
 800e0e4:	f048 0820 	orr.w	r8, r8, #32
 800e0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0ea:	601c      	str	r4, [r3, #0]
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	601e      	str	r6, [r3, #0]
 800e0f0:	e6a2      	b.n	800de38 <__gethex+0x114>
 800e0f2:	4290      	cmp	r0, r2
 800e0f4:	f842 3c04 	str.w	r3, [r2, #-4]
 800e0f8:	d8d6      	bhi.n	800e0a8 <__gethex+0x384>
 800e0fa:	68a2      	ldr	r2, [r4, #8]
 800e0fc:	4593      	cmp	fp, r2
 800e0fe:	db17      	blt.n	800e130 <__gethex+0x40c>
 800e100:	6861      	ldr	r1, [r4, #4]
 800e102:	4648      	mov	r0, r9
 800e104:	3101      	adds	r1, #1
 800e106:	f000 f9c3 	bl	800e490 <_Balloc>
 800e10a:	4682      	mov	sl, r0
 800e10c:	b918      	cbnz	r0, 800e116 <__gethex+0x3f2>
 800e10e:	4b1b      	ldr	r3, [pc, #108]	; (800e17c <__gethex+0x458>)
 800e110:	4602      	mov	r2, r0
 800e112:	2184      	movs	r1, #132	; 0x84
 800e114:	e6b3      	b.n	800de7e <__gethex+0x15a>
 800e116:	6922      	ldr	r2, [r4, #16]
 800e118:	3202      	adds	r2, #2
 800e11a:	f104 010c 	add.w	r1, r4, #12
 800e11e:	0092      	lsls	r2, r2, #2
 800e120:	300c      	adds	r0, #12
 800e122:	f7fe feb9 	bl	800ce98 <memcpy>
 800e126:	4621      	mov	r1, r4
 800e128:	4648      	mov	r0, r9
 800e12a:	f000 f9f1 	bl	800e510 <_Bfree>
 800e12e:	4654      	mov	r4, sl
 800e130:	6922      	ldr	r2, [r4, #16]
 800e132:	1c51      	adds	r1, r2, #1
 800e134:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e138:	6121      	str	r1, [r4, #16]
 800e13a:	2101      	movs	r1, #1
 800e13c:	6151      	str	r1, [r2, #20]
 800e13e:	e7bc      	b.n	800e0ba <__gethex+0x396>
 800e140:	6921      	ldr	r1, [r4, #16]
 800e142:	4559      	cmp	r1, fp
 800e144:	dd0b      	ble.n	800e15e <__gethex+0x43a>
 800e146:	2101      	movs	r1, #1
 800e148:	4620      	mov	r0, r4
 800e14a:	f7ff fd83 	bl	800dc54 <rshift>
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	3601      	adds	r6, #1
 800e152:	42b3      	cmp	r3, r6
 800e154:	f6ff aedb 	blt.w	800df0e <__gethex+0x1ea>
 800e158:	f04f 0801 	mov.w	r8, #1
 800e15c:	e7c2      	b.n	800e0e4 <__gethex+0x3c0>
 800e15e:	f015 051f 	ands.w	r5, r5, #31
 800e162:	d0f9      	beq.n	800e158 <__gethex+0x434>
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	441a      	add	r2, r3
 800e168:	f1c5 0520 	rsb	r5, r5, #32
 800e16c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e170:	f000 fa80 	bl	800e674 <__hi0bits>
 800e174:	42a8      	cmp	r0, r5
 800e176:	dbe6      	blt.n	800e146 <__gethex+0x422>
 800e178:	e7ee      	b.n	800e158 <__gethex+0x434>
 800e17a:	bf00      	nop
 800e17c:	0800fbb0 	.word	0x0800fbb0

0800e180 <L_shift>:
 800e180:	f1c2 0208 	rsb	r2, r2, #8
 800e184:	0092      	lsls	r2, r2, #2
 800e186:	b570      	push	{r4, r5, r6, lr}
 800e188:	f1c2 0620 	rsb	r6, r2, #32
 800e18c:	6843      	ldr	r3, [r0, #4]
 800e18e:	6804      	ldr	r4, [r0, #0]
 800e190:	fa03 f506 	lsl.w	r5, r3, r6
 800e194:	432c      	orrs	r4, r5
 800e196:	40d3      	lsrs	r3, r2
 800e198:	6004      	str	r4, [r0, #0]
 800e19a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e19e:	4288      	cmp	r0, r1
 800e1a0:	d3f4      	bcc.n	800e18c <L_shift+0xc>
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}

0800e1a4 <__match>:
 800e1a4:	b530      	push	{r4, r5, lr}
 800e1a6:	6803      	ldr	r3, [r0, #0]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ae:	b914      	cbnz	r4, 800e1b6 <__match+0x12>
 800e1b0:	6003      	str	r3, [r0, #0]
 800e1b2:	2001      	movs	r0, #1
 800e1b4:	bd30      	pop	{r4, r5, pc}
 800e1b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e1be:	2d19      	cmp	r5, #25
 800e1c0:	bf98      	it	ls
 800e1c2:	3220      	addls	r2, #32
 800e1c4:	42a2      	cmp	r2, r4
 800e1c6:	d0f0      	beq.n	800e1aa <__match+0x6>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e7f3      	b.n	800e1b4 <__match+0x10>

0800e1cc <__hexnan>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	680b      	ldr	r3, [r1, #0]
 800e1d2:	6801      	ldr	r1, [r0, #0]
 800e1d4:	115e      	asrs	r6, r3, #5
 800e1d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1da:	f013 031f 	ands.w	r3, r3, #31
 800e1de:	b087      	sub	sp, #28
 800e1e0:	bf18      	it	ne
 800e1e2:	3604      	addne	r6, #4
 800e1e4:	2500      	movs	r5, #0
 800e1e6:	1f37      	subs	r7, r6, #4
 800e1e8:	4682      	mov	sl, r0
 800e1ea:	4690      	mov	r8, r2
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1f2:	46b9      	mov	r9, r7
 800e1f4:	463c      	mov	r4, r7
 800e1f6:	9502      	str	r5, [sp, #8]
 800e1f8:	46ab      	mov	fp, r5
 800e1fa:	784a      	ldrb	r2, [r1, #1]
 800e1fc:	1c4b      	adds	r3, r1, #1
 800e1fe:	9303      	str	r3, [sp, #12]
 800e200:	b342      	cbz	r2, 800e254 <__hexnan+0x88>
 800e202:	4610      	mov	r0, r2
 800e204:	9105      	str	r1, [sp, #20]
 800e206:	9204      	str	r2, [sp, #16]
 800e208:	f7ff fd76 	bl	800dcf8 <__hexdig_fun>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d14f      	bne.n	800e2b0 <__hexnan+0xe4>
 800e210:	9a04      	ldr	r2, [sp, #16]
 800e212:	9905      	ldr	r1, [sp, #20]
 800e214:	2a20      	cmp	r2, #32
 800e216:	d818      	bhi.n	800e24a <__hexnan+0x7e>
 800e218:	9b02      	ldr	r3, [sp, #8]
 800e21a:	459b      	cmp	fp, r3
 800e21c:	dd13      	ble.n	800e246 <__hexnan+0x7a>
 800e21e:	454c      	cmp	r4, r9
 800e220:	d206      	bcs.n	800e230 <__hexnan+0x64>
 800e222:	2d07      	cmp	r5, #7
 800e224:	dc04      	bgt.n	800e230 <__hexnan+0x64>
 800e226:	462a      	mov	r2, r5
 800e228:	4649      	mov	r1, r9
 800e22a:	4620      	mov	r0, r4
 800e22c:	f7ff ffa8 	bl	800e180 <L_shift>
 800e230:	4544      	cmp	r4, r8
 800e232:	d950      	bls.n	800e2d6 <__hexnan+0x10a>
 800e234:	2300      	movs	r3, #0
 800e236:	f1a4 0904 	sub.w	r9, r4, #4
 800e23a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e23e:	f8cd b008 	str.w	fp, [sp, #8]
 800e242:	464c      	mov	r4, r9
 800e244:	461d      	mov	r5, r3
 800e246:	9903      	ldr	r1, [sp, #12]
 800e248:	e7d7      	b.n	800e1fa <__hexnan+0x2e>
 800e24a:	2a29      	cmp	r2, #41	; 0x29
 800e24c:	d155      	bne.n	800e2fa <__hexnan+0x12e>
 800e24e:	3102      	adds	r1, #2
 800e250:	f8ca 1000 	str.w	r1, [sl]
 800e254:	f1bb 0f00 	cmp.w	fp, #0
 800e258:	d04f      	beq.n	800e2fa <__hexnan+0x12e>
 800e25a:	454c      	cmp	r4, r9
 800e25c:	d206      	bcs.n	800e26c <__hexnan+0xa0>
 800e25e:	2d07      	cmp	r5, #7
 800e260:	dc04      	bgt.n	800e26c <__hexnan+0xa0>
 800e262:	462a      	mov	r2, r5
 800e264:	4649      	mov	r1, r9
 800e266:	4620      	mov	r0, r4
 800e268:	f7ff ff8a 	bl	800e180 <L_shift>
 800e26c:	4544      	cmp	r4, r8
 800e26e:	d934      	bls.n	800e2da <__hexnan+0x10e>
 800e270:	f1a8 0204 	sub.w	r2, r8, #4
 800e274:	4623      	mov	r3, r4
 800e276:	f853 1b04 	ldr.w	r1, [r3], #4
 800e27a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e27e:	429f      	cmp	r7, r3
 800e280:	d2f9      	bcs.n	800e276 <__hexnan+0xaa>
 800e282:	1b3b      	subs	r3, r7, r4
 800e284:	f023 0303 	bic.w	r3, r3, #3
 800e288:	3304      	adds	r3, #4
 800e28a:	3e03      	subs	r6, #3
 800e28c:	3401      	adds	r4, #1
 800e28e:	42a6      	cmp	r6, r4
 800e290:	bf38      	it	cc
 800e292:	2304      	movcc	r3, #4
 800e294:	4443      	add	r3, r8
 800e296:	2200      	movs	r2, #0
 800e298:	f843 2b04 	str.w	r2, [r3], #4
 800e29c:	429f      	cmp	r7, r3
 800e29e:	d2fb      	bcs.n	800e298 <__hexnan+0xcc>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	b91b      	cbnz	r3, 800e2ac <__hexnan+0xe0>
 800e2a4:	4547      	cmp	r7, r8
 800e2a6:	d126      	bne.n	800e2f6 <__hexnan+0x12a>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	2005      	movs	r0, #5
 800e2ae:	e025      	b.n	800e2fc <__hexnan+0x130>
 800e2b0:	3501      	adds	r5, #1
 800e2b2:	2d08      	cmp	r5, #8
 800e2b4:	f10b 0b01 	add.w	fp, fp, #1
 800e2b8:	dd06      	ble.n	800e2c8 <__hexnan+0xfc>
 800e2ba:	4544      	cmp	r4, r8
 800e2bc:	d9c3      	bls.n	800e246 <__hexnan+0x7a>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2c4:	2501      	movs	r5, #1
 800e2c6:	3c04      	subs	r4, #4
 800e2c8:	6822      	ldr	r2, [r4, #0]
 800e2ca:	f000 000f 	and.w	r0, r0, #15
 800e2ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e2d2:	6020      	str	r0, [r4, #0]
 800e2d4:	e7b7      	b.n	800e246 <__hexnan+0x7a>
 800e2d6:	2508      	movs	r5, #8
 800e2d8:	e7b5      	b.n	800e246 <__hexnan+0x7a>
 800e2da:	9b01      	ldr	r3, [sp, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d0df      	beq.n	800e2a0 <__hexnan+0xd4>
 800e2e0:	f1c3 0320 	rsb	r3, r3, #32
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e8:	40da      	lsrs	r2, r3
 800e2ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2f4:	e7d4      	b.n	800e2a0 <__hexnan+0xd4>
 800e2f6:	3f04      	subs	r7, #4
 800e2f8:	e7d2      	b.n	800e2a0 <__hexnan+0xd4>
 800e2fa:	2004      	movs	r0, #4
 800e2fc:	b007      	add	sp, #28
 800e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e304 <malloc>:
 800e304:	4b02      	ldr	r3, [pc, #8]	; (800e310 <malloc+0xc>)
 800e306:	4601      	mov	r1, r0
 800e308:	6818      	ldr	r0, [r3, #0]
 800e30a:	f000 b823 	b.w	800e354 <_malloc_r>
 800e30e:	bf00      	nop
 800e310:	200001d4 	.word	0x200001d4

0800e314 <sbrk_aligned>:
 800e314:	b570      	push	{r4, r5, r6, lr}
 800e316:	4e0e      	ldr	r6, [pc, #56]	; (800e350 <sbrk_aligned+0x3c>)
 800e318:	460c      	mov	r4, r1
 800e31a:	6831      	ldr	r1, [r6, #0]
 800e31c:	4605      	mov	r5, r0
 800e31e:	b911      	cbnz	r1, 800e326 <sbrk_aligned+0x12>
 800e320:	f000 ff90 	bl	800f244 <_sbrk_r>
 800e324:	6030      	str	r0, [r6, #0]
 800e326:	4621      	mov	r1, r4
 800e328:	4628      	mov	r0, r5
 800e32a:	f000 ff8b 	bl	800f244 <_sbrk_r>
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	d00a      	beq.n	800e348 <sbrk_aligned+0x34>
 800e332:	1cc4      	adds	r4, r0, #3
 800e334:	f024 0403 	bic.w	r4, r4, #3
 800e338:	42a0      	cmp	r0, r4
 800e33a:	d007      	beq.n	800e34c <sbrk_aligned+0x38>
 800e33c:	1a21      	subs	r1, r4, r0
 800e33e:	4628      	mov	r0, r5
 800e340:	f000 ff80 	bl	800f244 <_sbrk_r>
 800e344:	3001      	adds	r0, #1
 800e346:	d101      	bne.n	800e34c <sbrk_aligned+0x38>
 800e348:	f04f 34ff 	mov.w	r4, #4294967295
 800e34c:	4620      	mov	r0, r4
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	20003184 	.word	0x20003184

0800e354 <_malloc_r>:
 800e354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e358:	1ccd      	adds	r5, r1, #3
 800e35a:	f025 0503 	bic.w	r5, r5, #3
 800e35e:	3508      	adds	r5, #8
 800e360:	2d0c      	cmp	r5, #12
 800e362:	bf38      	it	cc
 800e364:	250c      	movcc	r5, #12
 800e366:	2d00      	cmp	r5, #0
 800e368:	4607      	mov	r7, r0
 800e36a:	db01      	blt.n	800e370 <_malloc_r+0x1c>
 800e36c:	42a9      	cmp	r1, r5
 800e36e:	d905      	bls.n	800e37c <_malloc_r+0x28>
 800e370:	230c      	movs	r3, #12
 800e372:	603b      	str	r3, [r7, #0]
 800e374:	2600      	movs	r6, #0
 800e376:	4630      	mov	r0, r6
 800e378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e37c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e450 <_malloc_r+0xfc>
 800e380:	f000 f87a 	bl	800e478 <__malloc_lock>
 800e384:	f8d8 3000 	ldr.w	r3, [r8]
 800e388:	461c      	mov	r4, r3
 800e38a:	bb5c      	cbnz	r4, 800e3e4 <_malloc_r+0x90>
 800e38c:	4629      	mov	r1, r5
 800e38e:	4638      	mov	r0, r7
 800e390:	f7ff ffc0 	bl	800e314 <sbrk_aligned>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	4604      	mov	r4, r0
 800e398:	d155      	bne.n	800e446 <_malloc_r+0xf2>
 800e39a:	f8d8 4000 	ldr.w	r4, [r8]
 800e39e:	4626      	mov	r6, r4
 800e3a0:	2e00      	cmp	r6, #0
 800e3a2:	d145      	bne.n	800e430 <_malloc_r+0xdc>
 800e3a4:	2c00      	cmp	r4, #0
 800e3a6:	d048      	beq.n	800e43a <_malloc_r+0xe6>
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	eb04 0903 	add.w	r9, r4, r3
 800e3b2:	f000 ff47 	bl	800f244 <_sbrk_r>
 800e3b6:	4581      	cmp	r9, r0
 800e3b8:	d13f      	bne.n	800e43a <_malloc_r+0xe6>
 800e3ba:	6821      	ldr	r1, [r4, #0]
 800e3bc:	1a6d      	subs	r5, r5, r1
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff ffa7 	bl	800e314 <sbrk_aligned>
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	d037      	beq.n	800e43a <_malloc_r+0xe6>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	442b      	add	r3, r5
 800e3ce:	6023      	str	r3, [r4, #0]
 800e3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d038      	beq.n	800e44a <_malloc_r+0xf6>
 800e3d8:	685a      	ldr	r2, [r3, #4]
 800e3da:	42a2      	cmp	r2, r4
 800e3dc:	d12b      	bne.n	800e436 <_malloc_r+0xe2>
 800e3de:	2200      	movs	r2, #0
 800e3e0:	605a      	str	r2, [r3, #4]
 800e3e2:	e00f      	b.n	800e404 <_malloc_r+0xb0>
 800e3e4:	6822      	ldr	r2, [r4, #0]
 800e3e6:	1b52      	subs	r2, r2, r5
 800e3e8:	d41f      	bmi.n	800e42a <_malloc_r+0xd6>
 800e3ea:	2a0b      	cmp	r2, #11
 800e3ec:	d917      	bls.n	800e41e <_malloc_r+0xca>
 800e3ee:	1961      	adds	r1, r4, r5
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	6025      	str	r5, [r4, #0]
 800e3f4:	bf18      	it	ne
 800e3f6:	6059      	strne	r1, [r3, #4]
 800e3f8:	6863      	ldr	r3, [r4, #4]
 800e3fa:	bf08      	it	eq
 800e3fc:	f8c8 1000 	streq.w	r1, [r8]
 800e400:	5162      	str	r2, [r4, r5]
 800e402:	604b      	str	r3, [r1, #4]
 800e404:	4638      	mov	r0, r7
 800e406:	f104 060b 	add.w	r6, r4, #11
 800e40a:	f000 f83b 	bl	800e484 <__malloc_unlock>
 800e40e:	f026 0607 	bic.w	r6, r6, #7
 800e412:	1d23      	adds	r3, r4, #4
 800e414:	1af2      	subs	r2, r6, r3
 800e416:	d0ae      	beq.n	800e376 <_malloc_r+0x22>
 800e418:	1b9b      	subs	r3, r3, r6
 800e41a:	50a3      	str	r3, [r4, r2]
 800e41c:	e7ab      	b.n	800e376 <_malloc_r+0x22>
 800e41e:	42a3      	cmp	r3, r4
 800e420:	6862      	ldr	r2, [r4, #4]
 800e422:	d1dd      	bne.n	800e3e0 <_malloc_r+0x8c>
 800e424:	f8c8 2000 	str.w	r2, [r8]
 800e428:	e7ec      	b.n	800e404 <_malloc_r+0xb0>
 800e42a:	4623      	mov	r3, r4
 800e42c:	6864      	ldr	r4, [r4, #4]
 800e42e:	e7ac      	b.n	800e38a <_malloc_r+0x36>
 800e430:	4634      	mov	r4, r6
 800e432:	6876      	ldr	r6, [r6, #4]
 800e434:	e7b4      	b.n	800e3a0 <_malloc_r+0x4c>
 800e436:	4613      	mov	r3, r2
 800e438:	e7cc      	b.n	800e3d4 <_malloc_r+0x80>
 800e43a:	230c      	movs	r3, #12
 800e43c:	603b      	str	r3, [r7, #0]
 800e43e:	4638      	mov	r0, r7
 800e440:	f000 f820 	bl	800e484 <__malloc_unlock>
 800e444:	e797      	b.n	800e376 <_malloc_r+0x22>
 800e446:	6025      	str	r5, [r4, #0]
 800e448:	e7dc      	b.n	800e404 <_malloc_r+0xb0>
 800e44a:	605b      	str	r3, [r3, #4]
 800e44c:	deff      	udf	#255	; 0xff
 800e44e:	bf00      	nop
 800e450:	20003180 	.word	0x20003180

0800e454 <__ascii_mbtowc>:
 800e454:	b082      	sub	sp, #8
 800e456:	b901      	cbnz	r1, 800e45a <__ascii_mbtowc+0x6>
 800e458:	a901      	add	r1, sp, #4
 800e45a:	b142      	cbz	r2, 800e46e <__ascii_mbtowc+0x1a>
 800e45c:	b14b      	cbz	r3, 800e472 <__ascii_mbtowc+0x1e>
 800e45e:	7813      	ldrb	r3, [r2, #0]
 800e460:	600b      	str	r3, [r1, #0]
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	1e10      	subs	r0, r2, #0
 800e466:	bf18      	it	ne
 800e468:	2001      	movne	r0, #1
 800e46a:	b002      	add	sp, #8
 800e46c:	4770      	bx	lr
 800e46e:	4610      	mov	r0, r2
 800e470:	e7fb      	b.n	800e46a <__ascii_mbtowc+0x16>
 800e472:	f06f 0001 	mvn.w	r0, #1
 800e476:	e7f8      	b.n	800e46a <__ascii_mbtowc+0x16>

0800e478 <__malloc_lock>:
 800e478:	4801      	ldr	r0, [pc, #4]	; (800e480 <__malloc_lock+0x8>)
 800e47a:	f7fe bd0b 	b.w	800ce94 <__retarget_lock_acquire_recursive>
 800e47e:	bf00      	nop
 800e480:	2000317c 	.word	0x2000317c

0800e484 <__malloc_unlock>:
 800e484:	4801      	ldr	r0, [pc, #4]	; (800e48c <__malloc_unlock+0x8>)
 800e486:	f7fe bd06 	b.w	800ce96 <__retarget_lock_release_recursive>
 800e48a:	bf00      	nop
 800e48c:	2000317c 	.word	0x2000317c

0800e490 <_Balloc>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	69c6      	ldr	r6, [r0, #28]
 800e494:	4604      	mov	r4, r0
 800e496:	460d      	mov	r5, r1
 800e498:	b976      	cbnz	r6, 800e4b8 <_Balloc+0x28>
 800e49a:	2010      	movs	r0, #16
 800e49c:	f7ff ff32 	bl	800e304 <malloc>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	61e0      	str	r0, [r4, #28]
 800e4a4:	b920      	cbnz	r0, 800e4b0 <_Balloc+0x20>
 800e4a6:	4b18      	ldr	r3, [pc, #96]	; (800e508 <_Balloc+0x78>)
 800e4a8:	4818      	ldr	r0, [pc, #96]	; (800e50c <_Balloc+0x7c>)
 800e4aa:	216b      	movs	r1, #107	; 0x6b
 800e4ac:	f000 feda 	bl	800f264 <__assert_func>
 800e4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4b4:	6006      	str	r6, [r0, #0]
 800e4b6:	60c6      	str	r6, [r0, #12]
 800e4b8:	69e6      	ldr	r6, [r4, #28]
 800e4ba:	68f3      	ldr	r3, [r6, #12]
 800e4bc:	b183      	cbz	r3, 800e4e0 <_Balloc+0x50>
 800e4be:	69e3      	ldr	r3, [r4, #28]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4c6:	b9b8      	cbnz	r0, 800e4f8 <_Balloc+0x68>
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e4ce:	1d72      	adds	r2, r6, #5
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 fee4 	bl	800f2a0 <_calloc_r>
 800e4d8:	b160      	cbz	r0, 800e4f4 <_Balloc+0x64>
 800e4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4de:	e00e      	b.n	800e4fe <_Balloc+0x6e>
 800e4e0:	2221      	movs	r2, #33	; 0x21
 800e4e2:	2104      	movs	r1, #4
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fedb 	bl	800f2a0 <_calloc_r>
 800e4ea:	69e3      	ldr	r3, [r4, #28]
 800e4ec:	60f0      	str	r0, [r6, #12]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1e4      	bne.n	800e4be <_Balloc+0x2e>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	6802      	ldr	r2, [r0, #0]
 800e4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4fe:	2300      	movs	r3, #0
 800e500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e504:	e7f7      	b.n	800e4f6 <_Balloc+0x66>
 800e506:	bf00      	nop
 800e508:	0800fb41 	.word	0x0800fb41
 800e50c:	0800fc21 	.word	0x0800fc21

0800e510 <_Bfree>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	69c6      	ldr	r6, [r0, #28]
 800e514:	4605      	mov	r5, r0
 800e516:	460c      	mov	r4, r1
 800e518:	b976      	cbnz	r6, 800e538 <_Bfree+0x28>
 800e51a:	2010      	movs	r0, #16
 800e51c:	f7ff fef2 	bl	800e304 <malloc>
 800e520:	4602      	mov	r2, r0
 800e522:	61e8      	str	r0, [r5, #28]
 800e524:	b920      	cbnz	r0, 800e530 <_Bfree+0x20>
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <_Bfree+0x3c>)
 800e528:	4809      	ldr	r0, [pc, #36]	; (800e550 <_Bfree+0x40>)
 800e52a:	218f      	movs	r1, #143	; 0x8f
 800e52c:	f000 fe9a 	bl	800f264 <__assert_func>
 800e530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e534:	6006      	str	r6, [r0, #0]
 800e536:	60c6      	str	r6, [r0, #12]
 800e538:	b13c      	cbz	r4, 800e54a <_Bfree+0x3a>
 800e53a:	69eb      	ldr	r3, [r5, #28]
 800e53c:	6862      	ldr	r2, [r4, #4]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e544:	6021      	str	r1, [r4, #0]
 800e546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e54a:	bd70      	pop	{r4, r5, r6, pc}
 800e54c:	0800fb41 	.word	0x0800fb41
 800e550:	0800fc21 	.word	0x0800fc21

0800e554 <__multadd>:
 800e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e558:	690d      	ldr	r5, [r1, #16]
 800e55a:	4607      	mov	r7, r0
 800e55c:	460c      	mov	r4, r1
 800e55e:	461e      	mov	r6, r3
 800e560:	f101 0c14 	add.w	ip, r1, #20
 800e564:	2000      	movs	r0, #0
 800e566:	f8dc 3000 	ldr.w	r3, [ip]
 800e56a:	b299      	uxth	r1, r3
 800e56c:	fb02 6101 	mla	r1, r2, r1, r6
 800e570:	0c1e      	lsrs	r6, r3, #16
 800e572:	0c0b      	lsrs	r3, r1, #16
 800e574:	fb02 3306 	mla	r3, r2, r6, r3
 800e578:	b289      	uxth	r1, r1
 800e57a:	3001      	adds	r0, #1
 800e57c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e580:	4285      	cmp	r5, r0
 800e582:	f84c 1b04 	str.w	r1, [ip], #4
 800e586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e58a:	dcec      	bgt.n	800e566 <__multadd+0x12>
 800e58c:	b30e      	cbz	r6, 800e5d2 <__multadd+0x7e>
 800e58e:	68a3      	ldr	r3, [r4, #8]
 800e590:	42ab      	cmp	r3, r5
 800e592:	dc19      	bgt.n	800e5c8 <__multadd+0x74>
 800e594:	6861      	ldr	r1, [r4, #4]
 800e596:	4638      	mov	r0, r7
 800e598:	3101      	adds	r1, #1
 800e59a:	f7ff ff79 	bl	800e490 <_Balloc>
 800e59e:	4680      	mov	r8, r0
 800e5a0:	b928      	cbnz	r0, 800e5ae <__multadd+0x5a>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	; (800e5d8 <__multadd+0x84>)
 800e5a6:	480d      	ldr	r0, [pc, #52]	; (800e5dc <__multadd+0x88>)
 800e5a8:	21ba      	movs	r1, #186	; 0xba
 800e5aa:	f000 fe5b 	bl	800f264 <__assert_func>
 800e5ae:	6922      	ldr	r2, [r4, #16]
 800e5b0:	3202      	adds	r2, #2
 800e5b2:	f104 010c 	add.w	r1, r4, #12
 800e5b6:	0092      	lsls	r2, r2, #2
 800e5b8:	300c      	adds	r0, #12
 800e5ba:	f7fe fc6d 	bl	800ce98 <memcpy>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff ffa5 	bl	800e510 <_Bfree>
 800e5c6:	4644      	mov	r4, r8
 800e5c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	615e      	str	r6, [r3, #20]
 800e5d0:	6125      	str	r5, [r4, #16]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d8:	0800fbb0 	.word	0x0800fbb0
 800e5dc:	0800fc21 	.word	0x0800fc21

0800e5e0 <__s2b>:
 800e5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	4615      	mov	r5, r2
 800e5e8:	461f      	mov	r7, r3
 800e5ea:	2209      	movs	r2, #9
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	db09      	blt.n	800e610 <__s2b+0x30>
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff ff47 	bl	800e490 <_Balloc>
 800e602:	b940      	cbnz	r0, 800e616 <__s2b+0x36>
 800e604:	4602      	mov	r2, r0
 800e606:	4b19      	ldr	r3, [pc, #100]	; (800e66c <__s2b+0x8c>)
 800e608:	4819      	ldr	r0, [pc, #100]	; (800e670 <__s2b+0x90>)
 800e60a:	21d3      	movs	r1, #211	; 0xd3
 800e60c:	f000 fe2a 	bl	800f264 <__assert_func>
 800e610:	0052      	lsls	r2, r2, #1
 800e612:	3101      	adds	r1, #1
 800e614:	e7f0      	b.n	800e5f8 <__s2b+0x18>
 800e616:	9b08      	ldr	r3, [sp, #32]
 800e618:	6143      	str	r3, [r0, #20]
 800e61a:	2d09      	cmp	r5, #9
 800e61c:	f04f 0301 	mov.w	r3, #1
 800e620:	6103      	str	r3, [r0, #16]
 800e622:	dd16      	ble.n	800e652 <__s2b+0x72>
 800e624:	f104 0909 	add.w	r9, r4, #9
 800e628:	46c8      	mov	r8, r9
 800e62a:	442c      	add	r4, r5
 800e62c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e630:	4601      	mov	r1, r0
 800e632:	3b30      	subs	r3, #48	; 0x30
 800e634:	220a      	movs	r2, #10
 800e636:	4630      	mov	r0, r6
 800e638:	f7ff ff8c 	bl	800e554 <__multadd>
 800e63c:	45a0      	cmp	r8, r4
 800e63e:	d1f5      	bne.n	800e62c <__s2b+0x4c>
 800e640:	f1a5 0408 	sub.w	r4, r5, #8
 800e644:	444c      	add	r4, r9
 800e646:	1b2d      	subs	r5, r5, r4
 800e648:	1963      	adds	r3, r4, r5
 800e64a:	42bb      	cmp	r3, r7
 800e64c:	db04      	blt.n	800e658 <__s2b+0x78>
 800e64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e652:	340a      	adds	r4, #10
 800e654:	2509      	movs	r5, #9
 800e656:	e7f6      	b.n	800e646 <__s2b+0x66>
 800e658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e65c:	4601      	mov	r1, r0
 800e65e:	3b30      	subs	r3, #48	; 0x30
 800e660:	220a      	movs	r2, #10
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff ff76 	bl	800e554 <__multadd>
 800e668:	e7ee      	b.n	800e648 <__s2b+0x68>
 800e66a:	bf00      	nop
 800e66c:	0800fbb0 	.word	0x0800fbb0
 800e670:	0800fc21 	.word	0x0800fc21

0800e674 <__hi0bits>:
 800e674:	0c03      	lsrs	r3, r0, #16
 800e676:	041b      	lsls	r3, r3, #16
 800e678:	b9d3      	cbnz	r3, 800e6b0 <__hi0bits+0x3c>
 800e67a:	0400      	lsls	r0, r0, #16
 800e67c:	2310      	movs	r3, #16
 800e67e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e682:	bf04      	itt	eq
 800e684:	0200      	lsleq	r0, r0, #8
 800e686:	3308      	addeq	r3, #8
 800e688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e68c:	bf04      	itt	eq
 800e68e:	0100      	lsleq	r0, r0, #4
 800e690:	3304      	addeq	r3, #4
 800e692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e696:	bf04      	itt	eq
 800e698:	0080      	lsleq	r0, r0, #2
 800e69a:	3302      	addeq	r3, #2
 800e69c:	2800      	cmp	r0, #0
 800e69e:	db05      	blt.n	800e6ac <__hi0bits+0x38>
 800e6a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6a4:	f103 0301 	add.w	r3, r3, #1
 800e6a8:	bf08      	it	eq
 800e6aa:	2320      	moveq	r3, #32
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	4770      	bx	lr
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e7e4      	b.n	800e67e <__hi0bits+0xa>

0800e6b4 <__lo0bits>:
 800e6b4:	6803      	ldr	r3, [r0, #0]
 800e6b6:	f013 0207 	ands.w	r2, r3, #7
 800e6ba:	d00c      	beq.n	800e6d6 <__lo0bits+0x22>
 800e6bc:	07d9      	lsls	r1, r3, #31
 800e6be:	d422      	bmi.n	800e706 <__lo0bits+0x52>
 800e6c0:	079a      	lsls	r2, r3, #30
 800e6c2:	bf49      	itett	mi
 800e6c4:	085b      	lsrmi	r3, r3, #1
 800e6c6:	089b      	lsrpl	r3, r3, #2
 800e6c8:	6003      	strmi	r3, [r0, #0]
 800e6ca:	2201      	movmi	r2, #1
 800e6cc:	bf5c      	itt	pl
 800e6ce:	6003      	strpl	r3, [r0, #0]
 800e6d0:	2202      	movpl	r2, #2
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4770      	bx	lr
 800e6d6:	b299      	uxth	r1, r3
 800e6d8:	b909      	cbnz	r1, 800e6de <__lo0bits+0x2a>
 800e6da:	0c1b      	lsrs	r3, r3, #16
 800e6dc:	2210      	movs	r2, #16
 800e6de:	b2d9      	uxtb	r1, r3
 800e6e0:	b909      	cbnz	r1, 800e6e6 <__lo0bits+0x32>
 800e6e2:	3208      	adds	r2, #8
 800e6e4:	0a1b      	lsrs	r3, r3, #8
 800e6e6:	0719      	lsls	r1, r3, #28
 800e6e8:	bf04      	itt	eq
 800e6ea:	091b      	lsreq	r3, r3, #4
 800e6ec:	3204      	addeq	r2, #4
 800e6ee:	0799      	lsls	r1, r3, #30
 800e6f0:	bf04      	itt	eq
 800e6f2:	089b      	lsreq	r3, r3, #2
 800e6f4:	3202      	addeq	r2, #2
 800e6f6:	07d9      	lsls	r1, r3, #31
 800e6f8:	d403      	bmi.n	800e702 <__lo0bits+0x4e>
 800e6fa:	085b      	lsrs	r3, r3, #1
 800e6fc:	f102 0201 	add.w	r2, r2, #1
 800e700:	d003      	beq.n	800e70a <__lo0bits+0x56>
 800e702:	6003      	str	r3, [r0, #0]
 800e704:	e7e5      	b.n	800e6d2 <__lo0bits+0x1e>
 800e706:	2200      	movs	r2, #0
 800e708:	e7e3      	b.n	800e6d2 <__lo0bits+0x1e>
 800e70a:	2220      	movs	r2, #32
 800e70c:	e7e1      	b.n	800e6d2 <__lo0bits+0x1e>
	...

0800e710 <__i2b>:
 800e710:	b510      	push	{r4, lr}
 800e712:	460c      	mov	r4, r1
 800e714:	2101      	movs	r1, #1
 800e716:	f7ff febb 	bl	800e490 <_Balloc>
 800e71a:	4602      	mov	r2, r0
 800e71c:	b928      	cbnz	r0, 800e72a <__i2b+0x1a>
 800e71e:	4b05      	ldr	r3, [pc, #20]	; (800e734 <__i2b+0x24>)
 800e720:	4805      	ldr	r0, [pc, #20]	; (800e738 <__i2b+0x28>)
 800e722:	f240 1145 	movw	r1, #325	; 0x145
 800e726:	f000 fd9d 	bl	800f264 <__assert_func>
 800e72a:	2301      	movs	r3, #1
 800e72c:	6144      	str	r4, [r0, #20]
 800e72e:	6103      	str	r3, [r0, #16]
 800e730:	bd10      	pop	{r4, pc}
 800e732:	bf00      	nop
 800e734:	0800fbb0 	.word	0x0800fbb0
 800e738:	0800fc21 	.word	0x0800fc21

0800e73c <__multiply>:
 800e73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e740:	4691      	mov	r9, r2
 800e742:	690a      	ldr	r2, [r1, #16]
 800e744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e748:	429a      	cmp	r2, r3
 800e74a:	bfb8      	it	lt
 800e74c:	460b      	movlt	r3, r1
 800e74e:	460c      	mov	r4, r1
 800e750:	bfbc      	itt	lt
 800e752:	464c      	movlt	r4, r9
 800e754:	4699      	movlt	r9, r3
 800e756:	6927      	ldr	r7, [r4, #16]
 800e758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	6861      	ldr	r1, [r4, #4]
 800e760:	eb07 060a 	add.w	r6, r7, sl
 800e764:	42b3      	cmp	r3, r6
 800e766:	b085      	sub	sp, #20
 800e768:	bfb8      	it	lt
 800e76a:	3101      	addlt	r1, #1
 800e76c:	f7ff fe90 	bl	800e490 <_Balloc>
 800e770:	b930      	cbnz	r0, 800e780 <__multiply+0x44>
 800e772:	4602      	mov	r2, r0
 800e774:	4b44      	ldr	r3, [pc, #272]	; (800e888 <__multiply+0x14c>)
 800e776:	4845      	ldr	r0, [pc, #276]	; (800e88c <__multiply+0x150>)
 800e778:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e77c:	f000 fd72 	bl	800f264 <__assert_func>
 800e780:	f100 0514 	add.w	r5, r0, #20
 800e784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e788:	462b      	mov	r3, r5
 800e78a:	2200      	movs	r2, #0
 800e78c:	4543      	cmp	r3, r8
 800e78e:	d321      	bcc.n	800e7d4 <__multiply+0x98>
 800e790:	f104 0314 	add.w	r3, r4, #20
 800e794:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e798:	f109 0314 	add.w	r3, r9, #20
 800e79c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e7a0:	9202      	str	r2, [sp, #8]
 800e7a2:	1b3a      	subs	r2, r7, r4
 800e7a4:	3a15      	subs	r2, #21
 800e7a6:	f022 0203 	bic.w	r2, r2, #3
 800e7aa:	3204      	adds	r2, #4
 800e7ac:	f104 0115 	add.w	r1, r4, #21
 800e7b0:	428f      	cmp	r7, r1
 800e7b2:	bf38      	it	cc
 800e7b4:	2204      	movcc	r2, #4
 800e7b6:	9201      	str	r2, [sp, #4]
 800e7b8:	9a02      	ldr	r2, [sp, #8]
 800e7ba:	9303      	str	r3, [sp, #12]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d80c      	bhi.n	800e7da <__multiply+0x9e>
 800e7c0:	2e00      	cmp	r6, #0
 800e7c2:	dd03      	ble.n	800e7cc <__multiply+0x90>
 800e7c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d05b      	beq.n	800e884 <__multiply+0x148>
 800e7cc:	6106      	str	r6, [r0, #16]
 800e7ce:	b005      	add	sp, #20
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	f843 2b04 	str.w	r2, [r3], #4
 800e7d8:	e7d8      	b.n	800e78c <__multiply+0x50>
 800e7da:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7de:	f1ba 0f00 	cmp.w	sl, #0
 800e7e2:	d024      	beq.n	800e82e <__multiply+0xf2>
 800e7e4:	f104 0e14 	add.w	lr, r4, #20
 800e7e8:	46a9      	mov	r9, r5
 800e7ea:	f04f 0c00 	mov.w	ip, #0
 800e7ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7f2:	f8d9 1000 	ldr.w	r1, [r9]
 800e7f6:	fa1f fb82 	uxth.w	fp, r2
 800e7fa:	b289      	uxth	r1, r1
 800e7fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e800:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e804:	f8d9 2000 	ldr.w	r2, [r9]
 800e808:	4461      	add	r1, ip
 800e80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e80e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e816:	b289      	uxth	r1, r1
 800e818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e81c:	4577      	cmp	r7, lr
 800e81e:	f849 1b04 	str.w	r1, [r9], #4
 800e822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e826:	d8e2      	bhi.n	800e7ee <__multiply+0xb2>
 800e828:	9a01      	ldr	r2, [sp, #4]
 800e82a:	f845 c002 	str.w	ip, [r5, r2]
 800e82e:	9a03      	ldr	r2, [sp, #12]
 800e830:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e834:	3304      	adds	r3, #4
 800e836:	f1b9 0f00 	cmp.w	r9, #0
 800e83a:	d021      	beq.n	800e880 <__multiply+0x144>
 800e83c:	6829      	ldr	r1, [r5, #0]
 800e83e:	f104 0c14 	add.w	ip, r4, #20
 800e842:	46ae      	mov	lr, r5
 800e844:	f04f 0a00 	mov.w	sl, #0
 800e848:	f8bc b000 	ldrh.w	fp, [ip]
 800e84c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e850:	fb09 220b 	mla	r2, r9, fp, r2
 800e854:	4452      	add	r2, sl
 800e856:	b289      	uxth	r1, r1
 800e858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e85c:	f84e 1b04 	str.w	r1, [lr], #4
 800e860:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e868:	f8be 1000 	ldrh.w	r1, [lr]
 800e86c:	fb09 110a 	mla	r1, r9, sl, r1
 800e870:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e874:	4567      	cmp	r7, ip
 800e876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e87a:	d8e5      	bhi.n	800e848 <__multiply+0x10c>
 800e87c:	9a01      	ldr	r2, [sp, #4]
 800e87e:	50a9      	str	r1, [r5, r2]
 800e880:	3504      	adds	r5, #4
 800e882:	e799      	b.n	800e7b8 <__multiply+0x7c>
 800e884:	3e01      	subs	r6, #1
 800e886:	e79b      	b.n	800e7c0 <__multiply+0x84>
 800e888:	0800fbb0 	.word	0x0800fbb0
 800e88c:	0800fc21 	.word	0x0800fc21

0800e890 <__pow5mult>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	4615      	mov	r5, r2
 800e896:	f012 0203 	ands.w	r2, r2, #3
 800e89a:	4606      	mov	r6, r0
 800e89c:	460f      	mov	r7, r1
 800e89e:	d007      	beq.n	800e8b0 <__pow5mult+0x20>
 800e8a0:	4c25      	ldr	r4, [pc, #148]	; (800e938 <__pow5mult+0xa8>)
 800e8a2:	3a01      	subs	r2, #1
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8aa:	f7ff fe53 	bl	800e554 <__multadd>
 800e8ae:	4607      	mov	r7, r0
 800e8b0:	10ad      	asrs	r5, r5, #2
 800e8b2:	d03d      	beq.n	800e930 <__pow5mult+0xa0>
 800e8b4:	69f4      	ldr	r4, [r6, #28]
 800e8b6:	b97c      	cbnz	r4, 800e8d8 <__pow5mult+0x48>
 800e8b8:	2010      	movs	r0, #16
 800e8ba:	f7ff fd23 	bl	800e304 <malloc>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	61f0      	str	r0, [r6, #28]
 800e8c2:	b928      	cbnz	r0, 800e8d0 <__pow5mult+0x40>
 800e8c4:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <__pow5mult+0xac>)
 800e8c6:	481e      	ldr	r0, [pc, #120]	; (800e940 <__pow5mult+0xb0>)
 800e8c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e8cc:	f000 fcca 	bl	800f264 <__assert_func>
 800e8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8d4:	6004      	str	r4, [r0, #0]
 800e8d6:	60c4      	str	r4, [r0, #12]
 800e8d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8e0:	b94c      	cbnz	r4, 800e8f6 <__pow5mult+0x66>
 800e8e2:	f240 2171 	movw	r1, #625	; 0x271
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7ff ff12 	bl	800e710 <__i2b>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	6003      	str	r3, [r0, #0]
 800e8f6:	f04f 0900 	mov.w	r9, #0
 800e8fa:	07eb      	lsls	r3, r5, #31
 800e8fc:	d50a      	bpl.n	800e914 <__pow5mult+0x84>
 800e8fe:	4639      	mov	r1, r7
 800e900:	4622      	mov	r2, r4
 800e902:	4630      	mov	r0, r6
 800e904:	f7ff ff1a 	bl	800e73c <__multiply>
 800e908:	4639      	mov	r1, r7
 800e90a:	4680      	mov	r8, r0
 800e90c:	4630      	mov	r0, r6
 800e90e:	f7ff fdff 	bl	800e510 <_Bfree>
 800e912:	4647      	mov	r7, r8
 800e914:	106d      	asrs	r5, r5, #1
 800e916:	d00b      	beq.n	800e930 <__pow5mult+0xa0>
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	b938      	cbnz	r0, 800e92c <__pow5mult+0x9c>
 800e91c:	4622      	mov	r2, r4
 800e91e:	4621      	mov	r1, r4
 800e920:	4630      	mov	r0, r6
 800e922:	f7ff ff0b 	bl	800e73c <__multiply>
 800e926:	6020      	str	r0, [r4, #0]
 800e928:	f8c0 9000 	str.w	r9, [r0]
 800e92c:	4604      	mov	r4, r0
 800e92e:	e7e4      	b.n	800e8fa <__pow5mult+0x6a>
 800e930:	4638      	mov	r0, r7
 800e932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e936:	bf00      	nop
 800e938:	0800fd70 	.word	0x0800fd70
 800e93c:	0800fb41 	.word	0x0800fb41
 800e940:	0800fc21 	.word	0x0800fc21

0800e944 <__lshift>:
 800e944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e948:	460c      	mov	r4, r1
 800e94a:	6849      	ldr	r1, [r1, #4]
 800e94c:	6923      	ldr	r3, [r4, #16]
 800e94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e952:	68a3      	ldr	r3, [r4, #8]
 800e954:	4607      	mov	r7, r0
 800e956:	4691      	mov	r9, r2
 800e958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e95c:	f108 0601 	add.w	r6, r8, #1
 800e960:	42b3      	cmp	r3, r6
 800e962:	db0b      	blt.n	800e97c <__lshift+0x38>
 800e964:	4638      	mov	r0, r7
 800e966:	f7ff fd93 	bl	800e490 <_Balloc>
 800e96a:	4605      	mov	r5, r0
 800e96c:	b948      	cbnz	r0, 800e982 <__lshift+0x3e>
 800e96e:	4602      	mov	r2, r0
 800e970:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <__lshift+0xd0>)
 800e972:	4829      	ldr	r0, [pc, #164]	; (800ea18 <__lshift+0xd4>)
 800e974:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e978:	f000 fc74 	bl	800f264 <__assert_func>
 800e97c:	3101      	adds	r1, #1
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	e7ee      	b.n	800e960 <__lshift+0x1c>
 800e982:	2300      	movs	r3, #0
 800e984:	f100 0114 	add.w	r1, r0, #20
 800e988:	f100 0210 	add.w	r2, r0, #16
 800e98c:	4618      	mov	r0, r3
 800e98e:	4553      	cmp	r3, sl
 800e990:	db33      	blt.n	800e9fa <__lshift+0xb6>
 800e992:	6920      	ldr	r0, [r4, #16]
 800e994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e998:	f104 0314 	add.w	r3, r4, #20
 800e99c:	f019 091f 	ands.w	r9, r9, #31
 800e9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9a8:	d02b      	beq.n	800ea02 <__lshift+0xbe>
 800e9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e9ae:	468a      	mov	sl, r1
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e9b8:	4310      	orrs	r0, r2
 800e9ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c2:	459c      	cmp	ip, r3
 800e9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9c8:	d8f3      	bhi.n	800e9b2 <__lshift+0x6e>
 800e9ca:	ebac 0304 	sub.w	r3, ip, r4
 800e9ce:	3b15      	subs	r3, #21
 800e9d0:	f023 0303 	bic.w	r3, r3, #3
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	f104 0015 	add.w	r0, r4, #21
 800e9da:	4584      	cmp	ip, r0
 800e9dc:	bf38      	it	cc
 800e9de:	2304      	movcc	r3, #4
 800e9e0:	50ca      	str	r2, [r1, r3]
 800e9e2:	b10a      	cbz	r2, 800e9e8 <__lshift+0xa4>
 800e9e4:	f108 0602 	add.w	r6, r8, #2
 800e9e8:	3e01      	subs	r6, #1
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	612e      	str	r6, [r5, #16]
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	f7ff fd8e 	bl	800e510 <_Bfree>
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9fe:	3301      	adds	r3, #1
 800ea00:	e7c5      	b.n	800e98e <__lshift+0x4a>
 800ea02:	3904      	subs	r1, #4
 800ea04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea0c:	459c      	cmp	ip, r3
 800ea0e:	d8f9      	bhi.n	800ea04 <__lshift+0xc0>
 800ea10:	e7ea      	b.n	800e9e8 <__lshift+0xa4>
 800ea12:	bf00      	nop
 800ea14:	0800fbb0 	.word	0x0800fbb0
 800ea18:	0800fc21 	.word	0x0800fc21

0800ea1c <__mcmp>:
 800ea1c:	b530      	push	{r4, r5, lr}
 800ea1e:	6902      	ldr	r2, [r0, #16]
 800ea20:	690c      	ldr	r4, [r1, #16]
 800ea22:	1b12      	subs	r2, r2, r4
 800ea24:	d10e      	bne.n	800ea44 <__mcmp+0x28>
 800ea26:	f100 0314 	add.w	r3, r0, #20
 800ea2a:	3114      	adds	r1, #20
 800ea2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea3c:	42a5      	cmp	r5, r4
 800ea3e:	d003      	beq.n	800ea48 <__mcmp+0x2c>
 800ea40:	d305      	bcc.n	800ea4e <__mcmp+0x32>
 800ea42:	2201      	movs	r2, #1
 800ea44:	4610      	mov	r0, r2
 800ea46:	bd30      	pop	{r4, r5, pc}
 800ea48:	4283      	cmp	r3, r0
 800ea4a:	d3f3      	bcc.n	800ea34 <__mcmp+0x18>
 800ea4c:	e7fa      	b.n	800ea44 <__mcmp+0x28>
 800ea4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea52:	e7f7      	b.n	800ea44 <__mcmp+0x28>

0800ea54 <__mdiff>:
 800ea54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea58:	460c      	mov	r4, r1
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	4620      	mov	r0, r4
 800ea60:	4690      	mov	r8, r2
 800ea62:	f7ff ffdb 	bl	800ea1c <__mcmp>
 800ea66:	1e05      	subs	r5, r0, #0
 800ea68:	d110      	bne.n	800ea8c <__mdiff+0x38>
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	f7ff fd0f 	bl	800e490 <_Balloc>
 800ea72:	b930      	cbnz	r0, 800ea82 <__mdiff+0x2e>
 800ea74:	4b3a      	ldr	r3, [pc, #232]	; (800eb60 <__mdiff+0x10c>)
 800ea76:	4602      	mov	r2, r0
 800ea78:	f240 2137 	movw	r1, #567	; 0x237
 800ea7c:	4839      	ldr	r0, [pc, #228]	; (800eb64 <__mdiff+0x110>)
 800ea7e:	f000 fbf1 	bl	800f264 <__assert_func>
 800ea82:	2301      	movs	r3, #1
 800ea84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea8c:	bfa4      	itt	ge
 800ea8e:	4643      	movge	r3, r8
 800ea90:	46a0      	movge	r8, r4
 800ea92:	4630      	mov	r0, r6
 800ea94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea98:	bfa6      	itte	ge
 800ea9a:	461c      	movge	r4, r3
 800ea9c:	2500      	movge	r5, #0
 800ea9e:	2501      	movlt	r5, #1
 800eaa0:	f7ff fcf6 	bl	800e490 <_Balloc>
 800eaa4:	b920      	cbnz	r0, 800eab0 <__mdiff+0x5c>
 800eaa6:	4b2e      	ldr	r3, [pc, #184]	; (800eb60 <__mdiff+0x10c>)
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	f240 2145 	movw	r1, #581	; 0x245
 800eaae:	e7e5      	b.n	800ea7c <__mdiff+0x28>
 800eab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eab4:	6926      	ldr	r6, [r4, #16]
 800eab6:	60c5      	str	r5, [r0, #12]
 800eab8:	f104 0914 	add.w	r9, r4, #20
 800eabc:	f108 0514 	add.w	r5, r8, #20
 800eac0:	f100 0e14 	add.w	lr, r0, #20
 800eac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eacc:	f108 0210 	add.w	r2, r8, #16
 800ead0:	46f2      	mov	sl, lr
 800ead2:	2100      	movs	r1, #0
 800ead4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ead8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eadc:	fa11 f88b 	uxtah	r8, r1, fp
 800eae0:	b299      	uxth	r1, r3
 800eae2:	0c1b      	lsrs	r3, r3, #16
 800eae4:	eba8 0801 	sub.w	r8, r8, r1
 800eae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eaf0:	fa1f f888 	uxth.w	r8, r8
 800eaf4:	1419      	asrs	r1, r3, #16
 800eaf6:	454e      	cmp	r6, r9
 800eaf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eafc:	f84a 3b04 	str.w	r3, [sl], #4
 800eb00:	d8e8      	bhi.n	800ead4 <__mdiff+0x80>
 800eb02:	1b33      	subs	r3, r6, r4
 800eb04:	3b15      	subs	r3, #21
 800eb06:	f023 0303 	bic.w	r3, r3, #3
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	3415      	adds	r4, #21
 800eb0e:	42a6      	cmp	r6, r4
 800eb10:	bf38      	it	cc
 800eb12:	2304      	movcc	r3, #4
 800eb14:	441d      	add	r5, r3
 800eb16:	4473      	add	r3, lr
 800eb18:	469e      	mov	lr, r3
 800eb1a:	462e      	mov	r6, r5
 800eb1c:	4566      	cmp	r6, ip
 800eb1e:	d30e      	bcc.n	800eb3e <__mdiff+0xea>
 800eb20:	f10c 0203 	add.w	r2, ip, #3
 800eb24:	1b52      	subs	r2, r2, r5
 800eb26:	f022 0203 	bic.w	r2, r2, #3
 800eb2a:	3d03      	subs	r5, #3
 800eb2c:	45ac      	cmp	ip, r5
 800eb2e:	bf38      	it	cc
 800eb30:	2200      	movcc	r2, #0
 800eb32:	4413      	add	r3, r2
 800eb34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eb38:	b17a      	cbz	r2, 800eb5a <__mdiff+0x106>
 800eb3a:	6107      	str	r7, [r0, #16]
 800eb3c:	e7a4      	b.n	800ea88 <__mdiff+0x34>
 800eb3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb42:	fa11 f288 	uxtah	r2, r1, r8
 800eb46:	1414      	asrs	r4, r2, #16
 800eb48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb4c:	b292      	uxth	r2, r2
 800eb4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb52:	f84e 2b04 	str.w	r2, [lr], #4
 800eb56:	1421      	asrs	r1, r4, #16
 800eb58:	e7e0      	b.n	800eb1c <__mdiff+0xc8>
 800eb5a:	3f01      	subs	r7, #1
 800eb5c:	e7ea      	b.n	800eb34 <__mdiff+0xe0>
 800eb5e:	bf00      	nop
 800eb60:	0800fbb0 	.word	0x0800fbb0
 800eb64:	0800fc21 	.word	0x0800fc21

0800eb68 <__ulp>:
 800eb68:	b082      	sub	sp, #8
 800eb6a:	ed8d 0b00 	vstr	d0, [sp]
 800eb6e:	9a01      	ldr	r2, [sp, #4]
 800eb70:	4b0f      	ldr	r3, [pc, #60]	; (800ebb0 <__ulp+0x48>)
 800eb72:	4013      	ands	r3, r2
 800eb74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	dc08      	bgt.n	800eb8e <__ulp+0x26>
 800eb7c:	425b      	negs	r3, r3
 800eb7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eb82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb86:	da04      	bge.n	800eb92 <__ulp+0x2a>
 800eb88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb8c:	4113      	asrs	r3, r2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	e008      	b.n	800eba4 <__ulp+0x3c>
 800eb92:	f1a2 0314 	sub.w	r3, r2, #20
 800eb96:	2b1e      	cmp	r3, #30
 800eb98:	bfda      	itte	le
 800eb9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800eb9e:	40da      	lsrle	r2, r3
 800eba0:	2201      	movgt	r2, #1
 800eba2:	2300      	movs	r3, #0
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	ec41 0b10 	vmov	d0, r0, r1
 800ebac:	b002      	add	sp, #8
 800ebae:	4770      	bx	lr
 800ebb0:	7ff00000 	.word	0x7ff00000

0800ebb4 <__b2d>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	6906      	ldr	r6, [r0, #16]
 800ebba:	f100 0814 	add.w	r8, r0, #20
 800ebbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ebc2:	1f37      	subs	r7, r6, #4
 800ebc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7ff fd53 	bl	800e674 <__hi0bits>
 800ebce:	f1c0 0320 	rsb	r3, r0, #32
 800ebd2:	280a      	cmp	r0, #10
 800ebd4:	600b      	str	r3, [r1, #0]
 800ebd6:	491b      	ldr	r1, [pc, #108]	; (800ec44 <__b2d+0x90>)
 800ebd8:	dc15      	bgt.n	800ec06 <__b2d+0x52>
 800ebda:	f1c0 0c0b 	rsb	ip, r0, #11
 800ebde:	fa22 f30c 	lsr.w	r3, r2, ip
 800ebe2:	45b8      	cmp	r8, r7
 800ebe4:	ea43 0501 	orr.w	r5, r3, r1
 800ebe8:	bf34      	ite	cc
 800ebea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ebee:	2300      	movcs	r3, #0
 800ebf0:	3015      	adds	r0, #21
 800ebf2:	fa02 f000 	lsl.w	r0, r2, r0
 800ebf6:	fa23 f30c 	lsr.w	r3, r3, ip
 800ebfa:	4303      	orrs	r3, r0
 800ebfc:	461c      	mov	r4, r3
 800ebfe:	ec45 4b10 	vmov	d0, r4, r5
 800ec02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec06:	45b8      	cmp	r8, r7
 800ec08:	bf3a      	itte	cc
 800ec0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec0e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ec12:	2300      	movcs	r3, #0
 800ec14:	380b      	subs	r0, #11
 800ec16:	d012      	beq.n	800ec3e <__b2d+0x8a>
 800ec18:	f1c0 0120 	rsb	r1, r0, #32
 800ec1c:	fa23 f401 	lsr.w	r4, r3, r1
 800ec20:	4082      	lsls	r2, r0
 800ec22:	4322      	orrs	r2, r4
 800ec24:	4547      	cmp	r7, r8
 800ec26:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ec2a:	bf8c      	ite	hi
 800ec2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ec30:	2200      	movls	r2, #0
 800ec32:	4083      	lsls	r3, r0
 800ec34:	40ca      	lsrs	r2, r1
 800ec36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	e7de      	b.n	800ebfc <__b2d+0x48>
 800ec3e:	ea42 0501 	orr.w	r5, r2, r1
 800ec42:	e7db      	b.n	800ebfc <__b2d+0x48>
 800ec44:	3ff00000 	.word	0x3ff00000

0800ec48 <__d2b>:
 800ec48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	2101      	movs	r1, #1
 800ec50:	ec59 8b10 	vmov	r8, r9, d0
 800ec54:	4616      	mov	r6, r2
 800ec56:	f7ff fc1b 	bl	800e490 <_Balloc>
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	b930      	cbnz	r0, 800ec6c <__d2b+0x24>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	4b24      	ldr	r3, [pc, #144]	; (800ecf4 <__d2b+0xac>)
 800ec62:	4825      	ldr	r0, [pc, #148]	; (800ecf8 <__d2b+0xb0>)
 800ec64:	f240 310f 	movw	r1, #783	; 0x30f
 800ec68:	f000 fafc 	bl	800f264 <__assert_func>
 800ec6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec74:	bb2d      	cbnz	r5, 800ecc2 <__d2b+0x7a>
 800ec76:	9301      	str	r3, [sp, #4]
 800ec78:	f1b8 0300 	subs.w	r3, r8, #0
 800ec7c:	d026      	beq.n	800eccc <__d2b+0x84>
 800ec7e:	4668      	mov	r0, sp
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	f7ff fd17 	bl	800e6b4 <__lo0bits>
 800ec86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec8a:	b1e8      	cbz	r0, 800ecc8 <__d2b+0x80>
 800ec8c:	f1c0 0320 	rsb	r3, r0, #32
 800ec90:	fa02 f303 	lsl.w	r3, r2, r3
 800ec94:	430b      	orrs	r3, r1
 800ec96:	40c2      	lsrs	r2, r0
 800ec98:	6163      	str	r3, [r4, #20]
 800ec9a:	9201      	str	r2, [sp, #4]
 800ec9c:	9b01      	ldr	r3, [sp, #4]
 800ec9e:	61a3      	str	r3, [r4, #24]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	bf14      	ite	ne
 800eca4:	2202      	movne	r2, #2
 800eca6:	2201      	moveq	r2, #1
 800eca8:	6122      	str	r2, [r4, #16]
 800ecaa:	b1bd      	cbz	r5, 800ecdc <__d2b+0x94>
 800ecac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecb0:	4405      	add	r5, r0
 800ecb2:	603d      	str	r5, [r7, #0]
 800ecb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecb8:	6030      	str	r0, [r6, #0]
 800ecba:	4620      	mov	r0, r4
 800ecbc:	b003      	add	sp, #12
 800ecbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecc6:	e7d6      	b.n	800ec76 <__d2b+0x2e>
 800ecc8:	6161      	str	r1, [r4, #20]
 800ecca:	e7e7      	b.n	800ec9c <__d2b+0x54>
 800eccc:	a801      	add	r0, sp, #4
 800ecce:	f7ff fcf1 	bl	800e6b4 <__lo0bits>
 800ecd2:	9b01      	ldr	r3, [sp, #4]
 800ecd4:	6163      	str	r3, [r4, #20]
 800ecd6:	3020      	adds	r0, #32
 800ecd8:	2201      	movs	r2, #1
 800ecda:	e7e5      	b.n	800eca8 <__d2b+0x60>
 800ecdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ece0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ece4:	6038      	str	r0, [r7, #0]
 800ece6:	6918      	ldr	r0, [r3, #16]
 800ece8:	f7ff fcc4 	bl	800e674 <__hi0bits>
 800ecec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecf0:	e7e2      	b.n	800ecb8 <__d2b+0x70>
 800ecf2:	bf00      	nop
 800ecf4:	0800fbb0 	.word	0x0800fbb0
 800ecf8:	0800fc21 	.word	0x0800fc21

0800ecfc <__ratio>:
 800ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	4688      	mov	r8, r1
 800ed02:	4669      	mov	r1, sp
 800ed04:	4681      	mov	r9, r0
 800ed06:	f7ff ff55 	bl	800ebb4 <__b2d>
 800ed0a:	a901      	add	r1, sp, #4
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	ec55 4b10 	vmov	r4, r5, d0
 800ed12:	f7ff ff4f 	bl	800ebb4 <__b2d>
 800ed16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed1e:	eba3 0c02 	sub.w	ip, r3, r2
 800ed22:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed26:	1a9b      	subs	r3, r3, r2
 800ed28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed2c:	ec51 0b10 	vmov	r0, r1, d0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bfd6      	itet	le
 800ed34:	460a      	movle	r2, r1
 800ed36:	462a      	movgt	r2, r5
 800ed38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed3c:	468b      	mov	fp, r1
 800ed3e:	462f      	mov	r7, r5
 800ed40:	bfd4      	ite	le
 800ed42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	ee10 2a10 	vmov	r2, s0
 800ed50:	465b      	mov	r3, fp
 800ed52:	4639      	mov	r1, r7
 800ed54:	f7f1 fd7a 	bl	800084c <__aeabi_ddiv>
 800ed58:	ec41 0b10 	vmov	d0, r0, r1
 800ed5c:	b003      	add	sp, #12
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed62 <__copybits>:
 800ed62:	3901      	subs	r1, #1
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	1149      	asrs	r1, r1, #5
 800ed68:	6914      	ldr	r4, [r2, #16]
 800ed6a:	3101      	adds	r1, #1
 800ed6c:	f102 0314 	add.w	r3, r2, #20
 800ed70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed78:	1f05      	subs	r5, r0, #4
 800ed7a:	42a3      	cmp	r3, r4
 800ed7c:	d30c      	bcc.n	800ed98 <__copybits+0x36>
 800ed7e:	1aa3      	subs	r3, r4, r2
 800ed80:	3b11      	subs	r3, #17
 800ed82:	f023 0303 	bic.w	r3, r3, #3
 800ed86:	3211      	adds	r2, #17
 800ed88:	42a2      	cmp	r2, r4
 800ed8a:	bf88      	it	hi
 800ed8c:	2300      	movhi	r3, #0
 800ed8e:	4418      	add	r0, r3
 800ed90:	2300      	movs	r3, #0
 800ed92:	4288      	cmp	r0, r1
 800ed94:	d305      	bcc.n	800eda2 <__copybits+0x40>
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eda0:	e7eb      	b.n	800ed7a <__copybits+0x18>
 800eda2:	f840 3b04 	str.w	r3, [r0], #4
 800eda6:	e7f4      	b.n	800ed92 <__copybits+0x30>

0800eda8 <__any_on>:
 800eda8:	f100 0214 	add.w	r2, r0, #20
 800edac:	6900      	ldr	r0, [r0, #16]
 800edae:	114b      	asrs	r3, r1, #5
 800edb0:	4298      	cmp	r0, r3
 800edb2:	b510      	push	{r4, lr}
 800edb4:	db11      	blt.n	800edda <__any_on+0x32>
 800edb6:	dd0a      	ble.n	800edce <__any_on+0x26>
 800edb8:	f011 011f 	ands.w	r1, r1, #31
 800edbc:	d007      	beq.n	800edce <__any_on+0x26>
 800edbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edc2:	fa24 f001 	lsr.w	r0, r4, r1
 800edc6:	fa00 f101 	lsl.w	r1, r0, r1
 800edca:	428c      	cmp	r4, r1
 800edcc:	d10b      	bne.n	800ede6 <__any_on+0x3e>
 800edce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d803      	bhi.n	800edde <__any_on+0x36>
 800edd6:	2000      	movs	r0, #0
 800edd8:	bd10      	pop	{r4, pc}
 800edda:	4603      	mov	r3, r0
 800eddc:	e7f7      	b.n	800edce <__any_on+0x26>
 800edde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ede2:	2900      	cmp	r1, #0
 800ede4:	d0f5      	beq.n	800edd2 <__any_on+0x2a>
 800ede6:	2001      	movs	r0, #1
 800ede8:	e7f6      	b.n	800edd8 <__any_on+0x30>

0800edea <__ascii_wctomb>:
 800edea:	b149      	cbz	r1, 800ee00 <__ascii_wctomb+0x16>
 800edec:	2aff      	cmp	r2, #255	; 0xff
 800edee:	bf85      	ittet	hi
 800edf0:	238a      	movhi	r3, #138	; 0x8a
 800edf2:	6003      	strhi	r3, [r0, #0]
 800edf4:	700a      	strbls	r2, [r1, #0]
 800edf6:	f04f 30ff 	movhi.w	r0, #4294967295
 800edfa:	bf98      	it	ls
 800edfc:	2001      	movls	r0, #1
 800edfe:	4770      	bx	lr
 800ee00:	4608      	mov	r0, r1
 800ee02:	4770      	bx	lr

0800ee04 <__ssputs_r>:
 800ee04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee08:	688e      	ldr	r6, [r1, #8]
 800ee0a:	461f      	mov	r7, r3
 800ee0c:	42be      	cmp	r6, r7
 800ee0e:	680b      	ldr	r3, [r1, #0]
 800ee10:	4682      	mov	sl, r0
 800ee12:	460c      	mov	r4, r1
 800ee14:	4690      	mov	r8, r2
 800ee16:	d82c      	bhi.n	800ee72 <__ssputs_r+0x6e>
 800ee18:	898a      	ldrh	r2, [r1, #12]
 800ee1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee1e:	d026      	beq.n	800ee6e <__ssputs_r+0x6a>
 800ee20:	6965      	ldr	r5, [r4, #20]
 800ee22:	6909      	ldr	r1, [r1, #16]
 800ee24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee28:	eba3 0901 	sub.w	r9, r3, r1
 800ee2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee30:	1c7b      	adds	r3, r7, #1
 800ee32:	444b      	add	r3, r9
 800ee34:	106d      	asrs	r5, r5, #1
 800ee36:	429d      	cmp	r5, r3
 800ee38:	bf38      	it	cc
 800ee3a:	461d      	movcc	r5, r3
 800ee3c:	0553      	lsls	r3, r2, #21
 800ee3e:	d527      	bpl.n	800ee90 <__ssputs_r+0x8c>
 800ee40:	4629      	mov	r1, r5
 800ee42:	f7ff fa87 	bl	800e354 <_malloc_r>
 800ee46:	4606      	mov	r6, r0
 800ee48:	b360      	cbz	r0, 800eea4 <__ssputs_r+0xa0>
 800ee4a:	6921      	ldr	r1, [r4, #16]
 800ee4c:	464a      	mov	r2, r9
 800ee4e:	f7fe f823 	bl	800ce98 <memcpy>
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee5c:	81a3      	strh	r3, [r4, #12]
 800ee5e:	6126      	str	r6, [r4, #16]
 800ee60:	6165      	str	r5, [r4, #20]
 800ee62:	444e      	add	r6, r9
 800ee64:	eba5 0509 	sub.w	r5, r5, r9
 800ee68:	6026      	str	r6, [r4, #0]
 800ee6a:	60a5      	str	r5, [r4, #8]
 800ee6c:	463e      	mov	r6, r7
 800ee6e:	42be      	cmp	r6, r7
 800ee70:	d900      	bls.n	800ee74 <__ssputs_r+0x70>
 800ee72:	463e      	mov	r6, r7
 800ee74:	6820      	ldr	r0, [r4, #0]
 800ee76:	4632      	mov	r2, r6
 800ee78:	4641      	mov	r1, r8
 800ee7a:	f000 f9c9 	bl	800f210 <memmove>
 800ee7e:	68a3      	ldr	r3, [r4, #8]
 800ee80:	1b9b      	subs	r3, r3, r6
 800ee82:	60a3      	str	r3, [r4, #8]
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	4433      	add	r3, r6
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee90:	462a      	mov	r2, r5
 800ee92:	f000 fa1b 	bl	800f2cc <_realloc_r>
 800ee96:	4606      	mov	r6, r0
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d1e0      	bne.n	800ee5e <__ssputs_r+0x5a>
 800ee9c:	6921      	ldr	r1, [r4, #16]
 800ee9e:	4650      	mov	r0, sl
 800eea0:	f7fe fe8c 	bl	800dbbc <_free_r>
 800eea4:	230c      	movs	r3, #12
 800eea6:	f8ca 3000 	str.w	r3, [sl]
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeb0:	81a3      	strh	r3, [r4, #12]
 800eeb2:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb6:	e7e9      	b.n	800ee8c <__ssputs_r+0x88>

0800eeb8 <_svfiprintf_r>:
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	4698      	mov	r8, r3
 800eebe:	898b      	ldrh	r3, [r1, #12]
 800eec0:	061b      	lsls	r3, r3, #24
 800eec2:	b09d      	sub	sp, #116	; 0x74
 800eec4:	4607      	mov	r7, r0
 800eec6:	460d      	mov	r5, r1
 800eec8:	4614      	mov	r4, r2
 800eeca:	d50e      	bpl.n	800eeea <_svfiprintf_r+0x32>
 800eecc:	690b      	ldr	r3, [r1, #16]
 800eece:	b963      	cbnz	r3, 800eeea <_svfiprintf_r+0x32>
 800eed0:	2140      	movs	r1, #64	; 0x40
 800eed2:	f7ff fa3f 	bl	800e354 <_malloc_r>
 800eed6:	6028      	str	r0, [r5, #0]
 800eed8:	6128      	str	r0, [r5, #16]
 800eeda:	b920      	cbnz	r0, 800eee6 <_svfiprintf_r+0x2e>
 800eedc:	230c      	movs	r3, #12
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	e0d0      	b.n	800f088 <_svfiprintf_r+0x1d0>
 800eee6:	2340      	movs	r3, #64	; 0x40
 800eee8:	616b      	str	r3, [r5, #20]
 800eeea:	2300      	movs	r3, #0
 800eeec:	9309      	str	r3, [sp, #36]	; 0x24
 800eeee:	2320      	movs	r3, #32
 800eef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eef4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eef8:	2330      	movs	r3, #48	; 0x30
 800eefa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f0a0 <_svfiprintf_r+0x1e8>
 800eefe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef02:	f04f 0901 	mov.w	r9, #1
 800ef06:	4623      	mov	r3, r4
 800ef08:	469a      	mov	sl, r3
 800ef0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef0e:	b10a      	cbz	r2, 800ef14 <_svfiprintf_r+0x5c>
 800ef10:	2a25      	cmp	r2, #37	; 0x25
 800ef12:	d1f9      	bne.n	800ef08 <_svfiprintf_r+0x50>
 800ef14:	ebba 0b04 	subs.w	fp, sl, r4
 800ef18:	d00b      	beq.n	800ef32 <_svfiprintf_r+0x7a>
 800ef1a:	465b      	mov	r3, fp
 800ef1c:	4622      	mov	r2, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	4638      	mov	r0, r7
 800ef22:	f7ff ff6f 	bl	800ee04 <__ssputs_r>
 800ef26:	3001      	adds	r0, #1
 800ef28:	f000 80a9 	beq.w	800f07e <_svfiprintf_r+0x1c6>
 800ef2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef2e:	445a      	add	r2, fp
 800ef30:	9209      	str	r2, [sp, #36]	; 0x24
 800ef32:	f89a 3000 	ldrb.w	r3, [sl]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 80a1 	beq.w	800f07e <_svfiprintf_r+0x1c6>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef46:	f10a 0a01 	add.w	sl, sl, #1
 800ef4a:	9304      	str	r3, [sp, #16]
 800ef4c:	9307      	str	r3, [sp, #28]
 800ef4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef52:	931a      	str	r3, [sp, #104]	; 0x68
 800ef54:	4654      	mov	r4, sl
 800ef56:	2205      	movs	r2, #5
 800ef58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5c:	4850      	ldr	r0, [pc, #320]	; (800f0a0 <_svfiprintf_r+0x1e8>)
 800ef5e:	f7f1 f937 	bl	80001d0 <memchr>
 800ef62:	9a04      	ldr	r2, [sp, #16]
 800ef64:	b9d8      	cbnz	r0, 800ef9e <_svfiprintf_r+0xe6>
 800ef66:	06d0      	lsls	r0, r2, #27
 800ef68:	bf44      	itt	mi
 800ef6a:	2320      	movmi	r3, #32
 800ef6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef70:	0711      	lsls	r1, r2, #28
 800ef72:	bf44      	itt	mi
 800ef74:	232b      	movmi	r3, #43	; 0x2b
 800ef76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef80:	d015      	beq.n	800efae <_svfiprintf_r+0xf6>
 800ef82:	9a07      	ldr	r2, [sp, #28]
 800ef84:	4654      	mov	r4, sl
 800ef86:	2000      	movs	r0, #0
 800ef88:	f04f 0c0a 	mov.w	ip, #10
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef92:	3b30      	subs	r3, #48	; 0x30
 800ef94:	2b09      	cmp	r3, #9
 800ef96:	d94d      	bls.n	800f034 <_svfiprintf_r+0x17c>
 800ef98:	b1b0      	cbz	r0, 800efc8 <_svfiprintf_r+0x110>
 800ef9a:	9207      	str	r2, [sp, #28]
 800ef9c:	e014      	b.n	800efc8 <_svfiprintf_r+0x110>
 800ef9e:	eba0 0308 	sub.w	r3, r0, r8
 800efa2:	fa09 f303 	lsl.w	r3, r9, r3
 800efa6:	4313      	orrs	r3, r2
 800efa8:	9304      	str	r3, [sp, #16]
 800efaa:	46a2      	mov	sl, r4
 800efac:	e7d2      	b.n	800ef54 <_svfiprintf_r+0x9c>
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	1d19      	adds	r1, r3, #4
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	9103      	str	r1, [sp, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	bfbb      	ittet	lt
 800efba:	425b      	neglt	r3, r3
 800efbc:	f042 0202 	orrlt.w	r2, r2, #2
 800efc0:	9307      	strge	r3, [sp, #28]
 800efc2:	9307      	strlt	r3, [sp, #28]
 800efc4:	bfb8      	it	lt
 800efc6:	9204      	strlt	r2, [sp, #16]
 800efc8:	7823      	ldrb	r3, [r4, #0]
 800efca:	2b2e      	cmp	r3, #46	; 0x2e
 800efcc:	d10c      	bne.n	800efe8 <_svfiprintf_r+0x130>
 800efce:	7863      	ldrb	r3, [r4, #1]
 800efd0:	2b2a      	cmp	r3, #42	; 0x2a
 800efd2:	d134      	bne.n	800f03e <_svfiprintf_r+0x186>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	1d1a      	adds	r2, r3, #4
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	9203      	str	r2, [sp, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	bfb8      	it	lt
 800efe0:	f04f 33ff 	movlt.w	r3, #4294967295
 800efe4:	3402      	adds	r4, #2
 800efe6:	9305      	str	r3, [sp, #20]
 800efe8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f0b0 <_svfiprintf_r+0x1f8>
 800efec:	7821      	ldrb	r1, [r4, #0]
 800efee:	2203      	movs	r2, #3
 800eff0:	4650      	mov	r0, sl
 800eff2:	f7f1 f8ed 	bl	80001d0 <memchr>
 800eff6:	b138      	cbz	r0, 800f008 <_svfiprintf_r+0x150>
 800eff8:	9b04      	ldr	r3, [sp, #16]
 800effa:	eba0 000a 	sub.w	r0, r0, sl
 800effe:	2240      	movs	r2, #64	; 0x40
 800f000:	4082      	lsls	r2, r0
 800f002:	4313      	orrs	r3, r2
 800f004:	3401      	adds	r4, #1
 800f006:	9304      	str	r3, [sp, #16]
 800f008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f00c:	4825      	ldr	r0, [pc, #148]	; (800f0a4 <_svfiprintf_r+0x1ec>)
 800f00e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f012:	2206      	movs	r2, #6
 800f014:	f7f1 f8dc 	bl	80001d0 <memchr>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d038      	beq.n	800f08e <_svfiprintf_r+0x1d6>
 800f01c:	4b22      	ldr	r3, [pc, #136]	; (800f0a8 <_svfiprintf_r+0x1f0>)
 800f01e:	bb1b      	cbnz	r3, 800f068 <_svfiprintf_r+0x1b0>
 800f020:	9b03      	ldr	r3, [sp, #12]
 800f022:	3307      	adds	r3, #7
 800f024:	f023 0307 	bic.w	r3, r3, #7
 800f028:	3308      	adds	r3, #8
 800f02a:	9303      	str	r3, [sp, #12]
 800f02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02e:	4433      	add	r3, r6
 800f030:	9309      	str	r3, [sp, #36]	; 0x24
 800f032:	e768      	b.n	800ef06 <_svfiprintf_r+0x4e>
 800f034:	fb0c 3202 	mla	r2, ip, r2, r3
 800f038:	460c      	mov	r4, r1
 800f03a:	2001      	movs	r0, #1
 800f03c:	e7a6      	b.n	800ef8c <_svfiprintf_r+0xd4>
 800f03e:	2300      	movs	r3, #0
 800f040:	3401      	adds	r4, #1
 800f042:	9305      	str	r3, [sp, #20]
 800f044:	4619      	mov	r1, r3
 800f046:	f04f 0c0a 	mov.w	ip, #10
 800f04a:	4620      	mov	r0, r4
 800f04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f050:	3a30      	subs	r2, #48	; 0x30
 800f052:	2a09      	cmp	r2, #9
 800f054:	d903      	bls.n	800f05e <_svfiprintf_r+0x1a6>
 800f056:	2b00      	cmp	r3, #0
 800f058:	d0c6      	beq.n	800efe8 <_svfiprintf_r+0x130>
 800f05a:	9105      	str	r1, [sp, #20]
 800f05c:	e7c4      	b.n	800efe8 <_svfiprintf_r+0x130>
 800f05e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f062:	4604      	mov	r4, r0
 800f064:	2301      	movs	r3, #1
 800f066:	e7f0      	b.n	800f04a <_svfiprintf_r+0x192>
 800f068:	ab03      	add	r3, sp, #12
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	462a      	mov	r2, r5
 800f06e:	4b0f      	ldr	r3, [pc, #60]	; (800f0ac <_svfiprintf_r+0x1f4>)
 800f070:	a904      	add	r1, sp, #16
 800f072:	4638      	mov	r0, r7
 800f074:	f7fd f950 	bl	800c318 <_printf_float>
 800f078:	1c42      	adds	r2, r0, #1
 800f07a:	4606      	mov	r6, r0
 800f07c:	d1d6      	bne.n	800f02c <_svfiprintf_r+0x174>
 800f07e:	89ab      	ldrh	r3, [r5, #12]
 800f080:	065b      	lsls	r3, r3, #25
 800f082:	f53f af2d 	bmi.w	800eee0 <_svfiprintf_r+0x28>
 800f086:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f088:	b01d      	add	sp, #116	; 0x74
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	ab03      	add	r3, sp, #12
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	462a      	mov	r2, r5
 800f094:	4b05      	ldr	r3, [pc, #20]	; (800f0ac <_svfiprintf_r+0x1f4>)
 800f096:	a904      	add	r1, sp, #16
 800f098:	4638      	mov	r0, r7
 800f09a:	f7fd fbe1 	bl	800c860 <_printf_i>
 800f09e:	e7eb      	b.n	800f078 <_svfiprintf_r+0x1c0>
 800f0a0:	0800fe7d 	.word	0x0800fe7d
 800f0a4:	0800fe87 	.word	0x0800fe87
 800f0a8:	0800c319 	.word	0x0800c319
 800f0ac:	0800ee05 	.word	0x0800ee05
 800f0b0:	0800fe83 	.word	0x0800fe83

0800f0b4 <__sflush_r>:
 800f0b4:	898a      	ldrh	r2, [r1, #12]
 800f0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	0710      	lsls	r0, r2, #28
 800f0be:	460c      	mov	r4, r1
 800f0c0:	d458      	bmi.n	800f174 <__sflush_r+0xc0>
 800f0c2:	684b      	ldr	r3, [r1, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dc05      	bgt.n	800f0d4 <__sflush_r+0x20>
 800f0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	dc02      	bgt.n	800f0d4 <__sflush_r+0x20>
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0d6:	2e00      	cmp	r6, #0
 800f0d8:	d0f9      	beq.n	800f0ce <__sflush_r+0x1a>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0e0:	682f      	ldr	r7, [r5, #0]
 800f0e2:	6a21      	ldr	r1, [r4, #32]
 800f0e4:	602b      	str	r3, [r5, #0]
 800f0e6:	d032      	beq.n	800f14e <__sflush_r+0x9a>
 800f0e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	075a      	lsls	r2, r3, #29
 800f0ee:	d505      	bpl.n	800f0fc <__sflush_r+0x48>
 800f0f0:	6863      	ldr	r3, [r4, #4]
 800f0f2:	1ac0      	subs	r0, r0, r3
 800f0f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0f6:	b10b      	cbz	r3, 800f0fc <__sflush_r+0x48>
 800f0f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0fa:	1ac0      	subs	r0, r0, r3
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4602      	mov	r2, r0
 800f100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f102:	6a21      	ldr	r1, [r4, #32]
 800f104:	4628      	mov	r0, r5
 800f106:	47b0      	blx	r6
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	d106      	bne.n	800f11c <__sflush_r+0x68>
 800f10e:	6829      	ldr	r1, [r5, #0]
 800f110:	291d      	cmp	r1, #29
 800f112:	d82b      	bhi.n	800f16c <__sflush_r+0xb8>
 800f114:	4a29      	ldr	r2, [pc, #164]	; (800f1bc <__sflush_r+0x108>)
 800f116:	410a      	asrs	r2, r1
 800f118:	07d6      	lsls	r6, r2, #31
 800f11a:	d427      	bmi.n	800f16c <__sflush_r+0xb8>
 800f11c:	2200      	movs	r2, #0
 800f11e:	6062      	str	r2, [r4, #4]
 800f120:	04d9      	lsls	r1, r3, #19
 800f122:	6922      	ldr	r2, [r4, #16]
 800f124:	6022      	str	r2, [r4, #0]
 800f126:	d504      	bpl.n	800f132 <__sflush_r+0x7e>
 800f128:	1c42      	adds	r2, r0, #1
 800f12a:	d101      	bne.n	800f130 <__sflush_r+0x7c>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b903      	cbnz	r3, 800f132 <__sflush_r+0x7e>
 800f130:	6560      	str	r0, [r4, #84]	; 0x54
 800f132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f134:	602f      	str	r7, [r5, #0]
 800f136:	2900      	cmp	r1, #0
 800f138:	d0c9      	beq.n	800f0ce <__sflush_r+0x1a>
 800f13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f13e:	4299      	cmp	r1, r3
 800f140:	d002      	beq.n	800f148 <__sflush_r+0x94>
 800f142:	4628      	mov	r0, r5
 800f144:	f7fe fd3a 	bl	800dbbc <_free_r>
 800f148:	2000      	movs	r0, #0
 800f14a:	6360      	str	r0, [r4, #52]	; 0x34
 800f14c:	e7c0      	b.n	800f0d0 <__sflush_r+0x1c>
 800f14e:	2301      	movs	r3, #1
 800f150:	4628      	mov	r0, r5
 800f152:	47b0      	blx	r6
 800f154:	1c41      	adds	r1, r0, #1
 800f156:	d1c8      	bne.n	800f0ea <__sflush_r+0x36>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d0c5      	beq.n	800f0ea <__sflush_r+0x36>
 800f15e:	2b1d      	cmp	r3, #29
 800f160:	d001      	beq.n	800f166 <__sflush_r+0xb2>
 800f162:	2b16      	cmp	r3, #22
 800f164:	d101      	bne.n	800f16a <__sflush_r+0xb6>
 800f166:	602f      	str	r7, [r5, #0]
 800f168:	e7b1      	b.n	800f0ce <__sflush_r+0x1a>
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f170:	81a3      	strh	r3, [r4, #12]
 800f172:	e7ad      	b.n	800f0d0 <__sflush_r+0x1c>
 800f174:	690f      	ldr	r7, [r1, #16]
 800f176:	2f00      	cmp	r7, #0
 800f178:	d0a9      	beq.n	800f0ce <__sflush_r+0x1a>
 800f17a:	0793      	lsls	r3, r2, #30
 800f17c:	680e      	ldr	r6, [r1, #0]
 800f17e:	bf08      	it	eq
 800f180:	694b      	ldreq	r3, [r1, #20]
 800f182:	600f      	str	r7, [r1, #0]
 800f184:	bf18      	it	ne
 800f186:	2300      	movne	r3, #0
 800f188:	eba6 0807 	sub.w	r8, r6, r7
 800f18c:	608b      	str	r3, [r1, #8]
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	dd9c      	ble.n	800f0ce <__sflush_r+0x1a>
 800f194:	6a21      	ldr	r1, [r4, #32]
 800f196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f198:	4643      	mov	r3, r8
 800f19a:	463a      	mov	r2, r7
 800f19c:	4628      	mov	r0, r5
 800f19e:	47b0      	blx	r6
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	dc06      	bgt.n	800f1b2 <__sflush_r+0xfe>
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b0:	e78e      	b.n	800f0d0 <__sflush_r+0x1c>
 800f1b2:	4407      	add	r7, r0
 800f1b4:	eba8 0800 	sub.w	r8, r8, r0
 800f1b8:	e7e9      	b.n	800f18e <__sflush_r+0xda>
 800f1ba:	bf00      	nop
 800f1bc:	dfbffffe 	.word	0xdfbffffe

0800f1c0 <_fflush_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	690b      	ldr	r3, [r1, #16]
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	b913      	cbnz	r3, 800f1d0 <_fflush_r+0x10>
 800f1ca:	2500      	movs	r5, #0
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	b118      	cbz	r0, 800f1da <_fflush_r+0x1a>
 800f1d2:	6a03      	ldr	r3, [r0, #32]
 800f1d4:	b90b      	cbnz	r3, 800f1da <_fflush_r+0x1a>
 800f1d6:	f7fd fcdf 	bl	800cb98 <__sinit>
 800f1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0f3      	beq.n	800f1ca <_fflush_r+0xa>
 800f1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1e4:	07d0      	lsls	r0, r2, #31
 800f1e6:	d404      	bmi.n	800f1f2 <_fflush_r+0x32>
 800f1e8:	0599      	lsls	r1, r3, #22
 800f1ea:	d402      	bmi.n	800f1f2 <_fflush_r+0x32>
 800f1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ee:	f7fd fe51 	bl	800ce94 <__retarget_lock_acquire_recursive>
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	f7ff ff5d 	bl	800f0b4 <__sflush_r>
 800f1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1fc:	07da      	lsls	r2, r3, #31
 800f1fe:	4605      	mov	r5, r0
 800f200:	d4e4      	bmi.n	800f1cc <_fflush_r+0xc>
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	059b      	lsls	r3, r3, #22
 800f206:	d4e1      	bmi.n	800f1cc <_fflush_r+0xc>
 800f208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f20a:	f7fd fe44 	bl	800ce96 <__retarget_lock_release_recursive>
 800f20e:	e7dd      	b.n	800f1cc <_fflush_r+0xc>

0800f210 <memmove>:
 800f210:	4288      	cmp	r0, r1
 800f212:	b510      	push	{r4, lr}
 800f214:	eb01 0402 	add.w	r4, r1, r2
 800f218:	d902      	bls.n	800f220 <memmove+0x10>
 800f21a:	4284      	cmp	r4, r0
 800f21c:	4623      	mov	r3, r4
 800f21e:	d807      	bhi.n	800f230 <memmove+0x20>
 800f220:	1e43      	subs	r3, r0, #1
 800f222:	42a1      	cmp	r1, r4
 800f224:	d008      	beq.n	800f238 <memmove+0x28>
 800f226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f22e:	e7f8      	b.n	800f222 <memmove+0x12>
 800f230:	4402      	add	r2, r0
 800f232:	4601      	mov	r1, r0
 800f234:	428a      	cmp	r2, r1
 800f236:	d100      	bne.n	800f23a <memmove+0x2a>
 800f238:	bd10      	pop	{r4, pc}
 800f23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f242:	e7f7      	b.n	800f234 <memmove+0x24>

0800f244 <_sbrk_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4d06      	ldr	r5, [pc, #24]	; (800f260 <_sbrk_r+0x1c>)
 800f248:	2300      	movs	r3, #0
 800f24a:	4604      	mov	r4, r0
 800f24c:	4608      	mov	r0, r1
 800f24e:	602b      	str	r3, [r5, #0]
 800f250:	f7f3 f862 	bl	8002318 <_sbrk>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d102      	bne.n	800f25e <_sbrk_r+0x1a>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	b103      	cbz	r3, 800f25e <_sbrk_r+0x1a>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	20003178 	.word	0x20003178

0800f264 <__assert_func>:
 800f264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f266:	4614      	mov	r4, r2
 800f268:	461a      	mov	r2, r3
 800f26a:	4b09      	ldr	r3, [pc, #36]	; (800f290 <__assert_func+0x2c>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4605      	mov	r5, r0
 800f270:	68d8      	ldr	r0, [r3, #12]
 800f272:	b14c      	cbz	r4, 800f288 <__assert_func+0x24>
 800f274:	4b07      	ldr	r3, [pc, #28]	; (800f294 <__assert_func+0x30>)
 800f276:	9100      	str	r1, [sp, #0]
 800f278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f27c:	4906      	ldr	r1, [pc, #24]	; (800f298 <__assert_func+0x34>)
 800f27e:	462b      	mov	r3, r5
 800f280:	f000 f854 	bl	800f32c <fiprintf>
 800f284:	f000 f864 	bl	800f350 <abort>
 800f288:	4b04      	ldr	r3, [pc, #16]	; (800f29c <__assert_func+0x38>)
 800f28a:	461c      	mov	r4, r3
 800f28c:	e7f3      	b.n	800f276 <__assert_func+0x12>
 800f28e:	bf00      	nop
 800f290:	200001d4 	.word	0x200001d4
 800f294:	0800fe8e 	.word	0x0800fe8e
 800f298:	0800fe9b 	.word	0x0800fe9b
 800f29c:	0800fec9 	.word	0x0800fec9

0800f2a0 <_calloc_r>:
 800f2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2a2:	fba1 2402 	umull	r2, r4, r1, r2
 800f2a6:	b94c      	cbnz	r4, 800f2bc <_calloc_r+0x1c>
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	9201      	str	r2, [sp, #4]
 800f2ac:	f7ff f852 	bl	800e354 <_malloc_r>
 800f2b0:	9a01      	ldr	r2, [sp, #4]
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	b930      	cbnz	r0, 800f2c4 <_calloc_r+0x24>
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	b003      	add	sp, #12
 800f2ba:	bd30      	pop	{r4, r5, pc}
 800f2bc:	220c      	movs	r2, #12
 800f2be:	6002      	str	r2, [r0, #0]
 800f2c0:	2500      	movs	r5, #0
 800f2c2:	e7f8      	b.n	800f2b6 <_calloc_r+0x16>
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	f7fd fd00 	bl	800ccca <memset>
 800f2ca:	e7f4      	b.n	800f2b6 <_calloc_r+0x16>

0800f2cc <_realloc_r>:
 800f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d0:	4680      	mov	r8, r0
 800f2d2:	4614      	mov	r4, r2
 800f2d4:	460e      	mov	r6, r1
 800f2d6:	b921      	cbnz	r1, 800f2e2 <_realloc_r+0x16>
 800f2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2dc:	4611      	mov	r1, r2
 800f2de:	f7ff b839 	b.w	800e354 <_malloc_r>
 800f2e2:	b92a      	cbnz	r2, 800f2f0 <_realloc_r+0x24>
 800f2e4:	f7fe fc6a 	bl	800dbbc <_free_r>
 800f2e8:	4625      	mov	r5, r4
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	f000 f835 	bl	800f35e <_malloc_usable_size_r>
 800f2f4:	4284      	cmp	r4, r0
 800f2f6:	4607      	mov	r7, r0
 800f2f8:	d802      	bhi.n	800f300 <_realloc_r+0x34>
 800f2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2fe:	d812      	bhi.n	800f326 <_realloc_r+0x5a>
 800f300:	4621      	mov	r1, r4
 800f302:	4640      	mov	r0, r8
 800f304:	f7ff f826 	bl	800e354 <_malloc_r>
 800f308:	4605      	mov	r5, r0
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d0ed      	beq.n	800f2ea <_realloc_r+0x1e>
 800f30e:	42bc      	cmp	r4, r7
 800f310:	4622      	mov	r2, r4
 800f312:	4631      	mov	r1, r6
 800f314:	bf28      	it	cs
 800f316:	463a      	movcs	r2, r7
 800f318:	f7fd fdbe 	bl	800ce98 <memcpy>
 800f31c:	4631      	mov	r1, r6
 800f31e:	4640      	mov	r0, r8
 800f320:	f7fe fc4c 	bl	800dbbc <_free_r>
 800f324:	e7e1      	b.n	800f2ea <_realloc_r+0x1e>
 800f326:	4635      	mov	r5, r6
 800f328:	e7df      	b.n	800f2ea <_realloc_r+0x1e>
	...

0800f32c <fiprintf>:
 800f32c:	b40e      	push	{r1, r2, r3}
 800f32e:	b503      	push	{r0, r1, lr}
 800f330:	4601      	mov	r1, r0
 800f332:	ab03      	add	r3, sp, #12
 800f334:	4805      	ldr	r0, [pc, #20]	; (800f34c <fiprintf+0x20>)
 800f336:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33a:	6800      	ldr	r0, [r0, #0]
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	f000 f83f 	bl	800f3c0 <_vfiprintf_r>
 800f342:	b002      	add	sp, #8
 800f344:	f85d eb04 	ldr.w	lr, [sp], #4
 800f348:	b003      	add	sp, #12
 800f34a:	4770      	bx	lr
 800f34c:	200001d4 	.word	0x200001d4

0800f350 <abort>:
 800f350:	b508      	push	{r3, lr}
 800f352:	2006      	movs	r0, #6
 800f354:	f000 fa0c 	bl	800f770 <raise>
 800f358:	2001      	movs	r0, #1
 800f35a:	f7f2 ff65 	bl	8002228 <_exit>

0800f35e <_malloc_usable_size_r>:
 800f35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f362:	1f18      	subs	r0, r3, #4
 800f364:	2b00      	cmp	r3, #0
 800f366:	bfbc      	itt	lt
 800f368:	580b      	ldrlt	r3, [r1, r0]
 800f36a:	18c0      	addlt	r0, r0, r3
 800f36c:	4770      	bx	lr

0800f36e <__sfputc_r>:
 800f36e:	6893      	ldr	r3, [r2, #8]
 800f370:	3b01      	subs	r3, #1
 800f372:	2b00      	cmp	r3, #0
 800f374:	b410      	push	{r4}
 800f376:	6093      	str	r3, [r2, #8]
 800f378:	da08      	bge.n	800f38c <__sfputc_r+0x1e>
 800f37a:	6994      	ldr	r4, [r2, #24]
 800f37c:	42a3      	cmp	r3, r4
 800f37e:	db01      	blt.n	800f384 <__sfputc_r+0x16>
 800f380:	290a      	cmp	r1, #10
 800f382:	d103      	bne.n	800f38c <__sfputc_r+0x1e>
 800f384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f388:	f000 b934 	b.w	800f5f4 <__swbuf_r>
 800f38c:	6813      	ldr	r3, [r2, #0]
 800f38e:	1c58      	adds	r0, r3, #1
 800f390:	6010      	str	r0, [r2, #0]
 800f392:	7019      	strb	r1, [r3, #0]
 800f394:	4608      	mov	r0, r1
 800f396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <__sfputs_r>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	4606      	mov	r6, r0
 800f3a0:	460f      	mov	r7, r1
 800f3a2:	4614      	mov	r4, r2
 800f3a4:	18d5      	adds	r5, r2, r3
 800f3a6:	42ac      	cmp	r4, r5
 800f3a8:	d101      	bne.n	800f3ae <__sfputs_r+0x12>
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	e007      	b.n	800f3be <__sfputs_r+0x22>
 800f3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b2:	463a      	mov	r2, r7
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff ffda 	bl	800f36e <__sfputc_r>
 800f3ba:	1c43      	adds	r3, r0, #1
 800f3bc:	d1f3      	bne.n	800f3a6 <__sfputs_r+0xa>
 800f3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3c0 <_vfiprintf_r>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	460d      	mov	r5, r1
 800f3c6:	b09d      	sub	sp, #116	; 0x74
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	4698      	mov	r8, r3
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	b118      	cbz	r0, 800f3d8 <_vfiprintf_r+0x18>
 800f3d0:	6a03      	ldr	r3, [r0, #32]
 800f3d2:	b90b      	cbnz	r3, 800f3d8 <_vfiprintf_r+0x18>
 800f3d4:	f7fd fbe0 	bl	800cb98 <__sinit>
 800f3d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3da:	07d9      	lsls	r1, r3, #31
 800f3dc:	d405      	bmi.n	800f3ea <_vfiprintf_r+0x2a>
 800f3de:	89ab      	ldrh	r3, [r5, #12]
 800f3e0:	059a      	lsls	r2, r3, #22
 800f3e2:	d402      	bmi.n	800f3ea <_vfiprintf_r+0x2a>
 800f3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3e6:	f7fd fd55 	bl	800ce94 <__retarget_lock_acquire_recursive>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	071b      	lsls	r3, r3, #28
 800f3ee:	d501      	bpl.n	800f3f4 <_vfiprintf_r+0x34>
 800f3f0:	692b      	ldr	r3, [r5, #16]
 800f3f2:	b99b      	cbnz	r3, 800f41c <_vfiprintf_r+0x5c>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f000 f93a 	bl	800f670 <__swsetup_r>
 800f3fc:	b170      	cbz	r0, 800f41c <_vfiprintf_r+0x5c>
 800f3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f400:	07dc      	lsls	r4, r3, #31
 800f402:	d504      	bpl.n	800f40e <_vfiprintf_r+0x4e>
 800f404:	f04f 30ff 	mov.w	r0, #4294967295
 800f408:	b01d      	add	sp, #116	; 0x74
 800f40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f40e:	89ab      	ldrh	r3, [r5, #12]
 800f410:	0598      	lsls	r0, r3, #22
 800f412:	d4f7      	bmi.n	800f404 <_vfiprintf_r+0x44>
 800f414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f416:	f7fd fd3e 	bl	800ce96 <__retarget_lock_release_recursive>
 800f41a:	e7f3      	b.n	800f404 <_vfiprintf_r+0x44>
 800f41c:	2300      	movs	r3, #0
 800f41e:	9309      	str	r3, [sp, #36]	; 0x24
 800f420:	2320      	movs	r3, #32
 800f422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f426:	f8cd 800c 	str.w	r8, [sp, #12]
 800f42a:	2330      	movs	r3, #48	; 0x30
 800f42c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f5e0 <_vfiprintf_r+0x220>
 800f430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f434:	f04f 0901 	mov.w	r9, #1
 800f438:	4623      	mov	r3, r4
 800f43a:	469a      	mov	sl, r3
 800f43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f440:	b10a      	cbz	r2, 800f446 <_vfiprintf_r+0x86>
 800f442:	2a25      	cmp	r2, #37	; 0x25
 800f444:	d1f9      	bne.n	800f43a <_vfiprintf_r+0x7a>
 800f446:	ebba 0b04 	subs.w	fp, sl, r4
 800f44a:	d00b      	beq.n	800f464 <_vfiprintf_r+0xa4>
 800f44c:	465b      	mov	r3, fp
 800f44e:	4622      	mov	r2, r4
 800f450:	4629      	mov	r1, r5
 800f452:	4630      	mov	r0, r6
 800f454:	f7ff ffa2 	bl	800f39c <__sfputs_r>
 800f458:	3001      	adds	r0, #1
 800f45a:	f000 80a9 	beq.w	800f5b0 <_vfiprintf_r+0x1f0>
 800f45e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f460:	445a      	add	r2, fp
 800f462:	9209      	str	r2, [sp, #36]	; 0x24
 800f464:	f89a 3000 	ldrb.w	r3, [sl]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f000 80a1 	beq.w	800f5b0 <_vfiprintf_r+0x1f0>
 800f46e:	2300      	movs	r3, #0
 800f470:	f04f 32ff 	mov.w	r2, #4294967295
 800f474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f478:	f10a 0a01 	add.w	sl, sl, #1
 800f47c:	9304      	str	r3, [sp, #16]
 800f47e:	9307      	str	r3, [sp, #28]
 800f480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f484:	931a      	str	r3, [sp, #104]	; 0x68
 800f486:	4654      	mov	r4, sl
 800f488:	2205      	movs	r2, #5
 800f48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f48e:	4854      	ldr	r0, [pc, #336]	; (800f5e0 <_vfiprintf_r+0x220>)
 800f490:	f7f0 fe9e 	bl	80001d0 <memchr>
 800f494:	9a04      	ldr	r2, [sp, #16]
 800f496:	b9d8      	cbnz	r0, 800f4d0 <_vfiprintf_r+0x110>
 800f498:	06d1      	lsls	r1, r2, #27
 800f49a:	bf44      	itt	mi
 800f49c:	2320      	movmi	r3, #32
 800f49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4a2:	0713      	lsls	r3, r2, #28
 800f4a4:	bf44      	itt	mi
 800f4a6:	232b      	movmi	r3, #43	; 0x2b
 800f4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f4b2:	d015      	beq.n	800f4e0 <_vfiprintf_r+0x120>
 800f4b4:	9a07      	ldr	r2, [sp, #28]
 800f4b6:	4654      	mov	r4, sl
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	f04f 0c0a 	mov.w	ip, #10
 800f4be:	4621      	mov	r1, r4
 800f4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4c4:	3b30      	subs	r3, #48	; 0x30
 800f4c6:	2b09      	cmp	r3, #9
 800f4c8:	d94d      	bls.n	800f566 <_vfiprintf_r+0x1a6>
 800f4ca:	b1b0      	cbz	r0, 800f4fa <_vfiprintf_r+0x13a>
 800f4cc:	9207      	str	r2, [sp, #28]
 800f4ce:	e014      	b.n	800f4fa <_vfiprintf_r+0x13a>
 800f4d0:	eba0 0308 	sub.w	r3, r0, r8
 800f4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	9304      	str	r3, [sp, #16]
 800f4dc:	46a2      	mov	sl, r4
 800f4de:	e7d2      	b.n	800f486 <_vfiprintf_r+0xc6>
 800f4e0:	9b03      	ldr	r3, [sp, #12]
 800f4e2:	1d19      	adds	r1, r3, #4
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	9103      	str	r1, [sp, #12]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	bfbb      	ittet	lt
 800f4ec:	425b      	neglt	r3, r3
 800f4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f4f2:	9307      	strge	r3, [sp, #28]
 800f4f4:	9307      	strlt	r3, [sp, #28]
 800f4f6:	bfb8      	it	lt
 800f4f8:	9204      	strlt	r2, [sp, #16]
 800f4fa:	7823      	ldrb	r3, [r4, #0]
 800f4fc:	2b2e      	cmp	r3, #46	; 0x2e
 800f4fe:	d10c      	bne.n	800f51a <_vfiprintf_r+0x15a>
 800f500:	7863      	ldrb	r3, [r4, #1]
 800f502:	2b2a      	cmp	r3, #42	; 0x2a
 800f504:	d134      	bne.n	800f570 <_vfiprintf_r+0x1b0>
 800f506:	9b03      	ldr	r3, [sp, #12]
 800f508:	1d1a      	adds	r2, r3, #4
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	9203      	str	r2, [sp, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bfb8      	it	lt
 800f512:	f04f 33ff 	movlt.w	r3, #4294967295
 800f516:	3402      	adds	r4, #2
 800f518:	9305      	str	r3, [sp, #20]
 800f51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f5f0 <_vfiprintf_r+0x230>
 800f51e:	7821      	ldrb	r1, [r4, #0]
 800f520:	2203      	movs	r2, #3
 800f522:	4650      	mov	r0, sl
 800f524:	f7f0 fe54 	bl	80001d0 <memchr>
 800f528:	b138      	cbz	r0, 800f53a <_vfiprintf_r+0x17a>
 800f52a:	9b04      	ldr	r3, [sp, #16]
 800f52c:	eba0 000a 	sub.w	r0, r0, sl
 800f530:	2240      	movs	r2, #64	; 0x40
 800f532:	4082      	lsls	r2, r0
 800f534:	4313      	orrs	r3, r2
 800f536:	3401      	adds	r4, #1
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f53e:	4829      	ldr	r0, [pc, #164]	; (800f5e4 <_vfiprintf_r+0x224>)
 800f540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f544:	2206      	movs	r2, #6
 800f546:	f7f0 fe43 	bl	80001d0 <memchr>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d03f      	beq.n	800f5ce <_vfiprintf_r+0x20e>
 800f54e:	4b26      	ldr	r3, [pc, #152]	; (800f5e8 <_vfiprintf_r+0x228>)
 800f550:	bb1b      	cbnz	r3, 800f59a <_vfiprintf_r+0x1da>
 800f552:	9b03      	ldr	r3, [sp, #12]
 800f554:	3307      	adds	r3, #7
 800f556:	f023 0307 	bic.w	r3, r3, #7
 800f55a:	3308      	adds	r3, #8
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f560:	443b      	add	r3, r7
 800f562:	9309      	str	r3, [sp, #36]	; 0x24
 800f564:	e768      	b.n	800f438 <_vfiprintf_r+0x78>
 800f566:	fb0c 3202 	mla	r2, ip, r2, r3
 800f56a:	460c      	mov	r4, r1
 800f56c:	2001      	movs	r0, #1
 800f56e:	e7a6      	b.n	800f4be <_vfiprintf_r+0xfe>
 800f570:	2300      	movs	r3, #0
 800f572:	3401      	adds	r4, #1
 800f574:	9305      	str	r3, [sp, #20]
 800f576:	4619      	mov	r1, r3
 800f578:	f04f 0c0a 	mov.w	ip, #10
 800f57c:	4620      	mov	r0, r4
 800f57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f582:	3a30      	subs	r2, #48	; 0x30
 800f584:	2a09      	cmp	r2, #9
 800f586:	d903      	bls.n	800f590 <_vfiprintf_r+0x1d0>
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d0c6      	beq.n	800f51a <_vfiprintf_r+0x15a>
 800f58c:	9105      	str	r1, [sp, #20]
 800f58e:	e7c4      	b.n	800f51a <_vfiprintf_r+0x15a>
 800f590:	fb0c 2101 	mla	r1, ip, r1, r2
 800f594:	4604      	mov	r4, r0
 800f596:	2301      	movs	r3, #1
 800f598:	e7f0      	b.n	800f57c <_vfiprintf_r+0x1bc>
 800f59a:	ab03      	add	r3, sp, #12
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	462a      	mov	r2, r5
 800f5a0:	4b12      	ldr	r3, [pc, #72]	; (800f5ec <_vfiprintf_r+0x22c>)
 800f5a2:	a904      	add	r1, sp, #16
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	f7fc feb7 	bl	800c318 <_printf_float>
 800f5aa:	4607      	mov	r7, r0
 800f5ac:	1c78      	adds	r0, r7, #1
 800f5ae:	d1d6      	bne.n	800f55e <_vfiprintf_r+0x19e>
 800f5b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5b2:	07d9      	lsls	r1, r3, #31
 800f5b4:	d405      	bmi.n	800f5c2 <_vfiprintf_r+0x202>
 800f5b6:	89ab      	ldrh	r3, [r5, #12]
 800f5b8:	059a      	lsls	r2, r3, #22
 800f5ba:	d402      	bmi.n	800f5c2 <_vfiprintf_r+0x202>
 800f5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5be:	f7fd fc6a 	bl	800ce96 <__retarget_lock_release_recursive>
 800f5c2:	89ab      	ldrh	r3, [r5, #12]
 800f5c4:	065b      	lsls	r3, r3, #25
 800f5c6:	f53f af1d 	bmi.w	800f404 <_vfiprintf_r+0x44>
 800f5ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5cc:	e71c      	b.n	800f408 <_vfiprintf_r+0x48>
 800f5ce:	ab03      	add	r3, sp, #12
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	462a      	mov	r2, r5
 800f5d4:	4b05      	ldr	r3, [pc, #20]	; (800f5ec <_vfiprintf_r+0x22c>)
 800f5d6:	a904      	add	r1, sp, #16
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f7fd f941 	bl	800c860 <_printf_i>
 800f5de:	e7e4      	b.n	800f5aa <_vfiprintf_r+0x1ea>
 800f5e0:	0800fe7d 	.word	0x0800fe7d
 800f5e4:	0800fe87 	.word	0x0800fe87
 800f5e8:	0800c319 	.word	0x0800c319
 800f5ec:	0800f39d 	.word	0x0800f39d
 800f5f0:	0800fe83 	.word	0x0800fe83

0800f5f4 <__swbuf_r>:
 800f5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f6:	460e      	mov	r6, r1
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	b118      	cbz	r0, 800f606 <__swbuf_r+0x12>
 800f5fe:	6a03      	ldr	r3, [r0, #32]
 800f600:	b90b      	cbnz	r3, 800f606 <__swbuf_r+0x12>
 800f602:	f7fd fac9 	bl	800cb98 <__sinit>
 800f606:	69a3      	ldr	r3, [r4, #24]
 800f608:	60a3      	str	r3, [r4, #8]
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	071a      	lsls	r2, r3, #28
 800f60e:	d525      	bpl.n	800f65c <__swbuf_r+0x68>
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	b31b      	cbz	r3, 800f65c <__swbuf_r+0x68>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	6922      	ldr	r2, [r4, #16]
 800f618:	1a98      	subs	r0, r3, r2
 800f61a:	6963      	ldr	r3, [r4, #20]
 800f61c:	b2f6      	uxtb	r6, r6
 800f61e:	4283      	cmp	r3, r0
 800f620:	4637      	mov	r7, r6
 800f622:	dc04      	bgt.n	800f62e <__swbuf_r+0x3a>
 800f624:	4621      	mov	r1, r4
 800f626:	4628      	mov	r0, r5
 800f628:	f7ff fdca 	bl	800f1c0 <_fflush_r>
 800f62c:	b9e0      	cbnz	r0, 800f668 <__swbuf_r+0x74>
 800f62e:	68a3      	ldr	r3, [r4, #8]
 800f630:	3b01      	subs	r3, #1
 800f632:	60a3      	str	r3, [r4, #8]
 800f634:	6823      	ldr	r3, [r4, #0]
 800f636:	1c5a      	adds	r2, r3, #1
 800f638:	6022      	str	r2, [r4, #0]
 800f63a:	701e      	strb	r6, [r3, #0]
 800f63c:	6962      	ldr	r2, [r4, #20]
 800f63e:	1c43      	adds	r3, r0, #1
 800f640:	429a      	cmp	r2, r3
 800f642:	d004      	beq.n	800f64e <__swbuf_r+0x5a>
 800f644:	89a3      	ldrh	r3, [r4, #12]
 800f646:	07db      	lsls	r3, r3, #31
 800f648:	d506      	bpl.n	800f658 <__swbuf_r+0x64>
 800f64a:	2e0a      	cmp	r6, #10
 800f64c:	d104      	bne.n	800f658 <__swbuf_r+0x64>
 800f64e:	4621      	mov	r1, r4
 800f650:	4628      	mov	r0, r5
 800f652:	f7ff fdb5 	bl	800f1c0 <_fflush_r>
 800f656:	b938      	cbnz	r0, 800f668 <__swbuf_r+0x74>
 800f658:	4638      	mov	r0, r7
 800f65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f65c:	4621      	mov	r1, r4
 800f65e:	4628      	mov	r0, r5
 800f660:	f000 f806 	bl	800f670 <__swsetup_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	d0d5      	beq.n	800f614 <__swbuf_r+0x20>
 800f668:	f04f 37ff 	mov.w	r7, #4294967295
 800f66c:	e7f4      	b.n	800f658 <__swbuf_r+0x64>
	...

0800f670 <__swsetup_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	4b2a      	ldr	r3, [pc, #168]	; (800f71c <__swsetup_r+0xac>)
 800f674:	4605      	mov	r5, r0
 800f676:	6818      	ldr	r0, [r3, #0]
 800f678:	460c      	mov	r4, r1
 800f67a:	b118      	cbz	r0, 800f684 <__swsetup_r+0x14>
 800f67c:	6a03      	ldr	r3, [r0, #32]
 800f67e:	b90b      	cbnz	r3, 800f684 <__swsetup_r+0x14>
 800f680:	f7fd fa8a 	bl	800cb98 <__sinit>
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f68a:	0718      	lsls	r0, r3, #28
 800f68c:	d422      	bmi.n	800f6d4 <__swsetup_r+0x64>
 800f68e:	06d9      	lsls	r1, r3, #27
 800f690:	d407      	bmi.n	800f6a2 <__swsetup_r+0x32>
 800f692:	2309      	movs	r3, #9
 800f694:	602b      	str	r3, [r5, #0]
 800f696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f69a:	81a3      	strh	r3, [r4, #12]
 800f69c:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a0:	e034      	b.n	800f70c <__swsetup_r+0x9c>
 800f6a2:	0758      	lsls	r0, r3, #29
 800f6a4:	d512      	bpl.n	800f6cc <__swsetup_r+0x5c>
 800f6a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6a8:	b141      	cbz	r1, 800f6bc <__swsetup_r+0x4c>
 800f6aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6ae:	4299      	cmp	r1, r3
 800f6b0:	d002      	beq.n	800f6b8 <__swsetup_r+0x48>
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	f7fe fa82 	bl	800dbbc <_free_r>
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	6363      	str	r3, [r4, #52]	; 0x34
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6c2:	81a3      	strh	r3, [r4, #12]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	6063      	str	r3, [r4, #4]
 800f6c8:	6923      	ldr	r3, [r4, #16]
 800f6ca:	6023      	str	r3, [r4, #0]
 800f6cc:	89a3      	ldrh	r3, [r4, #12]
 800f6ce:	f043 0308 	orr.w	r3, r3, #8
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	6923      	ldr	r3, [r4, #16]
 800f6d6:	b94b      	cbnz	r3, 800f6ec <__swsetup_r+0x7c>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6e2:	d003      	beq.n	800f6ec <__swsetup_r+0x7c>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f000 f884 	bl	800f7f4 <__smakebuf_r>
 800f6ec:	89a0      	ldrh	r0, [r4, #12]
 800f6ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6f2:	f010 0301 	ands.w	r3, r0, #1
 800f6f6:	d00a      	beq.n	800f70e <__swsetup_r+0x9e>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	60a3      	str	r3, [r4, #8]
 800f6fc:	6963      	ldr	r3, [r4, #20]
 800f6fe:	425b      	negs	r3, r3
 800f700:	61a3      	str	r3, [r4, #24]
 800f702:	6923      	ldr	r3, [r4, #16]
 800f704:	b943      	cbnz	r3, 800f718 <__swsetup_r+0xa8>
 800f706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f70a:	d1c4      	bne.n	800f696 <__swsetup_r+0x26>
 800f70c:	bd38      	pop	{r3, r4, r5, pc}
 800f70e:	0781      	lsls	r1, r0, #30
 800f710:	bf58      	it	pl
 800f712:	6963      	ldrpl	r3, [r4, #20]
 800f714:	60a3      	str	r3, [r4, #8]
 800f716:	e7f4      	b.n	800f702 <__swsetup_r+0x92>
 800f718:	2000      	movs	r0, #0
 800f71a:	e7f7      	b.n	800f70c <__swsetup_r+0x9c>
 800f71c:	200001d4 	.word	0x200001d4

0800f720 <_raise_r>:
 800f720:	291f      	cmp	r1, #31
 800f722:	b538      	push	{r3, r4, r5, lr}
 800f724:	4604      	mov	r4, r0
 800f726:	460d      	mov	r5, r1
 800f728:	d904      	bls.n	800f734 <_raise_r+0x14>
 800f72a:	2316      	movs	r3, #22
 800f72c:	6003      	str	r3, [r0, #0]
 800f72e:	f04f 30ff 	mov.w	r0, #4294967295
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f736:	b112      	cbz	r2, 800f73e <_raise_r+0x1e>
 800f738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f73c:	b94b      	cbnz	r3, 800f752 <_raise_r+0x32>
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 f830 	bl	800f7a4 <_getpid_r>
 800f744:	462a      	mov	r2, r5
 800f746:	4601      	mov	r1, r0
 800f748:	4620      	mov	r0, r4
 800f74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f74e:	f000 b817 	b.w	800f780 <_kill_r>
 800f752:	2b01      	cmp	r3, #1
 800f754:	d00a      	beq.n	800f76c <_raise_r+0x4c>
 800f756:	1c59      	adds	r1, r3, #1
 800f758:	d103      	bne.n	800f762 <_raise_r+0x42>
 800f75a:	2316      	movs	r3, #22
 800f75c:	6003      	str	r3, [r0, #0]
 800f75e:	2001      	movs	r0, #1
 800f760:	e7e7      	b.n	800f732 <_raise_r+0x12>
 800f762:	2400      	movs	r4, #0
 800f764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f768:	4628      	mov	r0, r5
 800f76a:	4798      	blx	r3
 800f76c:	2000      	movs	r0, #0
 800f76e:	e7e0      	b.n	800f732 <_raise_r+0x12>

0800f770 <raise>:
 800f770:	4b02      	ldr	r3, [pc, #8]	; (800f77c <raise+0xc>)
 800f772:	4601      	mov	r1, r0
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	f7ff bfd3 	b.w	800f720 <_raise_r>
 800f77a:	bf00      	nop
 800f77c:	200001d4 	.word	0x200001d4

0800f780 <_kill_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d07      	ldr	r5, [pc, #28]	; (800f7a0 <_kill_r+0x20>)
 800f784:	2300      	movs	r3, #0
 800f786:	4604      	mov	r4, r0
 800f788:	4608      	mov	r0, r1
 800f78a:	4611      	mov	r1, r2
 800f78c:	602b      	str	r3, [r5, #0]
 800f78e:	f7f2 fd3b 	bl	8002208 <_kill>
 800f792:	1c43      	adds	r3, r0, #1
 800f794:	d102      	bne.n	800f79c <_kill_r+0x1c>
 800f796:	682b      	ldr	r3, [r5, #0]
 800f798:	b103      	cbz	r3, 800f79c <_kill_r+0x1c>
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	bd38      	pop	{r3, r4, r5, pc}
 800f79e:	bf00      	nop
 800f7a0:	20003178 	.word	0x20003178

0800f7a4 <_getpid_r>:
 800f7a4:	f7f2 bd28 	b.w	80021f8 <_getpid>

0800f7a8 <__swhatbuf_r>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	460c      	mov	r4, r1
 800f7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	b096      	sub	sp, #88	; 0x58
 800f7b4:	4615      	mov	r5, r2
 800f7b6:	461e      	mov	r6, r3
 800f7b8:	da0d      	bge.n	800f7d6 <__swhatbuf_r+0x2e>
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f7c0:	f04f 0100 	mov.w	r1, #0
 800f7c4:	bf0c      	ite	eq
 800f7c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f7ca:	2340      	movne	r3, #64	; 0x40
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	6031      	str	r1, [r6, #0]
 800f7d0:	602b      	str	r3, [r5, #0]
 800f7d2:	b016      	add	sp, #88	; 0x58
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
 800f7d6:	466a      	mov	r2, sp
 800f7d8:	f000 f848 	bl	800f86c <_fstat_r>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	dbec      	blt.n	800f7ba <__swhatbuf_r+0x12>
 800f7e0:	9901      	ldr	r1, [sp, #4]
 800f7e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f7e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f7ea:	4259      	negs	r1, r3
 800f7ec:	4159      	adcs	r1, r3
 800f7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f2:	e7eb      	b.n	800f7cc <__swhatbuf_r+0x24>

0800f7f4 <__smakebuf_r>:
 800f7f4:	898b      	ldrh	r3, [r1, #12]
 800f7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7f8:	079d      	lsls	r5, r3, #30
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460c      	mov	r4, r1
 800f7fe:	d507      	bpl.n	800f810 <__smakebuf_r+0x1c>
 800f800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	2301      	movs	r3, #1
 800f80a:	6163      	str	r3, [r4, #20]
 800f80c:	b002      	add	sp, #8
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
 800f810:	ab01      	add	r3, sp, #4
 800f812:	466a      	mov	r2, sp
 800f814:	f7ff ffc8 	bl	800f7a8 <__swhatbuf_r>
 800f818:	9900      	ldr	r1, [sp, #0]
 800f81a:	4605      	mov	r5, r0
 800f81c:	4630      	mov	r0, r6
 800f81e:	f7fe fd99 	bl	800e354 <_malloc_r>
 800f822:	b948      	cbnz	r0, 800f838 <__smakebuf_r+0x44>
 800f824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f828:	059a      	lsls	r2, r3, #22
 800f82a:	d4ef      	bmi.n	800f80c <__smakebuf_r+0x18>
 800f82c:	f023 0303 	bic.w	r3, r3, #3
 800f830:	f043 0302 	orr.w	r3, r3, #2
 800f834:	81a3      	strh	r3, [r4, #12]
 800f836:	e7e3      	b.n	800f800 <__smakebuf_r+0xc>
 800f838:	89a3      	ldrh	r3, [r4, #12]
 800f83a:	6020      	str	r0, [r4, #0]
 800f83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f840:	81a3      	strh	r3, [r4, #12]
 800f842:	9b00      	ldr	r3, [sp, #0]
 800f844:	6163      	str	r3, [r4, #20]
 800f846:	9b01      	ldr	r3, [sp, #4]
 800f848:	6120      	str	r0, [r4, #16]
 800f84a:	b15b      	cbz	r3, 800f864 <__smakebuf_r+0x70>
 800f84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f850:	4630      	mov	r0, r6
 800f852:	f000 f81d 	bl	800f890 <_isatty_r>
 800f856:	b128      	cbz	r0, 800f864 <__smakebuf_r+0x70>
 800f858:	89a3      	ldrh	r3, [r4, #12]
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	f043 0301 	orr.w	r3, r3, #1
 800f862:	81a3      	strh	r3, [r4, #12]
 800f864:	89a3      	ldrh	r3, [r4, #12]
 800f866:	431d      	orrs	r5, r3
 800f868:	81a5      	strh	r5, [r4, #12]
 800f86a:	e7cf      	b.n	800f80c <__smakebuf_r+0x18>

0800f86c <_fstat_r>:
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	4d07      	ldr	r5, [pc, #28]	; (800f88c <_fstat_r+0x20>)
 800f870:	2300      	movs	r3, #0
 800f872:	4604      	mov	r4, r0
 800f874:	4608      	mov	r0, r1
 800f876:	4611      	mov	r1, r2
 800f878:	602b      	str	r3, [r5, #0]
 800f87a:	f7f2 fd24 	bl	80022c6 <_fstat>
 800f87e:	1c43      	adds	r3, r0, #1
 800f880:	d102      	bne.n	800f888 <_fstat_r+0x1c>
 800f882:	682b      	ldr	r3, [r5, #0]
 800f884:	b103      	cbz	r3, 800f888 <_fstat_r+0x1c>
 800f886:	6023      	str	r3, [r4, #0]
 800f888:	bd38      	pop	{r3, r4, r5, pc}
 800f88a:	bf00      	nop
 800f88c:	20003178 	.word	0x20003178

0800f890 <_isatty_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d06      	ldr	r5, [pc, #24]	; (800f8ac <_isatty_r+0x1c>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	602b      	str	r3, [r5, #0]
 800f89c:	f7f2 fd23 	bl	80022e6 <_isatty>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d102      	bne.n	800f8aa <_isatty_r+0x1a>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	b103      	cbz	r3, 800f8aa <_isatty_r+0x1a>
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	bd38      	pop	{r3, r4, r5, pc}
 800f8ac:	20003178 	.word	0x20003178

0800f8b0 <_init>:
 800f8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b2:	bf00      	nop
 800f8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8b6:	bc08      	pop	{r3}
 800f8b8:	469e      	mov	lr, r3
 800f8ba:	4770      	bx	lr

0800f8bc <_fini>:
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	bf00      	nop
 800f8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c2:	bc08      	pop	{r3}
 800f8c4:	469e      	mov	lr, r3
 800f8c6:	4770      	bx	lr
